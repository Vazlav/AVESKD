Функция УбратьЛишниеСимволы(ИсходнаяСтрока) Экспорт
	
	НовСтрока = "";
	ПравильныеСимволы = "0123456789";
	
	Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимв = Сред(ИсходнаяСтрока, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			НовСтрока = НовСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовСтрока;
	
КонецФункции 


Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ЗаполнитьНастройкиПоУмолчанию();
		
	Иначе 		
		НастрПостроителя = ЗначениеИзСтрокиВнутр(НастройкиПостроителя);
		
		Если ТипЗнч(НастрПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
			Построитель.УстановитьНастройки(НастрПостроителя);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПоУмолчанию()

	Построитель.ДоступныеПоля.Добавить("Товар.ГруппаНаценки",	"Товар.ГруппаНаценки");
	Построитель.ДоступныеПоля.Добавить("Товар.СпецПроект",		"Товар.СпецПроект");
	Построитель.ДоступныеПоля.Добавить("Товар.УчаствуетВАП",	"Товар.УчаствуетВАП");
	Построитель.ДоступныеПоля.Добавить("Товар.ТипДляЦО",		"Товар.ТипДляЦО");
	Построитель.ДоступныеПоля.Добавить("Товар.Бренд",			"Товар.Бренд");
	Построитель.ДоступныеПоля.Добавить("Аптека.Фирма",			"Аптека.Фирма");
	Построитель.ДоступныеПоля.Добавить("Поставщик.ОтсрочкаПлатежа",	"Поставщик.ОтсрочкаПлатежа");
	
	
    ПострОтбор = Построитель.Отбор;
	
    ПострОтбор.Добавить("Товар.ГруппаНаценки", "ТоварГруппаНаценки", "Товар.ГруппаНаценки");
    ПострОтбор["ТоварГруппаНаценки"].Использование = Ложь;
    ПострОтбор["ТоварГруппаНаценки"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("Товар.СпецПроект", "ТоварСпецПроект", "Товар.СпецПроект");
    ПострОтбор["ТоварСпецПроект"].Использование = Ложь;
    ПострОтбор["ТоварСпецПроект"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("Товар.УчаствуетВАП", "ТоварУчаствуетВАП", "Товар.УчаствуетВАП");
    ПострОтбор["ТоварУчаствуетВАП"].Использование = Ложь;
    ПострОтбор["ТоварУчаствуетВАП"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("Товар.ТипДляЦО", "ТоварТипДляЦО", "Товар.ТипДляЦО");
    ПострОтбор["ТоварТипДляЦО"].Использование = Ложь;
    ПострОтбор["ТоварТипДляЦО"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("Товар.Бренд", "ТоварБренд", "Товар.Бренд");
    ПострОтбор["ТоварБренд"].Использование = Ложь;
    ПострОтбор["ТоварБренд"].ВидСравнения = ВидСравнения.Равно;
	
	
	ПострОтбор.Добавить("Аптека.Фирма", "АптекаФирма", "Аптека.Фирма");
    ПострОтбор["АптекаФирма"].Использование = Ложь;
    ПострОтбор["АптекаФирма"].ВидСравнения = ВидСравнения.Равно;
	

	ПострОтбор.Добавить("ДатаПоступления", "ДатаПоступления", "ДатаПоступления");
    ПострОтбор["ДатаПоступления"].Использование = Ложь;
    ПострОтбор["ДатаПоступления"].ВидСравнения = ВидСравнения.Равно; 	
	
	ПострОтбор.Добавить("СрокГодности", "СрокГодности", "СрокГодности");
    ПострОтбор["СрокГодности"].Использование = Ложь;
    ПострОтбор["СрокГодности"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("Поставщик", "Поставщик", "Поставщик");
    ПострОтбор["Поставщик"].Использование = Ложь;
    ПострОтбор["Поставщик"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("Поставщик.КоличествоДнейДоставки", "ПоставщикКоличествоДнейДоставки", "Поставщик.КоличествоДнейДоставки");
    ПострОтбор["ПоставщикКоличествоДнейДоставки"].Использование = Ложь;
    ПострОтбор["ПоставщикКоличествоДнейДоставки"].ВидСравнения = ВидСравнения.БольшеИлиРавно;
	
	
	ПострОтбор.Добавить("РозничнаяЦена", "РозничнаяЦена", "РозничнаяЦена");
    ПострОтбор["РозничнаяЦена"].Использование = Ложь;
    ПострОтбор["РозничнаяЦена"].ВидСравнения = ВидСравнения.Равно;
	
	
	ПострОтбор.Добавить("ДнейПродаж", "ДнейПродаж", "ДнейПродаж");
    ПострОтбор["ДнейПродаж"].Использование = Ложь;
    ПострОтбор["ДнейПродаж"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("КоличествоПродаж", "КоличествоПродаж", "КоличествоПродаж");
    ПострОтбор["КоличествоПродаж"].Использование = Ложь;
    ПострОтбор["КоличествоПродаж"].ВидСравнения = ВидСравнения.Равно;
	
	ПострОтбор.Добавить("ПартияРодитель", "ПартияРодитель", "ПартияРодитель");
    ПострОтбор["ПартияРодитель"].Использование = Ложь;
    ПострОтбор["ПартияРодитель"].ВидСравнения = ВидСравнения.Равно;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	НастройкиПостроителя = ЗначениеВСтрокуВнутр(Построитель.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));
	
КонецПроцедуры

Процедура КоманднаяПанельОтборакнЗагрузитьТоварыИзФайла(Кнопка)
	
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаЗагрузкиТоваров");
	ФайлСпискаТоваров = Форма.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ФайлСпискаТоваров) Тогда
		Сообщить("Не указан путь к файлу списка товаров!");
		Возврат;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ФайлСпискаТоваров); 	
	Если Не ВыбФайл.Существует() Тогда
		Сообщить("Не найден файл " + ФайлСпискаТоваров);
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");	
	Исключение
		Сообщить ("Не удалось запустить Excel");
		Возврат;
	КонецПопытки;
	
  
	Книга = Excel.Workbooks.Open(ФайлСпискаТоваров);	
	Лист = Книга.WorkSheets(1);	
	ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	
	СписокТоваров=Новый СписокЗначений();
	
	Для Строка = 2 По ВсегоСтрок Цикл
		
		Если Строка%10 = 0 Тогда
			Состояние("прочитано кодов: " + Строка + " из " + ВсегоСтрок);
		КонецЕсли;
		
		КодТовара = УбратьЛишниеСимволы(СокрЛП(Лист.Cells(Строка,1).Value));		
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(КодТовара);
		
		Если ЗначениеЗаполнено(Товар) Тогда	
			
			СписокТоваров.Добавить(Товар);
			
		Иначе
			
			Сообщить("Не найден товар по коду: " + КодТовара);	
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	Excel.Application.Quit();		
	
	
	Сообщить("Считано из файла "+СписокТоваров.Количество()+" кодов.");
	
	
	ОтборПоКодуТОвара=Построитель.Отбор.Найти("Товар");
	
	Если ОтборПоКодуТОвара=Неопределено ТОгда
		ОтборПоКодуТОвара=Построитель.Отбор.Добавить("Товар");
	КонецЕсли;	
	
	ОтборПоКодуТОвара.ВидСравнения=ВидСравнения.ВСписке;
	ОтборПоКодуТОвара.Использование=Истина;
	ОтборПоКодуТОвара.Значение=СписокТоваров;

КонецПроцедуры

Процедура КоманднаяПанельОтборакнЗагрузитьАптекиИзФайла(Кнопка)
	
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаЗагрузкиТоваров");
	ФайлСпискаТоваров = Форма.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ФайлСпискаТоваров) Тогда
		Сообщить("Не указан путь к файлу списка товаров!");
		Возврат;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ФайлСпискаТоваров); 	
	Если Не ВыбФайл.Существует() Тогда
		Сообщить("Не найден файл " + ФайлСпискаТоваров);
		Возврат;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");	
	Исключение
		Сообщить ("Не удалось запустить Excel");
		Возврат;
	КонецПопытки;
	
  
	Книга = Excel.Workbooks.Open(ФайлСпискаТоваров);	
	Лист = Книга.WorkSheets(1);	
	ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	
	СписокАптек=Новый СписокЗначений();
	
	Для Строка = 2 По ВсегоСтрок Цикл
		
		Если Строка%10 = 0 Тогда
			Состояние("прочитано кодов: " + Строка + " из " + ВсегоСтрок);
		КонецЕсли;
		
		КодАптеки = УбратьЛишниеСимволы(СокрЛП(Лист.Cells(Строка,1).Value));		
		Аптека = Справочники.МестаХранения.НайтиПоКоду(КодАптеки);
		
		Если ЗначениеЗаполнено(Аптека) Тогда	
			
			СписокАптек.Добавить(Аптека);
			
		Иначе
			
			Сообщить("Не найдена аптека по коду: " + КодАптеки);	
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	Excel.Application.Quit();		
	
	
	Сообщить("Считано из файла "+СписокАптек.Количество()+" кодов.");
	
	
	ОтборПоКодуАптеки = Построитель.Отбор.Найти("Аптека");
	
	Если ОтборПоКодуАптеки = Неопределено ТОгда
		ОтборПоКодуАптеки = Построитель.Отбор.Добавить("Аптека");
	КонецЕсли;	
	
	ОтборПоКодуАптеки.ВидСравнения	= ВидСравнения.ВСписке;
	ОтборПоКодуАптеки.Использование	= Истина;
	ОтборПоКодуАптеки.Значение		= СписокАптек;
	
КонецПроцедуры

//Для заполнения отбора построителя
Построитель.Текст =
"ВЫБРАТЬ
|	0 КАК Поле1
|ИЗ
|	РегистрНакопления.ПартииЖНВЛС.Остатки КАК ПартииЖНВЛСОстатки
|{ГДЕ
|	ПартииЖНВЛСОстатки.Товар.* КАК Товар,
|	ПартииЖНВЛСОстатки.Склад.* КАК Аптека,
|	ПартииЖНВЛСОстатки.Партия.Поставщик.* КАК Поставщик,
|	ПартииЖНВЛСОстатки.Партия.ДатаПоступления КАК ДатаПоступления,
|	ПартииЖНВЛСОстатки.Партия.СрокГодности КАК СрокГодности,
|	ПартииЖНВЛСОстатки.Партия.ПартияРодитель КАК ПартияРодитель,
|	(0) КАК РозничнаяЦена,
|	(0) КАК КоличествоПродаж,
|	(0) КАК ДнейПродаж}";
