перем Пост Экспорт;
перем АДО;

Процедура ПодключитьЦентральнуюБазу(АдоЦБ) Экспорт// ---- by  GtG ---- 
	//---------------------- ПОДКЛЮЧАЕМСЯ К БАЗЕ ЧЕРЕЗ ADO -------------------GTG->-
	АдоЦБ=Новый COMОбъект ("AdoDB.Connection");
//	АдоЦБ_КоннСтр="provider=SQLOLEDB;data source=(local);database=A5_sklad;Password=;User ID=sa";
	АдоЦБ_КоннСтр="DSN=A5_sklad;Password=;User ID=sa";
	Попытка
		АдоЦБ.Open(АдоЦБ_КоннСтр);
	Исключение
		Сообщить("Не удалось подключиться к базе или не настроен DSN=A5_sklad");
		Возврат;
	КонецПопытки; 
	//------------------------------------------------------------------------GTG-<-  
КонецПроцедуры //  ПодключитьЦентральнуюБазу_АДО

//======================================================================

Процедура ВыбратьСтрокиПрайса()
	
	////------------------<Осуществляем выборку загруженной информации>-------------------Virus----11.12.2007
	//ТППрайс.Очистить();
	//
	//ТХТ="Select count(*) from Prices where PostID = " + Формат(Поставщик.Ссылка.Код,"ЧГ=0") + "";
	//
	//РС=ОМ8_ВыполнитьSQLЗапросКВнешнейБД(АДО,ТХТ,0,1,0);
	//КолвоСтрок=Рс.Fields(0).Value;
	//РС.Close();
	//
	//ТХТ="Select Prices.GoodCode, Prices.GoodName,Prices.Price,Prices.Qnt from Prices where PostID = " + Формат(Поставщик.Ссылка.Код,"ЧГ=0") + " 
	//|Order by GoodName";
	//
	//РС=ОМ8_ВыполнитьSQLЗапросКВнешнейБД(АДО,ТХТ,0,1,0);
	//
	//Попытка 
	//	РС. MoveFirst();
	//Исключение
	//	ПРедупреждение("Не удалось получить загруженный прайс");
	//	Возврат;
	//КонецПопытки; 
	//
	//
	//ТЗ= Новый ТАблицаЗначений ;
	//
	//ТЗ.Колонки.Добавить("Код");
	//ТЗ.Колонки.Добавить("Наименование");
	//ТЗ.Колонки.Добавить("Количество");
	//ТЗ.Колонки.Добавить("Цена");
	//
	//
	//ЭлементыФормы.Индикатор1.Видимость=Истина;
	//ЭлементыФормы.Индикатор1.Значение=0;
	//ЭлементыФормы.Индикатор1.МаксимальноеЗначение=КолвоСтрок;
	//
	////------------------<заполняем  временную тз данными из 2005-й>-------------------GtG----07.12.2007
	//Пока РС.EOF()=0 Цикл
	//	
	//	ЭлементыФормы.Индикатор1.Значение=ЭлементыФормы.Индикатор1.Значение+1;
	//	Стр=ТЗ.Добавить();
	//	
	//	Стр.Код=РС.Fields(0).VAlue;
	//	Стр.Наименование=РС.Fields(1).VAlue;
	//	Стр.Цена=РС.Fields(2).VAlue;
	//	Стр.Количество=РС.Fields(3).VAlue;
	//	
	//	Если ЭлементыФормы.Индикатор1.Значение%1000=0 ТОгда
	//		Состояние("Считано "+ЭлементыФормы.Индикатор1.Значение+" строк номенклатуры 2005");
	//	КонецЕсли; 	
	//	РС. MoveNext(); 
	//КонецЦикла;
	//
	//РС.Close();
	//
	//ТЗ.Сортировать("Наименование");
	//
	//ЭлементыФормы.Индикатор1.Видимость=Ложь;
	Запрос = Новый Запрос;
	Если Поставщик.РаботаетЧерезКонвертер = Истина и Поставщик.Код366 > 0 Тогда
		ТХТ = "ВЫБРАТЬ ПЕРВЫЕ 1
		      |	КаталогПрайсЛистов366.КодПрайсЛиста
		      |ИЗ
		      |	РегистрСведений.КаталогПрайсЛистов366 КАК КаталогПрайсЛистов366
		      |ГДЕ
		      |	КаталогПрайсЛистов366.КодПоставщика = &КодПоставщика";
			  
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("КодПоставщика",Поставщик.Код366);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		ТХТ = "ВЫБРАТЬ
		      |	ПрайсЛисты366.КодИндивидуальный как Код,
		      |	ПрайсЛисты366.Наименование как Товар,
		      |	ПрайсЛисты366.Цена,
		      |	ПрайсЛисты366.Остаток как Количество,
		      |	ПрайсЛисты366.СрокГодности
		      |ИЗ
		      |	РегистрСведений.ПрайсЛисты366 КАК ПрайсЛисты366
		      |ГДЕ
		      |	ПрайсЛисты366.КодПрайсЛиста = &КодПрайсЛиста";
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("КодПрайсЛиста",Выборка.КодПрайсЛиста);
		ТППрайс = Запрос.Выполнить().Выгрузить();
		ЭлементыФормы.ТППрайс.СоздатьКолонки();	
		
		ЭлементыФормы.ТППрайс.Колонки.Код.Ширина = 10;
		ЭлементыФормы.ТППрайс.Колонки.Товар.Ширина = 50;
		ЭлементыФормы.ТППрайс.Колонки.СрокГодности.Ширина = 10;
		ЭлементыФормы.ТППрайс.Колонки.Количество.Ширина = 6;
		ЭлементыФормы.ТППрайс.Колонки.Цена.Ширина = 6;
		
	Иначе
		ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Прайсы.Код,
		|	Прайсы.Товар КАК Товар,
		|	Прайсы.Производитель,
		|	Прайсы.Количество,
		|	Прайсы.Цена
		|ИЗ
		|	РегистрСведений.Прайсы КАК Прайсы
		|ГДЕ
		|	Прайсы.Поставщик = &Поставщик
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товар";
		
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Поставщик",Поставщик);
		ТППрайс = Запрос.Выполнить().Выгрузить();
		
		ЭлементыФормы.ТППрайс.СоздатьКолонки();	
		
		ЭлементыФормы.ТППрайс.Колонки.Код.Ширина = 6;
		ЭлементыФормы.ТППрайс.Колонки.Товар.Ширина = 50;
		ЭлементыФормы.ТППрайс.Колонки.Производитель.Ширина = 50;
		ЭлементыФормы.ТППрайс.Колонки.Количество.Ширина = 6;
		ЭлементыФормы.ТППрайс.Колонки.Цена.Ширина = 6;
		
	КонецЕсли;
	

	
КонецПроцедуры //ВыбратьСтрокиПрайса()



Функция НайтиУзел(Объект,НазваниеУзла)
	Пока Объект.Прочитать() Цикл
		Если объект.ТипУзла = ТипУзлаXML.НачалоЭлемента и объект.Имя = НазваниеУзла Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
КонецФункции


Функция ПолучитьТекстПоУзлу(Объект,НазваниеУзла)
	Пока Объект.Прочитать() Цикл
		Если Объект.ТипУзла = ТипУзлаXML.НачалоЭлемента и Объект.Имя = НазваниеУзла Тогда
			Объект.Прочитать();
			Возврат Объект.Значение;
		КонецЕсли;
	КонецЦикла;	
КонецФункции

Функция ПолучитьТекстПоЗначениюСвойств(Объект,НазваниеСвойства)
	
	Пока Объект.Прочитать() Цикл
		Если Объект.ТипУзла = ТипУзлаXML.Текст и Объект.Значение = НазваниеСвойства Тогда
			Возврат ПолучитьТекстПоУзлу(Объект,"Значение");
		КонецЕсли;
	КонецЦикла;	
	
КонецФункции

Функция ПолучитьСрокПоЗначениюСвойств(Объект,НазваниеСвойства)
	
	Пока Объект.Прочитать() Цикл
		Если Объект.ТипУзла = ТипУзлаXML.НачалоЭлемента и Объект.Имя = "Цены" Тогда
			Прервать;
		КонецЕсли;
		Если Объект.ТипУзла = ТипУзлаXML.Текст и Объект.Значение = НазваниеСвойства Тогда
			Возврат ПолучитьТекстПоУзлу(Объект,"Значение");
		КонецЕсли;
	КонецЦикла;	
	
	Возврат "00000000";
	
КонецФункции



Процедура КонвертироватьXMLвDBF(Поставщик)
	
	Файл = Новый Файл(СокрЛП(Поставщик.ФайлПрайсЛиста));
	//Находим все архивные прайс-листы
	Файлы = НайтиФайлы(Файл.Путь,"offer*.zip");
	КоличествоПрайсов = Файлы.Количество();
	Если КоличествоПрайсов = 0 Тогда
		Возврат;
	КонецЕсли;
	//берем последний прайс, остальные перемещаем в бэкап	
	Для н = 0 по КоличествоПрайсов - 1 Цикл
		стр = Файлы.Получить(н);
		Если н = КоличествоПрайсов - 1 Тогда
			стрИмяФайла = стр.ПолноеИмя;
		Иначе
			Если ОМ17_ПроверитьИСоздатьКаталог(стр.Путь + "BackUp") = Истина Тогда
				ПереместитьФайл(стр.ПолноеИмя,стр.Путь + "BackUp\" + стр.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//Распаковываем архив прайса
	ЗИП= Новый ЧтениеZipФайла;
	Попытка
		ЗИП.Открыть(стрИмяФайла);
		ЗИП.ИзвлечьВсе(Файл.Путь,РежимВосстановленияПутейФайловZIP.НеВосстанавливать);	
	Исключение
		Сообщить("БИТЫЙ АРХИВ! "+ОписаниеОшибки());
		Возврат;  // несуществующий  файл
	КонецПопытки;
	
	//после распаковки находим сам прайс-лист в XML формате
	ФайлXML = НайтиФайлы(Файл.Путь,"offer*.xml");
	Если ФайлXML.Количество() = 0 Тогда
		Сообщить("Здесь " + Файл.Путь + " прайса в XML не нашли... ");
		Возврат;
	КонецЕсли;
	объектХМЛ = Новый ЧтениеXML();
	объектХМЛ.ОткрытьФайл(ФайлXML.Получить(0).ПолноеИмя);
	ДБФ = Новый XBASE;
	ДБФ.Кодировка = КодировкаXBase.OEM;
	ДБФ.поля.Добавить("CODEPST","S",15);
	ДБФ.поля.Добавить("NAME","S",150);
	ДБФ.поля.Добавить("PRICE","N",12,2);
	ДБФ.поля.Добавить("QNT","N",12,2);
	ДБФ.поля.Добавить("FIRM","S",100);
	ДБФ.поля.Добавить("GDATE","D");
	ДБФ.поля.Добавить("MIN_QNT","N",12,0);

	ДБФ.СоздатьФайл(ФайлXML.Получить(0).Путь + "\price.dbf");	
	
	//Вытащим из XML код прайс-листа  и пропишем его в поставщике
	КодПрайса = ПолучитьТекстПоУзлу(объектХМЛ,"Ид");
	Объект = Поставщик.ПолучитьОбъект();
	Объект.КодПрайса = КодПрайса;
	Объект.Записать();
	
	//А теперь поехали заполнять дбф файл товаром из XML
	Пока объектХМЛ.Прочитать() Цикл
		//Если НайтиУзел(объектХМЛ,"Предложение") = Истина Тогда
		Если объектХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента и объектХМЛ.Имя = "Предложение" Тогда	
			//Пошел новый документ
			КодТовара	= ПолучитьТекстПоУзлу(объектХМЛ,"Ид");
			Товар		= ПолучитьТекстПоУзлу(объектХМЛ,"Наименование");
			Изготовитель= ПолучитьТекстПоУзлу(объектХМЛ,"ОфициальноеНаименование");
			
			СрокГодности = Дата(1,1,1);
			Кратность = 1;
			Цена = 0;
			Количество = 0;
			
			Пока объектХМЛ.Прочитать() Цикл
				Если объектХМЛ.ТипУзла = ТипУзлаXML.Текст и объектХМЛ.Значение = "EXP_DATE" Тогда
					СрокГодности = Дата(СтрЗаменить(ПолучитьТекстПоУзлу(объектХМЛ,"Значение"),"-",""));
				ИначеЕсли объектХМЛ.ТипУзла = ТипУзлаXML.Текст и объектХМЛ.Значение = "DIVISIBLE_QTY" Тогда
					Кратность = ПолучитьТекстПоУзлу(объектХМЛ,"Значение");					
				ИначеЕсли объектХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента и объектХМЛ.Имя = "ЦенаЗаЕдиницу" Тогда
					объектХМЛ.Прочитать();
					Цена = объектХМЛ.Значение;
				ИначеЕсли объектХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента и объектХМЛ.Имя = "Количество" Тогда
					объектХМЛ.Прочитать();
					Количество = объектХМЛ.Значение;
				КонецЕсли; 	
				
				Если объектХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и объектХМЛ.Имя = "Предложение" Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			
			//СрокГодности = Дата(СтрЗаменить(ПолучитьСрокПоЗначениюСвойств(объектХМЛ,"EXP_DATE"),"-",""));

			//Цена		= ПолучитьТекстПоУзлу(объектХМЛ,"ЦенаЗаЕдиницу");
			//Количество	= ПолучитьТекстПоУзлу(объектХМЛ,"Количество");
			
			//пишем в файл
			ДБФ.Добавить();
			ДБФ.CODEPST = КодТовара;
			ДБФ.NAME	= Товар;
			ДБФ.FIRM	= Изготовитель;
			ДБФ.PRICE	= Цена;
			ДБФ.QNT		= Количество;
			ДБФ.GDATE   = СрокГодности;
			ДБФ.MIN_QNT = Кратность;

			ДБФ.Записать();
		КонецЕсли;	
		
	КонецЦикла;
	объектХМЛ.Закрыть();
	ДБФ.ЗакрытьФайл();
	//Перемещаем zip архив в папку BackUp
	ТекФайл = Новый Файл(стрИмяФайла);
	Если ОМ17_ПроверитьИСоздатьКаталог(ТекФайл.Путь + "BackUp") = Истина Тогда
		ПереместитьФайл(стрИмяФайла,ТекФайл.Путь + "BackUp\" + ТекФайл.Имя);
	КонецЕсли;	
	//Удаляем распакованные файлы XML
	УдалитьФайлы(ФайлXML.Получить(0).Путь,"*.xml");
	
КонецПроцедуры



Функция ЗагрузитьПрайсПоставщикаСНовойСхемойПоКатрену(Поставщик,ПараметрыСоединенияСВнешнимИсточником,СообщениеОбОшибке="") 
	
	КоэффПриведения =  Поставщик.КоэффициентПриведенияЦены;
	КоэффЦеныНаБазовыйПрайс = Поставщик.КоэффициентЦеныНаБазовыйПрайсПоставщика;
	
	Если Поставщик.РаботаетЧерезТорговуюПлощадку = Истина Тогда
		//ИдСессии	= ПараметрыСоединенияСВнешнимИсточником["ИдСессии"];
		Ключ		= ПараметрыСоединенияСВнешнимИсточником["КлючСессии"];
		ИННФирмы	= ПараметрыСоединенияСВнешнимИсточником["ИННФирмы"];
		Соединение	= ПараметрыСоединенияСВнешнимИсточником["Соединение"];
		
		ТХТ = "select * from users.get_last_price('"+Ключ+"', '"+ИННФирмы+"', '"+Поставщик.ИНН+"')";
		RecordSet = ОМ_ТП.ВыполнитьЗапросНаВнешнемИсточнике(Соединение,ТХТ);
		Если RecordSet = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТЗВрем = Новый ТаблицаЗначений;
		ТЗВрем.Колонки.Добавить("Код");
		ТЗВрем.Колонки.Добавить("Товар");
		ТЗВрем.Колонки.Добавить("Производитель");
		ТЗВрем.Колонки.Добавить("Количество");
		ТЗВрем.Колонки.Добавить("СрокГодности");
		ТЗВрем.Колонки.Добавить("ПартияПоставщика");
		ТЗВрем.Колонки.Добавить("Кратность");
		ТЗВрем.Колонки.Добавить("Цена");
		ТЗВрем.Колонки.Добавить("ЦенаПриведенная");

	
		Пока Не RecordSet.EOF() Цикл
			стр = ТЗВрем.Добавить();
			стр.Код				=RecordSet.Fields("code").VAlue;
			стр.Товар			=RecordSet.Fields("name").VAlue;
			стр.Производитель	=RecordSet.Fields("vendor").VAlue;
			стр.Количество		=RecordSet.Fields("qnt").VAlue;
			стр.СрокГодности	=RecordSet.Fields("date_valid").VAlue;
			стр.ПартияПоставщика=RecordSet.Fields("part").VAlue;
			стр.Кратность		=RecordSet.Fields("qnt_krat").VAlue;
			Цена = RecordSet.Fields("cena_s_nds").VAlue;
			стр.Цена			= Окр(Цена*(?(КоэффЦеныНаБазовыйПрайс=0,1,КоэффЦеныНаБазовыйПрайс)),2);
			стр.ЦенаПриведенная	= Окр(Цена*(?(КоэффПриведения=0,1,КоэффПриведения)),2);			
			RecordSet.MoveNext();
		КонецЦикла;		
		
		Если ТЗВрем.Количество() = 0 Тогда
			СообщениеОбОшибке = "В прайс-листе поставщика " + Поставщик + " отсутствуют записи.";
			Возврат Ложь;	
		КонецЕсли;
		
		ТЗВрем.Свернуть("Код,Товар,Производитель,СрокГодности,ПартияПоставщика,Кратность,Цена,ЦенаПриведенная","Количество");
		
		НаборЗаписей = РегистрыСведений.Прайсы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Поставщик.Установить(Поставщик); 
		
		Для каждого стр из ТЗВрем Цикл
			
			Запись = НаборЗаписей.Добавить(); 
			Запись.Поставщик = Поставщик;
			
			Запись.Код				= стр.Код;
			Запись.Товар			= стр.Товар;
			Запись.Производитель	= стр.Производитель;
			Запись.Количество		= стр.Количество;
			Запись.СрокГодности		= стр.СрокГодности;
			Запись.ПартияПоставщика	= стр.ПартияПоставщика;
			Запись.Кратность		= стр.Кратность;
			Запись.Цена				= стр.Цена;
			Запись.ЦенаПриведенная	= стр.ЦенаПриведенная;
			

		КонецЦикла;	
		
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Прайсы");
			БлокировкаМатрицы.УстановитьЗначение("Поставщик",Поставщик);
			Блокировка.Заблокировать();	

			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();

		
	Иначе
		СписокПолей = Новый СписокЗначений;
		СтруктураПолей = Новый Структура;
		Выборка = Справочники.СтруктураФайлов.Выбрать(, Поставщик);
		РультатВыборкиСледующего=Выборка.Следующий();
		
		Для каждого поля из Выборка.Прайс Цикл
			СтруктураПолей.Вставить(поля.ПолеТЧ,поля.ИмяПоля);
			СписокПолей.Добавить(поля.ИмяПоля);
		КонецЦикла;
		
		Если Поставщик.Код = 12 Тогда
			СтруктураПолей.Вставить("Дельта","Delta");
			СписокПолей.Добавить("Delta");
		КонецЕсли;
		
		
		ФайлЗагрузки = СокрЛП(Поставщик.ФайлПрайсЛиста);
		
		ФайлОбъект = Новый Файл(ФайлЗагрузки);
		Если НЕ ФайлОбъект.Существует() Тогда
			СообщениеОбОшибке = "Не существует файла прайса: " + ФайлЗагрузки + "  >> " + Поставщик;	
			Возврат Ложь;
		КонецЕсли;
		
		Если Выборка.ТипФайлаПрайса <> Перечисления.РасширенияФайлов.dbf Тогда
			Если Выборка.ТипФайлаПрайса = Перечисления.РасширенияФайлов.sst Тогда
				НовыйФайл = ОМ21_ЗаказыПоставщикам.ОМ21_ПреобразоватьТекстВДБФ(Поставщик,ФайлЗагрузки);
				Если НовыйФайл = "" Тогда
					СообщениеОбОшибке = "Не удалось преобразовать прайс в DBF: " + ФайлЗагрузки + "  >> " + Поставщик;
					Возврат Ложь;
				Иначе
					ФайлЗагрузки = НовыйФайл;
				КонецЕсли;
			Иначе
				СообщениеОбОшибке = "Тип прайса не DBF: " + ФайлЗагрузки + "  >> " + Поставщик;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//Проверка на случай, когда поставщик еще файл не до конца выгрузил на сервер
		ОК = Ложь;
		Для к=0 по 5 Цикл
			Попытка
				ПереместитьФайл(ФайлЗагрузки,ФайлЗагрузки);
				ОК = Истина;
				Прервать;
			Исключение
				Предупреждение("Ожидание блокировки файла: " + ФайлЗагрузки,2);
			КонецПопытки;
		КонецЦикла;		
		
		Если ОК = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		//конец проверки на недовыгруженный файл	
		
		//Промерим на длину 8 символов
		ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
		Длина = СтрДлина(ФайлОбъектНовый.Имя);
		ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
		
		Если Длина > 12 Тогда
			Уник = Новый УникальныйИдентификатор;
			Уник = Прав(Уник,8);
			НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
			Попытка
				КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
		КонецЕсли;	
		
		
		
		ДБФ= Новый  XBase;
		
		Попытка
			ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
		Исключение
			СообщениеОбОшибке = "Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ";	
			Возврат Ложь;
		КонецПопытки;
		
		Если СокрЛП(Выборка.КодировкаПрайса) = "OEM" или ПустаяСтрока(Выборка.КодировкаПрайса) Тогда
			ДБФ.Кодировка = КодировкаXBase.OEM;
		Иначе
			ДБФ.Кодировка = КодировкаXBase.ANSI;
		КонецЕсли;
		
		//Проверим файл прайса на наличие необходимых полей по списку
		Если ОМ20_Чернов.DBF_НаличиеПолей(ДБФ,СписокПолей,1) = Ложь Тогда
			СообщениеОбОшибке = "Не прошла проверка на наличие полей в прайсе поставщика " + Поставщик;	
			Возврат Ложь;
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		
		Если ОМ20_Чернов.DBF_СкопироватьСтруктуруИДанныеВТЗ(ДБФ, ТЗ, СписокПолей,,,1) = Ложь Тогда
			СообщениеОбОшибке = "Не удалось скопировать данные в ТЗ:  " + Поставщик;	
			Возврат Ложь;	
		КонецЕсли;
		
		НашлиПоле=СписокПолей.НайтиПоЗначению(СтруктураПолей["Количество"]);
		Если НашлиПоле = Неопределено Тогда
			СообщениеОбОшибке = "Где-то потерялось поле <Количество> в настройках " + Поставщик;	
			Возврат Ложь;	
		Иначе
			СписокПолей.Удалить(НашлиПоле);
		КонецЕсли;
		
		ТЗ.Свернуть(ОМ20_Чернов.СЗ_ВСтрокуСРазделителем(СписокПолей),СтруктураПолей["Количество"]);
		
		// 20.10.2010 17:00 Чернов
		Для каждого стр из СтруктураПолей Цикл
			Если стр.Ключ = "Производитель" Тогда
				ОМ20_Чернов.ЗагрузитьНаименованияПроизводителей(ТЗ, СокрЛП(стр.Значение));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// 20.10.2010 17:00 Чернов
		
		ПоставщикКатрен = Справочники.Поставщики.НайтиПоКоду(12);
		
		НаборЗаписей = РегистрыСведений.Прайсы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Поставщик.Установить(Поставщик); 
		
		Для каждого стрТЗ из ТЗ Цикл 
			ОбработкаПрерыванияПользователя();
			Запись = НаборЗаписей.Добавить(); 
			Запись.Поставщик = Поставщик;
			Для каждого стр из СтруктураПолей Цикл
				Если стр.Ключ = "Код" Тогда
					Значение = Формат(стрТЗ[стр.Значение],"ЧГ=0");
				ИначеЕсли стр.Ключ = "СрокГодности" Тогда
					Значение = ОМ20_Чернов.Стр_ПолучитьДату(стрТЗ[стр.Значение]);
				Иначе
					Значение = стрТЗ[стр.Значение];
				КонецЕсли;
				
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;
				Если  стр.Ключ = "Дельта" Тогда
				Иначе
					Запись[стр.Ключ] = Значение;
				КонецЕсли;
			КонецЦикла;
			Запись.Цена				= Окр(Запись.Цена*(?(КоэффЦеныНаБазовыйПрайс=0,1,КоэффЦеныНаБазовыйПрайс)),2);
			Если Поставщик = ПоставщикКатрен и стрТЗ.DELTA = 1 Тогда
				Запись.ЦенаПриведенная	= Окр(Запись.Цена*0.97,2);
			Иначе
				Запись.ЦенаПриведенная	= Окр(Запись.Цена*(?(КоэффПриведения=0,1,КоэффПриведения)),2);
			КонецЕсли;
			
		КонецЦикла;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Прайсы");
			БлокировкаМатрицы.УстановитьЗначение("Поставщик",Поставщик);
			Блокировка.Заблокировать();	

			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();

		Попытка
			ДБФ.ЗакрытьФайл();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Длина > 12 Тогда
		Попытка
			УдалитьФайлы(НовоеПолноеИмяФайла);
		Исключение
			Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
		КонецПопытки;                       
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

 
//======================================================================
Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	
	//	//Для протека особый гемор
	//Если Поставщик.Код = 2 Тогда
	//	КонвертироватьXMLвDBF(Поставщик);
	//КонецЕсли;
	//	
	//
	//	//------------------<Удаляем из таблицы прайсов информацию о данном поставщике>-------------------Virus----11.12.2007
	//ТХТ="Delete from Prices where PostID = " + Формат(Поставщик.Ссылка.Код,"ЧГ=0") + "";
	//РС=ОМ8_ВыполнитьSQLЗапросКВнешнейБД(АДО,ТХТ,0,1,0);
	//
	//
	////------------------<Выполняем пакет загрузки прайса DTS>-------------------Virus----11.12.2007
	//ТХТ = "EXEC master..xp_cmdshell 'dtsrun /F" + Поставщик.ФайлОбменаDTS + "'";
	//РС=ОМ8_ВыполнитьSQLЗапросКВнешнейБД(АДО,ТХТ,0,1,0);
	//
	//
	////------------------<Update таблички кодом поставщика>-------------------Virus----11.12.2007
	//ТХТ="Update Prices set PostID = " + Формат(Поставщик.Ссылка.Код,"ЧГ=0") + " where PostID is null";
	//РС=ОМ8_ВыполнитьSQLЗапросКВнешнейБД(АДО,ТХТ,0,1,0);
	//
	//ВыбратьСтрокиПрайса();
	//	
	//ПоставщикОбъект = Поставщик.ПолучитьОбъект();
	//Файл = НайтиФайлы(Поставщик.ФайлПрайсЛиста);
	//ПоставщикОбъект.ДатаПрайсЛиста = Файл.Получить(0).ПолучитьВремяИзменения();
	//Попытка
	//	ПоставщикОбъект.Записать();
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Сообщить("Дата прайс-листа поставщика не обновлена!",СтатусСообщения.Важное);
	//КонецПопытки;	
	        ПараметрыСоединения = Новый Структура;
			Если Поставщик.Код = 2 или Поставщик.Код = 996 Тогда
				//Сообщить(ТекущаяДата());
				КонвертироватьXMLвDBF(Поставщик);
				//Сообщить(ТекущаяДата());
			КонецЕсли;
			
			
			
			ФайлПрайсаСтрока = СокрЛП(Поставщик.ФайлПрайсЛиста);
			Если ПустаяСтрока(ФайлПрайсаСтрока) Тогда
				Возврат;
			КонецЕсли;
			Файл = Новый Файл(ФайлПрайсаСтрока);
			Попытка
				ДатаПрайсаВФайле = Файл.ПолучитьВремяИзменения();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			
			Если Поставщик.ДатаПрайсЛиста < ДатаПрайсаВФайле Тогда
				
				Сообщить("Обновляется прайс : " + Поставщик);
				СообщениеОбОшибке = "";
				Если Поставщик.Код = 12 Тогда
					Если ЗагрузитьПрайсПоставщикаСНовойСхемойПоКатрену(Поставщик,ПараметрыСоединения,СообщениеОбОшибке) = Ложь Тогда
						Сообщить(СообщениеОбОшибке);
						Возврат;	
					Иначе
					КонецЕсли;
				Иначе
					Если ОМ21_ЗаказыПоставщикам.ОМ21_ЗагрузитьПрайсПоставщика(Поставщик,ПараметрыСоединения,СообщениеОбОшибке) = Ложь Тогда
						Сообщить(СообщениеОбОшибке);
						Возврат;	
					Иначе
					КонецЕсли;
				КонецЕсли;
				
				ПоставщикОбъект = Поставщик.ПолучитьОбъект();
				ПоставщикОбъект.ДатаПрайсЛиста = ДатаПрайсаВФайле;
				Попытка
					ПоставщикОбъект.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
					Сообщить("Дата прайс-листа поставщика " + Поставщик.Наименование + " не обновлена!",СтатусСообщения.Важное);
					Возврат;
				КонецПопытки;	
			КонецЕсли;
			
	ВыбратьСтрокиПрайса();			
	
	
КонецПроцедуры //ОсновныеДействияФормыЗагрузить()

//======================================================================
Процедура ОсновныеДействияФормыОбновить(Кнопка)
	ВыбратьСтрокиПрайса();
КонецПроцедуры
//======================================================================

//ПодключитьЦентральнуюБазу(Адо);
ЭлементыФормы.Индикатор1.Видимость=Ложь;
