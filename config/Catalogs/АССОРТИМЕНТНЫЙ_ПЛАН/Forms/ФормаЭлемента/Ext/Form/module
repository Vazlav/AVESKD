Перем НельзяЗакрытьФорму;
Перем ЧтоНеДаетЗакрытьФорму;
Перем с_ЗначениеПолей;


Процедура ПроверитьДоступностьРеквизитов()
	
	
	
	
	НаборЗаписей = РегистрыСведений.ПраваНаОбъекты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Метаданные.Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.Имя);
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр);
	
	НаборЗаписей.Прочитать();
	КоличествоЗаписей = НаборЗаписей.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		Если НаборЗаписей.Получить(0).ПолныеПрава  Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого стр из ЭлементыФормы Цикл
		Если ТипЗнч(стр) = Тип("Надпись") Тогда
			Продолжить;
		КонецЕсли;	
		стр.Доступность = Ложь;	
	КонецЦикла;

	Если КоличествоЗаписей> 0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы1.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы2.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы3.Доступность = Истина;
	КонецЕсли;
	
	Для каждого стр из НаборЗаписей Цикл

		ЭлементыФормы[стр.Реквизит].Доступность = Истина;
		
	КонецЦикла;
	Если ЭлементыФормы.ПанельJDA.Доступность = Истина Тогда
		СпРеквизитовJDA = Новый СписокЗначений;
		СпРеквизитовJDA.Добавить("ШиринаУпаковки");
		СпРеквизитовJDA.Добавить("ГлубинаЕдиницы");
		СпРеквизитовJDA.Добавить("ВысотаЕдиницы");
		СпРеквизитовJDA.Добавить("ВозможностьПодвеса");
		СпРеквизитовJDA.Добавить("ЕдиницаИзмерения1");
		СпРеквизитовJDA.Добавить("ЕдиницаИзмерения11");
		СпРеквизитовJDA.Добавить("ЕдиницаИзмерения2");
		СпРеквизитовJDA.Добавить("ЕдиницаИзмерения21");
		СпРеквизитовJDA.Добавить("НеустойчивыйТовар");
		СпРеквизитовJDA.Добавить("КонтрактВыкладка");
		СпРеквизитовJDA.Добавить("СрокДействияКонтрактВыкладка");
		СпРеквизитовJDA.Добавить("МерчГруппа");
		СпРеквизитовJDA.Добавить("СТМJDA");
		СпРеквизитовJDA.Добавить("ШиринаУпаковкиШоубокс");
		СпРеквизитовJDA.Добавить("ГлубинаУпаковкиШоубокс");
		СпРеквизитовJDA.Добавить("ВысотаУпаковкиШоубокс");
		СпРеквизитовJDA.Добавить("ЗагрузкаУпаковки");
		СпРеквизитовJDA.Добавить("Импульс");
		СпРеквизитовJDA.Добавить("ОборудованиеПоставщика");
		СпРеквизитовJDA.Добавить("ШиринаОборудованияПоставщика");
		СпРеквизитовJDA.Добавить("ГлубинаОборудованияПоставщика");
		СпРеквизитовJDA.Добавить("ВысотаОборудованияПоставщика");
		СпРеквизитовJDA.Добавить("КвантОборудованияПоставщика");
		СпРеквизитовJDA.Добавить("СрокДействияОборудованияПоставщика");
		СпРеквизитовJDA.Добавить("СрокГодностиДней");
		СпРеквизитовJDA.Добавить("ТемпературныйРежим");
		СпРеквизитовJDA.Добавить("ПризнакПромоВДоговоре");
		
		Для каждого ТекРеквJDA из СпРеквизитовJDA Цикл
			ЭлементыФормы[ТекРеквJDA.Значение].Доступность = Истина;
		КонецЦикла;

	КонецЕсли;
	
	ЭлементыФормы.Изменения.Доступность = Истина;
	
	
КонецПроцедуры
 

Процедура ПриОткрытии()
  
	Если ЭтоНовый() Тогда
		Если Родитель = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.АссортиментРынка Тогда
			АссортиментРынка = Истина;
		Иначе	
			УчаствуетВАП=Истина;
			ДатаВводаВАП=ТекущаяДата();
			Новинка=Истина;
		КонецЕсли;
		ПустаяСсылка = Справочники.ЕИТ.ПустаяСсылка();
		ЕдиницаПоУмолчанию= ПустаяСсылка;
		ЕдиницаМин		= ПустаяСсылка;
		ЕдиницаОтгрузки	= ПустаяСсылка;
		//Начало НЭТИ Барданов А.Ю. 10.02.2019 ENT-1325 
		НеУчаствуетВМотивации = Истина;
		//Конец НЭТИ Барданов А.Ю. 10.02.2019 ENT-1325
	Иначе
		Выборка = РегистрыСведений.РеквизитыСправочниковДляИстории.Выбрать(Новый Структура("Объект","АССОРТИМЕНТНЫЙ_ПЛАН"),);
		Пока Выборка.Следующий() Цикл
			с_ЗначениеПолей.Вставить(Выборка.РеквизитСправочника,Вычислить(Выборка.РеквизитСправочника));
		КонецЦикла;	  
	КонецЕсли; 
	
  
  
  ЭлементыФормы.Наименование.ТолькоПросмотр=НаименованиеПоГенератору;
  
	Если РольДоступна("Интернет") Тогда
			ЭтаФорма.ТолькоПросмотр=Истина;
	КонецЕсли;
		
	Если Не РольДоступна("супер_Администратор") Тогда
		Если Константы.ИспользоватьОграничениеПравНаСправочники.Получить() = Истина Тогда	
			ПроверитьДоступностьРеквизитов();
		КонецЕсли;
	КонецЕсли;

	ПрочитатьТипСТМ();
    ПолучениеСпискаПоставщиков();
	
КонецПроцедуры


Функция Обломщик (Реквизит,СЧемСравнить,ЧтоСообщить,ВернутьЭтоЗначениеОтказа="")  
	//----------------------------------
	//Назначение:
	//  Для облома при незаполненных обязательных реквизитах
	//  ВернутьЭтоЗначениеОтказа - если не нужно рассчитывать отказ
	//  
	//  
	//----------------------------------
	РезОтказа=Ложь;
	
	Если Реквизит=СЧемСравнить ТОгда
		ЧтоНеДаетЗакрытьФорму=ЧтоСообщить;
		НельзяЗакрытьФорму= ИСТИНА ;
		Если ВернутьЭтоЗначениеОтказа<>"" ТОгда
			РезОтказа= ВернутьЭтоЗначениеОтказа;
		Иначе 
			РезОтказа=Истина;
		КонецЕсли; 
		Сообщить(ЧтоНеДаетЗакрытьФорму);
			
		
		
	КонецЕсли; 	
	
		
	Возврат РезОтказа;	
	
КонецФункции	//Обломщик

Процедура КонтрольКрасотыНаименования (Отказ=Ложь)
	//----------------------------------
	//Назначение:
	//  Проверяет наименование на соответствие сгенерированному
	//  если уродина - то подставляет красивое
	//  
	//  
	//----------------------------------
	
	                                                   
	
	Если Константы.ЖесткийКонтрольНаименованийАП.Получить()=Истина Тогда
		ПравильноеНаименование=ОМ1_ГенераторНаименования (Бренд, ТорговоеНаименование,ЛекФорма, Дополнение,Концентрация ,ПисатьТире, Дозировка, КолвоВУпаковке,Артикул);
		Если СокрЛП(Наименование)<>СокрЛП(ПравильноеНаименование) Тогда
			
			ТХТ="Некрасивое наименование товара!
			|Текущее: "+Наименование+" 
			|Должно быть: "+ПравильноеНаименование+"
			|
			|ИСПРАВИТЬ?";
			
			Ответ=Вопрос(ТХТ,РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.ДА,"НЕПРАВИЛЬНОЕ НАИМЕНОВАНИЕ!");
			
			Если Ответ=КодВозвратаДиалога.Да ТОгда
				Отказ=Истина;
				Наименование=ПравильноеНаименование;
				НаименованиеПоГенератору=Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 

	
	
	
КонецПроцедуры	//КонтрольКрасотыНаименования


Процедура ПередЗаписью(Отказ)
	
	ОчиститьСообщения();
	НельзяЗакрытьФорму= ЛОЖЬ;
	
	Если (НЕ ЭтоГруппа) И (Не АссортиментРынка) Тогда
		//----------------------------< Контроль ЕИТ по Ум >--------------------------------GtG--- 
		
		Отказ=Обломщик (ЭтотОБъект.ЕдиницаПоУмолчанию,Справочники.ЕИТ.ПустаяСсылка(),"Не задана единица по умолчанию!",Ложь);  
		
		//----------------------------< Контроль мин ЕИТ >--------------------------------GtG--- 
		
		Отказ=Обломщик (ЭтотОБъект.ЕдиницаМин,Справочники.ЕИТ.ПустаяСсылка(),"Не задана минимальная единица!",Ложь);  
		//------------------<Контроль ЕИТ отгрузки>-------------------GtG----28.11.2007
		
		Отказ=Обломщик (ЭтотОБъект.ЕдиницаОтгрузки,Справочники.ЕИТ.ПустаяСсылка(),"Не задана единица отгрузки по умолчанию!",Ложь);  
		
		//----------------------------< Контроль ст НДС по Ум >--------------------------------GtG--- 
		
		//Отказ=Обломщик (ЭтотОБъект.СтавкаНДС,Справочники.СтавкиНДС.ПустаяСсылка(),"Не задана ставка НДС по умолчанию!");  
		
		//------------------<Контроль наименования>-------------------GtG----28.11.2007
		
		//Отказ = Обломщик (ПустаяСтрока(ЭтотОБъект.Наименование),ИСТИНА,"Не задано наименование!");  
		
		//------------------<Контроль группы ФТГ>-------------------GtG----28.11.2007
		//Отказ = Обломщик (ЭтотОБъект.ГруппаФТГ,Справочники.ГруппыФТГ.ПустаяСсылка(),"Не задана группа ФТГ!"); 
		
		//------------------<Контроль Типа для ценообразования>-------------------GtG----28.11.2007
		
		//Отказ = Обломщик (ЭтотОБъект.ТипДляЦО,Перечисления.ТипыДляЦО.ПустаяСсылка(),"Не задан тип для ценообразования!");
		
		//------------------<Контроль единиц измерения>-------------------GtG----28.11.2007
		// 1) Должна быть хотя бы 1 еит с к=1
		// 2) У всех ЕИТ должно быть заполнено наименование
		// 3) У всех ЕИТ должен быть заполнен внутренний ШК
		Если ЭтотОбъект.ЭтоНовый()=Ложь Тогда
			// к этому моменту ЭО будет полюбому записан
			ТХТ="ВЫБРАТЬ
			|	ЕИТ.Ссылка КАК ЕИТ,
			|	ЕИТ.К КАК К,
			|	ЕИТ.НаименованиеТовара КАК НаименованиеЕИТ,
			|	ЕИТ.ШтрихкодВн Как ЕИТШК,
			|	ЕИТ.Код как КодЕИТ
			|ИЗ
			|	Справочник.ЕИТ КАК ЕИТ
			|ГДЕ
			|	ЕИТ.Владелец = &ЭОСсылка";
			
			Запрос=Новый Запрос;
			Запрос.Текст=ТХТ;
			Запрос.УстановитьПараметр("ЭОСсылка", ЭтотОбъект.Ссылка );
			
			ТЗ=Запрос.Выполнить().Выгрузить();
			
			ЕстьХотьОднаСК1=Ложь;
			ЕстьХотьОднаУпаковка=Ложь;
			
			Для каждого Стр из ТЗ Цикл
				Если Стр.К=1 Тогда
					ЕстьХотьОднаСК1=Истина;
				Иначе
					ЕстьХотьОднаУпаковка=Истина;
				КонецЕсли; 
				
				Отказ = Обломщик (ПустаяСтрока(СокрЛП(Стр.НаименованиеЕИТ)),Истина,"У единицы измерения с кодом "+Стр.КодЕИТ+" не задано наименование!");
				//Отказ = Обломщик (ПустаяСтрока(СокрЛП(Стр.ЕИТШК)),Истина,"У единицы измерения с кодом "+Стр.КодЕИТ+" не задан внутренний штрихкод!");
			КонецЦикла;	
			Отказ = Обломщик (ЕстьХотьОднаСК1,Ложь,"У товара нет ни одной единицы измерения с коэффициентом = 1 !");
			Если Разбивается Тогда
				Отказ = Обломщик (ЕстьХотьОднаУпаковка,Ложь,"У товара нет ни одной единицы измерения с коэффициентом > 1 !");
			КонецЕсли;
		КонецЕсли; 	
		
		Если ЭтоНовый() Тогда
			НоваяСтрока = Изменения.Добавить();
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Пользователь = ПараметрыСеанса.ТекущийСотр;
			НоваяСтрока.Комментарий = "Ввод нового элемента";
		Иначе		
			Для каждого стр из с_ЗначениеПолей Цикл
				НовоеЗначение = Вычислить(стр.Ключ);
				Если стр.Значение <> НовоеЗначение Тогда
					НоваяСтрока = Изменения.Добавить();
					НоваяСтрока.Дата = ТекущаяДата();
					НоваяСтрока.Пользователь = ПараметрыСеанса.ТекущийСотр;
					НоваяСтрока.Реквизит = стр.Ключ;
					НоваяСтрока.ЗначениеДо = стр.Значение;
					НоваяСтрока.ЗначениеПосле = НовоеЗначение;
					
					Если СокрЛП(стр.Ключ) = "Согласование" Тогда
						НоваяСтрока.Комментарий = ОснованиеСогласования;	
					КонецЕсли;
					
					с_ЗначениеПолей.Вставить(стр.Ключ,НовоеЗначение);
					//стр.Значение = НовоеЗначение;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		//Если (НоваяКатегория = Кластер = Сегмент)  = Ложь Тогда    //WO 39116
			//ENT-1155 сработает в ОбработкаПроверкиЗаполнения()
			//Если НЕ ЗначениеЗаполнено(НоваяКатегория) Тогда
			//	Сообщить("Не заполнен реквизит <НоваяКатегория>. Сохранение изменений не может быть продолжено",СтатусСообщения.Внимание);
			//	Октаз = Истина;
			//КонецЕсли;
			//Если НЕ ЗначениеЗаполнено(Кластер) Тогда
			//	Сообщить("Не заполнен реквизит <Кластер>. Сохранение изменений не может быть продолжено",СтатусСообщения.Внимание);
			//	Октаз = Истина;
			//КонецЕсли;
			//Если НЕ ЗначениеЗаполнено(Сегмент) Тогда
			//	Сообщить("Не заполнен реквизит <Сегмент>. Сохранение изменений не может быть продолжено",СтатусСообщения.Внимание);
			//	Октаз = Истина;
			//КонецЕсли;
		//КонецЕсли;
		
		
		//------------------<Контроль на правильность наименования>-------------------GtG----05.12.2007
		КонтрольКрасотыНаименования();
		Если СтрДлина(Наименование)>128 Тогда
			Сообщить("Длина <Наименования> превышает 128 символов. Сохранение изменений не может быть продолжено",СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

Процедура СВЛСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//// СВЛС - это некое подмножество ЖНВЛС 
	//Если ВыбранноеЗначение= ИСТИНА Тогда
	//	ЭтотОбъект.ЖНВЛС=Истина;
	//КонецЕсли; 
	
	//по приказам ---совершенно разные списки
КонецПроцедуры

Процедура ЖНВЛСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// ЕСли СВЛС то никак не Ложь.
	Если ЭтотОбъект.СВЛС=Истина Тогда
		ВыбранноеЗначение=Истина;
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ТабличноеПоле1ПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
//	Сообщить(ТипЗнч(Элемент.ТекущаяСтрока)); ЕИТ
   ЭлементыФормы.ДляШКПТ.Значение=Элемент.ТекущаяСтрока;




КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	Если НельзяЗакрытьФорму= ИСТИНА Тогда
		Предупреждение(ЧтоНеДаетЗакрытьФорму+ Символы.ПС+"Пока не будет исправлено окно не закроется!");
		Отказ= ИСТИНА ;
	КонецЕсли;	
		
		
	
КонецПроцедуры


Процедура ОбновлениеОтображения()
	КодЗакуп=ЕдиницаПоУмолчанию.Код;
	КодОтгр= ЕдиницаОтгрузки.Код;
	КодМин = ЕдиницаМин.Код;
КонецПроцедуры

Процедура ПересчетНаценки()
	Если ЗакупочнаяЦена>0 тогда
		
		Наценка=Окр((РозничнаяЦена - ЗакупочнаяЦена)/ЗакупочнаяЦена*100,2);
	Иначе
		Наценка=0;
	КонецЕсли;
	
	
		
КонецПроцедуры


Процедура ЗакупочнаяЦенаПриИзменении(Элемент)
	ПересчетНаценки()   ;
КонецПроцедуры

Процедура РозничнаяЦенаПриИзменении(Элемент)
	ПересчетНаценки();
КонецПроцедуры

Процедура ЕдиницаПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭтотОбъект.ЭтоНовый() ТОгда
		ПРедупреждение("Элемент АП еще не записан!");
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;	
КонецПроцедуры


Процедура МинЕдиницаПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭтотОбъект.ЭтоНовый() ТОгда
		ПРедупреждение("Элемент АП еще не записан!");
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;	
КонецПроцедуры


Процедура СгенеритьНажатие(Элемент)
	Наименование=ОМ1_ГенераторНаименования (Бренд, ТорговоеНаименование,ЛекФорма, Дополнение,Концентрация ,ПисатьТире, Дозировка, КолвоВУпаковке,Артикул);
	НаименованиеПоГенератору=Истина;
	ЭлементыФормы.Наименование.ТолькоПросмотр=Истина;
	
КонецПроцедуры

Процедура НаименованиеПоГенераторуПриИзменении(Элемент)
	ЭлементыФормы.Наименование.ТолькоПросмотр=НаименованиеПоГенератору;
КонецПроцедуры

Процедура ЕдиницаМинОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.К <>1 Тогда
		Предупреждение("Минимальная единица должна иметь коэффициент = 1!");
		//СтандартнаяОбработка=Ложь;
		ВыбранноеЗначение="";
	КонецЕсли;	
	
КонецПроцедуры

Процедура СогласованПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьОснованиеСогласования.Видимость = Согласован;
	ЭлементыФормы.ОснованиеСогласования.Видимость = Согласован;
	Если Согласован = Истина Тогда
		ОснованиеСогласования = "";
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СегментНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если НЕ Кластер.Пустая() Тогда
		СписокЗнч = Новый СписокЗначений;
		Выборка = Справочники.ГруппировкиАссортимента.Выбрать(Кластер);
		Пока Выборка.Следующий() Цикл
			СписокЗнч.Добавить(Выборка.Ссылка);
		КонецЦикла;
		ФормаПодбора=Справочники.ГруппировкиАссортимента.ПолучитьФормуВыбора("ФормаСписка",Элемент);
		ФормаПодбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
		Отбор = ФормаПодбора.СправочникСписок.Отбор.Ссылка;
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
		Отбор.Значение = СписокЗнч;		
		ФормаПодбора.ОткрытьМодально();

	Иначе
		ФормаПодбора=Справочники.ГруппировкиАссортимента.ПолучитьФормуВыбора("ФормаСписка",Элемент);
		ФормаПодбора.ОткрытьМодально();
		//Если НЕ Кластер.Пустая() Тогда
			Если НЕ Сегмент.Уровень() = 2 Тогда
				Предупреждение("Необходимо выбрать последний уровень элементов справочника");
				Сегмент = Справочники.ГруппировкиАссортимента.ПустаяСсылка();
			Иначе
				Кластер = Сегмент.Родитель;
				НоваяКатегория = Сегмент.Родитель.Родитель;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КластерНачалоВыбора(Элемент, СтандартнаяОбработка)
	

	СтандартнаяОбработка = Ложь;

	Если НЕ НоваяКатегория.Пустая() Тогда
		СписокЗнч = Новый СписокЗначений;
		Выборка = Справочники.ГруппировкиАссортимента.Выбрать(НоваяКатегория);
		Пока Выборка.Следующий() Цикл
			СписокЗнч.Добавить(Выборка.Ссылка);
		КонецЦикла;
		ФормаПодбора=Справочники.ГруппировкиАссортимента.ПолучитьФормуВыбора("ФормаСписка",Элемент);
		ФормаПодбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
		Отбор = ФормаПодбора.СправочникСписок.Отбор.Ссылка;
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
		Отбор.Значение = СписокЗнч;		
		ФормаПодбора.ОткрытьМодально();

	Иначе
		ФормаПодбора=Справочники.ГруппировкиАссортимента.ПолучитьФормуВыбора("ФормаСписка",Элемент);
		ФормаПодбора.ОткрытьМодально();
		Если НЕ Кластер.Пустая() Тогда
			Если НЕ Кластер.Уровень() = 1 Тогда
				Предупреждение("Необходимо выбрать второй уровень элементов справочника");
				Кластер = Справочники.ГруппировкиАссортимента.ПустаяСсылка();
				Сегмент = Кластер;
			Иначе
				НоваяКатегория = Кластер.Родитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	 
	
	
КонецПроцедуры

Процедура НоваяКатегорияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если НЕ ВыбранноеЗначение.Уровень() = 0 Тогда
		Предупреждение("Необходимо выбирать элементы первого уровня");
		ВыбранноеЗначение = Справочники.ГруппировкиАссортимента.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Если товар не разбивается, автоматически формируем для него ЕИТ
	Если Не Разбивается Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Найдено
		|ИЗ
		|	Справочник.ЕИТ КАК ЕИТ
		|ГДЕ
		|	ЕИТ.Владелец = &ЭОСсылка
		|	И ЕИТ.К = 1";
		
		Запрос.УстановитьПараметр("ЭОСсылка", ЭтотОбъект.Ссылка);
		
		Рез = Запрос.Выполнить();
		
		Если Рез.Пустой() Тогда	
			ЕИТ = Справочники.ЕИТ.СоздатьЭлемент();
			ЕИТ.Наименование = "шт";
			ЕИТ.Владелец = ЭтотОбъект.Ссылка;
			ЕИТ.ЕдИзм = Справочники.ЕдИзм.НайтиПоКоду(796);
			ЕИТ.К = 1;	
			ЕИТ.КолвоВУпаковке = 0;
			ЕИТ.НаименованиеТовара = Наименование;
			
			ЕИТ.УстановитьНовыйКод();
			Префикс = Константы.Первые2СимволаВШКНеЖНВЛС.Получить();
			ЕИТ.ШтрихкодВн = ОМ1_ШК_СПрефиксом(Префикс, ЕИТ.Код);
			
			ЕИТ.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТипСТМ()
	
	ТоварыСТМ = РегистрыСведений.ТоварыСТМ.ПолучитьПоследнее(,Новый Структура("Товар",Ссылка));	
	ЭлементыФормы.ТипСТМ.Значение = ТоварыСТМ.ТипСТМ;

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Параметр = "ТипСТМ" И Источник = Ссылка Тогда		
		ПрочитатьТипСТМ();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипСТМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоНовый() Тогда
		Предупреждение("Перед установкой реквизита ""Тип СТМ"" необходимо записать элемент");
		Возврат;
	КонецЕсли;

	ФормаРегистра = РегистрыСведений.ТоварыСТМ.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Товар = Ссылка;
		
	ТаблицаРегистра = РегистрыСведений.ТоварыСТМ.СрезПоследних(, Новый Структура("Товар",Ссылка));

	Если ТаблицаРегистра.Количество() > 0 Тогда		
		ФормаРегистра.Период = ТаблицаРегистра[0].Период;
		ФормаРегистра.ТипСТМ = ТаблицаРегистра[0].ТипСТМ;
		
	Иначе	
		ФормаРегистра.Период = '19000101';
		ФормаРегистра.ТипСТМ = Неопределено;
		
	КонецЕсли;
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элемент.Страницы.ЦеныИПроценты Тогда
		ПоказатьИнтернетЦены();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьИнтернетЦены()

	ИнтернетЦены.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнтернетЦены.СубъектРФ,
	|	ИнтернетЦены.Цена,
	|	ИнтернетЦены.УчаствуетВИнтернетПлощадках
	|ИЗ
	|	РегистрСведений.ИнтернетЦены КАК ИнтернетЦены
	|ГДЕ
	|	ИнтернетЦены.Товар = &Товар";
				   
	Запрос.УстановитьПараметр("Товар", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ИнтернетЦены.Значение = РезультатЗапроса.Выгрузить();
	 	  
КонецПроцедуры

Процедура НоваяКатегорияПриИзменении(Элемент)
	
	Кластер = Справочники.ГруппировкиАссортимента.ПустаяСсылка();
	Сегмент = Справочники.ГруппировкиАссортимента.ПустаяСсылка();	
	
КонецПроцедуры

Процедура КластерПриИзменении(Элемент)
	
	Сегмент = Справочники.ГруппировкиАссортимента.ПустаяСсылка();	
	
КонецПроцедуры

Процедура ПолучениеСпискаПоставщиков()

	Запрос = Новый запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(КаталогПрайсЛистов.Дата) КАК ДатаПЛ,
	|	КаталогПрайсЛистов.КодПоставщика КАК КодПоставщика,
	|	СвязкиТовараСПоставщиком.КодТовараПоставщика КАК КодТовараПоставщика
	|ПОМЕСТИТЬ ВТ_Промежуточная
	|ИЗ
	|	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	|		ПО СвязкиТовараСПоставщиком.Поставщик.Код = КаталогПрайсЛистов.КодПоставщика
	|ГДЕ
	|	СвязкиТовараСПоставщиком.ТоварФирмы = &ТоварФирмы
	|	И НЕ КаталогПрайсЛистов.Дата ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПрайсЛистов.КодПоставщика,
	|	СвязкиТовараСПоставщиком.КодТовараПоставщика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Промежуточная.ДатаПЛ КАК ДатаПЛ,
	|	Поставщики.Наименование КАК Поставщик,
	|	ПрайсЛисты.Кратность КАК Кратность,
	|	ПрайсЛисты.Цена КАК Цена
	|ИЗ
	|	ВТ_Промежуточная КАК ВТ_Промежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	|		ПО ВТ_Промежуточная.ДатаПЛ = КаталогПрайсЛистов.Дата
	|			И ВТ_Промежуточная.КодПоставщика = КаталогПрайсЛистов.КодПоставщика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
	|		ПО (КаталогПрайсЛистов.КодПрайсЛиста = ПрайсЛисты.КодПрайсЛиста)
	|			И ВТ_Промежуточная.КодТовараПоставщика = ПрайсЛисты.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики КАК Поставщики
	|		ПО ВТ_Промежуточная.КодПоставщика = Поставщики.Код
	|ГДЕ
	|	НЕ ПрайсЛисты.Цена ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварФирмы", Ссылка);
	
	ЭлементыФормы.Поставщики.Значение = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура АТС1ПриИзменении(Элемент)
	
	АТС2 = Справочники.КлассификаторАТС.ПустаяСсылка();
	АТС3 = Справочники.КлассификаторАТС.ПустаяСсылка();
	АТС4 = Справочники.КлассификаторАТС.ПустаяСсылка();
	АТС5 = Справочники.КлассификаторАТС.ПустаяСсылка();
	
КонецПроцедуры

Процедура АТС2ПриИзменении(Элемент)
	
	АТС3 = Справочники.КлассификаторАТС.ПустаяСсылка();
	АТС4 = Справочники.КлассификаторАТС.ПустаяСсылка();
	АТС5 = Справочники.КлассификаторАТС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(АТС2) Тогда
		АТС1 = АТС2.Родитель;
	КонецЕсли;
	
КонецПроцедуры

Процедура АТС3ПриИзменении(Элемент)
	
	АТС4 = Справочники.КлассификаторАТС.ПустаяСсылка();
	АТС5 = Справочники.КлассификаторАТС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(АТС3) Тогда
		АТС2 = АТС3.Родитель;
		АТС1 = АТС2.Родитель;
	КонецЕсли;
	
КонецПроцедуры

Процедура АТС4ПриИзменении(Элемент)
	
	АТС5 = Справочники.КлассификаторАТС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(АТС4) Тогда
		АТС3 = АТС4.Родитель;
		АТС2 = АТС3.Родитель;
		АТС1 = АТС2.Родитель;
	КонецЕсли;
	
КонецПроцедуры

Процедура АТС5ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(АТС5) Тогда
		АТС4 = АТС5.Родитель;
		АТС3 = АТС4.Родитель;
		АТС2 = АТС3.Родитель;
		АТС1 = АТС2.Родитель;
	КонецЕсли;

КонецПроцедуры

Процедура АссортиментРынкаПриИзменении(Элемент)
	Если Элемент.Значение Тогда
		Ответ=Вопрос("Товар будет перенесен в группу ""Ассортимент рынка"", продолжить?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.ДА,"Ассортимент рынка");
		Если Ответ=КодВозвратаДиалога.Да ТОгда
			Родитель = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.АссортиментРынка;
		Иначе
			Элемент.Значение = Ложь;
		КонецЕсли;
	Иначе
		Ответ=Вопрос("Товар будет перенесен из группы ""Ассортимент рынка"", продолжить?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.ДА,"Ассортимент рынка");
		Если Ответ=КодВозвратаДиалога.Да ТОгда
			Родитель = "";
		Иначе
			Элемент.Значение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



с_ЗначениеПолей = Новый Структура();
НельзяЗакрытьФорму= ЛОЖЬ; // если задана ЕИТ по Ум. то можно записать
							// но закрыть форму нельзя пока еит по ум не зададим
