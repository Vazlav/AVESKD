
Процедура ПередЗаписью(Отказ)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() и НЕ ЭтоГруппа Тогда
		АптекаНаНовомПО = Истина;
		УчетВЗакупке = Истина;
	КонецЕсли;
	
	Если КоэффициентЦУС_A = 0 Тогда
		КоэффициентЦУС_A = 1;
	КонецЕсли;
	
	//Если РасчетПотребностиSAS = Ложь И (СтатусАптеки = Перечисления.СтатусыАптеки.ГО или СтатусАптеки = Перечисления.СтатусыАптеки.Р) Тогда
	//	РасчетПотребностиSAS = Истина;
	//КонецЕсли;
	
	
	// {Временно
	ГрафикИнкассации = ВремяЗаезда;
	КодОбъектаВБанке = НомерСумки; // }
	
	Если ТипИнкассации = Перечисления.ТипыИнкассации.КлассическаяИнкассация 
		Или ТипИнкассации = Перечисления.ТипыИнкассации.ИнкассацияВОфис Тогда
		
		КодОбъектаДляРазмена = КодОбъектаВБанке;
		НомерДляСамоинкассации = "";
		
	ИначеЕсли ТипИнкассации = Перечисления.ТипыИнкассации.Самоинкассация Тогда		
		НомерДляСамоинкассации = СгенерироватьНомерДляСамоинкассации();
		
	КонецЕсли;
	
	//Начало НЭТИ Барданов А.Ю. 16.01.2019 ENT-702
	ОбновитьРегистрЗаведующие();
	//Конец НЭТИ Барданов А.Ю. 16.01.2019 ENT-702
	
	//
	//Если ЭтоНовый()=Ложь Тогда
	//	
	//	Запрос=Новый Запрос();
	//	Запрос.Текст="ВЫБРАТЬ
	//	|	МестаХранения.ПометкаУдаления
	//	|ИЗ
	//	|	Справочник.МестаХранения КАК МестаХранения
	//	|ГДЕ
	//	|	МестаХранения.Ссылка = &Ссылка";
	//	
	//	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	//	
	//	Рез=Запрос.Выполнить();
	//	
	//	Если рез.Пустой()=Ложь Тогда
	//		Выб=Рез.Выбрать();
	//		Выб.Следующий();
	//		
	//		БылаПометкаУдаления=Выб.ПометкаУдаления;
	//		
	//		Если БылаПометкаУдаления=Ложь И ПометкаУдаления=Истина Тогда
	//			// Закрыли аптеку
	//			Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			             |	РеализацияККМ.ЗаводскойНомерККМ
	//			             |ИЗ
	//			             |	Документ.РеализацияККМ КАК РеализацияККМ
	//			             |ГДЕ
	//			             |	РеализацияККМ.Проведен = ИСТИНА
	//			             |	И РеализацияККМ.Дата >= &Дата
	//			             |	И РеализацияККМ.Склад = &Склад";
	//			Запрос.УстановитьПараметр("Дата",ТекущаяДата()-24*14*60*60);	// список всех ккм из реализаций аптеки за последние 2 недели		 
	//			Запрос.УстановитьПараметр("Склад",ЭтотОбъект.Ссылка);
	//			
	//			РезККМ=Запрос.Выполнить();
	//			ВыбККМ=РезККМ.Выбрать();
	//			Пока ВыбККМ.Следующий() Цикл
	//				
	//				Если ПустаяСтрока(ВыбККМ.ЗаводскойНомерККМ)=Истина Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				
	//				Спр=Справочники.Розыск_ККМ.СоздатьЭлемент();
	//				Спр.НомерРазыскиваемойККМ=ВыбККМ.ЗаводскойНомерККМ;
	//				Спр.ДатаПодачиВРозыск=ТекущаяДата();
	//				Спр.Причина="Закрылась аптека ["+ЭтотОбъект.Код+"] "+ЭтотОбъект.Наименование;
	//				Спр.Записать();
	//				
	//			КонецЦикла;	
	//			
	//		КонецЕсли;	
	//	Конецесли;

	//КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	АптекаЗакрыта = ПометкаУдаления Или СтатусАптеки = Перечисления.СтатусыАптеки.Х;
	//Начало НЭТИ Барданов А.Ю. 10.02.2019 ENT-1146 
	//Если АптекаЗакрыта Или СтатусАптеки = Перечисления.СтатусыАптеки.ВН Тогда	
	Если АптекаЗакрыта Тогда	
	//Начало НЭТИ Барданов А.Ю. 10.02.2019 ENT-1146 
		Запись = РегистрыСведений.СостоянияПодписчиков.СоздатьМенеджерЗаписи();	
		Запись.КодАптеки = Код;
		
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Если Запись.Активна Тогда		
				Запись.Активна = Ложь;
				Запись.Закрыта = АптекаЗакрыта;
				
				Запись.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтатусАптеки = Перечисления.СтатусыАптеки.ГО и НЕ АптекаЗакрыта Тогда
		Запись = РегистрыСведений.СостоянияПодписчиков.СоздатьМенеджерЗаписи();	
		Запись.КодАптеки = Код;
		Запись.Активна = Истина;
		Запись.Закрыта = Ложь;
		Запись.ДатаСозданияЗаписи = ТекущаяДата();
		Запись.НаименованиеАптеки = Наименование;
		Запись.Записать();
	КонецЕсли;
	
	
	
			  
КонецПроцедуры

Функция ОпределитьКатегориюSAS() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПравилаОпределенияКатегорииSAS.Наименование,
	|	ПравилаОпределенияКатегорииSAS.НастройкиПостроителя,
	|	ПравилаОпределенияКатегорииSAS.КатегорияSAS
	|ИЗ
	|	Справочник.ПравилаОпределенияКатегорииSAS КАК ПравилаОпределенияКатегорииSAS";
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = "ВЫБРАТЬ
	|	МестаХранения.Код
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.Код = "+  Формат(Код,"ЧГ=0") + "
	|{ГДЕ
	|	МестаХранения.Бренд,
	|	МестаХранения.КатегорияUMG,
	|	МестаХранения.СубъектРФ}";
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастрПостроителя = ЗначениеИзСтрокиВнутр(Выборка.НастройкиПостроителя);
		
		Попытка
			Построитель.УстановитьНастройки(НастрПостроителя);
		Исключение
			Сообщить("Ошибка установки правила определения категории SAS : " + Выборка.Наименование);
			Возврат 0;
		КонецПопытки;
		
		
		Построитель.Выполнить();
		Если Построитель.Результат.Пустой() Тогда
			Продолжить;
		Иначе
			Возврат Выборка.КатегорияSAS;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция СгенерироватьНомерДляСамоинкассации() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА МестаХраненияЗаведующие.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники_Физлица.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА МестаХраненияЗаведующие.Ссылка.Фирма.Код = 1
	|			ТОГДА МестаХраненияЗаведующие.Сотрудник.ИдентификаторAVE
	|		КОГДА МестаХраненияЗаведующие.Ссылка.Фирма.Код = 2
	|			ТОГДА МестаХраненияЗаведующие.Сотрудник.ИдентификаторAVE1
	|	КОНЕЦ КАК ИдентификаторУправляющего
	|ИЗ
	|	Справочник.МестаХранения.Заведующие КАК МестаХраненияЗаведующие
	|ГДЕ
	|	МестаХраненияЗаведующие.Ссылка = &Ссылка
	|	И МестаХраненияЗаведующие.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	ИдентификаторУправляющего = Выборка.ИдентификаторУправляющего;
	Если ИдентификаторУправляющего = "" Тогда
		Возврат "";
	КонецЕсли;
	
	
	Рез = "" + СокрЛП(ИдентификаторУправляющего) + Формат(Код, "ЧЦ=4; ЧВН=; ЧГ=0");//Самсонов 20.06.2018 SKD-207 так как увелисили длину ИдентификаторAVE и ИдентификаторAVE1 то добавим "сокрЛП" чтоьбы избежать лишних пробелов
	
	// {Расчет контрольного числа
	КолвоРазрядов = СтрДлина(Рез);
	СуммаПроизведений = 0;
	Для НомерРазряда=1 По КолвоРазрядов Цикл		
		ТекЦифра = Число(Сред(Рез, НомерРазряда, 1));
		ТекСумма = ТекЦифра * НомерРазряда;		
		СуммаПроизведений = СуммаПроизведений + ТекСумма;		
	КонецЦикла;
	КонтрольноеЧисло = СуммаПроизведений % 11;
	
	Если КонтрольноеЧисло = 10 Тогда
		Сдвиг = 1;
		СуммаПроизведений = 0;
		Для НомерРазряда=1 По КолвоРазрядов Цикл			
			ТекЦифра = Число(Сред(Рез, НомерРазряда, 1));
			Множитель = НомерРазряда+Сдвиг;
			ТекСумма = ТекЦифра * Множитель;		
			СуммаПроизведений = СуммаПроизведений + ТекСумма;		
		КонецЦикла;
		КонтрольноеЧисло = СуммаПроизведений % 11;
		
		Если КонтрольноеЧисло = 10 Тогда
			КонтрольноеЧисло = 0;
		КонецЕсли;
		
	КонецЕсли;
	// }Расчет контрольного числа
	
	Возврат Рез + Формат(КонтрольноеЧисло, "ЧН=");
	
КонецФункции

//НЭТИ Барданов А.Ю. 16.01.2019 ENT-702
Процедура ОбновитьРегистрЗаведующие() Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	МестаХраненияЗаведующие.НомерСтроки КАК НомерСтроки,
	             |	МестаХраненияЗаведующие.ФИО КАК ФИО,
	             |	МестаХраненияЗаведующие.НачПериодаЗаведования КАК НачПериодаЗаведования,
	             |	МестаХраненияЗаведующие.КонПериодаЗаведования КАК КонПериодаЗаведования,
	             |	МестаХраненияЗаведующие.Телефон КАК Телефон,
	             |	МестаХраненияЗаведующие.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	             |	МестаХраненияЗаведующие.Должность КАК Должность,
	             |	МестаХраненияЗаведующие.Сотрудник КАК Сотрудник
	             |ИЗ
	             |	Справочник.МестаХранения.Заведующие КАК МестаХраненияЗаведующие
	             |ГДЕ
	             |	МестаХраненияЗаведующие.Ссылка = &Ссылка
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	ТаблицаИзСсылки = Запрос.Выполнить().Выгрузить();
	ТаблицаИзОбъекта = Заведующие.Выгрузить();
	Если Не ТаблицыИдентичны(ТаблицаИзСсылки,ТаблицаИзОбъекта) Тогда
		НаборЗаписейЗаведующие = РегистрыСведений.Neti_Управляющие.СоздатьНаборЗаписей();
		НаборЗаписейЗаведующие.Отбор.Период.Установить(ТекущаяДата());
		НаборЗаписейЗаведующие.Отбор.КодАптеки.Установить(Код);
		НаборЗаписейЗаведующие.Загрузить(ТаблицаИзОбъекта);
		Для i = 0 По НаборЗаписейЗаведующие.Количество()-1 Цикл
			НаборЗаписейЗаведующие[i].Номер = i + 1;
			НаборЗаписейЗаведующие[i].Период = ТекущаяДата();
			НаборЗаписейЗаведующие[i].КодАптеки = Код;
		КонецЦикла;	
		НаборЗаписейЗаведующие.Записать(Истина); 
	КонецЕсли;
КонецПроцедуры	

//НЭТИ Барданов А.Ю. 16.01.2019 ENT-702
Функция ТаблицыИдентичны(ТаблицаЗначений1, ТаблицаЗначений2)

    Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        
        Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
        
        Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
        
            Попытка
            
                Если СтрокаТаблицы[Колонка.Имя] <> ТаблицаЗначений2[ТаблицаЗначений1.Индекс(СтрокаТаблицы)][Колонка.Имя] Тогда
                
                    Возврат Ложь;
                
                КонецЕсли;
            
            Исключение
                
                Возврат Ложь;
                
            КонецПопытки;
        
        КонецЦикла; 
    
    КонецЦикла; 
    
    Возврат Истина;
    
КонецФункции // СравнитьТаблицыЗначений()

