Перем СписокТипБонуса;
Перем ТоварыРазбивкаПоПеридамТекущаяСтрока;
Перем ТоварыРазбивкаПоПеридамсНДСТекущаяСтрока;
Перем ПериодыПланНаПериодТекущаяСтрока;
Перем ПериодыПланНаПериодсНДСТекущаяСтрока;
Перем ПериодыПБонусНаПериодТекущаяСтрока;
Перем ПериодыПБонусНаПериодсНДСТекущаяСтрока;
Перем ТипСтатьиСтароеЗначение;
Перем МегаТЗ;
Перем ЭтоНовыйОбъект;
Перем ТипПланированиСтароеЗначение;
Перем КритерийВыполненияСтароеЗначение;
Перем ТипРасчетаСтароеЗначение;
Перем СтруктураНаСтарте;
Перем СтруктураРеквизитовПриОткрытии;

// ОБРАБОТЧИКИ ОБЩИЕ

Процедура УправлениеДоступностьюРеквизитовТЧТовары()
	
	ЭлементыФормы.Товары.Колонки.УчетнаяЦена.ТолькоПросмотр							= УчитыватьНДС;
	ЭлементыФормы.Товары.Колонки.УчетнаяЦенаСНДС.ТолькоПросмотр						= НЕ УчитыватьНДС;
	ЭлементыФормы.Товары.Колонки.УчетнаяЦенаСУчетомФинСкидкиБезНДС.ТолькоПросмотр	= УчитыватьНДС;
	ЭлементыФормы.Товары.Колонки.УчетнаяЦенаСУчетомФинСкидкиСНДС.ТолькоПросмотр		= НЕ УчитыватьНДС;
	
	// Управление цветом колонки, в зависимости от реквизита УчитыватьНДС
	ЭлементыФормы.Товары.Колонки.УчетнаяЦена.ЦветФонаШапки						= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.Товары.Колонки.УчетнаяЦенаСНДС.ЦветФонаШапки					= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки); 
	ЭлементыФормы.Товары.Колонки.УчетнаяЦенаСУчетомФинСкидкиБезНДС.ЦветФонаШапки	= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.Товары.Колонки.УчетнаяЦенаСУчетомФинСкидкиСНДС.ЦветФонаШапки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки);
	ЭлементыФормы.Товары.Колонки.РазбивкаПоПериодам.ЦветФонаШапки					= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.Товары.Колонки.РазбивкаПоПериодамсНДС.ЦветФонаШапки				= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки); 
	
КонецПроцедуры

Процедура УправлениеДоступностьюРеквизитовТЧПериоды()

	// Управление цветом колонки, в зависимости от реквизита УчитыватьНДС
	ЭлементыФормы.Периоды.Колонки.ПланНаПериод.ЦветФонаШапки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.Периоды.Колонки.ПланНаПериодсНДС.ЦветФонаШапки	= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки);
	ЭлементыФормы.Периоды.Колонки.БонусНаПериод.ЦветФонаШапки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.Периоды.Колонки.БонусНаПериодсНДС.ЦветФонаШапки	= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки);

КонецПроцедуры

Процедура УправлениеДоступностьюРеквизитовТЧШкалаВыполнения()

	// Управление цветом колонки, в зависимости от реквизита УчитыватьНДС
	ЭлементыФормы.ШкалаВыполнения.Колонки.ПланПоСтатьеБезНДС.ЦветФонаШапки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.ШкалаВыполнения.Колонки.ПланПоСтатьеСНДС.ЦветФонаШапки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки);
	ЭлементыФормы.ШкалаВыполнения.Колонки.СуммаБонусаПоСтатье.ЦветФонаШапки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветФонаКнопки,ЦветаСтиля.ЦветРамки);
	ЭлементыФормы.ШкалаВыполнения.Колонки.СуммаБонусаПоСтатьеСНДС.ЦветФонаШапки	= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветФонаКнопки);

КонецПроцедуры

Процедура УправлениеДоступностьюЗаполнитьИзФайлаТоварАптека()

	ЭлементыФормы.КоманднаяПанель1.Кнопки.ЗаполнитьИзФайлаТоварАптека.Доступность	= ПоВсемТоварам;

КонецПроцедуры

Процедура УправлениеДоступностьюТЧАптека()

	ЭлементыФормы.ТабличноеПоле2.Доступность	= НЕ МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический;
	ЭлементыФормы.ПоВсемТоварам.Доступность		= НЕ МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический;
	ЭлементыФормы.КоманднаяПанель2.Доступность	= НЕ МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический;
	ЭлементыФормы.Аптеки.Доступность			= НЕ МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический;
	
КонецПроцедуры

Процедура УправлениеНадписями()

	ЭлементыФормы.НадписьТипКонтракта.Заголовок	= "Тип контракта "+МаркетинговыйКонтракт.ТипКонтракта;
	ЭлементыФормы.НадписьСогласован.Заголовок	= ?(Согласован,"Документ согласован", "Документ не согласован");
	ЭлементыФормы.НадписьУтвержден.Заголовок	= ?(Утвержден,"Документ утвержден", "Документ не утвержден");
	
КонецПроцедуры

Процедура УправлениеКнопками()

	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнСогласование.Текст = ?(Согласован, "Отменить согласование","Согласовать");
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнУтверждение.Текст = ?(Утвержден, "Отменить утверждение","Утвердить");

КонецПроцедуры

Процедура УправлениеЗаголовком()
	
	ЭтаФорма.Заголовок = "Статья МЛК: Тип контракта - "+ ?(МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый, "Маркетинговый", ?(МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический,"Логистический",""))+ ", наименование - " +СокрЛП(Наименование);
	
КонецПроцедуры	

Процедура УправлениеДоступностьюРеквизитов()
	
	// Если вызываем из кнопки отмены утверждения/согласования, то на документ МЛК не смотрим
	//Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован  Тогда
		
		//Для каждого ЭлемФормы Из ЭлементыФормы Цикл
		//	ЭлемФормы.Доступность = Ложь;
		//КонецЦикла; 
		//
		//// Доступные элементы
		//ЭлементыФормы.ОсновныеДействияФормы.Доступность = Истина;
		//ЭлементыФормы.Панель2.Доступность 				= Истина;
		//ЭлементыФормы.КоэффициентДоходности.Доступность	= Истина;
		//
		//Сообщить("Документ-основание "+?(МаркетинговыйКонтракт.Утвержден, "утвержден","согласован")+". Документ доступен только для просмотра."); 
		
	//Иначе
		
		// Сначала проверяем на Согласован и Утвержден
		ФлагДоступность = НЕ Согласован;
		Для каждого Стр Из ЭлементыФормы Цикл
			
			// Исключения - всегда доступны
			Если  Стр.Имя = "Панель1" или
				Стр.Имя = "Панель2" или
				Стр.Имя = "Исполнен"
				
				Тогда
				Продолжить
				
			ИначеЕсли Стр.Имя = "ОсновныеДействияФормы" Тогда
				
				Для каждого КнопкаПанели Из Стр.Кнопки Цикл
					
					Если КнопкаПанели.Имя = "ОсновныеДействияФормыЗакрыть" Тогда
					   КнопкаПанели.Доступность = Истина;
					Иначе
					   КнопкаПанели.Доступность = НЕ МаркетинговыйКонтракт.Согласован
					КонецЕсли; 
					//Если КнопкаПанели.Имя = "кнСогласование" или КнопкаПанели.Имя = "кнУтверждение" Тогда
					//	 КнопкаПанели.Доступность = НЕ МаркетинговыйКонтракт.Согласован
					//КонецЕсли; 
				
				КонецЦикла;
				//Стр.Кнопки.ОсновныеДействияФормыЗакрыть.Доступность = Истина;
				Продолжить;
				
			КонецЕсли; 
			
			// Для флага "Согласован"
			//Если Стр.Имя = "Согласован" Тогда
			//	
			//	Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован  Тогда
			//		Стр.Доступность = Ложь	
			//	Иначе
			//		
			//		Если Утвержден Тогда
			//			Стр.Доступность = Ложь
			//		Иначе
			//			Стр.Доступность = ФлагДоступность;
			//		КонецЕсли; 
			//	
			//	КонецЕсли;	
			//	
			//	Продолжить;
			//	
			//КонецЕсли; 
			//
			//Если Стр.Имя = "Утвержден" Тогда
			//	
			//	Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован  Тогда
			//		Стр.Доступность = Ложь
			//	Иначе
			//		Стр.Доступность = НЕ Утвержден;
			//	КонецЕсли;
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			
			// Для всех реквизитов
			//Барданов А.Ю. ENT-1522 +++ 
			//Если Стр.Имя = "Товары" или Стр.Имя = "Аптеки" или Стр.Имя = "Изменения" или Стр.Имя = "Изменения" Тогда
			Если ТипЗнч(Стр) = Тип("ТабличноеПоле") Тогда
			// ENT-1522 --- 
				Стр.ТолькоПросмотр = НЕ ФлагДоступность
			Иначе
				Стр.Доступность = ФлагДоступность;	
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Если документ не согласован, тогда он открыт для редактирования и имеет смысл играться с доступностьи некоторых реквизитов в зависимости от других
		Если ФлагДоступность Тогда
			
			ЭлементыФормы.ТипБонуса.Доступность				= ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы;
			Если МаркетинговыйКонтракт.ТипКонтракта			= Перечисления.ТипКонтракта.Маркетинговый Тогда
				
				ЭлементыФормы.ТипПланирования.Доступность		= (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо);
				
				Если ЗначениеЗаполнено(ТипПланирования) Тогда
					ЭлементыФормы.ТипУчетнойЦены.Доступность		= ТипПланирования <> Справочники.ТипПланированияКонтракт.ПродажиСоСкладаОптовикам; 
				Иначе
					ЭлементыФормы.ТипУчетнойЦены.Доступность		= (ТипСтатьи <> Перечисления.ТипСтатьиКонтрактов.Услуги И ТипСтатьи <> Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки);
				КонецЕсли; 
				
			Иначе
				
				ЭлементыФормы.ТипПланирования.Доступность		= (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус);
				ЭлементыФормы.ТипУчетнойЦены.Доступность		= НЕ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки;
				
			КонецЕсли; 
			
			ЭлементыФормы.ТипРасчета.Доступность			= (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Выкладка);
			ЭлементыФормы.КритерийВыполненияПлана.Доступность= (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус);
			ЭлементыФормы.ОтсрочкаПлатежа.Доступность		= ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы;
			ЭлементыФормы.ПланПоСтатье.Доступность 			= НЕ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги);
			ЭлементыФормы.ПланПоСтатьеСНДС.Доступность		= НЕ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги);
			ЭлементыФормы.ПланПоСтатьеРассчитать.Доступность= ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы;
			ЭлементыФормы.ВРамкахБюджета.Доступность		= ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо;
			ЭлементыФормы.СуммаБонусаПоСтатье.Доступность		= НЕ ВРамкахБюджета;
			ЭлементыФормы.СуммаБонусаПоСтатьеСНДС.Доступность	= НЕ ВРамкахБюджета;
			
			// Рамка реквизитов "План по статье"
			Если НЕ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги) Тогда
			
				ЭлементыФормы.ПланПоСтатье.ЦветРамки			= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветОсобогоТекста);
				ЭлементыФормы.ПланПоСтатьеСНДС.ЦветРамки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветОсобогоТекста,ЦветаСтиля.ЦветРамки);
				
			Иначе
				
				ЭлементыФормы.ПланПоСтатье.ЦветРамки			= ЦветаСтиля.ЦветРамки;
				ЭлементыФормы.ПланПоСтатьеСНДС.ЦветРамки		= ЦветаСтиля.ЦветРамки; 
			
			КонецЕсли; 
			
			// Рамка реквизитов "Сумма бонуса"
			Если НЕ ВРамкахБюджета Тогда
			
				ЭлементыФормы.СуммаБонусаПоСтатье.ЦветРамки		= ?(УчитыватьНДС,ЦветаСтиля.ЦветРамки,ЦветаСтиля.ЦветОсобогоТекста);
				ЭлементыФормы.СуммаБонусаПоСтатьеСНДС.ЦветРамки	= ?(УчитыватьНДС,ЦветаСтиля.ЦветОсобогоТекста,ЦветаСтиля.ЦветРамки); 
			
			Иначе
			
				ЭлементыФормы.СуммаБонусаПоСтатье.ЦветРамки		= ЦветаСтиля.ЦветРамки;
				ЭлементыФормы.СуммаБонусаПоСтатьеСНДС.ЦветРамки	= ЦветаСтиля.ЦветРамки; 
			
			КонецЕсли; 
			
			ЭлементыФормы.РасчетБонусПоСтатье.Доступность = РасчетБонусВРамках;
			
			УправлениеДоступностьюРеквизитовТЧТовары();
			УправлениеДоступностьюРеквизитовТЧПериоды();
			УправлениеДоступностьюЗаполнитьИзФайлаТоварАптека();
			УправлениеДоступностьюТЧАптека();
			УправлениеДоступностьюРеквизитовТЧШкалаВыполнения();
			
		КонецЕсли; 
		
	//КонецЕсли;
	
	// Поведение этих элементов не зависит ни от каких внешних факторов
	ЭлементыФормы.Исполнен.Доступность			 	= Истина;
	ЭлементыФормы.АктНомер.Доступность				= Исполнен;
	ЭлементыФормы.АктДата.Доступность				= Исполнен;
	
	// ТЧ "Шкала выполнения"
	ЭлементыФормы.Панель1.Страницы.ШкалаВыполнения.Видимость = ВидимостьТЧШкалаВыполнения();
	
	УправлениеНадписями();
	УправлениеКнопками();
	УправлениеЗаголовком();
	
КонецПроцедуры

Процедура РаспределитьСуммуПланаПоТоварам()

	КоличествоСтрокТЧТовары = Товары.Количество();
	
	Если КоличествоСтрокТЧТовары = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения		= Окр(ПланПоСтатье/КоличествоСтрокТЧТовары,2);
	ЗначениеРаспределенияСНДС	= Окр(ПланПоСтатьеСНДС/КоличествоСтрокТЧТовары,2);
	
	ЗаполненноСуммаПлана 		= 0;
	ЗаполненноСуммаПланасНДС	= 0;
	Для каждого СтрокаТЧ Из Товары Цикл
		
		СтавкаНДС	= СтрокаТЧ.СтавкаНДС;

		Если СтрокаТЧ.НомерСтроки = КоличествоСтрокТЧТовары Тогда
			
			Если УчитыватьНДС Тогда
			
				ЗначениеСНДС = ПланПоСтатьеСНДС - ЗаполненноСуммаПланасНДС;
				СтрокаТЧ.РазбивкаПоПериодамсНДС	= ЗначениеСНДС;
				
				// Расчет плана без НДС по строке
				СтрокаТЧ.РазбивкаПоПериодам		= ЗначениеСНДС / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100); 
			
			Иначе
			
				ЗначениеБезНДС = ПланПоСтатье - ЗаполненноСуммаПлана;
				СтрокаТЧ.РазбивкаПоПериодам		= ЗначениеБезНДС;
				
				// Расчет плана с НДС по строке
				СтрокаТЧ.РазбивкаПоПериодамсНДС = ЗначениеБезНДС * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100)
			
			КонецЕсли; 
			
		Иначе
			
			Если УчитыватьНДС Тогда
				
				СтрокаТЧ.РазбивкаПоПериодамсНДС = ЗначениеРаспределенияСНДС;
				СтрокаТЧ.РазбивкаПоПериодам		= ЗначениеРаспределенияСНДС / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
				ЗаполненноСуммаПланасНДС = ЗаполненноСуммаПланасНДС + ЗначениеРаспределенияСНДС;
				
			Иначе
				
				СтрокаТЧ.РазбивкаПоПериодам		= ЗначениеРаспределения;
				СтрокаТЧ.РазбивкаПоПериодамсНДС = ЗначениеРаспределения  * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
				ЗаполненноСуммаПлана = ЗаполненноСуммаПлана + ЗначениеРаспределения;
				
			КонецЕсли; 
			
		КонецЕсли; 
		СтрокаТЧ.РучноеРедактирование = Ложь;
		
	КонецЦикла;

КонецПроцедуры

Процедура РаспределитьСуммуПланаПоПериодам()

	КоличествоСтрокТЧТовары = Периоды.Количество();
	
	Если КоличествоСтрокТЧТовары = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределенияПланБезНДС		= Окр(ПланПоСтатье/КоличествоСтрокТЧТовары,2);  
	ЗначениеРаспределенияПлансНДС		= Окр(ПланПоСтатьеСНДС/КоличествоСтрокТЧТовары,2);  
	ЗначениеРаспределенияБонусБезНДС	= Окр(СуммаБонусаПоСтатье/КоличествоСтрокТЧТовары,2);  
	ЗначениеРаспределенияБонуссНДС		= Окр(СуммаБонусаПоСтатьеСНДС/КоличествоСтрокТЧТовары,2);  
	
	ЗаполненноСуммаПланаБезНДС	= 0;
	ЗаполненноСуммаПланасНДС	= 0;
	ЗаполненноСуммаБонусаБезНДС	= 0;
	ЗаполненноСуммаБонусасНДС	= 0;
	
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если СтрокаТЧ.НомерСтроки = КоличествоСтрокТЧТовары Тогда
			
			СтрокаТЧ.ПланНаПериод		= ПланПоСтатье - ЗаполненноСуммаПланаБезНДС;
			СтрокаТЧ.ПланНаПериодсНДС	= ПланПоСтатьеСНДС - ЗаполненноСуммаПланасНДС;
			СтрокаТЧ.БонусНаПериод		= СуммаБонусаПоСтатье - ЗаполненноСуммаБонусаБезНДС;
			СтрокаТЧ.БонусНаПериодсНДС	= СуммаБонусаПоСтатьеСНДС - ЗаполненноСуммаБонусасНДС;
			
		Иначе	
			
			СтрокаТЧ.ПланНаПериод		= ЗначениеРаспределенияПланБезНДС;
			ЗаполненноСуммаПланаБезНДС	= ЗаполненноСуммаПланаБезНДС + ЗначениеРаспределенияПланБезНДС;
			
			СтрокаТЧ.ПланНаПериодсНДС	= ЗначениеРаспределенияПлансНДС;
			ЗаполненноСуммаПланасНДС	= ЗаполненноСуммаПланасНДС + ЗначениеРаспределенияПлансНДС;
			
			СтрокаТЧ.БонусНаПериод		= ЗначениеРаспределенияБонусБезНДС;
			ЗаполненноСуммаБонусаБезНДС	= ЗаполненноСуммаБонусаБезНДС + ЗначениеРаспределенияБонусБезНДС;
			
			СтрокаТЧ.БонусНаПериодсНДС	= ЗначениеРаспределенияБонуссНДС;
			ЗаполненноСуммаБонусасНДС	= ЗаполненноСуммаБонусасНДС + ЗначениеРаспределенияБонуссНДС;
			
		КонецЕсли; 
		
		СтрокаТЧ.РучноеРедактирование		= Ложь;
		СтрокаТЧ.РучноеРедактированиеБонус	= Ложь;
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверкаПередРазбивкойНаПериоды()

	Если НЕ ЗначениеЗаполнено(НачалоДействия) ИЛИ НЕ ЗначениеЗаполнено(ОкончаниеДействия) Тогда
	
		Сообщить("Не заполнены даты начала или окончания действия статьи!");
		Возврат Истина
	
	КонецЕсли;
	
	Если Периоды.Количество() > 0 Тогда
	
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат Истина	
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

Процедура РазбивкаПоПериодам(КолвоМесяцевПериода)

	Периоды.Очистить();
	НачалоПериодаВСтроке = НачалоМесяца(НачалоДействия);
	Пока НачалоПериодаВСтроке < ОкончаниеДействия Цикл
	
		НоваяСтрокаПериоды = Периоды.Добавить();
		НоваяСтрокаПериоды.ДатаС	= НачалоПериодаВСтроке;
		НоваяСтрокаПериоды.ДатаПо	= Мин(ДобавитьМесяц(НачалоПериодаВСтроке,КолвоМесяцевПериода)-1,ОкончаниеДействия); 
		
		НачалоПериодаВСтроке = НачалоМесяца(ДобавитьМесяц(НачалоПериодаВСтроке,КолвоМесяцевПериода))
	
	КонецЦикла;

КонецПроцедуры

Процедура РасчитатьСуммаБонусаПоСтатье()

	//==>ЕНТ-1398.Коробка.2019.03.19
	// Расчет НДС не зависимо от типа расчета
	//Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
		
		//Если УчитыватьНДС Тогда
		//	
		//	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
		//	СуммаБонусаПоСтатье = СуммаБонусаПоСтатьеСНДС / (1+СредняяСтавкаНДС/100)	
		//	
		//КонецЕсли; 
		
	//Иначе
		
		//СуммаБонусаПоСтатье = ПланПоСтатье * ЗначениеБонуса/100
		
	//КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		СуммаБонусаПоСтатье = ПланПоСтатье * ЗначениеБонуса/100		
	КонецЕсли; 
	//<==ЕНТ-1398.Коробка.2019.03.19
	
КонецПроцедуры

Процедура РасчитатьСуммаБонусаПоСтатьесНДС()
	
	//==>ЕНТ-1398.Коробка.2019.03.19
	// Расчет НДС не зависимо от типа расчета
	//Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
	//
	//	Если НЕ УчитыватьНДС Тогда
	//	
	//		СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	//		СуммаБонусаПоСтатьеСНДС = СуммаБонусаПоСтатье * (1+СредняяСтавкаНДС/100)	
	//	
	//	КонецЕсли; 
	//
	//Иначе
	//
	//	СуммаБонусаПоСтатьеСНДС = ПланПоСтатьеСНДС * ЗначениеБонуса/100
	//
	//КонецЕсли;
	Если УчитыватьНДС Тогда
		СуммаБонусаПоСтатьеСНДС = ПланПоСтатьеСНДС * ЗначениеБонуса/100		
	КонецЕсли; 
	
	//<==ЕНТ-1398.Коробка.2019.03.19
	
КонецПроцедуры

Процедура РасчитатьСуммуБонусаПоСтатье_Вторично()

	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	СуммаБонусаПоСтатье = СуммаБонусаПоСтатьеСНДС / (1+СредняяСтавкаНДС/100);
	
КонецПроцедуры

Процедура РасчитатьСуммаБонусаПоСтатьесНДС_Вторично()

	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	СуммаБонусаПоСтатьеСНДС = СуммаБонусаПоСтатье * (1+СредняяСтавкаНДС/100);	

КонецПроцедуры
 
Процедура ВывестиСписоАптекПоСтрокеТовара(Товар)

	Отбор = Новый Структура("Товар", Товар); 
	Аптеки.Загрузить(МегаТЗ.Скопировать(Отбор));

КонецПроцедуры

Процедура ЗаписатьСписоАптекПоСтрокеТовара(Товар)
	
	// Удаление всех строк по текущему товару
	Индекс = МегаТЗ.Количество()-1;
	Пока Индекс >= 0 Цикл
	
		Если МегаТЗ[Индекс].Товар = Товар Тогда
		
			МегаТЗ.Удалить(Индекс)
		
		КонецЕсли;
		
		Индекс = Индекс-1;
	
	КонецЦикла; 
	
	// Добавление строк по текущему товару
	Для каждого СтрокаАптека Из Аптеки Цикл
	
		НоваяСтрокаМегаТЗ = МегаТЗ.Добавить();	
	    НоваяСтрокаМегаТЗ.Товар		= Товар;
	    НоваяСтрокаМегаТЗ.Аптека	= СтрокаАптека.Аптека;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаписатьСписоАптекПоСтрокеТовараИзТаблицыЗначений(Товар,ТЗАптек)
	
	// Удаление всех строк по текущему товару
	Индекс = МегаТЗ.Количество()-1;
	Пока Индекс >= 0 Цикл
	
		Если МегаТЗ[Индекс].Товар = Товар Тогда
		
			МегаТЗ.Удалить(Индекс)
		
		КонецЕсли;
		
		Индекс = Индекс-1;
	
	КонецЦикла; 
	
	// Добавление строк по текущему товару
	Для каждого СтрокаАптека Из ТЗАптек Цикл
	
		НоваяСтрокаМегаТЗ = МегаТЗ.Добавить();	
	    НоваяСтрокаМегаТЗ.Товар		= Товар;
	    НоваяСтрокаМегаТЗ.Аптека	= СтрокаАптека.Аптека;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаписатьАптекуПоСтрокеТовара(Товар, Аптека)

	// Удаление строки по текущему товару и аптеке
	Индекс = МегаТЗ.Количество()-1;
	Пока Индекс > 0 Цикл
	
		Если МегаТЗ[Индекс].Товар = Товар и МегаТЗ[Индекс].Аптека = Аптека Тогда
		
			МегаТЗ.Удалить(Индекс)
		
		КонецЕсли;
		
		Индекс = Индекс-1;
	
	КонецЦикла; 
	
	НоваяСтрокаМегаТЗ = МегаТЗ.Добавить();	
	НоваяСтрокаМегаТЗ.Товар		= Товар;
	НоваяСтрокаМегаТЗ.Аптека	= Аптека;

КонецПроцедуры

Процедура ПослеЗагрузкиСпискаАптек()

	Если НЕ ПоВсемТоварам Тогда
		
		ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			
			Сообщить("Аптеки загружаются для каждой строки товара (Флаг ""По всем товарам"" отключен).
			|В ТЧ ""Товары"" не указана строка для которой будут загружены аптеки.
			|Активизируйте строку ТЧ ""Товары"" и повторите загрузку.");
			Предупреждение("Ошибка при загрузке, см. строку сообщений");
		
		Иначе
		
			ЗаписатьСписоАптекПоСтрокеТовара(ТекущаяСтрока.Товар)
		
		КонецЕсли; 	
	
	КонецЕсли; 

КонецПроцедуры

Функция ПроверкаСовместимостиРеквизитов()
	
	ТипКонтракта = МаркетинговыйКонтракт.ТипКонтракта;
	ОшибкаВДокументе = Ложь;
	// Проверка тип статьи от типа контракта
	Если ЗначениеЗаполнено(ТипСтатьи) Тогда
		
		Если ТипСтатьи = перечисления.ТипСтатьиКонтрактов.Ассортимент ИЛИ
			ТипСтатьи = перечисления.ТипСтатьиКонтрактов.Планы ИЛИ 
			ТипСтатьи = перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки ИЛИ 
			ТипСтатьи = перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда 
		ИначеЕсли ТипСтатьи = перечисления.ТипСтатьиКонтрактов.Услуги И ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда 
		ИначеЕсли ТипСтатьи = перечисления.ТипСтатьиКонтрактов.Выкладка И ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда // Все ок
		ИначеЕсли ТипСтатьи = перечисления.ТипСтатьиКонтрактов.Суперпромо И ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда // Все ок
		Иначе
			
			Сообщить("Выбранный тип статьи: "+ТипСтатьи+ " не соответствует типу контракта: "+ТипКонтракта);
			ОшибкаВДокументе =  Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверка ТипПланирования от типа контракта
	Если ЗначениеЗаполнено(ТипКонтракта) Тогда
		
		Если ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда
			Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы  или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
			
				Если ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаВАптеки 
					ИЛИ ТипПланирования = Справочники.ТипПланированияКонтракт.ПродажиИзАптек 
					ИЛИ ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаДляОпта Тогда
				
					
				
				КонецЕсли; 	
			
			ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо Тогда
			
				Если ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаВАптеки 
					ИЛИ ТипПланирования = Справочники.ТипПланированияКонтракт.ПродажиИзАптек Тогда
				
					
				
				КонецЕсли; 	
			
			КонецЕсли; 

		ИначеЕсли ТипКонтракта = Перечисления.ТипКонтракта.Логистический И 
			(ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаДляОпта 
			ИЛИ ТипПланирования = Справочники.ТипПланированияКонтракт.ПродажиСоСкладаОптовикам) Тогда
		ИначеЕсли не ТипПланирования.Предопределенный Тогда
		Иначе
			
			Сообщить("Выбранный тип планирования: "+ТипПланирования+ " не соответствует типу контракта: "+ТипКонтракта);
			ОшибкаВДокументе =  Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверка Критерий выполнения по типу статьи
	Если ЗначениеЗаполнено(КритерийВыполненияПлана) Тогда
		
		Если КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество И
			(ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Выкладка ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо)
			Тогда
			
		ИначеЕсли КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Рубли И  
			(ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки ИЛИ
			ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент)
			Тогда	
			
		Иначе
			
			Сообщить("Выбранный критерий выполнения плана: "+КритерийВыполненияПлана+ " не соответствует типу статьи: "+ТипСтатьи);
			ОшибкаВДокументе =  Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка Тип расчета бонуса по типу статьи
	Если ЗначениеЗаполнено(ТипРасчета) Тогда
		
		Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтСуммыПлана И
			ТипСтатьи <> Перечисления.ТипСтатьиКонтрактов.Планы Тогда
			
			Сообщить("Выбранный тип расчета: "+ТипРасчета+ " не соответствует типу статьи: "+ТипСтатьи);
			ОшибкаВДокументе =  Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	//Проверка на сумму плана по типу статьи
	Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы
		или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Выкладка 
		или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
		
		Если ПланПоСтатье <= 0 или ПланПоСтатьеСНДС <= 0 Тогда
			Сообщить("Для выбранного типа статьи план по статье без НДС или план по статье с НДС не может быть равен 0");
			ОшибкаВДокументе =  Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка на корректность дат
	Если НачалоДействия > ОкончаниеДействия Тогда
	
		Сообщить("Дата начала действия статьи превышает дату окончания дейятвия!");
		ОшибкаВДокументе =  Истина;
	
	КонецЕсли; 
	
	//ПОКА ЗАКОММЕНТИРОВАЛИ
	//Проверка на Сумму бонуса 
	//Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус или ПланПоСтатье = 0 Тогда
	//	Если СуммаБонусаПоСтатье <= 0 Тогда
	//		Сообщить("Сумма бонуса по статье должна быть > 0");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус или ПланПоСтатье = 0 Тогда
	//	Если СуммаБонусаПоСтатьеСНДС <= 0 Тогда
	//		Сообщить("Сумма бонуса по статье с НДС должна быть > 0");
	//	КонецЕсли;
	//КонецЕсли;
	
	// Проверка за заполненность поля ПланПоСтатьеКоличество
	Если КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество и ПланПоСтатьеКоличество = 0 Тогда
	
		Сообщить("Не задано значение ""План по статье количество"" при выбраном критерии выполнения плана ""Количество""!");
		ОшибкаВДокументе =  Истина;
	
	КонецЕсли; 
	                                         
	Возврат ОшибкаВДокументе;
	
КонецФункции // ПроверкаСовместимостиРеквизитов()

// Режим	0 - пересчет колонки с НДС
//			1 - пересчет колонки без НДС
Процедура ПересчитатьЗначениеКолонкиПериодТЧТовары(Режим,НомерСтрокиДляЗаписиПогрешностиОкругления)

	ЗаписаноЗначение = 0;
	Для каждого СтрокаТЧ Из Товары Цикл
	
		Если СтрокаТЧ.НомерСтроки <> НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
			
			Если Режим = 0 Тогда
				
				СтрокаТЧ.РазбивкаПоПериодамсНДС = СтрокаТЧ.РазбивкаПоПериодам * (1+ПереопределениеЗначенияСтавки20_18(СтрокаТЧ.СтавкаНДС,Дата)/100);  
				ЗаписаноЗначение = ЗаписаноЗначение + СтрокаТЧ.РазбивкаПоПериодамсНДС;
				
			Иначе
				
				СтрокаТЧ.РазбивкаПоПериодам = СтрокаТЧ.РазбивкаПоПериодамсНДС / (1+ПереопределениеЗначенияСтавки20_18(СтрокаТЧ.СтавкаНДС,Дата)/100);
				ЗаписаноЗначение = ЗаписаноЗначение + СтрокаТЧ.РазбивкаПоПериодам;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// хвосты в последнюю редактируемую строку
	Если Режим = 0 Тогда
		Товары[НомерСтрокиДляЗаписиПогрешностиОкругления-1].РазбивкаПоПериодамсНДС = ПланПоСтатьеСНДС - ЗаписаноЗначение
	Иначе
		Товары[НомерСтрокиДляЗаписиПогрешностиОкругления-1].РазбивкаПоПериодам = ПланПоСтатье - ЗаписаноЗначение
	КонецЕсли; 
	
КонецПроцедуры

// Режим	0 - пересчет колонки с НДС
//			1 - пересчет колонки без НДС
Процедура ПересчитатьЗначениеКолонокПериодТЧПериоды(Режим,НомерСтрокиДляЗаписиПогрешностиОкругления)

	ЗаписаноЗначение = 0;
	ЗаписаноЗначениеБонусБезНДС	= 0;
	ЗаписаноЗначениеБонуссНДС	= 0;
	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	
	Для каждого СтрокаТЧ Из Периоды Цикл
	
		Если СтрокаТЧ.НомерСтроки <> НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
			
			Если Режим = 0 Тогда
				
				СтрокаТЧ.ПланНаПериодсНДС = СтрокаТЧ.ПланНаПериод * (1+СредняяСтавкаНДС/100);
				ЗаписаноЗначение = ЗаписаноЗначение + СтрокаТЧ.ПланНаПериодсНДС;
				
			Иначе
				
				СтрокаТЧ.ПланНаПериод = СтрокаТЧ.ПланНаПериодсНДС / (1+СредняяСтавкаНДС/100);
				ЗаписаноЗначение = ЗаписаноЗначение + СтрокаТЧ.ПланНаПериод;
				
			КонецЕсли;
			
			Если ТипРасчета <> Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
			
				СтрокаТЧ.БонусНаПериод		= СтрокаТЧ.ПланНаПериод * ЗначениеБонуса/100;
				ЗаписаноЗначениеБонусБезНДС = ЗаписаноЗначениеБонусБезНДС + СтрокаТЧ.БонусНаПериод;
				СтрокаТЧ.БонусНаПериодсНДС	= СтрокаТЧ.ПланНаПериодсНДС * ЗначениеБонуса/100;
				ЗаписаноЗначениеБонуссНДС	= ЗаписаноЗначениеБонуссНДС + СтрокаТЧ.БонусНаПериодсНДС;
			
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// хвосты в последнюю редактируемую строку
	Если Режим = 0 Тогда
		Периоды[НомерСтрокиДляЗаписиПогрешностиОкругления-1].ПланНаПериодсНДС = ПланПоСтатьеСНДС - ЗаписаноЗначение
	Иначе
		Периоды[НомерСтрокиДляЗаписиПогрешностиОкругления-1].ПланНаПериод = ПланПоСтатье - ЗаписаноЗначение
	КонецЕсли; 
	
	Если ТипРасчета <> Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
		
		Периоды[НомерСтрокиДляЗаписиПогрешностиОкругления-1].БонусНаПериод		=  СуммаБонусаПоСтатье - ЗаписаноЗначениеБонусБезНДС;
		Периоды[НомерСтрокиДляЗаписиПогрешностиОкругления-1].БонусНаПериодсНДС	=  СуммаБонусаПоСтатьеСНДС - ЗаписаноЗначениеБонуссНДС
		
	КонецЕсли;

КонецПроцедуры

// Режим	0 - пересчет колонки с НДС
//			1 - пересчет колонки без НДС
Процедура ПересчитатьЗначениеКолонокПериодТЧПериоды_ТолькоБонусы(Режим,НомерСтрокиДляЗаписиПогрешностиОкругления)

	ЗаписаноЗначение = 0;
	ЗаписаноЗначениеБонусБезНДС	= 0;
	ЗаписаноЗначениеБонуссНДС	= 0;
	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	
	Для каждого СтрокаТЧ Из Периоды Цикл
	
		Если СтрокаТЧ.НомерСтроки <> НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
			
			Если Режим = 0 Тогда
				
				СтрокаТЧ.БонусНаПериодсНДС	=  СтрокаТЧ.БонусНаПериод * (1+СредняяСтавкаНДС/100); 
				ЗаписаноЗначениеБонуссНДС	= ЗаписаноЗначениеБонуссНДС + СтрокаТЧ.БонусНаПериодсНДС;
				
			Иначе
				
				СтрокаТЧ.БонусНаПериод = СтрокаТЧ.БонусНаПериодсНДС / (1+СредняяСтавкаНДС/100);
				ЗаписаноЗначениеБонусБезНДС = ЗаписаноЗначениеБонусБезНДС + СтрокаТЧ.БонусНаПериод;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// хвосты в последнюю редактируемую строку
	Если Режим = 0 Тогда
		Периоды[НомерСтрокиДляЗаписиПогрешностиОкругления-1].БонусНаПериодсНДС	=  СуммаБонусаПоСтатьеСНДС - ЗаписаноЗначениеБонуссНДС
	Иначе
		Периоды[НомерСтрокиДляЗаписиПогрешностиОкругления-1].БонусНаПериод		=  СуммаБонусаПоСтатье - ЗаписаноЗначениеБонусБезНДС;
	КонецЕсли; 
	
КонецПроцедуры

// Старый вариант - Получение среднего значения НДС по ТЧ Товары
// Новый вариант - возврат значения из реквизита шапки
Функция ПолучитьСреднееЗначениеНДС()

	//СуммаСтавокНДС = 0;
	//Для каждого СтрокаТЧ Из Товары Цикл
	//
	//	СуммаСтавокНДС = СуммаСтавокНДС + ПереопределениеЗначенияСтавки20_18(СтрокаТЧ.СтавкаНДС,Дата)
	//
	//КонецЦикла;
	//
	//Возврат СуммаСтавокНДС / Товары.Количество();
	
	// С появлением реквизита СтавкаНДСБонус возврат значения из реквизита
	Возврат ПереопределениеЗначенияСтавки20_18(СтавкаНДСБонуса,Дата);

КонецФункции // ПолучитьСреднееЗначениеНДС()

Функция ВидимостьТЧШкалаВыполнения()

	ВозвращаемоеЗначение = Ложь;
	Если МаркетинговыйКонтракт.ТипКонтракта	= Перечисления.ТипКонтракта.Маркетинговый Тогда
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы 
			ИЛИ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
		
				ВозвращаемоеЗначение = Истина
		КонецЕсли; 
	КонецЕсли; 

	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ВидимостьТЧШкалаВыполнения()

Процедура ЗаполнитьТЧШкалаВыполнения()

	Если ШкалаВыполнения.Количество()=0 Тогда
		
		НоваяСтрока = ШкалаВыполнения.Добавить();
		НоваяСтрока.Приоритет				= Истина;
		НоваяСтрока.ПланПоСтатьеБезНДС		= ПланПоСтатье;
		НоваяСтрока.ПланПоСтатьеСНДС		= ПланПоСтатьеСНДС;
		НоваяСтрока.ТипРасчета				= ТипРасчета;
		НоваяСтрока.ЗначениеБонуса			= ЗначениеБонуса;
		НоваяСтрока.СуммаБонусаПоСтатьеСНДС	= СуммаБонусаПоСтатьеСНДС;
		НоваяСтрока.СуммаБонусаПоСтатье		= СуммаБонусаПоСтатье;
	
	Иначе
	
		СтрокаПерезаполнена = Ложь;
		Для каждого СтрокаТЧ Из ШкалаВыполнения Цикл
		
			Если СтрокаТЧ.Приоритет Тогда
			
				СтрокаТЧ.ПланПоСтатьеБезНДС			= ПланПоСтатье;
				СтрокаТЧ.ПланПоСтатьеСНДС			= ПланПоСтатьеСНДС;
				СтрокаТЧ.ТипРасчета					= ТипРасчета;
				СтрокаТЧ.ЗначениеБонуса				= ЗначениеБонуса;
				СтрокаТЧ.СуммаБонусаПоСтатьеСНДС	= СуммаБонусаПоСтатьеСНДС;
				СтрокаТЧ.СуммаБонусаПоСтатье		= СуммаБонусаПоСтатье;
				СтрокаПерезаполнена = Истина;
				
				Прервать;
			
			КонецЕсли; 	
		
		КонецЦикла; 
		
		Если НЕ СтрокаПерезаполнена Тогда
			Сообщить("В табличной части ""Шкала выполнения"" нет ни одной строки с активной шкалой (взведен флаг Приоритет). Данные не в табличной части не перезаполнены");	
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры

Процедура ЗаполнитьКоличествоУП_ТЧ_Товары()

	КоличествоУпаковокТЧ = Товары.Итог("КоличествоУП");
	Если КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество 
		И Товары.Количество()>0  Тогда
		
		Если ПланПоСтатьеКоличество > КоличествоУпаковокТЧ Тогда
		
			Разница = ПланПоСтатьеКоличество-КоличествоУпаковокТЧ;
			Если Вопрос("Количество введенных упаковок больше количества упаковок в табличной части ""Товары"". Добавить разницу "+Разница+ " упаковок к первой строке ""Товары""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат	
			КонецЕсли;
			
			Товары[0].КоличествоУП = Товары[0].КоличествоУП + Разница;
			
		ИначеЕсли ПланПоСтатьеКоличество < КоличествоУпаковокТЧ Тогда
		
			Сообщить("Количество введенных упаковок меньше количества упаковок в табличной части ""Товары"".")
		
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры
 
// ОБРАБОТЧИКИ ФОРМЫ
Процедура ПриОткрытии()
	
	УправлениеДоступностьюРеквизитов();
	
	ЭтоНовыйОбъект = ЭтоНовый();
	Если ЭтоНовыйОбъект Тогда
		ПоВсемТоварам = Истина	
	КонецЕсли;
	
	Если НЕ ПоВсемТоварам Тогда
		
		НЗ = РегистрыСведений.МатрицаМЛК.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументРегистратор.Значение = Ссылка;
		НЗ.Отбор.ДокументРегистратор.Использование = Истина;
		НЗ.Прочитать();
		МегаТЗ = НЗ.Выгрузить();
		НЗ.Очистить();
		
		// Выведем аптеки по первой строке товара
		Если Товары.Количество()>0 Тогда
			ВывестиСписоАптекПоСтрокеТовара(Товары[0].Товар)
		КонецЕсли; 
		
	КонецЕсли;  
	
	СтруктураНаСтарте = Новый Структура("ТипСтатьи,НачалоДействия,ОкончаниеДействия,СуммаБонусаПоСтатье,СуммаБонусаПоСтатьеСНДС", ТипСтатьи, НачалоДействия, ОкончаниеДействия,СуммаБонусаПоСтатье,СуммаБонусаПоСтатьеСНДС); 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Отказ = ПроверкаСовместимостиРеквизитов();
	
	// Дополнительная проверка: Если документ основание МЛК утвержден или проведен, то записывать текущий документ можно толко
	// если "Тип статьи" = СуперПромо и "В рамеах бюджета" = Истина
	Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован Тогда
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо и ВРамкахБюджета Тогда
			
		Иначе
			
			Сообщить("В документе выбрана ссылка на контракт, который "+?(МаркетинговыйКонтракт.Утвержден, "утвержден","согласован")+".
			|Для такого документа запись возможна только в случае, если тип документа указан ""Суперпромо"" и установлен признак ""В рамках бюджета""."); 
			Отказ = Истина	
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	// ==>ЕНТ-1426. Коробка. Проверка на дубли по товару
	Запрос = Новый ЗАпрос;
	ТекстЗАпроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СтатьиКонтрактаТовары.КодТовара) КАК КодТовара,
	|	СтатьиКонтрактаТовары.Товар КАК Товар
	|ПОМЕСТИТЬ ВТ_ДвойнойТовар
	|ИЗ
	|	Документ.СтатьиКонтракта.Товары КАК СтатьиКонтрактаТовары
	|ГДЕ
	|	СтатьиКонтрактаТовары.Ссылка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиКонтрактаТовары.Товар
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СтатьиКонтрактаТовары.КодТовара) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиКонтрактаТовары.НомерСтроки КАК НомерСтроки,
	|	СтатьиКонтрактаТовары.КодТовара КАК КодТовара,
	|	СтатьиКонтрактаТовары.Товар КАК Товар
	|ИЗ
	|	ВТ_ДвойнойТовар КАК ВТ_ДвойнойТовар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СтатьиКонтракта.Товары КАК СтатьиКонтрактаТовары
	|		ПО ВТ_ДвойнойТовар.Товар = СтатьиКонтрактаТовары.Товар
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара";
	Запрос.Текст = ТекстЗАпроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
	
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("Номер строки: "+Выборка.НомерСтроки + "; Код товара: "+Выборка.КодТовара + "; Товар: "+Выборка.Товар)
		КонецЦикла; 
		Предупреждение("В табличной части ""Товары"" присутствуют дубли товара. Перед записью необходимо устранить их!");
		Отказ = Истина
	
	КонецЕсли; 
	// <==ЕНТ-1426. Коробка. Проверка на дубли по товару
	
	Если Отказ  Тогда
		Предупреждение("Документ не сохранен!",15)
	КонецЕсли;
	
	Если СтруктураРеквизитовПриОткрытии.Согласован <> Согласован Тогда
	
		Изменение = Изменения.Добавить();
		Изменение.Дата = ТекущаяДата();
		Изменение.КомментарийИзменения = "Согласован = " + Согласован;
		Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
		Изменение.ТипИзм = Перечисления.ДействияНадДокументами.Изменение;
		
		СтруктураРеквизитовПриОткрытии.Согласован = Согласован;
	
	КонецЕсли;
	
	Если СтруктураРеквизитовПриОткрытии.Утвержден <> Утвержден Тогда
	
		Изменение = Изменения.Добавить();
		Изменение.Дата = ТекущаяДата();
		Изменение.КомментарийИзменения = "Утвержден = " + Утвержден;
		Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
		Изменение.ТипИзм = Перечисления.ДействияНадДокументами.Изменение;
		
		СтруктураРеквизитовПриОткрытии.Утвержден = Утвержден;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Если ПоВсемТоварам Тогда
	
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтатьиКонтрактаТовары.Товар КАК Товар,
		|	СтатьиКонтрактаАптеки.Аптека КАК Аптека,
		|	СтатьиКонтрактаТовары.Ссылка КАК ДокументРегистратор,
		|	СтатьиКонтрактаТовары.Ссылка.НачалоДействия КАК ДатаДействияС,
		|	СтатьиКонтрактаТовары.Ссылка.ОкончаниеДействия КАК ДатаДействияПо,
		|	СтатьиКонтрактаТовары.Ссылка.МаркетинговыйКонтракт.Утвержден КАК УтвержденМЛК,
		|	СтатьиКонтрактаТовары.Ссылка.МаркетинговыйКонтракт.ТипКонтракта.Ссылка КАК ТипКонтракта
		|ИЗ
		|	Документ.СтатьиКонтракта.Товары КАК СтатьиКонтрактаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СтатьиКонтракта.Аптеки КАК СтатьиКонтрактаАптеки
		|		ПО СтатьиКонтрактаТовары.Ссылка = СтатьиКонтрактаАптеки.Ссылка
		|ГДЕ
		|	СтатьиКонтрактаТовары.Ссылка = &Ссылка";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
				
		ТЗ_ДляЗаписи = Запрос.Выполнить().Выгрузить();
		
		НЗ = РегистрыСведений.МатрицаМЛК.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументРегистратор.Значение		= Ссылка;
		НЗ.Отбор.ДокументРегистратор.Использование	= Истина;
		//НЗ.Прочитать();
		НЗ.Загрузить(ТЗ_ДляЗаписи);
		НЗ.Записать();
		
	Иначе
		
		НЗ = РегистрыСведений.МатрицаМЛК.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументРегистратор.Значение		= Ссылка;
		НЗ.Отбор.ДокументРегистратор.Использование	= Истина;
		
		МегаТЗ.ЗаполнитьЗначения(Ссылка,"ДокументРегистратор");
		МегаТЗ.ЗаполнитьЗначения(НачалоДействия,"ДатаДействияС");
		МегаТЗ.ЗаполнитьЗначения(ОкончаниеДействия,"ДатаДействияПо");
		МегаТЗ.ЗаполнитьЗначения(МаркетинговыйКонтракт.Утвержден,"УтвержденМЛК");
		МегаТЗ.ЗаполнитьЗначения(МаркетинговыйКонтракт.ТипКонтракта,"ТипКонтракта");
		
		НЗ.Загрузить(МегаТЗ);
		НЗ.Записать();
		
	КонецЕсли;
	
	Если ЭтоНовыйОбъект Тогда
		Оповестить("СозданНовыйДокСтатьяМЛК",Ссылка, "")
	Иначе
		
		// Изменение суммы бонуса в документе основании
		Если СтруктураНаСтарте.ТипСтатьи <> ТипСтатьи
			ИЛИ СтруктураНаСтарте.НачалоДействия <> НачалоДействия
			ИЛИ СтруктураНаСтарте.ОкончаниеДействия <> ОкончаниеДействия
			ИЛИ СтруктураНаСтарте.СуммаБонусаПоСтатье <> СуммаБонусаПоСтатье
			ИЛИ СтруктураНаСтарте.СуммаБонусаПоСтатьеСНДС <> СуммаБонусаПоСтатьеСНДС
			Тогда
		
			МКЛОбъект = МаркетинговыйКонтракт.ПолучитьОбъект();
			Для каждого СтрокаТЧ Из МКЛОбъект.СтатьиКонтракта  Цикл
			
				Если СтрокаТЧ.СтатьяКонтракта <> Ссылка Тогда
					Продолжить
				КонецЕсли; 
				
				СтрокаТЧ.ТипСтатьи			= ТипСтатьи; 
				СтрокаТЧ.ДатаНачала			= НачалоДействия; 
				СтрокаТЧ.ДатаОкончания		= ОкончаниеДействия; 
				СтрокаТЧ.СуммаНачислений	= СуммаБонусаПоСтатье;
				СтрокаТЧ.СуммаНачисленийсНДС= СуммаБонусаПоСтатьеСНДС;
				Прервать;
				
			КонецЦикла; 
			
			Попытка
			
				МКЛОбъект.Записать();	
			
			Исключение
			   Сообщить("В процессе работы с документом внесены изменения в один или несколько реквизитов (тип статьи, действие статьи с, действие статьи по, сумма бонусов по статье
			   |Эти изменения не удалось обновить автоматически в документе основании МЛК.
			   |Внесите изменения вручную");
			   Предупреждение("Не удалось внести изменения в документ основание!"); 
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Для документа, у которого выбран МЛК утвержденый или согласованный и 
	// "Тип статьи" = СуперПромо и "В рамеах бюджета" = Истина
	// пропишем в табличную часть ссылку на эту статью
	Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован Тогда
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо и ВРамкахБюджета Тогда
			
			МКЛОбъект = МаркетинговыйКонтракт.ПолучитьОбъект();
			ЕстьСсылкаНаДаннуюСтатью = Ложь;
			Для каждого СтрокаТЧ Из МКЛОбъект.СтатьиКонтракта  Цикл
			
				Если СтрокаТЧ.СтатьяКонтракта = Ссылка Тогда
					ЕстьСсылкаНаДаннуюСтатью = Истина;
					Прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если НЕ ЕстьСсылкаНаДаннуюСтатью Тогда
			
				СтрокаТЧ = МКЛОбъект.СтатьиКонтракта.Добавить();
				СтрокаТЧ.СтатьяКонтракта	= Ссылка; 
				СтрокаТЧ.ТипСтатьи			= ТипСтатьи; 
				СтрокаТЧ.ДатаНачала			= НачалоДействия; 
				СтрокаТЧ.ДатаОкончания		= ОкончаниеДействия; 
				
				Попытка
				
					МКЛОбъект.Записать();
					Сообщить("Добавлена новая строка с данной статьей в документ основание: "+МаркетинговыйКонтракт);
				
				Исключение
					
				   Сообщить("Данный документ с типом документа ""Суперпромо"" и признаком ""В рамках бюджета"".
				   |Документ основание МЛК утвержден или согласован.
				   |При этом в документе основании МЛК данная статья не внесена. Автоматически внести изменения в документ МЛК не удалось.
				   |Внесите изменения вручную!");
				   Предупреждение("Не удалось внести изменения в документ основание!"); 
				   
			   КонецПопытки;
		
			КонецЕсли; 
		   
		КонецЕсли; 	
		
	КонецЕсли; 
	
КонецПроцедуры

// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ 
Процедура ТипСтатьиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТипСтатьиСтароеЗначение = Элемент.Значение;
	
КонецПроцедуры

Процедура ТипСтатьиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый Массив;
	СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.Ассортимент);
	СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.Планы);
	СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки);
	СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.РетроБонус);
	
	Если МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда
	
		СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.Услуги);
		СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.Выкладка);
		СписокВыбора.Добавить(Перечисления.ТипСтатьиКонтрактов.Суперпромо);
		ЭлементыФормы.ТипСтатьи.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);	
		
	ИначеЕсли МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический Тогда
	
		ЭлементыФормы.ТипСтатьи.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);	
		
	Иначе
	    сообщить("Не определен тип контракта МЛК! Выбор типа статьи не возможен.");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТипСтатьиПриИзменении(Элемент)
	
	ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ПустаяСсылка();
	ТипУчетнойЦены			= Справочники.ТипУчетнойЦеныКонтрактов.ПустаяСсылка();
	ВРамкахБюджета			= Ложь;
	
	Если МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Выкладка Тогда
			
			ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаВАптеки;
			КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество;
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус;
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги  Тогда
			
			ТипПланирования = Справочники.ТипПланированияКонтракт.ПустаяСсылка();
			КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.ПустаяСсылка();
			ТипУчетнойЦены			= Справочники.ТипУчетнойЦеныКонтрактов.ПустаяСсылка();
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус;
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки Тогда
			
			ТипПланирования = Справочники.ТипПланированияКонтракт.ПустаяСсылка();
			КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Рубли;
			ТипУчетнойЦены			= Справочники.ТипУчетнойЦеныКонтрактов.ЦенаФактическойЗакупки;
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтУчетнойЦены;
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо  Тогда
			
			КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество;
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус;
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы  Тогда
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтСуммыПлана;
		КонецЕсли;
		
	Иначе  // Логистический
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент Тогда
			
			ТипПланирования			= Справочники.ТипПланированияКонтракт.ЗакупкаДляОпта;
			КритерийВыполненияПлана	= Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество;
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки Тогда
			
			ТипПланирования = Справочники.ТипПланированияКонтракт.ПустаяСсылка();
			КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Рубли;		
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтУчетнойЦены;
			ТипУчетнойЦены			= Справочники.ТипУчетнойЦеныКонтрактов.ЦенаФактическойЗакупки;
			
		//ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо  Тогда
		//	ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус; 
		//ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги  Тогда
		//	ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус;
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы  Тогда
			ТипРасчета				= Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтСуммыПлана;
		КонецЕсли;
		
	КонецЕсли; 
	
	УправлениеДоступностьюРеквизитов()
	
КонецПроцедуры

Процедура ТипПланированияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТипПланированиСтароеЗначение = Элемент.Значение;
	
	Если МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда
	
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы  или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
		
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипПланированияКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000001");
			СписокЗначений.Добавить("000000002");
			СписокЗначений.Добавить("000000003");
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо  Тогда	
		
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипПланированияКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000001");
			СписокЗначений.Добавить("000000003");
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		КонецЕсли; 
	
	Иначе // Логистический
	
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
		
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипПланированияКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000002");
			СписокЗначений.Добавить("000000004");
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВРамкахБюджетаПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
	
		СуммаБонусаПоСтатье		= 0;
		СуммаБонусаПоСтатьеСНДС	= 0;
	
	КонецЕсли; 
	
	УправлениеДоступностьюРеквизитов();
	
КонецПроцедуры

Процедура ТипУчетнойЦеныНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда
		
		//Если ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаВАптеки или ТипПланирования = Справочники.ТипПланированияКонтракт.ПродажиИзАптек Тогда
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы Тогда 
			
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипУчетнойЦеныКонтрактов.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000002");//Цена маркетингового контракта
			СписокЗначений.Добавить("000000004");//Цена фактической закупки
			Если ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаДляОпта Тогда
					СписокЗначений.Добавить("000000003");//Закупочные цены опта
			КонецЕсли; 
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Выкладка или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо Тогда  
			//ИначеЕсли ТипПланирования = Справочники.ТипПланированияКонтракт.ЗакупкаДляОпта Тогда
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипУчетнойЦеныКонтрактов.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000002");//Цена маркетингового контракта			
			СписокЗначений.Добавить("000000004");//Цена фактической закупки
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		КонецЕсли; 
		
	Иначе // Логистический
		
		Если НЕ ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки Тогда
		
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипУчетнойЦеныКонтрактов.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000001");//Прайс производителей			
			СписокЗначений.Добавить("000000002");//Цена маркетингового контракта			
			СписокЗначений.Добавить("000000004");//Цена фактической закупки
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();

		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипПланированияПриИзменении(Элемент)
	
	ТипУчетнойЦены = Справочники.ТипУчетнойЦеныКонтрактов.ПустаяСсылка();
	
	УправлениеДоступностьюРеквизитов()
	
КонецПроцедуры

Процедура КритерийВыполненияПланаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТипСтатьи) Тогда
		КритерийВыполненияСтароеЗначение = Элемент.Значение;
	Иначе
	
		Предупреждение("Не выбран тип статьи!",10)
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КритерийВыполненияПланаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
	
		Если Элемент.Значение = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество И
			(ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент ИЛИ
			 ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ
			 ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус)
			Тогда
		
		ИначеЕсли Элемент.Значение = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Рубли И  
			(ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы ИЛИ
			 ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус ИЛИ
			 ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги ИЛИ
			 ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.КомпенсацияПереоценки)
			Тогда	
			
		Иначе
			
			Предупреждение("Выбранный критерий выполнения плана: "+Элемент.Значение+ " не соответствует типу статьи: "+ТипСтатьи, 15);
			КритерийВыполненияПлана = КритерийВыполненияСтароеЗначение;
			
		КонецЕсли;
	
	КонецЕсли;
	
	УправлениеДоступностьюРеквизитов()

КонецПроцедуры

Процедура ТипРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТипСтатьи) Тогда
		ТипРасчетаСтароеЗначение = Элемент.Значение;
	Иначе
		
		Предупреждение("Не выбран тип статьи!",10)
		
	КонецЕсли;
	
	Если МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Маркетинговый Тогда
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент или ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
			
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипРасчетаБонусаКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000001"); // Фиксированный бонус
			СписокЗначений.Добавить("000000003"); //% от учетной цены
			СписокЗначений.Добавить("000000004"); //% от суммы факта
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы Тогда
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипРасчетаБонусаКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000001"); // Фиксированный бонус
			СписокЗначений.Добавить("000000002"); // % от суммы плана
			СписокЗначений.Добавить("000000003"); //% от учетной цены
			СписокЗначений.Добавить("000000004"); //% от суммы факта
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Выкладка Тогда
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипРасчетаБонусаКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000001"); // Фиксированный бонус
			СписокЗначений.Добавить("000000003"); //% от учетной цены
			СписокЗначений.Добавить("000000004"); //% от суммы факта
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		КонецЕсли; 
		
	ИначеЕсли МаркетинговыйКонтракт.ТипКонтракта = Перечисления.ТипКонтракта.Логистический Тогда
		
		Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Ассортимент  Тогда
			
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипРасчетаБонусаКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000002"); // % от суммы плана
			СписокЗначений.Добавить("000000003"); // % от учетной цены
			СписокЗначений.Добавить("000000001"); // Фиксированный бонус
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		ИначеЕсли ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.РетроБонус Тогда
		
			СтандартнаяОбработка = Ложь;
			нФормаВыбора = Справочники.ТипРасчетаБонусаКонтракт.ПолучитьФормуВыбора(, Элемент);
			нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("000000004"); // % от суммы факта
			СписокЗначений.Добавить("000000003"); // % от учетной цены
			СписокЗначений.Добавить("000000001"); // Фиксированный бонус
			нФормаВыбора.Отбор.Код.Значение = СписокЗначений;
			нФормаВыбора.Отбор.Код.Использование = Истина;
			нФормаВыбора.Открыть();
			
		КонецЕсли; 
		
	КонецЕсли;
	
	//Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Услуги Тогда
	//
	//	СтандартнаяОбработка = Ложь;
	//	нФормаВыбора = Справочники.ТипРасчетаБонусаКонтракт.ПолучитьФормуВыбора(, Элемент);
	//	нФормаВыбора.Отбор.ФиксированнаяСумма.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.ФиксированнаяСумма.Значение = Истина;
	//	нФормаВыбора.Отбор.ФиксированнаяСумма.Использование = Истина;
	//	нФормаВыбора.Открыть();
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ТипРасчетаПриИзменении(Элемент)
	
	// Для типа расчетов "% от учетной цены" требуется изменение плана по статье
	Если Элемент.Значение = Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтУчетнойЦены Тогда
	
		ПланПоСтатьеРасчет		= 0;
		ПланПоСтатьеСНДСРасчет	= 0;
		Для каждого СтрокаТЧ Из Товары Цикл
		
			ПланПоСтатьеРасчет		= ПланПоСтатьеРасчет + СтрокаТЧ.УчетнаяЦенаСУчетомФинСкидкиБезНДС * СтрокаТЧ.КоличествоУП;
			ПланПоСтатьеСНДСРасчет	= ПланПоСтатьеСНДСРасчет + СтрокаТЧ.УчетнаяЦенаСУчетомФинСкидкиСНДС * СтрокаТЧ.КоличествоУП;
		
		КонецЦикла; 
		
		ПланПоСтатье		= ПланПоСтатьеРасчет;
		ПланПоСтатьеСНДС	= ПланПоСтатьеСНДСРасчет;
		
	Иначе
		
		ПланПоСтатье		= Товары.Итог("РазбивкаПоПериодам");
		ПланПоСтатьеСНДС	= Товары.Итог("РазбивкаПоПериодамсНДС");
	
	КонецЕсли; 
	
	//==>ЕНТ-1398.Коробка.2019.03.19
	//РасчитатьСуммаБонусаПоСтатье();
	//РасчитатьСуммаБонусаПоСтатьесНДС();
	Если УчитыватьНДС Тогда
	
		РасчитатьСуммаБонусаПоСтатьесНДС();	
	    РасчитатьСуммуБонусаПоСтатье_Вторично();
		
	Иначе
		
		РасчитатьСуммаБонусаПоСтатье();
		РасчитатьСуммаБонусаПоСтатьесНДС_Вторично();
		
	КонецЕсли; 
	//<==ЕНТ-1398.Коробка.2019.03.19
	РаспределитьСуммуПланаПоТоварам();
	РаспределитьСуммуПланаПоПериодам();
	
	Если ВидимостьТЧШкалаВыполнения() Тогда
		ЗаполнитьТЧШкалаВыполнения();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗначениеБонусаПриИзменении(Элемент)
	
	//==>ЕНТ-1398.Коробка.2019.03.19
	//РасчитатьСуммаБонусаПоСтатье();
	//РасчитатьСуммаБонусаПоСтатьесНДС();
	Если УчитыватьНДС Тогда
	
		РасчитатьСуммаБонусаПоСтатьесНДС();	
	    РасчитатьСуммуБонусаПоСтатье_Вторично();
		
	Иначе
		
		РасчитатьСуммаБонусаПоСтатье();
		РасчитатьСуммаБонусаПоСтатьесНДС_Вторично();
		
	КонецЕсли; 
	//<==ЕНТ-1398.Коробка.2019.03.19
	
	РаспределитьСуммуПланаПоПериодам();
	
	Если ВидимостьТЧШкалаВыполнения() Тогда
		ЗаполнитьТЧШкалаВыполнения();
	КонецЕсли; 
	
КонецПроцедуры

Процедура СтавкаНДСБонусаПриИзменении(Элемент)
	
	Если УчитыватьНДС Тогда
		РасчитатьСуммуБонусаПоСтатье_Вторично();		
	Иначе	
	    РасчитатьСуммаБонусаПоСтатьесНДС_Вторично();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТипБонусаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора = СписокТипБонуса;
КонецПроцедуры

Процедура ПланПоСтатьеПриИзменении(Элемент)
	
	РасчитатьСуммаБонусаПоСтатье();
	
	Если НЕ УчитыватьНДС Тогда
		
		Если Товары.Количество()>0 или Периоды.Количество()>0 Тогда
			
			Если Вопрос("Будет выполнено перезаполнение колонки ""Разбивка по периодам"" табличных частей ""Товары"", ""Периоды"". Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
				Возврат	
			КонецЕсли;
			
			РаспределитьСуммуПланаПоТоварам();
			
			ПланПоСтатьеСНДС = Товары.Итог("РазбивкаПоПериодамсНДС");	
			РасчитатьСуммаБонусаПоСтатьесНДС_Вторично();
			
			РаспределитьСуммуПланаПоПериодам();
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВидимостьТЧШкалаВыполнения() Тогда
		ЗаполнитьТЧШкалаВыполнения();
	КонецЕсли; 
	
КонецПроцедуры

Процедура СуммаБонусаПоСтатьеПриИзменении(Элемент)
	
	//==>ЕНТ-1398.Коробка.2019.03.11
	// Расчет НДС не зависимо от типа расчета
	
	//Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
	//	
	//	РасчитатьСуммаБонусаПоСтатьесНДС();
	//	РаспределитьСуммуПланаПоПериодам();
	//	
	//	Если ВидимостьТЧШкалаВыполнения() Тогда
	//		ЗаполнитьТЧШкалаВыполнения();
	//	КонецЕсли; 
	//	
	//КонецЕсли;
	
	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	РасчитатьСуммаБонусаПоСтатьесНДС_Вторично();	
	Если ВидимостьТЧШкалаВыполнения() Тогда
		ЗаполнитьТЧШкалаВыполнения();
	КонецЕсли; 
	//<==ЕНТ-1398.Коробка.2019.03.11 
	
КонецПроцедуры

Процедура СуммаБонусаПоСтатьеСНДСПриИзменении(Элемент)
	
	//==>ЕНТ-1398.Коробка.2019.03.11
	// Расчет НДС не зависимо от типа расчета
	//Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
	//	
	//	РасчитатьСуммаБонусаПоСтатье();
	//	РаспределитьСуммуПланаПоПериодам();
	//	
	//	Если ВидимостьТЧШкалаВыполнения() Тогда
	//		ЗаполнитьТЧШкалаВыполнения();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
	РасчитатьСуммуБонусаПоСтатье_Вторично();
	Если ВидимостьТЧШкалаВыполнения() Тогда
		ЗаполнитьТЧШкалаВыполнения();
	КонецЕсли;
	//<==ЕНТ-1398.Коробка.2019.03.11 
	
КонецПроцедуры

Процедура КнопкаПланПоСтатьеРассчитатьНажатие(Элемент)
	
	Если ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ПроцентОтУчетнойЦены Тогда
		ПланПоСтатье	= Товары.Итог("УчетнаяЦенаСУчетомФинСкидкиБезНДС")*Товары.Итог("КоличествоУП");
	Иначе
		ПланПоСтатье	= Товары.Итог("РазбивкаПоПериодам"); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПланПоСтатьеСНДСПриИзменении(Элемент)
	
	РасчитатьСуммаБонусаПоСтатьесНДС();
	
	Если УчитыватьНДС Тогда
		
		Если Товары.Количество()>0 или Периоды.Количество()>0 Тогда
			
			Если Вопрос("Будет выполнено перезаполнение колонки ""Разбивка по периодам"" табличных частей ""Товары"", ""Периоды"". Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
				Возврат	
			КонецЕсли;
			
			РаспределитьСуммуПланаПоТоварам();
			
			ПланПоСтатье = Товары.Итог("РазбивкаПоПериодам");	
			РасчитатьСуммуБонусаПоСтатье_Вторично();
			
			РаспределитьСуммуПланаПоПериодам();
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВидимостьТЧШкалаВыполнения() Тогда
		ЗаполнитьТЧШкалаВыполнения();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПланПоСтатьеКоличествоПриИзменении(Элемент)
//==>ЕНТ-1398.Коробка.2019.03.11
// Расчет от количества товара

	Если КритерийВыполненияПлана = Перечисления.КритерийВыполненияПланаСтатьиКонтракта.Количество Тогда
	
		ЗаполнитьКоличествоУП_ТЧ_Товары();
		ТЗ_Врем_БезНДС	= Товары.Выгрузить(,"УчетнаяЦенаСУчетомФинСкидкиБезНДС");
		ТЗ_Врем_сНДС	= Товары.Выгрузить(,"УчетнаяЦенаСУчетомФинСкидкиСНДС");
		ТЗ_Врем_БезНДС.Сортировать("УчетнаяЦенаСУчетомФинСкидкиБезНДС Возр");
		ТЗ_Врем_сНДС.Сортировать("УчетнаяЦенаСУчетомФинСкидкиСНДС Возр");
		Если ТЗ_Врем_БезНДС.Количество()>0 Тогда
			МинУЦбезНДС = ТЗ_Врем_БезНДС[0].УчетнаяЦенаСУчетомФинСкидкиБезНДС	
		Иначе
			МинУЦбезНДС = 0	
		КонецЕсли;
		Если ТЗ_Врем_сНДС.Количество()>0 Тогда
			МинУЦсНДС = ТЗ_Врем_сНДС[0].УчетнаяЦенаСУчетомФинСкидкиСНДС	
		Иначе
			МинУЦсНДС = 0	
		КонецЕсли;
		ПланПоСтатье		= Элемент.Значение * МинУЦбезНДС;
		ПланПоСтатьеСНДС	= Элемент.Значение * МинУЦсНДС;
		
		Если УчитыватьНДС Тогда
		
			РасчитатьСуммаБонусаПоСтатьесНДС();	
		    РасчитатьСуммуБонусаПоСтатье_Вторично();
			
		Иначе
			
			РасчитатьСуммаБонусаПоСтатье();
			РасчитатьСуммаБонусаПоСтатьесНДС_Вторично();
			
		КонецЕсли;
		
		Если Товары.Количество()>0 или Периоды.Количество()>0 Тогда
			
			Если Вопрос("Будет выполнено перезаполнение колонки ""Разбивка по периодам"" табличных частей ""Товары"", ""Периоды"". Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
				Возврат	
			КонецЕсли;
			
			РаспределитьСуммуПланаПоТоварам();
			РаспределитьСуммуПланаПоПериодам();
			
		КонецЕсли; 
	
	КонецЕсли; 
//<==ЕНТ-1398.Коробка.2019.03.11
КонецПроцедуры

Процедура МаркетинговыйКонтрактПриИзменении(Элемент)
	
	МЛК = Элемент.Значение;
	Если МЛК.Утвержден или МЛК.Согласован Тогда
	
		Сообщить("Выбранная ссылка на контракт "+?(МЛК.Утвержден, "утвержден","согласован")+". Запись текущего документа возможна ТОЛЬКО для типа статьи ""Суперпромо"" и установленном признаке ""В рамках бюджета""!"); 
	    //МаркетинговыйКонтракт = Документы.МаркетинговыйИЛогистическийКонтракт.ПустаяСсылка();
		
	//Иначе
		//УправлениеДоступностьюТЧАптека();
		
	КонецЕсли;
	
	ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.ПустаяСсылка();
	УправлениеДоступностьюРеквизитов();

КонецПроцедуры

Процедура УчитыватьНДСПриИзменении(Элемент)
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры

Процедура ОсновныеДействияФормыкнСогласование(Кнопка)
	
	Если Согласован Тогда
		// Отмена согласования
	
		Если Утвержден Тогда
			
			Предупреждение("Необходимо отменть утверждение документа!");
			Возврат;
			
		Иначе
			
			Если РольДоступна("МаркетинговыеКонтрактыПолныйДоступ")
				ИЛИ РольДоступна("МаркетинговыеКонтрактыСогласование")
				ИЛИ РольДоступна("супер_АДМИНИСТРАТОР")
				ИЛИ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо И ВРамкахБюджета) Тогда
				
				Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован Тогда
					
					Если Вопрос("Вы отменяете согласование у документа, МЛК которого "+?(МаркетинговыйКонтракт.Утвержден, "утвержден","согласован")+", Продолжть?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
						Возврат	
					КонецЕсли; 
					
				КонецЕсли;
				
				Согласован = Ложь;
				
				Изменение = Изменения.Добавить();
				Изменение.Дата = ТекущаяДата();
				Изменение.КомментарийИзменения = "Согласован = " + Согласован;
				Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
				Изменение.ТипИзм = Перечисления.ДействияНадДокументами.Изменение;
				
				Записать(РежимЗаписиДокумента.ОтменаПроведения);

			Иначе
				
				Предупреждение("Недостаточно прав на выполнение данной операции!");
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
	
	Иначе
		// Согласование
		Если РольДоступна("МаркетинговыеКонтрактыПолныйДоступ")
			ИЛИ РольДоступна("МаркетинговыеКонтрактыСогласование")
			ИЛИ РольДоступна("супер_АДМИНИСТРАТОР")
			ИЛИ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо И ВРамкахБюджета) Тогда
		
			Если Вопрос("Будет проведено согласование документа. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
				Возврат
			КонецЕсли; 
			
		Иначе
			
			Предупреждение("Недостаточно прав на выполнение данной операции!");
			Возврат;

		КонецЕсли;
		
		Отказ = ПроверкаСовместимостиРеквизитов();
		Если Отказ  Тогда
			Предупреждение("При сохранении документа обнаружены ошибки!",15);
			Возврат
		КонецЕсли;
		
		Согласован = Истина;

		Изменение = Изменения.Добавить();
		Изменение.Дата = ТекущаяДата();
		Изменение.КомментарийИзменения = "Согласован = " + Согласован;
		Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
		Изменение.ТипИзм = Перечисления.ДействияНадДокументами.Изменение;
		
		Записать(РежимЗаписиДокумента.Проведение);
	    		
	КонецЕсли;
	
	УправлениеДоступностьюРеквизитов();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыкнУтверждение(Кнопка)
	
	Если Утвержден Тогда
		// Отмена утверждения
	
		Если РольДоступна("МаркетинговыеКонтрактыПолныйДоступ")
			ИЛИ РольДоступна("супер_АДМИНИСТРАТОР")
			ИЛИ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо И ВРамкахБюджета)
			Тогда

			Если МаркетинговыйКонтракт.Утвержден или МаркетинговыйКонтракт.Согласован Тогда
			
				Если Вопрос("Вы отменяете утверждение у документа, МЛК которого "+?(МаркетинговыйКонтракт.Утвержден, "утвержден","согласован")+", Продолжть?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
				
					Возврат	
				
				КонецЕсли; 
			
			КонецЕсли;
			
			Утвержден = Ложь;
			Изменение = Изменения.Добавить();
			Изменение.Дата = ТекущаяДата();
			Изменение.КомментарийИзменения = "Утвержден = " + Утвержден;
			Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
			Изменение.ТипИзм = Перечисления.ДействияНадДокументами.Изменение;
			
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Иначе
			
			Предупреждение("Недостаточно прав на выполнение данной операции!");
			Возврат;
			
		КонецЕсли;
	
	Иначе
	   // Утверждение
	   Если РольДоступна("МаркетинговыеКонтрактыПолныйДоступ")
		   ИЛИ РольДоступна("супер_АДМИНИСТРАТОР") 
		   ИЛИ (ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Суперпромо И ВРамкахБюджета)
		   Тогда
		   
		   Если НЕ Согласован Тогда
			   
			   Предупреждение("Документ не согласован!");
			   Возврат;
			   
		   КонецЕсли;
		   
		   Утвержден = Истина;
		   
		   Изменение = Изменения.Добавить();
		   Изменение.Дата = ТекущаяДата();
		   Изменение.КомментарийИзменения = "Утвержден = " + Утвержден;
		   Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
		   Изменение.ТипИзм = Перечисления.ДействияНадДокументами.Изменение;
		   
		   Записать(РежимЗаписиДокумента.Проведение);
		   
	   Иначе
		   
		   Предупреждение("Недостаточно прав на выполнение данной операции!");
		   Возврат;
		   
	   КонецЕсли; 
	
	КонецЕсли; 

	УправлениеДоступностьюРеквизитов();

КонецПроцедуры

Процедура ИсполненПриИзменении(Элемент)
	
	Если РольДоступна("МаркетинговыеКонтрактыПолныйДоступ")
		ИЛИ РольДоступна("МаркетинговыеКонтрактыСогласование")
		ИЛИ РольДоступна("супер_АДМИНИСТРАТОР") Тогда
		УправлениеДоступностьюРеквизитов();
	Иначе
		Элемент.Значение = НЕ Исполнен;
		Предупреждение("Недостаточно прав на выполнение данной операции!");
	КонецЕсли

	
КонецПроцедуры

Процедура РасчетБонусВРамкахПриИзменении(Элемент)
	ЭлементыФормы.РасчетБонусПоСтатье.Доступность = РасчетБонусВРамках;
КонецПроцедуры

Процедура РасчетБонусПоСтатьеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.ПометкаУдаления Тогда
	
		Предупреждение("Нельзя выбрать документ помеченный на удаление!",10);
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли; 
	
	Если ВыбранноеЗначение = Ссылка Тогда
	
		Предупреждение("Нельзя выбрать исходный документ!",10);
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ ТЧ ТОВАРЫ
Процедура КоманднаяПанель1ЗаполнитьТоварыПоПроизводителю(Кнопка)
	
	Если Товары.Количество()>0 Тогда
	
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
	
	КонецЕсли;
	
	Товары.Загрузить(ПостроительТовары.Результат.Выгрузить());
	
	Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы Тогда
		
		Если ПланПоСтатье > 0 Тогда
			
			РаспределитьСуммуПланаПоТоварам();
			
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗаполнитьИзФайла(Кнопка)

	Если Товары.Количество()>0 Тогда
		
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
		
	КонецЕсли;
	
	Товары.Очистить();
	
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаЗагрузкиИзФайла");
	ФайлИмпорта = Форма.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ФайлИмпорта) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ФайлИмпорта); 	
	Если Не ВыбФайл.Существует() Тогда
		Сообщить("Не найден файл " + ФайлИмпорта);
		Возврат;
	КонецЕсли; 
	
	Попытка
		
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлИмпорта);
		Состояние("Обработка файла Microsoft Excel...");
		
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		//Открываем необходимый лист
		Excel.Sheets(1).Select(); // лист 1, по умолчанию
	Исключение
		//Закрываем Excel
		Excel.ActiveWorkbook.Close();
		Excel = 0;
		Сообщить("Файл "+Строка(ФайлИмпорта)+" не соответствует необходимому формату! Первый лист не найден!");
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	//Получим количество строк и колонок.
	//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
    Конецесли;
	
	СпрАП	= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
	
	Для Сч = 2 По ФайлСтрок Цикл
    
		Состояние("Обработка: "+ Сч + " строк из " + ФайлСтрок);
		ОбработкаПрерыванияПользователя(); 
		
		КодФайла							= Число(СтрЗаменить(Excel.Cells(Сч, 1).Text," ",""));
		КоличествоУП						= ?(ПустаяСтрока(Excel.Cells(Сч, 2).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 2).Text," ","")));
		УчетнаяЦенаБезНДС					= ?(ПустаяСтрока(Excel.Cells(Сч, 3).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 3).Text," ","")));
		НЗ									= ?(ПустаяСтрока(Excel.Cells(Сч, 4).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 4).Text," ","")));
		План								= ?(ПустаяСтрока(Excel.Cells(Сч, 5).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 5).Text," ","")));
		УчетнаяЦенаСНДС						= ?(ПустаяСтрока(Excel.Cells(Сч, 6).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 6).Text," ","")));
		ФинСкидка							= ?(ПустаяСтрока(Excel.Cells(Сч, 7).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 7).Text," ","")));
		УчетнаяЦенаСУчетомФинСкидкиБезНДС	= ?(ПустаяСтрока(Excel.Cells(Сч, 8).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 8).Text," ","")));
		УчетнаяЦенаСУчетомФинСкидкиСНДС	 	= ?(ПустаяСтрока(Excel.Cells(Сч, 9).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 9).Text," ","")));

		
		СтрокаДляЗаписи = СпрАП.НайтиПоКоду(КодФайла);
		Если СтрокаДляЗаписи = Неопределено Тогда
			
			Сообщить("Не обнаружен товар с кодом: " + КодФайла + ", строка № "+Сч+". Строка не загружена.",СтатусСообщения.Важное); 
			Продолжить;
			
		Иначе
			
			НовСтрока = Товары.Добавить();
			НовСтрока.КодТовара							= СтрокаДляЗаписи.Код;
			НовСтрока.Концерн							= СтрокаДляЗаписи.Концерн;
			НовСтрока.Производитель						= СтрокаДляЗаписи.Производитель;
			НовСтрока.КоличествоУП						= КоличествоУП;
			НовСтрока.УчетнаяЦенаБезНДС					= УчетнаяЦенаБезНДС;
			НовСтрока.НЗ								= НЗ;
			НовСтрока.УчаствуетВАП						= СтрокаДляЗаписи.УчаствуетВАП;
			НовСтрока.Товар								= СтрокаДляЗаписи;
			НовСтрока.РазбивкаПоПериодам				= План;
			НовСтрока.СтавкаНДС							= СтрокаДляЗаписи.СтавкаНДС;
			НовСтрока.УчетнаяЦенаСНДС					= УчетнаяЦенаСНДС;
			НовСтрока.ФинСкидка							= ФинСкидка;
			НовСтрока.УчетнаяЦенаСУчетомФинСкидкиБезНДС	= УчетнаяЦенаСУчетомФинСкидкиБезНДС;
			НовСтрока.УчетнаяЦенаСУчетомФинСкидкиСНДС	= УчетнаяЦенаСУчетомФинСкидкиСНДС;
			
		КонецЕсли; 
   
    КонецЦикла; 
    
	Excel.DisplayAlerts = 0; 
	Excel.Quit();
	Excel.DisplayAlerts = 1;
	
	Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы Тогда
		
		Если ПланПоСтатье > 0 Тогда
			
			РаспределитьСуммуПланаПоТоварам();
			
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗаполнитьИзФайлаТоварАптека(Кнопка)

	Если Товары.Количество() > 0 или Аптеки.Количество() > 0 Тогда
		
		Если Вопрос("Перед заполнением табличные части будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
		
	КонецЕсли;
	
	Товары.Очистить();
	Аптеки.Очистить();
	
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаЗагрузкиИзФайлаТоварАптека");
	ФайлИмпорта = Форма.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ФайлИмпорта) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ФайлИмпорта); 	
	Если Не ВыбФайл.Существует() Тогда
		Сообщить("Не найден файл " + ФайлИмпорта);
		Возврат;
	КонецЕсли; 
	
	Попытка
		
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлИмпорта);
		Состояние("Обработка файла Microsoft Excel...");
		
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		//Открываем необходимый лист
		Excel.Sheets(1).Select(); // лист 1, по умолчанию
	Исключение
		//Закрываем Excel
		Excel.ActiveWorkbook.Close();
		Excel = 0;
		Сообщить("Файл "+Строка(ФайлИмпорта)+" не соответствует необходимому формату! Первый лист не найден!");
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	//Получим количество строк и колонок.
	//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
    Конецесли;
	
	СпрАП	= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
	СпрМХ	= Справочники.МестаХранения;
	
	Для Сч = 2 По ФайлСтрок Цикл
    
		Состояние("Обработка: "+ Сч + " строк из " + ФайлСтрок);
		ОбработкаПрерыванияПользователя(); 
		
		КодФайла							= Число(СтрЗаменить(Excel.Cells(Сч, 1).Text," ",""));
		КоличествоУП						= ?(ПустаяСтрока(Excel.Cells(Сч, 2).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 2).Text," ","")));
		УчетнаяЦенаБезНДС					= ?(ПустаяСтрока(Excel.Cells(Сч, 3).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 3).Text," ","")));
		НЗ									= ?(ПустаяСтрока(Excel.Cells(Сч, 4).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 4).Text," ","")));
		План								= ?(ПустаяСтрока(Excel.Cells(Сч, 5).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 5).Text," ","")));
		УчетнаяЦенаСНДС						= ?(ПустаяСтрока(Excel.Cells(Сч, 6).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 6).Text," ","")));
		ФинСкидка							= ?(ПустаяСтрока(Excel.Cells(Сч, 7).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 7).Text," ","")));
		УчетнаяЦенаСУчетомФинСкидкиБезНДС	= ?(ПустаяСтрока(Excel.Cells(Сч, 8).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 8).Text," ","")));
		УчетнаяЦенаСУчетомФинСкидкиСНДС	 	= ?(ПустаяСтрока(Excel.Cells(Сч, 9).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 9).Text," ","")));
		КодАптеки						 	= ?(ПустаяСтрока(Excel.Cells(Сч, 10).Text),0,Число(СтрЗаменить(Excel.Cells(Сч, 10).Text," ","")));

		
		СтрокаДляЗаписи = СпрАП.НайтиПоКоду(КодФайла);
		Если СтрокаДляЗаписи = Неопределено Тогда
			
			Сообщить("Не обнаружен товар с кодом: " + КодФайла + ", строка № "+Сч+". Строка не загружена.",СтатусСообщения.Важное); 
			
		Иначе
			
			НовСтрока = Товары.Добавить();
			НовСтрока.КодТовара							= СтрокаДляЗаписи.Код;
			НовСтрока.Концерн							= СтрокаДляЗаписи.Концерн;
			НовСтрока.Производитель						= СтрокаДляЗаписи.Производитель;
			НовСтрока.КоличествоУП						= КоличествоУП;
			НовСтрока.УчетнаяЦенаБезНДС					= УчетнаяЦенаБезНДС;
			НовСтрока.НЗ								= НЗ;
			НовСтрока.УчаствуетВАП						= СтрокаДляЗаписи.УчаствуетВАП;
			НовСтрока.Товар								= СтрокаДляЗаписи;
			НовСтрока.РазбивкаПоПериодам				= План;
			НовСтрока.СтавкаНДС							= СтрокаДляЗаписи.СтавкаНДС;
			НовСтрока.УчетнаяЦенаСНДС					= УчетнаяЦенаСНДС;
			НовСтрока.ФинСкидка							= ФинСкидка;
			НовСтрока.УчетнаяЦенаСУчетомФинСкидкиБезНДС	= УчетнаяЦенаСУчетомФинСкидкиБезНДС;
			НовСтрока.УчетнаяЦенаСУчетомФинСкидкиСНДС	= УчетнаяЦенаСУчетомФинСкидкиСНДС;
			
		КонецЕсли; 
		
		СтрокаДляЗаписи = СпрМХ.НайтиПоКоду(КодАптеки);
		Если СтрокаДляЗаписи = Неопределено Тогда
		
			Сообщить("Не обнаружена аптека с кодом: " + КодАптеки + ", строка № "+Сч+". Строка не загружена.",СтатусСообщения.Важное); 
		
		Иначе
		
			НоваяСтрока = Аптеки.Добавить();
			НоваяСтрока.КодАптеки	= СтрокаДляЗаписи.Код;
			НоваяСтрока.Аптека		= СтрокаДляЗаписи;
		
		КонецЕсли;
		
    КонецЦикла; 
    
	Excel.DisplayAlerts = 0; 
	Excel.Quit();
	Excel.DisplayAlerts = 1;
	
	Если ТипСтатьи = Перечисления.ТипСтатьиКонтрактов.Планы Тогда
		
		Если ПланПоСтатье > 0 Тогда
			
			РаспределитьСуммуПланаПоТоварам();
			
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1ТЧТоварыОчистить(Кнопка)
	
	Если Вопрос("Табличная часть ""Товары"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
		Возврат 	
	КонецЕсли;
	Товары.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанель1ЗаполнитьКоличествоУп(Кнопка)
	
	ЗаполнитьКоличествоУП_ТЧ_Товары()
	
КонецПроцедуры

Процедура ТоварыРазбивкаПоПериодамПриИзменении(Элемент)
	                                              
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	ВведенноеЗначение = Элемент.Значение;
	ВведеннаяДельтаПоСтроке = 0;	
	Если ВведенноеЗначение = ТоварыРазбивкаПоПеридамТекущаяСтрока Тогда
		Возврат
	Иначе 
		ВведеннаяДельтаПоСтроке = ТоварыРазбивкаПоПеридамТекущаяСтрока - ВведенноеЗначение;  
	КонецЕсли; 
	ТекущаяСтрока.РучноеРедактирование = Истина;
	
	// Количество строк за исключением текущей строки и строк с ручным редактированием
	КоличествоСтрокТЧТовары = Товары.Количество();	
	КоличествоСтрокТЧТоварыБезРучнойОтметки = 0;
	ЗаполненноСуммаРучнойОтметки = 0;
	КоличествоСтрокСРучнойОтметкой = 0;	
	НомерСтрокиДляЗаписиПогрешностиОкругления = 0;	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.РучноеРедактирование Тогда
			
			ЗаполненноСуммаРучнойОтметки = ЗаполненноСуммаРучнойОтметки + СтрокаТЧ.РазбивкаПоПериодам;
			КоличествоСтрокСРучнойОтметкой = КоличествоСтрокСРучнойОтметкой+1;
			
		Иначе
			НомерСтрокиДляЗаписиПогрешностиОкругления = СтрокаТЧ.НомерСтроки;
		КонецЕсли; 
	
	КонецЦикла;
	КоличествоСтрокТЧТоварыБезРучнойОтметки = КоличествоСтрокТЧТовары-КоличествоСтрокСРучнойОтметкой; 
	
	Если КоличествоСтрокСРучнойОтметкой <> КоличествоСтрокТЧТовары Тогда
	
		Если ЗаполненноСуммаРучнойОтметки > ПланПоСтатье Тогда
		
			Сообщить("Сумма ручных распределений по всем строкам: "+ ЗаполненноСуммаРучнойОтметки + " превышает сумму плана по статье!");
			Элемент.Значение = ТоварыРазбивкаПоПеридамТекущаяСтрока;
			Возврат
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КоличествоСтрокТЧТоварыБезРучнойОтметки = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения = Окр(ВведеннаяДельтаПоСтроке/КоличествоСтрокТЧТоварыБезРучнойОтметки,2);
	
	ЗаполненноСуммаПлана = 0;
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Если НЕ СтрокаТЧ.РучноеРедактирование Тогда
			
			Если СтрокаТЧ.НомерСтроки = НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
				
				СтрокаТЧ.РазбивкаПоПериодам = ПланПоСтатье - ЗаполненноСуммаРучнойОтметки - ЗаполненноСуммаПлана;
				
			Иначе	
				СтрокаТЧ.РазбивкаПоПериодам = СтрокаТЧ.РазбивкаПоПериодам + ЗначениеРаспределения;
				ЗаполненноСуммаПлана = ЗаполненноСуммаПлана + СтрокаТЧ.РазбивкаПоПериодам;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Пересчет колонки "Период с НДС"
	Если НЕ УчитыватьНДС Тогда
		ПересчитатьЗначениеКолонкиПериодТЧТовары(0,НомерСтрокиДляЗаписиПогрешностиОкругления);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	ТоварыРазбивкаПоПеридамТекущаяСтрока		= ТекущаяСтрока.РазбивкаПоПериодам;
	ТоварыРазбивкаПоПеридамсНДСТекущаяСтрока	= ТекущаяСтрока.РазбивкаПоПериодамсНДС;
	
КонецПроцедуры

Процедура ТоварыРазбивкаПоПериодамсНДСПриИзменении(Элемент)
	                                              
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	ВведенноеЗначение = Элемент.Значение;
	ВведеннаяДельтаПоСтроке = 0;	
	Если ВведенноеЗначение = ТоварыРазбивкаПоПеридамсНДСТекущаяСтрока Тогда
		Возврат
	Иначе 
		ВведеннаяДельтаПоСтроке = ТоварыРазбивкаПоПеридамсНДСТекущаяСтрока - ВведенноеЗначение;  
	КонецЕсли; 
	ТекущаяСтрока.РучноеРедактирование = Истина;
	
	// Количество строк за исключением текущей строки и строк с ручным редактированием
	КоличествоСтрокТЧТовары = Товары.Количество();	
	КоличествоСтрокТЧТоварыБезРучнойОтметки = 0;
	ЗаполненноСуммаРучнойОтметки = 0;
	КоличествоСтрокСРучнойОтметкой = 0;	
	НомерСтрокиДляЗаписиПогрешностиОкругления = 0;	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.РучноеРедактирование Тогда
			
			ЗаполненноСуммаРучнойОтметки = ЗаполненноСуммаРучнойОтметки + СтрокаТЧ.РазбивкаПоПериодамсНДС;
			КоличествоСтрокСРучнойОтметкой = КоличествоСтрокСРучнойОтметкой+1;
			
		Иначе
			НомерСтрокиДляЗаписиПогрешностиОкругления = СтрокаТЧ.НомерСтроки;
		КонецЕсли; 
	
	КонецЦикла;
	КоличествоСтрокТЧТоварыБезРучнойОтметки = КоличествоСтрокТЧТовары-КоличествоСтрокСРучнойОтметкой; 
	
	Если КоличествоСтрокСРучнойОтметкой <> КоличествоСтрокТЧТовары Тогда
	
		Если ЗаполненноСуммаРучнойОтметки > ПланПоСтатьеСНДС Тогда
		
			Сообщить("Сумма ручных распределений по всем строкам: "+ ЗаполненноСуммаРучнойОтметки + " превышает сумму плана по статье (с НДС)!");
			Элемент.Значение = ТоварыРазбивкаПоПеридамсНДСТекущаяСтрока;
			Возврат
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КоличествоСтрокТЧТоварыБезРучнойОтметки = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения = Окр(ВведеннаяДельтаПоСтроке/КоличествоСтрокТЧТоварыБезРучнойОтметки,2);
	
	ЗаполненноСуммаПлана = 0;
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Если НЕ СтрокаТЧ.РучноеРедактирование Тогда
			
			Если СтрокаТЧ.НомерСтроки = НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
				
				СтрокаТЧ.РазбивкаПоПериодамсНДС = ПланПоСтатьеСНДС - ЗаполненноСуммаРучнойОтметки - ЗаполненноСуммаПлана;
				
			Иначе	
				СтрокаТЧ.РазбивкаПоПериодамсНДС = СтрокаТЧ.РазбивкаПоПериодамсНДС + ЗначениеРаспределения;
				ЗаполненноСуммаПлана = ЗаполненноСуммаПлана + СтрокаТЧ.РазбивкаПоПериодамсНДС;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Пересчет колонки "Период без НДС"
	Если УчитыватьНДС Тогда
		ПересчитатьЗначениеКолонкиПериодТЧТовары(1,НомерСтрокиДляЗаписиПогрешностиОкругления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыТоварПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	ТекущаяСтрока.КодТовара		= Элемент.Значение.Код;
	ТекущаяСтрока.Концерн		= Элемент.Значение.Концерн;
	ТекущаяСтрока.Производитель	= Элемент.Значение.Производитель;
	ТекущаяСтрока.УчаствуетВАП	= Элемент.Значение.УчаствуетВАП;
	ТекущаяСтрока.СтавкаНДС		= Элемент.Значение.СтавкаНДС;
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.РучноеРедактирование Тогда
		ОформлениеСтроки.ЦветФона=Новый Цвет(204,255,204);
	КонецЕсли;
	 
КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если НЕ ПоВсемТоварам Тогда
		Если ТекущаяСтрока <> Неопределено Тогда
			ВывестиСписоАптекПоСтрокеТовара(ТекущаяСтрока.Товар)	
		КонецЕсли; 
	КонецЕсли;	
		
КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если НЕ ПоВсемТоварам Тогда
		ЗаписатьСписоАптекПоСтрокеТовара(ТекущаяСтрока.Товар)	
	КонецЕсли;	
		
КонецПроцедуры

Процедура ТоварыУчетнаяЦенаПриИзменении(Элемент)
	
	ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;

	СтавкаНДС	= ТекущаяСтрокаТовары.СтавкаНДС;
	ФинСкидка	= ТекущаяСтрокаТовары.ФинСкидка;
	УчетнаяЦенаСУчетомФинСкидкиБезНДС = Элемент.Значение - Элемент.Значение/100 * ФинСкидка;
	
	ТекущаяСтрокаТовары.УчетнаяЦенаСНДС = Элемент.Значение * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100); 
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиБезНДС = УчетнаяЦенаСУчетомФинСкидкиБезНДС;
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиСНДС = УчетнаяЦенаСУчетомФинСкидкиБезНДС * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	
КонецПроцедуры

Процедура ТоварыУчетнаяЦенаСНДСПриИзменении(Элемент)
	
	ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;

	СтавкаНДС	= ТекущаяСтрокаТовары.СтавкаНДС;
	ФинСкидка	= ТекущаяСтрокаТовары.ФинСкидка;
	
	ТекущаяСтрокаТовары.УчетнаяЦенаБезНДС = Элемент.Значение / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиСНДС = Элемент.Значение - (Элемент.Значение/100*ФинСкидка);
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиБезНДС = ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиСНДС / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	
КонецПроцедуры

Процедура ТоварыФинСкидкаПриИзменении(Элемент)
	
	ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	СтавкаНДС	= ТекущаяСтрокаТовары.СтавкаНДС;
	ФинСкидка = Элемент.Значение;
	
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиБезНДС = ТекущаяСтрокаТовары.УчетнаяЦенаБезНДС - ТекущаяСтрокаТовары.УчетнаяЦенаБезНДС/100 * ФинСкидка;
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиСНДС = ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиБезНДС * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);

КонецПроцедуры

Процедура ТоварыУчетнаяЦенаСУчетомФинСкидкиБезНДСПриИзменении(Элемент)
	
	ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;

	СтавкаНДС	= ТекущаяСтрокаТовары.СтавкаНДС;
	ФинСкидка	= ТекущаяСтрокаТовары.ФинСкидка;
	
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиСНДС = Элемент.Значение * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	ТекущаяСтрокаТовары.УчетнаяЦенаБезНДС = (Элемент.Значение * 100)/(100 - ФинСкидка); 
	ТекущаяСтрокаТовары.УчетнаяЦенаСНДС	= ТекущаяСтрокаТовары.УчетнаяЦенаБезНДС * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	
КонецПроцедуры

Процедура ТоварыУчетнаяЦенаСУчетомФинСкидкиСНДСПриИзменении(Элемент)
	
	ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;

	СтавкаНДС	= ТекущаяСтрокаТовары.СтавкаНДС;
	ФинСкидка	= ТекущаяСтрокаТовары.ФинСкидка;
	
	ТекущаяСтрокаТовары.УчетнаяЦенаСУчетомФинСкидкиБезНДС	= Элемент.Значение / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	ТекущаяСтрокаТовары.УчетнаяЦенаСНДС	= (Элемент.Значение * 100)/(100 - ФинСкидка);
	ТекущаяСтрокаТовары.УчетнаяЦенаБезНДС = ТекущаяСтрокаТовары.УчетнаяЦенаСНДС / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
	
КонецПроцедуры


// ОБРАБОТЧИКИ ТЧ Аптеки
Процедура КоманднаяПанель2ЗаполнитьАптекиВсе(Кнопка)
	
	Если Аптеки.Количество()>0 Тогда
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.Ссылка КАК Аптека,
	|	МестаХранения.Код КАК КодАптеки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)";
	
	Аптеки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПослеЗагрузкиСпискаАптек();
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗаполнитьАптекиОтбор(Кнопка)
	
	Если Аптеки.Количество()>0 Тогда
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
	КонецЕсли; 
	
	Аптеки.Загрузить(ПостроительАптека.Результат.Выгрузить());
	
	ПослеЗагрузкиСпискаАптек();
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗагрузитьИзМатрицы(Кнопка)
	
	Если Аптеки.Количество()>0 Тогда
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Матрица.Аптека КАК Аптека,
	|	Матрица.Аптека.Код КАК КодАптеки
	|ИЗ
	|	РегистрСведений.Матрица КАК Матрица";
	
	Аптеки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПослеЗагрузкиСпискаАптек();
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗагрузитьИзМатрицыПоТоварно(Кнопка)
	
	Если ПоВсемТоварам Тогда
	
		Сообщить("Заполнеие в связке ""Товар-аптека"" возможно только при снятом флаге ""По всем аптекам"".
		|Если флаг ""По всем аптекам"" должен быть установлен, воспользуйтесь кнопкой загрузки ""По матрице (все аптеки)"".");
		Возврат;
	
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		
		Сообщить("В ТЧ ""Товары"" не указана строка для которой будут загружены аптеки.
		|Активизируйте строку ТЧ ""Товары"" и повторите загрузку.");
		Возврат;
		
	КонецЕсли; 	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Матрица.Аптека КАК Аптека,
	|	Матрица.Аптека.Код КАК КодАптеки
	|ИЗ
	|	РегистрСведений.Матрица КАК Матрица
	|ГДЕ
	|	Матрица.Товар = &Товар
	|	И Матрица.Аптека.Код <> 0";
	Запрос.УстановитьПараметр("Товар", ТекущаяСтрока.Товар);
	ТЗ_Аптек = Запрос.Выполнить().Выгрузить();
	
	ЗаписатьСписоАптекПоСтрокеТовараИзТаблицыЗначений(ТекущаяСтрока.Товар, ТЗ_Аптек);
	
	ВывестиСписоАптекПоСтрокеТовара(ТекущаяСтрока.Товар);
	
КонецПроцедуры

Процедура КоманднаяПанель2ЗаполнитьИзФайла(Кнопка)
	
	Если Аптеки.Количество()>0 Тогда
		Если Вопрос("Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
			Возврат	
		КонецЕсли; 
	КонецЕсли;
	
	Аптеки.Очистить();
	
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаЗагрузкиИзФайлаАптеки");
	ФайлИмпорта = Форма.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ФайлИмпорта) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ФайлИмпорта); 	
	Если Не ВыбФайл.Существует() Тогда
		Сообщить("Не найден файл " + ФайлИмпорта);
		Возврат;
	КонецЕсли; 
	
	Попытка
		
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ФайлИмпорта);
		Состояние("Обработка файла Microsoft Excel...");
		
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		//Открываем необходимый лист
		Excel.Sheets(1).Select(); // лист 1, по умолчанию
	Исключение
		//Закрываем Excel
		Excel.ActiveWorkbook.Close();
		Excel = 0;
		Сообщить("Файл "+Строка(ФайлИмпорта)+" не соответствует необходимому формату! Первый лист не найден!");
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	//Получим количество строк и колонок.
	//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
    Конецесли;
	
	СпрАП	= Справочники.МестаХранения;
	
	Для Сч = 2 По ФайлСтрок Цикл
    
		Состояние("Обработка: "+ Сч + " строк из " + ФайлСтрок);
		ОбработкаПрерыванияПользователя(); 
		
		КодФайла			= Число(СтрЗаменить(Excel.Cells(Сч, 1).Text," ",""));

		
		СтрокаДляЗаписи = СпрАП.НайтиПоКоду(КодФайла);
		Если СтрокаДляЗаписи = Неопределено Тогда
			
			Сообщить("Не обнаружена аптека с кодом: " + КодФайла + ", строка № "+Сч+". Строка не загружена.",СтатусСообщения.Важное); 
			Продолжить;
			
		Иначе
			
			НовСтрока = Аптеки.Добавить();
			НовСтрока.КодАптеки		= СтрокаДляЗаписи.Код;
			НовСтрока.Аптека		= СтрокаДляЗаписи;
			//НовСтрока.Категория	= СтрокаДляЗаписи;
			
		КонецЕсли; 
   
    КонецЦикла; 
    
	Excel.DisplayAlerts = 0; 
	Excel.Quit();
	Excel.DisplayAlerts = 1;
	
	ПослеЗагрузкиСпискаАптек();
	
КонецПроцедуры

Процедура КоманднаяПанель2ТЧАптекиОчистить(Кнопка)
	
	Если Вопрос("Табличная часть ""Аптеки"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) <> КодВозвратаДиалога.Да Тогда
		Возврат 	
	КонецЕсли;
	Аптеки.Очистить();
	
КонецПроцедуры

Процедура АптекиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЮЛ.УстановитьТекст(ДанныеСтроки.Аптека.Фирма);
	ОформлениеСтроки.Ячейки.КодАптеки.УстановитьТекст(ДанныеСтроки.Аптека.Код);
	
КонецПроцедуры

Процедура АптекиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ПоВсемТоварам Тогда
		
		ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;
		//ТекущаяСтрокаАптеки = ЭлементыФормы.Аптеки.ТекущаяСтрока;
		//Если ТекущаяСтрокаАптеки <> Неопределено и ТекущаяСтрокаТовары <> Неопределено Тогда
		//	ЗаписатьАптекуПоСтрокеТовара(ТекущаяСтрокаТовары.Товар,ТекущаяСтрокаАптеки.Аптека)
		//КонецЕсли;
		Если ТекущаяСтрокаТовары <> Неопределено Тогда
			ЗаписатьСписоАптекПоСтрокеТовара(ТекущаяСтрокаТовары.Товар)
		КонецЕсли;
		
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура АптекиПередУдалением(Элемент, Отказ)
	
	Если НЕ ПоВсемТоварам Тогда
		
		ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;
		Если ТекущаяСтрокаТовары = Неопределено Тогда
			Предупреждение("Не выбрана строка с товаром, к которому относится удаляемая аптека. Удаление отменено.");
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АптекиПослеУдаления(Элемент)
	
	ТекущаяСтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;
	ЗаписатьСписоАптекПоСтрокеТовара(ТекущаяСтрокаТовары.Товар);
	
КонецПроцедуры

Процедура ПоВсемТоварамПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
	
	Иначе	
		
		МегаТЗ.Очистить();
		
		Для каждого СтрокаТЧТовары Из Товары Цикл
		
			Для каждого СтрокаТЧАптеки Из Аптеки Цикл
			
				НоваяСтрокаМега = МегаТЗ.Добавить();
				НоваяСтрокаМега.Товар	= СтрокаТЧТовары.Товар;
				НоваяСтрокаМега.Аптека	= СтрокаТЧАптеки.Аптека;
			
			КонецЦикла; 	
		
		КонецЦикла;
		
	КонецЕсли; 
	
	УправлениеДоступностьюЗаполнитьИзФайлаТоварАптека();

КонецПроцедуры

// ОБРАБОТЧИКИ ТЧ РАЗБИВКА ПО ПЕРИОДАМ
Процедура КоманднаяПанель3РазбивкаПоПериодамПоМесяцам(Кнопка)
	
	Если ПроверкаПередРазбивкойНаПериоды() Тогда
		Возврат	
	КонецЕсли; 
	
	РазбивкаПоПериодам(1);
	РаспределитьСуммуПланаПоПериодам();
	
КонецПроцедуры

Процедура КоманднаяПанель3РазбивкаПоПериодамПоКвартально(Кнопка)
	
	Если ПроверкаПередРазбивкойНаПериоды() Тогда
		Возврат	
	КонецЕсли; 
	
	РазбивкаПоПериодам(3);
	РаспределитьСуммуПланаПоПериодам();
	
КонецПроцедуры

Процедура КоманднаяПанель3РазбивкаПоПериодамЗа6Месяцев(Кнопка)
	
	Если ПроверкаПередРазбивкойНаПериоды() Тогда
		Возврат	
	КонецЕсли; 
	
	РазбивкаПоПериодам(6);
	РаспределитьСуммуПланаПоПериодам();
	
КонецПроцедуры

Процедура КоманднаяПанель3РазбивкаПоПериодамПоГодам(Кнопка)
	
	Если ПроверкаПередРазбивкойНаПериоды() Тогда
		Возврат	
	КонецЕсли; 
	
	РазбивкаПоПериодам(12);
	РаспределитьСуммуПланаПоПериодам();

КонецПроцедуры

Процедура ПериодыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.РучноеРедактирование Тогда
		 //ОформлениеСтроки.ЦветФона=Новый Цвет(204,255,204);
		 ОформлениеСтроки.Ячейки.ПланНаПериод.ЦветФона=Новый Цвет(204,255,204);
		 ОформлениеСтроки.Ячейки.ПланНаПериодсНДС.ЦветФона=Новый Цвет(204,255,204);
		 
	 КонецЕсли;
	 
	Если ДанныеСтроки.РучноеРедактированиеБонус Тогда
		
		ОформлениеСтроки.Ячейки.БонусНаПериод.ЦветФона=Новый Цвет(204,255,204);
		ОформлениеСтроки.Ячейки.БонусНаПериодсНДС.ЦветФона=Новый Цвет(204,255,204);
		
	КонецЕсли;	
	 
КонецПроцедуры

Процедура ПериодыПланНаПериодПриИзменении(Элемент)
	                                              
	ТекущаяСтрока = ЭлементыФормы.Периоды.ТекущаяСтрока;
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	ВведенноеЗначение = Элемент.Значение;
	ВведеннаяДельтаПоСтроке = 0;	
	Если ВведенноеЗначение = ПериодыПланНаПериодТекущаяСтрока Тогда
		Возврат
	Иначе 
		ВведеннаяДельтаПоСтроке = ПериодыПланНаПериодТекущаяСтрока - ВведенноеЗначение;  
	КонецЕсли; 
	ТекущаяСтрока.РучноеРедактирование = Истина;
	
	// Количество строк за исключением текущей строки и строк с ручным редактированием
	КоличествоСтрокТЧТовары = Периоды.Количество();	
	КоличествоСтрокТЧТоварыБезРучнойОтметки = 0;
	ЗаполненноСуммаРучнойОтметки = 0;
	КоличествоСтрокСРучнойОтметкой = 0;
	НомерСтрокиДляЗаписиПогрешностиОкругления = 0;	
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если СтрокаТЧ.РучноеРедактирование Тогда
			
			ЗаполненноСуммаРучнойОтметки = ЗаполненноСуммаРучнойОтметки + СтрокаТЧ.ПланНаПериод;
			КоличествоСтрокСРучнойОтметкой = КоличествоСтрокСРучнойОтметкой+1;
			
		Иначе
			НомерСтрокиДляЗаписиПогрешностиОкругления = СтрокаТЧ.НомерСтроки;
		КонецЕсли; 
	
	КонецЦикла;
	КоличествоСтрокТЧТоварыБезРучнойОтметки = КоличествоСтрокТЧТовары-КоличествоСтрокСРучнойОтметкой; 
	
	Если КоличествоСтрокСРучнойОтметкой <> КоличествоСтрокТЧТовары Тогда
	
		Если ЗаполненноСуммаРучнойОтметки > ПланПоСтатье Тогда
		
			Сообщить("Сумма ручных распределений по всем строкам: "+ ЗаполненноСуммаРучнойОтметки + " превышает сумму плана по статье!");
			Элемент.Значение = ПериодыПланНаПериодТекущаяСтрока;
			Возврат
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КоличествоСтрокТЧТоварыБезРучнойОтметки = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения = Окр(ВведеннаяДельтаПоСтроке/КоличествоСтрокТЧТоварыБезРучнойОтметки,2);
	
	ЗаполненноСуммаПлана = 0;
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если НЕ СтрокаТЧ.РучноеРедактирование Тогда
			
			Если СтрокаТЧ.НомерСтроки = НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
				СтрокаТЧ.ПланНаПериод = ПланПоСтатье - ЗаполненноСуммаРучнойОтметки- ЗаполненноСуммаПлана
			Иначе	
				СтрокаТЧ.ПланНаПериод = СтрокаТЧ.ПланНаПериод + ЗначениеРаспределения;
				ЗаполненноСуммаПлана = ЗаполненноСуммаПлана + СтрокаТЧ.ПланНаПериод;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Пересчет колонки "План на период с НДС", "Бонус на период без НДС", "Бонус на период с НДС" 
	Если НЕ УчитыватьНДС Тогда
		
		ТекущаяСтрока.РучноеРедактированиеБонус = Истина;
		ПересчитатьЗначениеКолонокПериодТЧПериоды(0,НомерСтрокиДляЗаписиПогрешностиОкругления);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПериодыПланНаПериодсНДСПриИзменении(Элемент)
	                                              
	ТекущаяСтрока = ЭлементыФормы.Периоды.ТекущаяСтрока;
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	ВведенноеЗначение = Элемент.Значение;
	ВведеннаяДельтаПоСтроке = 0;	
	Если ВведенноеЗначение = ПериодыПланНаПериодсНДСТекущаяСтрока Тогда
		Возврат
	Иначе 
		ВведеннаяДельтаПоСтроке = ПериодыПланНаПериодсНДСТекущаяСтрока - ВведенноеЗначение;  
	КонецЕсли; 
	ТекущаяСтрока.РучноеРедактирование = Истина;
	
	// Количество строк за исключением текущей строки и строк с ручным редактированием
	КоличествоСтрокТЧТовары = Периоды.Количество();	
	КоличествоСтрокТЧТоварыБезРучнойОтметки = 0;
	ЗаполненноСуммаРучнойОтметки = 0;
	КоличествоСтрокСРучнойОтметкой = 0;
	НомерСтрокиДляЗаписиПогрешностиОкругления = 0;	
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если СтрокаТЧ.РучноеРедактирование Тогда
			
			ЗаполненноСуммаРучнойОтметки = ЗаполненноСуммаРучнойОтметки + СтрокаТЧ.ПланНаПериодсНДС;
			КоличествоСтрокСРучнойОтметкой = КоличествоСтрокСРучнойОтметкой+1;
			
		Иначе
			НомерСтрокиДляЗаписиПогрешностиОкругления = СтрокаТЧ.НомерСтроки;
		КонецЕсли; 
	
	КонецЦикла;
	КоличествоСтрокТЧТоварыБезРучнойОтметки = КоличествоСтрокТЧТовары-КоличествоСтрокСРучнойОтметкой; 
	
	Если КоличествоСтрокСРучнойОтметкой <> КоличествоСтрокТЧТовары Тогда
	
		Если ЗаполненноСуммаРучнойОтметки > ПланПоСтатьеСНДС Тогда
		
			Сообщить("Сумма ручных распределений по всем строкам: "+ ЗаполненноСуммаРучнойОтметки + " превышает сумму плана по статье (с НДС)!");
			Элемент.Значение = ПериодыПланНаПериодсНДСТекущаяСтрока;
			Возврат
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КоличествоСтрокТЧТоварыБезРучнойОтметки = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения = Окр(ВведеннаяДельтаПоСтроке/КоличествоСтрокТЧТоварыБезРучнойОтметки,2);
	
	ЗаполненноСуммаПлана = 0;
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если НЕ СтрокаТЧ.РучноеРедактирование Тогда
			
			Если СтрокаТЧ.НомерСтроки = НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
				СтрокаТЧ.ПланНаПериодсНДС = ПланПоСтатьеСНДС - ЗаполненноСуммаРучнойОтметки- ЗаполненноСуммаПлана
			Иначе	
				СтрокаТЧ.ПланНаПериодсНДС = СтрокаТЧ.ПланНаПериодсНДС + ЗначениеРаспределения;
				ЗаполненноСуммаПлана = ЗаполненноСуммаПлана + СтрокаТЧ.ПланНаПериодсНДС;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Пересчет колонки "План на период с НДС", "Бонус на период без НДС", "Бонус на период с НДС" 
	Если УчитыватьНДС Тогда
		
		ТекущаяСтрока.РучноеРедактированиеБонус = Истина;
		ПересчитатьЗначениеКолонокПериодТЧПериоды(1,НомерСтрокиДляЗаписиПогрешностиОкругления);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПериодыБонусНаПериодПриИзменении(Элемент)
	                                              
	ТекущаяСтрока = ЭлементыФормы.Периоды.ТекущаяСтрока;
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	ВведенноеЗначение = Элемент.Значение;
	ВведеннаяДельтаПоСтроке = 0;	
	Если ВведенноеЗначение = ПериодыПБонусНаПериодТекущаяСтрока Тогда
		Возврат
	Иначе 
		ВведеннаяДельтаПоСтроке = ПериодыПБонусНаПериодТекущаяСтрока - ВведенноеЗначение;  
	КонецЕсли; 
	ТекущаяСтрока.РучноеРедактированиеБонус = Истина;
	
	// Количество строк за исключением текущей строки и строк с ручным редактированием
	КоличествоСтрокТЧТовары = Периоды.Количество();	
	КоличествоСтрокТЧТоварыБезРучнойОтметки = 0;
	ЗаполненноСуммаРучнойОтметки = 0;
	ЗаполненноСуммасНДСРучнойОтметки = 0;
	КоличествоСтрокСРучнойОтметкой = 0;
	НомерСтрокиДляЗаписиПогрешностиОкругления = 0;	
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если СтрокаТЧ.РучноеРедактированиеБонус Тогда
			
			ЗаполненноСуммаРучнойОтметки		= ЗаполненноСуммаРучнойОтметки + СтрокаТЧ.БонусНаПериод;
			КоличествоСтрокСРучнойОтметкой = КоличествоСтрокСРучнойОтметкой+1;
			
		Иначе
			НомерСтрокиДляЗаписиПогрешностиОкругления = СтрокаТЧ.НомерСтроки;
		КонецЕсли; 
	
	КонецЦикла;
	КоличествоСтрокТЧТоварыБезРучнойОтметки = КоличествоСтрокТЧТовары-КоличествоСтрокСРучнойОтметкой; 
	
	Если КоличествоСтрокСРучнойОтметкой <> КоличествоСтрокТЧТовары Тогда
	
		Если ЗаполненноСуммаРучнойОтметки > СуммаБонусаПоСтатье Тогда
		
			Сообщить("Сумма ручных распределений по всем строкам: "+ ЗаполненноСуммаРучнойОтметки + " превышает сумму бонуса по статье!");
			Элемент.Значение = ПериодыПБонусНаПериодТекущаяСтрока;
			Возврат
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КоличествоСтрокТЧТоварыБезРучнойОтметки = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения = Окр(ВведеннаяДельтаПоСтроке/КоличествоСтрокТЧТоварыБезРучнойОтметки,2);
	
	ЗаполненноСуммаПлана = 0;
	
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если НЕ СтрокаТЧ.РучноеРедактированиеБонус Тогда
			
			Если СтрокаТЧ.НомерСтроки = НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
				
				СтрокаТЧ.БонусНаПериод		= СуммаБонусаПоСтатье - ЗаполненноСуммаРучнойОтметки- ЗаполненноСуммаПлана;
				
			Иначе
				
				СтрокаТЧ.БонусНаПериод		= СтрокаТЧ.БонусНаПериод + ЗначениеРаспределения;
				ЗаполненноСуммаПлана		= ЗаполненноСуммаПлана + СтрокаТЧ.БонусНаПериод;
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Пересчет колонки "Бонус с НДС"
	ПересчитатьЗначениеКолонокПериодТЧПериоды_ТолькоБонусы(0,НомерСтрокиДляЗаписиПогрешностиОкругления);
	
КонецПроцедуры

Процедура ПериодыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	ПериодыПланНаПериодТекущаяСтрока		= ТекущаяСтрока.ПланНаПериод;
	ПериодыПланНаПериодсНДСТекущаяСтрока	= ТекущаяСтрока.ПланНаПериодсНДС;
	ПериодыПБонусНаПериодТекущаяСтрока		= ТекущаяСтрока.БонусНаПериод;
	ПериодыПБонусНаПериодсНДСТекущаяСтрока	= ТекущаяСтрока.БонусНаПериодсНДС;
	
КонецПроцедуры

Процедура ПериодыБонусНаПериодсНДСПриИзменении(Элемент)
	                                              
	ТекущаяСтрока = ЭлементыФормы.Периоды.ТекущаяСтрока;
	НомерТекущейСтроки = ТекущаяСтрока.НомерСтроки;
	ВведенноеЗначение = Элемент.Значение;
	ВведеннаяДельтаПоСтроке = 0;	
	Если ВведенноеЗначение = ПериодыПБонусНаПериодсНДСТекущаяСтрока Тогда
		Возврат
	Иначе 
		ВведеннаяДельтаПоСтроке = ПериодыПБонусНаПериодсНДСТекущаяСтрока - ВведенноеЗначение;  
	КонецЕсли; 
	ТекущаяСтрока.РучноеРедактированиеБонус = Истина;
	
	// Количество строк за исключением текущей строки и строк с ручным редактированием
	КоличествоСтрокТЧТовары = Периоды.Количество();	
	КоличествоСтрокТЧТоварыБезРучнойОтметки = 0;
	ЗаполненноСуммаРучнойОтметки = 0;
	ЗаполненноСуммасНДСРучнойОтметки = 0;
	КоличествоСтрокСРучнойОтметкой = 0;
	НомерСтрокиДляЗаписиПогрешностиОкругления = 0;	
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если СтрокаТЧ.РучноеРедактированиеБонус Тогда
			
			ЗаполненноСуммасНДСРучнойОтметки	= ЗаполненноСуммасНДСРучнойОтметки + СтрокаТЧ.БонусНаПериодсНДС;
			КоличествоСтрокСРучнойОтметкой = КоличествоСтрокСРучнойОтметкой+1;
			
		Иначе
			НомерСтрокиДляЗаписиПогрешностиОкругления = СтрокаТЧ.НомерСтроки;
		КонецЕсли; 
	
	КонецЦикла;
	КоличествоСтрокТЧТоварыБезРучнойОтметки = КоличествоСтрокТЧТовары-КоличествоСтрокСРучнойОтметкой; 
	
	Если КоличествоСтрокСРучнойОтметкой <> КоличествоСтрокТЧТовары Тогда
	
		Если ЗаполненноСуммасНДСРучнойОтметки > СуммаБонусаПоСтатьеСНДС Тогда
		
			Сообщить("Сумма ручных распределений по всем строкам: "+ ЗаполненноСуммасНДСРучнойОтметки + " превышает сумму бонуса по статье с НДС!");
			Элемент.Значение = ПериодыПБонусНаПериодсНДСТекущаяСтрока;
			Возврат
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если КоличествоСтрокТЧТоварыБезРучнойОтметки = 0 Тогда
		Возврат	
	КонецЕсли; 
	
	ЗначениеРаспределения = Окр(ВведеннаяДельтаПоСтроке/КоличествоСтрокТЧТоварыБезРучнойОтметки,2);
	
	ЗаполненноСуммаПланасНДС = 0;
	Для каждого СтрокаТЧ Из Периоды Цикл
		
		Если НЕ СтрокаТЧ.РучноеРедактированиеБонус Тогда
			
			Если СтрокаТЧ.НомерСтроки = НомерСтрокиДляЗаписиПогрешностиОкругления Тогда
				
				СтрокаТЧ.БонусНаПериодсНДС	= СуммаБонусаПоСтатьеСНДС - ЗаполненноСуммасНДСРучнойОтметки- ЗаполненноСуммаПланасНДС;
				
			Иначе
				
				СтрокаТЧ.БонусНаПериодсНДС	= СтрокаТЧ.БонусНаПериодсНДС + ЗначениеРаспределения;
				ЗаполненноСуммаПланасНДС	= ЗаполненноСуммаПланасНДС + СтрокаТЧ.БонусНаПериодсНДС;
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Пересчет колонки "Бонус без НДС"
	ПересчитатьЗначениеКолонокПериодТЧПериоды_ТолькоБонусы(1,НомерСтрокиДляЗаписиПогрешностиОкругления);
	
КонецПроцедуры

// ОБРАБОТЧИКИ ТЧ ШКАЛА ВЫПОЛНЕНИЯ
Процедура ШкалаВыполненияПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные			= Элемент.ТекущиеДанные;
	ПриоритетТекущейСтроки	= ТекущиеДанные.Приоритет;
	НомерТекущейСтроки		= ТекущиеДанные.НомерСтроки;
	Если ПриоритетТекущейСтроки Тогда
	
		Ответ = Вопрос("Суммы планов и бонусов для Статьи будут пересчитаны согласно установленного приоритета выполнения. Сменить приоритет?",РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ТекущиеДанные.Приоритет = Ложь;
			Возврат	
		КонецЕсли; 
		
		// Если в текущей строке установлен флаг, то снимаем флаг со всех других строк
		Для каждого СтрокаТЧ Из ШкалаВыполнения Цикл
		
			Если СтрокаТЧ.НомерСтроки <> НомерТекущейСтроки Тогда
				СтрокаТЧ.Приоритет = Ложь;
			КонецЕсли; 	
		
		КонецЦикла; 
		
		ТребуетсяРаспределитьСуммуПоТоварам		= Ложь;
		ТребуетсяРаспределитьСуммуПоПериодам	= Ложь;
		Если ТекущиеДанные.ПланПоСтатьеБезНДС <> ПланПоСтатье Тогда
			ПланПоСтатье = ТекущиеДанные.ПланПоСтатьеБезНДС;
			Если НЕ УчитыватьНДС Тогда
				ТребуетсяРаспределитьСуммуПоТоварам		= Истина;
				ТребуетсяРаспределитьСуммуПоПериодам	= Истина;
			КонецЕсли; 
		КонецЕсли; 
		Если ТекущиеДанные.ПланПоСтатьеСНДС <> ПланПоСтатьеСНДС Тогда
			ПланПоСтатьеСНДС = ТекущиеДанные.ПланПоСтатьеСНДС;
			Если УчитыватьНДС Тогда
				ТребуетсяРаспределитьСуммуПоТоварам		= Истина;
				ТребуетсяРаспределитьСуммуПоПериодам	= Истина;
			КонецЕсли;
		КонецЕсли; 
		Если ТекущиеДанные.ТипРасчета <> ТипРасчета Тогда
			ТипРасчета = ТекущиеДанные.ТипРасчета;
			ТребуетсяРаспределитьСуммуПоТоварам		= Истина;
			ТребуетсяРаспределитьСуммуПоПериодам	= Истина;
		КонецЕсли; 
		Если ТекущиеДанные.ЗначениеБонуса <> ЗначениеБонуса Тогда
			ЗначениеБонуса = ТекущиеДанные.ЗначениеБонуса;
			ТребуетсяРаспределитьСуммуПоПериодам	= Истина;
		КонецЕсли; 
		Если ТекущиеДанные.СуммаБонусаПоСтатье <> СуммаБонусаПоСтатье Тогда
			СуммаБонусаПоСтатье = ТекущиеДанные.СуммаБонусаПоСтатье;
			Если ТекущиеДанные.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
				ТребуетсяРаспределитьСуммуПоПериодам	= Истина;
			КонецЕсли; 
		КонецЕсли; 
		Если ТекущиеДанные.СуммаБонусаПоСтатьеСНДС <> СуммаБонусаПоСтатьеСНДС Тогда
			СуммаБонусаПоСтатьеСНДС = ТекущиеДанные.СуммаБонусаПоСтатьеСНДС;
			Если ТекущиеДанные.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
				ТребуетсяРаспределитьСуммуПоПериодам	= Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТребуетсяРаспределитьСуммуПоТоварам Тогда
			РаспределитьСуммуПланаПоТоварам();
		КонецЕсли; 
			
		Если ТребуетсяРаспределитьСуммуПоПериодам Тогда
			РаспределитьСуммуПланаПоПериодам();
		КонецЕсли; 	
		
	КонецЕсли; 
	 
КонецПроцедуры

Процедура ШкалаВыполненияПередНачаломДобавления(Элемент, Отказ, Копирование)
	Если Копирование и Элемент.ТекущиеДанные.Приоритет Тогда
		
		Предупреждение("Копирование приоритетной строки запрещено!");
		Отказ=Истина;
		
	КонецЕсли; 
КонецПроцедуры

Процедура ШкалаВыполненияПланПоСтатьеБезНДСПриИзменении(Элемент)
	
	// 1. После заполнения плана без НДС вычисляем бонус без НДС
	ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;

	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
		
		Если УчитыватьНДС Тогда
		
			СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
			ТекущаяСтрока.СуммаБонусаПоСтатье = ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС / (1+СредняяСтавкаНДС/100)	
		
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатье = Элемент.Значение * ТекущаяСтрока.ЗначениеБонуса/100
	
	КонецЕсли;
	
	// 2. Расчитываем значение поля План с НДС
	Если НЕ УчитыватьНДС Тогда
		
		ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;
		КоличествоСтрокТЧТовары = Товары.Количество();
		
		Если КоличествоСтрокТЧТовары = 0 Тогда
			Возврат	
		КонецЕсли; 
		
		ЗначениеРаспределения		= Окр(Элемент.Значение/КоличествоСтрокТЧТовары,2);
		ЗначениеРаспределенияСНДС	= 0;
		
		Для каждого СтрокаТЧ Из Товары Цикл
			
			СтавкаНДС	= СтрокаТЧ.СтавкаНДС;
			ЗначениеРаспределенияСНДС = ЗначениеРаспределенияСНДС + ЗначениеРаспределения  * (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
			
		КонецЦикла;
		
		ТекущаяСтрока.ПланПоСтатьеСНДС	= ЗначениеРаспределенияСНДС;
		
	КонецЕсли; 
	
	// 3. Расчитываем бонус с НДС
	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
	
		Если НЕ УчитыватьНДС Тогда
		
			СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
			ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = ТекущаяСтрока.СуммаБонусаПоСтатье * (1+СредняяСтавкаНДС/100)	
		
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = ТекущаяСтрока.ПланПоСтатьеСНДС * ТекущаяСтрока.ЗначениеБонуса/100
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ШкалаВыполненияПланПоСтатьеСНДСПриИзменении(Элемент)
	
	// 1. После заполнения плана с НДС вычисляем бонус с НДС
	ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;
	
	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
	
		Если НЕ УчитыватьНДС Тогда
		
			СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
			ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = Элемент.Значение * (1+СредняяСтавкаНДС/100)	
		
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = ТекущаяСтрока.ПланПоСтатьеСНДС * ТекущаяСтрока.ЗначениеБонуса/100
	
	КонецЕсли;
	
	// 2. Расчет плана без НДС
	Если УчитыватьНДС Тогда
	
		ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;
		КоличествоСтрокТЧТовары = Товары.Количество();
		
		Если КоличествоСтрокТЧТовары = 0 Тогда
			Возврат	
		КонецЕсли; 
		ЗначениеРаспределения		= Окр(Элемент.Значение/КоличествоСтрокТЧТовары,2);
		ЗначениеРаспределенияБезНДС	= 0;
		Для каждого СтрокаТЧ Из Товары Цикл
			
			СтавкаНДС	= СтрокаТЧ.СтавкаНДС;
			ЗначениеРаспределенияБезНДС = ЗначениеРаспределенияБезНДС + ЗначениеРаспределения  / (1+ПереопределениеЗначенияСтавки20_18(СтавкаНДС,Дата)/100);
			
		КонецЦикла;
		ТекущаяСтрока.ПланПоСтатьеБезНДС	= ЗначениеРаспределенияБезНДС;
	
	КонецЕсли;
	
	// 3. Расчитываем бонус без НДС
	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
		
		Если УчитыватьНДС Тогда
		
			СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
			ТекущаяСтрока.СуммаБонусаПоСтатье = Элемент.Значение / (1+СредняяСтавкаНДС/100)	
		
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатье = ТекущаяСтрока.ПланПоСтатьеБезНДС * ТекущаяСтрока.ЗначениеБонуса/100
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ШкалаВыполненияСуммаБонусаПоСтатьеПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;
	
	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
	
		Если НЕ УчитыватьНДС Тогда
		
			СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
			ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = Элемент.Значение * (1+СредняяСтавкаНДС/100)	
		
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = ТекущаяСтрока.ПланПоСтатьеСНДС * ЗначениеБонуса/100
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ШкалаВыполненияСуммаБонусаПоСтатьеСНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;
		
	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
		
		Если УчитыватьНДС Тогда
		
			СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
			ТекущаяСтрока.СуммаБонусаПоСтатье = Элемент.Значение / (1+СредняяСтавкаНДС/100)	
		
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатье = ТекущаяСтрока.ПланПоСтатьеБезНДС * ТекущаяСтрока.ЗначениеБонуса/100
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ШкалаВыполненияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя <> "Приоритет" И Элемент.ТекущаяСтрока.Приоритет Тогда
		
		Сообщить("Редактирование приоритетной строки отменено. Отредактируйте необходимые элементы в шапке документа!");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуБонусавСтрокеТЧШкалаВыполнения()
	
	ТекущаяСтрока = ЭлементыФормы.ШкалаВыполнения.ТекущаяСтрока;
	
	Если ТекущаяСтрока.ТипРасчета = Справочники.ТипРасчетаБонусаКонтракт.ФиксированныйБонус Тогда
		
		СредняяСтавкаНДС = ПолучитьСреднееЗначениеНДС();
		
		Если УчитыватьНДС Тогда
			ТекущаяСтрока.СуммаБонусаПоСтатье = ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС / (1+СредняяСтавкаНДС/100)	
		Иначе
			ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС = ТекущаяСтрока.СуммаБонусаПоСтатье * (1+СредняяСтавкаНДС/100)	
		КонецЕсли; 
	
	Иначе
	
		ТекущаяСтрока.СуммаБонусаПоСтатье		= ТекущаяСтрока.ПланПоСтатьеБезНДС * ТекущаяСтрока.ЗначениеБонуса/100;
		ТекущаяСтрока.СуммаБонусаПоСтатьеСНДС	= ТекущаяСтрока.ПланПоСтатьеСНДС * ТекущаяСтрока.ЗначениеБонуса/100;
		
	КонецЕсли;

КонецПроцедуры

Процедура ШкалаВыполненияЗначениеБонусаПриИзменении(Элемент)
	РассчитатьСуммуБонусавСтрокеТЧШкалаВыполнения()	
КонецПроцедуры

Процедура ШкалаВыполненияТипРасчетаПриИзменении(Элемент)
	РассчитатьСуммуБонусавСтрокеТЧШкалаВыполнения()
КонецПроцедуры




СписокТипБонуса = Новый СписокЗначений;
СписокТипБонуса.Добавить("Открытый");
СписокТипБонуса.Добавить("Закрытый");

ПостроительТовары.Текст = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК КодТовара,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Концерн.Ссылка КАК Концерн,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Ссылка КАК Производитель,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП КАК УчаствуетВАП,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|{ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.* КАК Бренд,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.* КАК Производитель,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Концерн.* КАК Концерн}";

ПостроительАптека.Текст =
"ВЫБРАТЬ
|	МестаХранения.Ссылка КАК Аптека,
|	МестаХранения.Код КАК КодАптеки
|ИЗ
|	Справочник.МестаХранения КАК МестаХранения
|ГДЕ
|	МестаХранения.ЭтоГруппа = ЛОЖЬ
|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
//|	И МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
|{ГДЕ
|	МестаХранения.Ссылка.* КАК Аптека}";

МегаТЗ = Новый ТаблицаЗначений;
МегаТЗ.Колонки.Добавить("Аптека");
МегаТЗ.Колонки.Добавить("Товар");
МегаТЗ.Колонки.Добавить("ДокументРегистратор");
МегаТЗ.Колонки.Добавить("ДатаДействияС");
МегаТЗ.Колонки.Добавить("ДатаДействияПо");
МегаТЗ.Колонки.Добавить("УтвержденМЛК");
МегаТЗ.Колонки.Добавить("ТипКонтракта");

СтруктураРеквизитовПриОткрытии = Новый Структура("Согласован, Утвержден", Согласован, Утвержден);

