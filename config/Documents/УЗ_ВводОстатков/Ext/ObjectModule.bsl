//Перем ДБФ;
Перем НеудачныйВводНаОсновании Экспорт;

Перем ПроведениеЗакончено;


Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ЗаписатьСтроку("</" + Имя + ">");
	
КонецПроцедуры


Функция Архивация(Файл)
	//Проверяем на наличие файла (на всяк случай ), потом геть его в архив, а dbf удаляем
	ВремФайл = Новый Файл(Файл);
	Если ВремФайл.Существует() Тогда
		ИмяАрхива = ВремФайл.Путь + "" + ВремФайл.ИмяБезРасширения + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный); 
		ФайлАрхива.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно); 
		ФайлАрхива.Записать();
		УдалитьФайлы(Файл);
	КонецЕсли;
	Возврат Новый Файл(ИмяАрхива);
КонецФункции

Функция СоздатьДБФ(номер,ВремИмяФайла)
	
			ДБФ= Новый  Xbase;
			ДБФ.Кодировка = КодировкаXBase.OEM;
			ДБФ.поля.Добавить("NDOC","N",10,0);
			ДБФ.поля.Добавить("DDOC","D");
			ДБФ.поля.Добавить("idtype","N",3,0);
			ДБФ.поля.Добавить("idfirm","N",3,0);
			ДБФ.поля.Добавить("iddep","N",5,0);
			ДБФ.поля.Добавить("ndep","S",200);
			ДБФ.поля.Добавить("szwonds","N",15,2);			
			ДБФ.поля.Добавить("szwnds","N",15,2);			
			ДБФ.поля.Добавить("srwonds","N",15,2);			
			ДБФ.поля.Добавить("srwnds","N",15,2);			
			
			ДБФ.поля.Добавить("idgood","N",10,0);
			ДБФ.поля.Добавить("ngood","S",150);
			ДБФ.поля.Добавить("idprod","N",10,0);
			ДБФ.поля.Добавить("nprod","S",150);
			ДБФ.поля.Добавить("coeff","N",10,0);
			ДБФ.поля.Добавить("coeffp","N",10,0);
			ДБФ.поля.Добавить("dvalid","D");
			ДБФ.поля.Добавить("series","S",30,0);
			ДБФ.поля.Добавить("eancode","S","13");
			ДБФ.поля.Добавить("barcode","S","13");
			ДБФ.поля.Добавить("extpart","S",13);
			ДБФ.поля.Добавить("idngtd","N",10,0);
			ДБФ.поля.Добавить("nngtd","S",30);
			ДБФ.поля.Добавить("idcnt","N",10,0);
			ДБФ.поля.Добавить("ncnt","S",50);
			ДБФ.поля.Добавить("cntcode3","S",5);
			ДБФ.поля.Добавить("qntd","N",15,2);
			ДБФ.поля.Добавить("pndsz","N",15,2);
			ДБФ.поля.Добавить("pndsr","N",15,2);
			ДБФ.поля.Добавить("czwonds","N",15,2);
			ДБФ.поля.Добавить("czwnds","N",15,2);
			ДБФ.поля.Добавить("crwonds","N",15,2);
			ДБФ.поля.Добавить("crwnds","N",15,2);
			ДБФ.поля.Добавить("sszwonds","N",15,2);
			ДБФ.поля.Добавить("ssznds","N",15,2);
			ДБФ.поля.Добавить("sszwnds","N",15,2);
			ДБФ.поля.Добавить("ssrwonds","N",15,2);
			ДБФ.поля.Добавить("ssrnds","N",15,2);
			ДБФ.поля.Добавить("ssrwnds","N",15,2);
			ДБФ.поля.Добавить("costreg","N",15,2);
			
			ДБФ.поля.Добавить("idcontr","N",15,0);
			ДБФ.поля.Добавить("ncontr","S",150);				  
			ДБФ.поля.Добавить("inncontr","S",15);				  
			ДБФ.поля.Добавить("kppcontr","S",15); 
			ДБФ.поля.Добавить("idsubtype","N",3);
			ДБФ.поля.Добавить("latname","S",100);
			
			Попытка
				ДБФ.СоздатьФайл(ВремИмяФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
			
	        Возврат ДБФ;
	
КонецФункции

Функция Выгрузить_в_АйДиФарма()
	
	КаталогФТП = Константы.КаталогФТП.Получить();
	
	ВремИмяФайла =ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+ "rsttemp.dbf";
	ДБФ = СоздатьДБФ(Номер,ВремИмяФайла);
	Если ДБФ = Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось создать файл для выгрузки : " + ВремИмяФайла);	
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	
	КодСклада = СокрЛП(Формат(Склад.Код,"ЧГ=0"));
	Префикс = "rst";
	КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(КодСклада)=1,"0"+КодСклада,КодСклада) + "\In\";
	ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
	НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + КодСклада + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".dbf";
	
	
	
	
	ТХТ = "ВЫБРАТЬ
	|	ТЧ.Партия.ВидПоступленияТовара.Порядок КАК id_type,
	|	ТЧ.Ссылка.Фирма.Код КАК id_firm,
	|	ТЧ.Ссылка.Склад.Код КАК id_dep,
	|	ТЧ.Ссылка.Склад.Наименование КАК name_dep,
	|	ТЧ.Товар.Код КАК id_good,
	|	ТЧ.Товар.Наименование КАК name_good,
	|	Подстрока(ТЧ.Товар.МеждународноеНазвание,1,100) КАК latname,
	|	ТЧ.Производитель.Код КАК id_producer,
	|	ТЧ.Производитель.Наименование КАК name_producer,
	|	ТЧ.Коэфф КАК coeffp,
	|	ТЧ.СрокГодности КАК dvalid,
	|	ЕСТЬNULL(ТЧ.СерияСтрока, ""*"") КАК series,
	|	ТЧ.Баркод.Наименование КАК eancode,
	|	ТЧ.Партия.Наименование КАК barcode,
	|	ТЧ.Партия.Код КАК extpart,
	|	ТЧ.НомерГТД.Код КАК id_ngtd,
	|	ТЧ.НомерГТД.Наименование КАК name_ngtd,
	|	ТЧ.НомерГТД.Страна.Код КАК id_country,
	|	ТЧ.НомерГТД.Страна.Наименование КАК name_ngtd_country,
	|	ТЧ.НомерГТД.Страна.КодПоКлассификатору КАК cntcode3,
	|	ТЧ.КоличествоФакт * ТЧ.Коэфф КАК qnt_d,
	|	ТЧ.СуммаЗакуп - ТЧ.НДСЗакуп КАК str_sum_z_wo_nds,
	|	ТЧ.НДСЗакуп КАК str_sum_z_nds,
	|	ТЧ.СуммаЗакуп КАК str_sum_z_w_nds,
	|	ТЧ.СуммаРозн - ТЧ.НДСРозн КАК str_sum_r_wo_nds,
	|	ТЧ.НДСРозн КАК str_sum_r_nds,
	|	ТЧ.СуммаРозн КАК str_sum_r_w_nds,
	// НДС20/18
	//|	ТЧ.СтавкаНДС.Ставка КАК p_nds_z,
	//|	ТЧ.СтавкаНДС.Ставка КАК p_nds_r,
	|	ВЫБОР
	|		КОГДА ТЧ.СтавкаНДС.Код = 3
	|				И ТЧ.Ссылка.Дата < ДАТАВРЕМЯ(2019, 1, 1)
	|			ТОГДА 18
	|		ИНАЧЕ ТЧ.СтавкаНДС.Ставка
	|	КОНЕЦ КАК p_nds_z,
	|	ВЫБОР
	|		КОГДА ТЧ.СтавкаНДС.Код = 3
	|				И ТЧ.Ссылка.Дата < ДАТАВРЕМЯ(2019, 1, 1)
	|			ТОГДА 18
	|		ИНАЧЕ ТЧ.СтавкаНДС.Ставка
	|	КОНЕЦ КАК p_nds_r,
	|	ТЧ.ЦенаГосРегистрации КАК costreg,
	|	0 КАК Номер,
	|	ТЧ.Поставщик.Код КАК idcontr,
	|	ТЧ.Поставщик.Наименование КАК ncontr,
	|	ТЧ.Поставщик.ИНН КАК inncontr,
	|	ТЧ.Поставщик.КПП КАК kppcontr,
	|	ЕСТЬNULL(ТЧ.Ссылка.ВидВводаОстатков.Порядок,0) КАК idsubtype
	|ИЗ
	|	Документ.ВводОстатков.Товар КАК ТЧ
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	name_good";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТЗЗапроса=Запрос.Выполнить().Выгрузить();
	
	ТЗСумм = ТЗЗапроса.Скопировать(,"номер,str_sum_z_wo_nds, str_sum_z_w_nds, str_sum_r_wo_nds, str_sum_r_w_nds");
	ТЗСумм.Свернуть("номер","str_sum_z_wo_nds, str_sum_z_w_nds, str_sum_r_wo_nds, str_sum_r_w_nds");
	
	ПерваяСтрока = ТЗСумм.Получить(0);
	sum_z_wo_nds	= ПерваяСтрока.str_sum_z_wo_nds;
	sum_z_w_nds		= ПерваяСтрока.str_sum_z_w_nds;
	sum_r_wo_nds	= ПерваяСтрока.str_sum_r_wo_nds;
	sum_r_w_nds		= ПерваяСтрока.str_sum_r_w_nds;
	н=0;
	Для Каждого стр из ТЗЗапроса Цикл		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		н=н+1;
		
		
		ВремКол = стр.qnt_d/стр.coeffp;
		Если ЦЕЛ(ВремКол) = ВремКол Тогда
			Количество = ВремКол;
			КоэффПрив  = 1;
		Иначе
			Количество = стр.qnt_d;
			КоэффПрив  = стр.coeffp;
		КонецЕсли;
		
		ЦенаЗакупСНДС = стр.str_sum_z_w_nds/Количество;
		ЦенаЗакупБНДС = стр.str_sum_z_wo_nds/Количество;
		ЦенаРознСНДС = стр.str_sum_r_w_nds/Количество;
		ЦенаРознБНДС = стр.str_sum_r_wo_nds/Количество;				
		
		
		ДБФ.Добавить();
		ДБФ.NDOC = Номер;
		ДБФ.DDOC = Дата;
		ДБФ.idtype		= стр.id_type;
		ДБФ.iddep		= стр.id_dep;
		ДБФ.ndep	 	= стр.name_dep;
		ДБФ.idfirm	 	= стр.id_firm;
		ДБФ.szwonds= sum_z_wo_nds;	//расчетное		
		ДБФ.szwnds = sum_z_w_nds;	//расчетное		
		ДБФ.srwonds= sum_r_wo_nds;	//расчетное		
		ДБФ.srwnds = sum_r_w_nds;	//расчетное		
		
		ДБФ.idgood		= стр.id_good;
		ДБФ.ngood		= стр.name_good;
		ДБФ.latname		= стр.latname;
		ДБФ.idprod		= стр.id_producer;
		ДБФ.nprod		= стр.name_producer;
		ДБФ.coeff		= стр.coeffp;
		ДБФ.coeffp		= КоэффПрив; //расчетное
		ДБФ.dvalid		= стр.dvalid;
		ДБФ.series		= ?(стр.series="","*",стр.series);
		ДБФ.eancode		= стр.eancode;
		ДБФ.barcode		= стр.barcode;
		ДБФ.extpart		= Формат(стр.extpart,"ЧГ=0");
		ДБФ.idngtd		= стр.id_ngtd;
		ДБФ.nngtd		= стр.name_ngtd;
		ДБФ.idcnt		= стр.id_country;
		ДБФ.ncnt		= стр.name_ngtd_country;
		ДБФ.cntcode3	= Формат(стр.cntcode3,"ЧЦ=3; ЧВН=");
		ДБФ.qntd		= Количество ; //рассчетное
		ДБФ.pndsz		= стр.p_nds_z;
		ДБФ.pndsr		= стр.p_nds_r;
		ДБФ.costreg		= стр.costreg;
		ДБФ.czwonds		= ЦенаЗакупБНДС; //расчетное
		ДБФ.czwnds		= ЦенаЗакупСНДС; //расчетное
		ДБФ.crwonds		= ЦенаРознБНДС; //расчетное
		ДБФ.crwnds		= ЦенаРознСНДС; //расчетное
		ДБФ.sszwonds	= стр.str_sum_z_wo_nds;
		ДБФ.ssznds		= стр.str_sum_z_nds;
		ДБФ.sszwnds		= стр.str_sum_z_w_nds;
		ДБФ.ssrwonds	= стр.str_sum_r_wo_nds;
		ДБФ.ssrnds		= стр.str_sum_r_nds;
		ДБФ.ssrwnds		= стр.str_sum_r_w_nds;				
		
		ДБФ.idcontr		= стр.idcontr;
		ДБФ.ncontr		= стр.ncontr;				  
		ДБФ.inncontr	= ?(ПустаяСтрока(стр.inncontr)=Истина,"0",стр.inncontr);				  
		ДБФ.kppcontr	= ?(ПустаяСтрока(стр.kppcontr)=Истина,"0",стр.kppcontr);				
		ДБФ.idsubtype	= стр.idsubtype;				
		
		Дбф.Записать();
		
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла);
	Архивация(НормальноеИмяФайла);
	
	Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
	
	Для к=0 По 3 Цикл
		Попытка
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в файл");
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	
	Возврат истина;	
	
КонецФункции


Функция ВыгрузитьВАптекуНаНовомПО()
	
	//Если ТекущаяДата() - ДатаРасценки  > 180 Тогда
		
		ТХТ = "ВЫБРАТЬ
		      |	Поступление.Товар КАК _Товар,
		      |	Поступление.Товар.Код КАК КодТовара,
		      |	Поступление.КоэффициентРазбивки КАК КоэффициентРазбивки,
		      |	ЕСТЬNULL(Поступление.Производитель.Код, 0) КАК КодПроизводителя,
		      |	Поступление.Производитель.Наименование КАК НаименованиеПроизводителя,
		      |	Поступление.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
		      |	Поступление.Производитель КАК Производитель,
		      |	Поступление.Коэфф КАК КоэффициентОприходования,
		      |	Поступление.СрокГодности КАК СрокГодности,
		      |	ВЫБОР
		      |		КОГДА Поступление.Серия = """"
		      |			ТОГДА ""*""
		      |		ИНАЧЕ Поступление.Серия
		      |	КОНЕЦ КАК Серия,
		      |	Поступление.Баркод КАК eancode,
		      |	Партии.Наименование КАК barcode,
		      |	Партии.ФирмаИсходная КАК ФирмаИсходная,
		      |	Партии.ВидПоступления КАК ВидПоступления,
		      |	Партии.ВидПоступленияИсходный КАК ВидПоступленияИсходный,
		      |	Партии.Поставщик КАК Поставщик,
		      |	Партии.ПоставщикИсходный КАК ПоставщикИсходный,
		      |	Партии.ПоставщикКомитентВнутренний КАК ПоставщикКомитентВнутренний,
		      |	Поступление.КодПартии КАК КодПартии,
		      |	Поступление.НомерГТД КАК НомерГТД,
		      |	Поступление.Количество КАК qnt,
		      |	Поступление.КоличествоАрбитраж * Поступление.Коэфф КАК КоличествоАрбитража,
		      |	Поступление.СтавкаНДСЗакуп КАК pndsz,
		      |	Поступление.СтавкаНДСРозн КАК pndsr,
		      |	Поступление.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
		      |	Поступление.ЦенаПроизводителя КАК ЦенаПроизводителя,
		      |	Поступление.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
		      |	Поступление.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
		      |	ВЫРАЗИТЬ(Поступление.ЦенаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакуп,
		      |	Поступление.СуммаЗакупБезНДС КАК СуммаЗакупБезНДСПоДаннымПоставщика,
		      |	Поступление.НДСЗакуп КАК СуммаЗакупНДСПоДаннымПоставщика,
		      |	Поступление.СуммаЗакуп КАК СуммаЗакупСНДСПоДаннымПоставщика,
		      |	(ВЫРАЗИТЬ(Поступление.СуммаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) - Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупНДС,
		      |	Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК КодМНН,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
		      |	Поступление.НомерСтроки КАК НомерСтроки,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК ЦенаРознУпак,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество КАК СуммаРозн,
		      |	ВЫБОР
		      |		КОГДА НЕ РЦП.Цена ЕСТЬ NULL
		      |			ТОГДА 1
		      |		ИНАЧЕ 0
		      |	КОНЕЦ КАК ЦенаИндивидуальная,
		      |	Поступление.Ссылка.Дата КАК ДатаДок
		      |ПОМЕСТИТЬ Выборка
		      |ИЗ
		      |	Документ.УЗ_ВводОстатков.Товар КАК Поступление
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = Поступление.КодПартии)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		      |		ПО Поступление.КодТовара = РЦ.ТоварКод
		      |			И (РЦ.АптекаКод = &СкладКод)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		      |		ПО Поступление.КодТовара = РЦП.ТоварКод
		      |			И Поступление.КодПартии = РЦП.ПартияКод
		      |			И (РЦП.АптекаКод = &СкладКод)
		      |ГДЕ
		      |	Поступление.Ссылка = &Ссылка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	Выборка.КодМНН КАК КодМНН,
		      |	Выборка.НаименованиеМНН КАК НаименованиеМНН
		      |ИЗ
		      |	Выборка КАК Выборка
		      |ГДЕ
		      |	Выборка.КодМНН > 0
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	Выборка.КодПроизводителя КАК КодПроизводителя,
		      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
		      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
		      |ИЗ
		      |	Выборка КАК Выборка
		      |ГДЕ
		      |	Выборка.КодПроизводителя > 0
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
		      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
		      |	СУММА(Выборка.СуммаЗакупБезНДС + Выборка.СуммаЗакупНДС) КАК СуммаЗакупСНДС,
		      |	СУММА(Выборка.СуммаЗакупНДСПоДаннымПоставщика) КАК СуммаЗакупНДСПоДаннымПоставщика,
		      |	СУММА(Выборка.СуммаЗакупСНДСПоДаннымПоставщика) КАК СуммаЗакупСНДСПоДаннымПоставщика,
		      |	СУММА(Выборка.СуммаЗакупБезНДСПоДаннымПоставщика) КАК СуммаЗакупБезНДСПоДаннымПоставщика,
		      |	СУММА(Выборка.СуммаРозн) КАК СуммаРознСНДС
		      |ИЗ
		      |	Выборка КАК Выборка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	Выборка._Товар КАК _Товар,
		      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
		      |	Выборка._Товар.Код КАК КодТовара,
		      |	Выборка._Товар.Наименование КАК Наименование,
		      |	ПОДСТРОКА(Выборка._Товар.МеждународноеНазвание, 1, 150) КАК МеждународноеНазвание,
		      |	Выборка.КодПроизводителя КАК КодПроизводителя,
		      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
		      |	Выборка.КодМНН КАК КодМНН,
		      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
		      |	Выборка._Товар.ПККН КАК ПККН,
		      |	ВЫБОР
		      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
		      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
		      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
		      |	КОНЕЦ КАК ДатаВводаВАП,
  	 		  // НДС20/18 
		      //|	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
		      |	ВЫБОР
		      |		КОГДА Выборка._Товар.СтавкаНДС.Код = 3
		      |				И Выборка.ДатаДок < ДАТАВРЕМЯ(2019, 1, 1)
		      |			ТОГДА 18
		      |		ИНАЧЕ Выборка._Товар.СтавкаНДС.Ставка
		      |	КОНЕЦ КАК Ставка,
		      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
		      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
		      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
		      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
		      |	Выборка.КоэффициентРазбивки КАК КоэффициентРазбивки,
		      |	ЕСТЬNULL(Выборка._Товар.Страна.Наименование, """") КАК Страна,
		      |	ЕСТЬNULL(Выборка._Товар.МестоХранения.Код, 0) КАК МестоХраненияКод,
		      |	ЕСТЬNULL(Выборка._Товар.Подкатегория.Код, 0) КАК КодПодкатегории
		      |ИЗ
		      |	Выборка КАК Выборка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	Выборка.НомерСтроки КАК НомерСтроки,
		      |	Выборка.КодТовара КАК КодТовара,
		      |	Выборка.КоэффициентРазбивки КАК КоэффициентРазбивки,
		      |	Выборка.КодПроизводителя КАК КодПроизводителя,
		      |	Выборка.КоэффициентОприходования КАК КоэффициентОприходования,
		      |	Выборка.СрокГодности КАК СрокГодности,
		      |	Выборка.Серия КАК Серия,
		      |	Выборка.eancode КАК eancode,
		      |	Выборка.barcode КАК barcode,
		      |	Выборка.КодПартии КАК КодПартии,
		      |	Выборка.ФирмаИсходная КАК ФирмаИсходная,
		      |	Выборка.ВидПоступления КАК ВидПоступления,
		      |	Выборка.ВидПоступленияИсходный КАК ВидПоступленияИсходный,
		      |	Выборка.Поставщик КАК Поставщик,
		      |	Выборка.ПоставщикИсходный КАК ПоставщикИсходный,
		      |	Выборка.ПоставщикКомитентВнутренний КАК ПоставщикКомитентВнутренний,
		      |	Выборка.НомерГТД КАК НомерГТД,
		      |	Выборка.qnt КАК qnt,
		      |	Выборка.КоличествоАрбитража КАК КоличествоАрбитража,
		      |	Выборка.pndsz КАК pndsz,
		      |	Выборка.pndsr КАК pndsr,
		      |	Выборка.ЦенаПроизводителя КАК ЦенаПроизводителя,
		      |	Выборка.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
		      |	Выборка.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДС,
		      |	Выборка.ЦенаЗакупБезНДСПоДаннымПоставщика КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
		      |	Выборка.ЦенаЗакуп КАК ЦенаЗакуп,
		      |	Выборка.ЦенаРознУпак КАК ЦенаРознУпак,
		      |	Выборка.СуммаРозн КАК СуммаРозн,
		      |	Выборка.ЦенаИндивидуальная КАК ЦенаИндивидуальная,
		      |	Выборка.СуммаЗакупБезНДС КАК СуммаЗакупБезНДС,
		      |	Выборка.СуммаЗакупНДС КАК СуммаЗакупНДС,
		      |	Выборка.СуммаЗакупНДСПоДаннымПоставщика КАК СуммаЗакупНДСПоДаннымПоставщика,
		      |	Выборка.СуммаЗакупСНДСПоДаннымПоставщика КАК СуммаЗакупСНДСПоДаннымПоставщика,
		      |	Выборка.СуммаЗакупБезНДСПоДаннымПоставщика КАК СуммаЗакупБезНДСПоДаннымПоставщика
		      |ИЗ
		      |	Выборка КАК Выборка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ Выборка";	
	//Иначе
	//	ТХТ = "ВЫБРАТЬ
	//	      |	Поступление.Товар КАК _Товар,
	//	      |	Поступление.Товар.Код КАК КодТовара,
	//	      |	Поступление.КоэффициентРазбивки,
	//	      |	ЕСТЬNULL(Поступление.Производитель.Код, 0) КАК КодПроизводителя,
	//	      |	Поступление.Производитель.Наименование КАК НаименованиеПроизводителя,
	//	      |	Поступление.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
	//	      |	Поступление.Производитель КАК Производитель,
	//	      |	Поступление.Коэфф КАК КоэффициентОприходования,
	//	      |	Поступление.СрокГодности КАК СрокГодности,
	//	      |	ВЫБОР
	//	      |		КОГДА Поступление.Серия = """"
	//	      |			ТОГДА ""*""
	//	      |		ИНАЧЕ Поступление.Серия
	//	      |	КОНЕЦ КАК Серия,
	//	      |	Поступление.Баркод КАК eancode,
	//	      |	Партии.Наименование КАК barcode,
	//	      |	Партии.ФирмаИсходная КАК ФирмаИсходная,
	//		  |	Партии.ВидПоступления КАК ВидПоступления,
	//		  |	Партии.ВидПоступленияИсходный КАК ВидПоступленияИсходный,
	//		  |	Партии.Поставщик,
	//		  |	Партии.ПоставщикИсходный,
	//		  |	Партии.ПоставщикКомитентВнутренний,
	//	      |	Поступление.КодПартии КАК КодПартии,
	//	      |	Поступление.НомерГТД КАК НомерГТД,
	//	      |	Поступление.Количество КАК qnt,
	//		  |	Поступление.КоличествоАрбитраж*Поступление.Коэфф КАК КоличествоАрбитража,
	//	      |	Поступление.СтавкаНДСЗакуп КАК pndsz,
	//	      |	Поступление.СтавкаНДСРозн КАК pndsr,
	//	      |	Поступление.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
	//	      |	Поступление.ЦенаПроизводителя КАК ЦенаПроизводителя,
	//	      |	Поступление.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
	//	      |	Поступление.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
	//	      |	ВЫРАЗИТЬ(Поступление.ЦенаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакуп,
	//	      |	Поступление.СуммаЗакупБезНДС КАК СуммаЗакупБезНДСПоДаннымПоставщика,
	//	      |	Поступление.НДСЗакуп КАК СуммаЗакупНДСПоДаннымПоставщика,
	//	      |	Поступление.СуммаЗакуп КАК СуммаЗакупСНДСПоДаннымПоставщика,
	//	      |	(ВЫРАЗИТЬ(Поступление.СуммаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) - Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупНДС,
	//	      |	Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
	//	      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК КодМНН,
	//	      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
	//	      |	Поступление.НомерСтроки,
	//	      |	Поступление.ЦенаРозн*Поступление.КоэффициентРазбивки/Поступление.Коэфф как ЦенаРознУпак,
	//		  |	Поступление.ЦенаРозн*Поступление.Количество как СуммаРозн,			  
	//	      |	ВЫБОР
	//	      |		КОГДА Поступление.Товар.ЖНВЛС = ИСТИНА
	//	      |			ТОГДА 1
	//	      |		ИНАЧЕ 0
	//	      |	КОНЕЦ КАК ЦенаИндивидуальная
	//	      |ПОМЕСТИТЬ Выборка
	//	      |ИЗ
	//	      |	Документ.УЗ_ВводОстатков.Товар КАК Поступление
	//	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	//	      |		ПО (Партии.Код = Поступление.КодПартии)
	//	      |ГДЕ
	//	      |	Поступление.Ссылка = &Ссылка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	      |	Выборка.КодМНН,
	//	      |	Выборка.НаименованиеМНН
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |ГДЕ
	//	      |	Выборка.КодМНН > 0
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	      |	Выборка.КодПроизводителя КАК КодПроизводителя,
	//	      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
	//	      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |ГДЕ
	//	      |	Выборка.КодПроизводителя > 0
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ
	//	      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
	//	      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	//		  |	СУММА(Выборка.СуммаЗакупБезНДС + Выборка.СуммаЗакупНДС) КАК СуммаЗакупСНДС,
	//	      |	СУММА(Выборка.СуммаЗакупНДСПоДаннымПоставщика) КАК СуммаЗакупНДСПоДаннымПоставщика,
	//	      |	СУММА(Выборка.СуммаЗакупСНДСПоДаннымПоставщика) КАК СуммаЗакупСНДСПоДаннымПоставщика,
	//	      |	СУММА(Выборка.СуммаЗакупБезНДСПоДаннымПоставщика) КАК СуммаЗакупБезНДСПоДаннымПоставщика,
	//		  |	СУММА(Выборка.СуммаРозн) КАК СуммаРознСНДС
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ
	//	      |	Выборка._Товар,
	//	      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
	//	      |	Выборка._Товар.Код КАК КодТовара,
	//	      |	Выборка._Товар.Наименование КАК Наименование,
	//	      |	Подстрока(Выборка._Товар.МеждународноеНазвание,1,150) КАК МеждународноеНазвание,
	//	      |	Выборка.КодПроизводителя,
	//	      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
	//	      |	Выборка.КодМНН КАК КодМНН,
	//	      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
	//	      |	Выборка._Товар.ПККН КАК ПККН,
	//	      |	ВЫБОР
	//	      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
	//	      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
	//	      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
	//	      |	КОНЕЦ КАК ДатаВводаВАП,
	//	      |	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
	//	      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
	//	      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
	//	      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
	//	      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
	//	      |	Выборка.КоэффициентРазбивки
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ
	//	      |	Выборка.НомерСтроки,
	//	      |	Выборка.КодТовара,
	//	      |	Выборка.КоэффициентРазбивки,
	//	      |	Выборка.КодПроизводителя,
	//	      |	Выборка.КоэффициентОприходования,
	//	      |	Выборка.СрокГодности,
	//	      |	Выборка.Серия,
	//	      |	Выборка.eancode,
	//	      |	Выборка.barcode,
	//	      |	Выборка.КодПартии,
	//	      |	Выборка.ФирмаИсходная,
	//		  |	Выборка.ВидПоступления,
	//		  |	Выборка.ВидПоступленияИсходный,
	//		  |	Выборка.Поставщик,
	//		  |	Выборка.ПоставщикИсходный,	
	//		  |	Выборка.ПоставщикКомитентВнутренний,
	//	      |	Выборка.НомерГТД,
	//	      |	Выборка.qnt,
	//		  |	Выборка.КоличествоАрбитража,
	//	      |	Выборка.pndsz,
	//	      |	Выборка.pndsr,
	//	      |	Выборка.ЦенаПроизводителя,
	//	      |	Выборка.ЦенаГосРегистрации,
	//	      |	Выборка.ЦенаЗакупБезНДС,
	//	      |	Выборка.ЦенаЗакупБезНДСПоДаннымПоставщика,
	//	      |	Выборка.ЦенаЗакуп,
	//	      |	Выборка.ЦенаРознУпак,
	//		  |	Выборка.СуммаРозн,
	//	      |	Выборка.ЦенаИндивидуальная,
	//	      |	Выборка.СуммаЗакупБезНДС,
	//	      |	Выборка.СуммаЗакупНДС,
	//	      |	Выборка.СуммаЗакупНДСПоДаннымПоставщика,
	//	      |	Выборка.СуммаЗакупСНДСПоДаннымПоставщика,
	//	      |	Выборка.СуммаЗакупБезНДСПоДаннымПоставщика
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |УНИЧТОЖИТЬ Выборка";	
	//	
	//КонецЕсли;
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("СкладКод",Склад.Код);
	Результат				= Запрос.ВыполнитьПакет();	   
	ВыборкаМНН				= Результат[1].Выбрать();
	ВыборкаПроизводители	= Результат[2].Выбрать();
	ВыборкаИтоги			= Результат[3].Выбрать();
	ВыборкаТовары			= Результат[4].Выбрать();
	ВыборкаСтроки			= Результат[5].Выбрать();
	
	ВыборкаИтоги.Следующий(); //на первую строку
	

	//Контрагент = ПоставщикКомитент;
	//КодКонтрагента =  Формат(Контрагент.Код,"ЧГ=0");
	//
	//СчетКонтрагента = Контрагент.ОсновнойСчет;
	//КодСчетаКонтрагента = СчетКонтрагента.Код;
	//КодБанка = СчетКонтрагента.Банк.Код; 
	//
	//ЕстьСчет = Истина;
	//Если СчетКонтрагента = Неопределено или СчетКонтрагента.Пустая() или КодСчетаКонтрагента = Неопределено Тогда
	//	ЕстьСчет = ЛОЖЬ;
	//КонецЕсли;
	
	ЕстьКомитент = ЗначениеЗаполнено(ПоставщикКомитент);
	Если ЕстьКомитент Тогда
		КонтрагентКомитент = ПоставщикКомитент;
		КодКомитента =  Формат(КонтрагентКомитент.Код,"ЧГ=0");
		
		СчетКомитента = КонтрагентКомитент.ОсновнойСчет;
		КодСчетаКомитента = СчетКомитента.Код;
		КодБанкаКомитента = СчетКомитента.Банк.Код; 
		
		ЕстьСчетКомитента = Истина;
		Если СчетКомитента = Неопределено или СчетКомитента.Пустая() или КодСчетаКомитента = Неопределено Тогда
			ЕстьСчетКомитента = ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//ВременныйКаталог = КаталогВременныхФайлов();
	//ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//ИмяФайла = ""+Формат(КодАптеки,"ЧЦ=4; ЧВН=; ЧГ=0") + "_rest_" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy.ЧЧ.мм.сс") + ".xml";
	
	//ЗаписьXML = Новый ТекстовыйДокумент;
	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");	

	//ЗаписьXML = Новый ТекстовыйДокумент;
	
	
	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ЗаписатьСтроку("<document>"); 

	
	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "IN_RESTS"); 
	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 
	Если ЕстьКомитент Тогда
		Если ЕстьСчетКомитента Тогда
			ЗаписьXML.ЗаписатьСтроку("<bank>");
			ЗаписьXML.ЗаписатьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "bic",	Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
			ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКомитента.Банк.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "corr_acc",	СокрЛП(СчетКомитента.Банк.КоррСчет));
			ЗаписьXML.ЗаписатьСтроку("</row>");				
			ЗаписьXML.ЗаписатьСтроку("</bank>"); //конец записи секции  "bank"
			
			ЗаписьXML.ЗаписатьСтроку("<bank_account>");
			ЗаписьXML.ЗаписатьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКомитента)),"ЧГ=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
			ЗаписатьЭлементXML(ЗаписьXML, "descr",			СокрЛП(СчетКомитента.Наименование));
			ЗаписатьЭлементXML(ЗаписьXML, "num",				СокрЛП(СчетКомитента.НомерСчета));
			ЗаписатьЭлементXML(ЗаписьXML, "id_contragent",	КодКомитента);
			ЗаписатьЭлементXML(ЗаписьXML, "id_bank",			Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0"));
			ЗаписьXML.ЗаписатьСтроку("</row>");
			ЗаписьXML.ЗаписатьСтроку("</bank_account>"); //конец записи секции  "bank"		
		КонецЕсли;			
	
		ЗаписьXML.ЗаписатьСтроку("<contragent>");
				ЗаписьXML.ЗаписатьСтроку("<row>");
					 ЗаписатьЭлементXML(ЗаписьXML, "id", КодКомитента); 			
				     ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", ""+Число(КонтрагентКомитент.ПометкаУдаления)); 
					 ЗаписатьЭлементXML(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ПолнНаименование))); 
					 ЗаписатьЭлементXML(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.Наименование)));
					 ЗаписатьЭлементXML(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ИНН)));
					 ЗаписатьЭлементXML(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.КПП)));
					 ЗаписатьЭлементXML(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ОГРН)));
					 ЗаписатьЭлементXML(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ОКПО)));
					 ЗаписатьЭлементXML(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.Адрес)));
					 ЗаписатьЭлементXML(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.АдресГрузополучателя)));
					 Если ЕстьСчетКомитента Тогда
					 	ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКомитента)),"ЧГ=0") );
					 Иначе
						ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", "0" );
					 КонецЕсли;
					 ЗаписатьЭлементXML(ЗаписьXML, "type_tax", "" + Число(КонтрагентКомитент.КонтрагентНаУСН)); 
					 ЗаписатьЭлементXML(ЗаписьXML, "e_mail", ""); 
					 ЗаписатьЭлементXML(ЗаписьXML, "phone", "");
					 ЗаписатьЭлементXML(ЗаписьXML, "director", "");
					 ЗаписатьЭлементXML(ЗаписьXML, "bookkeeper", "");
				ЗаписьXML.ЗаписатьСтроку("</row>");				
		ЗаписьXML.ЗаписатьСтроку("</contragent>"); //конец записи секции  "contragent"
	КонецЕсли;		
		
		ЗаписьXML.ЗаписатьСтроку("<inter_name>");
			Пока ВыборкаМНН.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(ВыборкаМНН.КодМНН,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаМНН.НаименованиеМНН)));
				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</inter_name>"); //конец записи секции  "mnn"
		
		
		ЗаписьXML.ЗаписатьСтроку("<producer>");
			Пока ВыборкаПроизводители.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаПроизводители.КодПроизводителя,"ЧГ=0; ЧН=0") );
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаПроизводители.ПометкаУдаленияПроизводителя)); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаПроизводители.НаименованиеПроизводителя)));
				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
				   ЗаписатьЭлементXML(ЗаписьXML, "id_country",	"0");
				   ЗаписатьЭлементXML(ЗаписьXML, "is_importer",	"0");
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</producer>"); //конец записи секции  "producer"

		ЗаписьXML.ЗаписатьСтроку("<goods>");
			Пока ВыборкаТовары.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				  ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаТовары.КодТовара,"ЧГ=0"));
				  ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Формат(Число(ВыборкаТовары.ПометкаУдаления),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_active",	"" + Формат(Число(ВыборкаТовары.УчаствуетВАП),"ЧН=0"));
				  ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Наименование)));
				  ЗаписатьЭлементXML(ЗаписьXML, "descr_ecr",	"");
				  ЗаписатьЭлементXML(ЗаписьXML, "descr_en",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.МеждународноеНазвание)));
				  ЗаписатьЭлементXML(ЗаписьXML, "article",		""); 
				  ЗаписатьЭлементXML(ЗаписьXML, "p_vat",		Формат(ВыборкаТовары.Ставка,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ap",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ftg",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_main","0"); //основная группа
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_general","0"); //обобщенная группа
				  ЗаписатьЭлементXML(ЗаписьXML, "id_brand_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_trade_name","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_inter_name",Формат(ВыборкаТовары.КодМНН,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_category_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_sub_category_goods",Формат(ВыборкаТовары.КодПодкатегории,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_med_form",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_destination","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_prod_form",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_storing_place",Формат(ВыборкаТовары.МестоХраненияКод,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_life_important","" + Формат(Число(ВыборкаТовары.ЖНВЛС),"ЧН=0"));  
				  ЗаписатьЭлементXML(ЗаписьXML, "is_social_important","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(ВыборкаТовары.ПККН),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_mandatory",		"" + Число(ВыборкаТовары.ОбязательноеНаличие)); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_prescription","" + Формат(Число(ВыборкаТовары.ОтпускПоРецепту),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "date_in", 		Формат(ВыборкаТовары.ДатаВВодаВАП,"ДФ=dd.MM.yyyy")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "producer_country_descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Страна)));
				  //ЗаписатьЭлементXML(ЗаписьXML, "id_group",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "is_season",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "id_exclusive_post","0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "id_unit",		"0");
				  //ЗаписатьЭлементXML(ЗаписьXML, "cost_r",		Формат(ВыборкаТовары.РозничнаяЦена,"ЧРД=.; ЧН=0; ЧГ=0")); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "cost_i",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "min_part_ship","0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "min_qnt",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "max_qnt",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "is_discount",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "p_discount",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "max_qnt_sale",	Формат(ВыборкаТовары.МаксКоличествоВОдинЧек,"ЧГ=0; ЧН=0"));
				  //ЗаписатьЭлементXML(ЗаписьXML, "is_course",	"0");
				  //ЗаписатьЭлементXML(ЗаписьXML, "course_qnt",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "min_part_dem",	"0"); 
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</goods>"); //конец записи секции  "good"

		ЗаписьXML.ЗаписатьСтроку("<gpart>");
			Пока ВыборкаСтроки.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				
					//Если  ВыборкаСтроки.coeffp = 1  Тогда
					//	Если  ВыборкаСтроки.КоэффициентПоУмолчанию = 1 Тогда
					//		coeff		= 1; //если даю упаковку, то здесь коэфф разбивки
					//		coeffp		= 1; 
					//	Иначе
					//		coeff		= ВыборкаСтроки.КоэффициентПоУмолчанию; //если оприходовали мелкими, но товар разбивочный, то здесь 1
					//		coeffp		= ВыборкаСтроки.КоэффициентПоУмолчанию; //тут коэффициент для приведения
					//	КонецЕсли;
					//Иначе
					//	coeff		= ВыборкаСтроки.coeffp; //если даю упаковку, то здесь коэфф разбивки
					//	coeffp		= 1; 
					//КонецЕсли;				
				
				    ЗаписатьЭлементXML(ЗаписьXML, "id"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
  					ЗаписатьЭлементXML(ЗаписьXML, "id_goods", Формат(ВыборкаСтроки.КодТовара,"ЧГ=0") ); 
  					ЗаписатьЭлементXML(ЗаписьXML, "id_producer", Формат(ВыборкаСтроки.КодПроизводителя,"ЧГ=0; ЧН=0") );
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_pur",Формат(ВыборкаСтроки.pndsz,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_rtl"	,Формат(ВыборкаСтроки.pndsr,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_reg_wo_vat_pack",Формат(ВыборкаСтроки.ЦенаГосРегистрации,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_prod_wo_vat_pack"	,Формат(ВыборкаСтроки.ЦенаПроизводителя,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "dvalid_supp"		,Формат(ВыборкаСтроки.СрокГодности,"ДФ=dd.MM.yyyy")); 
					ЗаписатьЭлементXML(ЗаписьXML, "series"		,КорректировкаСпецСимволов(ВыборкаСтроки.Серия)); 
					ЗаписатьЭлементXML(ЗаписьXML, "eancode_supp"		,ВыборкаСтроки.eancode); 
					ЗаписатьЭлементXML(ЗаписьXML, "barcode"		,ВыборкаСтроки.barcode); 
					ЗаписатьЭлементXML(ЗаписьXML, "stcdn"		,КорректировкаСпецСимволов(ВыборкаСтроки.НомерГТД)); 
					ЗаписатьЭлементXML(ЗаписьXML, "certif"		,""); 
					ЗаписатьЭлементXML(ЗаписьXML, "back_margin"	,"0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "coeff"			,Формат(ВыборкаСтроки.КоэффициентРазбивки,"ЧГ=0; ЧН=0") ) ;
					ЗаписатьЭлементXML(ЗаписьXML, "guid"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакупБезНДС/ВыборкаСтроки.КоэффициентОприходования,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДС*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack_supp" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДСПоДаннымПоставщика*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакуп/ВыборкаСтроки.КоэффициентОприходования,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакуп*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаРознУпак/ВыборкаСтроки.КоэффициентРазбивки,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat_pack"	,Формат(ВыборкаСтроки.ЦенаРознУпак,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "is_individual_price"	,	ВыборкаСтроки.ЦенаИндивидуальная); 
  					ЗаписатьЭлементXML(ЗаписьXML, "is_opened","0");
					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent_initial"		,Формат(ВыборкаСтроки.ПоставщикИсходный,"ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond_initial",	"" + Формат(ВыборкаСтроки.ВидПоступленияИсходный,"ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_firm_initial"		,	Формат(ВыборкаСтроки.ФирмаИсходная,"ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent"		,	Формат(ВыборкаСтроки.Поставщик,"ЧН=0; ЧГ=0")); 
					Если ВыборкаСтроки.ПоставщикКомитентВнутренний > 0 Тогда
						ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond"		,	Формат(ВыборкаСтроки.ВидПоступленияИсходный,"ЧН=0; ЧГ=0"));
					Иначе
						ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond"		,	Формат(ВыборкаСтроки.ВидПоступления,"ЧН=0; ЧГ=0")); 
					КонецЕсли;

					ЗаписатьЭлементXML(ЗаписьXML, "id_consignor"		,	Формат(ВыборкаСтроки.ПоставщикКомитентВнутренний,"ЧГ=0")); 
					
					
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</gpart>"); //конец записи секции  "str"
		
		
		ЗаписьXML.ЗаписатьСтроку("<hdr>");
			     ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"200"); 
				 ЗаписатьЭлементXML(ЗаписьXML, "id_doc_subtype", "0");// + ?(ТипНакладной.Пустая(),0,Перечисления.ТипыНакладной.Индекс(ТипНакладной))); 
				 ЗаписатьЭлементXML(ЗаписьXML, "guid", XMLСтрока(Ссылка)); 
				 ЗаписатьЭлементXML(ЗаписьXML, "status",	"1"); 
				 ЗаписатьЭлементXML(ЗаписьXML, "ndoc",		Формат(Номер,"ЧГ=0")); 
				 ЗаписатьЭлементXML(ЗаписьXML, "ddoc",		Формат(Дата,"ДФ=dd.MM.yyyy"));
				 //ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond",	"" + Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовара)); 
				 //ЗаписатьЭлементXML(ЗаписьXML, "id_firm",	Формат(Документ.Фирма.Код,"ЧГ=0"));
				 //ЗаписатьЭлементXML(ЗаписьXML, "id_dep",	Формат(Документ.Склад.Код,"ЧГ=0"));	
				 //ЗаписатьЭлементXML(ЗаписьXML, "id_dep_section", "0");
				 //ЗаписатьЭлементXML(ЗаписьXML, "id_contragent", КодКонтрагента);	
				 //ЗаписатьЭлементXML(ЗаписьXML, "ndoc_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерНакл)));
				 //ЗаписатьЭлементXML(ЗаписьXML, "ddoc_contragent",	Формат(ВхДатаНакл,"ДФ=dd.MM.yyyy"));
				 //ЗаписатьЭлементXML(ЗаписьXML, "nsf_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерСФ)));
				 //ЗаписатьЭлементXML(ЗаписьXML, "dsf_contragent",	Формат(ВхДатаСФ,"ДФ=dd.MM.yyyy"));				 
				 ЗаписатьЭлементXML(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));	
				 ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep", 			КорректировкаСпецСимволов(СокрЛП(КомментарийАптеки)));	
				 //ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"" + ?(Документ.ТипНакладной.Пустая(),0,Перечисления.ТипыНакладной.Индекс(Документ.ТипНакладной))); 
				 
				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat",	Формат(ВыборкаИтоги.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_w_vat",	Формат(ВыборкаИтоги.СуммаЗакупСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat",	Формат(ВыборкаИтоги.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat_supp"	,Формат(ВыборкаИтоги.СуммаЗакупНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat_supp"	,Формат(ВыборкаИтоги.СуммаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				 
				 //ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_vat",	Формат(ВыборкаИтоги.СуммаРознНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat",	Формат(ВыборкаИтоги.СуммаРознСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
	  	ЗаписьXML.ЗаписатьСтроку("</hdr>"); //конец записи секции  "hdr"
		
		ВыборкаСтроки.Сбросить();
		ЗаписьXML.ЗаписатьСтроку("<str>");
		Пока ВыборкаСтроки.Следующий() Цикл
			ЗаписьXML.ЗаписатьСтроку("<row>");
				ЗаписатьЭлементXML(ЗаписьXML, "guid_gpart"	,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "idx"			,Формат(ВыборкаСтроки.НомерСтроки,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "qnt"			,Формат(ВыборкаСтроки.qnt*ВыборкаСтроки.КоэффициентОприходования,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "qnt_b"			,"0");
				ЗаписатьЭлементXML(ЗаписьXML, "qnt_a"			,Формат(ВыборкаСтроки.КоличествоАрбитража,"ЧГ=0; ЧН=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "qnt_n"			,"0");
				
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat"	,Формат(ВыборкаСтроки.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat_supp"	,Формат(ВыборкаСтроки.СуммаЗакупНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat_supp"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat"	,Формат(ВыборкаСтроки.СуммаРозн,"ЧРД=.; ЧН=0; ЧГ=0"));
				
				
				//ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep"		,"");
			ЗаписьXML.ЗаписатьСтроку("</row>");
		КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</str>"); //конец записи секции  "str"
		
		
	
	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "document"
	
	ЗаписьXML.Закрыть();
	ЗаписьXML = Новый ЧтениеТекста(ИмяФайла,"windows-1251");
	
	//ВесьТекст = ЗаписьXML.ПолучитьТекст();
	ВесьТекст = ЗаписьXML.Прочитать();
	ЗаписьXML.Закрыть();	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());	
		#КонецЕсли
	КонецПопытки;

	
	КодСклада = Склад.Код;
	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
		Если КодСчетчика = -1 Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.КодАптеки = Склад.Код;
	МЗ.ТипУпаковки = "IN_RESTS";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "inrests_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.Записать();	
	
	Если Статус <> Перечисления.СтатусПрихода.ВыгруженНаАптеку Тогда	
		Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку");		
	
	Возврат Истина;
	
КонецФункции


Функция ВыгрузитьВАптеку() Экспорт
	
	
	Результат = ВыгрузитьВАптекуНаНовомПО();
	
	Возврат Результат;
	

	
КонецФункции
 
Функция АвтоматическаяРасценка_Успешно()  Экспорт
	//==================<Автоматическая расценка прихода товара>===================GtG====21.11.2008
	// запускается 1 раз при первичном проведении документа.
	// При возникновении ошибок при расценке- дальнейшее проведение и расценка только вручную
	Успешно=Истина;
	Если ОМ6_ЕстьЦеныПоРасценке(Ссылка)=Ложь Тогда
		ОМ6_ЗапуститьАвтоматическуюРасценкуДокумента (ЭтотОбъект);
		ЭтотОбъект.Прочитать();
		Если ОшибкиРасценки.Количество()>0 Тогда
			#Если Клиент Тогда 
				Предупреждение(""+Ссылка+" Есть ошибки по расценке товара! Документ не проводится!",2);
			#КонецЕсли	
			Успешно=Ложь;
			//Для каждого стр из ОшибкиРасценки Цикл
			//	Если стр.Партия.Пустая() Тогда
			//		  //пох
			//	Иначе
			//		Предупреждение(""+ЭтотОбъект+" Есть ошибки по расценке товара! Документ не проводится!",3);
			//		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			//		Успешно=Ложь;
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	Возврат Успешно;
КонецФункции	//АвтоматическаяРасценка

 
Процедура МО_ПроверкаЦеныПроизводителя(ТСД) Экспорт
	 //цена ропизводителя не должна превышать цены госрегистрации (если они обе есть)
		Если ТСД.ЦенаГосРегистрации<>0 и ТСД.ЦенаПроизводителя<>0 Тогда
				Если ТСД.ЦенаПроизводителя>ТСД.ЦенаГосРегистрации Тогда
					#Если Клиент Тогда
						Сообщить("Строка №"+ТСД.НомерСТРОКИ +"   "+ТСД.Товар+" --  цена производителя больше цены госрегистрации!",СтатусСообщения.Внимание);
					#КонецЕсли
				КонецЕсли; 
		КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНаЗаполнение(Отказ)
	
	
	 Если ВидВводаОстатков.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран вид поступления товара! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	

	Если НЕ Товар.Найти(0,"Коэфф") = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с коэффициентами =0!
					|Это недопустимо!
					|Очевидно проблемы с единицами товаров.");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;

	Если НЕ Товар.Найти(0,"ЦенаЗакупБезНДС") = Неопределено Тогда
		// Есть строки с 0-ми
		#Если Клиент Тогда
			Сообщить("В документе есть строки без закуп. цены!
			|Это недопустимо!
			|Укажите цену закупочную!");
		#КонецЕсли
		ПроведениеЗакончено=Истина;

		Отказ = ИСТИНА;
		Возврат ;
	КонецЕсли;

	
	
	Если Склад.ТипСклада = Перечисления.ТипыМХ.Розн  Тогда
		Если НЕ Товар.Найти(0,"ЦенаРозн") = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с Ценой розничной =0!
				|Это недопустимо!
				|Недорасцененные документы не проводятся!
				|");
			#КонецЕсли
			ПроведениеЗакончено=Истина;

			Отказ = ИСТИНА;
			ВОЗВРАТ ;
		КонецЕсли;	
	КонецЕсли;
	
	 
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("СкладКод",Склад.Код);
	Запрос.УстановитьПараметр("ФирмаКод",Фирма.Код);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("ПоставщикКомитент",ПоставщикКомитент);
	
	Если ЗначениеЗаполнено(ПоставщикКомитент) Тогда
		Запрос.УстановитьПараметр("ВидПоступленияПорядок",Перечисления.ВидыПоступленияТоваров.Индекс(Перечисления.ВидыПоступленияТоваров.Комиссия));
	Иначе
		Запрос.УстановитьПараметр("ВидПоступленияПорядок",Перечисления.ВидыПоступленияТоваров.Индекс(Перечисления.ВидыПоступленияТоваров.Покупка));
	КонецЕсли;
	Запрос.УстановитьПараметр("КачествоТовараПорядок",Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.ХорошийТовар));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&СкладКод КАК СкладКод,
	               |	&ФирмаКод КАК ФирмаКод,
	               |	&ВидПоступленияПорядок КАК ВидПоступленияПорядок,
	               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
	               |	ТЧТовар.КодПартии КАК ПартияКод,
	               |	ТЧТовар.КодТовара КАК ТоварКод,
	               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
	               |	ТЧТовар.Коэфф,
	               |	ТЧТовар.СтавкаНДСЗакуп,
	               |	ТЧТовар.ЦенаЗакуп,
	               |	ТЧТовар.СуммаЗакупБезНДСРасчет как СуммаЗакупБезНДС ,
				   |	ТЧТовар.СуммаОстаткаОкругления
	               |ПОМЕСТИТЬ ВтТовары
	               |ИЗ
	               |	Документ.УЗ_ВводОстатков.Товар КАК ТЧТовар
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.СкладКод КАК СкладКод,
	               |	ВТТовары.ФирмаКод КАК ФирмаКод,
	               |	ВТТовары.ВидПоступленияПорядок КАК ВидПоступленияПорядок,
	               |	ВТТовары.ПартияКод,
	               |	ВТТовары.ТоварКод,
	               |	ВТТовары.СтавкаНДСЗакуп,
	               |	ВТТовары.СуммаЗакупБезНДС,
	               |	ВТТовары.Количество,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	&Дата КАК Период
	               |ИЗ
	               |	ВтТовары КАК ВТТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.СкладКод,
	               |	ВТТовары.ФирмаКод,
	               |	ВТТовары.КачествоТовараПорядок,
	               |	ВТТовары.ВидПоступленияПорядок,
	               |	ВТТовары.СтавкаНДСЗакуп КАК СтавкаНДС,
	               |	СУММА(ВТТовары.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	&Дата КАК Период,
	               |	СУММА(ВТТовары.СуммаОстаткаОкругления) КАК СуммаОкругления
	               |ИЗ
	               |	ВтТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.СкладКод,
	               |	ВТТовары.ФирмаКод,
	               |	ВТТовары.ВидПоступленияПорядок,
	               |	ВТТовары.КачествоТовараПорядок,
	               |	ВТТовары.СтавкаНДСЗакуп
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТТовары";
				   
			Результат = Запрос.ВыполнитьПакет();	   
			Если ВидВводаОстатков = Перечисления.ВидыВводаОстатков.Арбитраж Тогда
				ТаблицыДвижений.Вставить("УЗ_ПартииАрбитраж",                   Результат[1].Выгрузить());
			Иначе
				ТаблицыДвижений.Вставить("УЗ_Партии",	                        Результат[1].Выгрузить());
			КонецЕсли;
			ТаблицыДвижений.Вставить("УЗ_ТоварныйОтчет",			                    Результат[2].Выгрузить());
				   
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	 
	 
	 ПроведениеЗакончено=ложь;
	 
	 ПриходТовараСервер.УЗ_ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ);
	 
	 Если Отказ = Истина Тогда
		 #Если Клиент Тогда
			 Сообщить("Не удалось обновить данные в партиях документа. Документ непроведен",СтатусСообщения.ОченьВажное);
		 #КонецЕсли		
		 Возврат;
	 КонецЕсли;
	 
	
	ТаблицыДвижений = Новый Структура();
	
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	
	Движения.УЗ_ПартииАрбитраж.Записывать = Истина;
	Движения.УЗ_ПартииАрбитраж.Очистить();
	Движения.УЗ_Партии.Записывать = Истина;
	Движения.УЗ_Партии.Очистить();

	
	Если ВидВводаОстатков = Перечисления.ВидыВводаОстатков.Арбитраж Тогда
		Таблица= ТаблицыДвижений.УЗ_ПартииАрбитраж;
		Если Таблица.Количество() > 0 Тогда
			Движения.УЗ_ПартииАрбитраж.Загрузить(Таблица);	
		КонецЕсли;
	Иначе
		Таблица= ТаблицыДвижений.УЗ_Партии;
		Если Таблица.Количество() > 0 Тогда
			Движения.УЗ_Партии.Загрузить(Таблица);	
		КонецЕсли;
	КонецЕсли;
	
	
	Таблица= ТаблицыДвижений.УЗ_ТоварныйОтчет;
	Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
	Движения.УЗ_ТоварныйОтчет.Загрузить(Таблица);
	
	
	ЕстьПартионныеТовары= ЛОЖЬ;
	ПроведениеЗакончено=Истина;	

	
	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	
	НеудачныйВводНаОсновании = Истина;
	
	//Для каждого стр Из Товар Цикл
	//	
	//	стр.Партия = ОМ1_СоздатьПартиюТовара(стр.Товар).Ссылка;
	//
	//КонецЦикла; 
	
	//ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЭтоНовый() Тогда
		Если Год(Дата)>Год(Ссылка.Дата) Тогда
			УстановитьНовыйНомер();
		КонецЕсли;
	КонецЕсли;
	
	
	СуммаДок =Товар.Итог("СуммаЗакуп");
	СуммаДокРозн = Товар.Итог("СуммаРозн");
	
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьНаЗаполнение(Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
		Если Отказ = Истина Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;

	ОбщегоНазначения.ЗаписатьСменуСостоянияДокумента(Ссылка,РежимЗаписи,ПометкаУдаления);
	
	
	
КонецПроцедуры



НеудачныйВводНаОсновании=Ложь;
ПроведениеЗакончено=Ложь;

