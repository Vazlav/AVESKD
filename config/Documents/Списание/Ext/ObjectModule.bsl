

 //============================================================================ GtG ===
 Функция ПроверкаНаНули  (Парам) 
     // Назначение:
 	// Проверяет строки товара на наличие строк с нулевыми значениями
 	// 
     // 
 	//--------------------------------------------------------------------------------
	Для Каждого ТекСтрокаТовар Из Товар Цикл
		Если ТекСтрокаТовар[Парам]=0 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЦикла; 	
	
	Возврат Истина;
 КонецФункции
 //============================================================================ GtG ===
 
 
 Функция ПроверитьОстатки()
	
	ТекстЗапроса = "ВЫБРАТЬ 
	|ВложенныйЗапрос.Номенклатура, 
	|ВложенныйЗапрос.Партия КАК Партия, 
	|ВложенныйЗапрос.КоличествоСписываемое, 
	|ТоварыНаСкладахОстатки.КолвоОстаток 
	|ИЗ 
	|(ВЫБРАТЬ 
	|	ВнутреннийСписаниеТовары.Товар КАК Номенклатура, 
	|	ВнутреннийСписаниеТовары.Партия КАК Партия, 
	|	СУММА(ВнутреннийСписаниеТовары.КоличествоФакт *ВнутреннийСписаниеТовары.Коэфф) КАК КоличествоСписываемое 
	| ИЗ 
	|	Документ.Списание.Товар КАК ВнутреннийСписаниеТовары 
	| ГДЕ 
	|	ВнутреннийСписаниеТовары.Ссылка = &Ссылка 
	| СГРУППИРОВАТЬ ПО 
	|	ВнутреннийСписаниеТовары.Товар, 
	|	ВнутреннийСписаниеТовары.Партия 
	|) КАК ВложенныйЗапрос 
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ПартииЖНВЛС.Остатки(&МоментВремениДокумента, 
	|						Склад = &ВыбСклад
	|						И 
	|						Товар В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|									ВнутреннийСписаниеТоварыДляОтбора.Товар 
	|								ИЗ 
	|									Документ.Списание.Товар КАК ВнутреннийСписаниеТоварыДляОтбора 
	|								ГДЕ 
	|								ВнутреннийСписаниеТоварыДляОтбора.Ссылка = &Ссылка)
	|						И
	|						Партия В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|									ВнутреннийСписаниеТоварыДляОтбора.Партия 
	|								ИЗ 
	|									Документ.Списание.Товар КАК ВнутреннийСписаниеТоварыДляОтбора 
	|								ГДЕ 
	|								ВнутреннийСписаниеТоварыДляОтбора.Ссылка = &Ссылка)) КАК ТоварыНаСкладахОстатки 
	|ПО 
	|	ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Товар И ВложенныйЗапрос.Партия = ТоварыНаСкладахОстатки.Партия
	|ГДЕ ВложенныйЗапрос.КоличествоСписываемое > ТоварыНаСкладахОстатки.КолвоОстаток";
	
	Запрос = Новый  Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("МоментВремениДокумента",МоментВремени());
	Запрос.УстановитьПараметр("ВыбСклад",ЭтотОбъект.Ссылка.Склад.Ссылка);
	Рез=Запрос.Выполнить();
	ТЗ=Рез.Выгрузить();	
	Если ТЗ.Количество() > 0 Тогда
		Для каждого стр Из ТЗ Цикл
			Сообщить("По товару " + стр.Номенклатура + "  партия = " + стр.Партия + " превышено количество .");
		КонецЦикла; 	
		Возврат Ложь;
	КонецЕсли;
	
    Возврат Истина;
		
КонецФункции
 
 //============================================================================ GtG ===
 Процедура ПриходРасходПоРегистрам  (ТипДвижения) 
     // Назначение:
 	// Проведение документа по регистрам 
 	// либо приход , ибо расход
	// по указанному складу
 	//--------------------------------------------------------------------------------

 	
    Для Каждого ТекСтрокаТовар Из Товар Цикл
		
	
		//----------------------------< Партионные товары (ЖНВЛС/СВЛС) >--------------------------------GtG---
		
			ДвижениеП = Движения.ПартииЖНВЛС.Добавить();
			ДвижениеП.ВидДвижения=ТипДвижения; //ВидДвиженияНакопления.Приход;
			ДвижениеП.Период = Дата;
			ДвижениеП.Товар = ТекСтрокаТовар.Товар;
			ДвижениеП.Склад = Склад;
			ДвижениеП.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
			ДвижениеП.Партия = ТекСтрокаТовар.Партия ;
			ДвижениеП.Фирма= Склад.Фирма;
			ДвижениеП.ВидОперации=Перечисления.ВидыОпераций.СписаниеТМЦ;

			
			ДвижениеП.Колво = ТекСтрокаТовар.КоличествоФакт*ТекСтрокаТовар.Коэфф;
			ДвижениеП.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
			ДвижениеП.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
			ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар.СуммаРозн;
			ДвижениеП.СуммаРознНДС = ТекСтрокаТовар.НДСРозн;
			

	КонецЦикла;
	// записываем движения регистров
	//Движения.ПартииЖНВЛС.Записать();

	
	//----------------------------< По регитсру учета по ставке НДС >--------------------------------GtG---
	ТЗПодСвертку = ТОвар.Выгрузить();
	
	ТЗПодСвертку.Свернуть("СтавкаНДС","СуммаЗакуп,НДСЗакуп,СуммаРозн,НДСРозн");
	
	Для Каждого ТекСтрокаТовар Из ТЗПодСвертку Цикл
		// регистр ОстаткиПоСтНДСПоСкладам Приход
		Движение = Движения.ОстаткиПоСтНДСПоСкладам.Добавить();
		Движение.ВидДвижения =ТипДвижения;// ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Склад = Склад;
		Движение.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
		Движение.Фирма= Склад.Фирма;
		Движение.ВидОперации=Перечисления.ВидыОпераций.СписаниеТМЦ;

		
		
		//Движение.Колво = ТекСтрокаТовар.КоличествоФакт;
		Движение.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
		Движение.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
		Движение.СуммаРознСНДС = ТекСтрокаТовар.СуммаРозн;
		Движение.СуммаРознНДС = ТекСтрокаТовар.НДСРозн;
	КонецЦикла;
	// записываем движения регистров
	//Движения.ОстаткиПоСтНДСПоСкладам.Записать();

 
    
  КонецПроцедуры
  //============================================================================ GtG ===
  


Процедура ОбработкаПроведения(Отказ, Режим)
		
	#Если Клиент Тогда
	ОчиститьСообщения(); 
	#КонецЕсли
	
	Если ПричинаСписания.Пустая() Тогда
		Сообщить("Укажите причину списания! Документ НЕ проведен.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Если ПроверитьОстатки() = Ложь Тогда  //перенесено в процедуру ПередЗаписью
	//	Сообщить("Документ не проведен!");
	//	Отказ = ИСТИНА;
	//	ВОЗВРАТ ;	
	//КонецЕсли;	
	
	//============================< Проверка на коэфф=0  >================================GtG===
	Если ПроверкаНаНули("Коэфф")=Ложь Тогда
		// Есть строки с 0-ми коэффициентами
		Сообщить("В документе есть строки с коэффициентами =0!
		|Это недопустимо!
		|Очевидно проблемы с единицами товаров.");
		Отказ = ИСТИНА;
		ВОЗВРАТ ;
	КонецЕсли;
	
	Если ПроверкаНаНули("ЦенаЗакуп")=Ложь Тогда
		// Есть строки с 0-ми
		Сообщить("В документе есть строки без закуп. цены!
		|Это недопустимо!
		|Укажите цену закупочную!");
		Отказ = ИСТИНА;
		ВОЗВРАТ ;
	КонецЕсли;

	
		
	//----------------------------< по складу отправителю >--------------------------------GtG---
	// расход из регистров: ОстаткиТовараПоСкладам
	//                    	ПартииЖНВЛС
	//                    	ОстаткиПоСтНДСПоСкладам
	ПриходРасходПоРегистрам  (ВидДвиженияНакопления.Расход);                    
	//-------------------------------------------------------------------------------------------
	#Если Клиент Тогда
		ОМ15_ОчисткаРезерваДокумента  (ЭтотОбъект.Ссылка );// должна быть во всех документах, которые касаются резерва количества товара
	#КонецЕсли
	
	
	//ТСО 25.07.2014 	
	НаборЗаписей = РегистрыСведений.ЛимитыСписанияПоСрокамГодности.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	
	ТекДанные = ОМ_ТСО.РасчетЛимитаСписанияПоАптеке(Склад);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Склад = Склад;
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекДанные);
	
	НаборЗаписей.Записать();	
	
	// запись в регистр ДокументыСписанияКОтправке
	Если ПроинформироватьАптеку Тогда
		
		НаборЗаписей = РегистрыСведений.ДокументыСписанияКОтправке.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ДокументСписания.Установить(Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументСписания = Ссылка;
		
		НаборЗаписей.Записать();
		
		//ПроинформироватьАптеку = Ложь;
		
	КонецЕсли;
	//*ТСО
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//ТСО 11.07.2014
	#Если Клиент Тогда
		Если Проведен Тогда
			Если ПараметрыСеанса.ТекущийСотр.Администратор=Ложь Тогда
				ВведенныйПароль = "";
				ВвестиСтроку(ВведенныйПароль, "Введите пароль на изменение", 300, Ложь);
				Если ВведенныйПароль = "" Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Если ВведенныйПароль <> "123123" Тогда
					Предупреждение("Введен неправильный пароль. Документ не записан.");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли	
	//*ТСО
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда 
		//---------------<Во всех других режимах дает ошибку>---------------------------// GtG // 09.04.2013 13:58:18
		// В случае если пытаться распровести или записать без проведения документ на момент времени, когда на остатках нет 
		// како-го либо товара срабатывала лишняя проверка и неверно определялась ошибочная ситуация с отрицательным остатком.
		
		//Если ПроверитьОстатки() = Ложь Тогда
		//	Сообщить("Документ не проведен!");
		//	Отказ = ИСТИНА;
		//	ВОЗВРАТ ;	
		//КонецЕсли;
		
		//Казаков А. Ю. { 25.01.2015
		КрайнийСтатус	= КрайнийСтатус();
		Если Не КрайнийСтатус = "POST" Тогда 
			Сообщить("Данный докуиент на текущий момент не проведен в аптеке, поэтому проведение запрещено!
					|Сначала проведите документ в аптеке и дождитесь обмена.", СтатусСообщения.Важное);
			Отказ	= 1;
		КонецЕсли;
		//Казаков А. Ю. }
		
	КонецЕсли;
	
	
	ЗаписатьДействияВИсториюДокумента(Изменения,РежимЗаписи,ПометкаУдаления);
	
	//ТСО 11.07.2014
	Если РасчетыЛимитаСписания.Количество() = 0 Тогда
		// Рассчитываем лимит только если он не был рассчитан ранее
		// В дальнейшем пользователь может его пересчитать, только нажав на соотв. кнопку
		РасчетЛимитаСписания();
		ПроинформироватьАптеку = Истина;
		
	КонецЕсли;
	
	РаспределениеНедостач();
	
КонецПроцедуры

//ТСО 11.07.2014
Процедура РасчетЛимитаСписания() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Лимиты.СуммаЛимита,
	|	Лимиты.НачалоПериодаРасчета,
	|	Лимиты.КонецПериодаРасчета,
	|	Лимиты.КоэффициентРасчета,
	|	Лимиты.ВыручкаЗаПериод,
	|	Лимиты.СписанияЗаПериодЗаСчетОрганизации,
	|	Лимиты.СписанияЗаПериодЗаСчетМОЛ,
	|	Лимиты.СписанияЗаПериодОбоснованные
	|ИЗ
	|	РегистрСведений.ЛимитыСписанияПоСрокамГодности КАК Лимиты
	|ГДЕ
	|	Лимиты.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	СуммаЛимита = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаЛимита = ВыборкаДетальныеЗаписи.СуммаЛимита; 		
	КонецЦикла;
	
	ТекущийЛимитСписания = СуммаЛимита;
	
	НовСтр = РасчетыЛимитаСписания.Добавить();
	НовСтр.ДатаРасчета = ТекущаяДата();
	ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаДетальныеЗаписи);
	
КонецПроцедуры

Процедура РаспределениеНедостач() Экспорт

	СуммаСписанияЗаСчетМОЛ = Макс(СуммаДок - ТекущийЛимитСписания - ОбоснованноеПревышениеЛимита, 0);
	СуммаСписанияЗаСчетОрганизации = СуммаДок - СуммаСписанияЗаСчетМОЛ;

КонецПроцедуры
//*ТСО



//Казаков А. Ю. { 25.01.2015
Функция КрайнийСтатус() Экспорт 
	
	КрайнийСтатус	= "";
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда 
		Возврат КрайнийСтатус;
	КонецЕсли;
	
	ТекстЗапроса	= "ВЫБРАТЬ ПЕРВЫЕ 1
	            	  |	ИзмененияПоступленийВАптеке.Документ,
	            	  |	ИзмененияПоступленийВАптеке.ИД КАК ИД,
	            	  |	ИзмененияПоступленийВАптеке.ДатаИзменения,
	            	  |	ИзмененияПоступленийВАптеке.Действие,
	            	  |	ИзмененияПоступленийВАптеке.ТабНомер,
	            	  |	ИзмененияПоступленийВАптеке.ФИО,
	            	  |	ИзмененияПоступленийВАптеке.НомерДокАптеки
	            	  |ИЗ
	            	  |	РегистрСведений.ИзмененияПоступленийВАптеке КАК ИзмененияПоступленийВАптеке
	            	  |ГДЕ
	            	  |	ИзмененияПоступленийВАптеке.Документ = &Документ
	            	  |
	            	  |УПОРЯДОЧИТЬ ПО
	            	  |	ДатаИзменения УБЫВ";
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
	ИзмененияДокумента	= Запрос.Выполнить().Выгрузить();
	Если ИзмененияДокумента.Количество() > 0 Тогда 
		КрайнийСтатус	= СокрЛП(ИзмененияДокумента[0].Действие);
	КонецЕсли;
	
	Возврат КрайнийСтатус;
	
КонецФункции
//Казаков А. Ю. }
