
Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ДобавитьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ДобавитьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("</" + Имя + ">");
	
КонецПроцедуры

 

Процедура ПоместитьВОбменСкладБух() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	                  |	209 КАК ВидДокумента,
	                  |	УЗ_ВозвратТовара.Фирма.Код КАК КодФирмы,
	                  |	""СсылкуТекстомНужноВычислитьПоСсылкеНаДокумент"" КАК СсылкаТХТ,
	                  |	УЗ_ВозвратТовара.Дата КАК ДатаОчередиСклад,
	                  |	УЗ_ВозвратТовара.Склад.Код КАК КодСклада,
	                  |	УЗ_ВозвратТовара.Поставщик.Код КАК КодКонтрагента,
	                  |	УЗ_ВозвратТовара.Ссылка КАК Объект,
	                  |	УЗ_ВозвратТовара.Проведен КАК Проведен,
	                  |	УЗ_ВозвратТовара.ПометкаУдаления КАК ПомеченНаУдаление,
	                  |	"""" КАК ОшибкаПриЗагрузке,
	                  |	ЕСТЬNULL(Фирмы.Код, УЗ_ВозвратТовара.Фирма.Код) КАК ФирмаКомитент
	                  |ИЗ
	                  |	Документ.УЗ_ВозвратТовара КАК УЗ_ВозвратТовара
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Фирмы КАК Фирмы
	                  |		ПО УЗ_ВозвратТовара.ПоставщикКомитент = Фирмы.ФирмаКакПоставщик
	                  |			И (УЗ_ВозвратТовара.ПоставщикКомитент.Ссылка ЕСТЬ НЕ NULL )
	                  |ГДЕ
	                  |	УЗ_ВозвратТовара.Ссылка = &Ссылка
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	Объект"; // Сгенерировано в GtG's Консоль запросов. 18.04.2016 18:57:30
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	
	
	Пока Выб.Следующий() Цикл
		
		
		
		МЗ=РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз,Выб);
		МЗ.СсылкаТХТ=Выб.Объект.УникальныйИдентификатор();
		МЗ.Записать();
		
		Если Выб.ФирмаКомитент<> Выб.КодФирмы Тогда
			МЗ=РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(мз,Выб);
			МЗ.СсылкаТХТ=Выб.Объект.УникальныйИдентификатор();
			МЗ.КодФирмы=Выб.ФирмаКомитент;
			МЗ.Записать();
		Конецесли;
		
	КонецЦикла;
	
	
КонецПроцедуры
 
Функция ВыгрузитьВАптеку() Экспорт
	
	Если НЕ проведен и НЕ Статус = Перечисления.СтатусыСписания.Аннулирован Тогда
		#Если Клиент Тогда
			Предупреждение("Документ непроведен. Выполнение не может быть продолжено");
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
			

	ЗаписьXML = Новый ТекстовыйДокумент;
	
	
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ДобавитьСтроку("<document>"); 

	
	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "OUT_SUPP"); 
	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 

		
		ЗаписьXML.ДобавитьСтроку("<hdr>");
			     ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"209"); 
				 ЗаписатьЭлементXML(ЗаписьXML, "guid",	ИДДокументаАптеки); 
				 ЗаписатьЭлементXML(ЗаписьXML, "ddoc",	Формат(Дата,"ДФ=dd.MM.yyyy"));
				 Если Статус = Перечисления.СтатусыСписания.Аннулирован Тогда
				 	ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Аннулирован)); 
				 Иначе
					ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Проведен)); 
				 КонецЕсли;
	  	ЗаписьXML.ДобавитьСтроку("</hdr>"); //конец записи секции  "hdr"
		
	
	ЗаписьXML.ДобавитьСтроку("</document>"); //конец записи секции  "document"
	ВесьТекст = ЗаписьXML.ПолучитьТекст();
	ЗаписьXML.Очистить();
	ЗаписьXML = Неопределено;
	
	КодСклада = Склад.Код;
	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
		Если КодСчетчика = -1 Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.КодАптеки = Склад.Код;
	МЗ.ТипУпаковки = "OUT_SUPP";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "out_supp_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.ИдентификаторДокумента = ИДДокументаАптеки;
	МЗ.Записать();	
	
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку");
	
	Возврат Истина;
	
	
КонецФункции


Процедура ПроверитьНаЗаполнение(Отказ)
	
	Если ВидОперацииВозврата.Пустая() Тогда
		#Если Клиент Тогда
			Сообщить("Не указан вид операции возврата! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		#КонецЕсли	
		Отказ = Истина;
		Возврат;
	Иначе
		Если ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.Недовоз 
			или ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.Неопределено
			или ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.Арбитражный Тогда
			#Если Клиент Тогда
				Сообщить("Вид операции возврата не может быть <Недовоз> или <Неопределено>! Документ не проведен",СтатусСообщения.ОченьВажное);	 
			#КонецЕсли	
			Отказ = Истина;
			Возврат;
		КонецЕсли;			
	КонецЕсли;
	
	Если Поставщик.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не указан поставщик! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	

	Если НЕ Товар.Найти(0,"Коэфф") = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с коэффициентами =0!
					|Это недопустимо!
					|Очевидно проблемы с единицами товаров.");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;

	Если НЕ Товар.Найти(0,"ЦенаЗакупБезНДС") = Неопределено Тогда
		// Есть строки с 0-ми
		#Если Клиент Тогда
			Сообщить("В документе есть строки без закуп. цены!
			|Это недопустимо!
			|Укажите цену закупочную!");
		#КонецЕсли
		ПроведениеЗакончено=Истина;

		Отказ = ИСТИНА;
		Возврат ;
	КонецЕсли;

	
КонецПроцедуры


Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	
	Если ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.ОсновнойТовар Тогда
		КачествоТовараПорядок = Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.ХорошийТовар);
	ИначеЕсли ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.Брак Тогда
		КачествоТовараПорядок = Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.Брак);
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("СкладКод",Склад.Код);
	Запрос.УстановитьПараметр("ФирмаКод",Фирма.Код);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("КачествоТовараПорядок",КачествоТовараПорядок);
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&СкладКод КАК СкладКод,
	               |	&ФирмаКод КАК ФирмаКод,
	               |	Партии.ВидПоступления КАК ВидПоступленияПорядок,
	               |	ТЧТовар.КодПартии КАК ПартияКод,
	               |	ТЧТовар.КодТовара КАК ТоварКод,
	               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
	               |	ТЧТовар.Коэфф,
	               |	ТЧТовар.СтавкаНДС,
	               |	Партии.СтавкаНДСЗакуп,
	               |	ТЧТовар.СуммаЗакупБезНДС
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.УЗ_ВозвратТовара.Товар КАК ТЧТовар
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	               |		ПО (Партии.Код = ТЧТовар.КодПартии)
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.СкладКод КАК СкладКод,
	               |	ВТТовары.ФирмаКод КАК ФирмаКод,
	               |	ВТТовары.ВидПоступленияПорядок КАК ВидПоступленияПорядок,
	               |	ВТТовары.ПартияКод,
	               |	ВТТовары.ТоварКод,
	               |	ВТТовары.СтавкаНДСЗакуп,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.СуммаЗакупБезНДС,
	               |	ВТТовары.Количество,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	&Дата КАК Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.СкладКод,
	               |	ВТТовары.ФирмаКод,
	               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
	               |	ВТТовары.ВидПоступленияПорядок,
	               |	ВТТовары.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ВТТовары.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	&Дата КАК Период,
	               |	0 КАК СуммаОкругления
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.СкладКод,
	               |	ВТТовары.ФирмаКод,
	               |	ВТТовары.ВидПоступленияПорядок,
	               |	ВТТовары.СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТТовары";
				   
			Результат = Запрос.ВыполнитьПакет();	  
			
			Если ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.ОсновнойТовар Тогда 
				ТаблицыДвижений.Вставить("УЗ_Партии", Результат[1].Выгрузить());
			ИначеЕсли ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.Брак Тогда
				ТаблицыДвижений.Вставить("УЗ_ПартииБрак", Результат[1].Выгрузить());
			КонецЕсли;
			
			ТаблицыДвижений.Вставить("УЗ_ТоварныйОтчет", Результат[2].Выгрузить());

				   
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	 
	 
	ТаблицыДвижений = Новый Структура();
	
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	Движения.УЗ_ПартииБрак.Записывать = Истина;
	Движения.УЗ_Партии.Записывать = Истина;
	Движения.УЗ_ПартииБрак.Очистить();
	Движения.УЗ_Партии.Очистить();
	
	
	Если ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.ОсновнойТовар Тогда 
		Таблица= ТаблицыДвижений.УЗ_Партии;
		Движения.УЗ_Партии.Загрузить(Таблица);	
	ИначеЕсли ВидОперацииВозврата = Перечисления.ВидыОперацийВозврата.Брак Тогда
		Таблица= ТаблицыДвижений.УЗ_ПартииБрак;
		Движения.УЗ_ПартииБрак.Загрузить(Таблица);		
	КонецЕсли;
	
	Таблица= ТаблицыДвижений.УЗ_ТоварныйОтчет;
	Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
	Движения.УЗ_ТоварныйОтчет.Загрузить(Таблица);
	
	Если СтатусДокАптеки = Перечисления.СтатусДокАптеки.КОбработкеОфисом Тогда
		ВыгрузитьВАптеку();
	КонецЕсли;
	
	ПоместитьВОбменСкладБух();
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДатаПоследнегоИзменения = ТекущаяДата();
	
	Если НЕ ЭтоНовый() Тогда
		Если Год(Дата)>Год(Ссылка.Дата) Тогда
			УстановитьНовыйНомер();
		КонецЕсли; 			
	КонецЕсли;
	
	
	СуммаЗакупБезНДС = Товар.Итог("СуммаЗакупБезНДС");
	СуммаЗакупПоставщика = Товар.Итог("СуммаЗакупПоставщика");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьНаЗаполнение(Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		
		Если СтатусДокАптеки = Перечисления.СтатусДокАптеки.КОбработкеОфисом Тогда
			Статус = Перечисления.СтатусыСписания.Проведен;
		ИначеЕсли СтатусДокАптеки = Перечисления.СтатусДокАптеки.Проведен Тогда
			Статус = Перечисления.СтатусыСписания.Завершен;
		КонецЕсли;

		
		Если СтатусВСистемеЭДО.Пустая() Тогда
			ВидыЭД = Новый Массив;
			ВидыЭД.Добавить(Перечисления.ВидыЭлектронныхДокументов.ТоварнаяНакладнаяНаВозврат);			
			СтатусВСистемеЭДО = ОМ_ТСО.ПолучитьНачальныйСтатусЭДО(ВидыЭД, Фирма, Поставщик);
		КонецЕсли;			

	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
		Если Отказ = Истина Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	
	
	ОбщегоНазначения.ЗаписатьСменуСостоянияДокумента(Ссылка,РежимЗаписи,ПометкаУдаления);
	
КонецПроцедуры
