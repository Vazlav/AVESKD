Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	Если Значение = "" Тогда
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ЗаписатьСтроку("</" + Имя + ">");
	
КонецПроцедуры

Процедура УстановитьИндивидуальныеЦены()
	
	
	СкладКод = Склад.Код;
	ТекДата = ТекущаяДата();
	Для каждого стр из Товар Цикл
		Если стр.Количество > 0 Тогда
			МЗ = РегистрыСведений.РозничныеЦеныПоПартиям.СоздатьМенеджерЗаписи();
			МЗ.АптекаКод = СкладКод;
			МЗ.ТоварКод = стр.КодТовараНовый;
			МЗ.ПартияКод = стр.КодПартииНовый;
			МЗ.ДатаУстановки =  ТекДата;
			МЗ.Цена = стр.ЦенаИндивидуальнаяНовая;
			МЗ.Коэффициент = стр.КоэффициентРазбивкиНовый;
			МЗ.СтавкаНДС = стр.СтавкаНДСНовая;
			МЗ.Документ = Ссылка;
			МЗ.НомерДокумента = Номер;
			//МЗ.Уценка = Уценка;
			МЗ.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СгенерироватьНовыеПартии()
	
	//Пара = Новый Соответствие;
	спрПартии = Справочники.УЗ_Партии;
	
	Для каждого стр из Товар Цикл
		Если стр.КоличествоНовый > 0 Тогда
			//СуществующийКодПартии = Пара.Получить(стр.КодПартии);
			//Если НЕ СуществующийКодПартии = Неопределено Тогда
			//	стр.КодПартииНовый = СуществующийКодПартии; 
			//	Продолжить;
			//КонецЕсли;
			Если стр.КодПартииНовый = 0 Тогда
				ИсходнаяПартия = спрПартии.НайтиПоКоду(стр.КодПартии);
				НоваяПартия = ИсходнаяПартия.Скопировать();
				НоваяПартия.УстановитьНовыйКод();
				НоваяПартия.КодТовара		= стр.КодТовараНовый;
				НоваяПартия.СтавкаНДСРозн	= стр.СтавкаНДСНовая;
				НоваяПартия.ЦенаЗакуп		= стр.ЦенаЗакуп;
				НоваяПартия.ЦенаЗакупБезНДСРасчет = стр.ЦенаЗакупБезНДСНовая;
				НоваяПартия.К = стр.КоэффициентРазбивкиНовый;
				//Барданов А.Ю. 21.03.2019 ENT-1418 +++ 
				Если ИсходнаяПартия.ПартияРодительКод = 0 Тогда
					НоваяПартия.ПартияРодительКод = стр.КодПартии; 
				Иначе
					НоваяПартия.ПартияРодительКод = ИсходнаяПартия.ПартияРодительКод;
				КонецЕсли;
				//---  
				НоваяПартия.Записать();
				стр.КодПартииНовый = НоваяПартия.Код;
				//Пара.Вставить(стр.КодПартии,стр.КодПартииНовый);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЕстьНулеваяЦена()
	ЕстьНуль = Ложь;
	Для каждого стр из Товар Цикл
		Если стр.ЦенаИндивидуальнаяНовая = 0 и стр.Количество > 0 Тогда
			#Если Клиент Тогда
				Сообщить("по товару "+стр.Товар + " не установлена розничная цена.");	
			#КонецЕсли
			ЕстьНуль = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьНуль;
	
КонецФункции

Функция ПолучитьВыборкуНовыхТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Товары.ТоварНовый,
	               |	Товары.ТоварНовый.ПометкаУдаления КАК ПометкаУдаления,
	               |	Товары.ТоварНовый.Код КАК КодТовара,
	               |	Товары.ТоварНовый.Наименование КАК Наименование,
	               |	ПОДСТРОКА(Товары.ТоварНовый.МеждународноеНазвание, 1, 150) КАК МеждународноеНазвание,
	               |	0 КАК КодПроизводителя,
	               |	Товары.ТоварНовый.УчаствуетВАП КАК УчаствуетВАП,
	               |	Товары.ТоварНовый.МНН.Код КАК КодМНН,
	               |	Товары.ТоварНовый.ЖНВЛС КАК ЖНВЛС,
	               |	Товары.ТоварНовый.ПККН КАК ПККН,
	               |	ВЫБОР
	               |		КОГДА Товары.ТоварНовый.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
	               |		ИНАЧЕ Товары.ТоварНовый.ДатаВводаВАП
	               |	КОНЕЦ КАК ДатаВводаВАП,
	 		  	   // НДС20/18  - не требуется ЕНТ-1094
	               |	Товары.ТоварНовый.СтавкаНДС.Ставка КАК Ставка,
	               |	Товары.ТоварНовый.РозничнаяЦена КАК РозничнаяЦена,
	               |	Товары.ТоварНовый.АптечныйОБ КАК ОбязательноеНаличие,
	               |	Товары.ТоварНовый.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
	               |	Товары.ТоварНовый.ОтпускПоРецепту КАК ОтпускПоРецепту,
	               |	Товары.ТоварНовый.Подкатегория.Код КАК КодПодкатегории,
	               |	Товары.ТоварНовый.ЕдиницаПоУмолчанию.К КАК КоэффициентРазбивки,
				   |	ЕСТЬNULL(Товары.ТоварНовый.Страна.Наименование,"""") как Страна
	               |ИЗ
	               |	Документ.УЗ_Трансформация.Товар КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Док
	               |	И Товары.КодТовара <> Товары.КодТовараНовый";
				   
	Запрос.УстановитьПараметр("Док",Ссылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Рез.Выбрать();
	КонецЕсли;
	

	
КонецФункции

Функция ВыгрузитьДокумент()
	
	
	ВыборкаТовары = ПолучитьВыборкуНовыхТоваров();
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");
	
	
	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ЗаписатьСтроку("<document>"); 

	
	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "IO_TRANSFORM"); 
	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 

		
		ЗаписьXML.ЗаписатьСтроку("<hdr>");
			     ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"218"); 
				 ЗаписатьЭлементXML(ЗаписьXML, "guid", ИДДокументаАптеки); 
				 Если СтатусТрансформации = Перечисления.СтатусыПереоценки.Аннулирован Тогда
				 	ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Аннулирован)); 
				 Иначе
					ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Проведен)); 
				КонецЕсли;
				Если НЕ СозданВАптеке Тогда
					ЗаписатьЭлементXML(ЗаписьXML, "ndoc",		Формат(Номер,"ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "ddoc",		Формат(Дата,"ДФ=dd.MM.yyyy"));	
				КонецЕсли;
				ЗаписатьЭлементXML(ЗаписьXML, "pos_qty",		Формат(Товар.Количество(),"ЧН=; ЧГ=0")); 
				//ЗаписатьЭлементXML(ЗаписьXML, "id_doc_subtype",	Формат(Перечисления.ПричиныПереоценки.Индекс(ПричинаПереоценки)," ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));	
				ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep", 			КорректировкаСпецСимволов(СокрЛП(КомментарийАптеки)));
				ЗаписатьЭлементXML(ЗаписьXML, "is_bo_created", 		Число(НЕ СозданВАптеке));	
	  	ЗаписьXML.ЗаписатьСтроку("</hdr>"); //конец записи секции  "hdr"
		
		Если НЕ СтатусТрансформации = Перечисления.СтатусыПереоценки.Аннулирован Тогда
			
			Если НЕ ВыборкаТовары = Неопределено Тогда
				ЗаписьXML.ЗаписатьСтроку("<goods>");
				Пока ВыборкаТовары.Следующий() Цикл
					ЗаписьXML.ЗаписатьСтроку("<row>");
					ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаТовары.КодТовара,"ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаТовары.ПометкаУдаления)); 
					ЗаписатьЭлементXML(ЗаписьXML, "is_active",	"" + Число(ВыборкаТовары.УчаствуетВАП));
					ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Наименование)));
					ЗаписатьЭлементXML(ЗаписьXML, "descr_ecr",	"");
					ЗаписатьЭлементXML(ЗаписьXML, "descr_en",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.МеждународноеНазвание)));
					ЗаписатьЭлементXML(ЗаписьXML, "article",		""); 
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat",		Формат(ВыборкаТовары.Ставка,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_group_ap",	"0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_group_ftg",	"0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_group_main","0"); //основная группа
					ЗаписатьЭлементXML(ЗаписьXML, "id_group_general","0"); //обобщенная группа
					ЗаписатьЭлементXML(ЗаписьXML, "id_brand_goods","0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_trade_name","0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_inter_name",Формат(ВыборкаТовары.КодМНН,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_category_goods","0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_sub_category_goods",Формат(ВыборкаТовары.КодПодкатегории,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_med_form",	"0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_destination","0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_prod_form",	"0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_storing_place","0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "is_life_important","" + Формат(Число(ВыборкаТовары.ЖНВЛС),"ЧН=0"));  
					ЗаписатьЭлементXML(ЗаписьXML, "is_social_important","0"); 
					ЗаписатьЭлементXML(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(ВыборкаТовары.ПККН),"ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "is_mandatory",		"" + Формат(Число(ВыборкаТовары.ОбязательноеНаличие),"ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "is_prescription","" + Формат(Число(ВыборкаТовары.ОтпускПоРецепту),"ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "date_in", 		Формат(ВыборкаТовары.ДатаВВодаВАП,"ДФ=dd.MM.yyyy")); 
					ЗаписатьЭлементXML(ЗаписьXML, "producer_country_descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Страна)));
					//ЗаписатьЭлементXML(ЗаписьXML, "id_group",		"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "is_season",	"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "id_exclusive_post","0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "id_unit",		"0");
					//ЗаписатьЭлементXML(ЗаписьXML, "cost_r",		Формат(ВыборкаТовары.РозничнаяЦена,"ЧРД=.; ЧН=0; ЧГ=0")); 
					//ЗаписатьЭлементXML(ЗаписьXML, "cost_i",		"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "min_part_ship","0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "min_qnt",		"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "max_qnt",		"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "is_discount",	"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "p_discount",	"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "max_qnt_sale",	Формат(ВыборкаТовары.МаксКоличествоВОдинЧек,"ЧГ=0; ЧН=0"));
					//ЗаписатьЭлементXML(ЗаписьXML, "is_course",	"0");
					//ЗаписатьЭлементXML(ЗаписьXML, "course_qnt",	"0"); 
					//ЗаписатьЭлементXML(ЗаписьXML, "min_part_dem",	"0"); 
					ЗаписьXML.ЗаписатьСтроку("</row>");
				КонецЦикла;
				ЗаписьXML.ЗаписатьСтроку("</goods>"); //конец записи секции  "good"
				
			КонецЕсли;
			
			
			ЗаписьXML.ЗаписатьСтроку("<str>");
			Для каждого ВыборкаСтроки из Товар Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				ЗаписатьЭлементXML(ЗаписьXML, "id_goods_new"	,Формат(ВыборкаСтроки.КодТовараНовый,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "guid_gpart"	,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "guid_gpart_new"	,Формат(ВыборкаСтроки.КодПартииНовый,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "id_gpart"		,Формат(ВыборкаСтроки.КодПартииАптеки,"ЧГ=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "qnt"				,Формат(ВыборкаСтроки.Количество*ВыборкаСтроки.Коэфф,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "qnt_new"			,Формат(ВыборкаСтроки.КоличествоНовый*ВыборкаСтроки.Коэфф,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "coeff"			,Формат(ВыборкаСтроки.КоэффициентРазбивки,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "coeff_new"		,Формат(ВыборкаСтроки.КоэффициентРазбивкиНовый,"ЧГ=0; ЧН=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat_new"	,Формат(ВыборкаСтроки.ЦенаИндивидуальнаяНовая/ВыборкаСтроки.КоэффициентРазбивкиНовый,"ЧРД=.; ЧН=0; ЧГ=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat_new"	,Формат((ВыборкаСтроки.ЦенаЗакупБезНДСНовая/ВыборкаСтроки.КоэффициентРазбивкиНовый)*ВыборкаСтроки.КоличествоНовый,"ЧРД=.; ЧН=0; ЧГ=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat_new"	,Формат((ВыборкаСтроки.ЦенаИндивидуальнаяНовая/ВыборкаСтроки.КоэффициентРазбивкиНовый)*ВыборкаСтроки.КоличествоНовый,"ЧРД=.; ЧН=0; ЧГ=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "p_vat_rtl_new"		,Формат(ВыборкаСтроки.СтавкаНДСНовая,"ЧН=0; ЧГ=0")); 

				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
			ЗаписьXML.ЗаписатьСтроку("</str>"); //конец записи секции  "str"
		КонецЕсли;
	
	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "document"
	ЗаписьXML.Закрыть();
	ЗаписьXML = Новый ЧтениеТекста(ИмяФайла,"windows-1251");
	ВесьТекст = ЗаписьXML.Прочитать();
	ЗаписьXML.Закрыть();	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());	
		#КонецЕсли
	КонецПопытки;

	
	КодСклада = Склад.Код;
	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
		Если КодСчетчика = -1 Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.КодАптеки = Склад.Код;
	МЗ.ТипУпаковки = "IO_TRANSFORM";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "io_transform_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.ИдентификаторДокумента = ИДДокументаАптеки;
	МЗ.Записать();	
	
	Если НЕ СтатусТрансформации = Перечисления.СтатусыПереоценки.Аннулирован Тогда
		СтатусТрансформации = Перечисления.СтатусыПереоценки.Выгружен;
	КонецЕсли;
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку");		
	
	Выгружен = Истина;
	
	Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьВАптеку() Экспорт 
	
	Если НЕ СтатусТрансформации = Перечисления.СтатусыПереоценки.Аннулирован Тогда
		Если СгенерироватьНовыеПартии() = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьНулеваяЦена() Тогда
		#Если Клиент Тогда
			Предупреждение("В документе есть нулевые цены. Документ не может быть выгружен в аптеку!");	
		#КонецЕсли
		Возврат Ложь;	
	КонецЕсли;
	
	Рез = ВыгрузитьДокумент();
	Возврат Рез;
	
КонецФункции


Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("СкладКод",Склад.Код);
	Запрос.УстановитьПараметр("ФирмаКод",Склад.Фирма.Код);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("КачествоТовараПорядок",Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.ХорошийТовар));
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Дата КАК Период,
	               |	&СкладКод КАК СкладКод,
	               |	&ФирмаКод КАК ФирмаКод,
	               |	Партии.ВидПоступления КАК ВидПоступленияПорядок,
	               |	ТЧТовар.КодПартии КАК ПартияКод,
	               |	ТЧТовар.КодТовара КАК ТоварКод,
	               |	СУММА(ТЧТовар.Количество * ТЧТовар.Коэфф) КАК Количество,
	               |	ТЧТовар.Коэфф,
	               |	Партии.СтавкаНДСЗакуп,
	               |	СУММА(ТЧТовар.ЦенаЗакупБезНДС * ТЧТовар.Количество * ТЧТовар.Коэфф / ТЧТовар.КоэффициентРазбивки) КАК СуммаЗакупБезНДС,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	               |ИЗ
	               |	Документ.УЗ_Трансформация.Товар КАК ТЧТовар
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	               |		ПО (Партии.Код = ТЧТовар.КодПартии)
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |	И ТЧТовар.Количество > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Партии.ВидПоступления,
	               |	ТЧТовар.КодПартии,
	               |	ТЧТовар.КодТовара,
	               |	ТЧТовар.Коэфф,
	               |	Партии.СтавкаНДСЗакуп
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&Дата,
	               |	&СкладКод,
	               |	&ФирмаКод,
	               |	Партии.ВидПоступления,
	               |	ТЧТовар.КодПартииНовый,
	               |	ТЧТовар.КодТовараНовый,
	               |	СУММА(ТЧТовар.КоличествоНовый * ТЧТовар.КоэффНовый),
	               |	ТЧТовар.КоэффНовый,
	               |	Партии.СтавкаНДСЗакуп,
	               |	СУММА(ТЧТовар.ЦенаЗакупБезНДСНовая * ТЧТовар.КоличествоНовый * ТЧТовар.КоэффНовый / ТЧТовар.КоэффициентРазбивкиНовый),
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |ИЗ
	               |	Документ.УЗ_Трансформация.Товар КАК ТЧТовар
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	               |		ПО (Партии.Код = ТЧТовар.КодПартииНовый)
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |	И ТЧТовар.КоличествоНовый > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Партии.ВидПоступления,
	               |	ТЧТовар.КодПартииНовый,
	               |	ТЧТовар.КодТовараНовый,
	               |	ТЧТовар.КоэффНовый,
	               |	Партии.СтавкаНДСЗакуп
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Дата КАК Период,
	               |	&СкладКод КАК СкладКод,
	               |	&ФирмаКод КАК ФирмаКод,
	               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
	               |	Партии.ВидПоступления КАК ВидПоступленияПорядок,
	               |	Партии.СтавкаНДСРозн КАК СтавкаНДС,
	               |	СУММА(ТЧТовар.ЦенаЗакупБезНДС * ТЧТовар.Количество * ТЧТовар.Коэфф / ТЧТовар.КоэффициентРазбивки) КАК СуммаЗакупБезНДС,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	               |ИЗ
	               |	Документ.УЗ_Трансформация.Товар КАК ТЧТовар
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	               |		ПО (Партии.Код = ТЧТовар.КодПартии)
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |	И ТЧТовар.Количество > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Партии.ВидПоступления,
	               |	Партии.СтавкаНДСРозн
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&Дата,
	               |	&СкладКод,
	               |	&ФирмаКод,
	               |	&КачествоТовараПорядок,
	               |	Партии.ВидПоступления,
	               |	Партии.СтавкаНДСРозн,
	               |	СУММА(ТЧТовар.ЦенаЗакупБезНДСНовая * ТЧТовар.КоличествоНовый * ТЧТовар.КоэффНовый / ТЧТовар.КоэффициентРазбивкиНовый),
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |ИЗ
	               |	Документ.УЗ_Трансформация.Товар КАК ТЧТовар
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	               |		ПО (Партии.Код = ТЧТовар.КодПартииНовый)
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |	И ТЧТовар.КоличествоНовый > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Партии.ВидПоступления,
	               |	Партии.СтавкаНДСРозн";
				   
			Результат = Запрос.ВыполнитьПакет();	   
			ТаблицыДвижений.Вставить("УЗ_Партии",  			Результат[0].Выгрузить());
			ТаблицыДвижений.Вставить("УЗ_ТоварныйОтчет",  	Результат[1].Выгрузить());

				   
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если Склад.АптекаНаНовомПО Тогда
		
		ТаблицыДвижений = Новый Структура();
		ПодготовитьТаблицыДвижений(ТаблицыДвижений);
		

		Движения.УЗ_Партии.Записывать = Истина;
		Движения.УЗ_Партии.Загрузить(ТаблицыДвижений.УЗ_Партии);	
		
		Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
		Движения.УЗ_ТоварныйОтчет.Загрузить(ТаблицыДвижений.УЗ_ТоварныйОтчет);		
	    
		ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Проведение",ПараметрыСеанса.ТекущийСотр,"Проведение");

		УстановитьИндивидуальныеЦены();
		
		ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Установка цен",ПараметрыСеанса.ТекущийСотр,"Установка новых цен");
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		#Если Клиент Тогда
			Предупреждение("Не выбрана аптека. Выполнение не может быть продолжено");
		#КонецЕсли
		Отказ = истина;
	КонецЕсли;
	
	Для каждого стр из Товар Цикл
		
		Если стр.КодТовараНовый = 0 Тогда
			#Если Клиент Тогда
				Сообщить("по строке №" + стр.НомерСтроки + " не указана новая позиция товара" );
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтатусДокАптеки = Перечисления.СтатусДокАптеки.Проведен и РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		#Если Клиент Тогда
			Предупреждение("Проведение документа в офисе возможно только после проведения его в аптеке.");
		#КонецЕсли
		Отказ = истина;
	КонецЕсли;
	
	
	Если ЭтоНовый()  Тогда
		Если ПустаяСтрока(ИДДокументаАптеки) Тогда
			ДокСсылка = ПолучитьСсылкуНового();	
			Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
				ДокСсылка = Документы.УЗ_Трансформация.ПолучитьСсылку();	
				УстановитьСсылкуНового(ДокСсылка);
			КонецЕсли;
			ИДДокументаАптеки = XMLСтрока(ДокСсылка);
			
			Автор = ПараметрыСеанса.ТекущийСотр;
		КонецЕсли;
		
		СтатусТрансформации = Перечисления.СтатусыПереоценки.ОжидаетОбработки;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И СтатусДокАптеки = Перечисления.СтатусДокАптеки.Проведен Тогда
		СтатусТрансформации = Перечисления.СтатусыПереоценки.Завершен;
	КонецЕсли;

	ДатаПоследнегоИзменения = ТекущаяДата();
	
	ОбщегоНазначения.ЗаписатьСменуСостоянияДокумента(Ссылка,РежимЗаписи,ПометкаУдаления);
	
КонецПроцедуры



