Перем ПостроительУсловияПрименения;



Функция СгенерироватьНовыеПартии()
	
	Результат = Истина;
	ПустаяПартия = Справочники.Партии.ПустаяСсылка();
	Для каждого стр из Товар Цикл
		
		Если НЕ стр.ПартияНовая = ПустаяПартия Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПартияО=стр.Партия.Скопировать();
		НоваяПартияО.УстановитьНовыйКод();
		Если стр.Партия.ПартияРодитель.Пустая() Тогда
			НоваяПартияО.ПартияРодитель=стр.Партия;
		КонецЕсли;
		
		ПартияЗаписана = Ложь;
		Для н=0 по 4 Цикл
			Попытка
				НоваяПАртияО.Записать();
				ПартияЗаписана = Истина;
				Прервать;
			Исключение
				ОбщегоНазначения.Задержка(2);
			КонецПопытки;
		КонецЦикла;
		
		Если ПартияЗаписана = Истина Тогда
			стр.ПартияНовая = НоваяПартияО.Ссылка;
		Иначе
		    Результат = Ложь;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ДокументЗаписан = Ложь;
	Для н=0 По 3 Цикл
		
		Попытка
			Записать();
			ДокументЗаписан = Истина;
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ДокументЗаписан = Истина И Результат = Истина Тогда
	    Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции

Процедура ЗаполнитьФайлДанными(ФайлВыгрузки,Рез,СтруктураАидов,ТипДокумента)
	
	        AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
			AID = СтруктураАидов.ВнешнийАид;
			ФайлВыгрузки.Добавить();
			
			ФайлВыгрузки.DocType	= ТипДокумента    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.AID		= AID;
			ФайлВыгрузки.AIDEXT		= AIDEXT;
			ФайлВыгрузки.NDOC		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NBLOCK		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NSTR		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NField		= "ndoc";
			ФайлВыгрузки.TVAL		= "S";
			ФайлВыгрузки.Val		= Формат(Номер,"ЧГ=0");   //"S =    ;   //150,0);
			
			ФайлВыгрузки.Записать();
			//---------------<ddoc>---------------------------// GtG // 24.06.2013 20:53:48
			ФайлВыгрузки.Добавить();
			
			ФайлВыгрузки.DocType	= ТипДокумента    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.AID		= AID    ;   //"S =    ;   //30,0);
			ФайлВыгрузки.AIDEXT		= AIDEXT;
			ФайлВыгрузки.NDOC		= 1;   //"N =    ;   //15,0);
			ФайлВыгрузки.NBLOCK		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NSTR		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NField		= "ddoc";
			ФайлВыгрузки.TVAL		= "D";
			ФайлВыгрузки.Val		= Формат(Дата,"ДФ=yyyyMMddHHmmss");   //"S =    ;   //150,0);
			
			ФайлВыгрузки.Записать();
			
			//---------------<is_posting>---------------------------// GtG // 24.06.2013 20:53:48
			ФайлВыгрузки.Добавить();
			
			ФайлВыгрузки.DocType	= ТипДокумента    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.AID		= AID    ;   //"S =    ;   //30,0);
			ФайлВыгрузки.AIDEXT		= AIDEXT;
			ФайлВыгрузки.NDOC		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NBLOCK		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NSTR		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NField		= "is_posting";
			ФайлВыгрузки.TVAL		= "B";
			ФайлВыгрузки.Val		= Число(Проведен);   //"S =    ;   //150,0);
			
			ФайлВыгрузки.Записать();
			
			//---------------<is_deleted>---------------------------// GtG // 24.06.2013 20:53:48
			ФайлВыгрузки.Добавить();
			
			ФайлВыгрузки.DocType	= ТипДокумента    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.AID		= AID    ;   //"S =    ;   //30,0);
			ФайлВыгрузки.AIDEXT		= AIDEXT;
			ФайлВыгрузки.NDOC		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NBLOCK		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NSTR		= 1    ;   //"N =    ;   //15,0);
			ФайлВыгрузки.NField		= "is_deleted";
			ФайлВыгрузки.TVAL		= "B";
			ФайлВыгрузки.Val		= Число(ПометкаУдаления);   //"S =    ;   //150,0);
			
			ФайлВыгрузки.Записать();	
			НомерСтр = 0;
		    КоличествоКолонок = Рез.Колонки.Количество()-1;
			Для каждого стр из Рез Цикл
				НомерСтр = НомерСтр + 1;
				
				
				Для к=1 По КоличествоКолонок Цикл  //пробегаем по значениям полей в строке
					
					ФайлВыгрузки.Добавить();
					ФайлВыгрузки.DocType	= ТипДокумента    ;   //"N =    ;   //15,0);
					ФайлВыгрузки.AID		= AID    ;   //"S =    ;   //30,0);
					ФайлВыгрузки.AIDEXT		= AIDEXT;
					ФайлВыгрузки.NDOC		= 1    ;   //"N =    ;   //15,0);
					ФайлВыгрузки.NBLOCK		= 2    ;   //"N =    ;   //15,0);
					ФайлВыгрузки.NSTR		= НомерСтр    ;   //"N =    ;   //15,0);
					
					Колонка = Рез.Колонки.Получить(к);
					Значение = стр.Получить(к);
					
					Если Колонка.Имя = "id_good" Тогда
						ФайлВыгрузки.NField	="id_good";
						ФайлВыгрузки.TVAL 	="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧГ=0");
					ИначеЕсли Колонка.Имя = "coeff" Тогда
						ФайлВыгрузки.NField ="coeff";
						ФайлВыгрузки.TVAL	="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=0; ЧГ=0");
					ИначеЕсли Колонка.Имя = "conversion" Тогда
						ФайлВыгрузки.NField ="conversion";
						ФайлВыгрузки.TVAL ="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=0; ЧГ=0");
					ИначеЕсли Колонка.Имя = "qnt" Тогда
						ФайлВыгрузки.NField ="qnt";
						ФайлВыгрузки.TVAL ="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=0; ЧГ=0");	
					ИначеЕсли Колонка.Имя = "cost_r_w_nds_new" Тогда
						ФайлВыгрузки.NField ="cost_r_w_nds_new";
						ФайлВыгрузки.TVAL ="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
					ИначеЕсли Колонка.Имя = "cost_r_w_nds" Тогда
						ФайлВыгрузки.NField ="cost_r_w_nds";
						ФайлВыгрузки.TVAL ="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
					ИначеЕсли Колонка.Имя = "extpart" Тогда
						ФайлВыгрузки.NField ="extpart";
						ФайлВыгрузки.TVAL ="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=0; ЧГ=0");
					ИначеЕсли Колонка.Имя = "extpart_new" Тогда
						ФайлВыгрузки.NField ="extpart_new";
						ФайлВыгрузки.TVAL ="N";
						ФайлВыгрузки.Val =Формат(Значение,"ЧДЦ=0; ЧГ=0");						
					ИначеЕсли Колонка.Имя = "barcode" Тогда
						ФайлВыгрузки.NField ="barcode";
						ФайлВыгрузки.TVAL ="S";
						ФайлВыгрузки.Val =Строка(Значение);						
					КонецЕсли;
					ФайлВыгрузки.Записать();
				КонецЦикла;
				
				
			КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьВАптеку() Экспорт
	
	Если Склад.Делфи = Ложь Тогда  //старый формат и обмен
		ДатаВыгрузкиВАптеку=ТекущаяДата();
		
		
		ДБФ= Новый XBase;
		
		ДБФ.поля.Добавить("PART","S",15,0);
		ДБФ.поля.Добавить("PARTNEW","S",15,0);
		ДБФ.поля.Добавить("IDGOOD","N",11,0);
		ДБФ.поля.Добавить("IDPROD","N",11,0);
		ДБФ.поля.Добавить("SER","S",20,0);
		ДБФ.поля.Добавить("QNT","N",10,0);
		ДБФ.поля.Добавить("COSTR","N",10,2);
		ДБФ.поля.Добавить("NDOC","S",20,0);
		ДБФ.поля.Добавить("DDOC","D",,);
		ДБФ.поля.Добавить("ST","N",11,0);
		ДБФ.поля.Добавить("DSC","S",100,0);
		ДБФ.поля.Добавить("CCard","N",15,0);
		
		
		РезИФ="RPO"+Формат(сКЛАД.Код,"ЧГ=0")+"_"+НомерДокументаАптеки+"_"+Формат(ДатаВыгрузкиВАптеку,"ДФ=dd.MM.yyyy");
		
		ЗИП=Склад.КаталогОбмена+"\"+РезИФ+".ZIP";
		
		ТМП_ДБФ=ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+"\RPO_TMP.DBf";
		
		ДБФ.СоздатьФайл(ТМП_ДБФ);
		
		Для каждого Стр из Товар Цикл
			ДБФ.Добавить();
			
			ДБФ.PART = Стр.Партия.Наименование;
			ДБФ.PARTNEW = Стр.Партия;
			ДБФ.IDGOOD =  Стр.ЕИТ.Код;
			ДБФ.IDPROD = ""; 
			ДБФ.SER = Стр.Серия.Наименование; 
			ДБФ.QNT  = Стр.Количество; 
			ДБФ.COSTR = Стр.НоваяЦена; 
			ДБФ.NDOC = НомерДокументаАптеки ;
			ДБФ.DDOC = Дата;
			ДБФ.ST    ="";
			ДБФ.DSC    = Комментарий;
			ДБФ.CCard= Стр.ПартияАптеки;
			ДБФ.Записать();
			
			
		КонецЦикла;	
		
		ДБФ.ЗакрытьФайл();
		
		//==================<Зипанем и копирнем в каталог ФТП>===================GtG====22.01.2008
		Попытка
			ПереместитьФайл(ТМП_ДБФ,ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+"\"+РезИф+".DBF");
			ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку(ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+"\"+РезИф+".DBF",ЗИП);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+"\"+РезИф+".DBF");
		Исключение
			//возврат не надо делать.  еслин не удалился -  не очень критично
		КонецПопытки;
		
	Иначе  // новый формат и обмен
		
		
		////Найдем док в регистре котрольных сумм
		//Нз=РегистрыСведений.КонтрольныеСуммыАптечныхДокументов.СоздатьНаборЗаписей();
		//ОтборПоДокументу=Нз.Отбор.Найти("Объект");
		//ОтборПоДокументу.Установить(Ссылка,Истина);
		//
		//НЗ.Прочитать();
		//
		//Если НЗ.Количество()=0 Тогда
		//	#Если Клиент Тогда
		//		Сообщить("Выгрузка невозможна. Не найден документ в регистре контрольных сумм. Док: " + Ссылка);	
		//	#КонецЕсли
		//	Возврат Ложь; // данные об этом документе из аптеки не приходили и в офисе его не создавали.
		//КонецЕсли;	
		ТипДокумента = 234;
		СтруктураАидов = Обмен.СоздатьЗаписьВРеестре(Ссылка,ТипДокумента);
		Если СтруктураАидов = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("Не удалось создать запись в реестре документов. Документ не может быть выгружен");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;		
		
		
		КаталогОбмена=Склад.КаталогОбмена;
		КаталогОбъект = Новый Файл(КаталогОбмена);
		Если НЕ КаталогОбъект.Существует() Тогда
			#Если Клиент Тогда
				Сообщить("НЕ существует каталога: " + КаталогОбмена + " для аптеки : " + Склад );
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;
		
		
		Если СокрЛП(КаталогОбмена) = "" Тогда
			#Если Клиент Тогда
				Сообщить("----------------------------------------------------------------------------------------" );
				Сообщить("НЕ задан каталог обмена для аптеки : " + Склад );
				Сообщить("распоряжение не выгружено" );
				Сообщить("----------------------------------------------------------------------------------------" );
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;


		
		ТХТ = "ВЫБРАТЬ
		      |	РаспоряжениеНаПереоценкуТовар.Товар.Код КАК id_good,
		      |	РаспоряжениеНаПереоценкуТовар.К КАК coeff,
		      |	РаспоряжениеНаПереоценкуТовар.Количество КАК qnt,
		      |	РаспоряжениеНаПереоценкуТовар.НоваяЦена КАК cost_r_w_nds_new,
		      |	РаспоряжениеНаПереоценкуТовар.СтараяЦена КАК cost_r_w_nds,
		      |	РаспоряжениеНаПереоценкуТовар.Партия.Код КАК extpart,
		      |	РаспоряжениеНаПереоценкуТовар.ПартияНовая.Код КАК extpart_new,
		      |	РаспоряжениеНаПереоценкуТовар.ПартияНовая.Наименование КАК barcode,
		      |	ВЫБОР
		      |		КОГДА РаспоряжениеНаПереоценкуТовар.Товар.ЕдиницаПоУмолчанию.К > 1
		      |				И РаспоряжениеНаПереоценкуТовар.К = 1
		      |				И РаспоряжениеНаПереоценкуТовар.Партия.ЕИТЗакупки.К > 1
		      |			ТОГДА РаспоряжениеНаПереоценкуТовар.Товар.ЕдиницаПоУмолчанию.К
		      |		ИНАЧЕ 1
		      |	КОНЕЦ КАК conversion
		      |ИЗ
		      |	Документ.РаспоряжениеНаПереоценку.Товар КАК РаспоряжениеНаПереоценкуТовар
		      |ГДЕ
		      |	РаспоряжениеНаПереоценкуТовар.Ссылка = &Ссылка";		
		
		Запрос = Новый Запрос;
		запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Рез = Запрос.Выполнить().Выгрузить();
		
		
		
		ФайлВыгрузки=Новый XBase();
		ФайлВыгрузки.Кодировка=КодировкаXBase.OEM;
		
		ФайлВыгрузки.поля.Добавить("DocType","N",15,0);
		ФайлВыгрузки.поля.Добавить("AID","S",20,0);
		ФайлВыгрузки.поля.Добавить("AIDEXT","S",15,0);
		ФайлВыгрузки.поля.Добавить("NDOC","N",15,0);
		ФайлВыгрузки.поля.Добавить("NBLOCK","N",15,0);
		ФайлВыгрузки.поля.Добавить("NSTR","N",15,0);
		ФайлВыгрузки.поля.Добавить("NField","S",30,0);
		ФайлВыгрузки.поля.Добавить("TVAL","S",1,0);
		ФайлВыгрузки.поля.Добавить("Val","S",150,0);
		
		ИмяФайлаВыгрузки=КаталогОбмена+"indocs"+Формат(Склад.код,"ЧГ=")+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+"_"+Формат(Номер,"ЧГ=0")+".zip";
		Уник = Новый УникальныйИдентификатор;
		Уник = Прав(Уник,8);
		ИмяВременногоДБФ=КаталогВременныхФайлов()+Уник+".dbf";
		
		ФайлВыгрузки.СоздатьФайл(ИмяВременногоДБФ);
		
        ЗаполнитьФайлДанными(ФайлВыгрузки,Рез,СтруктураАидов,ТипДокумента);
		
		
		
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		
		ИмяФайлаДляАрхивации=СтрЗаменить(ИмяВременногоДБФ,"\"+Уник + ".","\indocs"+Формат(Склад.код,"ЧГ=")+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+"_"+Формат(Номер,"ЧГ=0")+".");
		
		ПереместитьФайл(ИмяВременногоДБФ,ИмяФайлаДляАрхивации);
		
		
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку(ИмяФайлаДляАрхивации,ИмяФайлаВыгрузки);
		
		УдалитьФайлы(ИмяФайлаДляАрхивации);
		
		
		
	КонецЕсли;
	
	Статус=Перечисления.СтатусПеремещения.ВыгруженНаАптеку;
	
	Для н=0 По 3 Цикл
		
		Попытка
			Записать();
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
		
	КонецЦикла;
	
	
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьПисьмоВАптеку()
	
	Ящик = Склад.Мэйл;
	Если ПустаяСтрока(Ящик) Тогда
		Возврат;
	КонецЕсли;
	
	МПочтец= Обработки.Почтарь;
	
	Почтец=МПочтец.Создать();
	
	Почтец.Автоотправка=ИСТИНА;
	
	Почтец.Адресат=СокрЛП(Ящик);
	Почтец.Тема="ГОТОВО рапоряжение на переоценку (по заявке №"+ ЭтотОбъект.НомерДокументаАптеки  +") загружайте.";
	Почтец.ТекстПисьма=""+ТекущаяДАта()+"
	|------------------------------------------
	|"+ ПараметрыСеанса.ТекущийСотр.Наименование;
	
	Почтец.Послать();
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// дукумент не проводится ни по каким регистрам.
	// вместо этого формируется файл с выгрузкой на аптеку новых цен
	// аптека себе его загрузит и пришлет обратно файл с фактически
	// переоцененным товаром, из него сделаем документ переоценки и 
	// выгрузим при проведении на аптеку уже с новыми партиями
	
	Если Склад.Делфи = Истина Тогда
		Если СгенерироватьНовыеПартии() = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ВыгрузитьВАптеку() = Истина Тогда
		//ОтправитьПисьмоВАптеку();
	КонецЕсли;
	
	
КонецПроцедуры


Процедура МО_АвтоматическаяПереоценка() Экспорт
	Если ПричинаПереоценки.Пустая() Тогда
		#Если Клиент Тогда
			Предупреждение("Не указана причина переоценки!", 2);
		#КонецЕсли	
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность()=Истина ТОгда
		#Если Клиент Тогда
			Предупреждение("Для автоматической переоценки документ должен быть записан!", 2);
		#КонецЕсли	
		Возврат;
	КонецЕсли;
	
	

	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	АлгоритмыАвтоматическойПереоценки.Приоритет КАК Приоритет,
	             |	АлгоритмыАвтоматическойПереоценки.ФормулаРасчетаНовойЦены,
	             |	АлгоритмыАвтоматическойПереоценки.УсловиеПрименения,
	             |	АлгоритмыАвтоматическойПереоценки.Ссылка КАК Алгоритм
	             |ИЗ
	             |	Справочник.АлгоритмыАвтоматическойПереоценки КАК АлгоритмыАвтоматическойПереоценки
	             |ГДЕ
	             |	АлгоритмыАвтоматическойПереоценки.ПометкаУдаления = ЛОЖЬ
	             |	И АлгоритмыАвтоматическойПереоценки.ПричинаПереоценки = &ПричинаПереоценки
	             |	И &ТекущаяДата МЕЖДУ НАЧАЛОПЕРИОДА(АлгоритмыАвтоматическойПереоценки.НачалоДействия, ДЕНЬ) И КОНЕЦПЕРИОДА(АлгоритмыАвтоматическойПереоценки.КонецДействия, ДЕНЬ)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Приоритет УБЫВ";
	
    Запрос.УстановитьПараметр("ПричинаПереоценки",ЭтотОбъект.ПричинаПереоценки);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());

	
	Рез=Запрос.Выполнить(); // результат запроса
	
	
	ТЗ_Привязки_формул_к_строкам=Товар.Выгрузить();
	
	ТЗ_Привязки_формул_к_строкам.Колонки.Добавить("ФормулаРасчетаНовойЦены");
	//ТЗ_Привязки_формул_к_строкам.Колонки.Добавить("Алгоритм");
	
	
	ТЗ_Привязки_формул_к_строкам.ЗаполнитьЗначения(Неопределено,"ФормулаРасчетаНовойЦены");
	
	
	ВыборкаАлгоритмов=Рез.Выбрать();
	
	//-------- Первичное заполнение массива номеров строк --------
	НомераСтрок=ТЗ_Привязки_формул_к_строкам.ВыгрузитьКолонку("НомерСтроки");
	
	
	ЭтотОбъект.ЛогАвтоматическойПереоценки.Очистить();
		
	Пока ВыборкаАлгоритмов.Следующий() Цикл
		// начинаем проверять условия с алгоритмов с наибольшим приоритетом
			
			ПостроительУсловияПрименения.Параметры.Очистить();
			
			ПостроительУсловияПрименения.Параметры.Вставить("Ссылка",ЭтотОбъект.Ссылка);
			ПостроительУсловияПрименения.Параметры.Вставить("НомераСтрок",НомераСтрок);
			ПостроительУсловияПрименения.Параметры.Вставить("ТекущаяДата",ТекущаяДата());
			ПостроительУсловияПрименения.Параметры.Вставить("ФормулаРасчетаНовойЦены",стрЗаменить(ВыборкаАлгоритмов.ФормулаРасчетаНовойЦены,"_","."));
			
			ПостроительУсловияПрименения.УстановитьНастройки(ВыборкаАлгоритмов.УсловиеПрименения.Получить());
			
			ПостроительУсловияПрименения.Выполнить();
			ПодходящиеСтроки=ПостроительУсловияПрименения.Результат.Выгрузить();
			
			Для Каждого Стр Из ПодходящиеСтроки Цикл
				СтрПривязки=ТЗ_Привязки_формул_к_строкам.Найти(Стр.НомерСтроки,"НомерСтроки");
				СтрПривязки.ФормулаРасчетаНовойЦены=Стр.ФормулаРасчетаНовойЦены;
				//СтрПривязки.Алгоритм=ВыборкаАлгоритмов.Алгоритм;
				
				СтрокаЛога=ЛогАвтоматическойПереоценки.Добавить();
				СтрокаЛога.СтрокаТовара=Стр.НомерСтроки;
				СтрокаЛога.АлгоритмРасчета = ВыборкаАлгоритмов.Алгоритм;
				
			КонецЦикла;
			
			//---------------<Переформируем список номеров строк>---------------------------// GtG // 29.05.2013 12:38:06
			// в списке должны остаться только номера строк, без привязки к формулам
			МассивСтрокБезФормул=ТЗ_Привязки_формул_к_строкам.НайтиСтроки(Новый Структура("ФормулаРасчетаНовойЦены",Неопределено));
			
			НомераСтрок.Очистить();
			Для Каждого Стр  Из МассивСтрокБезФормул Цикл
				НомераСтрок.Добавить(Стр.НомерСтроки);
			КонецЦикла;
			
			Если НомераСтрок.Количество()=0 Тогда
				Прервать; // не осталось строк без формул
			КонецЕсли;	
		КонецЦикла;
		
		
		Для Каждого Строка Из ТЗ_Привязки_формул_к_строкам Цикл  // !!! Переменная строки документа должна называться "Строка"
			
			Если Строка.ФормулаРасчетаНовойЦены=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			
			Попытка
				Строка.НоваяЦена =Вычислить(Строка.ФормулаРасчетаНовойЦены);
								
			ИСключение
				Строка.НоваяЦена=0;
				
			КонецПопытки;
			
			ЦенаЗакупВЕИТДокумента=(Строка.Партия.ЦенаЗакуп/Строка.Партия.ЕИТЗакупки.К)*Строка.К;
		    Строка.ПроцентНаценки=ОМ6_НаценкаОтЧегоЛибо(ЦенаЗакупВЕИТДокумента, Строка.НоваяЦена);


			
			
		КонецЦикла;	
		
		
		
	Товар.Загрузить(ТЗ_Привязки_формул_к_строкам);
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	
	
	
Конецпроцедуры


ПостроительУсловияПрименения=Новый ПостроительОтчета;

ПостроительУсловияПрименения.Текст="ВЫБРАТЬ
                                   |	РаспоряжениеНаПереоценкуТовар.НомерСтроки,
                                   //|	РаспоряжениеНаПереоценкуТовар.Товар,
                                   //|	РаспоряжениеНаПереоценкуТовар.СтараяЦена,
                                   //|	РаспоряжениеНаПереоценкуТовар.Партия,
                                   //|	РаспоряжениеНаПереоценкуТовар.Серия,
                                   //|	РаспоряжениеНаПереоценкуТовар.ФактическийСрокГодности,
                                   //|	РАЗНОСТЬДАТ(РаспоряжениеНаПереоценкуТовар.ФактическийСрокГодности, &ТекущаяДата, МЕСЯЦ) КАК ОстаточныйСрокГодности_месяцев,
                                   |	&ФормулаРасчетаНовойЦены КАК ФормулаРасчетаНовойЦены
								   //|{ВЫБРАТЬ
								   //|	Товар.*,
								   //|	СтараяЦена,
								   //|	Партия.*,
								   //|	Серия.*,
								   //|	ФактическийСрокГодности,
								   //|	ОстаточныйСрокГодности_месяцев}
                                   |ИЗ
                                   |	Документ.РаспоряжениеНаПереоценку.Товар КАК РаспоряжениеНаПереоценкуТовар
                                   |ГДЕ
                                   |	РаспоряжениеНаПереоценкуТовар.Ссылка = &Ссылка
                                   |	И РаспоряжениеНаПереоценкуТовар.НомерСтроки В(&НомераСтрок)
                                   |{ГДЕ
                                   |	РаспоряжениеНаПереоценкуТовар.Товар.*,
                                   |	РаспоряжениеНаПереоценкуТовар.СтараяЦена,
                                   |	РаспоряжениеНаПереоценкуТовар.Партия.*,
                                   |	РаспоряжениеНаПереоценкуТовар.Серия.*,
                                   |	РаспоряжениеНаПереоценкуТовар.ФактическийСрокГодности,
                                   |	(РАЗНОСТЬДАТ(&ТекущаяДата,РаспоряжениеНаПереоценкуТовар.ФактическийСрокГодности,  МЕСЯЦ)) КАК ОстаточныйСрокГодности_Месяцев}";
	
	

