
Процедура ОповеститьМенеджера()
	
	ТекстЦеновойРазницы = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЗаказПроизводителюТовар.ЛучшаяЦенаПоставщика * ЗаказПроизводителюТовар.Количество 
				   |			- ЗаказПроизводителюТовар.Цена * ЗаказПроизводителюТовар.Количество) КАК ЦеноваяРазница
	               |ИЗ
	               |	Документ.ЗаказПроизводителю.Товар КАК ЗаказПроизводителюТовар
	               |ГДЕ
	               |	ЗаказПроизводителюТовар.Ссылка = &Ссылка
	               |	И ЗаказПроизводителюТовар.Цена > 0
	               |	И ЗаказПроизводителюТовар.ЛучшаяЦенаПоставщика > 0";
				   
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		Если НЕ Выборка.ЦеноваяРазница = NULL Тогда
			Если Выборка.ЦеноваяРазница < 0 Тогда
				Если (-1*Выборка.ЦеноваяРазница) > (Сумма*0.01) Тогда
					ТекстЦеновойРазницы = "Cумма ценового отклонения: " + (-1*Выборка.ЦеноваяРазница) + "
					|Необходимо запросить у производителя компенсацию ценовой разницы.";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МПочтец = Обработки.Почтарь;
	Почтец = МПочтец.Создать();
	
	Почтец.Автоотправка = Истина;
	
	Почтец.Рассылка.Очистить();			
	Почтец.Рассылка.Добавить("sanakoev@mail.ru");
	Почтец.Рассылка.Добавить("irina.issanina@ave-apteka.ru");
	Почтец.Рассылка.Добавить("guseva.n.a@ave-apteka.ru");
	
	Почтец.Тема = "Проведен заказ на : " + Производитель;
	Почтец.ТекстПисьма = "Проведен заказ на : " + Производитель  +  "
	|Сумма заказа: " + Сумма  + "
	|Количество позиций: " + Товар.Количество() + " 
	|" + ТекстЦеновойРазницы + "";
	
	Почтец.Функция_Послать();
	
	Почтец = Неопределено;
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	// регистр ЗаказПроизводителю Приход
	Движения.ЗаказПроизводителю.Очистить();
	Движения.ЗаказПроизводителюОпт.Очистить();
	
	КодПроизводителя = Производитель.Код;
	Движения.ЗаказПроизводителю.Записывать = Истина;
	Движения.ЗаказПроизводителюОпт.Записывать = Истина;
	Для Каждого ТекСтрокаТовар Из Товар Цикл
		Если ТекСтрокаТовар.Количество  = 0 Тогда
			Продолжить;
		КонецЕсли;
		Движение = Движения.ЗаказПроизводителю.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.КодПроизводителя = КодПроизводителя;
		Движение.КодТовара = ТекСтрокаТовар.КодТовара;
		Движение.Заказ = Ссылка;
		Движение.Количество = ТекСтрокаТовар.Количество;
		Движение.Цена = ТекСтрокаТовар.Цена;
		
		Движение = Движения.ЗаказПроизводителюОпт.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.КодПроизводителя = КодПроизводителя;
		Движение.КодТовара = ТекСтрокаТовар.КодТовара;
		Движение.Заказ = Ссылка;
		Движение.Количество = ТекСтрокаТовар.Количество;
		Движение.Цена = ТекСтрокаТовар.Цена;
		Движение.СуммаЗаказа = ТекСтрокаТовар.Количество*ТекСтрокаТовар.Цена;
	КонецЦикла;
	
	Если ТоварОприходован Тогда
		
		Движения.ЗаказПроизводителю.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПроизводителюОстатки.КодТовара,
		               |	ЗаказПроизводителюОстатки.КоличествоОстаток
		               |ПОМЕСТИТЬ ТоварыЗаказа
		               |ИЗ
		               |	РегистрНакопления.ЗаказПроизводителю.Остатки(, Заказ = &Заказ) КАК ЗаказПроизводителюОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаказПроизводителюТовар.КодТовара,
		               |	ЗаказПроизводителюТовар.Товар,
		               |	ЗаказПроизводителюТовар.Цена,
		               |	ТоварыЗаказа.КоличествоОстаток КАК Количество
		               |ИЗ
		               |	Документ.ЗаказПроизводителю.Товар КАК ЗаказПроизводителюТовар
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыЗаказа КАК ТоварыЗаказа
		               |		ПО (ТоварыЗаказа.КодТовара = ЗаказПроизводителюТовар.КодТовара)
		               |ГДЕ
		               |	ЗаказПроизводителюТовар.Ссылка = &Заказ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТоварыЗаказа";
					   
		Запрос.УстановитьПараметр("Заказ",Ссылка);
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			Выборка = Рез.Выбрать();
			Движения.ЗаказПроизводителю.Записывать = Истина;
			Пока Выборка.Следующий() Цикл
				Движение = Движения.ЗаказПроизводителю.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = ТекущаяДата();
				Движение.КодПроизводителя = КодПроизводителя;
				Движение.КодТовара = Выборка.КодТовара;
				Движение.Заказ = Ссылка;
				Движение.Количество = Выборка.Количество;
				Движение.Цена = Выборка.Цена;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	ЗарегистрироватьДокументДляВыгрузки();
	
	//ОповеститьМенеджера();

КонецПроцедуры

Процедура ПроверитьНаЗаполнение(Отказ)
	
	//Если ДатаПоставки = Дата(1,1,1) Тогда
	//	#Если Клиент Тогда
	//		Предупреждение("Не указана дата поставки. Документ не может быть проведен",3);
	//	#КонецЕсли
	//	Отказ = Истина;	
	//КонецЕсли;
	
	Если НЕ Согласован Тогда
		#Если Клиент Тогда
			Предупреждение("Документ не прошел согласование. Не может быть проведен",3);
		#КонецЕсли
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Производитель.Пустая() Тогда
		#Если Клиент Тогда
			Предупреждение("В документе не выбран производитель. Документ не может быть проведен",3);
		#КонецЕсли
		Отказ = Истина;
	// ==>ENT-1275.Коробка.06.02.2019.Проверка заполнения поставщика у производителя 
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Производитель.Поставщик) Тогда
			#Если Клиент Тогда
				Предупреждение("Производитель не привязан к поставщику. Документ не может быть проведен",3);
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли; 
	// <==ENT-1275.Коробка.06.02.2019.Проверка заполнения поставщика у производителя 
	КонецЕсли;
	
	Если Контракт.Пустая() Тогда
		#Если Клиент Тогда
			Предупреждение("В документе не выбран контракт производителя. Документ не может быть проведен",3);
		#КонецЕсли
		Отказ = Истина;	
	Иначе
		
		ДатаДействияКонтрактаС = Контракт.НачалоПериода;
		ДатаДействияКонтрактаПо = Контракт.КонецПериода;
		Если Дата < ДатаДействияКонтрактаС Или Дата > ДатаДействияКонтрактаПо Тогда
			#Если Клиент Тогда
				Предупреждение("Выбранный контракт не является действующим (на дату документа)", 3);
			#КонецЕсли
			Отказ = Истина;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Контракт.ДоговорПоставщика) Тогда
		
			#Если Клиент Тогда
			Предупреждение("В контракте поставщика не указан договор!",3);
			#КонецЕсли
			Отказ = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьНастройкиОбмена() Тогда
		Если ЕстьТоварыБезПерекодировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДатаПоследнегоИзменения = ТекущаяДата();
	
	Сумма = Товар.Итог("Сумма");	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьНаЗаполнение(Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Изменение = Изменения.Добавить();
		Изменение.Дата = ТекущаяДата();
		Изменение.КомментарийИзменения = "Создан новый документ";
		Изменение.Сотрудник = ПараметрыСеанса.ТекущийСотр;
		Изменение.ТипИзм = Перечисления.ДействияНадДокументами.ВводНового;
		
		СозданКем = ПараметрыСеанса.ТекущийСотр;
		
	КонецЕсли;
	
	ЗаписатьДействияВИсториюДокумента(Изменения,РежимЗаписи,ПометкаУдаления,Истина);	
	
КонецПроцедуры

Функция ЕстьНастройкиОбмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК НастройкаНайдена
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	|		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	|ГДЕ
	|	КонтрактыИАптеки.Аптека = &Склад
	|	И КонтрактыИАптеки.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Владелец = &Поставщик
	|	И КонтрактыИНастройки.НастройкаОбмена.АвтоВыгрузкаЗаказовОптEDI = ИСТИНА";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Поставщик", Производитель.Поставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	  	
КонецФункции

Функция ЕстьТоварыБезПерекодировки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АП.Наименование КАК Товар
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО АП.Ссылка = Связки.ТоварФирмы
	|			И (Связки.Поставщик = &ПоставщикСвязок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиПоОП
	|		ПО АП.КодОП = СвязкиПоОП.ТоварФирмы.Код
	|			И (СвязкиПоОП.Поставщик = &ПоставщикСвязок)
	|ГДЕ
	|	Связки.КодТовараПоставщика ЕСТЬ NULL
	|	И СвязкиПоОП.КодТовараПоставщика ЕСТЬ NULL
	|	И АП.Ссылка В(&Товары)"; 	
	
	Поставщик = Производитель.Поставщик;
	ПоставщикСвязок = ?(ЗначениеЗаполнено(Поставщик.ПоставщикСвязок), Поставщик.ПоставщикСвязок, Поставщик); 	

	Запрос.УстановитьПараметр("ПоставщикСвязок", ПоставщикСвязок);
	Запрос.УстановитьПараметр("Товары", Товар.ВыгрузитьКолонку("Товар"));

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			#Если Клиент Тогда
				Сообщить("Отсутствует перекодировка с производителем по товару: " + Выборка.Товар);
			#Иначе
				Возврат Истина;
			#КонецЕсли
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ЗарегистрироватьДокументДляВыгрузки()
	
	Если ЗначениеЗаполнено(СтатусEDI) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусEDI = ?(ЕстьНастройкиОбмена(), Перечисления.СтатусыИсходящегоСообщенияEDI.ОжидаетВыгрузки, Перечисления.СтатусыИсходящегоСообщенияEDI.НеТребуетВыгрузки);
	
	Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован = Ложь;
	СогласованКем = Справочники.Сотрудники.ПустаяСсылка();
	СозданКем = Справочники.Сотрудники.ПустаяСсылка();
	ПараметрыРасчетаЗаказа = "";
	ТоварОприходован = Ложь;
	ИдентификаторEDI = "";
	СтатусEDI = Перечисления.СтатусыИсходящегоСообщенияEDI.ПустаяСсылка();
	СтатусВыгрузки = Перечисления.СтатусыВыгрузки.ПустаяСсылка();
	Изменения.Очистить();
	РасшифровкаЗаказа.Очистить();	
	
КонецПроцедуры
