Перем СтрокаДо;

Процедура КоманднаяПанельТоваракнЗаполнитьНаОсновании(Кнопка)
	
	Если Товар.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Таблица товара содержит записи. Очистить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Товар.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВариантЗаполнения","ПоЗаказу");
	
	
	КлючУник=  Новый   УникальныйИдентификатор();
	ФормаПодбора= ПолучитьОбщуюФорму("ПодборТовараВИнвойс",ЭтаФорма,КлючУник);
	ФормаПодбора.МножественныйВыбор= ИСТИНА;
	ФормаПодбора.ВладелецФормы=ЭтаФорма;
	ФормаПодбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаПодбора.Основание = ДокументОснование;
	ФормаПодбора.ДатаДокумента = Дата;
	ФормаПодбора.Параметры = Параметры;
	ФормаПодбора.ОткрытьМодально(0);
	
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора)=Тип("ТаблицаЗначений") Тогда
		Если ЗначениеВыбора.Колонки.Найти("СрокГодности") = Неопределено Тогда
			ЕстьСрокГодности = Истина;
		Иначе
			ЕстьСрокГодности = Ложь;
		КонецЕсли;
		
		Товар.Очистить();
		
		Для каждого стр из ЗначениеВыбора Цикл
			Если стр.КоличествоФакт > 0 Тогда
				НоваяСтрока = Товар.Добавить();
				НоваяСтрока.КодТовара = стр.КодТовара;
				НоваяСтрока.Товар = стр.Товар;
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",стр.СтавкаНДС);
				НоваяСтрока.Количество = стр.КоличествоФакт;
				НоваяСтрока.ЦенаЗаказа = стр.ЦенаЗаказа;
				НоваяСтрока.ЦенаОтпускнаяСНДС = стр.ЦенаФакт;
				НоваяСтрока.СуммаОтпускнаяСНДС = НоваяСтрока.Количество*НоваяСтрока.ЦенаОтпускнаяСНДС;
				НоваяСтрока.ЦенаОтпускнаяБезНДС = НоваяСтрока.ЦенаОтпускнаяСНДС / (1+ПереопределениеЗначенияСтавки20_18(НоваяСтрока.СтавкаНДС,Дата)/100); 
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаОтпускнаяСНДС - НоваяСтрока.ЦенаОтпускнаяБезНДС * НоваяСтрока.Количество;
				Если ЕстьСрокГодности Тогда
					НоваяСтрока.СрокГодности = стр.СрокГодности;
				КонецЕсли;
				НоваяСтрока.ПодтверждениеЗаказа = стр.ПодтверждениеЗаказа;
				НоваяСтрока.ЦенаУчета = стр.ЦенаУчета;
				НоваяСтрока.ЦенаЗаказа = стр.ЦенаЗаказа;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	Если
		Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование)) = Метаданные.Документы.ЗаказПроизводителю
	Тогда
		Производитель = ДокументОснование.Производитель;
    КонецЕсли;
	РассчитатьДатуОплаты();
	
КонецПроцедуры

Процедура ПроизводительПриИзменении(Элемент)
	Если
		Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование)) = Метаданные.Документы.ЗаказПроизводителю
	Тогда
		Если Производитель <> ДокументОснование.Производитель и НЕ ДокументОснование.Пустая() Тогда
			Предупреждение("Выбранный производитель не соответствует производителю в документе основания");	
			Производитель = ДокументОснование.Производитель;
		КонецЕсли;
	КонецЕсли;
	РассчитатьДатуОплаты();	
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДата();
		ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоКоду(4);
	КонецЕсли;
	
	ДнейОтсрочки = ПолучитьКоличествоДнейОтсрочки();
	
	УправлениеДоступностьюЭлементовФормы();
	ОМ10_ЗаполнитьСписокПечФорм(ЭтотОбъект,СписокПечатныхФорм);
	
КонецПроцедуры

Процедура ТоварПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	////БТ 813
	//////Проверяем наличие связок по товару с поставщиком GDP
	//Если
	//	НЕ ОтменаРедактирования
	//Тогда	
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КодТовараПоставщика
	//	|ИЗ
	//	|	(
	//	|	ВЫБРАТЬ
	//	|		Связки.ТоварФирмы КАК ТоварФирмы,
	//	|		МАКСИМУМ(Связки.КодТовараПоставщика) КАК КодТовараПоставщика
	//	|	ИЗ
	//	|		Справочник.СвязкиТовараСПоставщиком КАК Связки
	//	|	ГДЕ
	//	|		Связки.Блокировка = ЛОЖЬ
	//	|		И Связки.Поставщик = &ПоставщикСвязок
	//	|	СГРУППИРОВАТЬ ПО
	//	|		Связки.ТоварФирмы
	//	|	) КАК СвязкиТовараСПоставщиком
	//	|ГДЕ
	//	|	СвязкиТовараСПоставщиком.ТоварФирмы = &Товар";

	//	//Запрос.УстановитьПараметр("ПоставщикСвязок", Справочники.Поставщики.НайтиПоКоду(582));
	//	ПоставщикДжиДиПи = Справочники.Поставщики.НайтиПоКоду(3055);
	//	Запрос.УстановитьПараметр
	//	(
	//		"ПоставщикСвязок"
	//		, ?(ПоставщикДжиДиПи.ПоставщикСвязок.Пустая(),  ПоставщикДжиДиПи, ПоставщикДжиДиПи.ПоставщикСвязок)
	//	);
	//	Запрос.УстановитьПараметр("Товар", ЭлементыФормы.Товар.ТекущаяСтрока.Товар);

	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если
	//		РезультатЗапроса.Пустой() 
	//	Тогда
	//		ЭлементыФормы.Товар.ТекущаяКолонка = ЭлементыФормы.Товар.Колонки.Товар;
	//		Предупреждение
	//		("Вы не можете добавлять позицию товара в документ, так как на неё нет связки с товаром из справочника Ориола!" + Символы.ВК + Символы.ПС 
	//		+ "Инвойс без связки хотя бы на 1 позицию товара не сможет выгрузиться в ПО Ориола!"  + Символы.ВК + Символы.ПС
	//		+ " Необходимо заявить формирование связок товара ответственным лицам соответствующего подразделения. " + Символы.ВК + Символы.ПС 
	//		+ "Просьба делать это заблаговременно, на стадии формирования заявок производителям!"
	//		);
	//		Отказ = Истина;
	//	КонецЕсли;    	
	//Иначе
	//	ЗаполнитьЗначенияСвойств(ЭлементыФормы.Товар.ТекущаяСтрока, СтрокаДо[0]);
	//	ЭлементыФормы.Товар.ОбновитьСтроки();
	//КонецЕсли; 
	////БТ 813
	//
	// ТСД=ЭлементыФормы.Товар.ТекущаяСтрока;
	// ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
	// 
	// Если (ИмяТекКол="Количество") или (ИмяТекКол="Цена") Тогда
	//	 ТСД.Сумма = ТСД.Количество*ТСД.Цена;
	// КонецЕсли;
	
	
КонецПроцедуры

Процедура РассчитатьДатуОплаты()
	
	ДнейОтсрочки = ПолучитьКоличествоДнейОтсрочки();
	Если ДнейОтсрочки > 0 Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПроизводителю") 
			И ЗначениеЗаполнено(ДокументОснование.ДатаПоставки) Тогда
			ДатаПоставки = ДокументОснование.ДатаПоставки;
		Иначе
			ДатаПоставки = Дата;
		КонецЕсли;
		
		ДатаОплаты = ДатаПоставки + ДнейОтсрочки*24*60*60;
		
	Иначе
		ДатаОплаты = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоДнейОтсрочки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрактыПроизводителей.ДнейОтсрочки
	|ИЗ
	|	Документ.КонтрактыПроизводителей КАК КонтрактыПроизводителей
	|ГДЕ
	|	КонтрактыПроизводителей.Производитель = &Производитель
	|	И &Дата МЕЖДУ КонтрактыПроизводителей.НачалоПериода И КонтрактыПроизводителей.КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрактыПроизводителей.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать();		
		Выборка.Следующий();
		
		Возврат Выборка.ДнейОтсрочки;
		
	КонецЕсли;
	
КонецФункции

Процедура ТоварТоварПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Товар.ТекущаяСтрока;
	ТекСтрока.КодТовара = ТекСтрока.Товар.Код;
	ТекСтрока.СтавкаНДС = ТекСтрока.Товар.СтавкаНДС;
	
	РассчитатьЦеныИСумму();
	
КонецПроцедуры

Процедура КоманднаяПанельТовара1ОтчетПоОстаткамТовараПоставщика(Кнопка)
	
	//ТСО {09.12.2015 
	СписокТоваров = Новый СписокЗначений;		
	Для Каждого ТекСтрокаТовар Из Товар Цикл
		Если СписокТоваров.НайтиПоЗначению(ТекСтрокаТовар.Товар) = Неопределено Тогда
			СписокТоваров.Добавить(ТекСтрокаТовар.Товар);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВнешнийОтчет = Справочники.ВнешниеОтчетыИОбработки.НайтиПоКоду(711);
	Если ЗначениеЗаполнено(ВнешнийОтчет) Тогда 		
		ФормаОтчета = ВнешниеОтчеты.ПолучитьФорму(ВнешнийОтчет.ПутьКФайлу);
		ФормаОтчета.СформироватьПриОткрытии = Истина;
		ФормаОтчета.Товары = СписокТоваров;		
		
		ФормаОтчета.Открыть();
		
	КонецЕсли;  	
	//ТСО }
	
КонецПроцедуры

Процедура ТоварПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаДо = Неопределено;
	СтрокаОтбор = Новый Массив;
	СтрокаОтбор.Добавить(ЭлементыФормы.Товар.ТекущиеДанные);
	СтрокаДо = Товар.Выгрузить(СтрокаОтбор);
КонецПроцедуры

Процедура ТоварЦенаОтпускнаяБезНДСПриИзменении(Элемент)
	РассчитатьЦеныИСумму();	
КонецПроцедуры

Процедура ТоварКоличествоПриИзменении(Элемент)
	РассчитатьЦеныИСумму();
КонецПроцедуры

Процедура ТоварСтавкаНДСПриИзменении(Элемент)
	РассчитатьЦеныИСумму();
КонецПроцедуры

Процедура РассчитатьЦеныИСумму()

	ТекСтрока = ЭлементыФормы.Товар.ТекущаяСтрока;
	ТекСтрока.ЦенаОтпускнаяСНДС = ТекСтрока.ЦенаОтпускнаяБезНДС * (1+ПереопределениеЗначенияСтавки20_18(ТекСтрока.СтавкаНДС,Дата)/100); 
	ТекСтрока.СуммаОтпускнаяСНДС = ТекСтрока.ЦенаОтпускнаяСНДС * ТекСтрока.Количество;
	ТекСтрока.СуммаНДС = ТекСтрока.СуммаОтпускнаяСНДС - ТекСтрока.ЦенаОтпускнаяБезНДС * ТекСтрока.Количество;		

КонецПроцедуры

Процедура КоманднаяПанель2кнПечать(Кнопка)
	
	ОМ10_КнопкаПечатьНажатие(ЭтотОбъект,ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельНесопоставленныйТоварСопоставитьПозицию(Кнопка)
	
	Если НесопоставленныйТовар.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УсловиеФильтра = Новый СписокЗначений;
	
	ТЗНесопоставленныйТовар = Новый ТаблицаЗначений;
	ТЗНесопоставленныйТовар.Колонки.Добавить("Код");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Товар");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Связан");
	ТЗНесопоставленныйТовар.Колонки.Добавить("БарКод");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Производитель");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Блокировка");
	
	Для каждого стр из НесопоставленныйТовар Цикл
		НоваяСтрока = ТЗНесопоставленныйТовар.Добавить();
		НоваяСтрока.Код = стр.КодТовараПоставщика;
		НоваяСтрока.Товар = стр.НаименованиеТовараПоставщика;
		НоваяСтрока.Связан = NULL;
		НоваяСтрока.БарКод = стр.Баркод;
		НоваяСтрока.Производитель = стр.Производитель;
		НоваяСтрока.Блокировка = Ложь;
		
		УсловиеФильтра.Добавить(стр.КодТовараПоставщика);
	КонецЦикла;
	
	
	Связки = Обработки.УстановкаСвязокСПоставщикомИзДокумента.Создать();
	ФормаСвязок = Связки.ПолучитьФорму("УстановкаСвязокСПоставщикомНовая", , Новый УникальныйИдентификатор);
	ФормаСвязок.УсловиеФильтра = УсловиеФильтра;
	ФормаСвязок.ТЗНесопоставленныйТовар = ТЗНесопоставленныйТовар;
	ФормаСвязок.Поставщик = Производитель.Поставщик;
	ФормаСвязок.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельНесопоставленныйТоварПеренестиВИнвойс(Кнопка)
	
	Поставщик = Производитель.Поставщик;
	Если Поставщик.ПоставщикСвязок.Пустая() Тогда
		ПоставщикСвязок = Поставщик;
	Иначе
		ПоставщикСвязок = Поставщик.ПоставщикСвязок;
	КонецЕсли;
	
	ч = 0;
	СтрокиДляУдаления = Новый Массив();
	
	Для Каждого ТекСтр Из НесопоставленныйТовар Цикл
				
		СтрокаТовара = ОМ_Справочники.ПолучитьТоварПоСвязке(ТекСтр.КодТовараПоставщика, ПоставщикСвязок);
		Если СтрокаТовара = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрДок = Товар.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДок, ТекСтр);
		СтрДок.Товар = СтрокаТовара.Товар;
		СтрДок.КодТовара = СтрокаТовара.КодТовара;
		
		ч = ч + 1;
		СтрокиДляУдаления.Добавить(ТекСтр);
		
	КонецЦикла;
	
	Для Каждого УдСтрока Из СтрокиДляУдаления Цикл
		НесопоставленныйТовар.Удалить(УдСтрока);
	КонецЦикла;
	
	Сообщить("Перенесено строк: " + Формат(ч, "ЧН=; ЧГ=0"));
	
КонецПроцедуры

Процедура КоманднаяПанельТовара1кнЗаполнитьПоПодтверждению(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Предупреждение("Не выбран документ заказа. Выполнение не может быть продолжено");
		Возврат;
	КонецЕсли;
	
	Если Товар.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Таблица товара содержит записи. Очистить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Товар.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВариантЗаполнения","ПоПодтверждению");
	
	КлючУник=  Новый   УникальныйИдентификатор();
	ФормаПодбора= ПолучитьОбщуюФорму("ПодборТовараВИнвойс",ЭтаФорма,КлючУник);
	ФормаПодбора.МножественныйВыбор= ИСТИНА;
	ФормаПодбора.ВладелецФормы=ЭтаФорма;
	ФормаПодбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаПодбора.Основание = ДокументОснование;
	ФормаПодбора.ДатаДокумента = Дата;
	ФормаПодбора.Параметры = Параметры;
	Если Товар.Количество() = 0 Тогда
		ФормаПодбора.ТаблицаОчищена = Истина;
	Иначе
		ФормаПодбора.ТаблицаОчищена = Ложь;
	КонецЕсли;
	
	ФормаПодбора.ОткрытьМодально(0);	
	
КонецПроцедуры

Процедура ПодтверждениеЗаказаПриИзменении(Элемент)
	
	ДокументОснование = ПодтверждениеЗаказа.ДокументОснование;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыАннулировать(Кнопка)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Документ будет помечен на удаление в 1С и аннулирован на складе. Продолжить?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусВыгрузки = Перечисления.СтатусыВыгрузки.Выгружен Тогда
		НомерДокументаGDP = "I" + Формат(Номер, "ЧГ=0");
		Рез = ОМ_ТСО.АннулироватьПриходныйДокументВБазеGDP(НомерДокументаGDP);
		Если Не Рез.Успешно Тогда
			Сообщить("Ошибка аннулирования инвойса в базе GDP: " + Рез.ОписаниеОшибки, СтатусСообщения.Важное);
			Возврат;		
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	СтатусВыгрузки = Перечисления.СтатусыВыгрузки.Аннулирован;
	Записать(РежимЗаписиДокумента.Запись);
	Попытка
		УстановитьПометкуУдаления(Истина);
		ЗафиксироватьТранзакцию();  
		ЭтаФорма.Закрыть();
	Исключение
		Сообщить("Ошибка установки пометки на удаление: " + ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

Процедура УправлениеДоступностьюЭлементовФормы()

	КнопкаАннулировать = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Аннулировать;
	КнопкаАннулировать.Доступность = Проведен;

КонецПроцедуры
