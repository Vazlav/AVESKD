
Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ДобавитьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ДобавитьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("</" + Имя + ">");
	
КонецПроцедуры


Процедура ПоместитьВОбменСкладБух() Экспорт
	
	Запрос = Новый Запрос;
	запрос.Текст =   "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	УЗ_МелкооптоваяРеализация.Ссылка КАК Ссылка,
	                 |	УЗ_МелкооптоваяРеализация.Фирма.Код
	                 |ПОМЕСТИТЬ мопты
	                 |ИЗ
	                 |	Документ.УЗ_МелкооптоваяРеализация КАК УЗ_МелкооптоваяРеализация
	                 |ГДЕ
	                 |	УЗ_МелкооптоваяРеализация.Проведен = ИСТИНА
	                 |	И УЗ_МелкооптоваяРеализация.Ссылка = &Ссылка
	                 |
	                 |ОБЪЕДИНИТЬ ВСЕ
	                 |
	                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	УЗ_МелкооптоваяРеализацияТовар.Ссылка,
	                 |	УЗ_Партии.ФирмаИсходная
	                 |ИЗ
	                 |	Документ.УЗ_МелкооптоваяРеализация.Товар КАК УЗ_МелкооптоваяРеализацияТовар
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	                 |		ПО УЗ_МелкооптоваяРеализацияТовар.КодПартии = УЗ_Партии.Код
	                 |ГДЕ
	                 |	УЗ_МелкооптоваяРеализацияТовар.Ссылка.Проведен = ИСТИНА
	                 |	И УЗ_Партии.ВидПоступления = 1
	                 |	И УЗ_МелкооптоваяРеализацияТовар.Ссылка = &Ссылка
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	211 КАК ВидДокумента,
	                 |	мопты.ФирмаКод КАК КодФирмы,
	                 |	""ОбменСкладБух.СсылкаТХТ                                "" КАК СсылкаТХТ,
	                 |	мопты.Ссылка.Дата КАК ДатаОчередиСклад,
	                 |	мопты.Ссылка.Склад.Код КАК КодСклада,
	                 |	мопты.Ссылка.Поставщик.Код КАК КодКонтрагента,
	                 |	мопты.Ссылка КАК Объект,
	                 |	мопты.Ссылка.Проведен КАК Проведен,
	                 |	мопты.Ссылка.ПометкаУдаления КАК ПомеченНаУдаление,
	                 |	"""" КАК ОшибкаПриЗагрузке
	                 |ИЗ
	                 |	мопты КАК мопты
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	ДатаОчередиСклад,
	                 |	Объект,
	                 |	КодФирмы
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |УНИЧТОЖИТЬ мопты"; // Сгенерировано в GtG's Консоль запросов. 02.03.2016 19:28:30

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ,Выборка);
		МЗ.СсылкаТХТ = XMLСтрока(Ссылка);
		МЗ.Записать();
	КонецЦикла;
	
	
КонецПроцедуры


Функция ВыгрузитьВАптеку() Экспорт
	
	//Если НЕ проведен и НЕ ( Статус = Перечисления.СтатусыСписания.Аннулирован или Статус = Перечисления.СтатусыСписания.СогласованиеОтменено) Тогда
	//	#Если Клиент Тогда
	//		Предупреждение("Документ не проведен. Выполнение не может быть продолжено");
	//	#КонецЕсли
	//	Возврат Ложь;
	//КонецЕсли;
			

	ЗаписьXML = Новый ТекстовыйДокумент;
	
	
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ДобавитьСтроку("<document>"); 

	
	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "OUT_SMALL_WH_SALE"); 
	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 

		
		ЗаписьXML.ДобавитьСтроку("<hdr>");
			ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"211"); 
			ЗаписатьЭлементXML(ЗаписьXML, "guid",	ИДДокументаАптеки); 
			ЗаписатьЭлементXML(ЗаписьXML, "ddoc",	Формат(Дата,"ДФ=dd.MM.yyyy"));
			Если Статус = Перечисления.СтатусыСписания.Согласован Тогда
				ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.ОбработанОфисом)); 
			ИначеЕсли Статус = Перечисления.СтатусыСписания.Аннулирован Тогда
				ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Аннулирован)); 
			ИначеЕсли Статус = Перечисления.СтатусыСписания.СогласованиеОтменено Тогда
				ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Создан)); 
			Иначе
				ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Проведен)); 
			КонецЕсли;
			ЗаписатьЭлементXML(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));
		    ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep", 			КорректировкаСпецСимволов(СокрЛП(КомментарийАптеки)));	
				
	  	ЗаписьXML.ДобавитьСтроку("</hdr>"); //конец записи секции  "hdr"
		
	
	ЗаписьXML.ДобавитьСтроку("</document>"); //конец записи секции  "document"
	ВесьТекст = ЗаписьXML.ПолучитьТекст();
	ЗаписьXML.Очистить();
	ЗаписьXML = Неопределено;
	
	КодСклада = Склад.Код;
	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
		Если КодСчетчика = -1 Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	//к = Число("раздватри");
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.КодАптеки = Склад.Код;
	МЗ.ТипУпаковки = "OUT_SMALL_WH_SALE";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "out_small_wh_sale_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.ИдентификаторДокумента = ИДДокументаАптеки;
	МЗ.Записать();	
	
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку");
	
	Возврат Истина;
	
	
КонецФункции

Процедура ПроверитьНаЗаполнение(Отказ)
	
	Если ВидОперацииМелкооптовойРеализации.Пустая() Тогда
		#Если Клиент Тогда
			Сообщить("Не указан вид операции! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		#КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Поставщик.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не указан поставщик! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если НЕ ИмяПользователя() = "Робот" Тогда
		Если ПустаяСтрока(Поставщик.ИНН) или ПустаяСтрока(Поставщик.КПП) Тогда
			#Если Клиент Тогда
				Сообщить("У поставщика не заполнены ИНН/КПП. Документ не может быть проведен!",СтатусСообщения.ОченьВажное);	 
			#КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Товар.Найти(0,"Коэфф") = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с коэффициентами =0!
					|Это недопустимо!
					|Очевидно проблемы с единицами товаров.");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;

	Если НЕ Товар.Найти(0,"ЦенаЗакупБезНДС") = Неопределено Тогда
		// Есть строки с 0-ми
		#Если Клиент Тогда
			Сообщить("В документе есть строки без закуп. цены!
			|Это недопустимо!
			|Укажите цену закупочную!");
		#КонецЕсли
		ПроведениеЗакончено=Истина;

		Отказ = ИСТИНА;
		Возврат ;
	КонецЕсли;
	
	//Начало НЭТИ Барданов А.Ю. 14.01.2019 ENT-1031
	ПоставщикиДляПроверкиСвязок = Документы.УЗ_МелкооптоваяРеализация.ПоставщикиДляПроверкиСвязок();
	Если ПоставщикиДляПроверкиСвязок.Найти(Поставщик) <> Неопределено 
		И ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю
		И НесопоставленныйТовар.Количество() > 0 Тогда
		#Если Клиент Тогда
			Предупреждение("Присутствует несопоставленный товар. Документ не может быть проведен",3);
		#КонецЕсли
		Отказ = Истина;		
	КонецЕсли;
	//Конец НЭТИ Барданов А.Ю. 14.01.2019 ENT-1031
	
	Если ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю Тогда
		Если  Поставщик.Код = 3055 Тогда
			Если НЕ ИмяПользователя() = "Робот" Тогда
				// должна быть перекодировка с GDP
				Если ЕстьПозицииБезПерекодировки() Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			// розн. наценка не должна превышать определенный процент
			Если Статус = Перечисления.СтатусыСписания.Согласован Тогда
				Если НЕ ИмяПользователя() = "Администратор" Тогда
					Если ЕстьПозицииСПревышениемПроцентаНаценки() Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПозицииБезПерекодировки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АП.Код КАК Код,
	|	АП.Наименование КАК Наименование
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО АП.Ссылка = Связки.ТоварФирмы
	|			И (Связки.Поставщик = &ПоставщикСвязок)
	|			И (НЕ Связки.КодТовараПоставщика ПОДОБНО ""%-%"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиПоОП
	|		ПО АП.КодОП = СвязкиПоОП.ТоварФирмы.Код
	|			И (СвязкиПоОП.Поставщик = &ПоставщикСвязок)
	|			И (НЕ СвязкиПоОП.КодТовараПоставщика ПОДОБНО ""%-%"")
	|ГДЕ
	|	АП.Ссылка В(&Товары)
	|	И Связки.КодТовараПоставщика ЕСТЬ NULL
	|	И СвязкиПоОП.КодТовараПоставщика ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ПоставщикСвязок", Справочники.Поставщики.НайтиПоКоду(582));
	Запрос.УстановитьПараметр("Товары", Товар.ВыгрузитьКолонку("Товар"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
				ТекстОшибки = "Отсутствует перекодировка с GDP по товару: " 
				+ Формат(Выборка.Код, "ЧГ=0") + " - " + Выборка.Наименование;					
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
			#КонецЕсли
			
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПозицииСПревышениемПроцентаНаценки()
	
	МаксПроцентНаценки = 1.03;
	ПозицииНайдены = Ложь;
	
	Для Каждого ТекСтрока Из Товар Цикл

		Если ТекСтрока.СуммаРеализации - ТекСтрока.СуммаНДСРеализации > ТекСтрока.СуммаЗакупБезНДС * МаксПроцентНаценки 
			И ВРег(Лев(ТекСтрока.Товар.Наименование, 4)) <> "РПО " Тогда
			
			#Если Клиент Тогда
				ТекстОшибки = "Превышен максимально допустимый процент наценки по товару: " 
				+ Формат(ТекСтрока.КодТовара, "ЧГ=0") + " - " + ТекСтрока.Товар;					
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
			#КонецЕсли
			
			ПозицииНайдены = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПозицииНайдены;
	
КонецФункции


Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	
	КачествоТовараПорядок = Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.ХорошийТовар);
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("СкладКод",Склад.Код);
	Запрос.УстановитьПараметр("ФирмаКод",Фирма.Код);
	Запрос.УстановитьПараметр("ПоставщикКод",Поставщик.Код);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("КачествоТовараПорядок",КачествоТовараПорядок);
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&СкладКод КАК СкладКод,
	               |	&ФирмаКод КАК ФирмаКод,
	               |	&ПоставщикКод КАК ПоставщикКод,
	               |	Партии.ВидПоступления КАК ВидПоступленияПорядок,
	               |	ТЧТовар.КодПартии КАК ПартияКод,
	               |	ТЧТовар.КодТовара КАК ТоварКод,
	               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
	               |	ТЧТовар.Коэфф КАК К,
	               |	ТЧТовар.СтавкаНДС КАК СтавкаНДС,
	               |	Партии.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
	               |	ТЧТовар.СуммаЗакупБезНДС КАК СуммаЗакупБезНДС,
	               |	ТЧТовар.СуммаРеализации КАК СуммаРознСНДС,
	               |	ТЧТовар.СуммаНДСРеализации КАК СуммаНДСРозн
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.УЗ_МелкооптоваяРеализация.Товар КАК ТЧТовар
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	               |		ПО (Партии.Код = ТЧТовар.КодПартии)
	               |ГДЕ
	               |	ТЧТовар.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.СкладКод КАК СкладКод,
	               |	ВТТовары.ФирмаКод КАК ФирмаКод,
	               |	ВТТовары.ВидПоступленияПорядок КАК ВидПоступленияПорядок,
	               |	ВТТовары.ПартияКод КАК ПартияКод,
	               |	ВТТовары.ТоварКод КАК ТоварКод,
	               |	ВТТовары.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
	               |	ВТТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ВТТовары.СуммаЗакупБезНДС КАК СуммаЗакупБезНДС,
	               |	ВТТовары.Количество КАК Количество,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	&Дата КАК Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.СкладКод КАК СкладКод,
	               |	ВТТовары.ФирмаКод КАК ФирмаКод,
	               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
	               |	ВТТовары.ВидПоступленияПорядок КАК ВидПоступленияПорядок,
	               |	ВТТовары.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ВТТовары.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	&Дата КАК Период,
	               |	0 КАК СуммаОкругления
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.СкладКод,
	               |	ВТТовары.ФирмаКод,
	               |	ВТТовары.ВидПоступленияПорядок,
	               |	ВТТовары.СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.ПоставщикКод КАК ПоставщикКод,
	               |	ВТТовары.СкладКод КАК СкладКод,
	               |	ВТТовары.ТоварКод КАК ТоварКод,
	               |	ВТТовары.ПартияКод КАК ПартияКод,
	               |	ВТТовары.Количество КАК Количество,
	               |	ВТТовары.СуммаЗакупБезНДС КАК СуммаЗакупБезНДС,
	               |	ВТТовары.СуммаРознСНДС КАК СуммаРознСНДС,
	               |	ВТТовары.СуммаНДСРозн КАК СуммаНДСРозн,
	               |	ВТТовары.ФирмаКод КАК ФирмаКод,
	               |	ВТТовары.К КАК К,
	               |	&Дата КАК Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТТовары";
				   
			Результат = Запрос.ВыполнитьПакет();	  
			

			ТаблицыДвижений.Вставить("УЗ_Партии", Результат[1].Выгрузить());
			ТаблицыДвижений.Вставить("УЗ_ТоварныйОтчет", Результат[2].Выгрузить());
			ТаблицыДвижений.Вставить("МелкооптовыеРеализации", Результат[3].Выгрузить());

				   
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	  	
	ТаблицыДвижений = Новый Структура();
	
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	
	Таблица= ТаблицыДвижений.УЗ_Партии;
	Движения.УЗ_Партии.Записывать = Истина;
	Движения.УЗ_Партии.Загрузить(Таблица);	
		
	Таблица= ТаблицыДвижений.УЗ_ТоварныйОтчет;
	Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
	Движения.УЗ_ТоварныйОтчет.Загрузить(Таблица);
	
	Таблица= ТаблицыДвижений.МелкооптовыеРеализации;
	Движения.МелкооптовыеРеализации.Записывать = Истина;
	Движения.МелкооптовыеРеализации.Загрузить(Таблица);
	
	//Если СтатусДокАптеки = Перечисления.СтатусДокАптеки.КОбработкеОфисом Тогда
	//	ВыгрузитьВАптеку();
	//КонецЕсли;	
	
	ПоместитьВОбменСкладБух();
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДатаПоследнегоИзменения = ТекущаяДата();
	
	Если НЕ ЭтоНовый() Тогда
		Если Год(Дата)>Год(Ссылка.Дата) Тогда
			УстановитьНовыйНомер();
		КонецЕсли; 			
	КонецЕсли;
	
	
	СуммаЗакупБезНДС = Товар.Итог("СуммаЗакупБезНДС");
	СуммаРеализации = Товар.Итог("СуммаРеализации");
	
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьНаЗаполнение(Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 		
		
		Если СтатусВСистемеЭДО.Пустая() Тогда
			ВидыЭД = Новый Массив;
			ВидыЭД.Добавить(Перечисления.ВидыЭлектронныхДокументов.ТоварнаяНакладнаяНаВозврат);
			ВидыЭД.Добавить(Перечисления.ВидыЭлектронныхДокументов.СчетФактураНаВозврат);
			СтатусВСистемеЭДО = ОМ_ТСО.ПолучитьНачальныйСтатусЭДО(ВидыЭД, Фирма, Поставщик);
		КонецЕсли;
		
		Если СтатусВыгрузкиОпт.Пустая() Тогда
			Если Статус = Перечисления.СтатусыСписания.Проведен
				И ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю 
				И Поставщик.Код = 3055 Тогда
				СтатусВыгрузкиОпт = Перечисления.СтатусыВыгрузки.ОжидаетВыгрузки;
			Иначе
				СтатусВыгрузкиОпт = Перечисления.СтатусыВыгрузки.НеТребуетВыгрузки;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
		Если Отказ = Истина Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьСменуСостоянияДокумента(Ссылка,РежимЗаписи,ПометкаУдаления);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Статус = Перечисления.СтатусыСписания.Согласован 
		И ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю Тогда
		Если Поставщик.Код = 3055 Тогда
			ОМ_ТСО.ЗарегистрироватьОбъектДляВыгрузки(Ссылка, Перечисления.ВидыВыгрузок.ВыгрузкаПредварительногоРеестраМОР);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//НЭТИ Барданов А.Ю. 14.01.2019 ENT-1031
Функция ЕстьТоварыБезПерекодировки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АП.Наименование КАК Товар
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО АП.Ссылка = Связки.ТоварФирмы
	|			И (Связки.Поставщик = &ПоставщикСвязок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиПоОП
	|		ПО АП.КодОП = СвязкиПоОП.ТоварФирмы.Код
	|			И (СвязкиПоОП.Поставщик = &ПоставщикСвязок)
	|ГДЕ
	|	Связки.КодТовараПоставщика ЕСТЬ NULL
	|	И СвязкиПоОП.КодТовараПоставщика ЕСТЬ NULL
	|	И АП.Ссылка В(&Товары)";

	Запрос.УстановитьПараметр("ПоставщикСвязок", Поставщик);
	Запрос.УстановитьПараметр("Товары", Товар.ВыгрузитьКолонку("Товар"));

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			#Если Клиент Тогда
				Сообщить("Отсутствует перекодировка с поставщиком по товару: " + Выборка.Товар);
			#КонецЕсли
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

//НЭТИ Барданов А.Ю. 14.01.2019 ENT-1031
Процедура ЗаполнитьТЧНесопоставленныеТовары() Экспорт
	НесопоставленныйТовар.Очистить();
	ПоставщикиДляПроверкиСвязок=Документы.УЗ_МелкооптоваяРеализация.ПоставщикиДляПроверкиСвязок();
	Если НЕ (ПоставщикиДляПроверкиСвязок.Найти(Поставщик) <> Неопределено 
		И ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю) Тогда
		Возврат;
	КонецЕсли; 	
	НесопоставленныеТоварыОбъекта = Документы.УЗ_МелкооптоваяРеализация.НесопоставленныеТоварыОбъекта(ЭтотОбъект);
	МассивНесопоставленных = НесопоставленныеТоварыОбъекта.ВыгрузитьКолонку("СсылкаНаТовар");
	Для Каждого	Элемент Из Товар Цикл
		Если МассивНесопоставленных.Найти(Элемент.Товар) <> Неопределено Тогда
			НоваяСтрокаНесопоставленных = НесопоставленныйТовар.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНесопоставленных,Элемент);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

