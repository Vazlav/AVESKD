 Перем ТекстИнфо;
 

Функция Архивация(Файл)
	//Проверяем на наличие файла (на всяк случай ), потом геть его в архив, а dbf удаляем
	ВремФайл = Новый Файл(Файл);
	Если ВремФайл.Существует() Тогда
		ИмяАрхива = ВремФайл.Путь + "" + ВремФайл.ИмяБезРасширения + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный); 
		ФайлАрхива.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно); 
		ФайлАрхива.Записать();
		УдалитьФайлы(Файл);
	КонецЕсли;
	Возврат Новый Файл(ИмяАрхива);
КонецФункции

Процедура СформироватьСтруктуруДБФ(ТЗ,ДБФ)
			
			//============================< Генерим структуру DBF по ТЗ >================================GtG===
			Для Каждого Кол из ТЗ.Колонки Цикл
				//----------------------------------------------------------------------
				// Номер документа, дата и код аптеки нам в теле DBF не нужны, посему пропускаем их
				Если (Кол.Имя = "NDOC") или (Кол.Имя = "DateDoc") или (Кол.Имя = "PODRCD") Тогда
					Продолжить;
				КонецЕсли;
				//--------------------------------------------------------Virus----КОНЕЦ--28.11.2007
				
				Если Кол.ТипЗначения.СодержитТип(Тип("Дата")) ТОгда
					Т="D";
					Д=0;
					Тч=0;
				ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Число")) Тогда	
					Т="N";
					Д=15;
					Тч=2;
				ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Строка")) Тогда	
					Т="S";
					Д=150;
					Тч=0;
				Иначе
					//Сообщить("хрен знает какой тип");
				КонецЕсли;
				
				Если (Кол.Имя = "EAN13") или (Кол.Имя = "ExtParty") Тогда
					Т="S";
					Д=13;
					Тч=0;
				ИначеЕсли (Кол.Имя = "NameOKEI") или (Кол.Имя = "NDefOKEI") Тогда
					Т="S";
					Д=10;
					Тч=0;
				ИначеЕсли (Кол.Имя = "INN") Тогда
					Т="S";
					Д=12;
					Тч=0;
				ИначеЕсли (Кол.Имя = "KPP") Тогда
					Т="S";
					Д=9;
					Тч=0;
				КонецЕсли;
				
				ДБФ.поля.Добавить(Кол.Имя,Т,Д,Тч);
			КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьФайлДанными(ФайлВыгрузки,РезШапка,РезТело,СтруктураАидов,ТипДокумента)
	
	ТХТ = "ВЫБРАТЬ
	      |	НастройкаВыгрузкиВ_АМ2.DOCTYPE,
	      |	НастройкаВыгрузкиВ_АМ2.NBLOCK,
	      |	НастройкаВыгрузкиВ_АМ2.NFIELD,
	      |	НастройкаВыгрузкиВ_АМ2.МД,
	      |	НастройкаВыгрузкиВ_АМ2.ИмяРеквизитаДокумента,
	      |	НастройкаВыгрузкиВ_АМ2.Вычисляемое,
	      |	НастройкаВыгрузкиВ_АМ2.VAL,
	      |	НастройкаВыгрузкиВ_АМ2.TVAL
	      |ИЗ
	      |	РегистрСведений.НастройкаВыгрузкиВ_АМ2 КАК НастройкаВыгрузкиВ_АМ2
	      |ГДЕ
	      |	НастройкаВыгрузкиВ_АМ2.DOCTYPE = 191";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("NBLOCK",1);
	НастройкиШапка = ТЗ.НайтиСтроки(Отбор);
	СтрШ = РезШапка.Получить(0);
	
	Для каждого стр из НастройкиШапка Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки,стр);
		ФайлВыгрузки.Val	= Вычислить(ФайлВыгрузки.Val); 
		ФайлВыгрузки.NDOC	= 1;
		//ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
		Если Склад.Делфи = Ложь Тогда
			ФайлВыгрузки.AID = "{"+ Формат(Номер,"ЧГ=0") + ",0}";
		Иначе
			ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
		КонецЕсли;
		
		ФайлВыгрузки.AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
		ФайлВыгрузки.NSTR	= 1;
		ФайлВыгрузки.Записать();
	КонецЦикла;
	
	
	Отбор = Новый Структура("NBLOCK",2);
	НастройкиТело = ТЗ.НайтиСтроки(Отбор);
	НомерСтр = 0;
	Для каждого Стр из РезТело Цикл
		НомерСтр = НомерСтр + 1;		
		Для каждого СтрНастройка из НастройкиТело Цикл
			Если РезТело.Колонки.Найти(СокрЛП(СтрНастройка.NFIELD)) = неопределено Тогда
				Продолжить;
			КонецЕсли;
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки,СтрНастройка);	
			ФайлВыгрузки.Val	= Вычислить(ФайлВыгрузки.Val); 
			ФайлВыгрузки.NSTR	= НомерСтр;
			//ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
			Если Склад.Делфи = Ложь Тогда
				ФайлВыгрузки.AID = "{"+ Формат(Номер,"ЧГ=0") + ",0}";
			Иначе
				ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
			КонецЕсли;
			
			ФайлВыгрузки.AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
			ФайлВыгрузки.NDOC	= 1;
			ФайлВыгрузки.Записать();
		КонецЦикла;
		
	КонецЦикла;	
	
	//Если РезУдаленных.Количество() > 0 Тогда
	//	
	//	Отбор = Новый Структура("NBLOCK",3);
	//	НастройкиУдаленных = ТЗ.НайтиСтроки(Отбор);
	//	//НомерСтр = 0;  Номер строки продолжаем из блока два
	//	Для каждого Стр из РезУдаленных Цикл
	//		НомерСтр = НомерСтр + 1;		
	//		Для каждого СтрНастройка из НастройкиУдаленных Цикл
	//			ФайлВыгрузки.Добавить();
	//			ЗаполнитьЗначенияСвойств(ФайлВыгрузки,СтрНастройка);	
	//			ФайлВыгрузки.Val	= Вычислить(ФайлВыгрузки.Val); 
	//			ФайлВыгрузки.NSTR	= НомерСтр;
	//			ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
	//			ФайлВыгрузки.AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
	//			ФайлВыгрузки.NDOC	= 1;
	//			ФайлВыгрузки.Записать();
	//		КонецЦикла;
	//		
	//	КонецЦикла;	
	//КонецЕсли;
	
КонецПроцедуры



Функция ВыгрузитьВАптеку(ВыгрузкаПодтверждения=Ложь) Экспорт
	
	Если СкладПолучатель.Делфи = Ложь и ВыгрузкаПодтверждения = Ложь Тогда  //старый формат и обмен
		КаталогФТП = Константы.КаталогФТП.Получить();
		//ВременныйКаталог = КаталогФТП;"\\z140\Astor_Ph2\Mail\";
		ДБФ= Новый  Xbase;
		ДБФ.Кодировка = КодировкаXBase.ANSI;
		
		ТХТ = "ВЫБРАТЬ
		|	ПеремещениеТовараТовар.Ссылка.Номер КАК NDOC,
		|	ПеремещениеТовараТовар.Ссылка.Дата КАК DateDoc,
		|	ПеремещениеТовараТовар.Ссылка.СкладПолучатель.Код КАК PODRCD,
		|	ПеремещениеТовараТовар.Ссылка.Склад.Код КАК PODRAPCD,
		|	ПеремещениеТовараТовар.Ссылка.Склад.Наименование КАК PODRAPNAME,
		|	ПеремещениеТовараТовар.Ссылка.НомерЗаявкиАптеки КАК NumZak,
		//|	ПеремещениеТовараТовар.Партия.Наименование КАК EAN13,
		|	ВЫБОР КОГДА ПеремещениеТовараТовар.Партия.БарКод.Наименование ЕСТЬ NULL ТОГДА
		|		ПеремещениеТовараТовар.Партия.Наименование
		|	ИНАЧЕ
		|		ПеремещениеТовараТовар.Партия.БарКод.Наименование КОНЕЦ КАК EAN13,					
		|	ПеремещениеТовараТовар.Партия.Наименование КАК ExtParty,
		|	ПеремещениеТовараТовар.ЕИТ.Код КАК CodeEIT,
		|	ПеремещениеТовараТовар.Коэфф КАК Koeff,					   
		|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.К КАК KoefDefEIT,
		|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.Код КАК CodeDefEIT,
		|	ПеремещениеТовараТовар.Партия.Производитель.Код КАК CodeIzg,
		|	ПеремещениеТовараТовар.Партия.СрокГодности КАК GDate,				
		|	ПеремещениеТовараТовар.КоличествоФакт КАК Qnt,
		|	ПеремещениеТовараТовар.Партия.ЦенаПроизводителяБезНДС  КАК Price_Izg,
		|	ПеремещениеТовараТовар.ЦенаЗакуп КАК PricePost,
		|	ПеремещениеТовараТовар.ЦенаРознПол КАК PriceR,
		|	ПеремещениеТовараТовар.СтавкаНДС.Ставка КАК Nds,				
		|	ПеремещениеТовараТовар.Партия.СерияСтрока КАК Ser,
		|	ПеремещениеТовараТовар.ЕИТ.ЕдИзм.Код КАК OKEI,
		|	ПеремещениеТовараТовар.ЕИТ.ЕдИзм.Наименование КАК NameOKEI,
		|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.ЕдИзм.Код КАК CodDefOKEI,
		|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.ЕдИзм.Наименование КАК NDefOKEI,
		|	ПеремещениеТовараТовар.Товар.ГруппаФТГ.Код КАК CodeFTG,
		|	ПеремещениеТовараТовар.Товар.ГруппаФТГ.Наименование КАК NameFTG,
		|	ПеремещениеТовараТовар.ЕИТ.НаименованиеТовара КАК NameGood,
		|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.НаименованиеТовара КАК NGoodEIT,
		|	ПеремещениеТовараТовар.Партия.Производитель.Наименование КАК NameIzg,
		|	ПеремещениеТовараТовар.Партия.НомерГТД.Наименование КАК GTD,
		|	ПеремещениеТовараТовар.Партия.НомерГТД.Страна.Наименование КАК Country
		|ИЗ
		|	Документ.ПеремещениеТовара.Товар КАК ПеремещениеТовараТовар
		|ГДЕ
		|	ПеремещениеТовараТовар.Ссылка = &Док
		|";
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Док",ЭтотОбъект.Ссылка);
		
		Рез=Запрос.Выполнить();
		
		ТЗ=Рез.Выгрузить();
		
		СформироватьСтруктуруДБФ(ТЗ,ДБФ);
		
		
		//ФайлВыгрузки=ВременныйКаталог + "temp.dbf";
		ВремНомДок = "";
		ВремИмяФайла = "";
		НормальноеИмяФайла = "";
		КонечныйКаталогФайла = КаталогВременныхФайлов();
		ВремИмяФайла =КонечныйКаталогФайла + "temp.dbf"; 
		Попытка
			ДБФ.СоздатьФайл(ВремИмяФайла); // Создаем новый для обработки следующего документа
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		стр = ТЗ.Получить(0);
		Если ВидОперации = Перечисления.ВидыОпераций.МежскладскаяПередача Тогда
			Префикс =  "trs";
		Иначе
			Префикс =  "prh";
		КонецЕсли;
		КодАптеки = Формат(Стр.PODRCD,"ЧГ=0");
		ВремНомДок = стр.NDOC;
		КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(КодАптеки)=1,"0"+КодАптеки,КодАптеки) + "\In\";
		ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
		НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + СокрЛП(КодАптеки) + "_" + СокрЛП(Формат(ВремНомДок,"ЧГ=0")) + "_" + СокрЛП(Лев(Стр.DateDoc,10)) +".dbf";
		
		Для Каждого Стр из ТЗ Цикл  //Пробегаем по ТЗ ...дальше будем бегать по полям в текущ. строке
			
			ДБФ.Добавить();
			Инд = 0;
			//------------------<ВАЖНО>-------------------Virus----28.11.2007
			// Обход начинаем с третьей колонки, т.к. нам они нужны только для разделения 
			// одной ТЗ на количество файлов , которое будет соответствовать кол-ву документов в ТЗ.
			// ВЫВОД: в запросе первые три поля НЕ ТРОГАТЬ !!!!!!!!!!!
			Партия = "";
			КоэффПоУмолчанию = 1;
			КодЕИТПоУмолчанию = 0;
			ТоварПоУмолчанию = "";
			Подменять = 0;
			Для к=3 По ТЗ.Колонки.Количество() - 1 Цикл  //пробегаем по значениям полей в строке
				Имя = ТЗ.Колонки.Получить(к);
				Если Имя.Имя = "ExtParty" Тогда
					Партия = стр.Получить(к); 
				КонецЕсли;
				
				Значение = стр.Получить(к);
				
				
				состояние(Значение);
				ДБф.УстановитьЗначениеПоля(Инд,Значение);
				Инд=Инд+1;
			КонецЦикла;
			//ДБФ.Кодировка = КодировкаXBase.ANSI;
			Дбф.Записать();
			
		КонецЦикла;
		
		Если ДБФ.Открыта()  = Истина Тогда
			ДБФ.ЗакрытьФайл();
		КонецЕсли;
		
		Попытка
			ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла); // переименовываем в норм. вид
			Архивация(НормальноеИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат ложь;
		КонецПопытки;
		
	ИНаче
		
		//Найдем док в регистре котрольных сумм
		//Нз=РегистрыСведений.КонтрольныеСуммыАптечныхДокументов.СоздатьНаборЗаписей();
		//ОтборПоДокументу=Нз.Отбор.Найти("Объект");
		//ОтборПоДокументу.Установить(Ссылка,Истина);
		//
		//НЗ.Прочитать();
		//
		//Если НЗ.Количество()=0 Тогда
		//	#Если Клиент Тогда
		//		Сообщить("Выгрузка невозможна. Не найден документ в регистре контрольных сумм. Док: " + Ссылка);	
		//	#КонецЕсли
		//	Возврат Ложь; // данные об этом документе из аптеки не приходили и в офисе его не создавали.
		//КонецЕсли;	
		
		
		СтруктураАидов = Обмен.СоздатьЗаписьВРеестре(Ссылка,191);
		Если СтруктураАидов = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("Не удалось создать запись в реестре документов. Документ не может быть выгружен");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;		
		
		Если ВыгрузкаПодтверждения = Истина Тогда
			ВыгружаемаяАптека = Склад;
			КаталогОбмена=Склад.КаталогОбмена;
		Иначе
			Если СтруктураАидов.ВнешнийАид = "{0,0}" Тогда
				СтруктураАидов.ВнешнийАид = "{"+Формат(СтруктураАидов.НашАид,"ЧГ=0")+","+ Формат(Склад.Код,"ЧГ=0")+"}";
			КонецЕсли;			
			ВыгружаемаяАптека = СкладПолучатель;
			КаталогОбмена=СкладПолучатель.КаталогОбмена;
		КонецЕсли;

		ТипДокумента = 191;
		
		ТХТ = "ВЫБРАТЬ
		      |	&AID КАК AID,
		      |	&AIDEXT КАК AIDEXT,
		      |	&ТипДокумента КАК DOCTYPE,
		      |	1 КАК NSTR,
		      |	СУММА(Перемещение.СуммаЗакуп) КАК sum_z_w_nds,
		      |	СУММА(Перемещение.НДСЗакуп) КАК sum_z_nds,
		      |	СУММА(Перемещение.СуммаРозн) КАК sum_r_w_nds_src,
		      |	СУММА(Перемещение.НДСРозн) КАК sum_r_nds_src,
		      |	СУММА(Перемещение.СуммаРознПол) КАК sum_r_w_nds_dst,
		      |	СУММА(Перемещение.НДСРознПол) КАК sum_r_nds_dst,
		      |	Перемещение.Ссылка.Дата КАК ddoc,
		      |	Перемещение.Ссылка.НомДокАптеки КАК ndoc,
		      |	Перемещение.Ссылка.Склад.Код КАК id_dep,
		      |	Перемещение.Ссылка.СкладПолучатель.Код КАК id_dep_dst,
		      |	Перемещение.Ссылка.ПометкаУдаления КАК is_deleted
		      |ИЗ
		      |	Документ.ПеремещениеТовара.Товар КАК Перемещение
		      |ГДЕ
		      |	Перемещение.Ссылка = &Ссылка
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	Перемещение.Ссылка.Дата,
		      |	Перемещение.Ссылка.НомДокАптеки,
		      |	Перемещение.Ссылка.Склад.Код,
		      |	Перемещение.Ссылка.СкладПолучатель.Код,
		      |	Перемещение.Ссылка.ПометкаУдаления";		
		
		Запрос = Новый Запрос;
		запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Если Склад.Делфи = Ложь Тогда
			Запрос.УстановитьПараметр("AID","{"+ Формат(Номер,"ЧГ=0") + ",0}");
		Иначе
			Запрос.УстановитьПараметр("AID",СтруктураАидов.ВнешнийАид);
		КонецЕсли;
		Запрос.УстановитьПараметр("AIDEXT",СтруктураАидов.НашАид);
		Запрос.УстановитьПараметр("ТипДокумента",ТипДокумента);		
		РезШапка = Запрос.Выполнить().Выгрузить();
		
		Если ВыгрузкаПодтверждения = Истина Тогда
			
			ТХТ = "ВЫБРАТЬ
			|	&AID КАК AID,
			|	&AIDEXT КАК AIDEXT,
			|	&ТипДокумента КАК DOCTYPE,
			|	1 КАК NDOC,
			|	Перемещение.Товар.Код КАК id_good,
			|	Перемещение.Товар.Наименование КАК ngood,
			|	Перемещение.Товар.ЕдиницаПоУмолчанию.К КАК coeff_def,
			|	Перемещение.Коэфф КАК coeff,
			|	Перемещение.КоличествоФакт КАК qnt,
			|	Перемещение.СтавкаНДС.Ставка КАК p_nds_z,
			|	Перемещение.СтавкаНДС.Ставка КАК p_nds_r,
			|	Перемещение.СуммаЗакуп КАК sum_z_w_nds,
			|	Перемещение.НДСЗакуп КАК sum_z_nds,
			|	Перемещение.СуммаРозн КАК sum_r_w_nds_src,
			|	Перемещение.НДСРозн КАК sum_r_nds_src,
			|	Перемещение.СуммаРознПол КАК sum_r_w_nds_dst,
			|	Перемещение.НДСРознПол КАК sum_r_nds_dst,
			|	Перемещение.Партия.Код КАК extpart,
			|	ВЫБОР
			|		КОГДА Перемещение.Товар.ЕдиницаПоУмолчанию.К > 1
			|				И Перемещение.Коэфф = 1
			|				И Перемещение.Партия.ЕИТЗакупки.К > 1
			|			ТОГДА Перемещение.Товар.ЕдиницаПоУмолчанию.К
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК conversion
			|ИЗ
			|	Документ.ПеремещениеТовара.Товар КАК Перемещение
			|ГДЕ
			|	Перемещение.Ссылка = &Ссылка";		
		Иначе
			ТХТ = "ВЫБРАТЬ
			      |	&AID КАК AID,
			      |	&AIDEXT КАК AIDEXT,
			      |	&ТипДокумента КАК DOCTYPE,
			      |	1 КАК NDOC,
			      |	Перемещение.Товар.Код КАК id_good,
			      |	Перемещение.Товар.Наименование КАК ngood,
				  |	Подстрока(Перемещение.Товар.МеждународноеНазвание,1,100) КАК latname,
			      |	Перемещение.Товар.ЕдиницаПоУмолчанию.К КАК coeff_def,
			      |	Перемещение.Коэфф КАК coeff,
			      |	Перемещение.КоличествоФакт КАК qnt,
			      |	Выбор когда Перемещение.СтавкаНДС.Ставка = 0 Тогда 0 иначе Перемещение.СтавкаНДС.Ставка КОНЕЦ  КАК p_nds_z,
			      |	Выбор когда Перемещение.СтавкаНДС.Ставка = 0 Тогда 0 иначе Перемещение.СтавкаНДС.Ставка КОНЕЦ  КАК p_nds_r,
			      |	Перемещение.СуммаЗакуп КАК sum_z_w_nds,
			      |	Перемещение.НДСЗакуп КАК sum_z_nds,
			      |	Перемещение.СуммаРозн КАК sum_r_w_nds_src,
			      |	Перемещение.НДСРозн КАК sum_r_nds_src,
			      |	Перемещение.СуммаРознПол КАК sum_r_w_nds_dst,
			      |	Перемещение.НДСРознПол КАК sum_r_nds_dst,
			      |	Перемещение.Партия.Код КАК extpart,
			      |	ВЫБОР
			      |		КОГДА Перемещение.Товар.ЕдиницаПоУмолчанию.К > 1
			      |				И Перемещение.Коэфф = 1
			      |				И Перемещение.Партия.ЕИТЗакупки.К > 1
			      |			ТОГДА Перемещение.Товар.ЕдиницаПоУмолчанию.К
			      |		ИНАЧЕ 1
			      |	КОНЕЦ КАК conversion,
			      |	ЕСТЬNULL(Перемещение.Партия.Производитель.Код, 0) КАК id_producer,
			      |	Перемещение.Партия.Производитель.Наименование КАК n_producer,
			      |	ЕСТЬNULL(Перемещение.Партия.Поставщик.Код, 0) КАК id_contragent,
			      |	Перемещение.Партия.Поставщик.ПолнНаименование КАК n_contragent,
			      |	Перемещение.Партия.Поставщик.ИНН КАК inn,
			      |	Перемещение.Партия.Поставщик.КПП КАК kpp,
			      |	Перемещение.Партия.СрокГодности КАК dvalid,
			      |	Выбор когда Перемещение.Партия.СерияСтрока = """" Тогда ""*"" Иначе Перемещение.Партия.СерияСтрока КОНЕЦ КАК series,
			      |	Перемещение.Партия.БарКод.Наименование КАК eancode,
			      |	Перемещение.Партия.Наименование КАК barcode,
			      |	ЕСТЬNULL(Перемещение.Партия.НомерГТД.Код, 0) КАК id_ngtd,
			      |	Перемещение.Партия.НомерГТД.Наименование КАК n_ngtd,
			      |	ЕСТЬNULL(Перемещение.Сертификат.Код, 0) КАК id_certif,
			      |	Перемещение.Сертификат.Наименование КАК n_certif,
			      |	Перемещение.Партия.ЦенаГосРегистрации КАК cost_g_wo_nds,
			      |	Перемещение.Партия.ЦенаПроизводителяБезНДС КАК cost_p_wo_nds,
			      |	ЕСТЬNULL(Перемещение.Партия.ВидПоступленияТовара.Порядок, 0) КАК id_type_in
			      |ПОМЕСТИТЬ ТМП
			      |ИЗ
			      |	Документ.ПеремещениеТовара.Товар КАК Перемещение
			      |ГДЕ
			      |	Перемещение.Ссылка = &Ссылка
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	ТМП.AID,
			      |	ТМП.AIDEXT,
			      |	ТМП.DOCTYPE,
			      |	ТМП.NDOC,
			      |	ТМП.id_good,
			      |	ТМП.ngood,
				  |	ТМП.latname,
			      |	ТМП.coeff_def,
			      |	ТМП.coeff,
			      |	ТМП.qnt,
			      |	ТМП.p_nds_z,
			      |	ТМП.p_nds_r,
			      |	ТМП.sum_z_w_nds,
			      |	ТМП.sum_z_nds,
			      |	ТМП.sum_r_w_nds_src,
			      |	ТМП.sum_r_nds_src,
			      |	ТМП.sum_r_w_nds_dst,
			      |	ТМП.sum_r_nds_dst,
			      |	ТМП.extpart,
			      |	ТМП.conversion,
			      |	ТМП.id_producer,
			      |	ТМП.n_producer,
			      |	Выбор когда ТМП.id_contragent = 0 Тогда 588 Иначе ТМП.id_contragent КОНЕЦ как id_contragent,
			      |	Выбор когда ТМП.id_contragent = 0 Тогда ""ООО АПТЕКА-А.в.е"" ИНАЧЕ ТМП.n_contragent КОНЕЦ как n_contragent,
			      |	Выбор когда ТМП.id_contragent = 0 Тогда ""7705947629"" ИНАЧЕ ТМП.inn КОНЕЦ как inn,
			      |	Выбор когда ТМП.id_contragent = 0 Тогда ""770501001"" ИНАЧЕ ТМП.kpp КОНЕЦ как kpp,
			      |	ТМП.dvalid,
			      |	ТМП.series,
			      |	ТМП.eancode,
			      |	ТМП.barcode,
			      |	ТМП.id_ngtd,
			      |	ТМП.n_ngtd,
			      |	ТМП.id_certif,
			      |	ТМП.n_certif,
			      |	ВЫБОР
			      |		КОГДА ТМП.conversion > 1
			      |			ТОГДА ТМП.cost_g_wo_nds / ТМП.conversion
			      |		ИНАЧЕ ТМП.cost_g_wo_nds
			      |	КОНЕЦ КАК cost_g_wo_nds,
			      |	ВЫБОР
			      |		КОГДА ТМП.conversion > 1
			      |			ТОГДА ТМП.cost_p_wo_nds / ТМП.conversion
			      |		ИНАЧЕ ТМП.cost_p_wo_nds
			      |	КОНЕЦ КАК cost_p_wo_nds,
			      |	ТМП.id_type_in
			      |ИЗ
			      |	ТМП КАК ТМП
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ТМП";			  
			
		КонецЕсли;
		
		запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Если Склад.Делфи = Ложь Тогда
			Запрос.УстановитьПараметр("AID","{"+ Формат(Номер,"ЧГ=0") + ",0}");
		Иначе
			Запрос.УстановитьПараметр("AID",СтруктураАидов.ВнешнийАид);
		КонецЕсли;
		Запрос.УстановитьПараметр("AIDEXT",СтруктураАидов.НашАид);
		Запрос.УстановитьПараметр("ТипДокумента",ТипДокумента);

		РезТело = Запрос.Выполнить().Выгрузить();
		
		
		//ТХТ = "ВЫБРАТЬ
		//	  |	&AID КАК AID,
		//	  |	&AIDEXT КАК AIDEXT,
		//	  |	&ТипДокумента КАК DOCTYPE,
		//	  |	1 КАК NDOC,
		//	  |	Перемещение.Товар.Код КАК id_good,
		//	  |	ИСТИНА КАК is_deleted,
		//	  |	Перемещение.Партия.Код КАК extpart
		//	  |ИЗ
		//	  |	Документ.ПеремещениеТовара.НеудовлетвореннаяПотребность КАК Перемещение
		//	  |ГДЕ
		//	  |	Перемещение.Ссылка = &Ссылка";		
		//
		//
		//запрос.Текст = ТХТ;
		//Запрос.УстановитьПараметр("Ссылка",Ссылка);
		//Запрос.УстановитьПараметр("AID",СтруктураАидов.ВнешнийАид);
		//Запрос.УстановитьПараметр("AIDEXT",СтруктураАидов.НашАид);
		//Запрос.УстановитьПараметр("ТипДокумента",ТипДокумента);

		//РезУдаленных = Запрос.Выполнить().Выгрузить();
		
		ФайлВыгрузки=Новый XBase();
		ФайлВыгрузки.Кодировка=КодировкаXBase.OEM;
		
		ФайлВыгрузки.поля.Добавить("DocType","N",15,0);
		ФайлВыгрузки.поля.Добавить("AID","S",30,0);
		ФайлВыгрузки.поля.Добавить("AIDEXT","S",15);
		ФайлВыгрузки.поля.Добавить("NDOC","N",15,0);
		ФайлВыгрузки.поля.Добавить("NBLOCK","N",15,0);
		ФайлВыгрузки.поля.Добавить("NSTR","N",15,0);
		ФайлВыгрузки.поля.Добавить("NField","S",30,0);
		ФайлВыгрузки.поля.Добавить("TVAL","S",1,0);
		ФайлВыгрузки.поля.Добавить("Val","S",150,0);
		
		ИмяФайлаВыгрузки=КаталогОбмена+"indocs"+Формат(ВыгружаемаяАптека.код,"ЧГ=")+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+"_"+Формат(Номер,"ЧГ=0")+".zip";
		Уник = Новый УникальныйИдентификатор;
		Уник = Прав(Уник,8);
		ИмяВременногоДБФ=КаталогВременныхФайлов()+Уник+".dbf";
		
		ФайлВыгрузки.СоздатьФайл(ИмяВременногоДБФ);
		
        ЗаполнитьФайлДанными(ФайлВыгрузки,РезШапка,РезТело,СтруктураАидов,ТипДокумента);
		
		
		
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		
		ИмяФайлаДляАрхивации=СтрЗаменить(ИмяВременногоДБФ,"\"+Уник + ".","\indocs"+Формат(ВыгружаемаяАптека.код,"ЧГ=")+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+"_"+Формат(Номер,"ЧГ=0")+".");
		
		ПереместитьФайл(ИмяВременногоДБФ,ИмяФайлаДляАрхивации);
		
		
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку(ИмяФайлаДляАрхивации,ИмяФайлаВыгрузки);
		
		УдалитьФайлы(ИмяФайлаДляАрхивации);
		
		
		
	КонецЕсли;
	
	Статус = Перечисления.СтатусПеремещения.ВыгруженНаАптеку;
	СтрИзм=Изменения.Добавить();
	СтрИзм.Сотрудник    = ПараметрыСеанса.ТекущийСотр;
	СтрИзм.Дата   = ТекущаяДата();
	СтрИзм.ТипИзм   = Перечисления.ДействияНадДокументами.Выгрузка;
	Если Склад.Делфи = Истина Тогда
		Если ВыгрузкаПодтверждения = Истина Тогда
			СтрИзм.КомментарийИзменения = "Выгружен на аптеку отправителя (новый формат)";
		Иначе
			СтрИзм.КомментарийИзменения = "Выгружен на аптеку получателя (новый формат)";
		КонецЕсли;
	Иначе
		СтрИзм.КомментарийИзменения = "Выгружен на аптеку";
	КонецЕсли;
	Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Истина;
	//ПереместитьФайл(Архив.ПолноеИмя,КонечныйКаталогФайла + "" +Архив.Имя);
	
	
	
КонецФункции
 
 Функция АвтоматическаяРасценка_Успешно()  Экспорт
	//==================<Автоматическая расценка прихода товара>===================GtG====21.11.2008
	// запускается 1 раз при первичном проведении документа.
	// При возникновении ошибок при расценке- дальнейшее проведение и расценка только вручную
	Успешно=Истина;
	Если ЗагруженАвтоматически=Истина и ОМ6_ЕстьЦеныПоРасценке(ЭтотОбъект.Ссылка)=Ложь Тогда
		ОМ6_ЗапуститьАвтоматическуюРасценкуДокумента (ЭтотОбъект);
		ЭтотОбъект.Прочитать();
		Если ОшибкиРасценки.Количество()>0 Тогда
			Предупреждение(""+ЭтотОбъект+" Есть ошибки по расценке товара! Документ не проводится!",3);
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			Успешно=Ложь;
		КонецЕсли;	
	КонецЕсли;
	Возврат Успешно;
КонецФункции	//АвтоматическаяРасценка

 //============================================================================ GtG ===
 Процедура ПересчетСтрокиДокумента  (ТекСтрД)
	 // Назначение:
	 // Выполняет пересчет строки документа и создает партию если ее нет
	 // Если партия есть то изменяет данные хранящиеся в ней.
	 //--------------------------------------------------------------------------------
	 //----------------------------< Пересчет по цене >--------------------------------GtG--- 
	 
	 // есть ТекСтрД.ЦенаЗакуп=ТекСтрД.ЦенаЗакупБезНДС+ТекСтрД.ЦенаЗакупБезНДС/100*ТекСтрД.СтавкаНДС.Ставка;
	 ТекСтрД.СуммаЗакуп=ТекСтрД.ЦенаЗакуп*ТекСтрД.КоличествоФАКТ; // !!! ПО ФАКТИЧЕСКОМУ КОЛВУ !!!
	 ТекСтрД.НДСЗакуп=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке  (ТекСтрД.СуммаЗакуп,ТекСтрД.СтавкаНДС);
	 //----------------------------< Пересчет нацененных сумм >--------------------------------GtG---
	 
	 //есть ТекСтрД.ЦенаРозн=ТекСтрД.ЦенаЗакуп+ТекСтрД.ЦенаЗакуп/100*ТекСтрД.ПроцентРознНац;
	 ТекСтрД.СуммаРозн=ТекСтрД.ЦенаРозн* ТекСтрД.КоличествоФАКТ;
	 ТекСтрД.НДСРозн=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке  (ТекСтрД.СуммаРозн,ТекСтрД.СтавкаНДС);
	 
	 ТекСтрД.СуммаРознПол=ТекСтрД.ЦенаРознПол* ТекСтрД.КоличествоФАКТ;
	 ТекСтрД.НДСРознПол=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке  (ТекСтрД.СуммаРознПол,ТекСтрД.СтавкаНДС);
	 
	 Если ТекСтрД.СуммаЗакуп<>0 Тогда
		 ТекСтрД.ПроцентРознНацПол=100*(ТекСтрД.СуммаРознПол-ТекСтрД.СуммаЗакуп)/ТекСтрД.СуммаЗакуп;
	 Иначе
		 #Если Клиент Тогда
			 Сообщить("Закупочная сумма получателя = 0! строка №"+ТекСтрД.НомерСтроки);  
		 #КонецЕсли
	 КонецЕсли; 
	 
	 
 КонецПроцедуры
 //============================================================================ GtG ===
 
 Процедура СообщитьИнфо(Сообщение)
	 //сообщить(Сообщение);
	 ТекстИнфо=""+ТекстИнфо+Символы.ПС+Сообщение;
 КонецПроцедуры 	   
 
 
 //============================================================================ GtG ===
 Функция ПроверкаНаНули  (Парам) 
	 // Назначение:
	 // Проверяет строки товара на наличие строк с нулевыми значениями
	 // 
	 // 
	 //--------------------------------------------------------------------------------
	 Для Каждого ТекСтрокаТовар Из Товар Цикл
		 Если ТекСтрокаТовар.Партия.ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.Подарки Тогда
			 Продолжить;
		 КонецЕсли;
		 Если число(ТекСтрокаТовар[Парам])=0 Тогда
			 Возврат ЛОЖЬ;
		 КонецЕсли;
	 КонецЦикла; 	
	 
	 Возврат Истина;
 КонецФункции
 //============================================================================ GtG ===
 
 //============================================================================ GtG ===
 Функция ПолучитьОстаткиТоваров() 
	 // Назначение:
	 // получает остатки товаров по регистру остатков
	 // с партиями либо без оных
	 // 
	 //--------------------------------------------------------------------------------
	 #Если Клиент Тогда
		 Состояние("Расчет остатков склада....");
	 #КонецЕсли
	 МассивИсх=Товар.ВыгрузитьКолонку("Товар");
	 Массив= Новый  Массив;
	 
	 Для каждого ЭлемМасс Из МассивИсх Цикл
		 #Если Клиент Тогда
			 Состояние("Расчет остатков склада....");
		 #КонецЕсли
		 Массив.Добавить(ЭлемМасс);
	 КонецЦикла; 
	 
	 
	 СписокТоваровТекстом=ЗначениеВСтрокуВнутр(Массив);
	 ТЗ=ОМ13_ПолучитьОстаткиПоСписку_СПартиями(Дата,СписокТоваровТекстом,Склад.Фирма,Склад);
	 #Если Клиент Тогда
		 Состояние("Расчет остатков склада....");
	 #КонецЕсли
	 Возврат ТЗ;
 КонецФункции
 //============================================================================ GtG ===
 
 //============================================================================ GtG ===
 Функция НащипатьИзДругихСерий  (БылоЗаказано,ОстаткиБезПартий,Фильтр,Стр) 
	 // Назначение:
	 // Берет товары из других серий
	 //--------------------------------------------------------------------------------
	 
	 МНС=ОстаткиБезПартий.НайтиСтроки(Фильтр);
	 
	 БЗ=БылоЗаказано; // в базовых ЕИТах
	 
	 Для Ы=0 По МНС.Количество()-1 Цикл
		 
		 СтрМНС=МНС.Получить(Ы);
		 
		 
		 //сообщитьИнфо(" МНС колво серия = "+СтрМНС.КолвоОстаток+"    "+СтрМНС.Серия);
		 Если СтрМНС.Серия=Стр.Серия Тогда
			 //сообщитьИнфо("пропускаем - уже обработана");
			 Продолжить;
		 КонецЕсли; 
		 
		 Если СтрМНС.КолвоОстаток=0 Тогда
			 //сообщитьИнфо("пропускаем - остаток =0");
			 Продолжить;
		 КонецЕсли; 
		 
		 
		 
		 //сообщитьИнфо("Добавим строку из другой СЕРИИ!");
		 
		 //----------------------------< Добавляем новую строку с другой серией >--------------------------------GtG---
		 НоваяСтр=ТОвар.Добавить();
		 НоваяСтр.Товар=Стр.Товар;
		 НоваяСтр.ЕИТ=Стр.ЕИТ;
		 НоваяСтр.Коэфф=Стр.Коэфф;
		 НоваяСтр.Серия=СтрМНС.Серия; // оно же и срок годности
		 НоваяСтр.Сертификат=НоваяСтр.Серия.Сертификат;
		 НоваяСтр.СтавкаНДС=СтрМНС.СтНДС;
		 
		 НоваяСтр.ЦенаЗакуп=СтрМНС.СуммаЗакупСНДСОстаток/СтрМНС.КолвоОстаток*НоваяСтр.Коэфф;
		 
		 НоваяСтр.ЦенаРозн=СтрМНС.СуммаРознСНДСОстаток/СтрМНС.КолвоОстаток*НоваяСтр.Коэфф;
		 
		 
		 //сообщитьИнфо("СтрМНС.КолвоОстаток>=БЗ   :"+СтрМНС.КолвоОстаток+">="+БЗ);
		 
		 Если СтрМНС.КолвоОстаток>=БЗ Тогда
			 НоваяСтр.Количество=БЗ/НоваяСтр.Коэфф;// еще останется на складе
			 //----------------------------< проблемы последней копейки нет >--------------------------------GtG--- 
			 НоваяСтр.НДСЗакуп=СтрМНС.СуммаНДСЗакупОстаток/СтрМНС.КолвоОстаток*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 НоваяСтр.СуммаЗакуп=СтрМНС.СуммаЗакупСНДСОстаток/СтрМНС.КолвоОстаток*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 
			 НоваяСтр.НДСРозн=СтрМНС.СуммаРознНДСОстаток/СтрМНС.КолвоОстаток*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 НоваяСтр.СуммаРозн=СтрМНС.СуммаРознСНДСОстаток/СтрМНС.КолвоОстаток*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 
			 
		 Иначе
			 НоваяСтр.Количество=СтрМНС.КолвоОстаток/НоваяСтр.Коэфф;// забираем все!
			 //----------------------------< проблема последней копейки есть >--------------------------------GtG--- 
			 НоваяСтр.НДСЗакуп=СтрМНС.СуммаНДСЗакупОстаток;
			 НоваяСтр.СуммаЗакуп=СтрМНС.СуммаЗакупСНДСОстаток;
			 
			 НоваяСтр.НДСРозн=СтрМНС.СуммаРознНДСОстаток;
			 НоваяСтр.СуммаРозн=СтрМНС.СуммаРознСНДСОстаток;
			 
			 
			 // спишем всЁ с остатков!
		 КонецЕсли; 
		 НоваяСтр.КоличествоФакт=НоваяСтр.Количество;
		 
		 // пустая серия вызывает подбор из пустых и не пустых
		 // в результате могут образовываться новые строки документа
		 // как с пустыми так и не пустыми сериями, так что может 
		 // возникнуть прог8рессия строк документа!!! 
		 НоваяСтр.НеОбрабатывать=Истина; // если серия пустая, то при повторном проведении она не будет обработана
		 
		 //сообщить("Нащипал строку серии");
		 
		 БЗ=БЗ-НоваяСтр.Количество;
		 
	 КонецЦикла; 
	 
	 Возврат БЗ;
	 
 КонецФункции
 //============================================================================ GtG ===
 Функция НащипатьИзДругихПартий  (БылоЗаказано,ОстаткиСПартиями,Фильтр,Стр) 
	 // Назначение:
	 // Берет товары из других партий
	 //--------------------------------------------------------------------------------
	 
	 МНС=ОстаткиСПартиями.НайтиСтроки(Фильтр);
	 
	 БЗ=БылоЗаказано; // в базовых ЕИТах
	 
	 Для Ы=0 По МНС.Количество()-1 Цикл
		 
		 Если БЗ = 0 Тогда
			 Прервать;
		 КонецЕсли;
		 
		 СтрМНС=МНС.Получить(Ы);
		 
		 
		 //сообщитьИнфо(" МНС колво Партия = "+СтрМНС.КолвоОстаток+"    "+СтрМНС.Партия);
		 Если СтрМНС.Партия=Стр.Партия Тогда
			 //сообщитьИнфо("пропускаем - уже обработана");
			 Продолжить;
		 КонецЕсли; 
		 
		 //сообщитьИнфо(" МНС колво Партия = "+СтрМНС.КолвоОстаток+"    "+СтрМНС.Партия);
		 Если (СтрМНС.КолвоОстаток=0) или (СтрМНС.Осталось=0) Тогда
			 //сообщитьИнфо("пропускаем - кол-во=0");
			 Продолжить;
		 КонецЕсли; 
		 
		 
		 //сообщитьИнфо("Добавим строку из другой ПартИИ!");
		 Если Стр.Коэфф <> СтрМНС.Партия.ЕИТЗакупки.К Тогда
			 Если НачалоДня(Дата) >= НачалоДня(Дата(2008,03,02)) Тогда
			 	Сообщить("Код: " + Стр.Товар.Код + "  -  " + СтрМНС.Партия.Владелец + " партию " + СтрМНС.Партия + " не берем, ибо несоответствие коэфф. в доке и партии!");
			 	Продолжить;	 
			 КонецЕсли;
		 КонецЕсли;
		 //----------------------------< Добавляем новую строку с другой Партией >--------------------------------GtG---
		 НоваяСтр=ТОвар.Добавить();
		 НоваяСтр.Товар=Стр.Товар;
		 НоваяСтр.ЕИТ=Стр.ЕИТ;
		 НоваяСтр.Коэфф=Стр.Коэфф;
		 НоваяСтр.Партия=СтрМНС.Партия; // оно же и срок годности
		 НоваяСтр.Баркод=СтрМНС.Партия.БарКод;
		 НоваяСтр.Серия=НоваяСтр.Партия.серияСылка;
		 НоваяСтр.Сертификат=НоваяСтр.Партия.серияСсылка.Сертификат;
		 НоваяСтр.СтавкаНДС=СтрМНС.СтавкаНДС;
		 
		 НоваяСтр.ЦенаЗакуп=СтрМНС.СуммаЗакупСНДСОстаток/СтрМНС.Осталось*НоваяСтр.Коэфф;
		 
		 НоваяСтр.ЦенаРозн=СтрМНС.СуммаРознСНДСОстаток/СтрМНС.Осталось*НоваяСтр.Коэфф;
		 
		 //сообщитьИнфо("СтрМНС.КолвоОстаток>=БЗ   :"+СтрМНС.КолвоОстаток+">="+БЗ);
		 
		 Если СтрМНС.Осталось>=БЗ Тогда
			 НоваяСтр.Количество=БЗ/НоваяСтр.Коэфф;// еще останется на складе
			 //----------------------------< проблемы последней копейки нет >--------------------------------GtG--- 
			 НоваяСтр.НДСЗакуп=СтрМНС.СуммаНДСЗакупОстаток/СтрМНС.Осталось*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 НоваяСтр.СуммаЗакуп=СтрМНС.СуммаЗакупСНДСОстаток/СтрМНС.Осталось*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 
			 НоваяСтр.НДСРозн=СтрМНС.СуммаРознНДСОстаток/СтрМНС.Осталось*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 НоваяСтр.СуммаРозн=СтрМНС.СуммаРознСНДСОстаток/СтрМНС.Осталось*НоваяСтр.Коэфф*НоваяСтр.Количество;
			 
			  
		 Иначе
			 НоваяСтр.Количество=СтрМНС.Осталось/НоваяСтр.Коэфф;// забираем все!
			 //----------------------------< проблема последней копейки есть >--------------------------------GtG--- 
			 НоваяСтр.НДСЗакуп=СтрМНС.СуммаНДСЗакупОстаток;
			 НоваяСтр.СуммаЗакуп=СтрМНС.СуммаЗакупСНДСОстаток;
			 
			 НоваяСтр.НДСРозн=СтрМНС.СуммаРознНДСОстаток;
			 НоваяСтр.СуммаРозн=СтрМНС.СуммаРознСНДСОстаток;
			 
			 
			 // спишем всЁ с остатков!
		 КонецЕсли; 
		 НоваяСтр.КоличествоФакт=НоваяСтр.Количество;
		 
		 СтрМНС.Осталось = СтрМНС.Осталось - НоваяСтр.Количество*НоваяСтр.Коэфф;
		 // пустая Партия вызывает подбор из пустых и не пустых
		 // в результате могут образовываться новые строки документа
		 // как с пустыми так и не пустыми Партиями, так что может 
		 // возникнуть прог8рессия строк документа!!! 
		 НоваяСтр.НеОбрабатывать=Истина; // если Партия пустая, то при повторном проведении она не будет обработана
		 
		 
		 
		 БЗ=БЗ-НоваяСтр.Количество*НоваяСтр.Коэфф;
		 
	 КонецЦикла; 
	 
	 Возврат БЗ;

	 
 КонецФункции
 
 //============================================================================ GtG ===
 Процедура ГрохнутьИсходныеСтроки  (МассивИсхСтрок) 
	 // Назначение:
	 // Удаляет строки тч товар по списку-массиву ссылок на строки
	 //--------------------------------------------------------------------------------
	 //сообщитьИнфо("ГрохнутьИсходныеСтроки");
	 
	 ////Сообщить("-- грох-001 "); // GtG маркер 
	 
	 Если МассивИсхСтрок.Количество()=0 тогда
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 Для Ы=0 по МассивИсхСтрок.Количество()-1 Цикл
		 //сообщитьИнфо("Грохнули "+Ы);
		 Товар.Удалить(МассивИсхСтрок.Получить(Ы));
	 КонецЦикла; 
	 
	 //Сообщить("-- грох-002 "); // GtG маркер 
	 
 КонецПроцедуры
 //============================================================================ GtG ===
 
 //============================================================================ GtG ===
 Процедура ПодборПартий  (Скд,ТипДвижения,НеПолучилось=Ложь) 
	 // Назначение:
	 // Проведение документа по регистрам 
	 // либо приход , либо расход
	 // по указанному складу
	 //--------------------------------------------------------------------------------
	 
	 Если СКД=Склад Тогда
		 Пол="";
	 иначе
		 Пол="Пол";
	 КонецЕсли;	
	 // Коля, это не работает, см. ниже.
	 
	 #Если Клиент Тогда
		 Состояние("Расчет остатков склада....");
	 #КонецЕсли
	 ОстаткиСПартиями=ПолучитьОстаткиТоваров();
	 //ОстаткиСПартиями.Колонки.Добавить("Осталось");
	 //Масс = Новый Массив;
	 //Масс = ОстаткиСПартиями.ВыгрузитьКолонку("КолвоОстаток");
	 //ОстаткиСПартиями.ЗагрузитьКолонку(Масс,"Осталось");
	 ЗТЗ= Новый ТаблицаЗначений ; 
	 
	 Если ОстаткиСПартиями.Количество()=0 ТОгда  //Васильченко ... ОстаткиБезПартий.Количество()= 0 и 
		 #Если Клиент Тогда
			 Предупреждение("На остатках "+Склад+" нет ни одного товара указанного в документе!
			 | Попробуйте провести этот документ когда появится товар
			 | или пометьте его на удаление.",20);
		 #КонецЕсли
		 НеПолучилось=Истина;
		 ВОЗВРАТ ;
	 КонецЕсли;
	 
	 
	 
	 //----------------------------< Проверим заказанное количество на превышение остатка на складе >--------------------------------GtG---
	 
	 //----------------------------< 1)Товары без партий >--------------------------------GtG---
	 ИсхКолвоСтрок=Товар.Количество();
	 
	 СтрокиДляУдаления= Новый  Массив;
	 
	 Для СЫ=0 по ИсхКолвоСтрок-1 Цикл   // каждого Стр Из Товар Цикл ---> сбивается выборка при добавлении новой строки!!!
		 #Если Клиент Тогда
			 Состояние("Обработка строк документа..."+СЫ);
		 #КонецЕсли
		 //ОчиститьСообщения();
		 
		 //============================< ОБЩЕЕ ДЛЯ ВСЕХ ТИПОВ ТОВАРА >================================GtG===
		 Стр=Товар.Получить(СЫ);
		 ПровТовар=Стр.Товар;
		 
		 
		 Фильтр= Новый  Структура;
		 Фильтр.Очистить();
		 Фильтр.Вставить("Товар",ПровТовар);
		 //============================< ПАРТИОННЫЙ ТОВАР >================================GtG===
		 
		 //============================< ПРИЧЕСАТЬ ОТСЮДА >================================GtG===
		 
		 
		 МНС=ОстаткиСПартиями.НайтиСтроки(Фильтр); // С фильтром только по товару
		 
		 Если МНС.Количество()>0 Тогда //Что-то есть в остатках по этому товару!
			 
			 //сообщитьИнфо("Что-то есть в остатках по этому товару!");
			 //----------------------------< посерийка >--------------------------------GtG---
			 // общее кол-во товара может быть достаточным, а по сериям
			 // может быть разброд!
			 
			 ФильтрТочн= Новый  Структура;  // в основном, даст положительный результат если док 
			 // создавался вручную с подбором по остаткам
			 // Автоматически загруженные документы не знают про остатки конкретных
			 // партий и прочих параметров. Поэтому нужно осуществить автободбор
			 // из того что окажется в наличии в данный момент и откорректировать 
			 // табличную часть документа. Корректировать нужно и в том случае
			 // если кто-то успел провести свой документ раньше текущего
			 // т.е. :  ----V-----------*---------Х-----------Х!-------V!-----------*!------->
			 //          Враг2подбор Подбор  ВрагПодбор  ВрагПровел  Враг2провел  Провел
			 // таким образом в момент проведения нашего  документа *! остаток товара может оказаться 
			 // совсем не таким как при подборе.
			 
			 ФильтрТочн.Очистить();
			 ФильтрТочн.Вставить("Партия",Стр.Партия);
			 //ФильтрТочн.Вставить("СтавкаНДС",Стр.СтавкаНДС);
			 
			 
			 
			 
			 МНСС=ОстаткиСПартиями.НайтиСтроки(ФильтрТочн);// ищем в остатках нужную партию
			 
			 //сообщить("МНСС.Количество()="+МНСС.Количество());
			 
			 Если МНСС.Количество()>0  Тогда // Что-то по этой партии есть
				 
				 //----------------------------< Данные берем из МНСС >--------------------------------GtG---
				 //сообщитьИнфо("Что-то по этой партии есть");
				 // МНСС должен содержать 1 строку (т.к. точный поиск по всем ключевым параметрам)
				 СтрОст=МНсс.Получить(0);
				 Если СтрОст.Осталось = 0 Тогда 
					 Если ВидОперации = Перечисления.ВидыОпераций.ВозвратНаСклад или ВидОперации = Перечисления.ВидыОпераций.МежскладскаяПередача Тогда
						 #Если Клиент Тогда
							 Сообщить("Нехватает на складе товара "+Стр.Товар+" - "+Стр.ЕИТ+" ");
						 #КонецЕсли
						 Продолжить;
					 КонецЕсли;
					 //сообщитьИнфо("Обработка пустой партии - могут появиться дополнительные строки");
					 //----------------------------< Тогда заполняем по фифио по дате окончания срока годности  >--------------------------------GtG--- 
					 // из имеющихся в наличии серий
					 БылоЗаказано=Стр.Количество*Стр.Коэфф;
					 БЗ=НащипатьИзДругихПартий(БылоЗаказано,ОстаткиСПартиями,Фильтр,Стр);
					 БылоЗаказано=БЗ;
					 Если  БылоЗаказано>0 ТОгда
						 ОстатокОтБылоЗаказано=БылоЗаказано/Стр.Коэфф; //*Стр.Коэфф
						 //СообщитьИнфо("Нехватает на складе товара "+Стр.Товар+" "+ОстатокОтБылоЗаказано+" "+Стр.ЕИТ+" используем все имеющееся количество ");
						 СНУП=НеудовлетвореннаяПотребность.Добавить();
						 СНУП.Товар=Стр.Товар;
						 СНУП.Количество=ОстатокОтБылоЗаказано;
						 СНУП.ЕИТ = Стр.ЕИТ;
						 СНУП.Партия = Стр.Партия;
					 КонецЕсли;
					 //----------------------------< Грохнем исходную строку >--------------------------------GtG---
					 СтрокиДляУдаления.Добавить(Стр);// потом ее грохнем
					 //Иначе
					 //сообщитьИнфо("Обработки пустой серии не возникает");
					 //КонецЕсли;						 
					 Продолжить;
				 КонецЕсли;
				 //Если (СтрОст.Осталось < Стр.Количество*Стр.Коэфф) и (СтрОст.Осталось>0) ТОгда
				 //	 Стр.Количество = СтрОст.Осталось/Стр.Коэфф;
				 //КонецЕсли;
				 
				 Если СтрОст.Осталось>=Стр.Количество*Стр.Коэфф Тогда // заказанное кол-во
					 еСЛИ СтрОст.Осталось>=Стр.КоличествофАКТ*Стр.Коэфф тоГДА // фактическое кол-во
						 // ЛАДНО, факт оставим
					 иНАЧЕ
						 стр.КоличествоФакт=СтрОст.Осталось/Стр.Коэфф; // уменьшаем факт кол-во
					 конецЕсли;	
					 
					 СтрОст.Осталось = СтрОст.Осталось-стр.КоличествоФакт*Стр.Коэфф;
					 
					 Если Стр.Партия.ЕИТЗакупки.К <> Стр.Коэфф Тогда
						 #Если Клиент Тогда
							 Сообщить("код: " + стр.Товар.Код + " - " + стр.Товар + " желательно удалить из накладной");	
						 #КонецЕсли
					 КонецЕсли;						 
					 // типа должно хватить остатков  по любому!
					 //сообщитьИнфо("Тута П? 3");
				 Иначе
					 
					 // остатков не хватает!
					 БылоЗаказано=Стр.Количество*Стр.Коэфф;
					 Стр.Количество=СтрОст.Осталось/Стр.Коэфф;// зарежем заказанное колво
					 стр.КоличествоФакт=Стр.Количество/Стр.Коэфф;// по любому не больше чем есть
					 
					 БылоЗаказано=БылоЗаказано-Стр.Количество*Стр.Коэфф;
					 
					 //----------------------------< будем отщипывать от других серий пока не насытимся >--------------------------------GtG---
					 // добавляем строки отщипнутые от других серий
					 //сообщитьИнфо("Тута? 4 еще нужно "+БылоЗаказано);
					 //----------------------------< Данные берем из МНС >--------------------------------GtG---
					 СтрОст.Осталось = 0;
					 Если ВидОперации = Перечисления.ВидыОпераций.ВозвратНаСклад или ВидОперации = Перечисления.ВидыОпераций.МежскладскаяПередача Тогда
						 #Если Клиент Тогда
							 Сообщить("Нехватает на складе товара "+Стр.Товар+" "+БылоЗаказано*Стр.Коэфф+" "+Стр.ЕИТ+" используем все имеющееся количество ");
						 #КонецЕсли
						 Продолжить;
					 КонецЕсли;
					 
					 БЗ=НащипатьИзДругихПартий(БылоЗаказано,ОстаткиСПартиями,Фильтр,Стр);
					 БылоЗаказано=БЗ;
					 
					 Если  БылоЗаказано>0 ТОгда
						 ОстатокОтБылоЗаказано=БылоЗаказано/Стр.Коэфф; //*Стр.Коэфф
						 #Если Клиент Тогда
							 СообщитьИнфо("Нехватает на складе товара "+Стр.Товар+" "+ОстатокОтБылоЗаказано+" "+Стр.ЕИТ+" используем все имеющееся количество ");
						 #КонецЕсли
						 СНУП=НеудовлетвореннаяПотребность.Добавить();
						 СНУП.Товар=Стр.Товар;
						 СНУП.Количество=ОстатокОтБылоЗаказано;
						 СНУП.ЕИТ = Стр.ЕИТ;
						 СНУП.Партия = Стр.Партия;

					 КонецЕсли;
				 КонецЕсли; 
				 
			 Иначе // ничего по указанной партии нет (или партия вообще не указана)
				 //сообщитьИнфо(" ничего по указанной партии нет ВООБЩЕ (или партия вообще не указана)");
				 
				 Если Стр.НеОбрабатывать=Неопределено или Стр.НеОбрабатывать=Ложь Тогда
					 //сообщитьИнфо("Обработка пустой партии - могут появиться дополнительные строки");
					 //----------------------------< Тогда заполняем по фифио по дате окончания срока годности  >--------------------------------GtG--- 
					 // из имеющихся в наличии серий
					 Если ВидОперации = Перечисления.ВидыОпераций.ВозвратНаСклад или ВидОперации = Перечисления.ВидыОпераций.МежскладскаяПередача Тогда
						 #Если Клиент Тогда
							 Сообщить("Нехватает на складе товара "+Стр.Товар+" - "+Стр.ЕИТ+" ");
						 #КонецЕсли
						 Продолжить;
					 КонецЕсли;
					 
					 БылоЗаказано=Стр.Количество*Стр.Коэфф;
					 БЗ=НащипатьИзДругихПартий(БылоЗаказано,ОстаткиСПартиями,Фильтр,Стр);
					 БылоЗаказано=БЗ;
					 Если  БылоЗаказано>0 ТОгда
						 ОстатокОтБылоЗаказано=БылоЗаказано/Стр.Коэфф; //*Стр.Коэфф
						 //СообщитьИнфо("Нехватает на складе товара "+Стр.Товар+" "+ОстатокОтБылоЗаказано+" "+Стр.ЕИТ+" используем все имеющееся количество ");
						 СНУП=НеудовлетвореннаяПотребность.Добавить();
						 СНУП.Товар=Стр.Товар;
						 СНУП.Количество=ОстатокОтБылоЗаказано;
						 СНУП.ЕИТ = Стр.ЕИТ;
						 СНУП.Партия = Стр.Партия;

					 КонецЕсли;
					 
					 
					 //----------------------------< Грохнем исходную строку >--------------------------------GtG---
					 СтрокиДляУдаления.Добавить(Стр);// потом ее грохнем
				 Иначе
					 //сообщитьИнфо("Обработки пустой серии не возникает");
					 Если Стр.Партия.ЕИТЗакупки.К <> Стр.Коэфф Тогда
						 #Если Клиент Тогда
							 Сообщить("код: " + стр.Товар.Код + " - " + стр.Товар + " желательно удалить из накладной");	 
						 #КонецЕсли
					 КонецЕсли;
				 КонецЕсли;
			 КонецЕсли;//Что-то по этой партии есть 
		 ИНАЧЕ
			 ////сообщить("НА СКЛАДЕ ТАКОГО ТОВАРА ВООБЩЕ НЕТ! (по партиям) ("+Стр.Товар.Код+")  "+Стр.Товар);
			 СтрокиДляУдаления.Добавить(Стр);// потом ее грохнем
			 СНУП=НеудовлетвореннаяПотребность.Добавить();
			 СНУП.Товар=Стр.Товар;
			 СНУП.Количество=Стр.Количество;
			 СНУП.ЕИТ = Стр.ЕИТ;
			 СНУП.Партия = Стр.Партия;

		 КонецЕсли;//Что-то есть в остатках по этому товару! 
		 
		 //============================< ПРИЧЕСАТЬ ДО СЮДА >================================GtG=== 	 
		 //Сообщить("-- 664 "); // GtG маркер		 
		 
	 КонецЦикла; 
	 
	 //Сообщить("-- 665 "); // GtG маркер  
	 
	 ГрохнутьИсходныеСтроки(СтрокиДляУдаления);
	 
	 //Сообщить("-- 665-1 "); // GtG маркер 
	 
	 НеудовлетвореннаяПотребность.Свернуть("ТОвар,ЕИТ,Партия,Удалена","Количество");
	 
	 //Сообщить("-- 665-2 "); // GtG маркер 
	 
	 //============================< СОЗДАЕМ ДВИЖЕНИЯ ПО РЕГИСТРАМ >================================GtG===
	 // ВСЕ КОСЯКИ С ВОЗМОЖНЫМ ОТСУТСТВИЕМ НА СКЛАДЕ К ЭТОМУ МОМЕНТУ УЖЕ ВЫПРАВЛЕНЫ
	 
	 
	 Сохранять=Ложь;
	 Х=0; ХХХ=ТОвар.Количество();
	 
	 //Сообщить("Кажется в документе"+ХХХ+" строк");	 
	 
	 
	 Для Каждого ТекСтрокаТовар Из Товар Цикл
		 
		 Х=Х+1;
		 
		 //Сообщить("Проверяем строку "+Х+" из "+ХХХ);
		 
		 #Если Клиент Тогда
			 
			 Состояние("Проверяем строку "+Х+" из "+ХХХ);
		 #КонецЕсли
		 
		 
		 //---------- Если были зарезаны количества, то необходимо пересчитать суммы по строке ------------
		 Если ТекСтрокаТовар.КоличествоФакт>ТекСтрокаТовар.Количество ТОгда
			 #Если Клиент Тогда
				 СообщитьИнфо("Строка "+ТекСтрокаТовар.НомерСтроки+" "+ТекСтрокаТовар.Товар+" Заказано "+ТекСтрокаТовар.Количество+" фактически "+ТекСтрокаТовар.КоличествоФакт+" Количество фактическое уменьшено до заказанного!");
			 #КонецЕсли
			 ТекСтрокаТовар.КоличествоФакт=ТекСтрокаТовар.Количество; // контроль остатка по заказанному кол-ву
			 //Сообщить("-- ПСД-1 "); // GtG маркер 
			 ПересчетСтрокиДокумента  (ТекСтрокаТовар);
			 //Сообщить("-- ПСД-2 "); // GtG маркер 
			 //Сообщить("-- ПСД-3 "); // GtG маркер 
			 // зарезается заказанное кол-во до остатка склада и фактическое не должно быть больше
		 КонецЕсли;	 
		 
		 
		 //Сообщить("-- 665-3 "+Х); // GtG маркер 
		 
		 
		 
		 
		 
		 //---------- Решение проблемы списания последней штуки серии / партии -----------------
		 // Ищем в таблицах колво остатка и если документ все списывает меняем сумму в нем на итоговую
		 
		 ФильтрТочн.Очистить();
		 //Сообщить("-- УФ-1 "); // GtG маркер
		 ФильтрТочн.Вставить("Партия",ТекСтрокаТовар.Партия);
		 ФильтрТочн.Вставить("СтавкаНДС",ТекСтрокаТовар.СтавкаНДС); //Васильченко ...  // GtG 15.11.2007 21:26:54 НУЖНА //партия уникальна, ставка НДС не нужна
		 
		 //Сообщить("-- уф-2 "); // GtG маркер 
		 
		 
		 МНСС=ОстаткиСПартиями.НайтиСтроки(ФильтрТочн);// ищем в остатках нужную партию
		 
		 
		 Если МНСС.Количество()>0 Тогда
			 СтрМНСС=МНСС.Получить(0);
			 Если СтрМНСС.КолвоОстаток<>0 Тогда
				 ЗакупЦенаОстатки=Окр((СтрМНСС.СуммаЗакупСНДСОстаток / СтрМНСС.КолвоОстаток)*ТекСтрокаТовар.Коэфф,2);
				 ОстатокПосле=СтрМНСС.КолвоОстаток-ТекСтрокаТовар.КоличествоФакт;
				 
				 //------------------<проверка на кривую закупочную цену>-------------------GtG---- 
				 // правка косяка возникшего при изменении количества в подборе без пересчета
				 Если ТекСтрокаТовар.ЦенаЗакуп <> ЗакупЦенаОстатки Тогда
					 РазницаВЦене=ТекСтрокаТовар.ЦенаЗакуп-ЗакупЦенаОстатки;
					 если РазницаВЦене<0 Тогда РазницаВЦене=РазницаВЦене*(-1); КонецЕсли; 
					 Если РазницаВЦене<0.03 ТОгда
						 // это простительно ибо округлилось
					 Иначе	 
						 //СообщитьИнфо("Косяк в цене закупочной! "+ТекСтрокаТовар.НомерСтроки+"  "+ТекСтрокаТовар.Товар+"  цена "+ТекСтрокаТовар.ЦенаЗакуп+", а должна быть "+ЗакупЦенаОстатки+" исправляем!"); 
						 
						 ТекСтрокаТовар.ЦенаЗакуп=ЗакупЦенаОстатки;
						 ПересчетСтрокиДокумента  (ТекСтрокаТовар);
					 КонецЕсли; 
				 КонецЕсли;
				 //--------------------------------------------------------GtG----КОНЕЦ
				 //------------------<ПРоверка на косяк : правильная цена закуп, кривая сумма закуп>-------------------GtG----
				 РасхождениеЦенаСуммаЗакуп=ТекСтрокаТовар.ЦенаЗакуп*ТекСтрокаТовар.КоличествоФакт-ТекСтрокаТовар.СуммаЗакуп;
				 Если РасхождениеЦенаСуммаЗакуп<0 Тогда РасхождениеЦенаСуммаЗакуп=РасхождениеЦенаСуммаЗакуп*(-1) КонецЕсли; // по модулю
				 Если РасхождениеЦенаСуммаЗакуп>0.05*ТекСтрокаТовар.КоличествоФакт Тогда // по 1 копейке от округления цены по каждой штуке
					 //------------------<Существенный косяк - возможно кривая сумма>-------------------GtG----
					 НикакНеРавно=ТекСтрокаТовар.ЦенаЗакуп*ТекСтрокаТовар.КоличествоФакт;
					 //СообщитьИнфо("Косяк в сумме закупочной! "+ТекСтрокаТовар.НомерСтроки+"  "+ТекСтрокаТовар.Товар+"   сумма "+ТекСтрокаТовар.СуммаЗакуп+", никак не равна "+НикакНеРавно+" исправляем!"); 
					 ПересчетСтрокиДокумента  (ТекСтрокаТовар);
				 Иначе
					 //------------------<Несущественный косячок в цене ,  херня но смотрится некрасиво>-------------------GtG---- 
					 // тогда рисуем красивую цену под сумму (при условии что количество есть)
					 ЕСли ТекСтрокаТовар.КоличествоФакт>0 Тогда
						 ТекСтрокаТовар.ЦенаЗакуп=ТекСтрокаТовар.СуммаЗакуп/ТекСтрокаТовар.КоличествоФакт;
						 ПересчетСтрокиДокумента  (ТекСтрокаТовар);
					 КонецЕсли;
					 
				 КонецЕсли; 
				 
				 
				 //--------------------------------------------------------GtG----КОНЕЦ 
				 //------------------<Добиваем последнюю штуку>-------------------GtG----
				 Если ОстатокПосле=0 Тогда
					 #Если Клиент Тогда
						 Состояние("Ушла в расход последняя единица "+ТекСтрокаТовар.Товар);
					 #КонецЕсли
					 
					 Если ТекСтрокаТовар.СуммаЗакуп<>СтрМНСС.СуммаЗакупСНДСОстаток Тогда
						 ТекСтрокаТовар.СуммаЗакуп=СтрМНСС.СуммаЗакупСНДСОстаток; 
					 КонецЕсли;
					 Если ТекСтрокаТовар.НДСЗакуп<>СтрМНСС.СуммаНДСЗакупОстаток Тогда
						 ТекСтрокаТовар.НДСЗакуп=СтрМНСС.СуммаНДСЗакупОстаток; 
					 КонецЕсли;	  
					 
					 Если ТекСтрокаТовар.СуммаРозн<>СтрМНСС.СуммаРознСНДСОстаток Тогда
						 ТекСтрокаТовар.СуммаРозн=СтрМНСС.СуммаРознСНДСОстаток; 
					 КонецЕсли;
					 Если ТекСтрокаТовар.НДСРозн<>СтрМНСС.СуммаРознНДСОстаток Тогда
						 ТекСтрокаТовар.НДСРозн=СтрМНСС.СуммаРознНДСОстаток; 
					 КонецЕсли;
					 
				 КонецЕсли;	 
				 //--------------------------------------------------------GtG----КОНЕЦ 
				 
				 
				 
			 КонецЕСли;
			 
			 
			 
		 Иначе
			 
			 // ?! остаток =0 !?
			 
		 КонецЕсли;
		 
		 
		 //Сообщить("-- 777 "); // GtG маркер 	 
		 
		 //---------- Для облегчения жизни операторам и прочим деятелям --------------
		 
		 //============================< Цепляем розничную цену из регистра сведений ЦЕНЫ >================================GtG===
		 // Берем последние, самые свежие цены !!! Документ не перепроводить после отгрузки на аптеку !!! 
		 
		 Если ВидОперации = Перечисления.ВидыОпераций.ПеремещениеТМЦ или  ВидОперации = Перечисления.ВидыОпераций.МежскладскаяПередача Тогда
			 
			 
			 Если  Статус = перечисления.СтатусПеремещения.ИзменениеМестаХранения ТОгда
				 ТекСтрокаТовар.ЦенаРознПол=ТекСтрокаТовар.ЦенаРозн;
				 ТекСтрокаТовар.СуммаРознПол=ТекСтрокаТовар.СуммаРозн;
				 ТекСтрокаТовар.НДСРознПол=ТекСтрокаТовар.НДСРозн;
			 КонецЕсли;
			 
			 //------------------<Проверка и тупая корретировка розн цен на оптовом складе>-------------------GtG----
			 Если Склад.ТипСклада=Перечисления.ТипыМХ.Опт Тогда // на оптовом складе всегда учет в закуп ценах
				 ТекСтрокаТовар.ЦенаРозн=ТекСтрокаТовар.ЦенаЗакуп;
				 ТекСтрокаТовар.СуммаРозн=ТекСтрокаТовар.СуммаЗакуп;
				 ТекСтрокаТовар.НДСРозн=ТекСтрокаТовар.НДСЗакуп;
			 КонецЕсли;
			 //--------------------------------------------------------GtG----КОНЕЦ
			 //------------------<Чтобы потом правильно закрывался регистр делаем следующее>-------------------Virus----
			 Если СкладПолучатель.ТипСклада=Перечисления.ТипыМХ.Опт Тогда // на оптовом складе всегда учет в закуп ценах
				 ТекСтрокаТовар.ЦенаРознПол=ТекСтрокаТовар.ЦенаЗакуп;
				 ТекСтрокаТовар.СуммаРознПол=ТекСтрокаТовар.СуммаЗакуп;
				 ТекСтрокаТовар.НДСРознПол=ТекСтрокаТовар.НДСЗакуп;
			 КонецЕсли;
			 //--------------------------------------------------------Virus----КОНЕЦ		 
		 КонецЕсли; // Если ВидОперации = ПеремещениеТМЦ	 
	 КонецЦикла; 
	 
	 
	 НеПолучилось=Ложь;
	 
	 
	 
 КонецПроцедуры
 //============================================================================ GtG ===
 
 
 //==================================ЗАПОЛНЕНИЕ РОЗНИЧНЫХ ЦЕН ===================
 Процедура ЗаполнитьРозничныеЦены(Отказ)
	 
	 Инфо = ""; 
	 СписокПартий=Товар.ВыгрузитьКолонку("Партия");
	 
	 
	 ТХТ="ВЫБРАТЬ
	 |	ЦеныСрезПоследних.Партия,
	 |	ЦеныСрезПоследних.ЦенаРознГТТ КАК Цена
	 |ИЗ
	 |	РегистрСведений.Цены.СрезПоследних(
	 |		,
	 |		Партия В (&СписокПартий)
	 |			И РЕГИОН = &РегионСклада) КАК ЦеныСрезПоследних";
	 
	 Запрос=Новый Запрос;
	 Запрос.Текст=ТХТ;
	 Запрос.УстановитьПараметр("СписокПартий",СписокПартий);
	 Запрос.УстановитьПараметр("РегионСклада",СкладПолучатель.Регион);
	 
	 
	 ТЗ=Запрос.Выполнить().Выгрузить();	
	 
	 Для каждого стр из Товар Цикл
		 Нашли = ТЗ.Найти(стр.Партия,"Партия");
		 Если Нашли = Неопределено Тогда
			 //Сообщить("Нет цены ! Строка: " + стр.НомерСтроки + " - " + стр.Товар + " партия: " + стр.Партия.Наименование);
		 Иначе
			 НоваяЦена = Нашли.Цена*стр.Коэфф;;
			 Если стр.ЦенаРознПол>0 и стр.ЦенаРознПол<>НоваяЦена ТОгда
				 Инфо = Инфо+ "строка: " + стр.НомерСтроки + " ----> цена в документе: " + стр.ЦенаРознПол + " цена по расценке: " + НоваяЦена + "" + Символы.ПС;
			 ИначеЕсли стр.ЦенаРознПол = 0 Тогда
				 стр.ЦенаРознПол = Нашли.Цена*стр.Коэфф;
				 стр.СуммаРознПол = стр.ЦенаРознПол*стр.КоличествоФакт;
				 стр.НДСРознПол=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(стр.СуммаРознПол,стр.СтавкаНДС,2);
			 КонецЕсли;
		 КонецЕсли;
	 КонецЦикла;
	 #Если Клиент Тогда
		 Если Инфо<>"" Тогда
			 Инфо = Инфо + " При необходимости можно откорректировать цены в документе.";
			 ГУИД=новый УникальныйИдентификатор;
			 ФКомментария=ПолучитьОбщуюФорму("КомментаторПроведения", ЭтотОбъект.ПолучитьФорму() ,ГУИД);
			 ФКомментария.Комментарий=Инфо;
			 ФКомментария.Открыть();
		 КонецЕсли;	 
	 #КонецЕсли	 
 КонецПроцедуры
 
 //==================================КОНЕЦ ЗАПОЛНЕНИЯ РОЗНИЧНЫХ ЦЕН =============
 
 //================================== Провести по регистрам ===========================
 Процедура ПровестиПоРегистрам(Скд,ТипДвижения)
	 
	 Если СКД=Склад Тогда
		 Пол="";
	 иначе
		 Пол="Пол";
	 КонецЕсли;
	 
	 Для Каждого ТекСтрокаТовар Из Товар Цикл
		 
		 Если ТекСтрокаТовар.КоличествоФакт=0 Тогда
			 #Если Клиент Тогда
				 Сообщить("Строка с нулевым количеством! "+ТекСтрокаТовар.НомерСтроки+"  документ не проведется, удалите эту строку.");
			 #КонецЕсли
		 КонецЕсли;	 
		 
		 
		 //----------------------------< Партионные товары (ЖНВЛС/СВЛС) >--------------------------------GtG---
		 
			 ДвижениеП = Движения.ПартииЖНВЛС.Добавить();
			 ДвижениеП.ВидДвижения=ТипДвижения; //ВидДвиженияНакопления.Приход;
			 ДвижениеП.Период = Дата;
			 ДвижениеП.Товар = ТекСтрокаТовар.Товар;
			 ДвижениеП.Склад = Скд;
			 ДвижениеП.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
			 ДвижениеП.пАРТИЯ = ТекСтрокаТовар.Партия ;
			 ДвижениеП.Фирма= Скд.Фирма;
			 ДвижениеП.ВидОперации=ВидОперации;
			 
			 
			 ДвижениеП.Колво = ТекСтрокаТовар.КоличествоФакт*ТекСтрокаТовар.Коэфф;
			 ДвижениеП.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
			 ДвижениеП.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
			 ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар["СуммаРозн"+Пол];
			 ДвижениеП.СуммаРознНДС = ТекСтрокаТовар["НДСРозн"+Пол];
			 ЕстьПартионныеТовары=Истина;
			 
		 
	 КонецЦикла;
	 
	 //Движения.ПартииЖНВЛС.Записать();
	 
	 
	 //--------------------------------------------------------------------------------
	 // На склад Арбитраж и со склада Арбитраж движения в регистр ставок НДС не пишем
	 // чтобы вся эта дребедень не попала в товарный отчет 
	 //--------------------------------------------------------------------------------
	 //Если (СкладПолучатель.Код = 207) или ( Склад.Код = 207 ) Тогда
	 //	Возврат;
	 //КонецЕсли;
	 //---------------------------------------------------------------------
	 
	 //----------------------------< По регитсру учета по ставке НДС >--------------------------------GtG---
	 ТЗПодСвертку = ТОвар.Выгрузить();
	 
	 ТЗПодСвертку.Свернуть("СтавкаНДС","СуммаЗакуп,НДСЗакуп,СуммаРозн,НДСРозн,СуммаРознПол,НДСРознПол");
	 
	 Для Каждого ТекСтрокаТовар Из ТЗПодСвертку Цикл
		 // регистр ОстаткиПоСтНДСПоСкладам Приход
		 Движение = Движения.ОстаткиПоСтНДСПоСкладам.Добавить();
		 Движение.ВидДвижения =ТипДвижения;// ВидДвиженияНакопления.Приход;
		 Движение.Период = Дата;
		 Движение.Склад = Скд;
		 Движение.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
		 Движение.Фирма= Скд.Фирма;
		 Движение.ВидОперации=ВидОперации;
		 
		 
		 Движение.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
		 Движение.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
		 Движение.СуммаРознСНДС = ТекСтрокаТовар["СуммаРозн"+Пол];
		 Движение.СуммаРознНДС = ТекСтрокаТовар["НДСРозн"+Пол];
	 КонецЦикла;
	 // записываем движения регистров
	 //Движения.ОстаткиПоСтНДСПоСкладам.Записать();
	 
	 
	 
 КонецПроцедуры
 
 //================================== КОНЕЦ Провести по регистрам =====================
 
 Процедура ОбработкаПроведения(Отказ, Режим)
	 
	 ТекстИнфо="";
	 
	 #Если Клиент Тогда
		 
		 //------------------<Проверка на возможность выгрузки в А2005>-------------------GtG----
		 Если ЭтотОбъект.Статус<>Перечисления.СтатусПеремещения.ИзменениеМестаХранения Тогда
			 ЕстьОшибки=Ложь;
			 СтрПред="ВНИМАНИЕ!!!"+Символы.ПС;
			 
			 Для Каждого Стр из Товар Цикл
				 //------------------<ПРоверка на чужую ЕИТ>-------------------GtG----
				 Если Стр.ЕИТ.Владелец<>СТР.Товар Тогда
					 СтрПред=СтрПред+"Стр. "+Стр.НомерСтроки+" Единица от другого товара! "+Символы.ПС;			 
					 ЕстьОшибки=Истина;
				 КонецЕсли;	 
			 КонецЦикла;
			 
			 Если ЕстьОшибки=Истина Тогда
				 СообщитьИнфо(СтрПред);
				 СообщитьИнфо("ДОКУМЕНТ НЕ ВЫГРУЗИТСЯ!");
			 КонецЕсли;
		 Иначе
			 // Перемещения внутри склада не контролируем, ибо не нужно
		 КонецЕсли; 	 
		 //--------------------------------------------------------GtG----КОНЕЦ
		 
		 ЕстьПартионныеТовары= Истина; // GtG 15.11.2007 20:59:15 НАХ!!!
		 
		 
		 
		 //ОчиститьСообщения(); 
	 #КонецЕсли
	 
	 //============================< Проверка на коэфф=0  >================================GtG===
	 Если ПроверкаНаНули("Коэфф")=Ложь Тогда
		 // Есть строки с 0-ми коэффициентами
		 #Если Клиент Тогда
			 СообщитьИнфо("В документе есть строки с коэффициентами =0!
			 |Это недопустимо!
			 |Очевидно проблемы с единицами товаров.");
		 #КонецЕсли
		 Отказ = ИСТИНА;
		 ВОЗВРАТ ;
	 КонецЕсли;
	 
	 
	 //------------------<Проверка на нулевое количество>-------------------GtG----
	 ОтказКолво=Ложь;
	 Для каждого Стр из Товар Цикл
		 #Если Клиент Тогда
			 Состояние("Проверка на нулевые количества "+Стр.НомерСтроки);
		 #КонецЕсли
		 Если Стр.КоличествоФакт=0 ТОгда
			 #Если Клиент Тогда
				 Сообщить("Нулевое количество ! строка "+Стр.НомерСтроки);
			 #КонецЕсли
			 ОтказКолво=Истина;
		 КонецЕсли;	
		 
		 Если Стр.КоличествоФакт<0 ТОгда
			 #Если Клиент Тогда
				 Сообщить("ОТРИЦАТЕЛЬНОЕ количество ! строка "+Стр.НомерСтроки+" Похоже, задним числом была изменена серия в приходе товара!");
			 #КонецЕсли
			 ОтказКолво=Истина;
		 КонецЕсли;	
	 КонецЦикла;	 
	 
	 Если ОтказКолво=Истина Тогда
		 #Если Клиент Тогда
			 Сообщить("Есть строки с нулевым количеством! 
			 |      В результате автоподбора серий/партий должны исправиться, 
			 |      если не хватит остатков товаров и останутся нули  документ не проведется 
			 |      и строки с нулями нужно будет удалить!");
		 #КонецЕсли
		 Отказ=Истина;
		 ВОЗВРАТ;
	 КонецЕсли;	
	 
	 
	 //--------------------------------------------------------GtG----КОНЕЦ 
	 Если СкладПолучатель.Пустая()=Истина тогда
		 #Если Клиент Тогда
			 ПРедупреждение("Не указан склад получатель!");
		 #КонецЕсли
		 Отказ=Истина;
		 ВОЗВРАТ ;
	 КонецЕсли;
	 
	 Если Склад.Пустая()=Истина тогда
		 #Если Клиент Тогда
			 ПРедупреждение("Не указан склад отправитель!");
		 #КонецЕсли
		 Отказ=Истина;
		 ВОЗВРАТ ;
	 КонецЕсли;
	 
	 //----------------------------< по складу отправителю >--------------------------------GtG---
	 // расход из регистров: ОстаткиТовараПоСкладам
	 //                    	ПартииЖНВЛС
	 //                    	ОстаткиПоСтНДСПоСкладам
	 
	 ПодборПартий(Склад,ВидДвиженияНакопления.Расход,Отказ);            
	 
	 Если СкладПолучатель.ТипСклада = Перечисления.ТипыМХ.Розн Тогда
		 ЗаполнитьРозничныеЦены(Отказ);
	 КонецЕсли;
	 
	 ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	 
	 
	 ПровестиПоРегистрам(Склад,ВидДвиженияНакопления.Расход);
	 
	 Если 
		 (Статус=Перечисления.СтатусПеремещения.Перемещен) 
		 или (Статус=Перечисления.СтатусПеремещения.ВыгруженНаАптеку)
		 или (Статус=Перечисления.СтатусПеремещения.ИзменениеМестаХранения) Тогда
		 ПровестиПоРегистрам(СкладПолучатель,ВидДвиженияНакопления.Приход);
		 //ПриходРасходПоРегистрам  (СкладПолучатель,ВидДвиженияНакопления.Приход,Отказ);
	 КонецЕсли; 
	 
	 //------------------------- Неудовлетворенность ---------------------------------------
	 Для каждого Стр из НеудовлетвореннаяПотребность цикл
		 Движение=Движения.НПАптек.Добавить();
		 Движение.Товар=Стр.Товар;
		 Движение.Количество=Стр.Количество;
		 Движение.Склад=СкладПолучатель;
		 Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
		 Движение.Период=Дата;
	 КонецЦикла;
	 //Движения.НПАптек.Записать();	 
	 
	 #Если Клиент Тогда
		 Если ТекстИнфо<>"" Тогда
			 ГУИД=новый УникальныйИдентификатор;
			 ФКомментария=ПолучитьОбщуюФорму("КомментаторПроведения", ЭтотОбъект.ПолучитьФорму() ,ГУИД);
			 ФКомментария.Комментарий=ТекстИнфо;
			 ФКомментария.Открыть();
		 КонецЕсли; 	
	 #КонецЕсли
	 Если СкладПолучатель.ТипСклада = Перечисления.ТипыМХ.Розн Тогда
		 Если ПроверкаНаНули("ЦенаРознПол")=Ложь Тогда
			 // Есть строки с 0-ми коэффициентами
			 #Если Клиент Тогда
				 Сообщить("В документе есть строки с нулевыми розничными ценами получателя!
				 |Это недопустимо!
				 |Очевидно проблемы с расценкой. Расценить эти позиции и провести перемещение заново.
				 |ЕСЛИ РАСЦЕНКА В ДАННЫЙ МОМЕНТ НЕВОЗМОЖНА - тогда удалить строки из накладной И ИЗЪЯТЬ ТОВАР ИЗ КОРОБОК (ВЕРНУТЬ НА МЕСТА ХРАНЕНИЯ) если его уже успели собрать
				 |");
			 #КонецЕсли
			 Если Статус <> Перечисления.СтатусПеремещения.ОтданНаСборку тогда
				 Отказ = ИСТИНА;
				 ВОЗВРАТ ;
			 КонецЕсли;
		 КонецЕсли;
	 КонецЕсли;
	 
	// сообщить("чистим резерв подбора");
	 ОМ15_ОчисткаРезерваДокумента  (ЭтотОбъект.Ссылка );// должна быть во всех документах, которые касаются резерва количества товара
	 
	 
 КонецПроцедуры

 Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	 
	ЭтотОбъект.СуммаДок= ЭтотОбъект.Товар.Итог("СуммаЗакуп"); 
	ЭтотОбъект.СуммаДокРозн = ЭтотОбъект.Товар.Итог("СуммаРозн");
	ЭтотОбъект.СуммаДокРознПол= ЭтотОбъект.Товар.Итог("СуммаРознПол");
	
	ЗаписатьДействияВИсториюДокумента(Изменения,РежимЗаписи,ПометкаУдаления);	
	
	////============================< Резерв с учетом изменений внесенных в документ >================================GtG===
	//// А как побочный эффект - резервирование при загрузке из файла
	//Если   (ЭтотОбъект.Проведен=Ложь) и (ЭтотОбъект.ЭтоНовый() = Ложь) Тогда
	//	ОМ15_ОчисткаРезерваДокумента( ЭтотОбъект .Ссылка );
	//	Если ЭтотОбъект.ПометкаУдаления = Ложь Тогда //Если помечен на удаление, тогда надо только очистить резерв
	//		ОМ15_ДобавитьДокументЦеликомВРезервПодбора(ЭтотОбъект .Ссылка);
	//	КонецЕсли;
	//КонецЕсли;
 КонецПроцедуры

 Процедура ПередУдалением(Отказ)
	 //Сообщить("Очистка Резерва");
	 ОМ15_ОчисткаРезерваДокумента  (ЭтотОбъект.Ссылка );// должна быть во всех документах, которые касаются резерва количества товара
 КонецПроцедуры

 Процедура ПриКопировании(ОбъектКопирования) Экспорт
	 //------------------<Блядство>-------------------GtG----
	 // Копирование один в один приводит к непредсказуемым количествам и суммам при автокоррекции
	 // поэтому копируем по принципу загрузки из файла - т.е. только товар единицу, колво заказанного.
	 // тогда при автоподборе серий при проведении все ОК
	 
	 ТЗ=Товар.Выгрузить();
	 
	 
	 ТЗ.Свернуть("Товар,ЕИТ,Коэфф","Количество");
	 
	 ЭтотОбъект.Товар.Очистить();
	 
	 Товар.Загрузить(ТЗ);
	 
	 
	 
	 
	 
 КонецПроцедуры
 //============================================================================ Virus ===
 Процедура ОбработкаУдаленияПроведения(Отказ)
	 // ------ проверка и запрет действий в закрытом периоде
	 ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
	 Если Отказ = Истина Тогда
		 Возврат;
	 КонецЕсли;
	 // ------ конец проверки и запрета действий в закрытом периоде
	 Если Статус = Перечисления.СтатусПеремещения.Перемещен тогда
		 Статус = Перечисления.СтатусПеремещения.ОтданНаСборку;
	 ИначеЕсли Статус = Перечисления.СтатусПеремещения.ОтданНаСборку Тогда
		 Статус = Перечисления.СтатусПеремещения.ЗагруженСоздан;
	 ИначеЕсли (Статус = Перечисления.СтатусПеремещения.ВыгруженНаАптеку) и (ПараметрыСеанса.Беспредел=Ложь) Тогда
		 #Если Клиент Тогда
			 Статус = Перечисления.СтатусПеремещения.Перемещен;
			 Сообщить("ВНИМАНИЕ! Документ был выгружен на аптеку. Будьте внимательны при изменениях.",СтатусСообщения.ОченьВажное); 
		 #КонецЕсли
	 КонецЕсли;
	 
	 //Если (Статус = Перечисления.СтатусПеремещения.ВыгруженНаАптеку) и (ПараметрыСеанса.Беспредел=Истина) Тогда
	//	 Статус = Перечисления.СтатусПеремещения.ОтданНаСборку;
	//КонецЕсли;
	#Если Клиент Тогда	 
		Если Товар.Количество()>0 Тогда
			ПерваяСтрока=ТОвар.Получить(0);
			Если ПерваяСтрока.Партия.Пустая()= Ложь Тогда
				ОМ15_ОчисткаРезерваДокумента( ЭтотОбъект.Ссылка );
				ОМ15_ДобавитьДокументЦеликомВРезервПодбора(ЭтотОбъект.Ссылка);
			КонецЕсли; 
		КонецЕсли; 
	#КонецЕсли 
 КонецПроцедуры

 Процедура ОбработкаЗаполнения(Основание)
	 //{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТовара") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Склад = Основание.Склад;
		ДокОснование = Основание.Ссылка;
		СуммаДок = Основание.СуммаДок;
		Фирма = Склад.Фирма;
		Статус = Перечисления.СтатусПеремещения.ЗагруженСоздан;
		Для Каждого ТекСтрокаТовар Из Основание.Товар Цикл
			НоваяСтрока = Товар.Добавить();
			НоваяСтрока.Баркод = ТекСтрокаТовар.Баркод;
			НоваяСтрока.ЕИТ = ТекСтрокаТовар.ЕИТ;
			НоваяСтрока.КоличествоФакт = ТекСтрокаТовар.КоличествоФакт;
			НоваяСтрока.Количество = ТекСтрокаТовар.КоличествоФакт;
			НоваяСтрока.Коэфф = ТекСтрокаТовар.Коэфф;
			НоваяСтрока.НДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
			НоваяСтрока.Партия = ТекСтрокаТовар.Партия;
			НоваяСтрока.Серия = ТекСтрокаТовар.Серия;
			НоваяСтрока.Сертификат = ТекСтрокаТовар.Сертификат;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
			НоваяСтрока.СуммаЗакуп = ТекСтрокаТовар.СуммаЗакуп;
			НоваяСтрока.Товар = ТекСтрокаТовар.Товар;
			НоваяСтрока.ЦенаЗакуп = ТекСтрокаТовар.ЦенаЗакуп;
			НоваяСтрока.ЦенаРозн = ТекСтрокаТовар.ЦенаРозн;
			НоваяСтрока.СуммаРозн = ТекСтрокаТовар.СуммаРозн;
			НоваяСтрока.ЦенаРознПол = ТекСтрокаТовар.ЦенаРозн;
			НоваяСтрока.СуммаРознПол = ТекСтрокаТовар.СуммаРозн;			
		КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВводОстатков") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		ДокОснование = Основание.Ссылка;
		Склад = Основание.Склад;
		СкладПолучатель = Константы.ОсновнойСклад.Получить();
		СуммаДок = Основание.СуммаДок;
		Фирма = Склад.Фирма;
		Статус = Перечисления.СтатусПеремещения.ЗагруженСоздан;
		
			НоваяСтрока = Изменения.Добавить();
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.КомментарийИзменения = "Создан на основании: " + ДокОснование;
			НоваяСтрока.Сотрудник = ПараметрыСеанса.ТекущийСотр.Ссылка;
			НоваяСтрока.ТипИзм = Перечисления.ДействияНадДокументами.ВводНового;
		
		Для Каждого ТекСтрокаТовар Из Основание.Товар Цикл
			НоваяСтрока = Товар.Добавить();
			НоваяСтрока.Баркод = ТекСтрокаТовар.Баркод;
			НоваяСтрока.ЕИТ = ТекСтрокаТовар.ЕИТ;
			НоваяСтрока.Количество = ТекСтрокаТовар.Количество;
			НоваяСтрока.КоличествоФакт = ТекСтрокаТовар.КоличествоФакт;
			НоваяСтрока.Коэфф = ТекСтрокаТовар.Коэфф;
			НоваяСтрока.НДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
			НоваяСтрока.НДСРозн = ТекСтрокаТовар.НДСРозн;
			НоваяСтрока.Партия = ТекСтрокаТовар.Партия;
			НоваяСтрока.ПроцентРознНац = ТекСтрокаТовар.ПроцентРознНац;
			НоваяСтрока.Серия = ТекСтрокаТовар.Серия;
			НоваяСтрока.Сертификат = ТекСтрокаТовар.Сертификат;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
			НоваяСтрока.СуммаЗакуп = ТекСтрокаТовар.СуммаЗакуп;
			НоваяСтрока.СуммаРозн = ТекСтрокаТовар.СуммаРозн;
			НоваяСтрока.Товар = ТекСтрокаТовар.Товар;
			НоваяСтрока.ЦенаЗакуп = ТекСтрокаТовар.ЦенаЗакуп;
			НоваяСтрока.ЦенаРозн = ТекСтрокаТовар.ЦенаРозн;
			НоваяСтрока.ЦенаРознПол = ТекСтрокаТовар.ЦенаЗакуп;
			НоваяСтрока.СуммаРознПол = ТекСтрокаТовар.СуммаЗакуп;
			НоваяСтрока.НДСРознПол = ТекСтрокаТовар.НДСЗакуп;
		КонецЦикла;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
 КонецПроцедуры
 //============================================================================ Virus ===
