Перем НеудачныйВводНаОсновании Экспорт;

Перем ПроведениеЗакончено;

Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ДобавитьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ДобавитьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("</" + Имя + ">");
	
КонецПроцедуры

Процедура ДобавитьСекциюИнтернетЗаказа(ЗаписьXML)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК Ссылка,
	               |	ЗаказПокупателя.Номер КАК Номер,
	               |	ЗаказПокупателя.Дата КАК Дата,
	               |	ЗаказПокупателя.КлиентИнтернетЗаказа.Наименование КАК КонтактноеЛицо,
	               |	ЗаказПокупателя.Телефон КАК Телефон,
	               |	ЗаказПокупателя.НомерИнтернетЗаказа КАК НомерИнтернетЗаказа,
	               |	ЗаказПокупателя.ИсточникИнтернетЗаказа.Код КАК КодИсточника,
	               |	ЗаказПокупателя.СтатусДокАптеки.Порядок КАК СтатусПорядок,
	               |	ЗаказПокупателя.Комментарий КАК Комментарий,
	               |	ЗаказПокупателя.ШКЗаказа КАК ШКЗаказа,
	               |	ЗаказПокупателя.ИДДокументаАптеки КАК ИДДокументаАптеки,
	               |	ЗаказПокупателя.СуммаАванса КАК СуммаАванса,
	               |	ЕСТЬNULL(ЗаказПокупателя.ТипЗаказа.Порядок, 0) КАК ТипЗаказаПорядок,
	               |	ЗаказПокупателя.ДатаОкончанияЖизниЗаказа КАК ДатаОкончанияЖизниЗаказа,
	               |	ЗаказПокупателя.ПодборПартийВАРМ КАК ПодборПартийВАРМ,
	               |	ЕСТЬNULL(ЗаказПокупателя.СтатусЗаказаЛокальный.Код,0) КАК СтатусЗаказаЛокальныйКод
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать(); Выборка.Следующий();
		
		ЗаписьXML.ЗаписатьСтроку("<out_buyer_order_hdr>");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_doc_type", 	"221"); 
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_doc_subtype", Формат(Выборка.ТипЗаказаПорядок,"ЧН=0; ЧГ=0")); 
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "guid", XMLСтрока(Выборка.Ссылка)); 
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "status",	"1"); 
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "status_order",	Формат(Выборка.СтатусЗаказаЛокальныйКод,"ЧДЦ="));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc",		Формат(Выборка.Номер,"ЧГ=0")); 
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc",		Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "date_exp",		Формат(Выборка.ДатаОкончанияЖизниЗаказа,"ДФ=dd.MM.yyyy"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Выборка.Комментарий)));	
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "buyer_fullname", 	КорректировкаСпецСимволов(СокрЛП(Выборка.КонтактноеЛицо)));	
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "buyer_phone",	 	КорректировкаСпецСимволов(СокрЛП(Выборка.Телефон)));	
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_prepay",			Формат(Выборка.СуммаАванса,"ЧРД=.; ЧН=0; ЧГ=0"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_source_order",	Формат(Выборка.КодИсточника,"ЧГ=0")); 
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc_source_order",	КорректировкаСпецСимволов(СокрЛП(Выборка.НомерИнтернетЗаказа)));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc_source_order",	Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_order",			КорректировкаСпецСимволов(СокрЛП(Выборка.ШКЗаказа)));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_extended_selection",	Формат(Число(Выборка.ПодборПартийВАРМ),"ЧН=0; ЧГ=0") );	
		ЗаписьXML.ЗаписатьСтроку("</out_buyer_order_hdr>");
		
	КонецЕсли;
	
КонецПроцедуры

Функция Архивация(Файл)
	//Проверяем на наличие файла (на всяк случай ), потом геть его в архив, а dbf удаляем
	ВремФайл = Новый Файл(Файл);
	Если ВремФайл.Существует() Тогда
		ИмяАрхива = ВремФайл.Путь + "" + ВремФайл.ИмяБезРасширения + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный); 
		ФайлАрхива.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно); 
		ФайлАрхива.Записать();
		УдалитьФайлы(Файл);
	КонецЕсли;
	Возврат Новый Файл(ИмяАрхива);
КонецФункции

Процедура СформироватьСтруктуруДБФ(ТЗ,ДБФ)
	
	//============================< Генерим структуру DBF по ТЗ >================================GtG===
	Для Каждого Кол из ТЗ.Колонки Цикл
		//----------------------------------------------------------------------
		// Номер документа, дата и код аптеки нам в теле DBF не нужны, посему пропускаем их
		Если (Кол.Имя = "NDOC") или (Кол.Имя = "DateDoc") или (Кол.Имя = "PODRCD") Тогда
			Продолжить;
		КонецЕсли;
		//--------------------------------------------------------Virus----КОНЕЦ--28.11.2007
		
		Если Кол.ТипЗначения.СодержитТип(Тип("Дата")) ТОгда
			Т="D";
			Д=0;
			Тч=0;
		ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Число")) Тогда	
			Т="N";
			Д=15;
			Тч=2;
		ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Строка")) Тогда	
			Т="S";
			Д=150;
			Тч=0;
		Иначе
			//Сообщить("хрен знает какой тип");
		КонецЕсли;
		
		Если (Кол.Имя = "EAN13") или (Кол.Имя = "ExtParty") Тогда
			Т="S";
			Д=13;
			Тч=0;
		ИначеЕсли (Кол.Имя = "NameOKEI") или (Кол.Имя = "NDefOKEI") Тогда
			Т="S";
			Д=10;
			Тч=0;
		ИначеЕсли (Кол.Имя = "INN") Тогда
			Т="S";
			Д=12;
			Тч=0;
		ИначеЕсли (Кол.Имя = "KPP") Тогда
			Т="S";
			Д=9;
			Тч=0;
		ИначеЕсли (Кол.Имя = "NZAKSTR") Тогда
			Т="S";
			Д=20;
			Тч=0;
		КонецЕсли;
		
		
		
		
		ДБФ.поля.Добавить(Кол.Имя,Т,Д,Тч);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьФайлДБФ_для_АйДиФарма(ВремИмяФайла)
	
			ДБФ= Новый  Xbase;
			ДБФ.Кодировка = КодировкаXBase.OEM;
			ДБФ.поля.Добавить("NDOC","N",10,0);
			ДБФ.поля.Добавить("DDOC","D");
			ДБФ.поля.Добавить("idtype","N",3,0);
			ДБФ.поля.Добавить("idfirm","N",3,0);
			ДБФ.поля.Добавить("iddep","N",5,0);
			ДБФ.поля.Добавить("ndep","S",200);
			ДБФ.поля.Добавить("szwonds","N",10,2);			
			ДБФ.поля.Добавить("szwnds","N",10,2);			
			ДБФ.поля.Добавить("srwonds","N",10,2);			
			ДБФ.поля.Добавить("srwnds","N",10,2);			
			
			ДБФ.поля.Добавить("idgood","N",10,0);
			ДБФ.поля.Добавить("ngood","S",150);
			ДБФ.поля.Добавить("idprod","N",10,0);
			ДБФ.поля.Добавить("nprod","S",150);
			ДБФ.поля.Добавить("coeff","N",10,0);
			ДБФ.поля.Добавить("coeffp","N",10,0);
			ДБФ.поля.Добавить("dvalid","D");
			ДБФ.поля.Добавить("series","S",30,0);
			ДБФ.поля.Добавить("eancode","S","13");
			ДБФ.поля.Добавить("barcode","S","13");
			ДБФ.поля.Добавить("extpart","S",13);
			ДБФ.поля.Добавить("idngtd","N",10,0);
			ДБФ.поля.Добавить("nngtd","S",30);
			ДБФ.поля.Добавить("idcnt","N",10,0);
			ДБФ.поля.Добавить("ncnt","S",50);
			ДБФ.поля.Добавить("cntcode3","S",5);
			ДБФ.поля.Добавить("qntd","N",10,2);
			ДБФ.поля.Добавить("qntn","N",10,2);
			ДБФ.поля.Добавить("qntb","N",10,2);
			ДБФ.поля.Добавить("pndsz","N",15,2);
			ДБФ.поля.Добавить("pndsr","N",15,2);
			ДБФ.поля.Добавить("costreg","N",15,2);
			ДБФ.поля.Добавить("czwonds","N",15,2);
			ДБФ.поля.Добавить("czwnds","N",15,2);
			ДБФ.поля.Добавить("crwonds","N",15,2);
			ДБФ.поля.Добавить("crwnds","N",15,2);
			ДБФ.поля.Добавить("sszwonds","N",15,2);
			ДБФ.поля.Добавить("ssznds","N",15,2);
			ДБФ.поля.Добавить("sszwnds","N",15,2);
			ДБФ.поля.Добавить("ssrwonds","N",15,2);
			ДБФ.поля.Добавить("ssrnds","N",15,2);
			ДБФ.поля.Добавить("ssrwnds","N",15,2);
			
			ДБФ.поля.Добавить("idcontr","N",10,0);
			ДБФ.поля.Добавить("ncontr","S",150);				  
			ДБФ.поля.Добавить("inncontr","S",15);				  
			ДБФ.поля.Добавить("kppcontr","S",15);				  
			ДБФ.поля.Добавить("ndem","S",30);
			ДБФ.поля.Добавить("ddem","D");

			ДБФ.поля.Добавить("ndcontr","S",50);
			ДБФ.поля.Добавить("ddcontr","D");
			ДБФ.поля.Добавить("nsfcontr","S",50);
			ДБФ.поля.Добавить("dsfcontr","D");
			
			ДБФ.поля.Добавить("aidext","S",15);
			ДБФ.поля.Добавить("idsubtype","N",3);
			ДБФ.поля.Добавить("idmnn","N",10);
			ДБФ.поля.Добавить("mnnname","S",120);
			ДБФ.поля.Добавить("latname","S",100);


			
			Попытка
				ДБФ.СоздатьФайл(ВремИмяФайла);
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
				Возврат Неопределено;
			КонецПопытки;
			
	        Возврат ДБФ;	
КонецФункции
 
Процедура СохранитьЦеныМодульДокумента() Экспорт
	
		Движения.Цены.Очистить(); 			 
		Движения.Цены.Записать();
		
		Для Каждого Стр из Товар Цикл
			
			
			
			Если Стр.ЦенаРозн=0 Тогда
				#Если Клиент Тогда
					Сообщить("У товара "+Стр.Товар+" розничная цена = 0 !");
				#КонецЕсли
				Продолжить;
			КонецЕсли;	
			
			
			ЗапРС=Движения.Цены.Добавить();
			
			ЗапРС.Активность=Истина;
			ЗапРС.АП=Стр.Товар;
			
			
			ЗапРС.РЕГИОН=Склад.Регион;
						
			ЗапРС.Партия=Стр.Партия;
			ЗапРС.Период=Дата;
			ЗапРС.Регистратор=ЭтотОбъект.Ссылка;
			
			ЗапРС.ЦенаРознГТТ=Стр.ЦенаРозн/Стр.Коэфф;
			
		КонецЦикла; 
		Движения.Цены.Записать();
	
КонецПроцедуры

Процедура ОтправитьПисьмоВАптеку()
	
	МПочтец= Обработки.Почтарь;
	
	Почтец=МПочтец.Создать();
	Почтец.СписокВложений.Очистить();
	Почтец.Рассылка.Очистить();
	
	
	Почтец.Автоотправка=ИСТИНА;
	
	Почтец.Рассылка.Добавить(СокрЛП(Склад.Мэйл));
	
	НомерИнтернетЗаказа = ДокОснование_пересмотреть.НомерЗаявкиАптеки;
	КомментарийЗаказа = ДокОснование_пересмотреть.Комментарий;
	
	Почтец.Тема="ВНИМАНИЕ: ИНТЕРНЕТ заказ №" + НомерИнтернетЗаказа + " накладная №" + Номер;
	Почтец.ТекстПисьма=" 
	| Вам выгружена накладная №" + Номер + " от " + ВхДатаНакл + " 
	| Поставщик: " + Поставщик + "
	| Номер интернет заказа: №" + НомерИнтернетЗаказа + "
	| Клиент: " + КомментарийЗаказа + "
	|
	|------------------------------------------
	|";
	
	Почтец.функция_Послать();
	
	
	
КонецПроцедуры

Функция Выгрузить_в_АйДиФарма()
	
	Слэш = "\";
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП = Константы.КаталогФТПЛинукс.Получить();
		Слэш = "/";
	Иначе
		КаталогФТП = Константы.КаталогФТП.Получить();
	КонецЕсли;
	
	КодСклада = Формат(Склад.Код,"ЧГ=0");		
	РаботаТолькоПоКомиссии = Склад.РаботаТолькоПоКомиссии;
	Префикс = "pst";
	ВремИмяФайла = "";
	НормальноеИмяФайла = "";
	КонечныйКаталогФайла = "";
	ВремИмяФайла =ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+ "pst_ids.dbf"; 
		
	КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(КодСклада)=1,"0"+КодСклада,КодСклада) + Слэш + "In" + Слэш;
	ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
	НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + СокрЛП(КодСклада) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + СокрЛП(Лев(Дата,10)) +".dbf";
	Если НЕ ЗначениеЗаполнено(ПоставщикКомитент) и ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.Комиссия Тогда
		ТоварПоКомиссии = Истина;
	Иначе
		ТоварПоКомиссии = Ложь;
	КонецЕсли;
	
	Если РаботаТолькоПоКомиссии = Ложь или ТоварПоКомиссии Тогда
		ТХТ = "ВЫБРАТЬ
		      |	Поступление.Ссылка.Номер КАК ndoc,
		      |	Поступление.Ссылка.Дата КАК ddoc,
		      |	Поступление.Ссылка.ВидПоступленияТовара.Порядок КАК idtype,
		      |	Поступление.Ссылка.Фирма.Код КАК idfirm,
		      |	Поступление.Ссылка.Склад.Код КАК iddep,
		      |	Поступление.Ссылка.Склад.Наименование КАК ndep,
		      |	Поступление.Ссылка.Поставщик.Код КАК idcontr,
		      |	Поступление.Ссылка.Поставщик.Наименование КАК ncontr,
		      |	Поступление.Ссылка.Поставщик.ИНН КАК inncontr,
		      |	Поступление.Ссылка.Поставщик.КПП КАК kppcontr,
		      |	0 КАК ndem,
		      |	ДАТАВРЕМЯ(1, 1, 1) КАК ddem,
		      |	Поступление.Ссылка.ВхНомерНакл КАК ndcontr,
		      |	Поступление.Ссылка.ВхДатаНакл КАК ddcontr,
		      |	Поступление.Ссылка.ВхНомерСФ КАК nsfcontr,
		      |	Поступление.Ссылка.ВхДатаСФ КАК dsfcontr,
		      |	Поступление.КодТовара КАК idgood,
		      |	Поступление.Товар.Наименование КАК ngood,
		      |	Поступление.КоэффициентРазбивки КАК КоэффициентПоУмолчанию,
		      |	Поступление.Производитель.Код КАК idprod,
		      |	Поступление.Производитель.Наименование КАК nprod,
		      |	Поступление.Коэфф КАК coeffp,
		      |	Поступление.СрокГодности КАК dvalid,
		      |	ВЫБОР
		      |		КОГДА Поступление.Серия = """"
		      |			ТОГДА ""*""
		      |		ИНАЧЕ Поступление.Серия
		      |	КОНЕЦ КАК series,
		      |	Поступление.Баркод КАК eancode,
		      |	Партии.Наименование КАК barcode,
		      |	Поступление.КодПартии КАК extpart,
		      |	0 КАК idngtd,
		      |	"""" КАК nngtd,
		      |	0 КАК idcnt,
		      |	"""" КАК ncnt,
		      |	0 КАК cntcode3,
		      |	Поступление.Количество КАК qntd,
		      |	0 КАК qntn,
		      |	0 КАК qntb,
		      |	Поступление.СтавкаНДСРозн КАК pndsz,
		      |	Поступление.СтавкаНДСРозн КАК pndsr,
		      |	Поступление.ЦенаГосРегистрации КАК costreg,
		      |	Поступление.ЦенаЗакупБезНДС КАК czwonds,
		      |	Поступление.ЦенаЗакуп КАК czwnds,
		      |	Поступление.СуммаЗакуп - Поступление.НДСЗакуп КАК sszwonds,
		      |	Поступление.НДСЗакуп КАК ssznds,
		      |	Поступление.СуммаЗакуп КАК sszwnds,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф / (1 + Поступление.СтавкаНДСРозн / 100) КАК crwonds,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф КАК crwnds,
		      |	ВЫРАЗИТЬ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество / (1 + Поступление.СтавкаНДСРозн / 100) КАК ЧИСЛО(15, 2)) КАК ssrwonds,
		      |	ВЫРАЗИТЬ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество - ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество / (1 + Поступление.СтавкаНДСРозн / 100) КАК ЧИСЛО(15, 2)) КАК ssrnds,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество КАК ssrwnds,
		      |	ЕСТЬNULL(Реестр.Код, 0) КАК aidext,
		      |	ЕСТЬNULL(Поступление.Ссылка.ТипНакладной.Порядок, 0) КАК idsubtype,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК idmnn,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК mnnname,
		      |	ПОДСТРОКА(Поступление.Товар.МеждународноеНазвание, 1, 100) КАК latname
		      |ИЗ
		      |	Документ.УЗ_ПоступлениеТовара.Товар КАК Поступление
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрДокументов КАК Реестр
		      |		ПО (Реестр.Объект = Поступление.Ссылка)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = Поступление.КодПартии)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		      |		ПО Поступление.КодТовара = РЦ.ТоварКод
		      |			И (РЦ.АптекаКод = &СкладКод)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		      |		ПО Поступление.КодТовара = РЦП.ТоварКод
		      |			И Поступление.КодПартии = РЦП.ПартияКод
		      |			И (РЦП.АптекаКод = &СкладКод)
		      |ГДЕ
		      |	Поступление.Ссылка = &Ссылка
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	ngood";	
	Иначе
		ТХТ = "ВЫБРАТЬ
		      |	Поступление.Ссылка.Номер КАК ndoc,
		      |	Поступление.Ссылка.Дата КАК ddoc,
		      |	Поступление.Ссылка.ВидПоступленияТовараКомитент.Порядок КАК idtype,
		      |	Поступление.Ссылка.Фирма.Код КАК idfirm,
		      |	Поступление.Ссылка.Склад.Код КАК iddep,
		      |	Поступление.Ссылка.Склад.Наименование КАК ndep,
		      |	Поступление.Ссылка.ПоставщикКомитент.Код КАК idcontr,
		      |	Поступление.Ссылка.ПоставщикКомитент.Наименование КАК ncontr,
		      |	Поступление.Ссылка.ПоставщикКомитент.ИНН КАК inncontr,
		      |	Поступление.Ссылка.ПоставщикКомитент.КПП КАК kppcontr,
		      |	0 КАК ndem,
		      |	ДАТАВРЕМЯ(1, 1, 1) КАК ddem,
		      |	Поступление.Ссылка.ВхНомерНакл КАК ndcontr,
		      |	Поступление.Ссылка.ВхДатаНакл КАК ddcontr,
		      |	Поступление.Ссылка.ВхНомерСФ КАК nsfcontr,
		      |	Поступление.Ссылка.ВхДатаСФ КАК dsfcontr,
		      |	Поступление.КодТовара КАК idgood,
		      |	Поступление.Товар.Наименование КАК ngood,
		      |	Поступление.КоэффициентРазбивки КАК КоэффициентПоУмолчанию,
		      |	Поступление.Производитель.Код КАК idprod,
		      |	Поступление.Производитель.Наименование КАК nprod,
		      |	Поступление.Коэфф КАК coeffp,
		      |	Поступление.СрокГодности КАК dvalid,
		      |	ВЫБОР
		      |		КОГДА Поступление.Серия = """"
		      |			ТОГДА ""*""
		      |		ИНАЧЕ Поступление.Серия
		      |	КОНЕЦ КАК series,
		      |	Поступление.Баркод КАК eancode,
		      |	Партии.Наименование КАК barcode,
		      |	Поступление.КодПартии КАК extpart,
		      |	0 КАК idngtd,
		      |	"""" КАК nngtd,
		      |	0 КАК idcnt,
		      |	"""" КАК ncnt,
		      |	0 КАК cntcode3,
		      |	Поступление.Количество КАК qntd,
		      |	0 КАК qntn,
		      |	0 КАК qntb,
		      |	Поступление.СтавкаНДСРозн КАК pndsz,
		      |	Поступление.СтавкаНДСРозн КАК pndsr,
		      |	Поступление.ЦенаГосРегистрации КАК costreg,
		      |	Поступление.ЦенаЗакупБезНДС КАК czwonds,
		      |	Поступление.ЦенаЗакуп КАК czwnds,
		      |	Поступление.СуммаЗакуп - Поступление.НДСЗакуп КАК sszwonds,
		      |	Поступление.НДСЗакуп КАК ssznds,
		      |	Поступление.СуммаЗакуп КАК sszwnds,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф / (1 + Поступление.СтавкаНДСРозн / 100) КАК crwonds,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф КАК crwnds,
		      |	ВЫРАЗИТЬ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество / (1 + Поступление.СтавкаНДСРозн / 100) КАК ЧИСЛО(15, 2)) КАК ssrwonds,
		      |	ВЫРАЗИТЬ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество - ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество / (1 + Поступление.СтавкаНДСРозн / 100) КАК ЧИСЛО(15, 2)) КАК ssrnds,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество КАК ssrwnds,
		      |	ЕСТЬNULL(Реестр.Код, 0) КАК aidext,
		      |	ЕСТЬNULL(Поступление.Ссылка.ТипНакладной.Порядок, 0) КАК idsubtype,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК idmnn,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК mnnname,
		      |	ПОДСТРОКА(Поступление.Товар.МеждународноеНазвание, 1, 100) КАК latname
		      |ИЗ
		      |	Документ.УЗ_ПоступлениеТовара.Товар КАК Поступление
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрДокументов КАК Реестр
		      |		ПО (Реестр.Объект = Поступление.Ссылка)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = Поступление.КодПартии)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		      |		ПО Поступление.КодТовара = РЦ.ТоварКод
		      |			И (РЦ.АптекаКод = &СкладКод)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		      |		ПО Поступление.КодТовара = РЦП.ТоварКод
		      |			И Поступление.КодПартии = РЦП.ПартияКод
		      |			И (РЦП.АптекаКод = &СкладКод)
		      |ГДЕ
		      |	Поступление.Ссылка = &Ссылка
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	ngood";				  
	КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.УстановитьПараметр("СкладКод",Склад.Код);
			
			ТЗ=Запрос.Выполнить().Выгрузить();
			
            ТЗСумм = ТЗ.Скопировать(,"ndoc,aidext,sszwonds, sszwnds, ssrwonds, ssrwnds");
			ТЗСумм.Свернуть("ndoc,aidext","sszwonds, sszwnds, ssrwonds, ssrwnds");
			
			СводныеСуммы = ТЗСумм.Получить(0);
			
			Если СводныеСуммы.aidext = 0 Тогда
				
				Результат = Обмен.СоздатьЗаписьВРеестре(Ссылка,111);
				
				Если НЕ Результат = Неопределено Тогда
					aidext = Результат.НашАид;
				Иначе
					#Если Клиент Тогда
						Сообщить("Не удалось создать запись в реестре документов. Документ не может быть выгружен");
					#КонецЕсли
					Возврат Ложь;
				КонецЕсли;
				
			Иначе
				aidext = СводныеСуммы.aidext;
			КонецЕсли;
			
			ДБФ = СоздатьФайлДБФ_для_АйДиФарма(ВремИмяФайла);
			Если ДБФ = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для каждого стр из ТЗ Цикл
				ДБФ.Добавить();
				ЗаполнитьЗначенияСвойств(ДБФ,стр);
				
				Если РаботаТолькоПоКомиссии = Истина Тогда
					ДБФ.ndcontr = ДБФ.ndcontr + "-(" + Формат(Номер,"ЧГ=0") + ")";
					ДБФ.nsfcontr = ДБФ.nsfcontr + "-(" + Формат(Номер,"ЧГ=0") + ")";
				КонецЕсли;
				
				Если  стр.coeffp = 1  Тогда
					Если  стр.КоэффициентПоУмолчанию = 1 Тогда
						ДБФ.coeff		= 1; //если даю упаковку, то здесь коэфф разбивки
						ДБФ.coeffp		= 1; 
					Иначе
						ДБФ.coeff		= стр.КоэффициентПоУмолчанию; //если оприходовали мелкими, но товар разбивочный, то здесь 1
						ДБФ.coeffp		= стр.КоэффициентПоУмолчанию; //тут коэффициент для приведения
					КонецЕсли;
                Иначе
					ДБФ.coeff		= стр.coeffp; //если даю упаковку, то здесь коэфф разбивки
					ДБФ.coeffp		= 1; 
				КонецЕсли;
				ДБФ.extpart		= Формат(стр.extpart,"ЧГ=0");	
				
				
				ДБФ.aidext			= Формат(aidext,"ЧГ=0");
				
				ДБФ.szwonds		= СводныеСуммы.sszwonds;
				ДБФ.szwnds		= СводныеСуммы.sszwnds;
				ДБФ.srwonds		= СводныеСуммы.ssrwonds;
				ДБФ.srwnds		= СводныеСуммы.ssrwnds;
				
				ДБФ.cntcode3	= Формат(стр.cntcode3,"ЧЦ=3; ЧВН=");
				
				ДБФ.Записать();
				
			КонецЦикла;
			
			
			Если ДБФ.Открыта()  = Истина Тогда
				ДБФ.ЗакрытьФайл();
			КонецЕсли;
			
			Попытка
				ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла); // переименовываем в норм. вид
				Архивация(НормальноеИмяФайла);
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
				#Если Сервер Тогда
					МЗ = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
					МЗ.Объект = "Выгрузка прихода";
					МЗ.ДатаОшибки = ТекущаяДата();
					МЗ.КодАптеки = КодСклада;
					МЗ.ОписаниеОшибки = ОписаниеОшибки();
					МЗ.МестоВозникновения = ""+ВремИмяФайла;
					МЗ.Записать();		
				#КонецЕсли
				Попытка
					УдалитьФайлы(ВремИмяФайла);
				Исключение
				КонецПопытки;
				Возврат Ложь;
			КонецПопытки;	
			
		Если ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ Тогда
			Попытка
				ОтправитьПисьмоВАптеку();	
			Исключение
			
			КонецПопытки;
		КонецЕсли;
	
	Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
	Для н = 0 по 2 Цикл
		Попытка
			Записать(РежимЗаписиДокумента.Запись);	
			ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в файл");
			Прервать;
		Исключение
			#Если Клиент Тогда
				Сообщить("Повторим через 2 сек. : " + ОписаниеОшибки());
			#КонецЕсли
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	

	
КонецФункции

Функция ВыгрузитьВАптекуНаНовомПОЧерезЗаписьТекста()
//	
//	
//	
//			ТХТ = "ВЫБРАТЬ
//			      |	Поступление.Товар КАК _Товар,
//			      |	Поступление.Товар.Код КАК КодТовара,
//			      |	Поступление.Товар.ЕдиницаПоУмолчанию.К КАК КоэффициентПоУмолчанию,
//			      |	ЕСТЬNULL(Поступление.Производитель.Код, 0) КАК КодПроизводителя,
//			      |	Поступление.Производитель.Наименование КАК НаименованиеПроизводителя,
//			      |	Поступление.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
//			      |	Поступление.Производитель КАК Производитель,
//			      |	Поступление.Коэфф КАК coeffp,
//			      |	Поступление.СрокГодности КАК СрокГодности,
//			      |	ВЫБОР
//			      |		КОГДА Поступление.Серия = """"
//			      |			ТОГДА ""*""
//			      |		ИНАЧЕ Поступление.Серия
//			      |	КОНЕЦ КАК Серия,
//			      |	Поступление.Баркод КАК eancode,
//			      |	Партии.Наименование КАК barcode,
//			      |	Партии.ФирмаИсходная КАК ФирмаИсходная,
//			      |	Поступление.КодПартии КАК КодПартии,
//			      |	Поступление.НомерГТД КАК НомерГТД,
//			      |	Поступление.Количество КАК qnt,
//			      |	Поступление.СтавкаНДСЗакуп КАК pndsz,
//			      |	Поступление.СтавкаНДСРозн КАК pndsr,
//			      |	Поступление.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
//			      |	Поступление.ЦенаПроизводителя КАК ЦенаПроизводителя,
//			      |	Поступление.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
//			      |	Поступление.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
//			      |	ВЫРАЗИТЬ(Поступление.ЦенаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакуп,
//			      |	Поступление.СуммаЗакупБезНДС КАК СуммаЗакупБезНДСПоДаннымПоставщика,
//			      |	Поступление.НДСЗакуп КАК СуммаЗакупНДСПоДаннымПоставщика,
//			      |	Поступление.СуммаЗакуп КАК СуммаЗакупСНДСПоДаннымПоставщика,
//			      |	(ВЫРАЗИТЬ(Поступление.СуммаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) - Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупНДС,
//			      |	Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
//			      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК КодМНН,
//			      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
//			      |	Поступление.НомерСтроки
//			      |ПОМЕСТИТЬ Выборка
//			      |ИЗ
//			      |	Документ.УЗ_ПоступлениеТовара.Товар КАК Поступление
//			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
//			      |		ПО (Партии.Код = Поступление.КодПартии)
//			      |ГДЕ
//			      |	Поступление.Ссылка = &Ссылка
//			      |;
//			      |
//			      |////////////////////////////////////////////////////////////////////////////////
//			      |ВЫБРАТЬ РАЗЛИЧНЫЕ
//			      |	Выборка.КодМНН,
//			      |	Выборка.НаименованиеМНН
//			      |ИЗ
//			      |	Выборка КАК Выборка
//			      |ГДЕ
//			      |	Выборка.КодМНН > 0
//			      |;
//			      |
//			      |////////////////////////////////////////////////////////////////////////////////
//			      |ВЫБРАТЬ РАЗЛИЧНЫЕ
//			      |	Выборка.КодПроизводителя КАК КодПроизводителя,
//			      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
//			      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
//			      |ИЗ
//			      |	Выборка КАК Выборка
//			      |ГДЕ
//			      |	Выборка.КодПроизводителя > 0
//			      |;
//			      |
//			      |////////////////////////////////////////////////////////////////////////////////
//			      |ВЫБРАТЬ
//			      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
//			      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
//			      |	СУММА(Выборка.СуммаЗакупНДСПоДаннымПоставщика) КАК СуммаЗакупНДСПоДаннымПоставщика,
//			      |	СУММА(Выборка.СуммаЗакупСНДСПоДаннымПоставщика) КАК СуммаЗакупСНДСПоДаннымПоставщика,
//			      |	СУММА(Выборка.СуммаЗакупБезНДСПоДаннымПоставщика) КАК СуммаЗакупБезНДСПоДаннымПоставщика
//			      |ИЗ
//			      |	Выборка КАК Выборка
//			      |;
//			      |
//			      |////////////////////////////////////////////////////////////////////////////////
//			      |ВЫБРАТЬ
//			      |	Выборка._Товар,
//			      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
//			      |	Выборка._Товар.Код КАК КодТовара,
//			      |	Выборка._Товар.Наименование КАК Наименование,
//			      |	Выборка._Товар.МеждународноеНазвание КАК МеждународноеНазвание,
//			      |	Выборка.КодПроизводителя,
//			      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
//			      |	Выборка.КодМНН КАК КодМНН,
//			      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
//			      |	Выборка._Товар.ПККН КАК ПККН,
//			      |	ВЫБОР
//			      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
//			      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
//			      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
//			      |	КОНЕЦ КАК ДатаВводаВАП,
//			      |	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
//			      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
//			      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
//			      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
//			      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
//			      |	Выборка.КоэффициентПоУмолчанию
//			      |ИЗ
//			      |	Выборка КАК Выборка
//			      |;
//			      |
//			      |////////////////////////////////////////////////////////////////////////////////
//			      |ВЫБРАТЬ
//			      |	Выборка.НомерСтроки,
//			      |	Выборка.КодТовара,
//			      |	Выборка.КоэффициентПоУмолчанию,
//			      |	Выборка.КодПроизводителя,
//			      |	Выборка.coeffp,
//			      |	Выборка.СрокГодности,
//			      |	Выборка.Серия,
//			      |	Выборка.eancode,
//			      |	Выборка.barcode,
//			      |	Выборка.КодПартии,
//			      |	Выборка.ФирмаИсходная,
//			      |	Выборка.НомерГТД,
//			      |	Выборка.qnt,
//			      |	Выборка.pndsz,
//			      |	Выборка.pndsr,
//			      |	Выборка.ЦенаПроизводителя,
//			      |	Выборка.ЦенаГосРегистрации,
//			      |	Выборка.ЦенаЗакупБезНДС,
//			      |	Выборка.ЦенаЗакупБезНДСПоДаннымПоставщика,
//			      |	Выборка.ЦенаЗакуп,
//			      |	Выборка.СуммаЗакупБезНДС,
//			      |	Выборка.СуммаЗакупНДС,
//			      |	Выборка.СуммаЗакупНДСПоДаннымПоставщика,
//			      |	Выборка.СуммаЗакупСНДСПоДаннымПоставщика,
//			      |	Выборка.СуммаЗакупБезНДСПоДаннымПоставщика
//			      |ИЗ
//			      |	Выборка КАК Выборка
//			      |;
//			      |
//			      |////////////////////////////////////////////////////////////////////////////////
//			      |УНИЧТОЖИТЬ Выборка";	
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст = ТХТ;
//			Запрос.УстановитьПараметр("Ссылка",Ссылка);
//			Результат				= Запрос.ВыполнитьПакет();	   
//			ВыборкаМНН				= Результат[1].Выбрать();
//			ВыборкаПроизводители	= Результат[2].Выбрать();
//			ВыборкаИтоги			= Результат[3].Выбрать();
//			ВыборкаТовары			= Результат[4].Выбрать();
//			ВыборкаСтроки			= Результат[5].Выбрать();
//			
//			ВыборкаИтоги.Следующий(); //на первую строку
//			
//			
//			
//		

//	Контрагент = Поставщик;
//	КодКонтрагента =  Формат(Контрагент.Код,"ЧГ=0");
//	
//	СчетКонтрагента = Контрагент.ОсновнойСчет;
//	КодСчетаКонтрагента = СчетКонтрагента.Код;
//	КодБанка = СчетКонтрагента.Банк.Код; 
//	
//	ЕстьСчет = Истина;
//	Если СчетКонтрагента = Неопределено или СчетКонтрагента.Пустая() или КодСчетаКонтрагента = Неопределено Тогда
//		ЕстьСчет = ЛОЖЬ;
//	КонецЕсли;
//	
//	ИмяФайла = ПолучитьИмяВременногоФайла("xml");

//	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");
//	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

//	ЗаписьXML.ЗаписатьСтроку("<document>"); 

//	
//	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "IN_SUPP"); 
//	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 
//	Если ЕстьСчет Тогда
//		ЗаписьXML.ЗаписатьСтроку("<bank>");
//			ЗаписьXML.ЗаписатьСтроку("<row>");
//				   ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
//				   ЗаписатьЭлементXML(ЗаписьXML, "bic",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
//				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
//				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Банк.Наименование)));
//				   ЗаписатьЭлементXML(ЗаписьXML, "corr_acc",	СокрЛП(СчетКонтрагента.Банк.КоррСчет));
//			ЗаписьXML.ЗаписатьСтроку("</row>");
//		ЗаписьXML.ЗаписатьСтроку("</bank>"); //конец записи секции  "bank"
//		
//		ЗаписьXML.ЗаписатьСтроку("<bank_account>");
//			ЗаписьXML.ЗаписатьСтроку("<row>");
//				   ЗаписатьЭлементXML(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );				
//				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
//				   ЗаписатьЭлементXML(ЗаписьXML, "descr",			СокрЛП(СчетКонтрагента.Наименование));
//				   ЗаписатьЭлементXML(ЗаписьXML, "num",				СокрЛП(СчетКонтрагента.НомерСчета));
//				   ЗаписатьЭлементXML(ЗаписьXML, "id_contragent",	КодКонтрагента);
//				   ЗаписатьЭлементXML(ЗаписьXML, "id_bank",			Формат(КодБанка,"ЧГ=0; ЧН=0"));
//			ЗаписьXML.ЗаписатьСтроку("</row>");
//		ЗаписьXML.ЗаписатьСтроку("</bank_account>"); //конец записи секции  "bank"		
//	КонецЕсли;			
//	
//		ЗаписьXML.ЗаписатьСтроку("<contragent>");
//			ЗаписьXML.ЗаписатьСтроку("<row>");
//				 ЗаписатьЭлементXML(ЗаписьXML, "id", КодКонтрагента); 			
//			     ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", ""+Число(Контрагент.ПометкаУдаления)); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ПолнНаименование))); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(Контрагент.Наименование)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ИНН)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(Контрагент.КПП)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОГРН)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОКПО)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(Контрагент.Адрес)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(Контрагент.АдресГрузополучателя)));
//				 Если ЕстьСчет Тогда
//				 	ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );
//				 Иначе
//					ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", "0" );
//				 КонецЕсли;
//				 ЗаписатьЭлементXML(ЗаписьXML, "type_tax", "" + Число(Контрагент.КонтрагентНаУСН)); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "e_mail", ""); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "phone", "");
//				 ЗаписатьЭлементXML(ЗаписьXML, "director", "");
//				 ЗаписатьЭлементXML(ЗаписьXML, "bookkeeper", "");
//			ЗаписьXML.ЗаписатьСтроку("</row>");
//		ЗаписьXML.ЗаписатьСтроку("</contragent>"); //конец записи секции  "contragent"
//		
//		
//		ЗаписьXML.ЗаписатьСтроку("<inter_name>");
//			Пока ВыборкаМНН.Следующий() Цикл
//				ЗаписьXML.ЗаписатьСтроку("<row>");
//				   ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(ВыборкаМНН.КодМНН,"ЧГ=0; ЧН=0") );				
//				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
//				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаМНН.НаименованиеМНН)));
//				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
//				ЗаписьXML.ЗаписатьСтроку("</row>");
//			КонецЦикла;
//		ЗаписьXML.ЗаписатьСтроку("</inter_name>"); //конец записи секции  "mnn"
//		
//		
//		ЗаписьXML.ЗаписатьСтроку("<producer>");
//			Пока ВыборкаПроизводители.Следующий() Цикл
//				ЗаписьXML.ЗаписатьСтроку("<row>");
//				   ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаПроизводители.КодПроизводителя,"ЧГ=0; ЧН=0") );
//				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаПроизводители.ПометкаУдаленияПроизводителя)); 
//				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаПроизводители.НаименованиеПроизводителя)));
//				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
//				   ЗаписатьЭлементXML(ЗаписьXML, "id_country",	"0");
//				   ЗаписатьЭлементXML(ЗаписьXML, "is_importer",	"0");
//				ЗаписьXML.ЗаписатьСтроку("</row>");
//			КонецЦикла;
//		ЗаписьXML.ЗаписатьСтроку("</producer>"); //конец записи секции  "producer"

//		ЗаписьXML.ЗаписатьСтроку("<goods>");
//			Пока ВыборкаТовары.Следующий() Цикл
//				ЗаписьXML.ЗаписатьСтроку("<row>");
//				  ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаТовары.КодТовара,"ЧГ=0"));
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаТовары.ПометкаУдаления)); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_active",	"" + Формат(Число(ВыборкаТовары.УчаствуетВАП),"ЧН=0"));
//				  ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Наименование)));
//				  ЗаписатьЭлементXML(ЗаписьXML, "descr_ecr",	"");
//				  ЗаписатьЭлементXML(ЗаписьXML, "descr_en",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.МеждународноеНазвание)));
//				  ЗаписатьЭлементXML(ЗаписьXML, "article",		""); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "p_vat",		Формат(ВыборкаТовары.Ставка,"ЧГ=0; ЧН=0")); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ap",	"0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ftg",	"0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_main","0"); //основная группа
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_general","0"); //обобщенная группа
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_brand_goods","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_trade_name","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_inter_name",Формат(ВыборкаТовары.КодМНН,"ЧГ=0; ЧН=0")); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_category_goods","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_sub_category_goods","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_med_form",	"0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_destination","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_prod_form",	"0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "id_storing_place","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_life_important","" + Формат(Число(ВыборкаТовары.ЖНВЛС),"ЧН=0"));  
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_social_important","0"); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(ВыборкаТовары.ПККН),"ЧН=0")); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_mandatory",		"" + Формат(Число(ВыборкаТовары.ОбязательноеНаличие),"ЧН=0"));  
//				  ЗаписатьЭлементXML(ЗаписьXML, "is_prescription","" + Формат(Число(ВыборкаТовары.ОтпускПоРецепту),"ЧН=0")); 
//				  ЗаписатьЭлементXML(ЗаписьXML, "date_in", 		Формат(ВыборкаТовары.ДатаВВодаВАП,"ДФ=dd.MM.yyyy")); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "id_group",		"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "is_season",	"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "id_exclusive_post","0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "id_unit",		"0");
//				  //ЗаписатьЭлементXML(ЗаписьXML, "cost_r",		Формат(ВыборкаТовары.РозничнаяЦена,"ЧРД=.; ЧН=0; ЧГ=0")); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "cost_i",		"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "min_part_ship","0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "min_qnt",		"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "max_qnt",		"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "is_discount",	"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "p_discount",	"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "max_qnt_sale",	Формат(ВыборкаТовары.МаксКоличествоВОдинЧек,"ЧГ=0; ЧН=0"));
//				  //ЗаписатьЭлементXML(ЗаписьXML, "is_course",	"0");
//				  //ЗаписатьЭлементXML(ЗаписьXML, "course_qnt",	"0"); 
//				  //ЗаписатьЭлементXML(ЗаписьXML, "min_part_dem",	"0"); 
//				ЗаписьXML.ЗаписатьСтроку("</row>");
//			КонецЦикла;
//		ЗаписьXML.ЗаписатьСтроку("</goods>"); //конец записи секции  "good"

//		ЗаписьXML.ЗаписатьСтроку("<gpart>");
//			Пока ВыборкаСтроки.Следующий() Цикл
//				ЗаписьXML.ЗаписатьСтроку("<row>");
//				
//					Если  ВыборкаСтроки.coeffp = 1  Тогда
//						Если  ВыборкаСтроки.КоэффициентПоУмолчанию = 1 Тогда
//							coeff		= 1; //если даю упаковку, то здесь коэфф разбивки
//							coeffp		= 1; 
//						Иначе
//							coeff		= ВыборкаСтроки.КоэффициентПоУмолчанию; //если оприходовали мелкими, но товар разбивочный, то здесь 1
//							coeffp		= ВыборкаСтроки.КоэффициентПоУмолчанию; //тут коэффициент для приведения
//						КонецЕсли;
//                	Иначе
//						coeff		= ВыборкаСтроки.coeffp; //если даю упаковку, то здесь коэфф разбивки
//						coeffp		= 1; 
//					КонецЕсли;				
//				
//				    ЗаписатьЭлементXML(ЗаписьXML, "id"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
//  					ЗаписатьЭлементXML(ЗаписьXML, "id_goods", Формат(ВыборкаСтроки.КодТовара,"ЧГ=0") ); 
//  					ЗаписатьЭлементXML(ЗаписьXML, "id_producer", Формат(ВыборкаСтроки.КодПроизводителя,"ЧГ=0; ЧН=0") );
//					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_pur",Формат(ВыборкаСтроки.pndsz,"ЧГ=0; ЧН=0")); 
//					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_rtl"	,Формат(ВыборкаСтроки.pndsr,"ЧГ=0; ЧН=0")); 
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_reg_wo_vat_pack",Формат(ВыборкаСтроки.ЦенаГосРегистрации,"ЧРД=.; ЧН=0; ЧГ=0")); 
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_prod_wo_vat_pack"	,Формат(ВыборкаСтроки.ЦенаПроизводителя,"ЧРД=.; ЧН=0; ЧГ=0"));
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакуп,"ЧРД=.; ЧН=0; ЧГ=0"));
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаРозн,"ЧРД=.; ЧН=0; ЧГ=0"));
//					ЗаписатьЭлементXML(ЗаписьXML, "dvalid_supp"		,Формат(ВыборкаСтроки.СрокГодности,"ДФ=dd.MM.yyyy")); 
//					ЗаписатьЭлементXML(ЗаписьXML, "series"		,КорректировкаСпецСимволов(ВыборкаСтроки.Серия)); 
//					ЗаписатьЭлементXML(ЗаписьXML, "eancode_supp"		,ВыборкаСтроки.eancode); 
//					ЗаписатьЭлементXML(ЗаписьXML, "barcode"		,ВыборкаСтроки.barcode); 
//					ЗаписатьЭлементXML(ЗаписьXML, "stcdn"		,КорректировкаСпецСимволов(ВыборкаСтроки.НомерГТД)); 
//					ЗаписатьЭлементXML(ЗаписьXML, "certif"		,""); 
//					ЗаписатьЭлементXML(ЗаписьXML, "back_margin"	,"0"); 
//					ЗаписатьЭлементXML(ЗаписьXML, "coeff"			,Формат(coeff,"ЧГ=0; ЧН=0") ) ;
//					ЗаписатьЭлементXML(ЗаписьXML, "guid"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакупБезНДС/coeff,2),"ЧРД=.; ЧН=0; ЧГ=0"));
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack_supp" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
//					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакуп/coeff,2),"ЧРД=.; ЧН=0; ЧГ=0"));
//					//ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаРозн/coeff,2),"ЧРД=.; ЧН=0; ЧГ=0"));
//  					ЗаписатьЭлементXML(ЗаписьXML, "is_opened","0");
//					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent_initial"		,КодКонтрагента); 
//					ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond_initial",	"" + Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовара)); 
//					ЗаписатьЭлементXML(ЗаписьXML, "id_firm_initial"		,	Формат(ВыборкаСтроки.ФирмаИсходная,"ЧГ=0")); 
//				ЗаписьXML.ЗаписатьСтроку("</row>");
//			КонецЦикла;
//		ЗаписьXML.ЗаписатьСтроку("</gpart>"); //конец записи секции  "str"
//		
//		
//		ЗаписьXML.ЗаписатьСтроку("<hdr>");
//			     ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"201"); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "id_doc_subtype", "" + ?(ТипНакладной.Пустая(),0,Перечисления.ТипыНакладной.Индекс(ТипНакладной))); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "guid", XMLСтрока(Ссылка)); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "status",	"1"); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "ndoc",		Формат(Номер,"ЧГ=0")); 
//				 ЗаписатьЭлементXML(ЗаписьXML, "ddoc",		Формат(Дата,"ДФ=dd.MM.yyyy"));
//				 ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond",	"" + Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовара)); 
//				 //ЗаписатьЭлементXML(ЗаписьXML, "id_firm",	Формат(Документ.Фирма.Код,"ЧГ=0"));
//				 //ЗаписатьЭлементXML(ЗаписьXML, "id_dep",	Формат(Документ.Склад.Код,"ЧГ=0"));	
//				 //ЗаписатьЭлементXML(ЗаписьXML, "id_dep_section", "0");
//				 ЗаписатьЭлементXML(ЗаписьXML, "id_contragent", КодКонтрагента);	
//				 ЗаписатьЭлементXML(ЗаписьXML, "ndoc_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерНакл)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "ddoc_contragent",	Формат(ВхДатаНакл,"ДФ=dd.MM.yyyy"));
//				 ЗаписатьЭлементXML(ЗаписьXML, "nsf_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерСФ)));
//				 ЗаписатьЭлементXML(ЗаписьXML, "dsf_contragent",	Формат(ВхДатаСФ,"ДФ=dd.MM.yyyy"));				 
//				 ЗаписатьЭлементXML(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));	
//				 ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep", 			КорректировкаСпецСимволов(СокрЛП(КомментарийАптеки)));	
//				 //ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"" + ?(Документ.ТипНакладной.Пустая(),0,Перечисления.ТипыНакладной.Индекс(Документ.ТипНакладной))); 
//				 
//				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat",	Формат(ВыборкаИтоги.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_w_vat",	Формат(ВыборкаИтоги.СуммаЗакупСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat",	Формат(ВыборкаИтоги.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat_supp"	,Формат(ВыборкаИтоги.СуммаЗакупНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
//				 ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat_supp"	,Формат(ВыборкаИтоги.СуммаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
//				 
//				 //ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_vat",	Формат(ВыборкаИтоги.СуммаРознНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				 //ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat",	Формат(Вы  боркаИтоги.СуммаРознСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//	  	ЗаписьXML.ЗаписатьСтроку("</hdr>"); //конец записи секции  "hdr"
//		
//		ВыборкаСтроки.Сбросить();
//		ЗаписьXML.ЗаписатьСтроку("<str>");
//		Пока ВыборкаСтроки.Следующий() Цикл
//			ЗаписьXML.ЗаписатьСтроку("<row>");
//				ЗаписатьЭлементXML(ЗаписьXML, "guid_gpart"	,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
//				ЗаписатьЭлементXML(ЗаписьXML, "idx"			,Формат(ВыборкаСтроки.НомерСтроки,"ЧГ=0; ЧН=0")); 
//				ЗаписатьЭлементXML(ЗаписьXML, "qnt"			,Формат(ВыборкаСтроки.qnt*ВыборкаСтроки.coeffp,"ЧГ=0; ЧН=0")); 
//				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat"	,Формат(ВыборкаСтроки.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat_supp"	,Формат(ВыборкаСтроки.СуммаЗакупНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
//				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat_supp"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
//				ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat"	,Формат(ВыборкаСтроки.СуммаРознСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
//				//ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep"		,"");
//			ЗаписьXML.ЗаписатьСтроку("</row>");
//		КонецЦикла;
//		ЗаписьXML.ЗаписатьСтроку("</str>"); //конец записи секции  "str"
//		
//		
//	
//	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "document"
//	ЗаписьXML.Закрыть();
//	ПереместитьФайл(ИмяФайла,Склад.КаталогОбмена + "\in_pst_" + Формат(Номер,"ЧГ=0; ЧН=0") + ".xml");
//	Сообщить("" + Склад.КаталогОбмена + "\in_pst_" + Формат(Номер,"ЧГ=0; ЧН=0") + ".xml");
//	
//	
//	
//	
КонецФункции

Функция ВыгрузитьВАптекуНаНовомПО()
	
	//Если ТекущаяДата() - ДатаРасценки  > 180 Тогда
		
		ТХТ = "ВЫБРАТЬ
		      |	Поступление.Товар КАК _Товар,
		      |	Поступление.КодТовара КАК КодТовара,
		      |	Поступление.КоэффициентРазбивки КАК КоэффициентРазбивки,
		      |	ЕСТЬNULL(Поступление.Производитель.Код, 0) КАК КодПроизводителя,
		      |	Поступление.Производитель.Наименование КАК НаименованиеПроизводителя,
		      |	Поступление.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
		      |	Поступление.Производитель КАК Производитель,
		      |	Поступление.Коэфф КАК КоэффициентОприходования,
		      |	Поступление.СрокГодности КАК СрокГодности,
		      |	ВЫБОР
		      |		КОГДА Поступление.Серия = """"
		      |			ТОГДА ""*""
		      |		ИНАЧЕ Поступление.Серия
		      |	КОНЕЦ КАК Серия,
		      |	Поступление.Баркод КАК eancode,
		      |	Партии.Наименование КАК barcode,
		      |	Партии.ФирмаИсходная КАК ФирмаИсходная,
		      |	Поступление.КодПартии КАК КодПартии,
		      |	Поступление.НомерГТД КАК НомерГТД,
		      |	Поступление.НомерСертификата КАК НомерСертификата,
		      |	Поступление.Количество КАК qnt,
		      |	Поступление.СтавкаНДСЗакуп КАК pndsz,
		      |	Поступление.СтавкаНДСРозн КАК pndsr,
		      |	Поступление.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
		      |	Поступление.ЦенаПроизводителя КАК ЦенаПроизводителя,
		      |	Поступление.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
		      |	Поступление.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
		      |	ВЫРАЗИТЬ(Поступление.ЦенаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакуп,
		      |	Поступление.СуммаЗакупБезНДС КАК СуммаЗакупБезНДСПоДаннымПоставщика,
		      |	Поступление.НДСЗакуп КАК СуммаЗакупНДСПоДаннымПоставщика,
		      |	Поступление.СуммаЗакуп КАК СуммаЗакупСНДСПоДаннымПоставщика,
		      |	(ВЫРАЗИТЬ(Поступление.СуммаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) - Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупНДС,
		      |	Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК КодМНН,
		      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
		      |	Поступление.НомерСтроки КАК НомерСтроки,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК ЦенаРознУпак,
		      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Поступление.КоэффициентРазбивки * Поступление.Коэфф * Поступление.Количество КАК СуммаРозн,
		      |	ВЫБОР
		      |		КОГДА НЕ РЦП.Цена ЕСТЬ NULL
		      |				ИЛИ Партии.ВидПоступления = 3
		      |				ИЛИ Партии.ВидПоступленияИсходный = 3
		      |			ТОГДА 1
		      |		ИНАЧЕ 0
		      |	КОНЕЦ КАК ЦенаИндивидуальная,
		      |	Партии.ВидПоступления КАК ВидПоступления,
		      |	Партии.БэкМаржа КАК БэкМаржа,
		      |	Поступление.ШКГрузовогоКонтейнера КАК ШКГрузовогоКонтейнера,
		      |	Поступление.ТипГрузовогоКонтейнера КАК ТипГрузовогоКонтейнера,
		      |	Поступление.Ссылка.Дата КАК ДатаДок
		      |ПОМЕСТИТЬ Выборка
		      |ИЗ
		      |	Документ.УЗ_ПоступлениеТовара.Товар КАК Поступление
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = Поступление.КодПартии)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		      |		ПО Поступление.КодТовара = РЦ.ТоварКод
		      |			И (РЦ.АптекаКод = &СкладКод)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		      |		ПО Поступление.КодТовара = РЦП.ТоварКод
		      |			И Поступление.КодПартии = РЦП.ПартияКод
		      |			И (РЦП.АптекаКод = &СкладКод)
		      |ГДЕ
		      |	Поступление.Ссылка = &Ссылка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	Выборка.КодМНН КАК КодМНН,
		      |	Выборка.НаименованиеМНН КАК НаименованиеМНН
		      |ИЗ
		      |	Выборка КАК Выборка
		      |ГДЕ
		      |	Выборка.КодМНН > 0
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	Выборка.КодПроизводителя КАК КодПроизводителя,
		      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
		      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
		      |ИЗ
		      |	Выборка КАК Выборка
		      |ГДЕ
		      |	Выборка.КодПроизводителя > 0
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
		      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
		      |	СУММА(Выборка.СуммаЗакупБезНДС + Выборка.СуммаЗакупНДС) КАК СуммаЗакупСНДС,
		      |	СУММА(Выборка.СуммаЗакупНДСПоДаннымПоставщика) КАК СуммаЗакупНДСПоДаннымПоставщика,
		      |	СУММА(Выборка.СуммаЗакупСНДСПоДаннымПоставщика) КАК СуммаЗакупСНДСПоДаннымПоставщика,
		      |	СУММА(Выборка.СуммаЗакупБезНДСПоДаннымПоставщика) КАК СуммаЗакупБезНДСПоДаннымПоставщика,
		      |	СУММА(Выборка.СуммаРозн) КАК СуммаРознСНДС
		      |ИЗ
		      |	Выборка КАК Выборка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	Выборка._Товар КАК _Товар,
		      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
		      |	Выборка._Товар.Код КАК КодТовара,
		      |	Выборка._Товар.Наименование КАК Наименование,
		      |	ПОДСТРОКА(Выборка._Товар.МеждународноеНазвание, 1, 150) КАК МеждународноеНазвание,
		      |	Выборка.КодПроизводителя КАК КодПроизводителя,
		      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
		      |	Выборка.КодМНН КАК КодМНН,
		      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
		      |	Выборка._Товар.ПККН КАК ПККН,
		      |	ВЫБОР
		      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
		      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
		      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
		      |	КОНЕЦ КАК ДатаВводаВАП,
	 		  // НДС20/18 
		      //|	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
		      |	ВЫБОР
		      |		КОГДА Выборка._Товар.СтавкаНДС.Код = 3
		      |				И Выборка.ДатаДок < ДАТАВРЕМЯ(2019, 1, 1)
		      |			ТОГДА 18
		      |		ИНАЧЕ Выборка._Товар.СтавкаНДС.Ставка
		      |	КОНЕЦ КАК Ставка,
		      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
		      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
		      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
		      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
		      |	ЕСТЬNULL(Выборка._Товар.Подкатегория.Код, 0) КАК КодПодкатегории,
		      |	ЕСТЬNULL(Выборка._Товар.МестоХранения.Код, 0) КАК КодМестаХранения,
		      |	Выборка.КоэффициентРазбивки КАК КоэффициентРазбивки,
		      |	ЕСТЬNULL(Выборка._Товар.Страна.Наименование, """") КАК Страна,
		      |	ЕСТЬNULL(Выборка._Товар.Бренд.Код, 0) КАК КодБренда
		      |ИЗ
		      |	Выборка КАК Выборка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	Выборка.НомерСтроки КАК НомерСтроки,
		      |	Выборка.КодТовара КАК КодТовара,
		      |	Выборка.КоэффициентРазбивки КАК КоэффициентРазбивки,
		      |	Выборка.КодПроизводителя КАК КодПроизводителя,
		      |	Выборка.КоэффициентОприходования КАК КоэффициентОприходования,
		      |	Выборка.СрокГодности КАК СрокГодности,
		      |	Выборка.Серия КАК Серия,
		      |	Выборка.eancode КАК eancode,
		      |	Выборка.barcode КАК barcode,
		      |	Выборка.КодПартии КАК КодПартии,
		      |	Выборка.ФирмаИсходная КАК ФирмаИсходная,
		      |	Выборка.НомерГТД КАК НомерГТД,
		      |	Выборка.НомерСертификата КАК НомерСертификата,
		      |	Выборка.qnt КАК qnt,
		      |	Выборка.pndsz КАК pndsz,
		      |	Выборка.pndsr КАК pndsr,
		      |	Выборка.ЦенаПроизводителя КАК ЦенаПроизводителя,
		      |	Выборка.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
		      |	Выборка.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДС,
		      |	Выборка.ЦенаЗакупБезНДСПоДаннымПоставщика КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
		      |	Выборка.ЦенаЗакуп КАК ЦенаЗакуп,
		      |	Выборка.ЦенаРознУпак КАК ЦенаРознУпак,
		      |	Выборка.СуммаРозн КАК СуммаРозн,
		      |	Выборка.ЦенаИндивидуальная КАК ЦенаИндивидуальная,
		      |	Выборка.СуммаЗакупБезНДС КАК СуммаЗакупБезНДС,
		      |	Выборка.СуммаЗакупНДС КАК СуммаЗакупНДС,
		      |	Выборка.ВидПоступления КАК ВидПоступления,
		      |	Выборка.СуммаЗакупНДСПоДаннымПоставщика КАК СуммаЗакупНДСПоДаннымПоставщика,
		      |	Выборка.СуммаЗакупСНДСПоДаннымПоставщика КАК СуммаЗакупСНДСПоДаннымПоставщика,
		      |	Выборка.СуммаЗакупБезНДСПоДаннымПоставщика КАК СуммаЗакупБезНДСПоДаннымПоставщика,
		      |	Выборка.БэкМаржа КАК БэкМаржа,
		      |	Выборка.ШКГрузовогоКонтейнера КАК ШКГрузовогоКонтейнера,
		      |	Выборка.ТипГрузовогоКонтейнера КАК ТипГрузовогоКонтейнера
		      |ИЗ
		      |	Выборка КАК Выборка
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ Выборка";	
	//Иначе
	//	ТХТ = "ВЫБРАТЬ
	//	      |	Поступление.Товар КАК _Товар,
	//	      |	Поступление.Товар.Код КАК КодТовара,
	//	      |	Поступление.КоэффициентРазбивки,
	//	      |	ЕСТЬNULL(Поступление.Производитель.Код, 0) КАК КодПроизводителя,
	//	      |	Поступление.Производитель.Наименование КАК НаименованиеПроизводителя,
	//	      |	Поступление.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
	//	      |	Поступление.Производитель КАК Производитель,
	//	      |	Поступление.Коэфф КАК КоэффициентОприходования,
	//	      |	Поступление.СрокГодности КАК СрокГодности,
	//	      |	ВЫБОР
	//	      |		КОГДА Поступление.Серия = """"
	//	      |			ТОГДА ""*""
	//	      |		ИНАЧЕ Поступление.Серия
	//	      |	КОНЕЦ КАК Серия,
	//	      |	Поступление.Баркод КАК eancode,
	//	      |	Партии.Наименование КАК barcode,
	//	      |	Партии.ФирмаИсходная КАК ФирмаИсходная,
	//	      |	Поступление.КодПартии КАК КодПартии,
	//	      |	Поступление.НомерГТД КАК НомерГТД,
	//	      |	Поступление.Количество КАК qnt,
	//	      |	Поступление.СтавкаНДСЗакуп КАК pndsz,
	//	      |	Поступление.СтавкаНДСРозн КАК pndsr,
	//	      |	Поступление.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
	//	      |	Поступление.ЦенаПроизводителя КАК ЦенаПроизводителя,
	//	      |	Поступление.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДСПоДаннымПоставщика,
	//	      |	Поступление.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
	//	      |	ВЫРАЗИТЬ(Поступление.ЦенаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакуп,
	//	      |	Поступление.СуммаЗакупБезНДС КАК СуммаЗакупБезНДСПоДаннымПоставщика,
	//	      |	Поступление.НДСЗакуп КАК СуммаЗакупНДСПоДаннымПоставщика,
	//	      |	Поступление.СуммаЗакуп КАК СуммаЗакупСНДСПоДаннымПоставщика,
	//	      |	(ВЫРАЗИТЬ(Поступление.СуммаЗакупБезНДСРасчет * (1 + Поступление.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) - Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупНДС,
	//	      |	Поступление.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
	//	      |	ЕСТЬNULL(Поступление.Товар.МНН.Код, 0) КАК КодМНН,
	//	      |	ЕСТЬNULL(Поступление.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
	//	      |	Поступление.НомерСтроки,
	//	      |	Поступление.ЦенаРозн*Поступление.КоэффициентРазбивки/Поступление.Коэфф как ЦенаРознУпак,
	//		  |	Поступление.ЦенаРозн*Поступление.Количество как СуммаРозн,
	//	      |	ВЫБОР
	//	      |		КОГДА Поступление.Товар.ЖНВЛС = ИСТИНА
	//	      |			ТОГДА 1
	//	      |		ИНАЧЕ 0
	//	      |	КОНЕЦ КАК ЦенаИндивидуальная
	//	      |ПОМЕСТИТЬ Выборка
	//	      |ИЗ
	//	      |	Документ.УЗ_ПоступлениеТовара.Товар КАК Поступление
	//	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	//	      |		ПО (Партии.Код = Поступление.КодПартии)
	//	      |ГДЕ
	//	      |	Поступление.Ссылка = &Ссылка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	      |	Выборка.КодМНН,
	//	      |	Выборка.НаименованиеМНН
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |ГДЕ
	//	      |	Выборка.КодМНН > 0
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	      |	Выборка.КодПроизводителя КАК КодПроизводителя,
	//	      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
	//	      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |ГДЕ
	//	      |	Выборка.КодПроизводителя > 0
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ
	//	      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
	//	      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	//		  |	СУММА(Выборка.СуммаЗакупБезНДС + Выборка.СуммаЗакупНДС) КАК СуммаЗакупСНДС,
	//	      |	СУММА(Выборка.СуммаЗакупНДСПоДаннымПоставщика) КАК СуммаЗакупНДСПоДаннымПоставщика,
	//	      |	СУММА(Выборка.СуммаЗакупСНДСПоДаннымПоставщика) КАК СуммаЗакупСНДСПоДаннымПоставщика,
	//	      |	СУММА(Выборка.СуммаЗакупБезНДСПоДаннымПоставщика) КАК СуммаЗакупБезНДСПоДаннымПоставщика,
	//		  |	СУММА(Выборка.СуммаРозн) КАК СуммаРознСНДС
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ
	//	      |	Выборка._Товар,
	//	      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
	//	      |	Выборка._Товар.Код КАК КодТовара,
	//	      |	Выборка._Товар.Наименование КАК Наименование,
	//	      |	Подстрока(Выборка._Товар.МеждународноеНазвание,1,150) КАК МеждународноеНазвание,
	//	      |	Выборка.КодПроизводителя,
	//	      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
	//	      |	Выборка.КодМНН КАК КодМНН,
	//	      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
	//	      |	Выборка._Товар.ПККН КАК ПККН,
	//	      |	ВЫБОР
	//	      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
	//	      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
	//	      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
	//	      |	КОНЕЦ КАК ДатаВводаВАП,
	//	      |	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
	//	      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
	//	      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
	//	      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
	//	      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
	//		  |	Выборка._Товар.Подкатегория.Код КАК КодПодкатегории,
	//	      |	Выборка.КоэффициентРазбивки
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |ВЫБРАТЬ
	//	      |	Выборка.НомерСтроки,
	//	      |	Выборка.КодТовара,
	//	      |	Выборка.КоэффициентРазбивки,
	//	      |	Выборка.КодПроизводителя,
	//	      |	Выборка.КоэффициентОприходования,
	//	      |	Выборка.СрокГодности,
	//	      |	Выборка.Серия,
	//	      |	Выборка.eancode,
	//	      |	Выборка.barcode,
	//	      |	Выборка.КодПартии,
	//	      |	Выборка.ФирмаИсходная,
	//	      |	Выборка.НомерГТД,
	//	      |	Выборка.qnt,
	//	      |	Выборка.pndsz,
	//	      |	Выборка.pndsr,
	//	      |	Выборка.ЦенаПроизводителя,
	//	      |	Выборка.ЦенаГосРегистрации,
	//	      |	Выборка.ЦенаЗакупБезНДС,
	//	      |	Выборка.ЦенаЗакупБезНДСПоДаннымПоставщика,
	//	      |	Выборка.ЦенаЗакуп,
	//	      |	Выборка.ЦенаРознУпак,
	//		  |	Выборка.СуммаРозн,
	//	      |	Выборка.ЦенаИндивидуальная,
	//	      |	Выборка.СуммаЗакупБезНДС,
	//	      |	Выборка.СуммаЗакупНДС,
	//	      |	Выборка.СуммаЗакупНДСПоДаннымПоставщика,
	//	      |	Выборка.СуммаЗакупСНДСПоДаннымПоставщика,
	//	      |	Выборка.СуммаЗакупБезНДСПоДаннымПоставщика
	//	      |ИЗ
	//	      |	Выборка КАК Выборка
	//	      |;
	//	      |
	//	      |////////////////////////////////////////////////////////////////////////////////
	//	      |УНИЧТОЖИТЬ Выборка";	
	//	
	//КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.УстановитьПараметр("СкладКод",Склад.Код);
			Результат				= Запрос.ВыполнитьПакет();	   
			ВыборкаМНН				= Результат[1].Выбрать();
			ВыборкаПроизводители	= Результат[2].Выбрать();
			ВыборкаИтоги			= Результат[3].Выбрать();
			ВыборкаТовары			= Результат[4].Выбрать();
			ВыборкаСтроки			= Результат[5].Выбрать();
			
			ВыборкаИтоги.Следующий(); //на первую строку
			
			ЕстьНулевыеЦены = Ложь;
			Пока ВыборкаСтроки.Следующий() Цикл
				Если ВыборкаСтроки.ЦенаРознУпак = 0 и  ВыборкаСтроки.ВидПоступления <> 3 Тогда
					ЕстьНулевыеЦены = Истина;
					#Если Клиент Тогда
						Сообщить("Строка: " + ВыборкаСтроки.НомерСтроки + " имеет нулевую розничную цену в регистре цен");
					#КонецЕсли
				КонецЕсли;
			КонецЦикла;
			ВыборкаСтроки.Сбросить();
			Если ЕстьНулевыеЦены Тогда
					#Если Клиент Тогда
						Предупреждение("В документе есть позиции с нулевыми ценами в регистре цен. Выгрузка не может быть выполнена. Подробности см. в окне сообщений (обычно оно расположено внизу)");
						Сообщить("=====ИНСТРУКЦИЯ ПО ИСПРАВЛЕНИЮ (без обращения в тех. поддержку)=============
						|	Если появились данные ошибки, это означает, что не найдены розничные цены в регистрах сведений ""Розничные цены по партиям"" или ""Розничные цены"".
						|1. Вначале проверьте есть ли запись о розничной цене в регистре сведений ""Розничные цены по партиям"". 
						|	- Откройте регистр Операвции - Регистр сведений - Розничные цены по партиям;
						|	- Установите фильтр по аптеке и товару.
						|	Если строка есть, но цена = 0 - исправьте цену.
						|	Если строки нет - см. п.2
						|2. Проверьте, есть ли запись о розничной цене в регистре сведений ""Розничные цены"".
						|	- Откройте регистр Операвции - Регистр сведений - Розничные цены;
						|	- Установите фильтр по аптеке и товару.
						|	Если строка есть, но цена = 0 - исправьте цену.
						|	Если строки нет - нужно принять решение о добавлении строки в один из регистров.
						|");
						
					#КонецЕсли
				Возврат Ложь;
			КонецЕсли;
			
			
		

	Контрагент = Поставщик;
	КодКонтрагента =  Формат(Контрагент.Код,"ЧГ=0");
	
	СчетКонтрагента = Контрагент.ОсновнойСчет;
	КодСчетаКонтрагента = СчетКонтрагента.Код;
	КодБанка = СчетКонтрагента.Банк.Код; 
	
	ЕстьСчет = Истина;
	Если СчетКонтрагента = Неопределено или СчетКонтрагента.Пустая() или КодСчетаКонтрагента = Неопределено Тогда
		ЕстьСчет = ЛОЖЬ;
	КонецЕсли;
	
	ЕстьКомитент = ЗначениеЗаполнено(ПоставщикКомитент);
	ЕстьСчетКомитента = Ложь;
	Если ЕстьКомитент Тогда
		КонтрагентКомитент = ПоставщикКомитент;
		КодКомитента =  Формат(КонтрагентКомитент.Код,"ЧГ=0");
		
		СчетКомитента = КонтрагентКомитент.ОсновнойСчет;
		КодСчетаКомитента = СчетКомитента.Код;
		КодБанкаКомитента = СчетКомитента.Банк.Код; 
		
		Если СчетКомитента = Неопределено или СчетКомитента.Пустая() или КодСчетаКомитента = Неопределено Тогда
			ЕстьСчетКомитента = ЛОЖЬ;
		Иначе
			ЕстьСчетКомитента = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");

	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");
	
	
	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ЗаписатьСтроку("<document>"); 

	
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "pack_type", "IN_SUPP"); 
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "fmt_ver", "1"); 
	Если ЕстьСчет Тогда
		ЗаписьXML.ЗаписатьСтроку("<bank>");
			ЗаписьXML.ЗаписатьСтроку("<row>");
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "bic",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Банк.Наименование)));
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "corr_acc",	СокрЛП(СчетКонтрагента.Банк.КоррСчет));
			ЗаписьXML.ЗаписатьСтроку("</row>");
			Если ЕстьСчетКомитента Тогда
				ЗаписьXML.ЗаписатьСтроку("<row>");
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",	Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0") );				
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "bic",	Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0") );				
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", "0"); 
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКомитента.Банк.Наименование)));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "corr_acc",	СокрЛП(СчетКомитента.Банк.КоррСчет));
				ЗаписьXML.ЗаписатьСтроку("</row>");				
			КонецЕсли;
		ЗаписьXML.ЗаписатьСтроку("</bank>"); //конец записи секции  "bank"
		
		ЗаписьXML.ЗаписатьСтроку("<bank_account>");
			ЗаписьXML.ЗаписатьСтроку("<row>");
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );				
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",			КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Наименование)));
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "num",				СокрЛП(СчетКонтрагента.НомерСчета));
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_contragent",	КодКонтрагента);
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_bank",			Формат(КодБанка,"ЧГ=0; ЧН=0"));
			ЗаписьXML.ЗаписатьСтроку("</row>");
			Если ЕстьСчетКомитента Тогда
				ЗаписьXML.ЗаписатьСтроку("<row>");
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКомитента)),"ЧГ=0") );				
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", "0"); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",			КорректировкаСпецСимволов(СокрЛП(СчетКомитента.Наименование)));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "num",				СокрЛП(СчетКомитента.НомерСчета));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_contragent",	КодКомитента);
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_bank",			Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0"));
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЕсли;
		ЗаписьXML.ЗаписатьСтроку("</bank_account>"); //конец записи секции  "bank"		
	КонецЕсли;			
	
		ЗаписьXML.ЗаписатьСтроку("<contragent>");
			ЗаписьXML.ЗаписатьСтроку("<row>");
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id", КодКонтрагента); 			
			     ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", ""+Число(Контрагент.ПометкаУдаления));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_internal", ""+Число(Контрагент.Внутренний));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ПолнНаименование))); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(Контрагент.Наименование)));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ИНН)));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(Контрагент.КПП)));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОГРН)));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОКПО)));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(Контрагент.Адрес)));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(Контрагент.АдресГрузополучателя)));
				 Если ЕстьСчет Тогда
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );
				 Иначе
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_bank_account", "0" );
				 КонецЕсли;
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "type_tax", "" + Число(Контрагент.КонтрагентНаУСН)); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "e_mail", ""); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "phone", "");
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "director", "");
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "bookkeeper", "");
			ЗаписьXML.ЗаписатьСтроку("</row>");
			Если ЕстьКомитент Тогда
				ЗаписьXML.ЗаписатьСтроку("<row>");
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id", КодКомитента); 			
				     ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", ""+Число(КонтрагентКомитент.ПометкаУдаления)); 
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_internal", ""+Число(Контрагент.Внутренний));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ПолнНаименование))); 
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.Наименование)));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ИНН)));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.КПП)));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ОГРН)));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ОКПО)));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.Адрес)));
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.АдресГрузополучателя)));
					 Если ЕстьСчетКомитента Тогда
					 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКомитента)),"ЧГ=0") );
					 Иначе
						ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_bank_account", "0" );
					 КонецЕсли;
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "type_tax", "" + Число(КонтрагентКомитент.КонтрагентНаУСН)); 
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "e_mail", ""); 
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "phone", "");
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "director", "");
					 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "bookkeeper", "");
				ЗаписьXML.ЗаписатьСтроку("</row>");				
			КонецЕсли;
		ЗаписьXML.ЗаписатьСтроку("</contragent>"); //конец записи секции  "contragent"
		
		
		ЗаписьXML.ЗаписатьСтроку("<inter_name>");
			Пока ВыборкаМНН.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",	Формат(ВыборкаМНН.КодМНН,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаМНН.НаименованиеМНН)));
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sname",		"");
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</inter_name>"); //конец записи секции  "mnn"
		
		
		ЗаписьXML.ЗаписатьСтроку("<producer>");
			Пока ВыборкаПроизводители.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",			Формат(ВыборкаПроизводители.КодПроизводителя,"ЧГ=0; ЧН=0") );
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаПроизводители.ПометкаУдаленияПроизводителя)); 
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаПроизводители.НаименованиеПроизводителя)));
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sname",		"");
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_country",	"0");
				   ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_importer",	"0");
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</producer>"); //конец записи секции  "producer"

		ЗаписьXML.ЗаписатьСтроку("<goods>");
			Пока ВыборкаТовары.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",			Формат(ВыборкаТовары.КодТовара,"ЧГ=0"));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаТовары.ПометкаУдаления)); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_active",	"" + Число(ВыборкаТовары.УчаствуетВАП));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Наименование)));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr_ecr",	"");
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr_en",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.МеждународноеНазвание)));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "article",		""); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "p_vat",		Формат(ВыборкаТовары.Ставка,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_ap",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_ftg",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_main","0"); //основная группа
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_general","0"); //обобщенная группа
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_brand_goods",Формат(ВыборкаТовары.КодБренда,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_trade_name","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_inter_name",Формат(ВыборкаТовары.КодМНН,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_category_goods","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_sub_category_goods",Формат(ВыборкаТовары.КодПодкатегории,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_med_form",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_destination","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_prod_form",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_storing_place",Формат(ВыборкаТовары.КодМестаХранения,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_life_important","" + Формат(Число(ВыборкаТовары.ЖНВЛС),"ЧН=0"));  
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_social_important","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(ВыборкаТовары.ПККН),"ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_mandatory",		"" + Формат(Число(ВыборкаТовары.ОбязательноеНаличие),"ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_prescription","" + Формат(Число(ВыборкаТовары.ОтпускПоРецепту),"ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "date_in", 		Формат(ВыборкаТовары.ДатаВВодаВАП,"ДФ=dd.MM.yyyy")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "producer_country_descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Страна)));

				  //ЗаписатьЭлементXML(ЗаписьXML, "id_group",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "is_season",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "id_exclusive_post","0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "id_unit",		"0");
				  //ЗаписатьЭлементXML(ЗаписьXML, "cost_r",		Формат(ВыборкаТовары.РозничнаяЦена,"ЧРД=.; ЧН=0; ЧГ=0")); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "cost_i",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "min_part_ship","0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "min_qnt",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "max_qnt",		"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "is_discount",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "p_discount",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "max_qnt_sale",	Формат(ВыборкаТовары.МаксКоличествоВОдинЧек,"ЧГ=0; ЧН=0"));
				  //ЗаписатьЭлементXML(ЗаписьXML, "is_course",	"0");
				  //ЗаписатьЭлементXML(ЗаписьXML, "course_qnt",	"0"); 
				  //ЗаписатьЭлементXML(ЗаписьXML, "min_part_dem",	"0"); 
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</goods>"); //конец записи секции  "good"

		ЗаписьXML.ЗаписатьСтроку("<gpart>");
			Пока ВыборкаСтроки.Следующий() Цикл
				ЗаписьXML.ЗаписатьСтроку("<row>");
				
					//Если  ВыборкаСтроки.coeffp = 1  Тогда
					//	Если  ВыборкаСтроки.КоэффициентРазбивки = 1 Тогда
					//		coeff		= 1; //если даю упаковку, то здесь коэфф разбивки
					//		coeffp		= 1; 
					//	Иначе
					//		coeff		= ВыборкаСтроки.КоэффициентРазбивки; //если оприходовали мелкими, но товар разбивочный, то здесь 1
					//		coeffp		= ВыборкаСтроки.КоэффициентРазбивки; //тут коэффициент для приведения
					//	КонецЕсли;
					//Иначе
					//	coeff		= ВыборкаСтроки.coeffp; //если даю упаковку, то здесь коэфф разбивки
					//	coeffp		= 1; 
					//КонецЕсли;				
				
				    ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
  					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_goods", Формат(ВыборкаСтроки.КодТовара,"ЧГ=0") ); 
  					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_producer", Формат(ВыборкаСтроки.КодПроизводителя,"ЧГ=0; ЧН=0") );
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "p_vat_pur",Формат(ВыборкаСтроки.pndsz,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "p_vat_rtl"	,Формат(ВыборкаСтроки.pndsr,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_reg_wo_vat_pack",Формат(ВыборкаСтроки.ЦенаГосРегистрации,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_prod_wo_vat_pack"	,Формат(ВыборкаСтроки.ЦенаПроизводителя,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dvalid_supp"		,Формат(ВыборкаСтроки.СрокГодности,"ДФ=dd.MM.yyyy")); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "series"		,КорректировкаСпецСимволов(ВыборкаСтроки.Серия)); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "certif"		,КорректировкаСпецСимволов(ВыборкаСтроки.НомерСертификата));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "eancode_supp"		,ВыборкаСтроки.eancode); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "barcode"		,ВыборкаСтроки.barcode); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "stcdn"		,КорректировкаСпецСимволов(ВыборкаСтроки.НомерГТД)); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "back_margin"	,Формат(ВыборкаСтроки.БэкМаржа,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "coeff"			,Формат(ВыборкаСтроки.КоэффициентРазбивки,"ЧГ=0; ЧН=0") ) ;
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "guid"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_pur_wo_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакупБезНДС/ВыборкаСтроки.КоэффициентОприходования,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_pur_wo_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДС*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_pur_wo_vat_pack_supp" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДСПоДаннымПоставщика*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_pur_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакуп/ВыборкаСтроки.КоэффициентОприходования,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_pur_w_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакуп*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_rtl_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаРознУпак/ВыборкаСтроки.КоэффициентРазбивки,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_rtl_w_vat_pack"	,Формат(ВыборкаСтроки.ЦенаРознУпак,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_individual_price"	,	ВыборкаСтроки.ЦенаИндивидуальная); 
  					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_opened","0");
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_contragent_initial"		,КодКонтрагента); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_supp_cond_initial",	"" + Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовара)); 
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_firm_initial"		,	Формат(ВыборкаСтроки.ФирмаИсходная,"ЧГ=0")); 
				ЗаписьXML.ЗаписатьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</gpart>"); //конец записи секции  "str"
		
		
		ЗаписьXML.ЗаписатьСтроку("<hdr>");
			     ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_doc_type", 	"201"); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_doc_subtype", "" + ?(ТипНакладной.Пустая(),0,Перечисления.ТипыНакладной.Индекс(ТипНакладной))); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "guid", XMLСтрока(Ссылка)); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_crossdocking",	"" + Формат(Число(КД_ЭДО),"ЧН=0"));
				 Если Статус = Перечисления.СтатусПрихода.Аннулирован Тогда
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Аннулирован)); 
				 Иначе
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "status",	"1"); 
				КонецЕсли;
				Если ЕстьКомитент Тогда
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_consignor", КодКомитента); 
				КонецЕсли;
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc",		Формат(Номер,"ЧГ=0")); 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc",		Формат(Дата,"ДЛФ = ДВ"));	//ENT-1009 передадим дату со временем //Формат(Дата,"ДФ=dd.MM.yyyy"));
				 Если ЕстьКомитент и ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.Комиссия Тогда
					ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_supp_cond",	"0");   //Покупка
				 Иначе
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_supp_cond",	"" + Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовара));   //так надо. комиссия в аптеке определяется по полю  id_consignor
				 КонецЕсли;
				 //ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_firm",	Формат(Документ.Фирма.Код,"ЧГ=0"));
				 //ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_dep",	Формат(Документ.Склад.Код,"ЧГ=0"));	
				 //ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_dep_section", "0");
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_contragent", КодКонтрагента);	
				 Если ЕстьКомитент Тогда
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерНакл)) + "-(" + Формат(Номер,"ЧГ=0") + ")" );
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc_contragent",	Формат(ВхДатаНакл,"ДФ=dd.MM.yyyy"));
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "nsf_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерСФ)) + "-(" + Формат(Номер,"ЧГ=0") + ")");
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dsf_contragent",	Формат(ВхДатаСФ,"ДФ=dd.MM.yyyy"));				 
				ИНаче
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерНакл)));
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc_contragent",	Формат(ВхДатаНакл,"ДФ=dd.MM.yyyy"));
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "nsf_contragent",	КорректировкаСпецСимволов(СокрЛП(ВхНомерСФ)));
				 	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dsf_contragent",	Формат(ВхДатаСФ,"ДФ=dd.MM.yyyy"));				 
				КонецЕсли;
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));	
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dsc_dep", 			КорректировкаСпецСимволов(СокрЛП(КомментарийАптеки)));	
				 //ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_doc_type", 	"" + ?(Документ.ТипНакладной.Пустая(),0,Перечисления.ТипыНакладной.Индекс(Документ.ТипНакладной))); 
				 
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_vat",	Формат(ВыборкаИтоги.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_w_vat",	Формат(ВыборкаИтоги.СуммаЗакупСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_wo_vat",	Формат(ВыборкаИтоги.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_vat_supp"	,Формат(ВыборкаИтоги.СуммаЗакупНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_wo_vat_supp"	,Формат(ВыборкаИтоги.СуммаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				 
				 //ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_rtl_vat",	Формат(ВыборкаИтоги.СуммаРознНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_rtl_w_vat",	Формат(ВыборкаИтоги.СуммаРознСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
	  	ЗаписьXML.ЗаписатьСтроку("</hdr>"); //конец записи секции  "hdr"
		
		Если ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ Тогда
			ДобавитьСекциюИнтернетЗаказа(ЗаписьXML);	
		КонецЕсли;
		
		ВыборкаСтроки.Сбросить();
		ЗаписьXML.ЗаписатьСтроку("<str>");
		Пока ВыборкаСтроки.Следующий() Цикл
			ЗаписьXML.ЗаписатьСтроку("<row>");
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "guid_gpart"	,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "idx"			,Формат(ВыборкаСтроки.НомерСтроки,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "qnt"			,Формат(ВыборкаСтроки.qnt*ВыборкаСтроки.КоэффициентОприходования,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_vat"	,Формат(ВыборкаСтроки.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_vat_supp"	,Формат(ВыборкаСтроки.СуммаЗакупНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_wo_vat"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_pur_wo_vat_supp"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДСПоДаннымПоставщика,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "sum_rtl_w_vat"	,Формат(ВыборкаСтроки.СуммаРозн,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "coid", 		КорректировкаСпецСимволов(СокрЛП(ВыборкаСтроки.ШКГрузовогоКонтейнера)));
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "coty", 		КорректировкаСпецСимволов(СокрЛП(ВыборкаСтроки.ТипГрузовогоКонтейнера)));

				//ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "dsc_dep"		,"");
			ЗаписьXML.ЗаписатьСтроку("</row>");
		КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</str>"); //конец записи секции  "str"
		
		
	
	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "document"
	
	ЗаписьXML.Закрыть();
	ЗаписьXML = Новый ЧтениеТекста(ИмяФайла,"windows-1251");
	ВесьТекст = ЗаписьXML.Прочитать();
	ЗаписьXML.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	
	КодСклада = Склад.Код;
	//КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	//Если КодСчетчика = -1 Тогда
	//	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	//	Если КодСчетчика = -1 Тогда
	//		Возврат Ложь;	
	//	КонецЕсли;
	//КонецЕсли;
	
	//к = Число("раздватри");
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = 1;
	МЗ.КодАптеки = Склад.Код;
	МЗ.ТипУпаковки = "IN_SUPP";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "insupp_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.ИдентификаторДокумента = ИДДокументаАптеки;
	МЗ.Записать();	
	Если Статус <> Перечисления.СтатусПрихода.ВыгруженНаАптеку Тогда	
		Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку");	
	Возврат Истина;
	
	
	
	
КонецФункции

Функция ВыгрузитьВАптеку() Экспорт
	

	Результат = ВыгрузитьВАптекуНаНовомПО();
	
	Возврат Результат;
	
	//ПереместитьФайл(Архив.ПолноеИмя,КонечныйКаталогФайла + "" +Архив.Имя);
	
	
	
КонецФункции
     
Функция АвтоматическаяРасценка_Успешно()  Экспорт
	//==================<Автоматическая расценка прихода товара>===================GtG====21.11.2008
	// запускается 1 раз при первичном проведении документа.
	// При возникновении ошибок при расценке- дальнейшее проведение и расценка только вручную
	Успешно=Истина;
	Если ОМ6_ЕстьЦеныПоРасценке(Ссылка)=Ложь Тогда
		ОМ6_ЗапуститьАвтоматическуюРасценкуДокумента (ЭтотОбъект);
		ЭтотОбъект.Прочитать();
		Если ОшибкиРасценки.Количество()>0 Тогда
			#Если Клиент Тогда 
				Предупреждение(""+Ссылка+" Есть ошибки по расценке товара! Документ не проводится!",2);
			#КонецЕсли	
			Успешно=Ложь;
			//Для каждого стр из ОшибкиРасценки Цикл
			//	Если стр.Партия.Пустая() Тогда
			//		  //пох
			//	Иначе
			//		Предупреждение(""+ЭтотОбъект+" Есть ошибки по расценке товара! Документ не проводится!",3);
			//		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			//		Успешно=Ложь;
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	Возврат Успешно;
КонецФункции	//АвтоматическаяРасценка

Функция ПроверкаНаНули(Парам) 
     // Назначение:
 	// Проверяет строки товара на наличие строк с нулевыми значениями
 	// 
     // 
 	//--------------------------------------------------------------------------------
	Для Каждого ТекСтрокаТовар Из Товар Цикл
		Если ТекСтрокаТовар[Парам]=0 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЦикла; 	
	
	Возврат Истина;
	
 КонецФункции
 
Процедура МО_ПроверкаЦеныПроизводителя(ТСД) Экспорт
	 //цена производителя не должна превышать цены госрегистрации (если они обе есть)
		Если ТСД.ЦенаГосРегистрации<>0 и ТСД.ЦенаПроизводителя<>0 Тогда
				Если ТСД.ЦенаПроизводителя>ТСД.ЦенаГосРегистрации Тогда
					#Если Клиент Тогда
						Сообщить("Строка №"+ТСД.НомерСТРОКИ +"   "+ТСД.Товар+" --  цена производителя больше цены госрегистрации!",СтатусСообщения.Внимание);
					#КонецЕсли
				КонецЕсли; 
		КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьЗаказОбычногоТовара(ТаблицыДвижений)
	
	
		Таблица= ТаблицыДвижений.ЗаказПоставщику;
		
		Если Таблица.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Движения.ЗаказПоставщику.Записывать = Истина;
		Движения.ЗаказПоставщику.Загрузить(Таблица);
	
	//МассивИсх=Товар.ВыгрузитьКолонку("Товар");
		//Массив= Новый  Массив;
		//
		//Для каждого ЭлемМасс Из МассивИсх Цикл
		//	Массив.Добавить(ЭлемМасс);
		//КонецЦикла; 
		//
		//
		//СписокТоваровТекстом=ЗначениеВСтрокуВнутр(Массив);
		//
		//ОстаткиВЗаказе = ОМ21_ЗаказыПоставщикам.ОМ21_ПолучитьОстаткиТоварыВПутиПоСпискуТоваров(Склад,Дата,СписокТоваровТекстом,Поставщик);
		////ОстаткиВЗаказе =ОМ13_ПолучитьОстаткиПоСписку_ДляЗаказа(Дата,СписокТоваровТекстом,Поставщик,Склад);
		////ОстаткиВЗаказе.ВыбратьСтроку();
		//Если ОстаткиВЗаказе.Количество() > 0 Тогда
		//	ТЗ = Товар.Выгрузить(,"Товар,КоличествоФакт,ЦенаЗакуп,ЦенаРозн");
		//	ТЗ.Свернуть("Товар,ЦенаЗакуп,ЦенаРозн","КоличествоФакт"); // GtG 15.01.2008 10:58:31  Количество заменено на количествоФакт
		//	Фильтр = Новый Структура;
		//	
		//	Для Каждого ТекСтрокаТовар Из ТЗ Цикл
		//		
		//		Если ТекСтрокаТовар.КоличествоФакт = 0 Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		Фильтр.Очистить();
		//		Фильтр.Вставить("Товар",ТекСтрокаТовар.Товар);
		//		Строки = ОстаткиВЗаказе.НайтиСтроки(Фильтр);
		//		Для каждого СтрокаЗаказа из Строки Цикл
		//			
		//			//Если Строки.Количество()>0 Тогда
		//			Движение = Движения.ЗаказПоставщику.Добавить();
		//			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//			Движение.Период = Дата;
		//			Движение.Поставщик = Поставщик;
		//			Движение.Склад = Склад;
		//			Движение.Товар = ТекСтрокаТовар.Товар;
		//			Движение.Количество = ТекСтрокаТовар.КоличествоФакт; //СтрокаЗаказа.КолвоОстаток;
		//			Движение.ДатаЗаказа = СтрокаЗаказа.ДатаЗаказа;
		//			Движение.ЦенаЗакуп = ТекСтрокаТовар.ЦенаЗакуп;
		//			Движение.ЦенаРозн = ТекСтрокаТовар.ЦенаРозн;					
		//			//Движения.ЗаказПоставщику.Записать();
		//			//КонецЕсли;
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗакрытьИндивидуальныеЗаказы(ТаблицыДвижений)
	
	
	Таблица= ТаблицыДвижений.ИндивидуальныеЗаказы;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИндивидуальныеЗаказы.Записывать = Истина;
	Движения.ИндивидуальныеЗаказы.Загрузить(Таблица);	
	//Если ИндивидуальныеЦены.Количество() > 0 Тогда
	//	Для каждого СтрокаЗаказа из ИндивидуальныеЦены Цикл
	//		
	//		Движение = Движения.ИндивидуальныеЗаказы.Добавить();
	//		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	//		Движение.Период			= Дата;
	//		Движение.Поставщик		= Поставщик;
	//		Движение.Склад			= Склад;
	//		Движение.Товар			= СтрокаЗаказа.Товар;
	//		Движение.Количество		= СтрокаЗаказа.Количество;
	//		Движение.ДатаЗаказа		= СтрокаЗаказа.ДатаЗаказа;
	//		Движение.ЦенаРозн		= СтрокаЗаказа.ЦенаРозн;	
	//		
	//	КонецЦикла;			
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаЗаполнение(Отказ)
	
	 Если Склад.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран Склад! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Поставщик.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран Поставщик! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	Если ДоговорПоставки.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран договор поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(ФирмаКомитент) Тогда
			Если ДоговорПоставки.Фирма <> ФирмаКомитент Тогда
				#Если Клиент Тогда
					Сообщить("Несоответствие фирмы накладной и фирмы договора поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
				#КонецЕсли	
				Отказ = Истина;
				Возврат;			
			КонецЕсли;
			Если ДоговорПоставкиКомитент.Владелец <> ПоставщикКомитент Тогда
				#Если Клиент Тогда
					Сообщить("Несоответствие поставщика накладной и владельца договора поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
				#КонецЕсли	
				Отказ = Истина;
				Возврат;			
			КонецЕсли;		
		Иначе			
			Если ДоговорПоставки.Фирма <> Фирма Тогда
				#Если Клиент Тогда
					Сообщить("Несоответствие фирмы накладной и фирмы договора поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
				#КонецЕсли	
				Отказ = Истина;
				Возврат;			
			КонецЕсли;
			
			Если ДоговорПоставки.Владелец <> Поставщик Тогда
				#Если Клиент Тогда
					Сообщить("Несоответствие поставщика накладной и владельца договора поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
				#КонецЕсли	
				Отказ = Истина;
				Возврат;			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	 Если ВидПоступленияТовара.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран вид поступления товара! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	 Если ПустаяСтрока(СокрЛП(ВхНомерНакл)) = Истина  Тогда
		 #Если Клиент Тогда
		 	Сообщить("Входящий номер накладной поставщика не должен быть пустым! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли
		 Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	 Если ВхДатаНакл = ДАТА(1,1,1)  Тогда
		 #Если Клиент Тогда
		 	Сообщить("Входящая дата поставщика не должна быть пустой! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли
		 Отказ = Истина;
		Возврат;
	КонецЕсли;		
	
	Если НЕ Поставщик.КонтрагентНаУСН Тогда 
		Если ВхДатаСФ = ДАТА(1,1,1) Тогда
			#Если Клиент Тогда
				Сообщить("Входящая дата с/ф поставщика не должна быть пустой! Документ не проведен",СтатусСообщения.ОченьВажное);	 
			#КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		Если ПустаяСтрока(СокрЛП(ВхНомерСФ)) = Истина  Тогда
			#Если Клиент Тогда
				Сообщить("Входящий номер с/ф поставщика не должен быть пустым! Документ не проведен",СтатусСообщения.ОченьВажное);	 
			#КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецЕсли;			
	КонецЕсли;
	
	Если ПустаяСтрока(Поставщик.ИНН) или ПустаяСтрока(Поставщик.КПП) Тогда
			#Если Клиент Тогда
				Сообщить("У поставщика не заполнены ИНН/КПП. Документ не может быть проведен!",СтатусСообщения.ОченьВажное);	 
			#КонецЕсли
			Отказ = Истина;
			Возврат;
	КонецЕсли;
	 
	 Для каждого стр из НесопоставленныйТовар Цикл
		 Если стр.Обработана=Ложь Тогда
			 #Если Клиент Тогда
				 Сообщить("В документе есть строки с несопоставленным товаром. Проведение запрещено",СтатусСообщения.ОченьВажное);
			#КонецЕсли	 
			 Отказ = истина;
			 Возврат;
		 КонецЕсли;
	 КонецЦикла;
	 

	НайденнаяСтрока = Товар.Найти(0,"Коэфф");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с коэффициентами =0!
					|Это недопустимо!
					|Очевидно проблемы с единицами товаров.");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;


	Если ПроверкаНаНули("ЦенаЗакупБезНДС")=Ложь Тогда
		// Есть строки с 0-ми
		#Если Клиент Тогда
			Сообщить("В документе есть строки без закуп. цены!
			|Это недопустимо!
			|Укажите цену закупочную!");
		#КонецЕсли
		ПроведениеЗакончено=Истина;

		Отказ = ИСТИНА;
		ВОЗВРАТ ;
	КонецЕсли;
	
	//НайденнаяСтрока = Товар.Найти(Справочники.Серии.ПустаяСсылка(),"Серия");
	НайденнаяСтрока = Товар.Найти("","Серия");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть товар БЕЗ СЕРИЙ!!!
				|Это недопустимо!
				|Укажите серию, или используйте срок годности, если ее нет .");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;
		
	
	Если Склад.ТипСклада = Перечисления.ТипыМХ.Розн и ВидПоступленияТовара <> Перечисления.ВидыПоступленияТоваров.Подарки Тогда
		Если ПроверкаНаНули("ЦенаРозн")=Ложь Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с Ценой розничной =0!
				|Это недопустимо!
				|Недорасцененные документы не проводятся!
				|");
			#КонецЕсли
			ПроведениеЗакончено=Истина;

			Отказ = ИСТИНА;
			ВОЗВРАТ ;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДвиженийСтарый(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	ГраницаПериода = Новый Граница(МоментВремени(), ВидГраницы.Исключая); 
	Запрос.УстановитьПараметр("ДатаЗакрытияЗаказа",ГраницаПериода);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	
	Если Поставщик.ПринадлежитГруппеКомпаний Тогда
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОпераций.ПоступлениеТМЦОтСобственныхЮрЛиц);
	Иначе
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОпераций.ПоступлениеТМЦ);
	КонецЕсли;
	
	Запрос.Текст = "
					//0  ВТТовары
	               |
				   |ВЫБРАТЬ
	               |	ТЧ.Товар,
	               |	ТЧ.Ссылка.Склад КАК Склад,
	               |	ТЧ.Партия,
	               |	ТЧ.СтавкаНДС,
	               |	ТЧ.Ссылка.Склад.Фирма КАК Фирма,
	               |	ТЧ.КоличествоФакт * ТЧ.Коэфф КАК КолВо,
	               |	ТЧ.СуммаЗакуп КАК СуммаЗакупСНДС,
	               |	ТЧ.НДСЗакуп КАК СуммаНДСЗакуп,
	               |	ВЫБОР
	               |		КОГДА ТЧ.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн)
	               |			ТОГДА ТЧ.СуммаРозн
	               |		ИНАЧЕ ТЧ.СуммаЗакуп
	               |	КОНЕЦ КАК СуммаРознСНДС,
	               |	ВЫБОР
	               |		КОГДА ТЧ.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн)
	               |			ТОГДА ТЧ.НДСРозн
	               |		ИНАЧЕ ТЧ.НДСЗакуп
	               |	КОНЕЦ КАК СуммаРознНДС,
	               |	&ВидОперации КАК ВидОперации,
	               |	ТЧ.ЦенаЗакуп,
	               |	ТЧ.ЦенаРозн,
	               |	ТЧ.КоличествоФакт
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.ПоступлениеТовара.Товар КАК ТЧ
	               |ГДЕ
	               |	ТЧ.Ссылка = &Ссылка и ТЧ.КоличествоФакт > 0
	               |;
	               |
				   //1 ТЗДляЗАказа
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Товар,
	               |	СУММА(ВТТовары.КоличествоФакт) КАК КоличествоФакт,
	               |	ВТТовары.ЦенаЗакуп,
	               |	ВТТовары.ЦенаРозн
	               |ПОМЕСТИТЬ ТЗДляЗаказа
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.Товар,
	               |	ВТТовары.ЦенаЗакуп,
	               |	ВТТовары.ЦенаРозн
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВТТовары.КоличествоФакт) > 0
	               |;
	               |
				   //2 Регистр Партии
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Товар,
	               |	ВТТовары.Склад,
	               |	ВТТовары.Партия,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.КолВо,
	               |	ВТТовары.СуммаЗакупСНДС,
	               |	ВТТовары.СуммаНДСЗакуп,
	               |	ВТТовары.СуммаРознСНДС,
	               |	ВТТовары.СуммаРознНДС,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) как ВидДвижения,
				   |	&Дата как Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |;
	               |
				   //3  Регистр СтавокНДС
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Склад,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) как ВидДвижения,
				   |	&Дата как Период,				   
	               |	СУММА(ВТТовары.СуммаЗакупСНДС) КАК СуммаЗакупСНДС,
	               |	СУММА(ВТТовары.СуммаНДСЗакуп) КАК СуммаНДСЗакуп,
	               |	СУММА(ВТТовары.СуммаРознСНДС) КАК СуммаРознСНДС,
	               |	СУММА(ВТТовары.СуммаРознНДС) КАК СуммаРознНДС
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.Склад,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
				   |	&Дата				   
	               |;
	               |
				   //4 Регистр Заказов
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗДляЗаказа.Товар,
	               |	ТЗДляЗаказа.КоличествоФакт КАК Количество,
	               |	ТЗДляЗаказа.ЦенаЗакуп,
	               |	ТЗДляЗаказа.ЦенаРозн,
	               |	&Дата КАК Период,
	               |	ЗаказПоставщикуОстатки.Поставщик,
	               |	ЗаказПоставщикуОстатки.Склад,
	               |	ЗаказПоставщикуОстатки.ДатаЗаказа,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) как ВидДвижения
	               |ИЗ
	               |	ТЗДляЗаказа КАК ТЗДляЗаказа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказПоставщику.Остатки(
	               |				&ДатаЗакрытияЗаказа,
	               |				Поставщик = &Поставщик
	               |					И Склад = &Склад) КАК ЗаказПоставщикуОстатки
	               |		ПО ТЗДляЗаказа.Товар = ЗаказПоставщикуОстатки.Товар
	               |ГДЕ
	               |	НЕ ЗаказПоставщикуОстатки.ДатаЗаказа ЕСТЬ NULL 
	               |;
	               |
				   //5  Регистр Индивидуальных цен
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Склад КАК Склад,
	               |	&Поставщик КАК Поставщик,
	               |	&дата КАК Период,
	               |	ПоступлениеТовараИндивидуальныеЦены.Товар,
	               |	ПоступлениеТовараИндивидуальныеЦены.ДатаЗаказа,
	               |	ПоступлениеТовараИндивидуальныеЦены.ЦенаРозн,
	               |	ПоступлениеТовараИндивидуальныеЦены.Количество,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) как ВидДвижения
	               |ИЗ
	               |	Документ.ПоступлениеТовара.ИндивидуальныеЦены КАК ПоступлениеТовараИндивидуальныеЦены
	               |ГДЕ
	               |	ПоступлениеТовараИндивидуальныеЦены.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТЗДляЗаказа";
				   
			Результат = Запрос.ВыполнитьПакет();	   
			ТаблицыДвижений.Вставить("ПартииЖНВЛС",				                        Результат[2].Выгрузить());
			ТаблицыДвижений.Вставить("ОстаткиПоСтНДСПоСкладам",		                    Результат[3].Выгрузить());
			ТаблицыДвижений.Вставить("ЗаказПоставщику",                          		Результат[4].Выгрузить());
			ТаблицыДвижений.Вставить("ИндивидуальныеЗаказы",                         	Результат[5].Выгрузить());
				   
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Если ДатаФактПоступления = Дата(1,1,1) Тогда
		Запрос.УстановитьПараметр("Дата",Дата);
	Иначе
		Если НачалоДня(Дата) = НачалоДня(ДатаФактПоступления) и НачалоДня(ДатаФактПоступления) = ДатаФактПоступления Тогда
			Запрос.УстановитьПараметр("Дата",Дата);
		Иначе
			Запрос.УстановитьПараметр("Дата",ДатаФактПоступления);
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("СкладКод",Склад.Код);
	Запрос.УстановитьПараметр("ФирмаКод",Фирма.Код);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("ПоставщикКод",Поставщик.Код);
	Если ЗначениеЗаполнено(ПоставщикКД) Тогда
		Запрос.УстановитьПараметр("ПоставщикВЗаказе",ПоставщикКД);
		Запрос.УстановитьПараметр("ПоставщикКДКод",ПоставщикКД.Код);
	Иначе
		Запрос.УстановитьПараметр("ПоставщикВЗаказе",Поставщик);
		Запрос.УстановитьПараметр("ПоставщикКДКод",0);
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ПоставщикКомитент) Тогда
		Запрос.УстановитьПараметр("ВидПоступленияПорядок",Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовараКомитент));
	Иначе
		Запрос.УстановитьПараметр("ВидПоступленияПорядок",Перечисления.ВидыПоступленияТоваров.Индекс(ВидПоступленияТовара));
	КонецЕсли;
	Запрос.УстановитьПараметр("КачествоТовараПорядок",Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.ХорошийТовар));
	
	Запрос.УстановитьПараметр("ГраницаЗаказа",Дата - 31*24*60*60);
	
	
	Если ДатаФактПоступления = Дата(1,1,1) Тогда
		
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТЧТовар.Ссылка КАК Регистратор,
		               |	&Дата КАК Дата,
		               |	&СкладКод КАК СкладКод,
		               |	&ПоставщикКод КАК ПоставщикКод,
		               |	ТЧТовар.КодПартии КАК ПартияКод,
		               |	ТЧТовар.КодТовара КАК ТоварКод,
		               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
		               |	ТЧТовар.Коэфф КАК К,
		               |	ТЧТовар.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
		               |	ТЧТовар.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп
		               |ИЗ
		               |	Документ.УЗ_ПоступлениеТовара.Товар КАК ТЧТовар
		               |ГДЕ
		               |	ТЧТовар.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТТовары.НомерЗаказа КАК НомерЗаказа,
		               |	ВТТовары.Товар КАК Товар,
		               |	СУММА(ВТТовары.Количество) КАК Количество,
		               |	ВТТовары.ЦенаЗакуп КАК ЦенаЗакуп,
		               |	ВТТовары.ЦенаРозн КАК ЦенаРозн
		               |ПОМЕСТИТЬ ТЗДляЗаказа
		               |ИЗ
		               |	Документ.УЗ_ПоступлениеТовара.Товар КАК ВТТовары
		               |ГДЕ
		               |	ВТТовары.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТТовары.НомерЗаказа,
		               |	ВТТовары.Товар,
		               |	ВТТовары.ЦенаЗакуп,
		               |	ВТТовары.ЦенаРозн
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЗДляЗаказа.Товар КАК Товар,
		               |	ТЗДляЗаказа.Количество КАК Количество,
		               |	ТЗДляЗаказа.НомерЗаказа КАК НомерЗаказа,
		               |	ТЗДляЗаказа.ЦенаЗакуп КАК ЦенаЗакуп,
		               |	ТЗДляЗаказа.ЦенаРозн КАК ЦенаРозн,
		               |	&ПоставщикВЗаказе КАК Поставщик,
		               |	ВЫБОР
		               |		КОГДА Заказ.Дата ЕСТЬ NULL
		               |			ТОГДА НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		               |		ИНАЧЕ НАЧАЛОПЕРИОДА(Заказ.Дата, ДЕНЬ)
		               |	КОНЕЦ КАК ДатаЗаказа,
		               |	&Склад КАК Склад,
		               |	&Дата КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		               |ИЗ
		               |	ТЗДляЗаказа КАК ТЗДляЗаказа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
		               |		ПО ТЗДляЗаказа.НомерЗаказа = Заказ.Номер
		               |			И (Заказ.Дата >= &ГраницаЗаказа)
		               |			И (Заказ.Поставщик = &ПоставщикВЗаказе)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	&Склад КАК Склад,
		               |	&ПоставщикВЗаказе КАК Поставщик,
		               |	&дата КАК Период,
		               |	ПоступлениеТовараИндивидуальныеЦены.Товар КАК Товар,
		               |	ПоступлениеТовараИндивидуальныеЦены.ДатаЗаказа КАК ДатаЗаказа,
		               |	ПоступлениеТовараИндивидуальныеЦены.ЦенаРозн КАК ЦенаРозн,
		               |	ПоступлениеТовараИндивидуальныеЦены.Количество КАК Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		               |ИЗ
		               |	Документ.УЗ_ПоступлениеТовара.ИндивидуальныеЦены КАК ПоступлениеТовараИндивидуальныеЦены
		               |ГДЕ
		               |	ПоступлениеТовараИндивидуальныеЦены.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТЗДляЗаказа";
		
		Результат = Запрос.ВыполнитьПакет();	   
		ТаблицыДвижений.Вставить("ТоварНаПриемке",			                        Результат[0].Выгрузить());
		ТаблицыДвижений.Вставить("ЗаказПоставщику",                          		Результат[2].Выгрузить());
		ТаблицыДвижений.Вставить("ИндивидуальныеЗаказы",                         	Результат[3].Выгрузить());

		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	&СкладКод КАК СкладКод,
		               |	&ФирмаКод КАК ФирмаКод,
		               |	&ПоставщикКод КАК ПоставщикКод,
		               |	&ПоставщикКДКод КАК ПоставщикКДКод,
		               |	&ВидПоступленияПорядок КАК ВидПоступленияПорядок,
		               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
		               |	ТЧТовар.КодПартии КАК ПартияКод,
		               |	ТЧТовар.КодТовара КАК ТоварКод,
		               |	ТЧТовар.Товар КАК Товар,
		               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
		               |	ТЧТовар.Количество КАК КоличествоБезК,
		               |	ТЧТовар.КоэффициентРазбивки КАК Коэффициент,
		               |	ТЧТовар.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
		               |	ТЧТовар.ЦенаЗакуп КАК ЦенаЗакуп,
		               |	ТЧТовар.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
		               |	ВЫБОР
		               |		КОГДА ТЧТовар.ВходящаяЦенаПоставщика > 0
		               |			ТОГДА ТЧТовар.ВходящаяЦенаПоставщика
		               |		ИНАЧЕ ТЧТовар.ЦенаЗакупБезНДСРасчет
		               |	КОНЕЦ КАК ВхЦенаЗакупБезНДС,
		               |	ТЧТовар.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
		               |	ТЧТовар.СуммаОстаткаОкругления КАК СуммаОстаткаОкругления,
		               |	ТЧТовар.ЦенаРозн КАК ЦенаРозн,
		               |	ТЧТовар.НомерЗаказа КАК НомерЗаказа
		               |ПОМЕСТИТЬ ВтТовары
		               |ИЗ
		               |	Документ.УЗ_ПоступлениеТовара.Товар КАК ТЧТовар
		               |ГДЕ
		               |	ТЧТовар.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТТовары.НомерЗаказа КАК НомерЗаказа,
		               |	ВТТовары.Товар КАК Товар,
		               |	СУММА(ВТТовары.КоличествоБезК) КАК Количество,
		               |	ВТТовары.ЦенаЗакуп КАК ЦенаЗакуп,
		               |	ВТТовары.ЦенаРозн КАК ЦенаРозн
		               |ПОМЕСТИТЬ ТЗДляЗаказа
		               |ИЗ
		               |	ВтТовары КАК ВТТовары
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТТовары.НомерЗаказа,
		               |	ВТТовары.Товар,
		               |	ВТТовары.ЦенаЗакуп,
		               |	ВТТовары.ЦенаРозн
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(ВТТовары.Количество) > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТТовары.СкладКод КАК СкладКод,
		               |	ВТТовары.ФирмаКод КАК ФирмаКод,
		               |	ВТТовары.ВидПоступленияПорядок КАК ВидПоступленияПорядок,
		               |	ВТТовары.ПартияКод КАК ПартияКод,
		               |	ВТТовары.ТоварКод КАК ТоварКод,
		               |	ВТТовары.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
		               |	ВТТовары.СуммаЗакупБезНДС КАК СуммаЗакупБезНДС,
		               |	ВТТовары.Количество КАК Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		               |	&Дата КАК Период
		               |ИЗ
		               |	ВтТовары КАК ВТТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТТовары.СкладКод КАК СкладКод,
		               |	ВТТовары.ФирмаКод КАК ФирмаКод,
		               |	ВТТовары.КачествоТовараПорядок КАК КачествоТовараПорядок,
		               |	ВТТовары.ВидПоступленияПорядок КАК ВидПоступленияПорядок,
		               |	ВТТовары.СтавкаНДСЗакуп КАК СтавкаНДС,
		               |	СУММА(ВТТовары.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		               |	&Дата КАК Период,
		               |	СУММА(ВТТовары.СуммаОстаткаОкругления) КАК СуммаОкругления
		               |ИЗ
		               |	ВтТовары КАК ВТТовары
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТТовары.СкладКод,
		               |	ВТТовары.ФирмаКод,
		               |	ВТТовары.ВидПоступленияПорядок,
		               |	ВТТовары.КачествоТовараПорядок,
		               |	ВТТовары.СтавкаНДСЗакуп
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЗДляЗаказа.Товар КАК Товар,
		               |	ТЗДляЗаказа.Количество КАК Количество,
		               |	ТЗДляЗаказа.НомерЗаказа КАК НомерЗаказа,
		               |	ТЗДляЗаказа.ЦенаЗакуп КАК ЦенаЗакуп,
		               |	ТЗДляЗаказа.ЦенаРозн КАК ЦенаРозн,
		               |	&ПоставщикВЗаказе КАК Поставщик,
		               |	ВЫБОР
		               |		КОГДА Заказ.Дата ЕСТЬ NULL
		               |			ТОГДА НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		               |		ИНАЧЕ НАЧАЛОПЕРИОДА(Заказ.Дата, ДЕНЬ)
		               |	КОНЕЦ КАК ДатаЗаказа,
		               |	&Склад КАК Склад,
		               |	&Дата КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		               |ИЗ
		               |	ТЗДляЗаказа КАК ТЗДляЗаказа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
		               |		ПО ТЗДляЗаказа.НомерЗаказа = Заказ.Номер
		               |			И (Заказ.Дата >= &ГраницаЗаказа)
		               |			И (Заказ.Поставщик = &ПоставщикВЗаказе)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	&Склад КАК Склад,
		               |	&ПоставщикВЗаказе КАК Поставщик,
		               |	&дата КАК Период,
		               |	ПоступлениеТовараИндивидуальныеЦены.Товар КАК Товар,
		               |	ПоступлениеТовараИндивидуальныеЦены.ДатаЗаказа КАК ДатаЗаказа,
		               |	ПоступлениеТовараИндивидуальныеЦены.ЦенаРозн КАК ЦенаРозн,
		               |	ПоступлениеТовараИндивидуальныеЦены.Количество КАК Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		               |ИЗ
		               |	Документ.УЗ_ПоступлениеТовара.ИндивидуальныеЦены КАК ПоступлениеТовараИндивидуальныеЦены
		               |ГДЕ
		               |	ПоступлениеТовараИндивидуальныеЦены.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	&дата КАК Период,
		               |	&Ссылка КАК Регистратор,
		               |	ВтТовары.СкладКод КАК СкладКод,
		               |	ВтТовары.ФирмаКод КАК ФирмаКод,
		               |	ВтТовары.ПоставщикКод КАК ПоставщикКод,
		               |	ВтТовары.ПоставщикКДКод КАК ПоставщикКДКод,
		               |	ВтТовары.ПартияКод КАК ПартияКод,
		               |	ВтТовары.ТоварКод КАК ТоварКод,
		               |	ВтТовары.Количество КАК Количество,
		               |	ВтТовары.Коэффициент КАК Коэффициент,
		               |	ВтТовары.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
		               |	ВтТовары.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДС,
		               |	ВтТовары.ВхЦенаЗакупБезНДС КАК ВхЦенаЗакупБезНДС,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		               |ИЗ
		               |	ВтТовары КАК ВтТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТЗДляЗаказа";
		
		Результат = Запрос.ВыполнитьПакет();	   
		ТаблицыДвижений.Вставить("УЗ_Партии",				                        Результат[2].Выгрузить());
		ТаблицыДвижений.Вставить("УЗ_ТоварныйОтчет",			                    Результат[3].Выгрузить());
		ТаблицыДвижений.Вставить("ЗаказПоставщику",                          		Результат[4].Выгрузить());
		ТаблицыДвижений.Вставить("ИндивидуальныеЗаказы",                         	Результат[5].Выгрузить());
		ТаблицыДвижений.Вставить("УЗ_ПоступлениеТовара",                         	Результат[6].Выгрузить());
	КонецЕсли;			   
	
КонецПроцедуры

Процедура ПоместитьВОбменСкладБух() Экспорт
	
	// выпадает из обмена тьма документов!!! Если НЕ ДатаФактПоступления = Дата(1,1,1) Тогда
	
	//------------  если дата оприходованиия не протавлена - выставляем в обмен датой = дата документа + 7 дней
	// если за это время аптека не отреагирует на документ - он будет загружен в бухгалтерию
	
	Если ДатаФактПоступления = Дата(1,1,1) Тогда
		ДатаОчередиВыгрузки=Дата+60*60*24*7;
	Иначе // есть какая-то дата реакции	
		ДатаОчередиВыгрузки=Дата ;
	КонецЕсли;	
	
	
	
	
		МЗ = РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
		МЗ.ВидДокумента = 201;
		МЗ.ДатаОчередиСклад = ДатаОчередиВыгрузки;
		МЗ.КодФирмы = Фирма.Код;
		МЗ.СсылкаТХТ = XMLСтрока(Ссылка);
		МЗ.КодСклада = Склад.Код;
		МЗ.КодКонтрагента = Поставщик.Код;
		МЗ.Объект = Ссылка;
		МЗ.Проведен = Истина;
		МЗ.ПомеченНаУдаление = Ложь;
		МЗ.Записать();
		Если НЕ ФирмаКомитент.Пустая() Тогда
			МЗ = РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
			МЗ.ВидДокумента = 201;
			МЗ.ДатаОчередиСклад = ДатаОчередиВыгрузки;
			МЗ.КодФирмы = ФирмаКомитент.Код;
			МЗ.СсылкаТХТ = XMLСтрока(Ссылка);
			МЗ.КодСклада = Склад.Код;
			МЗ.КодКонтрагента = Поставщик.Код;
			МЗ.Объект = Ссылка;
			МЗ.Проведен = Истина;
			МЗ.ПомеченНаУдаление = Ложь;
			МЗ.Записать();			
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВходящиеЦеныПоставщика()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ДатаПоступления КАК ДатаПоступления,
	               |	&КодПоставщика КАК КодПоставщика,
	               |	П.КодПартии КАК ПартияКод,
	               |	П.ВходящаяЦенаПоставщика КАК ЦенаЗакупБезНДС,
	               |	П.ВходящаяСтавкаНДСПоставщика КАК СтавкаНДС,
	               |	П.КодПоставкиНаСклад КАК КодПоставкиНаСклад,
	               |	П.КачествоТовара КАК КачествоТовара
	               |ИЗ
	               |	Документ.УЗ_ПоступлениеТовара.Товар КАК П
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеЦеныПоставщика КАК ВЦ
	               |		ПО П.КодПартии = ВЦ.ПартияКод
	               |ГДЕ
	               |	П.Ссылка = &Ссылка
	               |	И П.ВходящаяЦенаПоставщика > 0
	               |	И (ВЦ.ПартияКод ЕСТЬ NULL
	               |			ИЛИ (П.ВходящаяЦенаПоставщика <> ВЦ.ЦенаЗакупБезНДС
	               |				ИЛИ П.ВходящаяСтавкаНДСПоставщика <> ВЦ.СтавкаНДС
	               |				ИЛИ П.КодПоставкиНаСклад <> ВЦ.КодПоставкиНаСклад
	               |				ИЛИ П.КачествоТовара <> ВЦ.КачествоТовара
	               |				ИЛИ &ДатаПоступления <> ВЦ.ДатаПоступления
	               |				ИЛИ &КодПоставщика <> ВЦ.КодПоставщика))";
	
	Запрос.УстановитьПараметр("ДатаПоступления",Дата);
	Запрос.УстановитьПараметр("КодПоставщика",Поставщик.Код);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		НЗ = РегистрыСведений.ВходящиеЦеныПоставщика.СоздатьНаборЗаписей();
		НЗ.Отбор.ПартияКод.Установить(Выборка.ПартияКод);
		ЗаполнитьЗначенияСвойств(НЗ.Добавить(),Выборка);
		НЗ.Записать();
	КонецЦикла;
	
	//КодПоставщика = Поставщик.Код;
	//
	//Для каждого стр из Товар Цикл
	//	Если стр.ВходящаяЦенаПоставщика > 0 Тогда
	//		НЗ = РегистрыСведений.ВходящиеЦеныПоставщика.СоздатьНаборЗаписей();
	//		НЗ.Отбор.ПартияКод.Установить(стр.КодПартии);
	//		//НЗ.ОбменДанными = Истина;
	//		НоваяСтрока = НЗ.Добавить();
	//		НоваяСтрока.ДатаПоступления = Дата;
	//		НоваяСтрока.КодПоставщика = КодПоставщика;
	//		НоваяСтрока.ПартияКод = стр.КодПартии;
	//		НоваяСтрока.ЦенаЗакупБезНДС = стр.ВходящаяЦенаПоставщика;
	//		НоваяСтрока.СтавкаНДС		= стр.ВходящаяСтавкаНДСПоставщика;
	//		НоваяСтрока.КодПоставкиНаСклад = стр.КодПоставкиНаСклад;
	//		НоваяСтрока.КачествоТовара = стр.КачествоТовара;
	//		НЗ.Записать();
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	 
	 
	 ПроведениеЗакончено=ложь;
	 
	 Если ПриходТовараСервер.КонтрольСтавокНДС(ЭтотОбъект) = Ложь Тогда 
		#Если Клиент Тогда
			Сообщить("В документе обнаружены строки с некорректным НДС!");
		#КонецЕсли
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	 
	 //ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ);
	 Если НЕ ЗначениеЗаполнено(СтатусДокАптеки) или СтатусДокАптеки = Перечисления.СтатусДокАптеки.Неопределено Тогда
		 ПриходТовараСервер.УЗ_ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ,Истина);
	 Иначе
		 ПриходТовараСервер.УЗ_ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ,Ложь);
	 КонецЕсли;
	 
	 Если Отказ = Истина Тогда
		 #Если Клиент Тогда
			 Сообщить("Не удалось обновить данные в партиях документа. Документ непроведен",СтатусСообщения.ОченьВажное);
		 #КонецЕсли		
		 Возврат;
	 КонецЕсли;
	 
	 Если НЕ ДатаОприходования = Дата(1,1,1) Тогда
		 
	 КонецЕсли;
	 
	Движения.ЗаказПоставщику.Очистить(); Движения.ЗаказПоставщику.Записать(); 
	
	ТаблицыДвижений = Новый Структура();
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	
	ЗакрытьЗаказОбычногоТовара(ТаблицыДвижений);
	ЗакрытьИндивидуальныеЗаказы(ТаблицыДвижений);
		
	Если ДатаФактПоступления = Дата(1,1,1) Тогда
		
		Движения.ТоварНаПриемке.Записывать = Истина;
		Движения.ТоварНаПриемке.Загрузить(ТаблицыДвижений.ТоварНаПриемке);	
		
		Движения.УЗ_Партии.Записывать = Истина;
		Движения.УЗ_Партии.Очистить();
		
		Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
		Движения.УЗ_ТоварныйОтчет.Очистить();
		
		Движения.УЗ_ПоступлениеТовара.Записывать = Истина;
		Движения.УЗ_ПоступлениеТовара.Очистить();

		
	Иначе
		
		Движения.ТоварНаПриемке.Записывать = Истина;
		Движения.ТоварНаПриемке.Очистить();
		
		Движения.УЗ_Партии.Записывать = Истина;
		Движения.УЗ_Партии.Загрузить(ТаблицыДвижений.УЗ_Партии);	
		
		Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
		Движения.УЗ_ТоварныйОтчет.Загрузить(ТаблицыДвижений.УЗ_ТоварныйОтчет);
		
		Движения.УЗ_ПоступлениеТовара.Записывать = Истина;
		Движения.УЗ_ПоступлениеТовара.Загрузить(ТаблицыДвижений.УЗ_ПоступлениеТовара);
		
		ЗаписатьВходящиеЦеныПоставщика();

		ПоместитьВОбменСкладБух();	
	КонецЕсли;
	
	//Начало НЭТИ Барданов А.Ю. 15.01.2019 ENT-852
	Если ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ Тогда
		Движения.ЗаказПоставщику.Очистить(); Движения.ЗаказПоставщику.Записать();
	КонецЕсли;
	//Конец НЭТИ Барданов А.Ю. 15.01.2019 ENT-852 
	
	ПроведениеЗакончено=Истина;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	
	НеудачныйВводНаОсновании = Истина;
	
	//Для каждого стр Из Товар Цикл
	//	
	//	стр.Партия = ОМ1_СоздатьПартиюТовара(стр.Товар).Ссылка;
	//
	//КонецЦикла; 
	
	//ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() Тогда
		ДокСсылка = ПолучитьСсылкуНового();	
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			ДокСсылка = Документы.УЗ_ПоступлениеТовара.ПолучитьСсылку();	
			УстановитьСсылкуНового(ДокСсылка);
		КонецЕсли;
		ИДДокументаАптеки = XMLСтрока(ДокСсылка);
	Иначе
		Если Год(Дата) > Год(ВхДатаНакл) Тогда
			Если Год(Дата)>Год(Ссылка.Дата) Тогда
				УстановитьНовыйНомер();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	//Для каждого Стр из Товар Цикл
	//	Если  Стр.СуммаЗакуп<>0 и Стр.СуммаРозн<>0 Тогда
	//		Стр.ПроцентРознНац=(Стр.СуммаРозн/Стр.СуммаЗакуп-1)*100;
	//	ИначеЕсли Стр.ЦенаРозн<>0 и Стр.ЦенаЗакуп<>0 ТОГДА
	//		Стр.ПроцентРознНац=(Стр.ЦенаРозн/Стр.ЦенаЗакуп-1)*100;
	//	КонецЕсли;	
	//КонецЦикла;	
	
	ДатаПоследнегоИзменения = ТекущаяДата();
	
	СуммаДок =Товар.Итог("СуммаЗакуп");
	СуммаДокРозн = Товар.Итог("СуммаРозн");
	
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьНаЗаполнение(Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
		Если Отказ = Истина Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьСменуСостоянияДокумента(Ссылка,РежимЗаписи,ПометкаУдаления);

	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	Движения.УЗ_ТоварныйОтчет.Прочитать();
	Если Движения.УЗ_ТоварныйОтчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	                                     
	Если НЕ ИмяПользователя() = "Робот" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УЗ_ПоступлениеТовараТовар.Товар,
		|	УЗ_ПоступлениеТовараТовар.КодПартии,
		|	УЗ_ПоступлениеТовараТовар.КодТовара,
		|	УЗ_ПартииОстатки.КоличествоОстаток,
		|	УЗ_ПоступлениеТовараТовар.Количество * УЗ_ПоступлениеТовараТовар.Коэфф КАК КоличествоДок
		|ИЗ
		|	Документ.УЗ_ПоступлениеТовара.Товар КАК УЗ_ПоступлениеТовараТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УЗ_Партии.Остатки(
		|				,
		|				СкладКод = &СкладКод
		|					И ТоварКод В (&Товары)
		|					И ПартияКод В (&Партии)) КАК УЗ_ПартииОстатки
		|		ПО УЗ_ПоступлениеТовараТовар.КодПартии = УЗ_ПартииОстатки.ПартияКод
		|ГДЕ
		|	УЗ_ПоступлениеТовараТовар.Ссылка = &Ссылка
		|	И ЕСТЬNULL(УЗ_ПартииОстатки.КоличествоОстаток, 0) <> УЗ_ПоступлениеТовараТовар.Количество * УЗ_ПоступлениеТовараТовар.Коэфф";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("СкладКод",Склад.Код);
		Запрос.УстановитьПараметр("Товары",Товар.ВыгрузитьКолонку("КодТовара"));
		Запрос.УстановитьПараметр("Партии",Товар.ВыгрузитьКолонку("КодПартии"));
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат;
		Иначе
			Выборка = Рез.Выбрать();
			#Если Клиент Тогда
				Предупреждение("По документу есть расходные движения. Отмена проведения запрещена!",5);
				Сообщить("По следующим позициям было движение: ");
				Пока Выборка.Следующий() Цикл
					Сообщить("Код товара: "+Формат(Выборка.КодТовара,"ЧГ=0") + " Товар: " + Выборка.Товар);	
				КонецЦикла;
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



НеудачныйВводНаОсновании=Ложь;
ПроведениеЗакончено=Ложь;

