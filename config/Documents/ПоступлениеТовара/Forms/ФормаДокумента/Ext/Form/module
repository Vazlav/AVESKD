//----------------------------< Посерийный учет! >--------------------------------GtG---
// Серия создается при приходе! поэтому подбор по АП без серии!!!
//-----------------------------------------------------------GtG---

Перем КонтрольнаяСуммаШапкиИсходногоДокументаПередОткрытием ;
Перем КонтрольнаяСуммаТЧИсходногоДокументаПередОткрытием;

Перем СписокКолонокДляПересчетаПоЦене;
Перем СписокКолонокПересчетаЦЕН;


Перем ТЗСвНДС;

Перем СтарыйНомерСтроки;

Перем АДО;

Перем КэшПричинЗабраковки; // соответствие Партия---причина
Перем ЗапросПричинЗабраковки; //Кэшированный запрос для поиска причин забраковки;

Перем КэшПоСрокамГодности;   // соответствие Серия --- СрокГодности
Перем ЗапросПоСрокамГодности;

Перем КэшСостоянияЕИТ; // Соответствие ЕИТ---ПометкаУдаления
Перем ЗапросПоСостояниюЕИТ;

Перем КэштоварКодНаименование; // Соответствие Товар---Строка код+Наименование
Перем ЗапросПоКодуНаименованиюТовара;


Процедура ПодключитьБазу1C8(АдоЦБ) Экспорт
	//---------------------- ПОДКЛЮЧАЕМСЯ К БАЗЕ ЧЕРЕЗ ADO -------------------GTG->-
	АдоЦБ=Новый COMОбъект ("AdoDB.Connection");
	АдоЦБ_КоннСтр="DSN=A5_Sklad; Password=;User ID=sa";
	АдоЦБ.Open(АдоЦБ_КоннСтр);
	//------------------------------------------------------------------------GTG-<-  
	
КонецПроцедуры

Функция НайтиИПолучитьБарКод(БарКодПоставщика,ЕИТ)
	
			
	Если (СтрДлина(БарКодПоставщика)=13) или (СтрДлина(БарКодПоставщика)=8) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ШК.Ссылка как ШКСсылка
		|ИЗ
		|	Справочник.ШКПТ КАК ШК
		|ГДЕ
		|	ШК.Наименование = &Наименование
		|	И ШК.Владелец = &НайденныйТовар";
		Запрос = Новый  Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Наименование",БарКодПоставщика);
		Запрос.УстановитьПараметр("НайденныйТовар",ЕИТ);
		
		Рез=Запрос.Выполнить();
		ТЗ=Рез.Выгрузить();			
		Если ТЗ.Количество() > 0 Тогда
			ШКСсылка = ТЗ[0].ШКСсылка;
		Иначе
			СпрШК = Справочники.ШКПТ.СоздатьЭлемент();
			СпрШК.Владелец = ЕИТ;
			СпрШК.Наименование = БарКодПоставщика;
			СпрШК.Записать();
			ШКСсылка = СпрШК.Ссылка;
		КонецЕсли;	
	Иначе
		ТХТ = "ВЫБРАТЬ
		      |	ШКПТ.Ссылка КАК БарКод
		      |ИЗ
		      |	Справочник.ШКПТ КАК ШКПТ
		      |ГДЕ
		      |	ШКПТ.ПометкаУдаления = ЛОЖЬ
		      |	И ШКПТ.Владелец = &ЕИТ
		      |	И ШКПТ.Наименование <> &Пустой";
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("ЕИТ",ЕИТ);
		Запрос.УстановитьПараметр("Пустой","0000000000000");
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество() = 1 Тогда
			ШКСсылка = Рез.Получить(0).БарКод;
		Иначе
			ШКСсылка = Справочники.ШКПТ.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;
		
	Возврат ШКСсылка;		
	
	
КонецФункции

Функция НайтиИПолучитьСертификат(Товар,СертификатПоставщика)
	
	Если СертификатПоставщика <> "" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	Серт.Ссылка как СертСсылка
		|ИЗ
		|	Справочник.Сертификаты КАК Серт
		|ГДЕ
		|	Серт.Наименование = &Наименование
		|	И Серт.Владелец = &НайденныйТовар";
		Запрос = Новый  Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Наименование",СертификатПоставщика);
		Запрос.УстановитьПараметр("НайденныйТовар",Товар);
		
		Рез=Запрос.Выполнить();
		ТЗ=Рез.Выгрузить();			
		Если ТЗ.Количество() > 0 Тогда
			СертСсылка = ТЗ[0].СертСсылка;
		Иначе
			СпрСерт = Справочники.Сертификаты.СоздатьЭлемент();
			СпрСерт.Владелец = Товар;
			СпрСерт.Наименование = СертификатПоставщика;
			СпрСерт.Записать();
			СертСсылка = СпрСерт.Ссылка;
		КонецЕсли;	
	Иначе
		СертСсылка = Справочники.Сертификаты.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат СертСсылка;
	
КонецФункции

Функция НайтиИПолучитьГТД(ГТДПоставщика,Страна="")
	
	//------------------<Находим ГТД . Если нет, то создаем новый элемент в справочнике>---------
	Если ГТДПоставщика = "" Тогда
		ГТДПоставщика = "----------------------------";
	КонецЕсли;
	
	ГТДСсылка	   = Справочники.ГТД.НайтиПоНаименованию(ГТДПоставщика,Истина);
	Если ГТДСсылка = Справочники.ГТД.ПустаяСсылка() Тогда
		ТекГТД = Справочники.ГТД.СоздатьЭлемент();
		ТекГТД.Наименование = ГТДПоставщика;
		ТекГТД.Страна = ОМ_Справочники.ПолучитьСтрану(Страна);
		ТекГТД.Записать();
		ГТДСсылка = ТекГТД.Ссылка;
	КонецЕсли;
	
	Возврат ГТДСсылка;
	
КонецФункции

Функция НайтиИПолучитьСерию(Товар,СерияПоставщика,СрокГодностиПоставщика);
	
	Если СерияПоставщика = "" Тогда
		СерияПоставщика = "*";
	КонецЕсли;
	
	Если ОМ3_ЭтоПустаяДата(СрокГодностиПоставщика) = Истина Тогда
		СрокГодностиПоставщика = Дата("20130101");	
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Серии.Ссылка как СерияСсылка
	|ИЗ
	|	Справочник.Серии КАК Серии
	|ГДЕ
	|	Серии.Наименование = &Наименование
	|	И Серии.СрокГодности = &СрокГодности
	|	И Серии.Владелец = &НайденныйТовар";
	Запрос = Новый  Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Наименование",СерияПоставщика);
	Запрос.УстановитьПараметр("НайденныйТовар",Товар);
	Запрос.УстановитьПараметр("СрокГодности",СрокГодностиПоставщика);
	Рез=Запрос.Выполнить();
	ТЗ=Рез.Выгрузить();			
	Если ТЗ.Количество() > 0 Тогда
		СерияСсылка = ТЗ[0].СерияСсылка;
	Иначе
		СпрСер = Справочники.Серии.СоздатьЭлемент();
		СпрСер.Владелец = Товар;
		СпрСер.Наименование = СерияПоставщика;
		СпрСер.СрокГодности = СрокГодностиПоставщика;
		СпрСер.Записать();
		СерияСсылка = СпрСер.Ссылка;
	КонецЕсли;
	Возврат СерияСсылка;
	
КонецФункции

Функция НайтиИПолучитьТовар(Стр)
	
	//------------------<Найдем товар из таблицы сопоставления>-------------------Virus----03.02.2008
	КодТовара = СокрЛП(стр.Код);
	
	Если Поставщик.ПоставщикСвязок.Пустая() Тогда
		ЛокПоставщик = Поставщик;
	Иначе
		ЛокПоставщик = Поставщик.ПоставщикСвязок;
	КонецЕсли;	
	
	ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	СвязкиТовараСПоставщиком.КодТовараПоставщика КАК КодТовараПоставщика,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы КАК Товар,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.ЕдиницаПоУмолчанию как ЕдиницаПоУмолчанию,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.ЕдиницаПоУмолчанию.К КАК Коэфф
	      |ИЗ
	      |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |ГДЕ
	      |	СвязкиТовараСПоставщиком.Поставщик = &Поставщик
	      |	И СвязкиТовараСПоставщиком.КодТовараПоставщика = &КодТовараПоставщика";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Поставщик",ЛокПоставщик);
	Запрос.УстановитьПараметр("КодТовараПоставщика",КодТовара);
	ТаблицаСвязок = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСвязок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТаблицаСвязок.Получить(0);   //Возвращаем строку
	КонецЕсли;
	
	
КонецФункции


 //============================================================================ GtG ===
 Процедура ОбновитьСверткуПоНДС  () 
     // Назначение:
 	// Обновляет свертку по НДС
 	// 
     // 
 	//--------------------------------------------------------------------------------
	
	//ТЗСвНДС =  Товар.Выгрузить();  	
	//ТЗСвНДС.Свернуть("СтавкаНДС","СуммаЗакуп,НДСЗакуп");
	//
	//ЭлементыФормы.СверткаПоНДС.Значение=ТЗСвНДС;
	//ЭлементыФормы.СверткаПоНДС.СоздатьКолонки();
	//ЭлементыФормы.СверткаПоНДС.Колонки.Сдвинуть(1,-1);
	//
	//ЭлементыФормы.СверткаПоНДС.Колонки.Получить(1).ОтображатьВПодвале=Истина;
	//ЭлементыФормы.СверткаПоНДС.Колонки.Получить(1).ТекстПодвала=ТЗСвНДС.Итог("НДСЗакуп");
	//ЭлементыФормы.СверткаПоНДС.Колонки.Получить(1).ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложение.Право;
	//
	//ЭлементыФормы.СверткаПоНДС.Колонки.Получить(2).ОтображатьВПодвале=Истина;
	//ЭлементыФормы.СверткаПоНДС.Колонки.Получить(2).ТекстПодвала=ТЗСвНДС.Итог("СуммаЗакуп");
	//ЭлементыФормы.СверткаПоНДС.Колонки.Получить(2).ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложение.Право;
	//
	//
	//
	//
	//ЭлементыФормы.СверткаПоНДС.Подвал=Истина;
	//
	
	
	
  КонецПроцедуры
  //============================================================================ GtG ===
  

  Процедура КонтрольИзмененияЗакупочныхЦенПоАП() Экспорт
	  
	  ВОЗВРАТ; // ибо оказалось ненужным. 
	  
	  
	  
	  
	  
	  
	  
	//------- Изменение цен - туда сливаем все товары по которым нужно
	// изменять регламентированную закупочную цену, еще что-то и т.д. 
	// 1 приходный документ = 1 документ изменения цен
	// При проведении документа изменения цен цены в АП меняются и можно пересчитать
	// документ прихода (расценка должна среагировать и новых записей не появится)
	// Док изменения цен вычищается если существовал, или создается новый
	
	ТЗВыб=ОМ6_НайтиИзменениеЦен(ЭтотОбъект.Ссылка); //объект может и не понадибиться если все ОК
	
	//============================< Шерстим имеющиеся записи по изменению цен >================================GtG===
	Для Каждого СТЗ Из  ТЗВыб Цикл
		ИзмЦен=СТЗ.ИзмЦенДок.ПолучитьОбъект();
		Если ИзмЦен.Ссылка.Проведен тогда // проведен - изменял цены АП
			ИзмЦен=Документы.ИзменениеЦен.ПустаяСсылка(); // пропускаем пусть висит
			Продолжить; // Нам не нужен пенопласт
		Иначе
			//Попытка
				ИзмЦен.Удалить();// Удалим  по любому
				ИзмЦен=Документы.ИзменениеЦен.ПустаяСсылка();// потом возникнет новый
			//Исключение
				// ну ни шмогла я, ни шмогла
			//КонецПопытки;
		КонецЕсли; 	
	КонецЦикла;
	
	ИзмЦенСуществует=Ложь; // типа еще не создавался, может и не создастся вообще

	ЕстьЗаписиИзмЦен=Ложь;
	
	ТЧТОвар=ЭтотОбъект.Товар;
	
	//============================< Шерстим товар документа на отклонения от регламентированной закупки >================================GtG===
	Для каждого СтрТЧ Из  ТЧТОвар Цикл
		
		Ап=СтрТЧ.Товар;
		
		РеглЗакупЦенаИзАП=АП.ЗакупочнаяЦена;
		ПроблемаСЗакупЦеной= Ложь; // Если станет Да, то формируется документ про изменение закупочных цен
		
		Если РеглЗакупЦенаИзАП=0 Тогда
			РеглЗакупЦенаИзАП=АП.ЗакупочнаяЦена;
			ПроблемаСЗакупЦеной=Истина; // в документ на изменение заукп и пр цен в АП
		Иначе // можно определить отклонение
			ПроцОтклРЗакупОтАП=100*(СтрТЧ.ЦенаЗакуп-РеглЗакупЦенаИзАП)/РеглЗакупЦенаИзАП;
			Если (ПроцОтклРЗакупОтАП>Константы.МаксПроцОтклоненияОтЗакупЦены.Получить()) или
				(ПроцОтклРЗакупОтАП<Константы.МинПроцОтклоненияОтЗакупЦены1.Получить())
				Тогда
				ПроблемаСЗакупЦеной=Истина; // в документ на изменение заукп и пр цен в АП
			КонецЕсли;
		КонецЕсли;
		
		
		// Вот тут--->
		//------------ если возникла проблема с закупочной ценой то запишем это в документ изменение цен ----
		Если ПроблемаСЗакупЦеной=Истина тогда
			Если ИзмЦенСуществует=Ложь тогда
				
				НовИзмЦен=Документы.ИзменениеЦен.СоздатьДокумент();
				НовИзмЦен.Дата=ТЕКУЩАЯдАТА();
				НовИзмЦен.ДокументОснование=ЭтотОбъект.Ссылка;
				НовИзмЦен.Записать(РежимЗаписиДокумента.Запись);
				ИзмЦен=НовИзмЦен;// объект
				ИзмЦенСуществует=Истина;// чтобы больше не создавалось и быстро проверялось условие
			КонецЕсли;	   
			СтрокаИзмЦен=ИзмЦен.Товар.Добавить();
			
			
			СтрокаИзмЦен.Товар=АП;
			СтрокаИзмЦен.СтараяЗакупЦенаАП=РеглЗакупЦенаИзАП;
			СтрокаИзмЦен.ЗакупЦенаПоДок=СтрТЧ.ЦенаЗакуп;
			ЕстьЗаписиИзмЦен=Истина;
			ИзмЦен.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		//----- конец записи в изм цен--------
		
	КонецЦикла;
	
	//----- Зафиксируем изменения закуп цен документом -----
	
	Если ИзмЦенСуществует=Истина Тогда
	//Если ИзмЦен.ссылка.Пустая()=Ложь тогда
		Если ЕстьЗаписиИзмЦен=Истина тогда
			Предупреждение("У некоторых товаров отклонение в закупочной цене от АП больше допустимого!
			| Создан документ Изменение цен №"+ИзмЦен.Номер+"  от "+ИзмЦен.Дата,20);
			ИзмЦен.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			//---- ВСЕ ОК цены в норме - грохнем документ измЦен-----
			ИзмЦен.Удалить(); // насмерть
		КонецЕсли;
	КонецЕсли;	 
	
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	//ОбновитьСверткуПоНДС();
	ОМ4_ПередЗаписью(ЭтотОбъект,Товар,КонтрольнаяСуммаШапкиИсходногоДокументаПередОткрытием ,КонтрольнаяСуммаТЧИсходногоДокументаПередОткрытием);
	ЭтотОбъект.СуммаДок=Товар.Итог("СуммаЗакуп");
	ЭтотОбъект.СуммаДокРозн=Товар.Итог("СуммаРозн");
	
	Если ОМ3_ЭтоПустаяДата(ВхДатаНакл)= ИСТИНА Тогда
		Предупреждение("Не заполнена Дата накладной поставщика! Не могу записать документ!");
		Отказ= ИСТИНА;
	КонецЕсли; 
	
	ОтказИзЗаСтавкиНДС=Ложь;
	Для каждого Стр Из Товар Цикл
		
		Если Стр.СтавкаНДС.Пустая() Тогда
			ОтказИзЗаСтавкиНДС= ИСТИНА;
		КонецЕсли; 
	КонецЦикла; 
	Если ОтказИзЗаСтавкиНДС= ИСТИНА Тогда
		ПРедупреждение("Не указана ставка НДС!");
		Отказ=ОтказИзЗаСтавкиНДС;
	КонецЕсли;
	
	Если Поставщик.Пустая()  Тогда
		Предупреждение("Не указан поставщик!");
		Отказ= ИСТИНА;
	КонецЕсли; 
	
	Если Склад.Пустая()  Тогда
		Предупреждение("Не указан склад!");
		Отказ= ИСТИНА;
	КонецЕсли; 

	////==================<Для Расценки нужно чтобы в партии были данные>===================GtG====21.11.2007
	//Для каждого Стр из Товар Цикл
	//	ОМ1_ОбновитьДанныеПартии  (Стр, ЭтотОбъект);//МО_ОбновитьДанныеПартии  (Стр); // прицепить к партии серию
	//	МО_ОбновитьДанныеСерии 	 (Стр); // прицепить к серии сертификат
	//КонецЦикла;	
	////================================================GtG====КОНЕЦ==21.11.2007
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Склад.ПометкаУдаления или (ТекущаяДата() >= Склад.ДатаЗакрытия и Склад.ДатаЗакрытия <> Дата(1,1,1)) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("ВНИМАНИЕ! Вы пытаетесь оприходовать товар на закрытую аптеку. Продолжить?", Режим,0,КодВозвратаДиалога.Нет);	
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;	
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	
  КонецПроцедуры




//============================================================================ GtG ===
Функция ПроверкаЗаполненияКритическиВажныхЗначенийДляСтроки  (ТекСтрокаТЧ) 
    // Назначение:
	// проверяет заполнены ли поля Цена и ставка ндс
	// Возвращает истина или ложь
    // 
	//--------------------------------------------------------------------------------
	 Если ТекСтрокаТЧ.Количество=0 Тогда
		 Предупреждение("Не указано количество!");
		 Возврат Ложь;
	 КонецЕсли;
	 
	 Если ТекСтрокаТЧ.СтавкаНДС.Пустая()  Тогда
		 Предупреждение("Не указана сатвка НДС!");
		 Возврат Ложь;
	 КонецЕсли;

     

     Возврат Истина;
КонецФункции
//============================================================================ GtG ===

//============================================================================ GtG ===
Функция ТекущаяСтрокаДокумента  () 
    // Назначение:
	// Дает объект - тек строку документа
	// 
    // 
	//--------------------------------------------------------------------------------
	ТекСтрокаТЧ="";
	ИндексТекСтроки=Товар.Индекс(ЭлементыФормы.Товар.ТекущаяСтрока);
    ТекСтрокаТЧ=ТОвар.Получить( ИндексТекСтроки); // Рез. тип объекта - СтрокаТабличнойЧасти

	Возврат ТекСтрокаТЧ;
	
КонецФункции
//============================================================================ GtG ===


Процедура СобытиеТоварСертификат_Перетаскивание(Элемент,  ПараметрыПеретаскивания , СтандартнаяОбработка, Строка, Колонка) 
КонецПроцедуры

Процедура СобытиеТоварСертификат_НачалоПеретаскивания(Элемент,  ПараметрыПеретаскивания , СтандартнаяОбработка) 
	ЭлементыФормы.Товар.ИзменятьПорядокСтрок = Ложь;
	СтарыйНомерСтроки=ПараметрыПеретаскивания.Значение.НомерСтроки;
КонецПроцедуры

Процедура СобытиеТоварСертификат_ПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания , СтандартнаяОбработка, Строка, Колонка) 
	
		
	
КонецПроцедуры


Процедура СобытиеТоварСертификат_ОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания , СтандартнаяОбработка) 
     ЭлементыФормы.Товар.РазрешитьПеретаскивание=Истина;
     ЭлементыФормы.Товар.ИзменятьПорядокСтрок = Ложь;
     
     ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
     Если ИмяТекКол="Сертификат" Тогда
          ТД = ЭтотОбъект.Товар.Получить(СтарыйНомерСтроки-1);  // Товар из таблицы куда копируем сертификат
          ЭлементыФормы.Товар.ИзменятьПорядокСтрок = Ложь; // не работает
          ;
          Если Вопрос("Скопировать сертификат из "+ Символы.ВК+Символы.ПС+ ""+ ПараметрыПеретаскивания.Значение.Товар.ПолучитьОбъект()+ " в "+ Символы.ВК+Символы.ПС+ ТД.Товар+ " ?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Нет Тогда
               СтандартнаяОбработка = ложь;
               Возврат;
          КонецЕсли;
          Попытка
               НовыйСертификат = ПараметрыПеретаскивания.Значение.Сертификат.ПолучитьОбъект().Скопировать(); // Создаем новый элемент справочника сертификат  из сертификата той строки откуда тянем
               НовыйСертификат.Владелец = ТД.Товар; // Устанавливаем подчиненность
               НовыйСертификат.Записать();
               ТД.Сертификат=НовыйСертификат.Ссылка; // пишем ссылку в таблицу
          Исключение
               Сообщить("Не удалось скопировать сертификат...");
               СтандартнаяОбработка = Ложь;
          КонецПопытки;
     КонецЕсли;
     
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НеудачныйВводНаОсновании = Истина Тогда
		Предупреждение("КОПИРОВАТЬ ПРИХОД ТОВАРА НЕЛЬЗЯ!",5);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОМ41_ПередОткрытиемДокумента  (ЭтотОбъект,ЭтаФорма,Отказ);
	
	
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Статус=Перечисления.СтатусПрихода.Черновик;
	КонецЕсли; 	
		
КонецПроцедуры

Процедура ПриОткрытии()
	Если ЭтоНовый()=Истина Тогда
		Если НеудачныйВводНаОсновании=Истина ТОгда
		 	ЭтаФорма.Закрыть();
		КонецЕсли; 
		
		
		
		Фирма=Константы.ОсновнаяФирма.Получить();
		Склад=Константы.ОсновнойСклад.Получить();
		ДатапоступленияНаСклад=ТекущаяДата();
		ДАта=ТекущаяДата();
		
		
		
	Иначе
		ДатаЗапрета = НастройкаПравДоступа.ВернутьДатуЗапретаРедактирования(Склад);
		Если Дата <= ДатаЗапрета Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;  
	
	Если Склад.ТипСклада = Перечисления.ТипыМХ.Опт Тогда
		ЭлементыФормы.Товар.Колонки.ЦенаРозн.Видимость=Ложь;
		ЭлементыФормы.Товар.Колонки.СуммаРозн.Видимость=Ложь;
		ЭлементыФормы.Товар.Колонки.ПроцентРознНац.Видимость=Ложь;
	Иначе
		ЭлементыФормы.Товар.Колонки.ЦенаРозн.Видимость=Истина;
		ЭлементыФормы.Товар.Колонки.СуммаРозн.Видимость=Истина;
		ЭлементыФормы.Товар.Колонки.ПроцентРознНац.Видимость=Истина;		
	КонецЕсли;
	
	
	ЭтаФорма.ЭлементыФормы.Товар.РазрешитьНачалоПеретаскивания = Истина;
	ЭтаФорма.ЭлементыФормы.Товар.РазрешитьПеретаскивание = Истина;
	ЭтаФорма.ЭлементыФормы.Товар.УстановитьДействие("Перетаскивание", Новый Действие("СобытиеТоварСертификат_Перетаскивание"));
	ЭтаФорма.ЭлементыФормы.Товар.УстановитьДействие("НачалоПеретаскивания", Новый Действие("СобытиеТоварСертификат_НачалоПеретаскивания"));
	ЭтаФорма.ЭлементыФормы.Товар.УстановитьДействие("ПроверкаПеретаскивания", Новый Действие("СобытиеТоварСертификат_ПроверкаПеретаскивания"));
	ЭтаФорма.ЭлементыФормы.Товар.УстановитьДействие("ОкончаниеПеретаскивания", Новый Действие("СобытиеТоварСертификат_ОкончаниеПеретаскивания"));

	ОМ4_ПРиОткрытии(ЭтотОбъект,Товар,КонтрольнаяСуммаШапкиИсходногоДокументаПередОткрытием,КонтрольнаяСуммаТЧИсходногоДокументаПередОткрытием);
	
	//ОбновитьСверткуПоНДС  ();
	
	//ДоступностьРасценки(Склад);

	ОМ10_ЗаполнитьСписокПечФорм(ЭтотОбъект,СписокПечатныхФорм);
	
	Если ЭтаФорма.ТолькоПросмотр=Ложь Тогда
		Если ЭлементыФормы.СложнаяОтсрочка.Значение<>Справочники.СложныеОтсрочкиПлатежа.ПустаяСсылка() Тогда
			ЭлементыФормы.СложнаяОтсрочка.Доступность=Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ЭтотОбъект.Проведен=Истина ТОгда
		ЭлементыФормы.НадписьПроведения.Заголовок = "ДОКУМЕНТ ПРОВЕДЕН!!!";
		//Предупреждение("ВНИМАНИЕ! ДОКУМЕНТ УЖЕ ПРОВЕДЕН!" );
		//
		//ЭлементыФормы.КоманднаяПанель1.Доступность=Ложь;
		Если Не РольДоступна("НачПриемногоОтдела") Тогда
			ЭтаФорма.ТолькоПросмотр=Истина;
		КонецЕсли;
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность=Ложь;
		
	КонецЕсли; 
	
	
КонецПроцедуры

 
 //============================================================================ GtG ===
 Функция МожноПересчитатьСтроку  (ТекСтрДок, Колонка) 
     // Назначение:
 	// проверяет на заполнение полей ставка НДС, Цена закуп, СуммаЗакуп
 	// 
    // Возврат Истина / Ложь
 	//--------------------------------------------------------------------------------
 	СтрОшибок="";
	
	ПересчетПоЦене=0;
	
	Нельзя=0;
	
	
	Если Найти(СписокКолонокДляПересчетаПоЦене,Колонка+",")<>0 тогда
		ПересчетПоЦене=1;
	КонецЕсли;
	
	
	Если ПересчетПоЦене=1 Тогда
		Если ТекСтрДок["ЦенаЗакупБезНДС"]=0 Тогда
			Нельзя=1;
		КонецЕсли; 
	Иначе
		//----------------------------< Пересчет должен произойти по сумме >--------------------------------GtG---
		Если ТекСтрДок["СуммаЗакуп"]=0 Тогда
			Нельзя=1;
		КонецЕсли; 
	КонецЕсли;
	
	//----------------------------< Расчет всех сумм происходит от колва фактического >--------------------------------GtG--- 
	//Если  (ТекСтрДок.Количество<>0) и (ТекСтрДок.КоличествоФакт=0) Тогда
	//	ТекСтрДок.КоличествоФакт=ТекСтрДок.Количество; // не актуально ибо бойбракнедовоз
	//КонецЕсли; 	
	
	
	
	Если Нельзя=1 Тогда
		//Предупреждение("Не заполнены необходимые для пересчета поля строки документа:"+ СтрОшибок);
		Состояние("Пересчет пока невзможен, не все поля заполнены!");
		Возврат ЛОЖЬ;
	КонецЕсли; 	
	
	Возврат ИСТИНА ;
 КонецФункции
 //============================================================================ GtG ===

Функция НДСЗакупПравильный(ТекСтрокаТЧ)	// Назначение:
	// Проверяет на глюк
	// сумма НДС не должна отличаться на 0,хх от расчетного значения
	// допустимая погрешность ЛимитОтклоненияСуммПриПоступленииТовара от суммы НДС по 1-й штуке
	//============================================================================ GtG ===
	ПРеделПогрешности=Константы.ЛимитОтклоненияСуммПриПоступленииТовара.Получить();
	Если ПроверкаЗаполненияКритическиВажныхЗначенийДляСтроки  (ТекСтрокаТЧ)Тогда
		
		РасчетноеЗначениеНаВсюСумму=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(ТекСтрокаТЧ["СуммаЗакуп"],ТекСтрокаТЧ.СтавкаНДС,2);
		РасчетноеЗначениеНаВсюСумму=Окр(РасчетноеЗначениеНаВсюСумму,2);
		РасчетноеЗначение =РасчетноеЗначениеНаВсюСумму/ТекСтрокаТЧ.КоличествоФакт;
		
		РасчетноеЗначение=Окр(РасчетноеЗначение,2);
		МаксДопПогрешность=ПРеделПогрешности/100* РасчетноеЗначение;
		
		ТекЗн          =Окр(ТекСтрокаТЧ["НДСЗакуп"]/ТекСтрокаТЧ.КоличествоФакт,2); // 1 Шт
		ТекЗнНаВсюСумму=ТекСтрокаТЧ.НДСЗакуп;
		
		
		Погрешность= ТекЗн-РасчетноеЗначение;
		
		Если Погрешность<0 Тогда
			Погрешность=Погрешность*(-1);
		КонецЕсли; 
//		                            -maxD         +maxD
		//----------------------------{-----Rzn-----}--------------------------------------->
//		                     *   *       ^        ^   *      *
//                           |   |       |        |   |      |

		Если  (РасчетноеЗначение+Погрешность> РасчетноеЗначение+МаксДопПогрешность) или (РасчетноеЗначение-Погрешность< РасчетноеЗначение-МаксДопПогрешность)Тогда
			Предупреждение("Странная сумма НДС закуп.!
							|Расчетное значение НДС на всю сумму = "+РасчетноеЗначениеНаВсюСумму+"
							|Текущее значение НДС на всю сумму = "+ТекЗнНаВсюСумму+"
							|
							|Расчетное значение НДС на 1шт       = "+РасчетноеЗначение+"
							|Текущее значение НДС на 1шт       = "+ТекЗн+"
							|
							|Разница в НДС за 1шт. более допустимой: 
							| "+Погрешность+"  >  ("+ПРеделПогрешности+"% * "+РасчетноеЗначение+") = " +Окр(МаксДопПогрешность,5));
			Возврат	ЛОЖЬ;// Нужно пересчитать						
		Иначе
			ВОЗВРАТ ИСТИНА ; // ОК
		КонецЕсли; 
	КонецЕсли; 	
	ВОЗВРАТ ИСТИНА; // по умолчанию все ОК
 КонецФункции 

 
 
//============================================================================ GtG ===
Процедура ПересчетСтрокиДокумента  (ТекСтрД, ИмяКол,БезВопросов= ЛОЖЬ) Экспорт
    // Назначение:
	// Выполняет пересчет строки документа и создает партию если ее нет
	// Если партия есть то изменяет данные хранящиеся в ней.
    // 
	//--------------------------------------------------------------------------------
	//было ТекСтрД.КоличествоФакт=ТекСтрД.Количество-ТекСтрД.БойБрак-ТекСтрД.Недовоз;
    //стало
	ТекСтрД.КоличествоФакт=ТекСтрД.Количество-ТекСтрД.Недовоз;
	//----------------------------< проверка на заполнение Цены и Ставки НДС >--------------------------------GtG---
	Если МожноПересчитатьСтроку(ТекСтрД,ИмяКол) = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли; 
	
	

	//----------------------------< Пересчет по цене >--------------------------------GtG--- 
	Если Найти(СписокКолонокДляПересчетаПоЦене,ИмяКол+",")<>0 тогда
	
		ТекСтрД["ЦенаЗакуп"]=ТекСтрД["ЦенаЗакупБезНДС"]+ТекСтрД["ЦенаЗакупБезНДС"]/100*ТекСтрД.СтавкаНДС.Ставка;
		ТекСтрД["СуммаЗакуп"]=ТекСтрД["ЦенаЗакуп"]*ТекСтрД.КоличествоФАКТ; // !!! ПО ФАКТИЧЕСКОМУ КОЛВУ !!!
		ТекСтрД["НДСЗакуп"]=ТекСтрД["ЦенаЗакупБезНДС"]/100*ТекСтрД.СтавкаНДС.Ставка*ТекСтрД.КоличествоФАКТ;
		
		
		ТекСтрД["СуммаРозн"]=ТекСтрД["ЦенаРозн"]*ТекСтрД.КоличествоФАКТ; // !!! ПО ФАКТИЧЕСКОМУ КОЛВУ !!! // GtG 31.07.2008 15:00:49 при недовозе при прямом приходе в аптеку
		
			
		//----------------------------< свертка >--------------------------------GtG--- 
		//ОбновитьСверткуПоНДС  (); 
	КонецЕсли;
	
	//----------------------------< Пересчет по сумме >--------------------------------GtG---
	// Пересчет цен, только тех, сумму которых изменили
	// Причем з вопросом, пересчитать или ну его 
	Если Найти(СписокКолонокПересчетаЦЕН,ИмяКол+",")<>0 Тогда
		
		Если БезВопросов=Ложь Тогда // Спросим, надо ли пересчитать цену
			
			
				ТекстВопроса="Изменена закупочная сумма!
				|
				|Можно пересчитать закупочную цену,
				|розничную цену (по проценту наценки) и
				|розничную сумму (по розн. цене).
				|
				|Оставить как введено?";
				
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
					
					ТекСтрД.СуммаОтклоненийСНДС	= ТекСтрД.ЦенаЗакуп*(ТекСтрД.БойБрак+ТекСтрД.Недовоз);
					
					Возврат;
			КонецЕсли; 
		КонецЕсли; 	
		
		//----------------------------< Собственно пересчет Закуп цены >--------------------------------GtG---
		// и процента наценки если ето розн или опт. цена.
		//СуммаОптовая,СуммаРозн,СуммаЗакуп
		Если Найти(ИмяКол,"Закуп")<>0 тогда
			//----------------------------< Пересчет закупочной цены >--------------------------------GtG---
			// Как следствие пересчет розн  цены по  проценту наценки  и далее розн суммы
			
			
			
			
			ТекСтрД["ЦенаЗакуп"]=Окр(ТекСтрД["СуммаЗакуп"]/ТекСтрД.КоличествоФАКТ,2);
			СуммаНДСЗакуп=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке  (ТекСтрД["СуммаЗакуп"],ТекСтрД.СтавкаНДС);
			СуммаНДСЗакупНа1Шт=СуммаНДСЗакуп/ТекСтрД.КоличествоФАКТ;
			ТекСтрД["ЦенаЗакупБезНДС"]=ТекСтрД["ЦенаЗакуп"]-СуммаНДСЗакупНа1Шт;
			
			ТекСтрД["СуммаРозн"]=ТекСтрД["ЦенаРозн"]*ТекСтрД.КоличествоФАКТ; // !!! ПО ФАКТИЧЕСКОМУ КОЛВУ !!! // GtG 31.07.2008 15:00:49 при недовозе при прямом приходе в аптеку
			
			
			//----------------------------< Проверим НДС закупочный >--------------------------------GtG---
			Если НДСЗакупПравильный(ТекСтрД)= ЛОЖЬ Тогда
				// подозрительно расходится НДС
				Если Вопрос("Пересчитать НДС Закупочный?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					ТекСтрД["НДСЗакуп"]=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке  (ТекСтрД["СуммаЗакуп"],ТекСтрД.СтавкаНДС);
				КонецЕсли; 
			КонецЕсли; 
			
		
			ТекСтрД.СуммаОтклоненийСНДС	= ТекСтрД.ЦенаЗакуп*(ТекСтрД.БойБрак+ТекСтрД.Недовоз);
			
			Возврат;
		   
		КонецЕсли;                                                 
		
	КонецЕсли; 

	Если ИмяКол = "Количество" Тогда
		ТекСтрД.СуммаРозн = ТекСтрД.ЦенаРозн*ТекСтрД.КоличествоФакт;	
		ТекСтрД.НДСРозн = ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(ТекСтрД.СуммаРозн,ТекСтрД.СтавкаНДС);
	КонецЕсли;
	
	Если ИмяКол = "ЦенаРозн" Тогда
		ТекСтрД.СуммаРозн = ТекСтрД.ЦенаРозн*ТекСтрД.КоличествоФакт;
		ТекСтрД.НДСРозн = ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(ТекСтрД.СуммаРозн,ТекСтрД.СтавкаНДС);		
	КонецЕсли;
	
	Если ИмяКол = "СуммаРозн" Тогда
		ТекСтрД.ЦенаРозн = Окр(ТекСтрД.СуммаРозн/ТекСтрД.КоличествоФакт,2);
		ТекСтрД.НДСРозн = ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(ТекСтрД.СуммаРозн,ТекСтрД.СтавкаНДС);				
	КонецЕсли;
	//----------------------------< Проверка НДС Закуп при изменении вручную >--------------------------------GtG---
	Если ИмяКол="НДСЗакуп" Тогда
		
		Если НДСЗакупПравильный(ТекСтрД)= ЛОЖЬ Тогда
				// подозрительно расходится НДС
				Если Вопрос("Пересчитать НДС Закупочный?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					ТекСтрД["НДСЗакуп"]=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке  (ТекСтрД["СуммаЗакуп"],ТекСтрД.СтавкаНДС);
				КонецЕсли; 
			КонецЕсли; 
	КонецЕсли; 	
	

	
ТекСтрД.СуммаОтклоненийСНДС	= ТекСтрД.ЦенаЗакуп*(ТекСтрД.БойБрак+ТекСтрД.Недовоз);
	
//ОбновитьДанныеПартии  (ТекСтрД) ; // обновится если есть
//ОбновитьСверткуПоНДС  (); 

     

    
 КонецПроцедуры
 //============================================================================ GtG ===

 Процедура ТоварПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	 
	 	 
	 ТСД=ТекущаяСтрокаДокумента();
	 ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
	 
	 ПриИзмененииДанных();
	 
	 Если (ИмяТекКол="Количество") или (ИмяТекКол="БойБрак")  или (ИмяТекКол="Недовоз") Тогда
		 // Назначение:
		 // При изменении количества пересчитываем ВСЕ колонки по строке документа
		 // Если сумма и НДС закуп меняется кричим об этом
		 //============================================================================ GtG ===
		 
		 ИмяТекКол="Количество";
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол); // пересчет при условии изменения количества
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 //Если ИмяТекКол="КоличествоФакт" Тогда
	 //	// Назначение:
	 //	// При изменении количества пересчитываем ВСЕ колонки по строке документа
	 //	// Если сумма и НДС закуп меняется кричим об этом
	 //	//============================================================================ GtG ===
	 //	ТСД.КоличествоФакт=ТСД.Количество-ТСД.БойБрак-ТСД.Недовоз;
	 //	ПересчетСтрокиДокумента  (ТСД, ИмяТекКол); // пересчет при условии изменения количества
	 //	ВОЗВРАТ ;
	 //КонецЕсли; 

	 
	 Если ИмяТекКол="Товар" Тогда
		 // Назначение:
		 // При изменении товара изменяем партию, (владельца) если она существует или создаем новую
		 //============================================================================ GtG ===
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 Если ИмяТекКол="ЦенаЗакупБезНДС" Тогда
		 // Назначение:
		 // При измененииЗакупки без ндс пересчет всех сумм (закуп, опт, розн)
		 // если була задана сумма вручную контроль несхождения
		 // модификация партии если она существует
		 //============================================================================ GtG ===
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 Если ИмяТекКол="СтавкаНДС" Тогда
		 // Назначение:
		 // При СтавкаНДС без ндс пересчет всех сумм  (закуп, опт, розн)
		 // если була задана сумма вручную контроль несхождения
		 // модификация партии если она существует
		 //============================================================================ GtG ===
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 Если ИмяТекКол="ЦенаРозн" Тогда
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 Если ИмяТекКол="СуммаРозн" Тогда
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли;
	 
	 Если ИмяТекКол="ПроцентРознНац" Тогда
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 
	 Если ИмяТекКол="СуммаЗакуп" Тогда
		  ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 Если ИмяТекКол="НДСЗакуп" Тогда
		 ПересчетСтрокиДокумента  (ТСД, ИмяТекКол);
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 Если ИмяТекКол = "Серия" Тогда
		 ТСД.СерияСтрока =  ТСД.Серия.Наименование;
		 ТСД.СрокГодности = ТСД.Серия.СрокГодности;
	 КонецЕсли;
	 
	 
	 //============================< Резервные затычки >================================GtG===

	 Если ИмяТекКол="" Тогда
		 
		 ВОЗВРАТ ;
	 КонецЕсли; 
	 
	 
КонецПроцедуры


Процедура ПодборПоАПНажатие(Элемент)
	// Назначение:
	// Запускает процесс подбора по справочнику АП
	// Открывает форму для подбора АП
	// 
	//============================================================================ GtG ===
	Если ЭтаФорма.ТолькоПросмотр Тогда
		Предупреждение("Редактирование документа запрещено!");
		ВОЗВРАТ ;
	КонецЕсли; 
	
	
	
	КлючУник=  Новый   УникальныйИдентификатор();
	ФормаПодбора= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.ПолучитьФорму("ФормаДляПодбора","",КлючУник);
	ФормаПодбора.МножественныйВыбор= ИСТИНА;
	ФормаПодбора.ВладелецФормы=ЭтаФорма;
	ФормаПодбора.ЗакрыватьПриЗакрытииВладельца=Истина;
	ФормаПодбора.ОткрытьМодально(0);
КонецПроцедуры



//============================================================================ GtG ===
Процедура ДобавитьТоварКолво  (ВыбТовар,ВыбКолво,ВыбСерия,РезДобавления="") 
    // Назначение:
	// Добавляет строку товара в документ
	// выполняет расчет числовых полей
    // 
	//--------------------------------------------------------------------------------
	
	ПарамПоиска = Новый  Структура;
	ПарамПоиска.Вставить("Товар",ВыбТовар);
	ПарамПоиска.Вставить("Серия",ВыбСерия);
	
	
	МассивНайденныхСтрок= Товар.НайтиСтроки(ПарамПоиска);
	
	Если МассивНайденныхСтрок.Количество()=0 Тогда
		
		
			//----------------------------< Добавляем только при добавлении КоэффДобавления=1  >--------------------------------GtG---
			НоваяСтрокаВыбТовара=Товар.Добавить();
			НоваяСтрокаВыбТовара.Товар=ВыбТовар;
			НоваяСтрокаВыбТовара.Количество=ВыбКолво;
			НоваяСтрокаВыбТовара.КоличествоФакт=ВыбКолво;
			НоваяСтрокаВыбТовара.СтавкаНДС=ВыбТовар.СтавкаНДС;
			//НоваяСтрокаВыбТовара.МестоНаСкладе=ОМ1_ПолучитьМестоНаСкладе(ВыбТовар,Склад);
			НоваяСтрокаВыбТовара.ЦенаГосРегистрации=0;
			//-----------------< единица  >----------------GtG---
			НоваяСтрокаВыбТовара.ЕИТ=ОМ1_ПолучитьЕИТПоУм(ВыбТовар);
			
			Если НоваяСтрокаВыбТовара.ЕИТ.Пустая() Тогда
				 НоваяСтрокаВыбТовара.Коэфф=0;
			 Иначе
				 НоваяСтрокаВыбТовара.Коэфф=НоваяСтрокаВыбТовара.ЕИТ.К;
			КонецЕсли;
			
			ОбщСтрокаВТ=НоваяСтрокаВыбТовара;
			
			//-----------------< создаем партию  >----------------GtG--- 
			НоваяСтрокаВыбТовара.Партия=ОМ1_СоздатьПартиюТовара(ВыбТовар).Ссылка;
			//------------------<Найдем заводской штрих-код>-------------------Virus----30.05.2008
			ТХТ = "ВЫБРАТЬ
			      |	ШКПТ.Ссылка как БарКод
			      |ИЗ
			      |	Справочник.ШКПТ КАК ШКПТ
			      |ГДЕ
			      |	ШКПТ.ПометкаУдаления = ЛОЖЬ
			      |	И ШКПТ.Владелец = &ЕИТ";
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("ЕИТ",НоваяСтрокаВыбТовара.ЕИТ);
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() = 1 Тогда
				НоваяСтрокаВыбТовара.Баркод = Рез.Получить(0).БарКод;
			КонецЕсли;
			
	Иначе
		СтрокаВТ=МассивНайденныхСтрок[0];
		СтрокаВТ.Количество=СтрокаВТ.Количество+ВыбКолво;
		СтрокаВТ.КоличествоФакт=СтрокаВТ.КоличествоФакт+ВыбКолво;
        ОбщСтрокаВТ=СтрокаВТ;
	КонецЕсли; 
	
		  
	Если ОбщСтрокаВТ.ЦенаЗакупБезНДС<>0 Тогда
		// Запускаем пересчет строки по цене ибо она была задана ранее
		// Имеет смысл при добавлении товара в сущ строку
		ПересчетСтрокиДокумента  (ОбщСтрокаВТ, "ЦенаЗакупБезНДС", ИСТИНА);// пересчитывает ничего не спрашивая
	КонецЕсли; 
	
	РезДобавления=ОбщСтрокаВТ;
	
 КонецПроцедуры
 //============================================================================ GtG ===
 
 
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	// Назначение:
	// Обрабатывает событие окончания подбора из формы подбора АП
	// На вход получает ТЗ товара
	// Циклически запускает обработку добавления и расчета строки документа
	//============================================================================ GtG ===
	
	Если ТипЗнч(ЗначениеВыбора)=Тип("ТаблицаЗначений") Тогда
		Для Ы=0 По ЗначениеВыбора.Количество()-1 Цикл
			
		      СтрТЗ= ЗначениеВыбора.Получить(Ы) ;
			  
			  ВыбТовар=СтрТЗ.Товар;
			  ВыбКолво=СтрТЗ.Колво;
			  
			  ДобавитьТоварКолво(ВыбТовар,ВыбКолво,"");
		
		  КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.МестаХранения") Тогда
		Склад = ЗначениеВыбора;
		Фирма = Склад.Фирма;
	КонецЕсли;
	
КонецПроцедуры


//==========================================================GtG====
Процедура ПодтянутьРозничныеЦены ()  
	//----------------------------------
	//Назначение:
	//  Тянем Розн цены из регистра розн цен срез последних
	//  
	//  
	//  
	//----------------------------------
	
	
	СписокПартий=Товар.ВыгрузитьКолонку( "Партия");
	
	
	ТХТ="ВЫБРАТЬ
	    |	ЦеныСрезПоследних.Партия,
	    |	ЦеныСрезПоследних.ЦенаРознГТТ КАК Цена
	    |ИЗ
	    |	РегистрСведений.Цены.СрезПоследних(
	    |		,
	    |		Партия В (&СписокПартий)
	    |			И РЕГИОН = &РегионСклада) КАК ЦеныСрезПоследних";
		
		Запрос=Новый Запрос;
		Запрос.Текст=ТХТ;
		Запрос.УстановитьПараметр("СписокПартий",СписокПартий);
		Запрос.УстановитьПараметр("РегионСклада",Склад.Регион);
		
		
		ТЗ=Запрос.Выполнить().Выгрузить();	
	
	    Для каждого Стр из Товар Цикл
			
			СтрЦен=ТЗ.Найти(Стр.Партия,"Партия");
			
			Если СтрЦен = Неопределено Тогда
				Сообщить("По строке " + Стр.НомерСтроки + " не подтянулась цена розн");
			Иначе
				Стр.ЦенаРозн=СтрЦен.Цена*Стр.Коэфф; // за идеальную сферическую единицу * коэфф текущей ЕИТ
				Стр.СуммаРозн=Стр.ЦенаРозн*Стр.КоличествоФакт;
				Стр.НДСРозн=ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(Стр.СуммаРозн,Стр.СтавкаНДС);
			КонецЕсли;
		КонецЦикла;	
КонецПроцедуры	//ПодтянутьРозничныеЦены
//==========================================================GtG====


Процедура КоманднаяПанель1Расценить(Кнопка)
	
	//Если ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ Тогда
	//	Предупреждение("Запрещено расценивать накладную, сформированную на основании интернет заказа!");	
	//	Возврат;
	//КонецЕсли;
	
	ОМ6_КоманднаяПанельКнопкаРасценить(ЭтаФорма,ЭтотОбъект,Товар);
	
КонецПроцедуры


Процедура СкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
// если выбран оптовый склад, то на нем розничные цены не учитываем
// если поступление на розничный склад, то на нем нужно учесть и в рознице 
// и в оптовой 

     //ДоступностьРасценки(ВыбранноеЗначение);
	//Если ВыбранноеЗначение.ТипСклада = Перечисления.ТипыМХ.Опт Тогда
	//	ЭлементыФормы.Товар.Колонки.ЦенаРозн.Видимость=Ложь;
	//	ЭлементыФормы.Товар.Колонки.СуммаРозн.Видимость=Ложь;
	//	ЭлементыФормы.Товар.Колонки.ПроцентРознНац.Видимость=Ложь;
	//Иначе
	//	ЭлементыФормы.Товар.Колонки.ЦенаРозн.Видимость=Истина;
	//	ЭлементыФормы.Товар.Колонки.СуммаРозн.Видимость=Истина;
	//	ЭлементыФормы.Товар.Колонки.ПроцентРознНац.Видимость=Истина;		
	//КонецЕсли;
	 
	 
	 
	 //----------------------------< Проверить ячейки хранения >--------------------------------GtG---
	 //Для каждого Стч  Из Товар Цикл
	 //	Если Стч.МестоНаСкладе.Владелец<>ВыбранноеЗначение Тогда
	 //   	 СТЧ.МестоНаСкладе=ОМ1_ПолучитьМестоНаСкладе(СТЧ.Товар,ВыбранноеЗначение);
	 //	КонецЕсли;	 
	 //КонецЦикла; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	КонтрольИзмененияЗакупочныхЦенПоАП();
КонецПроцедуры

Процедура ТоварЕИТОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТС=ЭлементыФормы.ТОвар.ТекущаяСтрока;
	ТС.Коэфф= ВыбранноеЗначение.К;
КонецПроцедуры

Процедура КнопкаПечатьНажатие(Элемент)
		
	ОМ10_КнопкаПечатьНажатие (ЭтотОбъект,ЭтаФорма);
	
		
КонецПроцедуры


Процедура ТоварПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Запрещено добавлять стандартным образом
	ПодборПоАПНажатие("");
	Отказ= ИСТИНА;
	
	
КонецПроцедуры

Процедура СложнаяОтсрочкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ОтсрочкаПлатежа=ВыбранноеЗначение.Отсрочка;
КонецПроцедуры


Процедура ПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ЭлементыФормы.ОтсрочкаПлатежа.Значение=0;
	ЭлементыФормы.СложнаяОтсрочка.Значение=Справочники.Поставщики.ПустаяСсылка();
	
	Если ВыбранноеЗначение<>Справочники.Поставщики.ПустаяСсылка() Тогда
		Если ВыбранноеЗначение.ИспСложныеОтсрочки= ИСТИНА Тогда
			ЭлементыФормы.СложнаяОтсрочка.Доступность=Истина;
			
			Выб=Справочники.СложныеОтсрочкиПлатежа.Выбрать(,ВыбранноеЗначение);
			Отсрочки= новый СписокЗначений;
			Пока Выб.Следующий() Цикл
				Отсрочки.Добавить(Выб.ПолучитьОбъект());
			КонецЦикла; 
			сотст=Отсрочки.ВыбратьЭлемент("Сложная отсрочка платежа?");
			ОтсрочкаПлатежа=сотст.Значение.Отсрочка;
			СложнаяОтсрочка = сотст.Значение.Ссылка;
			
		Иначе
			ЭлементыФормы.СложнаяОтсрочка.Значение=Справочники.СложныеОтсрочкиПлатежа.ПустаяСсылка();
			ЭлементыФормы.ОтсрочкаПлатежа.Значение=ВыбранноеЗначение.ОтсрочкаПлатежа ;
			ЭлементыФормы.СложнаяОтсрочка.Доступность=Ложь;

		КонецЕсли;	
	КонецЕсли; 	
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыОК(Кнопка)
	// при нажатии этой кнопки статус меняется на 
	// обработан оператором, документ проводится и закрывается
	
	Статус=Перечисления.СтатусПрихода.ОбработанОператором;
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ЭтаФорма.Закрыть();
КонецПроцедуры


Процедура КоманднаяПанель1РасщепитьСтрокуПоСериям(Кнопка)
	// Вставить содержимое обработчика.
	
	ТСД=ТекущаяСтрокаДокумента();
	Сколько=0;
	ВвестиЧисло(Сколько,"Сколько другой серии?",10,0);
	Пока сколько>ТСД.Количество-ТСД.БойБрак-ТСД.Недовоз-1  Цикл // хотябы 1 штука должна остаться
		Предупреждение("Должна остаться хотя бы 1 штука от исходной серии!");
		ВвестиЧисло(Сколько,"Сколько другой серии?",10,0);
	КонецЦикла; 
	
	
	
	НТСД="";
	
	ДобавитьТоварКолво(ТСД.Товар,Сколько,"",НТСД); // НТСД изменится и станет новой добавленной строкой таб части 
	
	НТСД.Баркод	= ТСД.Баркод;
	НТСД.БойБрак=0;
	НТСД.ЕИТ=ТСД.ЕИТ;
	НТСД.Коэфф=ТСД.Коэфф;
	НТСД.Недовоз=0;
	НТСД.НомерГТД=ТСД.НомерГТД;
	НТСД.Сертификат=ТСД.Сертификат;
	НТСД.СтавкаНДС=ТСД.СтавкаНДС;
	НТСД.Товар=ТСД.ТОвар;
	НТСД.ЦенаГосРегистрации=ТСД.ЦенаГосРегистрации;
	
	НТСД.ЦенаЗакупБезНДС=ТСД.ЦенаЗакупБезНДС;
	НТСД.ЦенаПроизводителя=ТСД.ЦенаПроизводителя;
	НТСД.ЦенаРозн=ТСД.ЦенаРОзн;
	
	ТСД.Количество=ТСД.Количество-Сколько;
	
	ПересчетСтрокиДокумента  (ТСД,"Количество");
	ПересчетСтрокиДокумента  (НТСД,"Количество");
	
	//Товар.Сортировать("Товар");
КонецПроцедуры

Процедура ТоварПриАктивизацииСтроки(Элемент)
	Если Товар.Количество() = 0 Тогда
		КНТ = "";
		Возврат;
	КонецЕсли;
	
	КНТ=КэштоварКодНаименование.Получить(Элемент.ТекущаяСтрока.Товар);

		
КонецПроцедуры

Процедура ТоварПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// Показать короткое название товара
	
	//ТекПометкаУдаленияЕИТ=КэшСостоянияЕИТ.Получить(ДанныеСтроки.ЕИТ);
	
	//Если ТекПометкаУдаленияЕИТ=Истина ТОгда
	//	ОформлениеСтроки.ЦветФона=Новый Цвет(255,200,200);
	//КонецЕсли;
	
	 
	 Если  ОшибкиРасценки.Найти(ДанныеСтроки.Партия,"Партия")<> Неопределено ТОгда
		 //Это строка с ошибками расценки или подозрительная с точки зрения цен или сроков годности
		 ОформлениеСтроки.ЦветФона=Новый Цвет(255,155,240);
	 КонецЕсли;
	 
	 //ПричинаЗабраковки=КэшПричинЗабраковки.Получить(ДанныеСтроки.Партия);
	 //ОформлениеСтроки.Ячейки.ПричинаЗабраковки.УстановитьТекст(ПричинаЗабраковки);
	 
	 
	
КонецПроцедуры

Процедура КоманднаяПанель1Запомнить_КМХ(Кнопка)
	// Вставить содержимое обработчика.
	
	//ТЗ=Товар.Выгрузить();
	//
	//ДЛя Каждого Стр из ТЗ Цикл           
	//	
	//	АП=Стр.ТОвар.Ссылка;
	//	КМХ=Стр.МестоНаСкладе.Ссылка;
	//	
	//	Выб=Справочники.ПривязкаАПКСкладскомуМесту.Выбрать(,АП);
	//	
	//	Следующий=Ложь;
	//	Пока Выб.Следующий() Цикл
	//		Если Выб.Место.Ссылка=КМХ тогда
	//			Следующий=Истина;
	//			сОСТОЯНИЕ("УЖЕ ПРИВЯЗАН "+АП +" К "+КМХ);
	//			Прервать; // уже задан
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если Следующий=Истина Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//			
	//	ПривязкаКМХ= Справочники.ПривязкаАПКСкладскомуМесту.СоздатьЭлемент();
	//	ПривязкаКМХ.Владелец=АП;
	//	ПривязкаКМХ.Место=КМХ;
	//	ПривязкаКМХ.Склад=Склад.Ссылка;
	//	ПривязкаКМХ.Записать();
	//	сОСТОЯНИЕ("ПРИВЯЗАН "+АП +" К "+КМХ);
	//КонецЦикла;
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормы1КарточкаТОвара(Кнопка)
	// Вставить содержимое обработчика.
	ТСД=ТекущаяСтрокаДокумента  ();
	
	Карточка=Отчеты.ДвижениеТовара1.Создать();
	
	Карточка.ВыбПартия=ТСД.Партия;
	
	Карточка.ВыбСклад=Склад;
	
	Карточка.ВыбТовар=ТСД.ТОвар;
	Карточка.ВыбФирма=Фирма;
	Карточка.НачПер=НачалоГода(Дата);
	Карточка.КонПер=Дата;
	
	
	Ф=Карточка.ПолучитьФорму("Форма");
	
	Ф.Открыть();
	
	
КонецПроцедуры

Процедура ТоварСерияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТСД=ТекущаяСтрокаДокумента();
	//Если ВыбранноеЗначение.Забракована=Истина Тогда
	//	Предупреждение("ЭТА СЕРИЯ ЗАБРАКОВАНА! Все количество считаем браком!");
	//	ТСД.БойБрак=ТСД.Количество-ТСД.Недовоз;
	//	ПересчетСтрокиДокумента  (ТСД, "ЦенаЗакупБезНДС");
	//	//ВыбранноеЗначение=Справочники.Серии.ПустаяСсылка();
	//КонецЕсли;
	ТСД.Сертификат = ВыбранноеЗначение.Сертификат;
	// переехало в партию автоматом не выбирается//ТекущаяСтрокаДокумента().НомерГТД = ВыбранноеЗначение.НомерГТД;
КонецПроцедуры



Процедура ВхНомерНаклПриИзменении(Элемент)
		// Вставить содержимое обработчика.
		Введено=Элемент.Значение;
		
		ТХТ="ВЫБРАТЬ
		    |	ПоступлениеТовара.Ссылка как Поступление,
		    |	ПоступлениеТовара.ВхНомерНакл ВхНомер,
		    |	ПоступлениеТовара.Дата
		    |ИЗ
		    |	Документ.ПоступлениеТовара КАК ПоступлениеТовара
		    |ГДЕ
		    |	ПоступлениеТовара.ВхНомерНакл ПОДОБНО &ВхНомерНакл
		    |	И ПоступлениеТовара.Поставщик = &Поставщик
		    |	И ПоступлениеТовара.Дата МЕЖДУ &НачДата И &КонДАта";
			
		Запрос=Новый Запрос;
		Запрос.Текст=ТХТ;
		Запрос.УстановитьПараметр("ВхНомерНакл",Введено);
		Запрос.УстановитьПараметр("Поставщик",Поставщик);
		Запрос.УстановитьПараметр("НачДата",НачалоГода(Дата));
		Запрос.УстановитьПараметр("КонДАта",КонецГода(Дата));
		
		Рез=Запрос.Выполнить().Выгрузить();
		Если Рез.Количество()>0 Тогда
			Сообщить("В этом году уже есть документ с похожим вх. номером по этому поставщику!");
			Для каждого Стр из Рез Цикл
				Сообщить(""+Стр.Поступление+"  Вх. номер накл. "+Стр.ВхНомер);
			КонецЦикла;	 
		КонецЕсли;	
			
			
			
		
КонецПроцедуры


Процедура ПриЗакрытии()
	
	Если ЭтотОбъект.ЭтоНовый()=Истина ТОгда
		//------------------<Удаляем партии>-------------------GtG----21.11.2007
		
		Для каждого Стр из Товар Цикл
			Попытка
				Прт=Стр.Партия;
				Стр.Партия="";
				ПРТ.ПолучитьОбъект().Удалить();
			ИСключение
				// возникнет когда нехватает прав на удаление партий (а их ни у кого нет зыыыыыыыыыы!) // GtG 04.09.2008 12:57:56 
			КонецПопытки;
		КонецЦикла;	
		
	Иначе	
		
		
	КонецЕсли; 	

КонецПроцедуры

Процедура ТоварПередУдалением(Элемент, Отказ)
	//------------------<Контроль изменения серии задним числом>-------------------GtG---- 
	ТХТ="ВЫБРАТЬ
	|	СУММА(ПартииЖНВЛСОбороты.КолвоРасход) КАК КолвоРасход,
	|	ПартииЖНВЛСОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииЖНВЛС.Обороты(
	|		&ГраницаПослеДокумента,
	|		&Граница3ГодаПослеДокумента,
	|		Регистратор,
	|		Товар = &ВыбТовар
	|		    И Фирма = &ВыбФирма
	|		    И Склад = &ВыбСклад
	|		    И Партия = &ВыбПартия
	|		    ) КАК ПартииЖНВЛСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииЖНВЛСОбороты.Регистратор";
	
	
	
	ТСД=ТекущаяСтрокаДокумента();
	
	Партия=ТСД.Партия;
	
	ТриГодаВСекундах=3*365*24*60*60;
	
	Если Партия.Пустая()=Ложь тогда
		
		Запрос= Новый Запрос;
		Запрос.Текст=ТХТ;
		
		
		ГрСразуПосле=Новый Граница(Дата,ВидГраницы.Исключая); 
		ГрПо=Новый Граница(Дата+ТриГодаВСекундах,ВидГраницы.Включая);
		
		ГрСразуДО=ГрСразуПосле;// НЕ ВКЛЮЧАЯ ДОКУМЕНТ
		
		
		
		Запрос.УстановитьПараметр("ВыбТовар",ТСД.ТОвар);
		Запрос.УстановитьПараметр("ВыбФирма",Фирма);
		Запрос.УстановитьПараметр("ВыбСклад",Склад);
		Запрос.УстановитьПараметр("ВыбПартия",ТСД.Партия);
		//Запрос.УстановитьПараметр("ВыбМесто",ТСД.МестоНаСкладе);
		Запрос.УстановитьПараметр("ГраницаПослеДокумента",ГрСразуПосле);
		Запрос.УстановитьПараметр("Граница3ГодаПослеДокумента",ГрПо);
		
		ТЗ=Запрос.Выполнить().Выгрузить();
		
		Если ТЗ.Количество()>0 Тогда
			Сообщить(""+ТСД.ТОвар+"   Партия: "+Партия);
			Сообщить("УЖЕ БЫЛ РАСХОД ЭТОЙ Партии!");
			Для Каждого Стр из ТЗ Цикл
				Сообщить(""+Стр.Регистратор+" расход "+Стр.КолвоРасход);
			КонецЦикла;
			Отказ=Истина;  // отключает процесс выбора из справочника
		КонецЕсли;//ТЗ.Количество()>0 
	КонецЕсли;//Партия.Пустая()=Ложь	
	Если Отказ = Ложь Тогда
		Попытка
			ТСД.Партия.ПолучитьОбъект().Удалить();	
		Исключение
			Предупреждение("Если удалили случайно, то можно закрыть документ без сохранения!");		
		КонецПопытки; 
		
	КонецЕсли;
КонецПроцедуры

Процедура ТоварЦенаПроизводителяПриИзменении(Элемент)
	ТСД= ТекущаяСтрокаДокумента();
	МО_ПроверкаЦеныПроизводителя(ТСД);
    ПересчетСтрокиДокумента(ТСД,"Количество");
КонецПроцедуры

Процедура КоманднаяПанель1РозничныеЦеныПоРасценке(Кнопка)
	Если Склад.ТипСклада=Перечисления.ТипыМХ.Розн ТОгда
		//------------------<Затянем розничные цены по расценке>-------------------GtG----23.01.2008
		ПодтянутьРозничныеЦены();
	Иначе
		Предупреждение("На оптовом складе розничных цен нет!");
	КонецЕсли; 
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыСохранить(Кнопка)
	
	Если ЭтотОбъект.Проведен = Истина Тогда
		Предупреждение("Документ НЕ сохранен. В проведенном документе пользуйтесь кнопкой <Провести>!");
		Возврат;
	КонецЕсли;
	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите сохранить документ/изменения?",Режим,0);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2НайтиСтрокуВТаблицеТовара(Кнопка)
	Если ОшибкиРасценки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;	
	ОшПартия=ЭлементыФормы.ОшибкиРасценки.ТекущаяСтрока.Партия;
	Стр=Товар.Найти(ОшПартия,"Партия");
	ЭтаФорма.Панель.ТекущаяСтраница= ЭтаФорма.Панель.Страницы.Найти("ТаблицаТОвара");
	ЭлементыФормы.Товар.ТекущаяСтрока=Стр;
КонецПроцедуры

Процедура КоманднаяПанель3СопоставитьПозицию(Кнопка)
	
	//Если НесопоставленныйТовар.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//УсловиеФильтра = Новый СписокЗначений;
	//Для каждого стр из НесопоставленныйТовар Цикл
	//	УсловиеФильтра.Добавить(стр.Код);	
	//КонецЦикла;
	//
	//
	//Связки=Обработки.УстановкаСвязокСПоставщикомНовая.Создать();
	//Связки=Связки.ПолучитьФорму("УстановкаСвязокСПоставщикомНовая",, Новый УникальныйИдентификатор );
	//Связки.УсловиеФильтра=УсловиеФильтра;
	//Связки.Поставщик=Поставщик;
	//Связки.ОткрытьМодально();	
	
	Если НесопоставленныйТовар.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УсловиеФильтра = Новый СписокЗначений;
	//Для каждого стр из НесопоставленныйТовар Цикл
	//	УсловиеФильтра.Добавить(стр.Код);	
	//КонецЦикла;
	ТЗНесопоставленныйТовар = Новый ТаблицаЗначений;
	ТЗНесопоставленныйТовар.Колонки.Добавить("Код");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Товар");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Связан");
	ТЗНесопоставленныйТовар.Колонки.Добавить("БарКод");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Производитель");
	ТЗНесопоставленныйТовар.Колонки.Добавить("Блокировка");
	
	Для каждого стр из НесопоставленныйТовар Цикл
		НоваяСтрока = ТЗНесопоставленныйТовар.Добавить();
		НоваяСтрока.Код = стр.Код;
		НоваяСтрока.Товар = стр.Товар;
		НоваяСтрока.Связан = NULL;
		НоваяСтрока.БарКод = стр.Баркод;
		НоваяСтрока.Блокировка = Ложь;
		
		УсловиеФильтра.Добавить(стр.Код);
	КонецЦикла;
	
	
	
	Связки=Обработки.УстановкаСвязокСПоставщикомИзДокумента.Создать();
	ФормаСвязок = Связки.ПолучитьФорму("УстановкаСвязокСПоставщикомНовая",, Новый УникальныйИдентификатор );
	ФормаСвязок.УсловиеФильтра=УсловиеФильтра;
	ФормаСвязок.ТЗНесопоставленныйТовар = ТЗНесопоставленныйТовар;
	ФормаСвязок.Поставщик=Поставщик;
	ФормаСвязок.ОткрытьМодально();	
	
	
КонецПроцедуры

Процедура КоманднаяПанель3ПеренестиВНакладную(Кнопка)
	
	//Попытка
	//	ПодключитьБазу1C8(Адо);
	//Исключение
	//	Сообщить("Проверте соединение DSN=A5_Sklad в источнике данных (ODBC) пользователя! ",СтатусСообщения.Важное);
	//	Возврат;
	//КонецПопытки;
	
	ЕстьЧтоЗаписывать = Ложь;
	
	Для каждого стр из НесопоставленныйТовар Цикл
		
		Если стр.Обработана = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТовара = НайтиИПолучитьТовар(стр);
		Если СтрокаТовара = Неопределено Тогда
			Продолжить;
		Иначе
		КонецЕсли;
		
		//------------------------<Добавляем строку в ТЧ с данными>-------------------Virus----
		СтрДок = Товар.Добавить();
		СтрДок.Товар = СтрокаТовара.Товар;
		СтрДок.ЕИТ	 = СтрокаТовара.ЕдиницаПоУмолчанию;
		СтрДок.Коэфф	 = СтрокаТовара.Коэфф;
		СтрДок.Количество= стр.Количество;
		СтрДок.КоличествоФакт= Стр.Количество;
		
		//Найдем серию, если серию поставщик не прислал, то возвращаем "*" как объект серии
		СерияСсылка = НайтиИПолучитьСерию(СтрокаТовара.Товар,стр.Серия,стр.СрокГодности);
		//Найдем номер ГТД
		ГТДСсылка = НайтиИПолучитьГТД(стр.НомерГТД,стр.Страна);
		//Найдем Ставку НДС
		Если Поставщик.КонтрагентНаУСН = Истина Тогда
			СтавкаНДССсылка = СтрДок.Товар.СтавкаНДС;
		Иначе
			СтавкаНДССсылка = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",стр.СтавкаНДС);
		КонецЕсли;
		//Найдем и вернем сертификат
		СертификатСсылка = НайтиИПолучитьСертификат(СтрокаТовара.Товар,стр.Сертификат);
		//Найдем баркод и вернем
		БарКодСсылка = НайтиИПолучитьБарКод(СокрЛП(стр.БарКод),СтрокаТовара.ЕдиницаПоУмолчанию);
		
		//-----------------------< Заливаем всё найденное в ТЧ документа >---------------------------------
		СтрДок.Баркод = БарКодСсылка;
		//СтрДок.МестоНаСкладе=ОМ1_ПолучитьМестоНаСкладе(СтрокаТовара.Товар,Склад);
		СтрДок.Партия=ОМ1_СоздатьПартиюТовара(СтрокаТовара.Товар).Ссылка;
		СтрДок.СерияСтрока = стр.Серия;
		СтрДок.Серия	 = СерияСсылка;
		СтрДок.СрокГодности = стр.СрокГодности;
		СтрДок.НомерГТД = ГТДСсылка;
		СтрДок.Сертификат = СертификатСсылка;
		СтрДок.СтавкаНДС = СтавкаНДССсылка;
		СтрДок.ЦенаГосрегистрации = стр.ЦенаГосрегистрации;
		СтрДок.ЦенаПроизводителя = стр.ЦенаПроизводителя;
		СтрДок.ЦенаЗакуп = стр.ЦенаЗакуп;
		Если Поставщик.КонтрагентНаУСН = Истина Тогда
			СтрДок.ЦенаЗакупБезНДС = Окр(СтрДок.ЦенаЗакуп/(1+СтавкаНДССсылка.Ставка/100),2);
		Иначе
			СтрДок.ЦенаЗакупБезНДС = стр.ЦенаЗакупБезНДС;
		КонецЕсли;
		Если стр.Сумма > 0 Тогда
			СтрДок.СуммаЗакуп =  стр.Сумма;
		Иначе
			СтрДок.СуммаЗакуп = СтрДок.ЦенаЗакуп*СтрДок.Количество;
		КонецЕсли;
		СтрДок.НДСЗакуп = ОМ3_НДСИзСуммыПоСтавке(СтрДок.СуммаЗакуп,СтрДок.СтавкаНДС);		
		
		Если ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ Тогда
			СтрДок.ЦенаРозн = стр.ЦенаРозн;
			СтрДок.СуммаРозн = СтрДок.ЦенаРозн*СтрДок.Количество;
		КонецЕсли;
		
		// 24.10.2010 14:45 Чернов
		Попытка
			Если НЕ ПустаяСтрока(стр.Производитель) Тогда
				пл_НаименованияПроизводителей = Справочники.НаименованияПроизводителей.НайтиПоНаименованию(стр.Производитель, Истина);
				Если пл_НаименованияПроизводителей.Пустая() Тогда
					Эл = Справочники.НаименованияПроизводителей.СоздатьЭлемент();
					Эл.Наименование = стр.Производитель;
					Эл.ДатаСоздания = ТекущаяДата();
					Эл.Записать();
					СтрДок.Производитель = Эл.Ссылка;
				Иначе
					СтрДок.Производитель = пл_НаименованияПроизводителей;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		// 24.10.2010 14:45 Чернов
		СтрДок.НомерЗаказа = Стр.НомерЗаказа; 

		ЕстьЧтоЗаписывать = Истина;
		стр.Обработана = Истина;
		
	КонецЦикла;
	Если ЕстьЧтоЗаписывать = Истина Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
    //АДО.Close();
	
КонецПроцедуры

Процедура НесопоставленныйТоварПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Обработана = Ложь Тогда
		ОформлениеСтроки.ЦветФона=Новый Цвет(255,155,240);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1ВыгрузитьВАптеку(Кнопка)
	
	Если Проведен = Истина Тогда 
		Если Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Документ был ранее выгружен в аптеку. ВЫГРУЗИТЬ еще раз?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Вы действительно хотите выгрузить документ в аптеку?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыгрузитьВАптеку() = Истина Тогда
			Предупреждение("Документ выгружен!");
		Иначе
			Предупреждение("Документ НЕ выгружен!");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель1КарточкаСтроки(Кнопка)
	
	ФормаКарточки = ЭтотОбъект.ПолучитьФорму("КарточкаСтроки");
	ФормаКарточки.ВладелецФормы = ЭтаФорма;
	ФормаКарточки.ИндексТекСтроки = Товар.Индекс(ЭлементыФормы.Товар.ТекущаяСтрока);
	ФормаКарточки.Регион = Склад.Регион;
	ФормаКарточки.Проведен = ЭтотОбъект.Проведен;
	ФормаКарточки.ОткрытьМодально();
	
КонецПроцедуры

Процедура ФирмаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Склад.Фирма <> ВыбранноеЗначение) и (НЕ Склад.Пустая()) Тогда
		Предупреждение("Нельзя выбрать фирму отличную от фирмы по уже выбранной ранее аптеке!"	);
		ВыбранноеЗначение = Фирма;
	КонецЕсли;

КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	
	Если Элемент.Значение.Фирма <> Фирма Тогда
		Фирма = Элемент.Значение.Фирма;
		ДоговорПоставки = Справочники.ДоговорыПоставки.ПустаяСсылка();
	КонецЕсли;
	
	Если Элемент.Значение.ТипСклада = Перечисления.ТипыМХ.Опт Тогда
		ЭлементыФормы.Товар.Колонки.ЦенаРозн.Видимость=Ложь;
		ЭлементыФормы.Товар.Колонки.СуммаРозн.Видимость=Ложь;
		ЭлементыФормы.Товар.Колонки.ПроцентРознНац.Видимость=Ложь;
	Иначе
		ЭлементыФормы.Товар.Колонки.ЦенаРозн.Видимость=Истина;
		ЭлементыФормы.Товар.Колонки.СуммаРозн.Видимость=Истина;
		ЭлементыФормы.Товар.Колонки.ПроцентРознНац.Видимость=Истина;		
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура СохранитьРознЦены(Кнопка) Экспорт
	
	СохранитьЦеныМодульДОкумента();	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыгрузитьИЗакрыть(Кнопка)
	
	КоманднаяПанель1ВыгрузитьВАптеку("");
    ЭтаФорма.Закрыть();
	
КонецПроцедуры

Процедура ТоварПричинаЗабраковкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=Ложь;
	Если ЭлементыФормы.Товар.ТекущаяСтрока.БойБрак=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Возврат; // для записи причи7ны брака документ должен быть записан
	КонецЕсли;
	
	МЗ=РегистрыСведений.ПричиныЗабраковкиПартий.СоздатьМенеджерЗаписи();
	МЗ.ПоступлениеТовара=ЭтотОбъект.Ссылка;
	МЗ.Партия=ЭлементыФормы.Товар.ТекущаяСтрока.Партия;
	МЗ.Прочитать();
	
	Ф=МЗ.ПолучитьФорму(,ЭтаФорма,1);
	
	Ф.ПоступлениеТовара=ЭтотОбъект.Ссылка;
	Ф.Партия=ЭлементыФормы.Товар.ТекущаяСтрока.Партия;
	Ф.ДатаВнесенияЗаписи=ТекущаяДата();
	

	Ф.ОткрытьМодально();
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
		//---------------<Перед обновлением отображения кэшируем данные из базы >---------------------------// GtG // 23.05.2013 20:09:20
	// Для ускорения При выводе строки товара
	//---------------<Серия->СрокГодности>---------------------------// GtG // 23.05.2013 20:15:36
	//Рез=Товар.Выгрузить(,"Серия");
	//Рез.Свернуть("Серия","");
	//
	//ЗапросПоСрокамГодности.УстановитьПараметр("СписокСерий",Рез.ВыгрузитьКолонку("Серия"));
	//
	//Рез=ЗапросПоСрокамГодности.Выполнить();
	//
	//КэшПоСрокамГодности=Новый Соответствие;
	//Если Рез.Пустой() = Ложь Тогда
	//	Выборка=Рез.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		КэшПоСрокамГодности.Вставить(Выборка.Серия,Формат(Выборка.СрокГодности,"ДЛФ=D"));
	//	КонецЦикла;	
	//КонецЕсли;
	//
	////---------------<ЕИТ->ПометкаУдаления>---------------------------// GtG // 23.05.2013 20:16:01
	//
	//КэшСостоянияЕИТ=Новый Соответствие; // Соответствие ЕИТ---ПометкаУдаления
	//
	//Рез=Товар.Выгрузить(,"ЕИТ");
	//Рез.Свернуть("ЕИТ","");
	//
	//ЗапросПоСостояниюЕИТ.УстановитьПараметр("СписокЕИТ",Рез.ВыгрузитьКолонку("ЕИТ"));
	//
	//Рез=ЗапросПоСостояниюЕИТ.Выполнить();
	//Если Рез.Пустой()=Ложь Тогда
	//	Выборка=Рез.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		КэшСостоянияЕИТ.Вставить(Выборка.ЕИТ,Выборка.ПометкаУдаления);
	//	КонецЦикла;	
	//	
	//КонецЕсли;	
	//
	////---------------<Товар -> Код+Наименование>---------------------------// GtG // 23.05.2013 20:58:59
	//КэштоварКодНаименование = Новый Соответствие; // Соответствие Товар---Строка код+Наименование
	//
	Рез=Товар.Выгрузить(,"Товар");
	Рез.Свернуть("Товар","");

	//
	ЗапросПоКодуНаименованиюТовара.УстановитьПараметр("СписокТоваров",Рез.ВыгрузитьКолонку("Товар"));
	Рез=ЗапросПоКодуНаименованиюТовара.Выполнить();
	Если Рез.Пустой()=Ложь Тогда
		Выборка=Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			КэштоварКодНаименование.Вставить(Выборка.Товар,""+Выборка.код+" :"+СокрЛП(Выборка.Наименование));
		КонецЦикла;	
		
	КонецЕсли;	

	//
	////---------------<Партия->ПричинаЗабраковки>---------------------------// GtG // 23.05.2013 20:15:50
	//КэшПричинЗабраковки=Новый Соответствие;
	//Если ЭтоНовый()=Ложь Тогда
	//	ЗапросПричинЗабраковки.УстановитьПараметр("ПоступлениеТовара",ЭтотОбъект.Ссылка);
	//	Рез=ЗапросПричинЗабраковки.Выполнить();
	//	
	//	Если Рез.Пустой()=Ложь ТОгда
	//		Выборка=Рез.Выбрать();
	//		
	//		Пока Выборка.Следующий() Цикл
	//			КэшПричинЗабраковки.Вставить(Выборка.Партия,Выборка.ПричинаЗабраковки);
	//		КонецЦикла;	
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписи()
	Если Проведен Тогда
		ЭлементыФормы.НадписьПроведения.Заголовок = "ДОКУМЕНТ ПРОВЕДЕН!";
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)

	ТС =  ЭлементыФормы.ТоварыБезЗаказа.ТекущаяСтрока;
	Если ТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Постр = Новый ПостроительОтчета;
	Постр.Текст  = "ВЫБРАТЬ
		           |	ВЫБОР
	               |		КОГДА ЗаказПоставщику.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |			ТОГДА ""+""
	               |		ИНАЧЕ ""-""
	               |	КОНЕЦ КАК Операция,
	               |	ЗаказПоставщику.Период,
	               |	ЗаказПоставщику.Регистратор КАК Документ,
	               |	ЗаказПоставщику.Поставщик,
				   |	ЗаказПоставщику.Количество,
	               |	ЗаказПоставщику.ЦенаЗакуп КАК Цена,
	               |	ЗаказПоставщику.ЦенаРозн
	               |ИЗ
	               |	РегистрНакопления.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.Период >= &Период
	               |	И ЗаказПоставщику.Склад = &Аптека
	               |	И ЗаказПоставщику.Товар = &Товар
	               |	И ЗаказПоставщику.Поставщик = &Поставщик
	               |
				   |УПОРЯДОЧИТЬ ПО
				   |	ЗаказПоставщику.Период УБЫВ";
				   
				   Постр.Параметры.Вставить("Период",ТекущаяДата() - 60*60*24*20);
				   Постр.Параметры.Вставить("Аптека",Склад);
				   Постр.Параметры.Вставить("Поставщик",Поставщик);
				   Постр.Параметры.Вставить("Товар",ТС.Товар);
				   
				   Постр.ЗаполнитьНастройки();
				   
				   Постр.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лето);
				   
				   Условие = Постр.УсловноеОформление.Добавить("Операция","Операция");
				   Условие.Область.Добавить("Операция","Операция",ТипОбластиОформления.Поле);
				   
				   
				   Условие.Отбор.Добавить("Операция");
				   Условие.Отбор["Операция"].Использование = Истина;
				   Условие.Отбор["Операция"].Значение = "+";
				   Условие.Отбор["Операция"].ВидСравнения = ВидСравнения.НеРавно;
				   Условие.Оформление.ЦветФона.Значение = Новый Цвет(255,196,187);
				   Условие.Оформление.ЦветФона.Использование = Истина;
				   Условие.Использование = Истина;	
				   
				   Условие2 = Постр.УсловноеОформление.Добавить("Операция","Операция");
				   Условие2.Область.Добавить("Операция","Операция",ТипОбластиОформления.Поле);				   
				   Условие2.Отбор.Добавить("Операция");
				   Условие2.Отбор["Операция"].Использование = Истина;
				   Условие2.Отбор["Операция"].Значение = "+";
				   Условие2.Отбор["Операция"].ВидСравнения = ВидСравнения.Равно;
				   Условие2.Оформление.ЦветФона.Значение = Новый Цвет(176,255,196);
				   Условие2.Оформление.ЦветФона.Использование = Истина;
				   Условие2.Использование = Истина;	
				   
				   
				   Постр.ТекстЗаголовка = "Движение заказа : " + ТС.Товар;
				   Постр.Выполнить();
				   Постр.Вывести();

				   
	
КонецПроцедуры

Процедура кнОбновитьИсториюИзмененийНажатие(Элемент)
	
	 ТХТ = "ВЫБРАТЬ
	       |	ИзмененияПоступленийВАптеке.Документ,
	       |	ИзмененияПоступленийВАптеке.ИД КАК ИД,
	       |	ИзмененияПоступленийВАптеке.ДатаИзменения,
	       |	ИзмененияПоступленийВАптеке.Действие,
	       |	ИзмененияПоступленийВАптеке.ТабНомер,
	       |	ИзмененияПоступленийВАптеке.ФИО,
	       |	ИзмененияПоступленийВАптеке.НомерДокАптеки
	       |ИЗ
	       |	РегистрСведений.ИзмененияПоступленийВАптеке КАК ИзмененияПоступленийВАптеке
	       |ГДЕ
	       |	ИзмененияПоступленийВАптеке.Документ = &Документ
	       |
	       |УПОРЯДОЧИТЬ ПО
	       |	ИД";
	
		   
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Документ",Ссылка);
	ТЗИзмененийВАптеке = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ДоговорПоставкиПриИзменении(Элемент)
	
	Если Элемент.Значение.Фирма <> Фирма Тогда
		ДоговорПоставки = Справочники.ДоговорыПоставки.ПустаяСсылка();
	КонецЕсли;
	
	Если Элемент.Значение.Владелец <> Поставщик Тогда
		ДоговорПоставки = Справочники.ДоговорыПоставки.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры



СписокКолонокДляПересчетаПоЦене="ЦенаЗакупБезНДС,Количество,КоличествоФакт,СтавкаНДС,";
СписокКолонокПересчетаЦЕН="СуммаЗакуп,";
ЭлементыФормы.СложнаяОтсрочка.Доступность= ЛОЖЬ;

//---------------<Кэши>---------------------------// GtG // 23.05.2013 20:14:08

КэшПричинЗабраковки=Новый Соответствие;
ЗапросПричинЗабраковки=Новый Запрос("ВЫБРАТЬ
                                    |	ПричиныЗабраковкиПартий.Партия,
                                    |	ПричиныЗабраковкиПартий.ПричинаЗабраковки
                                    |ИЗ
                                    |	РегистрСведений.ПричиныЗабраковкиПартий КАК ПричиныЗабраковкиПартий
                                    |ГДЕ
                                    |	ПричиныЗабраковкиПартий.ПоступлениеТовара = &ПоступлениеТовара");
									
КэшПоСрокамГодности=Новый Соответствие;
//ЗапросПоСрокамГодности=Новый Запрос("ВЫБРАТЬ
//									|	Серии.Ссылка КАК Серия,
//									|	Серии.СрокГодности
//									|ИЗ
//									|	Справочник.Серии КАК Серии
//									|ГДЕ
//									|	Серии.Ссылка В(&СписокСерий)");
									
КэшСостоянияЕИТ =Новый Соответствие; // Соответствие ЕИТ---ПометкаУдаления
ЗапросПоСостояниюЕИТ=Новый Запрос("ВЫБРАТЬ
                                  |	ЕИТ.Ссылка как ЕИТ,
                                  |	ЕИТ.ПометкаУдаления
                                  |ИЗ
                                  |	Справочник.ЕИТ КАК ЕИТ
                                  |ГДЕ
                                  |	ЕИТ.Ссылка В(&СписокЕИТ)");

КэштоварКодНаименование = Новый Соответствие; // Соответствие Товар---Строка код+Наименование
ЗапросПоКодуНаименованиюТовара=Новый Запрос("ВЫБРАТЬ
                                            |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
                                            |	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
                                            |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование
                                            |ИЗ
                                            |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
                                            |ГДЕ
                                            |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка В(&СписокТоваров)");
