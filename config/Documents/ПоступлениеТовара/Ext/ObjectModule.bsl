//Перем ДБФ;
Перем НеудачныйВводНаОсновании Экспорт;

Перем ПроведениеЗакончено;


Функция Архивация(Файл)
	//Проверяем на наличие файла (на всяк случай ), потом геть его в архив, а dbf удаляем
	ВремФайл = Новый Файл(Файл);
	Если ВремФайл.Существует() Тогда
		ИмяАрхива = ВремФайл.Путь + "" + ВремФайл.ИмяБезРасширения + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный); 
		ФайлАрхива.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно); 
		ФайлАрхива.Записать();
		УдалитьФайлы(Файл);
	КонецЕсли;
	Возврат Новый Файл(ИмяАрхива);
КонецФункции

Процедура СформироватьСтруктуруДБФ(ТЗ,ДБФ)
	
	//============================< Генерим структуру DBF по ТЗ >================================GtG===
	Для Каждого Кол из ТЗ.Колонки Цикл
		//----------------------------------------------------------------------
		// Номер документа, дата и код аптеки нам в теле DBF не нужны, посему пропускаем их
		Если (Кол.Имя = "NDOC") или (Кол.Имя = "DateDoc") или (Кол.Имя = "PODRCD") Тогда
			Продолжить;
		КонецЕсли;
		//--------------------------------------------------------Virus----КОНЕЦ--28.11.2007
		
		Если Кол.ТипЗначения.СодержитТип(Тип("Дата")) ТОгда
			Т="D";
			Д=0;
			Тч=0;
		ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Число")) Тогда	
			Т="N";
			Д=15;
			Тч=2;
		ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Строка")) Тогда	
			Т="S";
			Д=150;
			Тч=0;
		Иначе
			//Сообщить("хрен знает какой тип");
		КонецЕсли;
		
		Если (Кол.Имя = "EAN13") или (Кол.Имя = "ExtParty") Тогда
			Т="S";
			Д=13;
			Тч=0;
		ИначеЕсли (Кол.Имя = "NameOKEI") или (Кол.Имя = "NDefOKEI") Тогда
			Т="S";
			Д=10;
			Тч=0;
		ИначеЕсли (Кол.Имя = "INN") Тогда
			Т="S";
			Д=12;
			Тч=0;
		ИначеЕсли (Кол.Имя = "KPP") Тогда
			Т="S";
			Д=9;
			Тч=0;
		ИначеЕсли (Кол.Имя = "NZAKSTR") Тогда
			Т="S";
			Д=20;
			Тч=0;
		КонецЕсли;
		
		
		
		
		ДБФ.поля.Добавить(Кол.Имя,Т,Д,Тч);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьФайлДБФ_для_АйДиФарма(ВремИмяФайла)
	
			ДБФ= Новый  Xbase;
			ДБФ.Кодировка = КодировкаXBase.OEM;
			ДБФ.поля.Добавить("NDOC","N",10,0);
			ДБФ.поля.Добавить("DDOC","D");
			ДБФ.поля.Добавить("idtype","N",3,0);
			ДБФ.поля.Добавить("idfirm","N",3,0);
			ДБФ.поля.Добавить("iddep","N",5,0);
			ДБФ.поля.Добавить("ndep","S",200);
			ДБФ.поля.Добавить("szwonds","N",10,2);			
			ДБФ.поля.Добавить("szwnds","N",10,2);			
			ДБФ.поля.Добавить("srwonds","N",10,2);			
			ДБФ.поля.Добавить("srwnds","N",10,2);			
			
			ДБФ.поля.Добавить("idgood","N",10,0);
			ДБФ.поля.Добавить("ngood","S",150);
			ДБФ.поля.Добавить("idprod","N",10,0);
			ДБФ.поля.Добавить("nprod","S",150);
			ДБФ.поля.Добавить("coeff","N",10,0);
			ДБФ.поля.Добавить("coeffp","N",10,0);
			ДБФ.поля.Добавить("dvalid","D");
			ДБФ.поля.Добавить("series","S",30,0);
			ДБФ.поля.Добавить("eancode","S","13");
			ДБФ.поля.Добавить("barcode","S","13");
			ДБФ.поля.Добавить("extpart","S",13);
			ДБФ.поля.Добавить("idngtd","N",10,0);
			ДБФ.поля.Добавить("nngtd","S",30);
			ДБФ.поля.Добавить("idcnt","N",10,0);
			ДБФ.поля.Добавить("ncnt","S",50);
			ДБФ.поля.Добавить("cntcode3","S",5);
			ДБФ.поля.Добавить("qntd","N",10,2);
			ДБФ.поля.Добавить("qntn","N",10,2);
			ДБФ.поля.Добавить("qntb","N",10,2);
			ДБФ.поля.Добавить("pndsz","N",15,2);
			ДБФ.поля.Добавить("pndsr","N",15,2);
			ДБФ.поля.Добавить("costreg","N",15,2);
			ДБФ.поля.Добавить("czwonds","N",15,2);
			ДБФ.поля.Добавить("czwnds","N",15,2);
			ДБФ.поля.Добавить("crwonds","N",15,2);
			ДБФ.поля.Добавить("crwnds","N",15,2);
			ДБФ.поля.Добавить("sszwonds","N",15,2);
			ДБФ.поля.Добавить("ssznds","N",15,2);
			ДБФ.поля.Добавить("sszwnds","N",15,2);
			ДБФ.поля.Добавить("ssrwonds","N",15,2);
			ДБФ.поля.Добавить("ssrnds","N",15,2);
			ДБФ.поля.Добавить("ssrwnds","N",15,2);
			
			ДБФ.поля.Добавить("idcontr","N",10,0);
			ДБФ.поля.Добавить("ncontr","S",150);				  
			ДБФ.поля.Добавить("inncontr","S",15);				  
			ДБФ.поля.Добавить("kppcontr","S",15);				  
			ДБФ.поля.Добавить("ndem","S",30);
			ДБФ.поля.Добавить("ddem","D");

			ДБФ.поля.Добавить("ndcontr","S",50);
			ДБФ.поля.Добавить("ddcontr","D");
			ДБФ.поля.Добавить("nsfcontr","S",50);
			ДБФ.поля.Добавить("dsfcontr","D");
			
			ДБФ.поля.Добавить("aidext","S",15);
			ДБФ.поля.Добавить("idsubtype","N",3);
			ДБФ.поля.Добавить("idmnn","N",10);
			ДБФ.поля.Добавить("mnnname","S",120);
			ДБФ.поля.Добавить("latname","S",100);


			
			Попытка
				ДБФ.СоздатьФайл(ВремИмяФайла);
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
				Возврат Неопределено;
			КонецПопытки;
			
	        Возврат ДБФ;	
КонецФункции
 
Процедура СохранитьЦеныМодульДокумента() Экспорт
	
		Движения.Цены.Очистить(); 			 
		Движения.Цены.Записать();
		
		Для Каждого Стр из Товар Цикл
			
			
			
			Если Стр.ЦенаРозн=0 Тогда
				#Если Клиент Тогда
					Сообщить("У товара "+Стр.Товар+" розничная цена = 0 !");
				#КонецЕсли
				Продолжить;
			КонецЕсли;	
			
			
			ЗапРС=Движения.Цены.Добавить();
			
			ЗапРС.Активность=Истина;
			ЗапРС.АП=Стр.Товар;
			
			
			ЗапРС.РЕГИОН=Склад.Регион;
						
			ЗапРС.Партия=Стр.Партия;
			ЗапРС.Период=Дата;
			ЗапРС.Регистратор=ЭтотОбъект.Ссылка;
			
			ЗапРС.ЦенаРознГТТ=Стр.ЦенаРозн/Стр.Коэфф;
			
		КонецЦикла; 
		Движения.Цены.Записать();
	
КонецПроцедуры

Процедура ОтправитьПисьмоВАптеку()
	
	МПочтец= Обработки.Почтарь;
	
	Почтец=МПочтец.Создать();
	Почтец.СписокВложений.Очистить();
	Почтец.Рассылка.Очистить();
	
	
	Почтец.Автоотправка=ИСТИНА;
	
	Почтец.Рассылка.Добавить(СокрЛП(Склад.Мэйл));
	
	НомерИнтернетЗаказа = ДокОснование.НомерЗаявкиАптеки;
	КомментарийЗаказа = ДокОснование.Комментарий;
	
	Почтец.Тема="ВНИМАНИЕ: ИНТЕРНЕТ заказ №" + НомерИнтернетЗаказа + " накладная №" + Номер;
	Почтец.ТекстПисьма=" 
	| Вам выгружена накладная №" + Номер + " от " + ВхДатаНакл + " 
	| Поставщик: " + Поставщик + "
	| Номер интернет заказа: №" + НомерИнтернетЗаказа + "
	| Клиент: " + КомментарийЗаказа + "
	|
	|------------------------------------------
	|";
	
	Почтец.функция_Послать();
	
	
	
КонецПроцедуры
		
Функция Выгрузить_в_старом_формате()
	
	КаталогФТП = Константы.КаталогФТП.Получить();
	
	ДБФ= Новый  Xbase;
	ДБФ.Кодировка = КодировкаXBase.ANSI;
	
	ТХТ = "ВЫБРАТЬ
	|	ПоступлениеТовараТовар.Ссылка.Номер КАК NDOC,
	|	ПоступлениеТовараТовар.Ссылка.Дата КАК DateDoc,
	|	ПоступлениеТовараТовар.Ссылка.Склад.Код КАК PODRCD,
	|	ПоступлениеТовараТовар.Ссылка.Поставщик.Код КАК IDPOST,
	|	ПоступлениеТовараТовар.Ссылка.Поставщик.ПолнНаименование КАК NMPOST,
	|	ПоступлениеТовараТовар.Ссылка.Поставщик.ИНН КАК INN,
	|	ПоступлениеТовараТовар.Ссылка.Поставщик.КПП КАК KPP,
	|	ПоступлениеТовараТовар.Ссылка.Поставщик.Адрес КАК ADDRESS,
	|	ПоступлениеТовараТовар.Ссылка.ВхНомерНакл КАК NDPOST,
	|	ПоступлениеТовараТовар.Ссылка.ВхДатаНакл КАК DDPOST,
	|	ПоступлениеТовараТовар.Ссылка.Склад.Код КАК PODRAPCD,
	|	ПоступлениеТовараТовар.Ссылка.Склад.Наименование КАК PODRAPNAME,
	|	ПоступлениеТовараТовар.Ссылка.НомерЗаявкиАптеки КАК NumZak,
	//|	ПоступлениеТовараТовар.Партия.Наименование КАК EAN13,
	|	ВЫБОР КОГДА ПоступлениеТовараТовар.Партия.БарКод.Наименование ЕСТЬ NULL ТОГДА
	|		ПоступлениеТовараТовар.Партия.Наименование
	|	ИНАЧЕ
	|		ПоступлениеТовараТовар.Партия.БарКод.Наименование КОНЕЦ КАК EAN13,
	|	ПоступлениеТовараТовар.Партия.Наименование КАК ExtParty,					
	|	ПоступлениеТовараТовар.ЕИТ.Код КАК CodeEIT,
	|	ПоступлениеТовараТовар.Коэфф КАК Koeff,					   
	|	ПоступлениеТовараТовар.Товар.ЕдиницаМин.К КАК KoefDefEIT,					
	|	ПоступлениеТовараТовар.Товар.ЕдиницаМин.Код КАК CodeDefEIT,
	|	ПоступлениеТовараТовар.Партия.Производитель.Код КАК CodeIzg,
	|	ПоступлениеТовараТовар.Серия.СрокГодности КАК GDate,				
	|	ПоступлениеТовараТовар.КоличествоФакт КАК Qnt,
	|	ПоступлениеТовараТовар.Партия.ЦенаПроизводителяБезНДС  КАК Price_Izg,
	|	ПоступлениеТовараТовар.ЦенаЗакуп КАК PricePost,
	|	ПоступлениеТовараТовар.СуммаЗакуп КАК SumPost,	
	|	ПоступлениеТовараТовар.ЦенаРозн КАК PriceR,
	|	ПоступлениеТовараТовар.СтавкаНДС.Ставка КАК Nds,				
	|	ПоступлениеТовараТовар.Серия.Наименование КАК Ser,
	|	ПоступлениеТовараТовар.ЕИТ.ЕдИзм.Код КАК OKEI,
	|	ПоступлениеТовараТовар.ЕИТ.ЕдИзм.Наименование КАК NameOKEI,
	|	ПоступлениеТовараТовар.Товар.ЕдиницаМин.ЕдИзм.Код КАК CodDefOKEI,
	|	ПоступлениеТовараТовар.Товар.ЕдиницаМин.ЕдИзм.Наименование КАК NDefOKEI,
	|	ПоступлениеТовараТовар.Товар.ГруппаФТГ.Код КАК CodeFTG,
	|	ПоступлениеТовараТовар.Товар.ГруппаФТГ.Наименование КАК NameFTG,
	|	ПоступлениеТовараТовар.ЕИТ.НаименованиеТовара КАК NameGood,
	|	ПоступлениеТовараТовар.Товар.ЕдиницаМин.НаименованиеТовара КАК NGoodEIT,
	|	ПоступлениеТовараТовар.Партия.Производитель.Наименование КАК NameIzg,
	|	ПоступлениеТовараТовар.Партия.НомерГТД.Наименование КАК GTD,
	|	ПоступлениеТовараТовар.Партия.НомерГТД.Страна.Наименование КАК Country,
	|	0 как NZAKSTR,
	|	ПоступлениеТовараТовар.БойБрак как QNTB
	|ИЗ
	|	Документ.ПоступлениеТовара.Товар КАК ПоступлениеТовараТовар
	|ГДЕ
	|	ПоступлениеТовараТовар.Ссылка = &Док
	|
	|";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Док",ЭтотОбъект.Ссылка);
	
	Рез=Запрос.Выполнить();
	
	ТЗ=Рез.Выгрузить();
	
	СформироватьСтруктуруДБФ(ТЗ,ДБФ);
	
	

	ВремНомДок = "";
	ВремИмяФайла = "";
	НормальноеИмяФайла = "";
	КонечныйКаталогФайла = "";
	ВремИмяФайла =ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+ "PRIHtemp.dbf"; 
	Попытка
		ДБФ.СоздатьФайл(ВремИмяФайла); // Создаем новый для обработки следующего документа
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	стр = ТЗ.Получить(0);
	Префикс = "pst";
	ВремНомДок = стр.NDOC;
	КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(Стр.PODRCD)=1,"0"+Стр.PODRCD,Стр.PODRCD) + "\In\";
	ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
	НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + СокрЛП(Стр.PODRCD) + "_" + СокрЛП(Формат(ВремНомДок,"ЧГ=0")) + "_" + СокрЛП(Лев(Стр.DateDoc,10)) +".dbf";
	
	Для Каждого Стр из ТЗ Цикл  //Пробегаем по ТЗ ...дальше будем бегать по полям в текущ. строке
		
		ДБФ.Добавить();
		Инд = 0;
		//------------------<ВАЖНО>-------------------Virus----28.11.2007
		// Обход начинаем с третьей колонки, т.к. нам они нужны только для разделения 
		// одной ТЗ на количество файлов , которое будет соответствовать кол-ву документов в ТЗ.
		// ВЫВОД: в запросе первые три поля НЕ ТРОГАТЬ !!!!!!!!!!!
		Партия = "";
		КоэффПоУмолчанию = 1;
		КодЕИТПоУмолчанию = 0;
		ТоварПоУмолчанию = "";
		Подменять = 0;
		Для к=3 По ТЗ.Колонки.Количество() - 1 Цикл  //пробегаем по значениям полей в строке
			Имя = ТЗ.Колонки.Получить(к);
			//Если Имя.Имя = "ExtParty" Тогда
			//	Партия = стр.Получить(к); 
			//КонецЕсли;
			
			Значение = стр.Получить(к);
			
			Если Имя.Имя = "IDPOST" Тогда
				Значение = Формат(100000 + Значение,"ЧГ=0");
			КонецЕсли;					
			#Если Клиент Тогда
				состояние(Значение);
			#КонецЕсли
			ДБф.УстановитьЗначениеПоля(Инд,Значение);
			Инд=Инд+1;
		КонецЦикла;
		
		Дбф.Записать();
		
	КонецЦикла;
	
	Если ДБФ.Открыта()  = Истина Тогда
		ДБФ.ЗакрытьФайл();
	КонецЕсли;
	
	Попытка
		ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла); // переименовываем в норм. вид
		Архивация(НормальноеИмяФайла);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат ложь;
	КонецПопытки;
	
	
	Если ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ Тогда
		Попытка
			ОтправитьПисьмоВАптеку();	
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	
	Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
	СтрИзм=Изменения.Добавить();
	СтрИзм.Сотрудник    = ПараметрыСеанса.ТекущийСотр;
	СтрИзм.Дата   = ТекущаяДата();
	СтрИзм.ТипИзм   = Перечисления.ДействияНадДокументами.Выгрузка;
	СтрИзм.КомментарийИзменения = "Выгружен в файл";
	Для н = 0 по 3 Цикл
		Попытка
			Записать(РежимЗаписиДокумента.Запись);	
			Прервать;
		Исключение
			#Если Клиент Тогда
				Сообщить("Повторим через 2 сек. : " + ОписаниеОшибки());
			#КонецЕсли
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	
	
КонецФункции

Функция Выгрузить_в_АйДиФарма()
	
	Слэш = "\";
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП = Константы.КаталогФТПЛинукс.Получить();
		Слэш = "/";
	Иначе
		КаталогФТП = Константы.КаталогФТП.Получить();
	КонецЕсли;
	
	КодСклада = Формат(Склад.Код,"ЧГ=0");		
	
	Префикс = "pst";
	ВремИмяФайла = "";
	НормальноеИмяФайла = "";
	КонечныйКаталогФайла = "";
	ВремИмяФайла =ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+ "pst_ids.dbf"; 
		
	КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(КодСклада)=1,"0"+КодСклада,КодСклада) + Слэш + "In" + Слэш;
	ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
	НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + СокрЛП(КодСклада) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + СокрЛП(Лев(Дата,10)) +".dbf";

			ТХТ = "ВЫБРАТЬ
			      |	Поступление.Ссылка.Номер КАК ndoc,
			      |	Поступление.Ссылка.Дата КАК ddoc,
			      |	Поступление.Ссылка.ВидПоступленияТовара.Порядок КАК idtype,
			      |	Поступление.Ссылка.Фирма.Код КАК idfirm,
			      |	Поступление.Ссылка.Склад.Код КАК iddep,
			      |	Поступление.Ссылка.Склад.Наименование КАК ndep,
			      |	Поступление.Ссылка.Поставщик.Код КАК idcontr,
			      |	Поступление.Ссылка.Поставщик.Наименование КАК ncontr,
			      |	Поступление.Ссылка.Поставщик.ИНН КАК inncontr,
			      |	Поступление.Ссылка.Поставщик.КПП КАК kppcontr,
			      |	0 КАК ndem,
			      |	ДАТАВРЕМЯ(1, 1, 1) КАК ddem,
			      |	Поступление.Ссылка.ВхНомерНакл КАК ndcontr,
			      |	Поступление.Ссылка.ВхДатаНакл КАК ddcontr,
			      |	Поступление.Ссылка.ВхНомерСФ КАК nsfcontr,
			      |	Поступление.Ссылка.ВхДатаСФ КАК dsfcontr,
			      |	Поступление.Товар.Код КАК idgood,
			      |	Поступление.Товар.Наименование КАК ngood,
			      |	Поступление.Товар.ЕдиницаПоУмолчанию.К КАК КоэффициентПоУмолчанию,
			      |	Поступление.Производитель.Код КАК idprod,
			      |	Поступление.Производитель.Наименование КАК nprod,
			      |	Поступление.ЕИТ.К КАК coeffp,
			      |	Поступление.СрокГодности КАК dvalid,
			      |	ВЫБОР
			      |		КОГДА Поступление.СерияСтрока = """"
			      |			ТОГДА ""*""
			      |		ИНАЧЕ Поступление.СерияСтрока
			      |	КОНЕЦ КАК series,
			      |	Поступление.Баркод.Наименование КАК eancode,
			      |	Поступление.Партия.Наименование КАК barcode,
			      |	Поступление.Партия.Код КАК extpart,
			      |	Поступление.НомерГТД.Код КАК idngtd,
			      |	Поступление.НомерГТД.Наименование КАК nngtd,
			      |	Поступление.НомерГТД.Страна.Код КАК idcnt,
			      |	Поступление.НомерГТД.Страна.Наименование КАК ncnt,
				  |	Поступление.НомерГТД.Страна.КодПоКлассификатору КАК cntcode3,
			      |	Поступление.КоличествоФакт КАК qntd,
				  |	Поступление.недовоз КАК qntn,
				  |	Поступление.БойБрак КАК qntb,				  
			      |	Поступление.СтавкаНДС.Ставка КАК pndsz,
			      |	Поступление.СтавкаНДС.Ставка КАК pndsr,
				  |	Поступление.ЦенаГосРегистрации КАК costreg,
			      |	Поступление.ЦенаЗакупБезНДС КАК czwonds,
			      |	Поступление.ЦенаЗакуп КАК czwnds,
			      |	Поступление.ЦенаРозн / (1 + Поступление.СтавкаНДС.Ставка / 100) КАК crwonds,
			      |	Поступление.ЦенаРозн КАК crwnds,
			      |	Поступление.СуммаЗакуп - Поступление.НДСЗакуп КАК sszwonds,
			      |	Поступление.НДСЗакуп КАК ssznds,
			      |	Поступление.СуммаЗакуп КАК sszwnds,
			      |	Поступление.СуммаРозн - Поступление.НДСРозн КАК ssrwonds,
			      |	Поступление.НДСРозн КАК ssrnds,
			      |	Поступление.СуммаРозн КАК ssrwnds,
			      |	ЕСТЬNULL(Реестр.Код, 0) КАК aidext,
			      |	ЕСТЬNULL(Поступление.Ссылка.ТипНакладной.Порядок, 0) КАК idsubtype,
			      //|	ЕСТЬNULL(Поступление.Товар.МНН.Код,0) как idmnn,
			      //|	ЕСТЬNULL(Поступление.Товар.МНН.Наименование,"""") как mnnname ,
			      |	0 как idmnn,
			      |	"""" как mnnname,
				  |	Подстрока(Поступление.Товар.МеждународноеНазвание,1,100) как latname
			      |ИЗ
			      |	Документ.ПоступлениеТовара.Товар КАК Поступление
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрДокументов КАК Реестр
			      |		ПО (Реестр.Объект = Поступление.Ссылка)
			      |ГДЕ
			      |	Поступление.Ссылка = &Ссылка
			      |
			      |УПОРЯДОЧИТЬ ПО
			      |	ngood";	
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			ТЗ=Запрос.Выполнить().Выгрузить();
			
            ТЗСумм = ТЗ.Скопировать(,"ndoc,aidext,sszwonds, sszwnds, ssrwonds, ssrwnds");
			ТЗСумм.Свернуть("ndoc,aidext","sszwonds, sszwnds, ssrwonds, ssrwnds");
			
			СводныеСуммы = ТЗСумм.Получить(0);
			
			Если СводныеСуммы.aidext = 0 Тогда
				
				Результат = Обмен.СоздатьЗаписьВРеестре(Ссылка,111);
				
				Если НЕ Результат = Неопределено Тогда
					aidext = Результат.НашАид;
				Иначе
					#Если Клиент Тогда
						Сообщить("Не удалось создать запись в реестре документов. Документ не может быть выгружен");
					#КонецЕсли
					Возврат Ложь;
				КонецЕсли;
				
			Иначе
				aidext = СводныеСуммы.aidext;
			КонецЕсли;
			
			ДБФ = СоздатьФайлДБФ_для_АйДиФарма(ВремИмяФайла);
			Если ДБФ = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для каждого стр из ТЗ Цикл
				ДБФ.Добавить();
				ЗаполнитьЗначенияСвойств(ДБФ,стр);
					
				Если  стр.coeffp = 1  Тогда
					Если  стр.КоэффициентПоУмолчанию = 1 Тогда
						ДБФ.coeff		= 1; //если даю упаковку, то здесь коэфф разбивки
						ДБФ.coeffp		= 1; 
					Иначе
						ДБФ.coeff		= стр.КоэффициентПоУмолчанию; //если оприходовали мелкими, но товар разбивочный, то здесь 1
						ДБФ.coeffp		= стр.КоэффициентПоУмолчанию; //тут коэффициент для приведения
					КонецЕсли;
                Иначе
					ДБФ.coeff		= стр.coeffp; //если даю упаковку, то здесь коэфф разбивки
					ДБФ.coeffp		= 1; 
				КонецЕсли;
				ДБФ.extpart		= Формат(стр.extpart,"ЧГ=0");	
				
				
				ДБФ.aidext			= Формат(aidext,"ЧГ=0");
				
				ДБФ.szwonds		= СводныеСуммы.sszwonds;
				ДБФ.szwnds		= СводныеСуммы.sszwnds;
				ДБФ.srwonds		= СводныеСуммы.ssrwonds;
				ДБФ.srwnds		= СводныеСуммы.ssrwnds;
				
				ДБФ.cntcode3	= Формат(стр.cntcode3,"ЧЦ=3; ЧВН=");
				
				ДБФ.Записать();
				
			КонецЦикла;
			
			
			Если ДБФ.Открыта()  = Истина Тогда
				ДБФ.ЗакрытьФайл();
			КонецЕсли;
			
			Попытка
				ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла); // переименовываем в норм. вид
				Архивация(НормальноеИмяФайла);
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
				#Если Сервер Тогда
					МЗ = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
					МЗ.Объект = "Выгрузка прихода";
					МЗ.ДатаОшибки = ТекущаяДата();
					МЗ.КодАптеки = КодСклада;
					МЗ.ОписаниеОшибки = ОписаниеОшибки();
					МЗ.МестоВозникновения = ""+ВремИмяФайла;
					МЗ.Записать();		
				#КонецЕсли
				Попытка
					УдалитьФайлы(ВремИмяФайла);
				Исключение
				КонецПопытки;
				Возврат Ложь;
			КонецПопытки;	
			
		Если ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ Тогда
			Попытка
				ОтправитьПисьмоВАптеку();	
			Исключение
			
			КонецПопытки;
		КонецЕсли;
	
	
	Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
	СтрИзм=Изменения.Добавить();
	СтрИзм.Сотрудник    = ПараметрыСеанса.ТекущийСотр;
	СтрИзм.Дата   = ТекущаяДата();
	СтрИзм.ТипИзм   = Перечисления.ДействияНадДокументами.Выгрузка;
	СтрИзм.КомментарийИзменения = "Выгружен в файл (новый формат)";
	Для н = 0 по 3 Цикл
		Попытка
			Записать(РежимЗаписиДокумента.Запись);	
			Прервать;
		Исключение
			#Если Клиент Тогда
				Сообщить("Повторим через 2 сек. : " + ОписаниеОшибки());
			#КонецЕсли
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	

	
КонецФункции

Функция ВыгрузитьВАптеку() Экспорт
	
	Если Склад.Делфи = Истина Тогда
		Результат = Выгрузить_в_АйДиФарма();
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
	//ПереместитьФайл(Архив.ПолноеИмя,КонечныйКаталогФайла + "" +Архив.Имя);
	
	
	
КонецФункции
 
//==========================================================GtG====
Функция АвтоматическаяРасценка_Успешно()  Экспорт
	//==================<Автоматическая расценка прихода товара>===================GtG====21.11.2008
	// запускается 1 раз при первичном проведении документа.
	// При возникновении ошибок при расценке- дальнейшее проведение и расценка только вручную
	Успешно=Истина;
	Если ОМ6_ЕстьЦеныПоРасценке(Ссылка)=Ложь Тогда
		ОМ6_ЗапуститьАвтоматическуюРасценкуДокумента (ЭтотОбъект);
		ЭтотОбъект.Прочитать();
		Если ОшибкиРасценки.Количество()>0 Тогда
			#Если Клиент Тогда 
				Предупреждение(""+Ссылка+" Есть ошибки по расценке товара! Документ не проводится!",2);
			#КонецЕсли	
			Успешно=Ложь;
			//Для каждого стр из ОшибкиРасценки Цикл
			//	Если стр.Партия.Пустая() Тогда
			//		  //пох
			//	Иначе
			//		Предупреждение(""+ЭтотОбъект+" Есть ошибки по расценке товара! Документ не проводится!",3);
			//		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			//		Успешно=Ложь;
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	Возврат Успешно;
КонецФункции	//АвтоматическаяРасценка

//==========================================================GtG====
Процедура РасчетРозничнойСуммыПриНаличииОтклоненийВКоличестве (СуммаОтклонений)  
	//----------------------------------
	//Назначение:
	//  Пересчет розничной суммы документа
	//  при наличии отклонений в количестве товара
	//  
	//  Чтобы не возникало косяков с товарным отчетом
	//----------------------------------
	
	Если СуммаОтклонений=0 Тогда
		Возврат; // чтобы лишний раз не нагружать систему
	КонецЕсли;	
	
	Для каждого Стр из товар Цикл
		Если Склад.ТипСклада = Перечисления.ТипыМХ.Розн Тогда
			Стр.КоличествоФакт = Стр.Количество - стр.Недовоз;
		КонецЕсли;
		
		Стр.СуммаРозн=Стр.ЦенаРозн*(Стр.КоличествоФакт);
		Стр.НДСРозн=ОМ3_НДСИзСуммыПоСтавке(Стр.СуммаРозн,стр.СтавкаНДС);

	КонецЦикла;	
	
КонецПроцедуры	//РасчетРозничнойСуммыПриНаличииОтклоненийВКоличестве
//==========================================================GtG====


 Процедура МО_ОбновитьДанныеСерии  (ТекСтрДок)  экспорт
    // Назначение:
	// Обновляает данные партии в справочнике партий
	// Партия должна быть
	//--------------------------------------------------------------------------------
	ТекСерия = ТекСтрДок.Серия; 
	Если ТекСерия.Пустая() Тогда
		Возврат; 
	КонецЕсли;
	
	Если ТекСерия.Сертификат <> ТекСтрДок.Сертификат или ТекСерия.БарКод <> ТекСтрДок.Баркод Тогда
		Серия=ТекСерия.ПолучитьОбъект(); // ибо ссылка
		Серия.Сертификат=ТекСтрДок.Сертификат;
		Серия.Баркод=ТекСтрДок.Баркод;
		Серия.Записать(); // ибо объект
	КонецЕсли;
	
 КонецПроцедуры


 //============================================================================ GtG ===
 Функция ПроверкаНаНули  (Парам) 
     // Назначение:
 	// Проверяет строки товара на наличие строк с нулевыми значениями
 	// 
     // 
 	//--------------------------------------------------------------------------------
	Для Каждого ТекСтрокаТовар Из Товар Цикл
		//Пропускаем проверку для решения проблемы с ЖЗВЛС апрель 2010
		Если (ТекСтрокаТОвар.Количество = ТекСтрокаТОвар.БойБрак) и (ТекСтрокаТОвар.БойБрак = ТекСтрокаТовар.Недовоз) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрокаТовар[Парам]=0 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЦикла; 	
	
	Возврат Истина;
 КонецФункции
 //============================================================================ GtG ===
 
 
 Процедура МО_ПроверкаЦеныПроизводителя(ТСД) Экспорт
	 //цена ропизводителя не должна превышать цены госрегистрации (если они обе есть)
		Если ТСД.ЦенаГосРегистрации<>0 и ТСД.ЦенаПроизводителя<>0 Тогда
			Если ТСД.БойБрак+ТСД.Недовоз<ТСД.Количество ТОгда
				Если ТСД.ЦенаПроизводителя>ТСД.ЦенаГосРегистрации Тогда
					#Если Клиент Тогда
						Сообщить("Строка №"+ТСД.НомерСТРОКИ +"   "+ТСД.Товар+" --  цена производителя больше цены госрегистрации! Все в брак, на остатки не приходуем!",СтатусСообщения.Внимание);
					#КонецЕсли
					ТСД.БойБрак=ТСД.Количество;
					ТСД.Недовоз=0;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьЗаказОбычногоТовара(ТаблицыДвижений)
	
	
		Таблица= ТаблицыДвижений.ЗаказПоставщику;
		
		Если Таблица.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Движения.ЗаказПоставщику.Записывать = Истина;
		Движения.ЗаказПоставщику.Загрузить(Таблица);
	
	//МассивИсх=Товар.ВыгрузитьКолонку("Товар");
		//Массив= Новый  Массив;
		//
		//Для каждого ЭлемМасс Из МассивИсх Цикл
		//	Массив.Добавить(ЭлемМасс);
		//КонецЦикла; 
		//
		//
		//СписокТоваровТекстом=ЗначениеВСтрокуВнутр(Массив);
		//
		//ОстаткиВЗаказе = ОМ21_ЗаказыПоставщикам.ОМ21_ПолучитьОстаткиТоварыВПутиПоСпискуТоваров(Склад,Дата,СписокТоваровТекстом,Поставщик);
		////ОстаткиВЗаказе =ОМ13_ПолучитьОстаткиПоСписку_ДляЗаказа(Дата,СписокТоваровТекстом,Поставщик,Склад);
		////ОстаткиВЗаказе.ВыбратьСтроку();
		//Если ОстаткиВЗаказе.Количество() > 0 Тогда
		//	ТЗ = Товар.Выгрузить(,"Товар,КоличествоФакт,ЦенаЗакуп,ЦенаРозн");
		//	ТЗ.Свернуть("Товар,ЦенаЗакуп,ЦенаРозн","КоличествоФакт"); // GtG 15.01.2008 10:58:31  Количество заменено на количествоФакт
		//	Фильтр = Новый Структура;
		//	
		//	Для Каждого ТекСтрокаТовар Из ТЗ Цикл
		//		
		//		Если ТекСтрокаТовар.КоличествоФакт = 0 Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		Фильтр.Очистить();
		//		Фильтр.Вставить("Товар",ТекСтрокаТовар.Товар);
		//		Строки = ОстаткиВЗаказе.НайтиСтроки(Фильтр);
		//		Для каждого СтрокаЗаказа из Строки Цикл
		//			
		//			//Если Строки.Количество()>0 Тогда
		//			Движение = Движения.ЗаказПоставщику.Добавить();
		//			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		//			Движение.Период = Дата;
		//			Движение.Поставщик = Поставщик;
		//			Движение.Склад = Склад;
		//			Движение.Товар = ТекСтрокаТовар.Товар;
		//			Движение.Количество = ТекСтрокаТовар.КоличествоФакт; //СтрокаЗаказа.КолвоОстаток;
		//			Движение.ДатаЗаказа = СтрокаЗаказа.ДатаЗаказа;
		//			Движение.ЦенаЗакуп = ТекСтрокаТовар.ЦенаЗакуп;
		//			Движение.ЦенаРозн = ТекСтрокаТовар.ЦенаРозн;					
		//			//Движения.ЗаказПоставщику.Записать();
		//			//КонецЕсли;
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗакрытьИндивидуальныеЗаказы(ТаблицыДвижений)
	
	
	Таблица= ТаблицыДвижений.ИндивидуальныеЗаказы;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИндивидуальныеЗаказы.Записывать = Истина;
	Движения.ИндивидуальныеЗаказы.Загрузить(Таблица);	
	//Если ИндивидуальныеЦены.Количество() > 0 Тогда
	//	Для каждого СтрокаЗаказа из ИндивидуальныеЦены Цикл
	//		
	//		Движение = Движения.ИндивидуальныеЗаказы.Добавить();
	//		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	//		Движение.Период			= Дата;
	//		Движение.Поставщик		= Поставщик;
	//		Движение.Склад			= Склад;
	//		Движение.Товар			= СтрокаЗаказа.Товар;
	//		Движение.Количество		= СтрокаЗаказа.Количество;
	//		Движение.ДатаЗаказа		= СтрокаЗаказа.ДатаЗаказа;
	//		Движение.ЦенаРозн		= СтрокаЗаказа.ЦенаРозн;	
	//		
	//	КонецЦикла;			
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаЗаполнение(Отказ)
	
	 Если ДоговорПоставки.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран договор поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	Иначе
		Если ДоговорПоставки.Фирма <> Фирма Тогда
		 	#Если Клиент Тогда
			 	Сообщить("Несоответствие фирмы накладной и фирмы договора поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 	#КонецЕсли	
			Отказ = Истина;
			Возврат;			
		КонецЕсли;
		
		Если ДоговорПоставки.Владелец <> Поставщик Тогда
		 	#Если Клиент Тогда
			 	Сообщить("Несоответствие поставщика накладной и владельца договора поставки! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 	#КонецЕсли	
			Отказ = Истина;
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	 Если ВидПоступленияТовара.Пустая() Тогда
		 #Если Клиент Тогда
			 Сообщить("Не выбран вид поступления товара! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	 Если ПустаяСтрока(СокрЛП(ВхНомерНакл)) = Истина  Тогда
		 #Если Клиент Тогда
		 	Сообщить("Входящий номер накладной поставщика не должен быть пустым! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли
		 Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	 Если ВхДатаНакл = ДАТА(1,1,1)  Тогда
		 #Если Клиент Тогда
		 	Сообщить("Входящая дата поставщика не должна быть пустой! Документ не проведен",СтатусСообщения.ОченьВажное);	 
		 #КонецЕсли
		 Отказ = Истина;
		Возврат;
	 КонецЕсли;		
	 
	 Для каждого стр из НесопоставленныйТовар Цикл
		 Если стр.Обработана=Ложь Тогда
			 #Если Клиент Тогда
				 Сообщить("В документе есть строки с несопоставленным товаром. Проведение запрещено",СтатусСообщения.ОченьВажное);
			#КонецЕсли	 
			 Отказ = истина;
			 Возврат;
		 КонецЕсли;
	 КонецЦикла;
	 
	//==================<БЛОКИРУЕМ ПРОВЕДЕНИЕ ПОЛНОСТЬЮ НЕДОВЕЗЕННОГО/бракованного ДОКУМЕНТА>===================GtG====19.03.2008
	//Если ТОвар.Итог("СуммаЗакуп")=0 ТОгда
	//	#Если Клиент Тогда 
	//		ПРедупреждение("Закупочная сумма документа нулевая. Такой документ не проводится!
	//		|Если это недовоз - требуйте от поставщика новые документы на довезенный товар.
	//		|Дата документа довоза должна быть датой ФАКТИЧЕСКОЙ поставки товара.",10);
	//	#КонецЕсли
	//		ПроведениеЗакончено=Истина;

	//		Отказ=Истина;
	//		ВОЗВРАТ ;
	//КонецЕсли;	


	НайденнаяСтрока = Товар.Найти(0,"Коэфф");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с коэффициентами =0!
					|Это недопустимо!
					|Очевидно проблемы с единицами товаров.");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;


	Если ПроверкаНаНули("ЦенаЗакупБезНДС")=Ложь Тогда
		// Есть строки с 0-ми
		#Если Клиент Тогда
			Сообщить("В документе есть строки без закуп. цены!
			|Это недопустимо!
			|Укажите цену закупочную!");
		#КонецЕсли
		ПроведениеЗакончено=Истина;

		Отказ = ИСТИНА;
		ВОЗВРАТ ;
	КонецЕсли;
	
	//НайденнаяСтрока = Товар.Найти(Справочники.Серии.ПустаяСсылка(),"Серия");
	НайденнаяСтрока = Товар.Найти("","СерияСтрока");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть товар БЕЗ СЕРИЙ!!!
				|Это недопустимо!
				|Укажите серию, или используйте срок годности, если ее нет .");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;
		
	//Для Каждого ТекСтрокаТовар Из Товар Цикл
	//	Если ТекСтрокаТовар.Серия.Пустая() Тогда
	//		#Если Клиент Тогда
	//			Сообщить("В документе есть товар БЕЗ СЕРИЙ!!!
	//			|Это недопустимо!
	//			|Укажите серию, или используйте срок годности, если ее нет .");
	//			ПроведениеЗакончено=Истина;
	//		#КонецЕсли
	//		Отказ = ИСТИНА;
	//		ВОЗВРАТ ;
	//	КонецЕсли;
	//КонецЦикла; 
	
	
	
		
	
	
	Если Склад.ТипСклада = Перечисления.ТипыМХ.Розн и ВидПоступленияТовара <> Перечисления.ВидыПоступленияТоваров.Подарки Тогда
		Если ПроверкаНаНули("ЦенаРозн")=Ложь Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с Ценой розничной =0!
				|Это недопустимо!
				|Недорасцененные документы не проводятся!
				|");
			#КонецЕсли
			ПроведениеЗакончено=Истина;

			Отказ = ИСТИНА;
			ВОЗВРАТ ;
		КонецЕсли;	
	КонецЕсли;
	
	 
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	
	Если Поставщик.ПринадлежитГруппеКомпаний Тогда
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОпераций.ПоступлениеТМЦОтСобственныхЮрЛиц);
	Иначе
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОпераций.ПоступлениеТМЦ);
	КонецЕсли;
	
	Запрос.Текст = "
					//0  ВТТовары
	               |
				   |ВЫБРАТЬ
	               |	ТЧ.Товар,
	               |	ТЧ.Ссылка.Склад КАК Склад,
	               |	ТЧ.Партия,
	               |	ТЧ.СтавкаНДС,
	               |	ТЧ.Ссылка.Склад.Фирма КАК Фирма,
	               |	ТЧ.КоличествоФакт * ТЧ.Коэфф КАК КолВо,
	               |	ТЧ.СуммаЗакуп КАК СуммаЗакупСНДС,
	               |	ТЧ.НДСЗакуп КАК СуммаНДСЗакуп,
	               |	ВЫБОР
	               |		КОГДА ТЧ.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн)
	               |			ТОГДА ТЧ.СуммаРозн
	               |		ИНАЧЕ ТЧ.СуммаЗакуп
	               |	КОНЕЦ КАК СуммаРознСНДС,
	               |	ВЫБОР
	               |		КОГДА ТЧ.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн)
	               |			ТОГДА ТЧ.НДСРозн
	               |		ИНАЧЕ ТЧ.НДСЗакуп
	               |	КОНЕЦ КАК СуммаРознНДС,
	               |	&ВидОперации КАК ВидОперации,
	               |	ТЧ.ЦенаЗакуп,
	               |	ТЧ.ЦенаРозн,
	               |	ТЧ.КоличествоФакт
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.ПоступлениеТовара.Товар КАК ТЧ
	               |ГДЕ
	               |	ТЧ.Ссылка = &Ссылка и ТЧ.КоличествоФакт > 0
	               |;
	               |
				   //1 ТЗДляЗАказа
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Товар,
	               |	СУММА(ВТТовары.КоличествоФакт) КАК КоличествоФакт,
	               |	ВТТовары.ЦенаЗакуп,
	               |	ВТТовары.ЦенаРозн
	               |ПОМЕСТИТЬ ТЗДляЗаказа
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.Товар,
	               |	ВТТовары.ЦенаЗакуп,
	               |	ВТТовары.ЦенаРозн
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВТТовары.КоличествоФакт) > 0
	               |;
	               |
				   //2 Регистр Партии
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Товар,
	               |	ВТТовары.Склад,
	               |	ВТТовары.Партия,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.КолВо,
	               |	ВТТовары.СуммаЗакупСНДС,
	               |	ВТТовары.СуммаНДСЗакуп,
	               |	ВТТовары.СуммаРознСНДС,
	               |	ВТТовары.СуммаРознНДС,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) как ВидДвижения,
				   |	&Дата как Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |;
	               |
				   //3  Регистр СтавокНДС
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Склад,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) как ВидДвижения,
				   |	&Дата как Период,				   
	               |	СУММА(ВТТовары.СуммаЗакупСНДС) КАК СуммаЗакупСНДС,
	               |	СУММА(ВТТовары.СуммаНДСЗакуп) КАК СуммаНДСЗакуп,
	               |	СУММА(ВТТовары.СуммаРознСНДС) КАК СуммаРознСНДС,
	               |	СУММА(ВТТовары.СуммаРознНДС) КАК СуммаРознНДС
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.Склад,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
				   |	&Дата				   
	               |;
	               |
				   //4 Регистр Заказов
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗДляЗаказа.Товар,
	               |	ТЗДляЗаказа.КоличествоФакт КАК Количество,
	               |	ТЗДляЗаказа.ЦенаЗакуп,
	               |	ТЗДляЗаказа.ЦенаРозн,
	               |	&Дата КАК Период,
	               |	ЗаказПоставщикуОстатки.Поставщик,
	               |	ЗаказПоставщикуОстатки.Склад,
	               |	ЗаказПоставщикуОстатки.ДатаЗаказа,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) как ВидДвижения
	               |ИЗ
	               |	ТЗДляЗаказа КАК ТЗДляЗаказа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказПоставщику.Остатки(
	               |				&Дата,
	               |				Поставщик = &Поставщик
	               |					И Склад = &Склад) КАК ЗаказПоставщикуОстатки
	               |		ПО ТЗДляЗаказа.Товар = ЗаказПоставщикуОстатки.Товар
	               |ГДЕ
	               |	НЕ ЗаказПоставщикуОстатки.ДатаЗаказа ЕСТЬ NULL 
	               |;
	               |
				   //5  Регистр Индивидуальных цен
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Склад КАК Склад,
	               |	&Поставщик КАК Поставщик,
	               |	&дата КАК Период,
	               |	ПоступлениеТовараИндивидуальныеЦены.Товар,
	               |	ПоступлениеТовараИндивидуальныеЦены.ДатаЗаказа,
	               |	ПоступлениеТовараИндивидуальныеЦены.ЦенаРозн,
	               |	ПоступлениеТовараИндивидуальныеЦены.Количество,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) как ВидДвижения
	               |ИЗ
	               |	Документ.ПоступлениеТовара.ИндивидуальныеЦены КАК ПоступлениеТовараИндивидуальныеЦены
	               |ГДЕ
	               |	ПоступлениеТовараИндивидуальныеЦены.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТЗДляЗаказа";
				   
			Результат = Запрос.ВыполнитьПакет();	   
			ТаблицыДвижений.Вставить("ПартииЖНВЛС",				                        Результат[2].Выгрузить());
			ТаблицыДвижений.Вставить("ОстаткиПоСтНДСПоСкладам",		                    Результат[3].Выгрузить());
			ТаблицыДвижений.Вставить("ЗаказПоставщику",                          		Результат[4].Выгрузить());
			ТаблицыДвижений.Вставить("ИндивидуальныеЗаказы",                         	Результат[5].Выгрузить());
				   
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)
	 
	 
	 ПроведениеЗакончено=ложь;
	 
	 
	 ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ);
	 
	 Если Отказ = Истина Тогда
		 #Если Клиент Тогда
			 Сообщить("Не удалось обновить данные в партиях документа. Документ непроведен",СтатусСообщения.ОченьВажное);
		 #КонецЕсли		
		 Возврат;
	 КонецЕсли;
	 
	 //----------------------------< ВАЖНЫЙ МОМЕНТ! >--------------------------------GtG---
	 // Автоматически удалять движения нельзя! ИБО когда происходит расценка непроведенного документа
	 // она накручивает на док движения регистра сведений, а при автоматическом
	 // удалении движений всю эту расценку к херам сносит.
	 //
	 // ПОЭТОМУ: удаляем движения регистров накопления вручную, а регистры сведений не трогаем
	 //-------------------------------------------------------------------------------GtG---
	//Если ЭтотОбъект.Проведен = Ложь Тогда
	//	Дата = ОМ3_ПоследняяДата(Дата,"ПоступлениеТовара");	 
	//	Записать(РежимЗаписиДокумента.Запись); 
	//КонецЕсли;
	//============================< Очистка рагистров накопления >================================GtG===
	Движения.Взаиморасчеты.Очистить(); 			 //Движения.Взаиморасчеты.Записать();
	Движения.ПартииЖНВЛС.Очистить();             //Движения.ПартииЖНВЛС.Записать();	
	Движения.ОстаткиПоСтНДСПоСкладам.Очистить(); //Движения.ОстаткиПоСтНДСПоСкладам.Записать();

	//============================================================================================GtG===
	
	//==================<Закрытие регистра Заказа поставщику>===================Virus====13.11.2007
	Движения.ЗаказПоставщику.Очистить(); Движения.ЗаказПоставщику.Записать();
	Движения.ИндивидуальныеЗаказы.Очистить(); Движения.ИндивидуальныеЗаказы.Записать();
	
	ТаблицыДвижений = Новый Структура();
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	
	Если Склад.ТипСклада = Перечисления.ТипыМХ.Розн  Тогда 
		
		
		ЗакрытьЗаказОбычногоТовара(ТаблицыДвижений);
		ЗакрытьИндивидуальныеЗаказы(ТаблицыДвижений);
		
		//================================================Virus====КОНЕЦ==13.11.2007
	КонецЕсли;  // Закрываем регистр только если приход на оптовый склад
	 
	
	Таблица= ТаблицыДвижений.ПартииЖНВЛС;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ПартииЖНВЛС.Записывать = Истина;
	Движения.ПартииЖНВЛС.Загрузить(Таблица);	
	
	
	Таблица= ТаблицыДвижений.ОстаткиПоСтНДСПоСкладам;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ОстаткиПоСтНДСПоСкладам.Записывать = Истина;
	Движения.ОстаткиПоСтНДСПоСкладам.Загрузить(Таблица);
	
	
	ЕстьПартионныеТовары= ЛОЖЬ;
	
	
	//закоментил virus 08.12.2013
	//РасчетРозничнойСуммыПриНаличииОтклоненийВКоличестве(ТОвар.Итог("СуммаОтклоненийСНДС"));  
	
	ПроведениеЗакончено=Истина;	
	
	//----------------------------< По регитсру учета по каждому товару >--------------------------------GtG---
	// приход в регистры: 
	//                    ПартииЖНВЛС
	//                    ОстаткиПоСтНДСПоСкладам
	//                    Взаиморасчеты
	//---------------------------------------------------
	//////БракСумма10 = 0;
	//////БракСумма18	= 0;
	//////БракНДС10	= 0;
	//////БракНДС18	= 0;

	//////Для Каждого ТекСтрокаТовар Из Товар Цикл
	//////	
	//////
	//////	//ОМ1_ОбновитьДанныеПартии  (ТекСтрокаТовар, ЭтотОбъект);//МО_ОбновитьДанныеПартии  (ТекСтрокаТовар); // прицепить к партии серию
	//////	//МО_ОбновитьДанныеСерии 	 (ТекСтрокаТовар); // прицепить к серии сертификат
	//////		
	//////	//Если (ТекСтрокаТовар.КоличествоФакт=0) И (ТекСтрокаТовар.БойБрак = 0) ТОгда
	//////	//	#Если Клиент Тогда
	//////	//		Сообщить("НУЛЕВОЕ количество! "+ТекСтрокаТовар.Товар+" на остатки не придет!");
	//////	//	#КонецЕсли	
	//////	//	Продолжить;
	//////	//КонецЕсли;
	//////	
	//////	// Запись в регистр нормальной суммы + брак
	//////	ДвижениеП = Движения.ПартииЖНВЛС.Добавить();
	//////	ДвижениеП.ВидДвижения=ВидДвиженияНакопления.Приход;
	//////	ДвижениеП.Период = Дата;
	//////	ДвижениеП.Товар = ТекСтрокаТовар.Товар;
	//////	ДвижениеП.Склад = Склад;
	//////	ДвижениеП.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
	//////	ДвижениеП.пАРТИЯ = ТекСтрокаТовар.Партия ;
	//////	ДвижениеП.Фирма= Склад.Фирма;
	//////	ДвижениеП.ВидОперации=Перечисления.ВидыОпераций.ПоступлениеТМЦ;
	//////
	//////	
	//////	//ДвижениеП.Колво = (ТекСтрокаТовар.КоличествоФакт + ТекСтрокаТовар.БойБрак)*ТекСтрокаТовар.Коэфф;
	//////	ДвижениеП.Колво = ТекСтрокаТовар.КоличествоФакт*ТекСтрокаТовар.Коэфф;
	//////	БракСумма = 0;
	//////	БракНДС = 0;
	//////	Если ТекСтрокаТовар.БойБрак > 0 Тогда
	//////		БракСумма = (ТекСтрокаТовар.БойБрак*ТекСтрокаТовар.ЦенаЗакуп);//)*(1+ТекСтрокаТовар.СтавкаНДС.Ставка/100);
	//////		БракНДС = ОМ3_ПолучитьНДСПоСуммеСНДСИСтавке(БракСумма,ТекСтрокаТовар.СтавкаНДС);
	//////	КонецЕсли;
	//////	
	//////	//ДвижениеП.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп + БракСумма;
	//////	//ДвижениеП.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп + БракНДС;
	//////	ДвижениеП.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
	//////	ДвижениеП.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;

	//////	Если Склад.ТипСклада = Перечисления.ТипыМХ.Опт Тогда
	//////		// старый вариант ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар.СуммаЗакуп + БракСумма;
	//////		// старый вариант ДвижениеП.СуммаРознНДС = ТекСтрокаТовар.НДСЗакуп + БракНДС;
	//////		
	//////		//новый вариант 18-06-2009
	//////		ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар.СуммаЗакуп ;
	//////		ДвижениеП.СуммаРознНДС = ТекСтрокаТовар.НДСЗакуп ;

	//////		
	//////		
	//////	Иначе
	//////		ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар.СуммаРозн;
	//////		ДвижениеП.СуммаРознНДС = ТекСтрокаТовар.НДСРозн;
	//////	КонецЕсли;
	//////	ЕстьПартионныеТовары=Истина;
	//////	
	//////	
	//////	// Если есть брак , то кидаем его на склад браков.
	//////	//Если (ТекСтрокаТовар.БойБрак > 0) и (Склад.ТипСклада = Перечисления.ТипыМХ.Опт) тогда
	//////	//	// Расход брака с главного склада на склад брака			
	//////	//	ДвижениеП				= Движения.ПартииЖНВЛС.Добавить();
	//////	//	ДвижениеП.ВидДвижения	= ВидДвиженияНакопления.Расход;
	//////	//	ДвижениеП.Период		= Дата;
	//////	//	ДвижениеП.Товар			= ТекСтрокаТовар.Товар;
	//////	//	ДвижениеП.Склад			= Склад;
	//////	//	ДвижениеП.СтавкаНДС		= ТекСтрокаТовар.СтавкаНДС;
	//////	//	ДвижениеП.пАРТИЯ		= ТекСтрокаТовар.Партия ;
	//////	//	ДвижениеП.Фирма			= Склад.Фирма;
	//////	//	ДвижениеП.ВидОперации	= Перечисления.ВидыОпераций.ПеремещениеТМЦ;
	//////	//	
	//////	//	ДвижениеП.Колво			= ТекСтрокаТовар.БойБрак*ТекСтрокаТовар.Коэфф;
	//////	//	ДвижениеП.СуммаЗакупСНДС= БракСумма;
	//////	//	ДвижениеП.СуммаНДСЗакуп = БракНДС;
	//////	//	ДвижениеП.СуммаРознСНДС = БракСумма;
	//////	//	ДвижениеП.СуммаРознНДС	= БракНДС;
	//////	//	
	//////	//	
	//////	//	// Приход барка на склад Брака :)
	//////	//	ДвижениеП = Движения.ПартииЖНВЛС.Добавить();
	//////	//	ДвижениеП.ВидДвижения	= ВидДвиженияНакопления.Приход;
	//////	//	ДвижениеП.Период		= Дата;
	//////	//	ДвижениеП.Товар			= ТекСтрокаТовар.Товар;
	//////	//	СкладБрака				= Справочники.МестаХранения.НайтиПоКоду(131);
	//////	//	Если СкладБрака = Справочники.МестаХранения.ПустаяСсылка() Тогда
	//////	//		#Если Клиент Тогда
	//////	//			Сообщить("по коду 131 не найден склад Брака");
	//////	//		#КонецЕсли
	//////	//		ПроведениеЗакончено=Истина;

	//////	//		Отказ=Истина;
	//////	//		Возврат;
	//////	//	КонецЕсли;
	//////	//	ДвижениеП.Склад			= СкладБрака;
	//////	//	ДвижениеП.СтавкаНДС		= ТекСтрокаТовар.СтавкаНДС;
	//////	//	ДвижениеП.пАРТИЯ		= ТекСтрокаТовар.Партия ;
	//////	//	ДвижениеП.Фирма			= Склад.Фирма;
	//////	//	ДвижениеП.ВидОперации	= Перечисления.ВидыОпераций.ПеремещениеТМЦ;
	//////	//	
	//////	//	ДвижениеП.Колво			= ТекСтрокаТовар.БойБрак*ТекСтрокаТовар.Коэфф;
	//////	//	ДвижениеП.СуммаЗакупСНДС= БракСумма;
	//////	//	ДвижениеП.СуммаНДСЗакуп = БракНДС;
	//////	//	ДвижениеП.СуммаРознСНДС = БракСумма;
	//////	//	ДвижениеП.СуммаРознНДС	= БракНДС;
	//////	//	// Это считаем для дальнейшей свертки по ставке НДС
	//////	//	Если  ТекСтрокаТовар.СтавкаНДС.Ставка = 10 Тогда
	//////	//		БракСумма10 = БракСумма10 + БракСумма;
	//////	//		БракНДС10	= БракНДС + БракНДС;
	//////	//	ИначеЕсли ТекСтрокаТовар.СтавкаНДС.Ставка = 18 Тогда
	//////	//		БракСумма18 = БракСумма18 + БракСумма;
	//////	//		БракНДС18	= БракНДС18 + БракНДС;
	//////	//	КонецЕсли;				
	//////	//		
	//////	//КонецЕсли;		
	//////	
	//////		
	//////КонецЦикла;
	//////// записываем движения регистров
	////////Движения.ПартииЖНВЛС.Записать();

	//////
	//////
	////////----------------------------< По регитсру учета по ставке НДС >--------------------------------GtG---
	//////
	//////
	//////ТабДвиженийПоПартиям=Движения.ПартииЖНВЛС.Выгрузить(); // новый вариант 18-06-2009
	//////
	//////
	//////
	//////
	//////
	//////
	//////
	//////ОМ12_КопияДвиженийПартийВРегистрПоСтавкамНДС(ЭтотОбъект,ТабДвиженийПоПартиям);  // движения по ставкам НДС - новый вариант
	
	
	
КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	
		
	ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;	
	 //----------------------------< ВАЖНЫЙ МОМЕНТ! >--------------------------------GtG---
	 // Автоматически удалять движения нельзя! ИБО когда происходит расценка непроведенного документа
	 // она накручивает на док движения регистра сведений, а при автоматическом
	 // удалении движений всю эту расценку к херам сносит.
	 //
	 // ПОЭТОМУ: удаляем движения регистров накопления вручную, а регистры сведений не трогаем
	 //-------------------------------------------------------------------------------GtG---
	 
	//============================< Очистка рагистров накопления >================================GtG===
	Движения.Взаиморасчеты.Очистить(); 			 Движения.Взаиморасчеты.Записать();
	Движения.ОстаткиПоСтНДСПоСкладам.Очистить(); Движения.ОстаткиПоСтНДСПоСкладам.Записать();
	Движения.ПартииЖНВЛС.Очистить();             Движения.ПартииЖНВЛС.Записать();
	Движения.ЗаказПоставщику.Очистить();		 Движения.ЗаказПоставщику.Записать();
	Движения.ИндивидуальныеЗаказы.Очистить();	 Движения.ИндивидуальныеЗаказы.Записать();
	//============================================================================================GtG===

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	
	НеудачныйВводНаОсновании = Истина;
	
	//Для каждого стр Из Товар Цикл
	//	
	//	стр.Партия = ОМ1_СоздатьПартиюТовара(стр.Товар).Ссылка;
	//
	//КонецЦикла; 
	
	//ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧерновикПоступленияТовара") Тогда
		
		//-------------- ЗАПРОС GTG --------------------------НАЧАЛО
		//Назначение: Ищем введенные на основании основания приходы товара
		//
		ТХТ="ВЫБРАТЬ
		    |	ПоступлениеТовара.Ссылка
		    |ИЗ
		    |	Документ.ПоступлениеТовара КАК ПоступлениеТовара
		    |ГДЕ
		    |	ПоступлениеТовара.ДокОснование = &Основание";
		
		Запрос=Новый Запрос;
		Запрос.Текст=ТХТ;
		Запрос.УстановитьПараметр("Основание",Основание);
		
		ТЗ=Запрос.Выполнить().Выгрузить();
		//-------------- ЗАПРОС GTG --------------------------КОНЕЦ
		
		
		
		Если ТЗ.Количество()<>0 тогда
			СтарыйДок=Тз.Получить(0).Ссылка.ПолучитьОбъект().ПолучитьФорму();
			СтарыйДок.Открыть();
			
			НеудачныйВводНаОсновании=Истина;
			Возврат;

		КонецЕсли;	
		
		
		
		
		
		
		
		Если Основание.Проведен=Ложь ТОгда
			НеудачныйВводНаОсновании=Истина;
			#Если Клиент Тогда
				ПРедупреждение("Нельзя вводить на основании непроведенного черновика!",10);
			#КонецЕсли
			Возврат;
		КонецЕсли;	
		
		ДокОснование=Основание;
		Склад=Константы.ОсновнойСклад.Получить();
		Поставщик = Основание.Поставщик;
		Комментарий=Комментарий+" Создан на основании Черновика №"+Основание.Номер+" от "+Основание.Дата;
		ОтсрочкаПлатежа=Поставщик.ОтсрочкаПлатежа ;
		
		Для Каждого ТекСтрокаТовар Из Основание.Товар Цикл
			НоваяСтрока = Товар.Добавить();
			НоваяСтрока.Баркод = ТекСтрокаТовар.Баркод;
			НоваяСтрока.БойБрак = ТекСтрокаТовар.БойБрак;
			НоваяСтрока.Количество = ТекСтрокаТовар.Количество;
			НоваяСтрока.КоличествоФакт = ТекСтрокаТовар.КоличествоФакт;
			НоваяСтрока.Недовоз = ТекСтрокаТовар.Недовоз;
			НоваяСтрока.Товар = ТекСтрокаТовар.Товар;
			НоваяСтрока.ЕИТ= ТекСтрокаТовар.ЕИТ;
			НоваяСтрока.Коэфф = ТекСтрокаТовар.Коэфф;
			НоваяСтрока.СтавкаНДС=НоваяСтрока.Товар.СтавкаНДС;
			НоваяСтрока.Партия=ОМ1_СоздатьПартиюТовара  (НоваяСтрока.Товар).Ссылка;
		КонецЦикла;
		
		СтрИзм=Изменения.Добавить();
		СтрИзм.Дата=ТекущаяДата();
		СтрИзм.КомментарийИзменения="Введен на основании черновика "+Основание.Номер+" от "+Основание.Дата;
		СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
		СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.ВводНового;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	

	Если НЕ ЭтоНовый() Тогда
		Если Год(Дата)>Год(Ссылка.Дата) Тогда
			УстановитьНовыйНомер();
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
			Предупреждение("Запрещено создавать документы данного вида");	
		#КонецЕсли
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого Стр из Товар Цикл
		Если  Стр.СуммаЗакуп<>0 и Стр.СуммаРозн<>0 Тогда
			Стр.ПроцентРознНац=(Стр.СуммаРозн/Стр.СуммаЗакуп-1)*100;
		ИначеЕсли Стр.ЦенаРозн<>0 и Стр.ЦенаЗакуп<>0 ТОГДА
			Стр.ПроцентРознНац=(Стр.ЦенаРозн/Стр.ЦенаЗакуп-1)*100;
		КонецЕсли;	
	КонецЦикла;	
	
	СуммаДок =Товар.Итог("СуммаЗакуп");
	СуммаДокРозн = Товар.Итог("СуммаРозн");
	
	ЗаписатьДействияВИсториюДокумента(Изменения,РежимЗаписи,ПометкаУдаления);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьНаЗаполнение(Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



НеудачныйВводНаОсновании=Ложь;
ПроведениеЗакончено=Ложь;

