//=============================БЛОК ДЛЯ СТАРОЙ ПРОГРАММЫ =======================================

Процедура ПоместитьВОбменСкладБух() Экспорт
	
	Запрос = Новый Запрос;
	запрос.Текст =   "ВЫБРАТЬ
	                 |	205 КАК ВидДокумента,
	                 |	УЗ_Перемещение.ФирмаОтправитель.Код КАК КодФирмы,
	                 |	""|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"" КАК СсылкаТХТ,
	                 |	УЗ_Перемещение.Дата КАК ДатаОчередиСклад,
	                 |	УЗ_Перемещение.СкладОтправитель.Код КАК КодСклада,
	                 |	УЗ_Перемещение.ФирмаОтправитель.ФирмаКакПоставщик.Код КАК КодКонтрагента,
	                 |	УЗ_Перемещение.Ссылка КАК Объект,
	                 |	УЗ_Перемещение.Проведен КАК Проведен,
	                 |	УЗ_Перемещение.ПометкаУдаления КАК ПомеченНаУдаление,
	                 |	"""" КАК ОшибкаПриЗагрузке,
	                 |	ЕСТЬNULL(УЗ_Перемещение.ФирмаКомитентОтправитель.Код, 0) КАК Фирма2,
	                 |	ЕСТЬNULL(УЗ_Перемещение.ФирмаПолучатель.Код, 0) КАК Фирма3,
					 |	ЕСТЬNULL(УЗ_Перемещение.ФирмаКомитентПолучатель.Код, 0) КАК Фирма4
	                 |ИЗ
	                 |	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	                 |ГДЕ
	                 |	УЗ_Перемещение.Проведен = ИСТИНА
	                 |	И УЗ_Перемещение.ДатаФактическойОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	                 |	И УЗ_Перемещение.Ссылка = &Ссылка"; // Сгенерировано в GtG's Консоль запросов. 02.03.2016 19:28:30
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Реззапроса = Рез.Выгрузить();
	
	Для Каждого Стр Из Реззапроса Цикл    
		
		ТЗКодовФирм=Новый ТаблицаЗначений;
		ТЗКодовФирм.Колонки.Добавить("КодФирмы");
		
		ТЗКодовФирм.Добавить().КодФирмы=Стр.КодФирмы ;
		ТЗКодовФирм.Добавить().КодФирмы=Стр.Фирма2;
		ТЗКодовФирм.Добавить().КодФирмы=Стр.Фирма3;
		ТЗКодовФирм.Добавить().КодФирмы=Стр.Фирма4;

		
		ТЗКодовФирм.Свернуть("КодФирмы","");
		
		
		Для Каждого КФ Из ТЗКодовФирм Цикл
			
			Если КФ.КодФирмы=0 Тогда
				Продолжить;
			КонецЕсли;
			
			МЗ=РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ,Стр);
			МЗ.СсылкаТХТ=Стр.Объект.УникальныйИдентификатор();
			МЗ.КодФирмы=КФ.КодФирмы;
			МЗ.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры


Функция Архивация(Файл)
	//Проверяем на наличие файла (на всяк случай ), потом геть его в архив, а dbf удаляем
	ВремФайл = Новый Файл(Файл);
	Если ВремФайл.Существует() Тогда
		ИмяАрхива = ВремФайл.Путь + "" + ВремФайл.ИмяБезРасширения + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный); 
		ФайлАрхива.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно); 
		ФайлАрхива.Записать();
		УдалитьФайлы(Файл);
	КонецЕсли;
	Возврат Новый Файл(ИмяАрхива);
КонецФункции

Процедура СформироватьСтруктуруДБФ(ТЗ,ДБФ)
			
			//============================< Генерим структуру DBF по ТЗ >================================GtG===
			Для Каждого Кол из ТЗ.Колонки Цикл
				//----------------------------------------------------------------------
				// Номер документа, дата и код аптеки нам в теле DBF не нужны, посему пропускаем их
				Если (Кол.Имя = "NDOC") или (Кол.Имя = "DateDoc") или (Кол.Имя = "PODRCD") Тогда
					Продолжить;
				КонецЕсли;
				//--------------------------------------------------------Virus----КОНЕЦ--28.11.2007
				
				Если Кол.ТипЗначения.СодержитТип(Тип("Дата")) ТОгда
					Т="D";
					Д=0;
					Тч=0;
				ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Число")) Тогда	
					Т="N";
					Д=15;
					Тч=2;
				ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Строка")) Тогда	
					Т="S";
					Д=150;
					Тч=0;
				Иначе
					//Сообщить("хрен знает какой тип");
				КонецЕсли;
				
				Если (Кол.Имя = "EAN13") или (Кол.Имя = "ExtParty") Тогда
					Т="S";
					Д=13;
					Тч=0;
				ИначеЕсли (Кол.Имя = "NameOKEI") или (Кол.Имя = "NDefOKEI") Тогда
					Т="S";
					Д=10;
					Тч=0;
				ИначеЕсли (Кол.Имя = "INN") Тогда
					Т="S";
					Д=12;
					Тч=0;
				ИначеЕсли (Кол.Имя = "KPP") Тогда
					Т="S";
					Д=9;
					Тч=0;
				КонецЕсли;
				
				ДБФ.поля.Добавить(Кол.Имя,Т,Д,Тч);
			КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФайлДанными(ФайлВыгрузки,РезШапка,РезТело,СтруктураАидов,ТипДокумента)
	
	ТХТ = "ВЫБРАТЬ
	      |	НастройкаВыгрузкиВ_АМ2.DOCTYPE,
	      |	НастройкаВыгрузкиВ_АМ2.NBLOCK,
	      |	НастройкаВыгрузкиВ_АМ2.NFIELD,
	      |	НастройкаВыгрузкиВ_АМ2.МД,
	      |	НастройкаВыгрузкиВ_АМ2.ИмяРеквизитаДокумента,
	      |	НастройкаВыгрузкиВ_АМ2.Вычисляемое,
	      |	НастройкаВыгрузкиВ_АМ2.VAL,
	      |	НастройкаВыгрузкиВ_АМ2.TVAL
	      |ИЗ
	      |	РегистрСведений.НастройкаВыгрузкиВ_АМ2 КАК НастройкаВыгрузкиВ_АМ2
	      |ГДЕ
	      |	НастройкаВыгрузкиВ_АМ2.DOCTYPE = 191";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("NBLOCK",1);
	НастройкиШапка = ТЗ.НайтиСтроки(Отбор);
	СтрШ = РезШапка.Получить(0);
	
	Для каждого стр из НастройкиШапка Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки,стр);
		ФайлВыгрузки.Val	= Вычислить(ФайлВыгрузки.Val); 
		ФайлВыгрузки.NDOC	= 1;
		//ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
		ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
		
		ФайлВыгрузки.AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
		ФайлВыгрузки.NSTR	= 1;
		ФайлВыгрузки.Записать();
	КонецЦикла;
	
	
	Отбор = Новый Структура("NBLOCK",2);
	НастройкиТело = ТЗ.НайтиСтроки(Отбор);
	НомерСтр = 0;
	Для каждого Стр из РезТело Цикл
		НомерСтр = НомерСтр + 1;		
		Для каждого СтрНастройка из НастройкиТело Цикл
			Если РезТело.Колонки.Найти(СокрЛП(СтрНастройка.NFIELD)) = неопределено Тогда
				Продолжить;
			КонецЕсли;
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки,СтрНастройка);	
			ФайлВыгрузки.Val	= Вычислить(ФайлВыгрузки.Val); 
			ФайлВыгрузки.NSTR	= НомерСтр;
			//ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
			ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
			
			ФайлВыгрузки.AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
			ФайлВыгрузки.NDOC	= 1;
			ФайлВыгрузки.Записать();
		КонецЦикла;
		
	КонецЦикла;	
	
	//Если РезУдаленных.Количество() > 0 Тогда
	//	
	//	Отбор = Новый Структура("NBLOCK",3);
	//	НастройкиУдаленных = ТЗ.НайтиСтроки(Отбор);
	//	//НомерСтр = 0;  Номер строки продолжаем из блока два
	//	Для каждого Стр из РезУдаленных Цикл
	//		НомерСтр = НомерСтр + 1;		
	//		Для каждого СтрНастройка из НастройкиУдаленных Цикл
	//			ФайлВыгрузки.Добавить();
	//			ЗаполнитьЗначенияСвойств(ФайлВыгрузки,СтрНастройка);	
	//			ФайлВыгрузки.Val	= Вычислить(ФайлВыгрузки.Val); 
	//			ФайлВыгрузки.NSTR	= НомерСтр;
	//			ФайлВыгрузки.AID	= СтруктураАидов.ВнешнийАид;
	//			ФайлВыгрузки.AIDEXT	= Формат(СтруктураАидов.НашАид,"ЧГ=0");
	//			ФайлВыгрузки.NDOC	= 1;
	//			ФайлВыгрузки.Записать();
	//		КонецЦикла;
	//		
	//	КонецЦикла;	
	//КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьВАптеку(ВыгрузкаПодтверждения=Ложь) Экспорт
	
		
	СтруктураАидов = Обмен.СоздатьЗаписьВРеестре(Ссылка,191);
	Если СтруктураАидов = Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось создать запись в реестре документов. Документ не может быть выгружен");
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;		
	
	Если СтруктураАидов.ВнешнийАид = "{0,0}" Тогда
		СтруктураАидов.ВнешнийАид = "{"+Формат(СтруктураАидов.НашАид,"ЧГ=0")+","+ Формат(СкладПолучатель.Код,"ЧГ=0")+"}";
	КонецЕсли;			
	ВыгружаемаяАптека = СкладПолучатель;
	КаталогОбмена=СкладПолучатель.КаталогОбмена;

		ТипДокумента = 191;
		Если НЕ ВнутреннееПеремещение Тогда
			ТХТ = "ВЫБРАТЬ
			|	&AID КАК AID,
			|	&AIDEXT КАК AIDEXT,
			|	&ТипДокумента КАК DOCTYPE,
			|	1 КАК NSTR,
			|	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС * (1 + Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) КАК sum_z_w_nds,
			|	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС / 100 * Партии.СтавкаНДСЗакуп КАК ЧИСЛО(15, 2))) КАК sum_z_nds,
			|	СУММА(Перемещение.СуммаРозн) КАК sum_r_w_nds_src,
			|	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаРозн / 100 * Партии.СтавкаНДСРозн КАК ЧИСЛО(15, 2))) КАК sum_r_nds_src,
			|	СУММА(Перемещение.СуммаРозн) КАК sum_r_w_nds_dst,
			|	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаРозн / 100 * Партии.СтавкаНДСРозн КАК ЧИСЛО(15, 2))) КАК sum_r_nds_dst,
			|	Перемещение.Ссылка.Дата КАК ddoc,
			|	Перемещение.Ссылка.НомДокАптекиОтправителя КАК ndoc,
			|	Перемещение.Ссылка.СкладОтправитель.Код КАК id_dep,
			|	Перемещение.Ссылка.СкладПолучатель.Код КАК id_dep_dst,
			|	Перемещение.Ссылка.ПометкаУдаления КАК is_deleted
			|ИЗ
			|	Документ.УЗ_Перемещение.Товар КАК Перемещение
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			|		ПО (Партии.Код = Перемещение.КодПартии)
			|ГДЕ
			|	Перемещение.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Перемещение.Ссылка.Дата,
			|	Перемещение.Ссылка.НомДокАптекиОтправителя,
			|	Перемещение.Ссылка.СкладОтправитель.Код,
			|	Перемещение.Ссылка.СкладПолучатель.Код,
			|	Перемещение.Ссылка.ПометкаУдаления";
		ИНаче
			ТХТ = "ВЫБРАТЬ
			      |	&AID КАК AID,
			      |	&AIDEXT КАК AIDEXT,
			      |	&ТипДокумента КАК DOCTYPE,
			      |	1 КАК NSTR,
			      |	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС * (1 + Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))) КАК sum_z_w_nds,
			      |	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС / 100 * Партии.СтавкаНДСЗакуп КАК ЧИСЛО(15, 2))) КАК sum_z_nds,
			      |	СУММА(Перемещение.СуммаРозн) КАК sum_r_w_nds_src,
			      |	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаРозн / 100 * Партии.СтавкаНДСРозн КАК ЧИСЛО(15, 2))) КАК sum_r_nds_src,
			      |	СУММА(Перемещение.СуммаРозн) КАК sum_r_w_nds_dst,
			      |	СУММА(ВЫРАЗИТЬ(Перемещение.СуммаРозн / 100 * Партии.СтавкаНДСРозн КАК ЧИСЛО(15, 2))) КАК sum_r_nds_dst,
			      |	Перемещение.Ссылка.Дата КАК ddoc,
			      |	Перемещение.Ссылка.НомДокАптекиОтправителя КАК ndoc,
			      |	Перемещение.Ссылка.СкладОтправитель.Код КАК id_dep,
			      |	Перемещение.Ссылка.СкладПолучатель.Код КАК id_dep_dst,
			      |	Перемещение.Ссылка.ПометкаУдаления КАК is_deleted
			      |ИЗ
			      |	Документ.УЗ_Перемещение.Товар КАК Перемещение
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |		ПО (Партии.Код = Перемещение.КодПартииПолучателя)
			      |ГДЕ
			      |	Перемещение.Ссылка = &Ссылка
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Перемещение.Ссылка.Дата,
			      |	Перемещение.Ссылка.НомДокАптекиОтправителя,
			      |	Перемещение.Ссылка.СкладОтправитель.Код,
			      |	Перемещение.Ссылка.СкладПолучатель.Код,
			      |	Перемещение.Ссылка.ПометкаУдаления";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("AID",СтруктураАидов.ВнешнийАид);
		Запрос.УстановитьПараметр("AIDEXT",СтруктураАидов.НашАид);
		Запрос.УстановитьПараметр("ТипДокумента",ТипДокумента);		
		РезШапка = Запрос.Выполнить().Выгрузить();
		
		//Если ВыгрузкаПодтверждения = Истина Тогда
		//	
		//	ТХТ = "ВЫБРАТЬ
		//	|	&AID КАК AID,
		//	|	&AIDEXT КАК AIDEXT,
		//	|	&ТипДокумента КАК DOCTYPE,
		//	|	1 КАК NDOC,
		//	|	Перемещение.Товар.Код КАК id_good,
		//	|	Перемещение.Товар.Наименование КАК ngood,
		//	|	Перемещение.Товар.ЕдиницаПоУмолчанию.К КАК coeff_def,
		//	|	Перемещение.Коэфф КАК coeff,
		//	|	Перемещение.КоличествоФакт КАК qnt,
		//	|	Перемещение.СтавкаНДС.Ставка КАК p_nds_z,
		//	|	Перемещение.СтавкаНДС.Ставка КАК p_nds_r,
		//	|	Перемещение.СуммаЗакуп КАК sum_z_w_nds,
		//	|	Перемещение.НДСЗакуп КАК sum_z_nds,
		//	|	Перемещение.СуммаРозн КАК sum_r_w_nds_src,
		//	|	Перемещение.НДСРозн КАК sum_r_nds_src,
		//	|	Перемещение.СуммаРознПол КАК sum_r_w_nds_dst,
		//	|	Перемещение.НДСРознПол КАК sum_r_nds_dst,
		//	|	Перемещение.Партия.Код КАК extpart,
		//	|	ВЫБОР
		//	|		КОГДА Перемещение.Товар.ЕдиницаПоУмолчанию.К > 1
		//	|				И Перемещение.Коэфф = 1
		//	|				И Перемещение.Партия.ЕИТЗакупки.К > 1
		//	|			ТОГДА Перемещение.Товар.ЕдиницаПоУмолчанию.К
		//	|		ИНАЧЕ 1
		//	|	КОНЕЦ КАК conversion
		//	|ИЗ
		//	|	Документ.ПеремещениеТовара.Товар КАК Перемещение
		//	|ГДЕ
		//	|	Перемещение.Ссылка = &Ссылка";		
		//Иначе
			ТХТ = "ВЫБРАТЬ
			      |	&AID КАК AID,
			      |	&AIDEXT КАК AIDEXT,
			      |	&ТипДокумента КАК DOCTYPE,
			      |	1 КАК NDOC,
			      |	Перемещение.КодТовара КАК id_good,
			      |	Перемещение.Товар.Наименование КАК ngood,
			      |	ПОДСТРОКА(Перемещение.Товар.МеждународноеНазвание, 1, 100) КАК latname,
			      |	Перемещение.КоэффициентРазбивки КАК coeff_def,
			      |	Перемещение.Коэфф КАК coeff,
			      |	Перемещение.Количество КАК qnt,
			      |	Партии.СтавкаНДСЗакуп КАК p_nds_z,
			      |	Партии.СтавкаНДСРозн КАК p_nds_r,
			      |	ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС * (1 + Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2)) КАК sum_z_w_nds,
			      |	ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС / 100 * Партии.СтавкаНДСЗакуп КАК ЧИСЛО(15, 2)) КАК sum_z_nds,
			      |	Перемещение.СуммаРозн КАК sum_r_w_nds_src,
			      |	ВЫРАЗИТЬ(Перемещение.СуммаРозн / 100 * Партии.СтавкаНДСРозн КАК ЧИСЛО(15, 2)) КАК sum_r_nds_src,
			      |	Перемещение.СуммаРозн КАК sum_r_w_nds_dst,
			      |	ВЫРАЗИТЬ(Перемещение.СуммаРозн / 100 * Партии.СтавкаНДСРозн КАК ЧИСЛО(15, 2)) КАК sum_r_nds_dst,
			      |	Партии.Код КАК extpart,
			      |	ВЫБОР
			      |		КОГДА Перемещение.КоэффициентРазбивки > 1
			      |				И Перемещение.Коэфф = 1
			      |			ТОГДА Перемещение.КоэффициентРазбивки
			      |		ИНАЧЕ 1
			      |	КОНЕЦ КАК conversion,
			      |	ЕСТЬNULL(Партии.Производитель.Код, 0) КАК id_producer,
			      |	Партии.Производитель.Наименование КАК n_producer,
			      |	ЕСТЬNULL(Партии.Поставщик, 0) КАК id_contragent,
			      |	Поставщики.ПолнНаименование КАК n_contragent,
			      |	Поставщики.ИНН КАК inn,
			      |	Поставщики.КПП КАК kpp,
			      |	Партии.СрокГодности КАК dvalid,
			      |	ВЫБОР
			      |		КОГДА Партии.Серия = """"
			      |			ТОГДА ""*""
			      |		ИНАЧЕ Партии.Серия
			      |	КОНЕЦ КАК series,
			      |	Партии.Баркод КАК eancode,
			      |	Партии.Наименование КАК barcode,
			      |	0 КАК id_ngtd,
			      |	"""" КАК n_ngtd,
			      |	0 КАК id_certif,
			      |	"""" КАК n_certif,
			      |	Партии.ЦенаГосРегистрации КАК cost_g_wo_nds,
			      |	Партии.ЦенаПроизводителяБезНДС КАК cost_p_wo_nds,
			      |	ЕСТЬNULL(Партии.ВидПоступления, 0) КАК id_type_in
			      |ПОМЕСТИТЬ ТМП
			      |ИЗ
			      |	Документ.УЗ_Перемещение.Товар КАК Перемещение
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |		ПО (Партии.Код = Перемещение.КодПартииПолучателя)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики КАК Поставщики
			      |		ПО (Поставщики.Код = Партии.Поставщик)
			      |ГДЕ
			      |	Перемещение.Ссылка = &Ссылка
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	ТМП.AID,
			      |	ТМП.AIDEXT,
			      |	ТМП.DOCTYPE,
			      |	ТМП.NDOC,
			      |	ТМП.id_good,
			      |	ТМП.ngood,
			      |	ТМП.latname,
			      |	ТМП.coeff_def,
			      |	ТМП.coeff,
			      |	ТМП.qnt,
			      |	ТМП.p_nds_z,
			      |	ТМП.p_nds_r,
			      |	ТМП.sum_z_w_nds,
			      |	ТМП.sum_z_nds,
			      |	ТМП.sum_r_w_nds_src,
			      |	ТМП.sum_r_nds_src,
			      |	ТМП.sum_r_w_nds_dst,
			      |	ТМП.sum_r_nds_dst,
			      |	ТМП.extpart,
			      |	ТМП.conversion,
			      |	ТМП.id_producer,
			      |	ТМП.n_producer,
			      |	ВЫБОР
			      |		КОГДА ТМП.id_contragent = 0
			      |			ТОГДА 588
			      |		ИНАЧЕ ТМП.id_contragent
			      |	КОНЕЦ КАК id_contragent,
			      |	ВЫБОР
			      |		КОГДА ТМП.id_contragent = 0
			      |			ТОГДА ""ООО АПТЕКА-А.в.е""
			      |		ИНАЧЕ ТМП.n_contragent
			      |	КОНЕЦ КАК n_contragent,
			      |	ВЫБОР
			      |		КОГДА ТМП.id_contragent = 0
			      |			ТОГДА ""7705947629""
			      |		ИНАЧЕ ТМП.inn
			      |	КОНЕЦ КАК inn,
			      |	ВЫБОР
			      |		КОГДА ТМП.id_contragent = 0
			      |			ТОГДА ""770501001""
			      |		ИНАЧЕ ТМП.kpp
			      |	КОНЕЦ КАК kpp,
			      |	ТМП.dvalid,
			      |	ТМП.series,
			      |	ТМП.eancode,
			      |	ТМП.barcode,
			      |	ТМП.id_ngtd,
			      |	ТМП.n_ngtd,
			      |	ТМП.id_certif,
			      |	ТМП.n_certif,
			      |	ВЫБОР
			      |		КОГДА ТМП.conversion > 1
			      |			ТОГДА ТМП.cost_g_wo_nds / ТМП.conversion
			      |		ИНАЧЕ ТМП.cost_g_wo_nds
			      |	КОНЕЦ КАК cost_g_wo_nds,
			      |	ВЫБОР
			      |		КОГДА ТМП.conversion > 1
			      |			ТОГДА ТМП.cost_p_wo_nds / ТМП.conversion
			      |		ИНАЧЕ ТМП.cost_p_wo_nds
			      |	КОНЕЦ КАК cost_p_wo_nds,
			      |	ТМП.id_type_in
			      |ИЗ
			      |	ТМП КАК ТМП
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ТМП";			  
			
		//КонецЕсли;
		Если ВнутреннееПеремещение Тогда
			ТХТ  = СтрЗаменить(ТХТ,"КодПартииПолучателя","КодПартии");	
		КонецЕсли;
		запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("AID",СтруктураАидов.ВнешнийАид);

		Запрос.УстановитьПараметр("AIDEXT",СтруктураАидов.НашАид);
		Запрос.УстановитьПараметр("ТипДокумента",ТипДокумента);

		РезТело = Запрос.Выполнить().Выгрузить();
		
		
		//ТХТ = "ВЫБРАТЬ
		//	  |	&AID КАК AID,
		//	  |	&AIDEXT КАК AIDEXT,
		//	  |	&ТипДокумента КАК DOCTYPE,
		//	  |	1 КАК NDOC,
		//	  |	Перемещение.Товар.Код КАК id_good,
		//	  |	ИСТИНА КАК is_deleted,
		//	  |	Перемещение.Партия.Код КАК extpart
		//	  |ИЗ
		//	  |	Документ.ПеремещениеТовара.НеудовлетвореннаяПотребность КАК Перемещение
		//	  |ГДЕ
		//	  |	Перемещение.Ссылка = &Ссылка";		
		//
		//
		//запрос.Текст = ТХТ;
		//Запрос.УстановитьПараметр("Ссылка",Ссылка);
		//Запрос.УстановитьПараметр("AID",СтруктураАидов.ВнешнийАид);
		//Запрос.УстановитьПараметр("AIDEXT",СтруктураАидов.НашАид);
		//Запрос.УстановитьПараметр("ТипДокумента",ТипДокумента);

		//РезУдаленных = Запрос.Выполнить().Выгрузить();
		
		ФайлВыгрузки=Новый XBase();
		ФайлВыгрузки.Кодировка=КодировкаXBase.OEM;
		
		ФайлВыгрузки.поля.Добавить("DocType","N",15,0);
		ФайлВыгрузки.поля.Добавить("AID","S",30,0);
		ФайлВыгрузки.поля.Добавить("AIDEXT","S",15);
		ФайлВыгрузки.поля.Добавить("NDOC","N",15,0);
		ФайлВыгрузки.поля.Добавить("NBLOCK","N",15,0);
		ФайлВыгрузки.поля.Добавить("NSTR","N",15,0);
		ФайлВыгрузки.поля.Добавить("NField","S",30,0);
		ФайлВыгрузки.поля.Добавить("TVAL","S",1,0);
		ФайлВыгрузки.поля.Добавить("Val","S",150,0);
		
		ИмяФайлаВыгрузки=КаталогОбмена+"indocs"+Формат(ВыгружаемаяАптека.код,"ЧГ=")+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+"_"+Формат(Номер,"ЧГ=0")+".zip";
		Уник = Новый УникальныйИдентификатор;
		Уник = Прав(Уник,8);
		ИмяВременногоДБФ=КаталогВременныхФайлов()+Уник+".dbf";
		
		ФайлВыгрузки.СоздатьФайл(ИмяВременногоДБФ);
		
        ЗаполнитьФайлДанными(ФайлВыгрузки,РезШапка,РезТело,СтруктураАидов,ТипДокумента);
		
		
		
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		
		ИмяФайлаДляАрхивации=СтрЗаменить(ИмяВременногоДБФ,"\"+Уник + ".","\indocs"+Формат(ВыгружаемаяАптека.код,"ЧГ=")+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+"_"+Формат(Номер,"ЧГ=0")+".");
		
		ПереместитьФайл(ИмяВременногоДБФ,ИмяФайлаДляАрхивации);
		
		
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку(ИмяФайлаДляАрхивации,ИмяФайлаВыгрузки);
		
		УдалитьФайлы(ИмяФайлаДляАрхивации);
		
	
	Статус = Перечисления.СтатусПеремещения.ВыгруженНаАптеку;
	
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку получатель");	
	
	Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Истина;
	//ПереместитьФайл(Архив.ПолноеИмя,КонечныйКаталогФайла + "" +Архив.Имя);
	
	
	
КонецФункции
 
//========================== КОНЕЦ БЛОКА ДЛЯ СТАРОЙ ПРОГРАММЫ =================================

Процедура ОбновитьДанныеПоПартиямПолучателя()
	
	//Для каждого стр из Товар Цикл
	//	
	//	
	//	НоваяПартия.ПоставщикКомитентВнутренний = 0;
	//	
	//	Если ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.КупляПродажа Тогда
	//		
	//		Поставщик			= ФирмаОтправитель.ФирмаКакПоставщик.Код;
	//		ВидПоступления		= Перечисления.ВидыПоступленияТоваров.Покупка;
	//		СтавкаНДСЗакуп		= НоваяПартия.СтавкаНДСРозн;
	//		ЦенаЗакуп			= НоваяПартия.ЦенаЗакупБезНДСРасчет*(1+НоваяПартия.СтавкаНДСЗакуп/100);
	//		
	//	ИначеЕсли ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ПередачаНаКомиссию или ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПередачаНаКомиссию Тогда
	//		
	//		Поставщик			= ПоставщикКомитентПолучатель.Код;
	//		ВидПоступления		= Перечисления.ВидыПоступленияТоваров.Комиссия;
	//		ПоставщикКомитентВнутренний = НоваяПартия.Поставщик;
	//		
	//	ИначеЕсли ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитенту Тогда
	//		
	//		Поставщик			= НоваяПартия.ПоставщикИсходный;
	//		ВидПоступления		= НоваяПартия.ВидПоступленияИсходный;
	//		
	//	ИначеЕсли ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПродажа Тогда
	//		
	//		Поставщик			= ПоставщикКомитентОтправитель.Код;
	//		ВидПоступления		= Перечисления.ВидыПоступленияТоваров.Покупка;
	//		СтавкаНДСЗакуп		= НоваяПартия.СтавкаНДСРозн;
	//		ЦенаЗакуп			= НоваяПартия.ЦенаЗакупБезНДСРасчет*(1+НоваяПартия.СтавкаНДСЗакуп/100);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ДобавитьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ДобавитьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("</" + Имя + ">");
	
КонецПроцедуры

Процедура СформироватьСекцииКонтрагента(ЗаписьXML, КодКонтрагента)
	
	ЕстьКонтрагент = Ложь;                                                                   
	ЕстьСчет = Ложь;
	ЕстьСчетКомитента = Ложь;
	Если ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПродажа или  ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПередачаНаКомиссию Тогда
		Контрагент = ПоставщикКомитентОтправитель;
		ЕстьКонтрагент = Истина;
	ИначеЕсли  ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.КупляПродажа или ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ПередачаНаКомиссию Тогда
		Контрагент = ФирмаОтправитель.ФирмаКакПоставщик;
		ЕстьКонтрагент = Истина;
	КонецЕсли;
	
	Если ЕстьКонтрагент Тогда
		КодКонтрагента =  Формат(Контрагент.Код,"ЧГ=0");
		СчетКонтрагента = Контрагент.ОсновнойСчет;
		КодСчетаКонтрагента = СчетКонтрагента.Код;
		КодБанка = СчетКонтрагента.Банк.Код; 
		ЕстьСчет = Истина;
		Если СчетКонтрагента = Неопределено или СчетКонтрагента.Пустая() или КодСчетаКонтрагента = Неопределено Тогда
			ЕстьСчет = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьКомитент = ЗначениеЗаполнено(ПоставщикКомитентПолучатель);
	Если ЕстьКомитент Тогда
		КонтрагентКомитент = ПоставщикКомитентПолучатель;
		КодКомитента =  Формат(КонтрагентКомитент.Код,"ЧГ=0");
		
		СчетКомитента = КонтрагентКомитент.ОсновнойСчет;
		КодСчетаКомитента = СчетКомитента.Код;
		КодБанкаКомитента = СчетКомитента.Банк.Код; 
		
		ЕстьСчетКомитента = Истина;
		Если СчетКомитента = Неопределено или СчетКомитента.Пустая() или КодСчетаКомитента = Неопределено Тогда
			ЕстьСчетКомитента = ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСчет или ЕстьСчетКомитента Тогда
		ЗаписьXML.ДобавитьСтроку("<bank>");
		
		Если ЕстьСчет Тогда
			ЗаписьXML.ДобавитьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "bic",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
			ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Банк.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "corr_acc",	СокрЛП(СчетКонтрагента.Банк.КоррСчет));
			ЗаписьXML.ДобавитьСтроку("</row>");
		КонецЕсли;
		Если ЕстьСчетКомитента Тогда
			ЗаписьXML.ДобавитьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "bic",	Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
			ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКомитента.Банк.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "corr_acc",	СокрЛП(СчетКомитента.Банк.КоррСчет));
			ЗаписьXML.ДобавитьСтроку("</row>");				
		КонецЕсли;
		ЗаписьXML.ДобавитьСтроку("</bank>"); //конец записи секции  "bank"
		
		ЗаписьXML.ДобавитьСтроку("<bank_account>");
		Если ЕстьСчет Тогда
			ЗаписьXML.ДобавитьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
			ЗаписатьЭлементXML(ЗаписьXML, "descr",			КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "num",				СокрЛП(СчетКонтрагента.НомерСчета));
			ЗаписатьЭлементXML(ЗаписьXML, "id_contragent",	КодКонтрагента);
			ЗаписатьЭлементXML(ЗаписьXML, "id_bank",			Формат(КодБанка,"ЧГ=0; ЧН=0"));
			ЗаписьXML.ДобавитьСтроку("</row>");
		КонецЕсли;
		Если ЕстьСчетКомитента Тогда
			ЗаписьXML.ДобавитьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКомитента)),"ЧГ=0") );				
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
			ЗаписатьЭлементXML(ЗаписьXML, "descr",			КорректировкаСпецСимволов(СокрЛП(СчетКомитента.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "num",				СокрЛП(СчетКомитента.НомерСчета));
			ЗаписатьЭлементXML(ЗаписьXML, "id_contragent",	КодКомитента);
			ЗаписатьЭлементXML(ЗаписьXML, "id_bank",			Формат(КодБанкаКомитента,"ЧГ=0; ЧН=0"));
			ЗаписьXML.ДобавитьСтроку("</row>");
		КонецЕсли;
		ЗаписьXML.ДобавитьСтроку("</bank_account>"); //конец записи секции  "bank"		
	КонецЕсли;			
	Если ЕстьКонтрагент или ЕстьКомитент Тогда
		ЗаписьXML.ДобавитьСтроку("<contragent>");
		Если ЕстьКонтрагент Тогда
			ЗаписьXML.ДобавитьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id", КодКонтрагента); 			
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", ""+Число(Контрагент.ПометкаУдаления));
			ЗаписатьЭлементXML(ЗаписьXML, "is_internal", ""+Число(Контрагент.Внутренний));
			ЗаписатьЭлементXML(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ПолнНаименование))); 
			ЗаписатьЭлементXML(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(Контрагент.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ИНН)));
			ЗаписатьЭлементXML(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(Контрагент.КПП)));
			ЗаписатьЭлементXML(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОГРН)));
			ЗаписатьЭлементXML(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОКПО)));
			ЗаписатьЭлементXML(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(Контрагент.Адрес)));
			ЗаписатьЭлементXML(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(Контрагент.АдресГрузополучателя)));
			Если ЕстьСчет Тогда
				ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );
			Иначе
				ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", "0" );
			КонецЕсли;
			ЗаписатьЭлементXML(ЗаписьXML, "type_tax", "" + Число(Контрагент.КонтрагентНаУСН)); 
			ЗаписатьЭлементXML(ЗаписьXML, "e_mail", ""); 
			ЗаписатьЭлементXML(ЗаписьXML, "phone", "");
			ЗаписатьЭлементXML(ЗаписьXML, "director", "");
			ЗаписатьЭлементXML(ЗаписьXML, "bookkeeper", "");
			ЗаписьXML.ДобавитьСтроку("</row>");
		КонецЕсли;
		Если ЕстьКомитент Тогда
			ЗаписьXML.ДобавитьСтроку("<row>");
			ЗаписатьЭлементXML(ЗаписьXML, "id", КодКомитента); 			
			ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", ""+Число(КонтрагентКомитент.ПометкаУдаления)); 
			ЗаписатьЭлементXML(ЗаписьXML, "is_internal", ""+Число(КонтрагентКомитент.Внутренний));
			ЗаписатьЭлементXML(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ПолнНаименование))); 
			ЗаписатьЭлементXML(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.Наименование)));
			ЗаписатьЭлементXML(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ИНН)));
			ЗаписатьЭлементXML(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.КПП)));
			ЗаписатьЭлементXML(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ОГРН)));
			ЗаписатьЭлементXML(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.ОКПО)));
			ЗаписатьЭлементXML(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.Адрес)));
			ЗаписатьЭлементXML(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(КонтрагентКомитент.АдресГрузополучателя)));
			Если ЕстьСчетКомитента Тогда
				ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКомитента)),"ЧГ=0") );
			Иначе
				ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", "0" );
			КонецЕсли;
			ЗаписатьЭлементXML(ЗаписьXML, "type_tax", "" + Число(КонтрагентКомитент.КонтрагентНаУСН)); 
			ЗаписатьЭлементXML(ЗаписьXML, "e_mail", ""); 
			ЗаписатьЭлементXML(ЗаписьXML, "phone", "");
			ЗаписатьЭлементXML(ЗаписьXML, "director", "");
			ЗаписатьЭлементXML(ЗаписьXML, "bookkeeper", "");
			ЗаписьXML.ДобавитьСтроку("</row>");				
		КонецЕсли;
		ЗаписьXML.ДобавитьСтроку("</contragent>"); //конец записи секции  "contragent"
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПартииПолучателяТовара(ДокСсылка)
	
	Если СкладПолучатель.ТипНалогообложения = Перечисления.ТипыНалогообложения.УСН Тогда
		ПолучательНаУСН = Истина;
	Иначе
		ПолучательНаУСН = Ложь;
	КонецЕсли;
	
	Если СкладОтправитель.ТипНалогообложения = Перечисления.ТипыНалогообложения.УСН Тогда
		ОтправительНаУСН = Истина;
	Иначе
		ОтправительНаУСН = Ложь;
	КонецЕсли;
	
	ДатаКонтроль = Дата("20190101000000");//Дата перехода на НДС 20%
	
	СпрПартии = Справочники.УЗ_Партии;
	Для каждого стр из Товар Цикл
		Если стр.КодПартииПолучателя = 0 Тогда
			Партия = СпрПартии.НайтиПоКоду(стр.КодПартии);
			Если Партия.Пустая() Тогда
				#Если Клиент Тогда
					Сообщить("Не найдена партия по коду: " + Формат(стр.КодПартии,"ЧГ=0"));
				#КонецЕсли
				Возврат Ложь;
			КонецЕсли;
			
			НоваяПартия = Партия.Скопировать();
			НоваяПартия.УстановитьНовыйКод();
			Если НоваяПартия.Код = 0 Тогда // иногда не срабатывает УстановитьНовыйКод() и далее вылетает ошибка.  на 8.2 такой картины никогда не было
				#Если Клиент Тогда
					Сообщить("не сработал метод НоваяПартия.УстановитьНовыйКод(). Вызваем его повторно.");
				#КонецЕсли
				НоваяПартия.УстановитьНовыйКод();
				Если НоваяПартия.Код = 0 Тогда
					#Если Клиент Тогда
						Сообщить("Попытка №2: не сработал метод НоваяПартия.УстановитьНовыйКод().");
					#КонецЕсли
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			КодБезКС = "24"+Формат(Число(НоваяПартия.Код), "ЧЦ=10; ЧВН=; ЧГ=0");
			
			НоваяПартия.Наименование        = ВычислитьКонтрольнуюСумму(КодБезКС);			
			НоваяПартия.ДокументПоступления = ДокСсылка;
			Если НоваяПартия.ПартияРодительКод = 0 Тогда
				НоваяПартия.ПартияРодительКод = стр.КодПартии;
			КонецЕсли;
			
			НоваяПартия.ПоставщикКомитентВнутренний = 0;
			
			Если ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.КупляПродажа Тогда
				НоваяПартия.Поставщик			= ФирмаОтправитель.ФирмаКакПоставщик.Код;
				НоваяПартия.ВидПоступления		= 0; //Покупка
				НоваяПартия.СтавкаНДСЗакуп		= НоваяПартия.СтавкаНДСРозн;
				Если ОтправительНаУСН Тогда
					НоваяПартия.СтавкаНДСРозн = Партия.СтавкаНДСЗакуп;
				КонецЕсли;
				Если ПолучательНаУСН Тогда
					НоваяПартия.СтавкаНДСРозн = 0;	
				КонецЕсли;			
				Если НоваяПартия.СтавкаНДСЗакуп = 18 И ЭтотОбъект.Дата >= ДатаКонтроль Тогда
					НоваяПартия.СтавкаНДСЗакуп = 20;//ENT-1010 НДС 20%
				КонецЕсли;
				Если НоваяПартия.СтавкаНДСРозн = 18 И ЭтотОбъект.Дата >= ДатаКонтроль Тогда
					НоваяПартия.СтавкаНДСРозн = 20;//ENT-1010 НДС 20%
				КонецЕсли;
				НоваяПартия.ЦенаЗакуп			= НоваяПартия.ЦенаЗакупБезНДСРасчет*(1+НоваяПартия.СтавкаНДСЗакуп/100);
				
			ИначеЕсли ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ПередачаНаКомиссию или ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПередачаНаКомиссию Тогда
				НоваяПартия.Поставщик			= ПоставщикКомитентПолучатель.Код;
				НоваяПартия.ВидПоступления		= 1; //Перечисления.ВидыПоступленияТоваров.Комиссия;
				НоваяПартия.ПоставщикКомитентВнутренний = НоваяПартия.Поставщик;
				
			ИначеЕсли ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитенту Тогда
				НоваяПартия.Поставщик			= НоваяПартия.ПоставщикИсходный;
				НоваяПартия.ВидПоступления		= НоваяПартия.ВидПоступленияИсходный;
				
			ИначеЕсли ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПродажа Тогда
				НоваяПартия.Поставщик			= ПоставщикКомитентОтправитель.Код;
				НоваяПартия.ВидПоступления		= 0; //Перечисления.ВидыПоступленияТоваров.Покупка;
				НоваяПартия.СтавкаНДСЗакуп		= НоваяПартия.СтавкаНДСРозн;
				Если ОтправительНаУСН Тогда
					НоваяПартия.СтавкаНДСРозн = Партия.СтавкаНДСЗакуп;
				КонецЕсли;
				Если ПолучательНаУСН Тогда
					НоваяПартия.СтавкаНДСРозн = 0;	
				КонецЕсли;
				Если НоваяПартия.СтавкаНДСЗакуп = 18 И ЭтотОбъект.Дата >= ДатаКонтроль Тогда
					НоваяПартия.СтавкаНДСЗакуп = 20;//ENT-1010 НДС 20%
				КонецЕсли;
				Если НоваяПартия.СтавкаНДСРозн = 18 И ЭтотОбъект.Дата >= ДатаКонтроль Тогда
					НоваяПартия.СтавкаНДСРозн = 20;//ENT-1010 НДС 20%
				КонецЕсли;
				НоваяПартия.ЦенаЗакуп			= НоваяПартия.ЦенаЗакупБезНДСРасчет*(1+НоваяПартия.СтавкаНДСЗакуп/100);
			КонецЕсли;
			
			//Если Не ВнутреннееПеремещение Тогда
			//	Если ПоставщикКомитентПолучатель.Пустая() Тогда
			//	НоваяПартия.Поставщик			= Поставщик;
			//	НоваяПартия.ВидПоступления		= ВидПоступления;
			//КонецЕсли;
			//
			
			Попытка
				НоваяПартия.Записать();
			Исключение
				#Если Клиент Тогда
					Сообщить("Запись новой партии: не удалось создать партию. Ошибка: " + ОписаниеОшибки());
				#КонецЕсли				
				Возврат Ложь;
			КонецПопытки;
			стр.КодПартииПолучателя = НоваяПартия.Код;			
		ИначеЕсли (НачалоДня(ЭтотОбъект.Дата) <> НачалоДня(ДокСсылка.Дата)) И (Год(ДокСсылка.Дата) = 2018) И (Год(ЭтотОбъект.Дата) = 2019) И (НЕ ЭтоНовый()) Тогда 
		//ENT-1010 НДС 20% Обновить НДС в партии
			Если ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.КупляПродажа ИЛИ 
					ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПродажа Тогда
					
				ПартияПолучатель = СпрПартии.НайтиПоКоду(стр.КодПартииПолучателя);
				Если ПартияПолучатель.Пустая() Тогда
					#Если Клиент Тогда
						Сообщить("Не найдена партия по коду: " + Формат(стр.КодПартииПолучателя,"ЧГ=0"));
					#КонецЕсли
					Возврат Ложь;
				КонецЕсли;
				ПартияПолучательОбъект = ПартияПолучатель.ПолучитьОбъект();
				Если ПартияПолучательОбъект.СтавкаНДСРозн = 18 Тогда
				   ПартияПолучательОбъект.СтавкаНДСЗакуп = 20;
				   ПартияПолучательОбъект.СтавкаНДСРозн = 20;
				   ПартияПолучательОбъект.ЦенаЗакуп			= ПартияПолучательОбъект.ЦенаЗакупБезНДСРасчет*(1+ПартияПолучательОбъект.СтавкаНДСЗакуп/100);
				   Попытка
					   ПартияПолучательОбъект.Записать();
				   Исключение
					   #Если Клиент Тогда
						   Сообщить("Запись партии: не удалось обновить партию. Ошибка: " + ОписаниеОшибки());
					   #КонецЕсли				
					   Возврат Ложь;
				   КонецПопытки;
				КонецЕсли;   
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


Функция ПроверитьНаЗаполнениеПриПроведении()
	
	
		Если Статус = Перечисления.СтатусыПеремещения.Аннулирован Тогда
			#Если Клиент Тогда
				Предупреждение("Невозможно провести документ в статусе <Аннулирован>");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;
		
		Если ДатаФактическойОтгрузки = Дата(1,1,1) Тогда
			#Если Клиент Тогда
				Предупреждение("Не задана дата фактической отгрузки. Документ не проведен");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;
		
		Если ДатаОприходованияПолучателем = Дата(1,1,1) и СтатусДокАптекиПолучателя = Перечисления.СтатусДокАптеки.Проведен Тогда
			#Если Клиент Тогда
				Предупреждение("Не задана дата фактического оприходования. Документ не проведен");
			#КонецЕсли
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ВнутреннееПеремещение Тогда
			НайденнаяСтрока = Товар.Найти(0,"КодПартииПолучателя");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				#Если Клиент Тогда
					Сообщить("В документе есть строки с пустыми партиями для получателя!
					|Это недопустимо!");
				#КонецЕсли
				Возврат Ложь;
			КонецЕсли;		
		КонецЕсли;
		
		Возврат Истина;
	
КонецФункции

Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаФактическойОтгрузки",ДатаФактическойОтгрузки);
	Запрос.УстановитьПараметр("ДатаОприходованияПолучателем",ДатаЗавоза);
	Запрос.УстановитьПараметр("СкладОтправительКод",СкладОтправитель.Код);
	Запрос.УстановитьПараметр("ФирмаОтправительКод",ФирмаОтправитель.Код);
	Запрос.УстановитьПараметр("СкладПолучательКод",СкладПолучатель.Код);
	Запрос.УстановитьПараметр("ФирмаПолучательКод",ФирмаПолучатель.Код);
	Запрос.УстановитьПараметр("ПеревозчикКод",Перевозчик.Код);
	
	Запрос.УстановитьПараметр("КачествоТовараПорядок",Перечисления.УЗ_КачествоТовара.Индекс(Перечисления.УЗ_КачествоТовара.ХорошийТовар));
	
	Если НЕ ВнутреннееПеремещение Тогда	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	&СкладОтправительКод КАК СкладКод,
		               |	&ФирмаОтправительКод КАК ФирмаКод,
		               |	Партии.ВидПоступления КАК ВидПоступленияПорядок,
		               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
		               |	ТЧТовар.КодПартии КАК ПартияКод,
		               |	ТЧТовар.КодТовара КАК ТоварКод,
		               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
		               |	ТЧТовар.Коэфф,
		               |	Партии.СтавкаНДСЗакуп,
		               |	Партии.СтавкаНДСРозн КАК СтавкаНДС,
		               |	ТЧТовар.СуммаЗакупБезНДС
		               |ПОМЕСТИТЬ ВтТоварыОтправителя
		               |ИЗ
		               |	Документ.УЗ_Перемещение.Товар КАК ТЧТовар
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		               |		ПО (Партии.Код = ТЧТовар.КодПартии)
		               |ГДЕ
		               |	ТЧТовар.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	&СкладПолучательКод КАК СкладКод,
		               |	&ФирмаПолучательКод КАК ФирмаКод,
		               |	Партии.ВидПоступления КАК ВидПоступленияПорядок,
		               |	&КачествоТовараПорядок КАК КачествоТовараПорядок,
		               |	ТЧТовар.КодПартииПолучателя КАК ПартияКод,
		               |	ТЧТовар.КодТовара КАК ТоварКод,
		               |	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
		               |	ТЧТовар.Коэфф,
		               |	Партии.СтавкаНДСЗакуп,
		               |	Партии.СтавкаНДСРозн КАК СтавкаНДС,
		               |	ТЧТовар.СуммаЗакупБезНДС
		               |ПОМЕСТИТЬ ВтТоварыПолучателя
		               |ИЗ
		               |	Документ.УЗ_Перемещение.Товар КАК ТЧТовар
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		               |		ПО (Партии.Код = ТЧТовар.КодПартииПолучателя)
		               |ГДЕ
		               |	ТЧТовар.Ссылка = &Ссылка
		               |	И 111 = 111
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВтТоварыОтправителя.СкладКод,
		               |	ВтТоварыОтправителя.ФирмаКод,
		               |	ВтТоварыОтправителя.ВидПоступленияПорядок,
		               |	ВтТоварыОтправителя.ПартияКод,
		               |	ВтТоварыОтправителя.ТоварКод,
		               |	ВтТоварыОтправителя.СтавкаНДСЗакуп,
		               |	ВтТоварыОтправителя.СуммаЗакупБезНДС,
		               |	ВтТоварыОтправителя.Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	&ДатаФактическойОтгрузки КАК Период
		               |ИЗ
		               |	ВтТоварыОтправителя КАК ВтТоварыОтправителя
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВтТоварыПолучателя.СкладКод,
		               |	ВтТоварыПолучателя.ФирмаКод,
		               |	ВтТоварыПолучателя.ВидПоступленияПорядок,
		               |	ВтТоварыПолучателя.ПартияКод,
		               |	ВтТоварыПолучателя.ТоварКод,
		               |	ВтТоварыПолучателя.СтавкаНДСЗакуп,
		               |	ВтТоварыПолучателя.СуммаЗакупБезНДС,
		               |	ВтТоварыПолучателя.Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	&ДатаОприходованияПолучателем
		               |ИЗ
		               |	ВтТоварыПолучателя КАК ВтТоварыПолучателя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВтТоварыОтправителя.СкладКод,
		               |	ВтТоварыОтправителя.ФирмаКод,
		               |	ВтТоварыОтправителя.КачествоТовараПорядок,
		               |	ВтТоварыОтправителя.ВидПоступленияПорядок,
		               |	ВтТоварыОтправителя.СтавкаНДС,
		               |	СУММА(ВтТоварыОтправителя.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	&ДатаФактическойОтгрузки КАК Период,
		               |	0 КАК СуммаОкругления
		               |ИЗ
		               |	ВтТоварыОтправителя КАК ВтТоварыОтправителя
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВтТоварыОтправителя.СкладКод,
		               |	ВтТоварыОтправителя.ФирмаКод,
		               |	ВтТоварыОтправителя.ВидПоступленияПорядок,
		               |	ВтТоварыОтправителя.КачествоТовараПорядок,
		               |	ВтТоварыОтправителя.СтавкаНДС
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВтТоварыПолучателя.СкладКод,
		               |	ВтТоварыПолучателя.ФирмаКод,
		               |	ВтТоварыПолучателя.КачествоТовараПорядок,
		               |	ВтТоварыПолучателя.ВидПоступленияПорядок,
		               |	ВтТоварыПолучателя.СтавкаНДС,
		               |	СУММА(ВтТоварыПолучателя.СуммаЗакупБезНДС),
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	&ДатаОприходованияПолучателем,
		               |	0
		               |ИЗ
		               |	ВтТоварыПолучателя КАК ВтТоварыПолучателя
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВтТоварыПолучателя.СкладКод,
		               |	ВтТоварыПолучателя.ФирмаКод,
		               |	ВтТоварыПолучателя.ВидПоступленияПорядок,
		               |	ВтТоварыПолучателя.КачествоТовараПорядок,
		               |	ВтТоварыПолучателя.СтавкаНДС
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	&СкладОтправительКод КАК СкладОтправительКод,
		               |	&СкладПолучательКод КАК СкладПолучательКод,
		               |	ВтТоварыОтправителя.ТоварКод,
		               |	ВтТоварыОтправителя.СуммаЗакупБезНДС,
		               |	ВтТоварыОтправителя.Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	&ДатаФактическойОтгрузки КАК Период
		               |ИЗ
		               |	ВтТоварыОтправителя КАК ВтТоварыОтправителя
		               |
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	&СкладОтправительКод,
		               |	&СкладПолучательКод,
		               |	ВтТоварыПолучателя.ТоварКод,
		               |	ВтТоварыПолучателя.СуммаЗакупБезНДС,
		               |	ВтТоварыПолучателя.Количество,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	&ДатаОприходованияПолучателем
		               |ИЗ
		               |	ВтТоварыПолучателя КАК ВтТоварыПолучателя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТЧТовар.КодПартииПолучателя КАК ПартияКод,
		               |	ВходящиеЦеныПоставщика.ЦенаЗакупБезНДС,
		               |	ВходящиеЦеныПоставщика.ДатаПоступления,
		               |	ВходящиеЦеныПоставщика.КодПоставщика,
		               |	ВходящиеЦеныПоставщика.СтавкаНДС
		               |ИЗ
		               |	Документ.УЗ_Перемещение.Товар КАК ТЧТовар
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеЦеныПоставщика КАК ВходящиеЦеныПоставщика
		               |		ПО ТЧТовар.КодПартии = ВходящиеЦеныПоставщика.ПартияКод
		               |ГДЕ
		               |	ТЧТовар.Ссылка = &Ссылка
		               |	И 111 = 111
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВтТоварыОтправителя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВтТоварыПолучателя";
	ИНаче
		ТекстЗапроса = "ВЫБРАТЬ
		|	&СкладОтправительКод КАК СкладКод,
		|	&ФирмаОтправительКод КАК ФирмаКод,
		|	Партии.ВидПоступления КАК ВидПоступленияПорядок,
		|	&КачествоТовараПорядок КАК КачествоТовараПорядок,
		|	ТЧТовар.КодПартии КАК ПартияКод,
		|	ТЧТовар.КодТовара КАК ТоварКод,
		|	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
		|	ТЧТовар.Коэфф,
		|	Партии.СтавкаНДСЗакуп,
		|	Партии.СтавкаНДСЗакуп как СтавкаНДС,
		|	ТЧТовар.СуммаЗакупБезНДС
		|ПОМЕСТИТЬ ВтТоварыОтправителя
		|ИЗ
		|	Документ.УЗ_Перемещение.Товар КАК ТЧТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		|		ПО (Партии.Код = ТЧТовар.КодПартии)
		|ГДЕ
		|	ТЧТовар.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&СкладПолучательКод КАК СкладКод,
		|	&ФирмаПолучательКод КАК ФирмаКод,
		|	Партии.ВидПоступления КАК ВидПоступленияПорядок,
		|	&КачествоТовараПорядок КАК КачествоТовараПорядок,
		|	ТЧТовар.КодПартии КАК ПартияКод,
		|	ТЧТовар.КодТовара КАК ТоварКод,
		|	ТЧТовар.Количество * ТЧТовар.Коэфф КАК Количество,
		|	ТЧТовар.Коэфф,
		|	Партии.СтавкаНДСЗакуп,
		|	Партии.СтавкаНДСЗакуп как СтавкаНДС,
		|	ТЧТовар.СуммаЗакупБезНДС
		|ПОМЕСТИТЬ ВтТоварыПолучателя
		|ИЗ
		|	Документ.УЗ_Перемещение.Товар КАК ТЧТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		|		ПО (Партии.Код = ТЧТовар.КодПартии)
		|ГДЕ
		|	ТЧТовар.Ссылка = &Ссылка
		|	И 111 = 111
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыОтправителя.СкладКод,
		|	ВтТоварыОтправителя.ФирмаКод,
		|	ВтТоварыОтправителя.ВидПоступленияПорядок,
		|	ВтТоварыОтправителя.ПартияКод,
		|	ВтТоварыОтправителя.ТоварКод,
		|	ВтТоварыОтправителя.СтавкаНДСЗакуп,
		|	ВтТоварыОтправителя.СуммаЗакупБезНДС,
		|	ВтТоварыОтправителя.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&ДатаФактическойОтгрузки КАК Период
		|ИЗ
		|	ВтТоварыОтправителя КАК ВтТоварыОтправителя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтТоварыПолучателя.СкладКод,
		|	ВтТоварыПолучателя.ФирмаКод,
		|	ВтТоварыПолучателя.ВидПоступленияПорядок,
		|	ВтТоварыПолучателя.ПартияКод,
		|	ВтТоварыПолучателя.ТоварКод,
		|	ВтТоварыПолучателя.СтавкаНДСЗакуп,
		|	ВтТоварыПолучателя.СуммаЗакупБезНДС,
		|	ВтТоварыПолучателя.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	&ДатаОприходованияПолучателем
		|ИЗ
		|	ВтТоварыПолучателя КАК ВтТоварыПолучателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыОтправителя.СкладКод,
		|	ВтТоварыОтправителя.ФирмаКод,
		|	ВтТоварыОтправителя.КачествоТовараПорядок,
		|	ВтТоварыОтправителя.ВидПоступленияПорядок,
		|	ВтТоварыОтправителя.СтавкаНДС,
		|	СУММА(ВтТоварыОтправителя.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&ДатаФактическойОтгрузки КАК Период,
		|	0 КАК СуммаОкругления
		|ИЗ
		|	ВтТоварыОтправителя КАК ВтТоварыОтправителя
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТоварыОтправителя.СкладКод,
		|	ВтТоварыОтправителя.ФирмаКод,
		|	ВтТоварыОтправителя.ВидПоступленияПорядок,
		|	ВтТоварыОтправителя.КачествоТовараПорядок,
		|	ВтТоварыОтправителя.СтавкаНДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтТоварыПолучателя.СкладКод,
		|	ВтТоварыПолучателя.ФирмаКод,
		|	ВтТоварыПолучателя.КачествоТовараПорядок,
		|	ВтТоварыПолучателя.ВидПоступленияПорядок,
		|	ВтТоварыПолучателя.СтавкаНДС,
		|	СУММА(ВтТоварыПолучателя.СуммаЗакупБезНДС),
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	&ДатаОприходованияПолучателем,
		|	0
		|ИЗ
		|	ВтТоварыПолучателя КАК ВтТоварыПолучателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТоварыПолучателя.СкладКод,
		|	ВтТоварыПолучателя.ФирмаКод,
		|	ВтТоварыПолучателя.ВидПоступленияПорядок,
		|	ВтТоварыПолучателя.КачествоТовараПорядок,
		|	ВтТоварыПолучателя.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&СкладОтправительКод КАК СкладОтправительКод,
		|	&СкладПолучательКод КАК СкладПолучательКод,
		|	ВтТоварыОтправителя.ТоварКод,
		|	ВтТоварыОтправителя.СуммаЗакупБезНДС,
		|	ВтТоварыОтправителя.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&ДатаФактическойОтгрузки КАК Период
		|ИЗ
		|	ВтТоварыОтправителя КАК ВтТоварыОтправителя
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&СкладОтправительКод,
		|	&СкладПолучательКод,
		|	ВтТоварыПолучателя.ТоварКод,
		|	ВтТоварыПолучателя.СуммаЗакупБезНДС,
		|	ВтТоварыПолучателя.Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	&ДатаОприходованияПолучателем
		|ИЗ
		|	ВтТоварыПолучателя КАК ВтТоварыПолучателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтТоварыОтправителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтТоварыПолучателя";
	КонецЕсли;
	
	Если НЕ Статус = Перечисления.СтатусыПеремещения.Завершен Тогда	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"111 = 111","111 = 222");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();	   
	ТаблицыДвижений.Вставить("УЗ_Партии",				                        Результат[2].Выгрузить());
	ТаблицыДвижений.Вставить("УЗ_ТоварныйОтчет",			                    Результат[3].Выгрузить());
	ТаблицыДвижений.Вставить("УЗ_ПеремещенияВПути",			                    Результат[4].Выгрузить());
	Если НЕ ВнутреннееПеремещение Тогда
		ТаблицыДвижений.Вставить("ВходящиеЦеныПоставщика",		                    Результат[5].Выгрузить());
	КонецЕсли;
				   
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	 
 
	
	ТаблицыДвижений = Новый Структура();
	
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	
	Таблица= ТаблицыДвижений.УЗ_Партии;
	Движения.УЗ_Партии.Записывать = Истина;
	Движения.УЗ_Партии.Загрузить(Таблица);	
	
	
	
	Таблица= ТаблицыДвижений.УЗ_ТоварныйОтчет;
	Движения.УЗ_ТоварныйОтчет.Записывать = Истина;
	Движения.УЗ_ТоварныйОтчет.Загрузить(Таблица);
		
	Таблица= ТаблицыДвижений.УЗ_ПеремещенияВПути;
	Движения.УЗ_ПеремещенияВПути.Записывать = Истина;
	Движения.УЗ_ПеремещенияВПути.Загрузить(Таблица);
	
	Если НЕ ВнутреннееПеремещение Тогда
		ЗаписатьВходящиеЦеныПоставщика(ТаблицыДвижений.ВходящиеЦеныПоставщика);
	КонецЕсли;
	
	Если Статус  = Перечисления.СтатусыПеремещения.ВПути или Статус  = Перечисления.СтатусыПеремещения.Завершен Тогда
		ПоместитьВОбменСкладБух();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаписатьВходящиеЦеныПоставщика(ВходящиеЦеныПоставщика)
	
		
	Для каждого стр из ВходящиеЦеныПоставщика Цикл
			НЗ = РегистрыСведений.ВходящиеЦеныПоставщика.СоздатьНаборЗаписей();
			НЗ.Отбор.ПартияКод.Установить(стр.ПартияКод);
			НоваяСтрока = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
			НЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры


Функция ВыгрузитьОтправителюНаНовомПО() Экспорт
	

	ЗаписьXML = Новый ТекстовыйДокумент;
	
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");
	ЗаписьXML.ДобавитьСтроку("<document>"); 
	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "OUT_TRANSFER"); 
	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 
	
	ЗаписьXML.ДобавитьСтроку("<hdr>");
		ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"206"); 
		ЗаписатьЭлементXML(ЗаписьXML, "guid", ИДДокументаАптекиОтправитель); 
		Если Статус = Перечисления.СтатусыПеремещения.Аннулирован Тогда
			ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Аннулирован)); 
		Иначе
			ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.ОбработанОфисом)); 
		КонецЕсли;
		ЗаписатьЭлементXML(ЗаписьXML, "type_operation",	Перечисления.ВидыОперацийПеремещений.Индекс(ВидОперацииПеремещения)); 
		ЗаписатьЭлементXML(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));					
		ЗаписатьЭлементXML(ЗаписьXML, "date_shipment_plan",		Формат(ДатаПлановойОтгрузки,"ДФ=dd.MM.yyyy"));
		ЗаписатьЭлементXML(ЗаписьXML, "transport_agent", 	КорректировкаСпецСимволов(СокрЛП(Перевозчик.Наименование)));					
	ЗаписьXML.ДобавитьСтроку("</hdr>"); //конец записи секции  "hdr"
	
	ЗаписьXML.ДобавитьСтроку("</document>"); //конец записи секции  "document"
	
	
	ВесьТекст = ЗаписьXML.ПолучитьТекст();
	ЗаписьXML.Очистить();
	ЗаписьXML = Неопределено;
	
	КодСклада = СкладОтправитель.Код;
	//КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	//Если КодСчетчика = -1 Тогда
	//	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	//	Если КодСчетчика = -1 Тогда
	//		Возврат Ложь;	
	//	КонецЕсли;
	//КонецЕсли;
	

	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = 1;
	МЗ.КодАптеки = КодСклада;
	МЗ.ТипУпаковки = "OUT_TRANSFER";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "out_transfer_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.ИдентификаторДокумента = ИДДокументаАптекиПолучатель;   //Записываем Ид получателя, потому что в этом реквизите ссылка офисного документа
	МЗ.Записать();	
	
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку отправителя");	
	
	Возврат Истина;
	
	
КонецФункции


Функция ВыгрузитьПолучателюНаНовомПО() Экспорт
	
	Если ВнутреннееПеремещение Тогда
	ТХТ = "ВЫБРАТЬ
	      |	Перемещение.Товар КАК _Товар,
	      |	Перемещение.КодТовара КАК КодТовара,
	      |	Перемещение.КоэффициентРазбивки КАК КоэффициентРазбивки,
	      |	ЕСТЬNULL(Партии.Производитель.Код, 0) КАК КодПроизводителя,
	      |	Партии.Производитель.Наименование КАК НаименованиеПроизводителя,
	      |	Партии.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
	      |	Партии.Производитель,
	      |	Перемещение.Коэфф КАК КоэффициентОприходования,
	      |	Партии.СрокГодности,
	      |	ВЫБОР
	      |		КОГДА Партии.Серия = """"
	      |			ТОГДА ""*""
	      |		ИНАЧЕ Партии.Серия
	      |	КОНЕЦ КАК Серия,
	      |	Партии.Баркод КАК eancode,
	      |	Партии.Наименование КАК barcode,
	      |	Партии.ФирмаИсходная,
	      |	Партии.ВидПоступления,
	      |	Партии.ВидПоступленияИсходный,
	      |	Партии.ПоставщикКомитентВнутренний,
	      |	Партии.ПоставщикИсходный,
	      |	Партии.Поставщик,
	      |	Перемещение.КодПартии КАК КодПартии,
	      |	Партии.НомерГТД,
	      |	Перемещение.Количество КАК qnt,
	      |	Партии.СтавкаНДСРозн КАК pndsz,
	      |	Партии.СтавкаНДСРозн КАК pndsr,
	      |	Партии.ЦенаГосРегистрации,
	      |	Партии.ЦенаПроизводителяБезНДС КАК ЦенаПроизводителя,
	      |	Перемещение.ЦенаЗакупБезНДС,
	      |	(ВЫРАЗИТЬ(Перемещение.ЦенаЗакупБезНДС * (1 + Перемещение.СтавкаНДС / 100) КАК ЧИСЛО(15, 2))) * Перемещение.КоэффициентРазбивки / Перемещение.Коэфф КАК ЦенаЗакуп,
	      |	Перемещение.СуммаЗакупБезНДС,
	      |	(ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС * (1 + Перемещение.СтавкаНДС / 100) КАК ЧИСЛО(15, 2))) - Перемещение.СуммаЗакупБезНДС КАК СуммаЗакупНДС,
	      |	ЕСТЬNULL(Перемещение.Товар.МНН.Код, 0) КАК КодМНН,
	      |	ЕСТЬNULL(Перемещение.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
	      |	Перемещение.НомерСтроки,
	      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК ЦенаРознУпак,
	      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Перемещение.КоэффициентРазбивки * Перемещение.Коэфф * Перемещение.Количество КАК СуммаРозн,
	      |	ВЫБОР
	      |		КОГДА НЕ РЦП.Цена ЕСТЬ NULL 
	      |				ИЛИ Партии.ВидПоступления = 3
	      |				ИЛИ Партии.ВидПоступленияИсходный = 3
	      |			ТОГДА 1
	      |		ИНАЧЕ 0
	      |	КОНЕЦ КАК ЦенаИндивидуальная,
	      |	Партии.БэкМаржа,
		  |	Перемещение.Ссылка.Дата КАК ДатаДок
	      |ПОМЕСТИТЬ Выборка
	      |ИЗ
	      |	Документ.УЗ_Перемещение.Товар КАК Перемещение
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	      |		ПО (Партии.Код = Перемещение.КодПартии)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	      |		ПО Перемещение.КодТовара = РЦ.ТоварКод
	      |			И (РЦ.АптекаКод = &СкладКод)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	      |		ПО  Перемещение.КодПартии = РЦП.ПартияКод
	      |			И (РЦП.АптекаКод = &СкладКод)
	      |ГДЕ
	      |	Перемещение.Ссылка = &Ссылка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	Выборка.КодМНН,
	      |	Выборка.НаименованиеМНН
	      |ИЗ
	      |	Выборка КАК Выборка
	      |ГДЕ
	      |	Выборка.КодМНН > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	Выборка.КодПроизводителя КАК КодПроизводителя,
	      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
	      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
	      |ИЗ
	      |	Выборка КАК Выборка
	      |ГДЕ
	      |	Выборка.КодПроизводителя > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
	      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	      |	СУММА(Выборка.СуммаРозн) КАК СуммаРознСНДС
	      |ИЗ
	      |	Выборка КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка._Товар,
	      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
	      |	Выборка._Товар.Код КАК КодТовара,
	      |	Выборка._Товар.Наименование КАК Наименование,
	      |	ПОДСТРОКА(Выборка._Товар.МеждународноеНазвание, 1, 150) КАК МеждународноеНазвание,
	      |	Выборка.КодПроизводителя,
	      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
	      |	Выборка.КодМНН КАК КодМНН,
	      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
	      |	Выборка._Товар.ПККН КАК ПККН,
	      |	ВЫБОР
	      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
	      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
	      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
	      |	КОНЕЦ КАК ДатаВводаВАП,
		  // НДС20/18 
		  // |	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
		  |	ВЫБОР
		  |		КОГДА Выборка._Товар.СтавкаНДС.Код = 3
		  |				И Выборка.ДатаДок < ДАТАВРЕМЯ(2019, 1, 1)
		  |			ТОГДА 18
		  |		ИНАЧЕ Выборка._Товар.СтавкаНДС.Ставка
		  |	КОНЕЦ КАК Ставка,
	      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
	      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
	      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
	      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
		  |	ЕСТЬNULL(Выборка._Товар.МестоХранения.Код,0) КАК МестоХраненияКод,
	      |	Выборка.КоэффициентРазбивки,
		  |	ЕСТЬNULL(Выборка._Товар.Страна.Наименование,"""") как Страна
	      |ИЗ
	      |	Выборка КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка.НомерСтроки,
	      |	Выборка.КодТовара,
	      |	Выборка.КоэффициентРазбивки,
	      |	Выборка.КодПроизводителя,
	      |	Выборка.КоэффициентОприходования,
	      |	Выборка.СрокГодности,
	      |	Выборка.Серия,
	      |	Выборка.eancode,
	      |	Выборка.barcode,
	      |	Выборка.КодПартии,
	      |	Выборка.ФирмаИсходная,
	      |	Выборка.ВидПоступления,
	      |	Выборка.ВидПоступленияИсходный,
	      |	Выборка.ПоставщикКомитентВнутренний,
	      |	Выборка.ПоставщикИсходный,
	      |	Выборка.Поставщик,
	      |	Выборка.НомерГТД,
	      |	Выборка.qnt,
	      |	Выборка.pndsz,
	      |	Выборка.pndsr,
	      |	Выборка.ЦенаЗакуп,
	      |	Выборка.ЦенаПроизводителя,
	      |	Выборка.ЦенаГосРегистрации,
	      |	Выборка.ЦенаЗакупБезНДС,
	      |	Выборка.ЦенаРознУпак,
	      |	Выборка.СуммаРозн,
	      |	Выборка.ЦенаИндивидуальная,
	      |	Выборка.СуммаЗакупБезНДС,
	      |	Выборка.СуммаЗакупНДС,
	      |	Выборка.БэкМаржа
	      |ИЗ
	      |	Выборка КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Выборка";	
		  ИНАЧЕ
	ТХТ = "ВЫБРАТЬ
	      |	Перемещение.Товар КАК _Товар,
	      |	Перемещение.КодТовара КАК КодТовара,
	      |	Перемещение.КоэффициентРазбивки КАК КоэффициентРазбивки,
	      |	ЕСТЬNULL(Партии.Производитель.Код, 0) КАК КодПроизводителя,
	      |	Партии.Производитель.Наименование КАК НаименованиеПроизводителя,
	      |	Партии.Производитель.ПометкаУдаления КАК ПометкаУдаленияПроизводителя,
	      |	Партии.Производитель,
	      |	Перемещение.Коэфф КАК КоэффициентОприходования,
	      |	Партии.СрокГодности,
	      |	ВЫБОР
	      |		КОГДА Партии.Серия = """"
	      |			ТОГДА ""*""
	      |		ИНАЧЕ Партии.Серия
	      |	КОНЕЦ КАК Серия,
	      |	Партии.Баркод КАК eancode,
	      |	Партии.Наименование КАК barcode,
	      |	Партии.ФирмаИсходная,
	      |	Партии.ВидПоступления,
	      |	Партии.ВидПоступленияИсходный,
	      |	Партии.ПоставщикКомитентВнутренний,
	      |	Партии.ПоставщикИсходный,
	      |	Партии.Поставщик,
	      |	Перемещение.КодПартииПолучателя КАК КодПартии,
	      |	Партии.НомерГТД,
	      |	Перемещение.Количество КАК qnt,
	      |	Партии.СтавкаНДСРозн КАК pndsz,
	      |	Партии.СтавкаНДСРозн КАК pndsr,
	      |	Партии.ЦенаГосРегистрации,
	      |	Партии.ЦенаПроизводителяБезНДС КАК ЦенаПроизводителя,
	      |	Перемещение.ЦенаЗакупБезНДС,
	      |	(ВЫРАЗИТЬ(Перемещение.ЦенаЗакупБезНДС * (1 + Перемещение.СтавкаНДС / 100) КАК ЧИСЛО(15, 2))) * Перемещение.КоэффициентРазбивки / Перемещение.Коэфф КАК ЦенаЗакуп,
	      |	Перемещение.СуммаЗакупБезНДС,
	      |	(ВЫРАЗИТЬ(Перемещение.СуммаЗакупБезНДС * (1 + Перемещение.СтавкаНДС / 100) КАК ЧИСЛО(15, 2))) - Перемещение.СуммаЗакупБезНДС КАК СуммаЗакупНДС,
	      |	ЕСТЬNULL(Перемещение.Товар.МНН.Код, 0) КАК КодМНН,
	      |	ЕСТЬNULL(Перемещение.Товар.МНН.Наименование, """") КАК НаименованиеМНН,
	      |	Перемещение.НомерСтроки,
	      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК ЦенаРознУпак,
	      |	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) / Перемещение.КоэффициентРазбивки * Перемещение.Коэфф * Перемещение.Количество КАК СуммаРозн,
	      |	ВЫБОР
	      |		КОГДА НЕ РЦП.Цена ЕСТЬ NULL 
	      |			ТОГДА 1
	      |		ИНАЧЕ 0
	      |	КОНЕЦ КАК ЦенаИндивидуальная,
	      |	Партии.БэкМаржа,
	      |	Перемещение.Ссылка.Дата КАК ДатаДок	  
	      |ПОМЕСТИТЬ Выборка
	      |ИЗ
	      |	Документ.УЗ_Перемещение.Товар КАК Перемещение
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	      |		ПО (Партии.Код = Перемещение.КодПартииПолучателя)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	      |		ПО Перемещение.КодТовара = РЦ.ТоварКод
	      |			И (РЦ.АптекаКод = &СкладКод)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	      |		ПО  Перемещение.КодПартииПолучателя = РЦП.ПартияКод
	      |			И (РЦП.АптекаКод = &СкладКод)
	      |ГДЕ
	      |	Перемещение.Ссылка = &Ссылка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	Выборка.КодМНН,
	      |	Выборка.НаименованиеМНН
	      |ИЗ
	      |	Выборка КАК Выборка
	      |ГДЕ
	      |	Выборка.КодМНН > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	Выборка.КодПроизводителя КАК КодПроизводителя,
	      |	Выборка.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
	      |	Выборка.ПометкаУдаленияПроизводителя КАК ПометкаУдаленияПроизводителя
	      |ИЗ
	      |	Выборка КАК Выборка
	      |ГДЕ
	      |	Выборка.КодПроизводителя > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СУММА(Выборка.СуммаЗакупНДС) КАК СуммаЗакупНДС,
	      |	СУММА(Выборка.СуммаЗакупБезНДС) КАК СуммаЗакупБезНДС,
	      |	СУММА(Выборка.СуммаРозн) КАК СуммаРознСНДС
	      |ИЗ
	      |	Выборка КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка._Товар,
	      |	Выборка._Товар.ПометкаУдаления КАК ПометкаУдаления,
	      |	Выборка._Товар.Код КАК КодТовара,
	      |	Выборка._Товар.Наименование КАК Наименование,
	      |	ПОДСТРОКА(Выборка._Товар.МеждународноеНазвание, 1, 150) КАК МеждународноеНазвание,
	      |	Выборка.КодПроизводителя,
	      |	Выборка._Товар.УчаствуетВАП КАК УчаствуетВАП,
	      |	Выборка.КодМНН КАК КодМНН,
	      |	Выборка._Товар.ЖНВЛС КАК ЖНВЛС,
	      |	Выборка._Товар.ПККН КАК ПККН,
	      |	ВЫБОР
	      |		КОГДА Выборка._Товар.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
	      |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
	      |		ИНАЧЕ Выборка._Товар.ДатаВводаВАП
	      |	КОНЕЦ КАК ДатаВводаВАП,
		  // НДС20/18 
		  // |	Выборка._Товар.СтавкаНДС.Ставка КАК Ставка,
		  |	ВЫБОР
		  |		КОГДА Выборка._Товар.СтавкаНДС.Код = 3
		  |				И Выборка.ДатаДок < ДАТАВРЕМЯ(2019, 1, 1)
		  |			ТОГДА 18
		  |		ИНАЧЕ Выборка._Товар.СтавкаНДС.Ставка
		  |	КОНЕЦ КАК Ставка,
	      |	Выборка._Товар.РозничнаяЦена КАК РозничнаяЦена,
	      |	Выборка._Товар.АптечныйОБ КАК ОбязательноеНаличие,
	      |	Выборка._Товар.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
	      |	Выборка._Товар.ОтпускПоРецепту КАК ОтпускПоРецепту,
		  |	ЕСТЬNULL(Выборка._Товар.МестоХранения.Код,0) КАК МестоХраненияКод,
	      |	Выборка.КоэффициентРазбивки,
		  |	ЕСТЬNULL(Выборка._Товар.Страна.Наименование,"""") как Страна
	      |ИЗ
	      |	Выборка КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка.НомерСтроки,
	      |	Выборка.КодТовара,
	      |	Выборка.КоэффициентРазбивки,
	      |	Выборка.КодПроизводителя,
	      |	Выборка.КоэффициентОприходования,
	      |	Выборка.СрокГодности,
	      |	Выборка.Серия,
	      |	Выборка.eancode,
	      |	Выборка.barcode,
	      |	Выборка.КодПартии,
	      |	Выборка.ФирмаИсходная,
	      |	Выборка.ВидПоступления,
	      |	Выборка.ВидПоступленияИсходный,
	      |	Выборка.ПоставщикКомитентВнутренний,
	      |	Выборка.ПоставщикИсходный,
	      |	Выборка.Поставщик,
	      |	Выборка.НомерГТД,
	      |	Выборка.qnt,
	      |	Выборка.pndsz,
	      |	Выборка.pndsr,
	      |	Выборка.ЦенаЗакуп,
	      |	Выборка.ЦенаПроизводителя,
	      |	Выборка.ЦенаГосРегистрации,
	      |	Выборка.ЦенаЗакупБезНДС,
	      |	Выборка.ЦенаРознУпак,
	      |	Выборка.СуммаРозн,
	      |	Выборка.ЦенаИндивидуальная,
	      |	Выборка.СуммаЗакупБезНДС,
	      |	Выборка.СуммаЗакупНДС,
	      |	Выборка.БэкМаржа
	      |ИЗ
	      |	Выборка КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Выборка";				  
			  КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.УстановитьПараметр("СкладКод",СкладПолучатель.Код);
			Результат				= Запрос.ВыполнитьПакет();	   
			ВыборкаМНН				= Результат[1].Выбрать();
			ВыборкаПроизводители	= Результат[2].Выбрать();
			ВыборкаИтоги			= Результат[3].Выбрать();
			ВыборкаТовары			= Результат[4].Выбрать();
			ВыборкаСтроки			= Результат[5].Выбрать();
			
			ВыборкаИтоги.Следующий(); //на первую строку
			ЕстьНулевыеЦены = Ложь;
			Пока ВыборкаСтроки.Следующий() Цикл
				Если ВыборкаСтроки.ЦенаРознУпак = 0 и  ВыборкаСтроки.ВидПоступления <> 3 Тогда
					ЕстьНулевыеЦены = Истина;
					#Если Клиент Тогда
						Сообщить("Строка: " + ВыборкаСтроки.НомерСтроки + " имеет нулевую розничную цену в регистре цен");
					#КонецЕсли
				КонецЕсли;
			КонецЦикла;
			ВыборкаСтроки.Сбросить();
			Если ЕстьНулевыеЦены Тогда
					#Если Клиент Тогда
						Предупреждение("В документе есть позиции с нулевыми ценами в регистре цен. Выгрузка не может быть выполнена");
					#КонецЕсли
				Возврат Ложь;
			КонецЕсли;
		
	ЗаписьXML = Новый ТекстовыйДокумент;
	
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");
	ЗаписьXML.ДобавитьСтроку("<document>"); 
	ЗаписатьЭлементXML(ЗаписьXML, "pack_type", "IN_TRANSFER"); 
	ЗаписатьЭлементXML(ЗаписьXML, "fmt_ver", "1"); 			
		
	КодКонтрагента = Формат(0,"ЧГ=0");
	Если НЕ (ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.Перемещение или ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитенту ) Тогда
		СформироватьСекцииКонтрагента(ЗаписьXML,КодКонтрагента);
	КонецЕсли;
		
		
		ЗаписьXML.ДобавитьСтроку("<inter_name>");
			Пока ВыборкаМНН.Следующий() Цикл
				ЗаписьXML.ДобавитьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(ВыборкаМНН.КодМНН,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаМНН.НаименованиеМНН)));
				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
				ЗаписьXML.ДобавитьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ДобавитьСтроку("</inter_name>"); //конец записи секции  "mnn"
		
		
		ЗаписьXML.ДобавитьСтроку("<producer>");
			Пока ВыборкаПроизводители.Следующий() Цикл
				ЗаписьXML.ДобавитьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаПроизводители.КодПроизводителя,"ЧГ=0; ЧН=0") );
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаПроизводители.ПометкаУдаленияПроизводителя)); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаПроизводители.НаименованиеПроизводителя)));
				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
				   ЗаписатьЭлементXML(ЗаписьXML, "id_country",	"0");
				   ЗаписатьЭлементXML(ЗаписьXML, "is_importer",	"0");
				ЗаписьXML.ДобавитьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ДобавитьСтроку("</producer>"); //конец записи секции  "producer"

		ЗаписьXML.ДобавитьСтроку("<goods>");
			Пока ВыборкаТовары.Следующий() Цикл
				ЗаписьXML.ДобавитьСтроку("<row>");
				  ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаТовары.КодТовара,"ЧГ=0"));
				  ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Формат(Число(ВыборкаТовары.ПометкаУдаления),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_active",	"" + Формат(Число(ВыборкаТовары.УчаствуетВАП),"ЧН=0"));
				  ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Наименование)));
				  ЗаписатьЭлементXML(ЗаписьXML, "descr_ecr",	"");
				  ЗаписатьЭлементXML(ЗаписьXML, "descr_en",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.МеждународноеНазвание)));
				  ЗаписатьЭлементXML(ЗаписьXML, "article",		""); 
				  ЗаписатьЭлементXML(ЗаписьXML, "p_vat",		Формат(ВыборкаТовары.Ставка,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ap",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ftg",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_main","0"); //основная группа
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_general","0"); //обобщенная группа
				  ЗаписатьЭлементXML(ЗаписьXML, "id_brand_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_trade_name","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_inter_name",Формат(ВыборкаТовары.КодМНН,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_category_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_sub_category_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_med_form",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_destination","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_prod_form",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_storing_place",Формат(ВыборкаТовары.МестоХраненияКод,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_life_important","" + Формат(Число(ВыборкаТовары.ЖНВЛС),"ЧН=0"));  
				  ЗаписатьЭлементXML(ЗаписьXML, "is_social_important","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(ВыборкаТовары.ПККН),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_mandatory",		"" + Число(ВыборкаТовары.ОбязательноеНаличие)); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_prescription","" + Формат(Число(ВыборкаТовары.ОтпускПоРецепту),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "date_in", 		Формат(ВыборкаТовары.ДатаВВодаВАП,"ДФ=dd.MM.yyyy")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "producer_country_descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаТовары.Страна)));
				ЗаписьXML.ДобавитьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ДобавитьСтроку("</goods>"); //конец записи секции  "good"

		ЗаписьXML.ДобавитьСтроку("<gpart>");
			Пока ВыборкаСтроки.Следующий() Цикл
				ЗаписьXML.ДобавитьСтроку("<row>");
				    ЗаписатьЭлементXML(ЗаписьXML, "id"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
  					ЗаписатьЭлементXML(ЗаписьXML, "id_goods", Формат(ВыборкаСтроки.КодТовара,"ЧГ=0") ); 
  					ЗаписатьЭлементXML(ЗаписьXML, "id_producer", Формат(ВыборкаСтроки.КодПроизводителя,"ЧГ=0; ЧН=0") );
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_pur",Формат(ВыборкаСтроки.pndsz,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_rtl"	,Формат(ВыборкаСтроки.pndsr,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_reg_wo_vat_pack",Формат(ВыборкаСтроки.ЦенаГосРегистрации,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_prod_wo_vat_pack"	,Формат(ВыборкаСтроки.ЦенаПроизводителя,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "dvalid_supp"		,Формат(ВыборкаСтроки.СрокГодности,"ДФ=dd.MM.yyyy")); 
					ЗаписатьЭлементXML(ЗаписьXML, "series"		,КорректировкаСпецСимволов(ВыборкаСтроки.Серия)); 
					ЗаписатьЭлементXML(ЗаписьXML, "eancode_supp"		,ВыборкаСтроки.eancode); 
					ЗаписатьЭлементXML(ЗаписьXML, "barcode"		,ВыборкаСтроки.barcode); 
					ЗаписатьЭлементXML(ЗаписьXML, "stcdn"		,КорректировкаСпецСимволов(ВыборкаСтроки.НомерГТД)); 
					ЗаписатьЭлементXML(ЗаписьXML, "certif"		,""); 
					ЗаписатьЭлементXML(ЗаписьXML, "back_margin"	,Формат(ВыборкаСтроки.БэкМаржа,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "coeff"			,Формат(ВыборкаСтроки.КоэффициентРазбивки,"ЧГ=0; ЧН=0") ) ;
					ЗаписатьЭлементXML(ЗаписьXML, "guid"		,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакупБезНДС/ВыборкаСтроки.КоэффициентОприходования,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДС*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack_supp" 	,Формат(ВыборкаСтроки.ЦенаЗакупБезНДС*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаЗакуп/ВыборкаСтроки.КоэффициентОприходования,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat_pack" 	,Формат(ВыборкаСтроки.ЦенаЗакуп*ВыборкаСтроки.КоэффициентРазбивки/ВыборкаСтроки.КоэффициентОприходования,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat" 	,Формат(Окр(ВыборкаСтроки.ЦенаРознУпак/ВыборкаСтроки.КоэффициентРазбивки,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat_pack"	,Формат(ВыборкаСтроки.ЦенаРознУпак,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "is_individual_price"	,	ВыборкаСтроки.ЦенаИндивидуальная); 
					Если ВыборкаСтроки.КоэффициентРазбивки <> ВыборкаСтроки.КоэффициентОприходования и ВыборкаСтроки.КоэффициентОприходования = 1 Тогда
						ЗаписатьЭлементXML(ЗаписьXML, "is_opened","1");
					Иначе
  						ЗаписатьЭлементXML(ЗаписьXML, "is_opened","0");
					КонецЕсли;
					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent_initial"		,Формат(ВыборкаСтроки.ПоставщикИсходный,"ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_firm_initial"		,	Формат(ВыборкаСтроки.ФирмаИсходная,"ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent"		,	Формат(ВыборкаСтроки.Поставщик,"ЧГ=0")); 
					Если ВыборкаСтроки.ПоставщикКомитентВнутренний > 0 Тогда
						ЗаписатьЭлементXML(ЗаписьXML, "id_consignor"		,	Формат(ВыборкаСтроки.ПоставщикКомитентВнутренний,"ЧГ=0")); 
					КонецЕсли;
					ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond_initial",	"" + ВыборкаСтроки.ВидПоступленияИсходный);
					
					Если ВыборкаСтроки.ПоставщикКомитентВнутренний > 0 и ВыборкаСтроки.ВидПоступления = 1 Тогда
						ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond",	"0");
					Иначе
						ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond",	"" + ВыборкаСтроки.ВидПоступления);
					КонецЕсли;
 
					
				ЗаписьXML.ДобавитьСтроку("</row>");
			КонецЦикла;
		ЗаписьXML.ДобавитьСтроку("</gpart>"); //конец записи секции  "str"
		
		
		ЗаписьXML.ДобавитьСтроку("<hdr>");
				ЗаписатьЭлементXML(ЗаписьXML, "id_doc_type", 	"205"); 
				ЗаписатьЭлементXML(ЗаписьXML, "guid", СокрЛП(ИДДокументаАптекиПолучатель)); 
				Если Статус = Перечисления.СтатусыПеремещения.Аннулирован Тогда
					ЗаписатьЭлементXML(ЗаписьXML, "status",	Перечисления.СтатусДокАптеки.Индекс(Перечисления.СтатусДокАптеки.Аннулирован)); 
				Иначе
					ЗаписатьЭлементXML(ЗаписьXML, "status",	"1"); 
				КонецЕсли;
				Если ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитенту или 
					ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.Перемещение Тогда
					ЗаписатьЭлементXML(ЗаписьXML, "is_internal_transfer","1"); 	
				Иначе	
					ЗаписатьЭлементXML(ЗаписьXML, "is_internal_transfer","0"); 	
				КонецЕсли;
				ЗаписатьЭлементXML(ЗаписьXML, "id_doc_subtype",	Перечисления.ВидыОперацийПеремещений.Индекс(ВидОперацииПеремещения)); 
				ЗаписатьЭлементXML(ЗаписьXML, "id_dep",		Формат(СкладОтправитель.Код,"ЧГ=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "ndoc",		Формат(СкладПолучатель.Код,"ЧГ=0") + "/" + Формат(Номер,"ЧГ=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "ndoc_supp",	КорректировкаСпецСимволов(СокрЛП(НомДокАптекиОтправителя))); 
				ЗаписатьЭлементXML(ЗаписьXML, "ddoc",		Формат(Дата,"ДФ=dd.MM.yyyy"));
				ЗаписатьЭлементXML(ЗаписьXML, "ddoc_supp",	Формат(Дата,"ДФ=dd.MM.yyyy"));
				Если НЕ (ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.Перемещение или ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитенту) Тогда
					ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond",	"" + Перечисления.ВидыПоступленияТоваров.Индекс(Перечисления.ВидыПоступленияТоваров.Покупка)); 
				//Иначе
				//	ЗаписьXML.ДобавитьСтроку("<id_supp_cond/>");
				КонецЕсли;
				Если ЗначениеЗаполнено(ПоставщикКомитентПолучатель) Тогда
					ЗаписатьЭлементXML(ЗаписьXML, "id_consignor"		,	Формат(ПоставщикКомитентПолучатель.Код,"ЧГ=0"));
				КонецЕсли;
				//ЗаписатьЭлементXML(ЗаписьXML, "id_firm",	Формат(Документ.Фирма.Код,"ЧГ=0"));
				//ЗаписатьЭлементXML(ЗаписьXML, "id_dep",	Формат(Документ.Склад.Код,"ЧГ=0"));	
				//ЗаписатьЭлементXML(ЗаписьXML, "id_dep_section", "0");
				//Если КодКонтрагента > 0 Тогда
				ЗаписатьЭлементXML(ЗаписьXML, "id_contragent", КодКонтрагента);	
				ЗаписатьЭлементXML(ЗаписьXML, "nboxes",		Формат(КоличествоМест,"ЧГ=0; ЧН=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "transport_agent",	КорректировкаСпецСимволов(СокрЛП(Перевозчик.Наименование))); 
				//Иначе
				//	ЗаписьXML.ДобавитьСтроку("<id_contragent/>");
				//КонецЕсли;
				ЗаписатьЭлементXML(ЗаписьXML, "dsc_office", 		КорректировкаСпецСимволов(СокрЛП(Комментарий)));	
				ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep", 			КорректировкаСпецСимволов(СокрЛП(КомментарийАптеки)));	
				
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat",	Формат(ВыборкаИтоги.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				//ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_w_vat",	Формат(ВыборкаИтоги.СуммаЗакупСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat",	Формат(ВыборкаИтоги.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				 //ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_vat",	Формат(ВыборкаИтоги.СуммаРознНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat",	Формат(ВыборкаИтоги.СуммаРознСНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
	  	ЗаписьXML.ДобавитьСтроку("</hdr>"); //конец записи секции  "hdr"
		
		ВыборкаСтроки.Сбросить();
		ЗаписьXML.ДобавитьСтроку("<str>");
		Пока ВыборкаСтроки.Следующий() Цикл
			ЗаписьXML.ДобавитьСтроку("<row>");
				ЗаписатьЭлементXML(ЗаписьXML, "guid_gpart"	,Формат(ВыборкаСтроки.КодПартии,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "idx"			,Формат(ВыборкаСтроки.НомерСтроки,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "qnt"			,Формат(ВыборкаСтроки.qnt*ВыборкаСтроки.КоэффициентОприходования,"ЧГ=0; ЧН=0")); 
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_vat"	,Формат(ВыборкаСтроки.СуммаЗакупНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_pur_wo_vat"	,Формат(ВыборкаСтроки.СуммаЗакупБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
				ЗаписатьЭлементXML(ЗаписьXML, "sum_rtl_w_vat"	,Формат(ВыборкаСтроки.СуммаРозн,"ЧРД=.; ЧН=0; ЧГ=0"));
				//ЗаписатьЭлементXML(ЗаписьXML, "dsc_dep"		,"");
			ЗаписьXML.ДобавитьСтроку("</row>");
		КонецЦикла;
		ЗаписьXML.ДобавитьСтроку("</str>"); //конец записи секции  "str"
		
	ЗаписьXML.ДобавитьСтроку("</document>"); //конец записи секции  "document"
	ВесьТекст = ЗаписьXML.ПолучитьТекст();
	ЗаписьXML.Очистить();
	ЗаписьXML = Неопределено;
	
	КодСклада = СкладПолучатель.Код;
	//КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	//Если КодСчетчика = -1 Тогда
	//	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	//	Если КодСчетчика = -1 Тогда
	//		Возврат Ложь;	
	//	КонецЕсли;
	//КонецЕсли;
	
	//к = Число("раздватри");
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = 1;
	МЗ.КодАптеки = КодСклада;
	МЗ.ТипУпаковки = "IN_TRANSFER";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "in_transfer_" + СокрЛП(Формат(КодСклада,"ЧГ=0")) + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.ИдентификаторДокумента = ИДДокументаАптекиПолучатель;
	МЗ.Записать();	
	
	ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Ссылка,"Выгружен в аптеку",ПараметрыСеанса.ТекущийСотр,"Выгружен в аптеку получателя");	
	
	Возврат Истина;
	//ПереместитьФайл(ИмяФайла,Склад.КаталогОбмена + "\in_pst_" + Формат(Номер,"ЧГ=0; ЧН=0") + ".xml");
	//Сообщить("" + Склад.КаталогОбмена + "\in_pst_" + Формат(Номер,"ЧГ=0; ЧН=0") + ".xml");
	
	
	
	
КонецФункции



Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//Порядок	Ссылка
//0	Перемещение     +
//1	Купля продажа   +
//2	Передача на комиссию  +
//3	Возврат комитенту    +
//4	Возврат комитенту и передача на комиссию   +
//5	Возврат комитенту и продажа	 +
	
	Если ФирмаОтправитель = ФирмаПолучатель Тогда
		ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.Перемещение;
		ВнутреннееПеремещение = Истина;
	Иначе
		ФирмаКомитентОтправитель = СкладОтправитель.ФирмаКомитент;
		ФирмаКомитентПолучатель = СкладПолучатель.ФирмаКомитент;
		
		Если НЕ ФирмаКомитентОтправитель.Пустая() Тогда
			ПоставщикКомитентОтправитель = ФирмаКомитентОтправитель.ФирмаКакПоставщик;
		КонецЕсли;
		
		Если НЕ ФирмаКомитентПолучатель.Пустая() Тогда
			ПоставщикКомитентПолучатель = ФирмаКомитентПолучатель.ФирмаКакПоставщик;
		КонецЕсли;		
		
		Если ФирмаКомитентОтправитель.Пустая() и ФирмаКомитентПолучатель.Пустая() Тогда
			ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.КупляПродажа;
			
		ИначеЕсли ФирмаКомитентОтправитель = ФирмаКомитентПолучатель Тогда
			ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПередачаНаКомиссию;
			
		ИначеЕсли ФирмаКомитентОтправитель.Пустая() и НЕ ФирмаКомитентПолучатель.Пустая() Тогда
			ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ПередачаНаКомиссию;
			
		ИначеЕсли НЕ ФирмаКомитентОтправитель.Пустая() и ФирмаКомитентПолучатель.Пустая() Тогда
			Если ФирмаКомитентОтправитель = ФирмаПолучатель Тогда
				ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитенту;	
			Иначе
				ВидОперацииПеремещения = Перечисления.ВидыОперацийПеремещений.ВозвратКомитентуИПродажа;	
			КонецЕсли;
		КонецЕсли;
		
		ВнутреннееПеремещение = Ложь;
	КонецЕсли;
	
	Если НЕ Статус = Перечисления.СтатусыПеремещения.Аннулирован Тогда
			Если НЕ Согласован Тогда
				Статус = Перечисления.СтатусыПеремещения.ОжидаетСогласования;
				
			ИначеЕсли НЕ ДатаОприходованияПолучателем = Дата(1,1,1) Тогда	
				Статус = Перечисления.СтатусыПеремещения.Завершен;
				
			ИначеЕсли НЕ ДатаФактическойОтгрузки = Дата(1,1,1) Тогда
				Статус = Перечисления.СтатусыПеремещения.ВПути;
				
			ИначеЕсли НЕ ДатаПлановойОтгрузки = Дата(1,1,1) Тогда
				Статус = Перечисления.СтатусыПеремещения.ОжидаетОтгрузку;
				
			Иначе 
				Статус = Перечисления.СтатусыПеремещения.НазначениеПеревозчика;
			КонецЕсли;
	КонецЕсли;	
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Удачно = ПроверитьНаЗаполнениеПриПроведении();
		Если Не Удачно Тогда
			Отказ = Истина;
			Возврат;	  
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДокСсылка = ПолучитьСсылкуНового();	
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			ДокСсылка = Документы.УЗ_Перемещение.ПолучитьСсылку();	
			УстановитьСсылкуНового(ДокСсылка);
		КонецЕсли;
		ИДДокументаАптекиПолучатель = XMLСтрока(ДокСсылка);
		

	Иначе
		Если СокрЛП(НомДокАптекиОтправителя) = "" Тогда
			НомДокАптекиОтправителя = Формат(Номер,"ЧГ=0");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВнутреннееПеремещение и НЕ СтатусДокАптекиОтправителя = Перечисления.СтатусДокАптеки.Аннулирован Тогда
			Если ЭтоНовый() Тогда
				Удачно = СоздатьПартииПолучателяТовара(ДокСсылка);
			Иначе
				Удачно = СоздатьПартииПолучателяТовара(Ссылка);
			КонецЕсли;
			Если НЕ Удачно Тогда
				Отказ = Истина;
			КонецЕсли;
	КонецЕсли;	
	
	СуммаЗакупБезНДС = Товар.Итог("СуммаЗакупБезНДС");
	
	
	ОбщегоНазначения.ЗаписатьСменуСостоянияДокумента(Ссылка,РежимЗаписи,ПометкаУдаления);
	
	
КонецПроцедуры

