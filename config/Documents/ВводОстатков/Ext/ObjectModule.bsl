//============================================================================= 
Процедура СформироватьСтруктуруДБФ(ТЗ,ДБФ)
			
			//============================< Генерим структуру DBF по ТЗ >================================GtG===
			Для Каждого Кол из ТЗ.Колонки Цикл
				//----------------------------------------------------------------------
				// Номер документа, дата и код аптеки нам в теле DBF не нужны, посему пропускаем их
				Если (Кол.Имя = "NDOC") или (Кол.Имя = "DateDoc") или (Кол.Имя = "PODRCD") Тогда
					Продолжить;
				КонецЕсли;
				//--------------------------------------------------------Virus----КОНЕЦ--28.11.2007
				
				Если Кол.ТипЗначения.СодержитТип(Тип("Дата")) ТОгда
					Т="D";
					Д=0;
					Тч=0;
				ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Число")) Тогда	
					Т="N";
					Д=15;
					Тч=2;
				ИначеЕсли Кол.ТипЗначения.СодержитТип(Тип("Строка")) Тогда	
					Т="S";
					Д=150;
					Тч=0;
				Иначе
					Сообщить("хрен знает какой тип");
				КонецЕсли;
				
				Если (Кол.Имя = "EAN13") или (Кол.Имя = "ExtParty") Тогда
					Т="S";
					Д=13;
					Тч=0;
				ИначеЕсли (Кол.Имя = "NameOKEI") или (Кол.Имя = "NDefOKEI") Тогда
					Т="S";
					Д=10;
					Тч=0;
				ИначеЕсли (Кол.Имя = "INN") Тогда
					Т="S";
					Д=12;
					Тч=0;
				ИначеЕсли (Кол.Имя = "KPP") Тогда
					Т="S";
					Д=9;
					Тч=0;
				ИначеЕсли (Кол.Имя = "NZAKSTR") Тогда
					Т="S";
					Д=20;
					Тч=0;
				КонецЕсли;
				
				
				
				
				ДБФ.поля.Добавить(Кол.Имя,Т,Д,Тч);
			КонецЦикла;
	
КонецПроцедуры

Функция Архивация(Файл)
	//Проверяем на наличие файла (на всяк случай ), потом геть его в архив, а dbf удаляем
	ВремФайл = Новый Файл(Файл);
	Если ВремФайл.Существует() Тогда
		ИмяАрхива = ВремФайл.Путь + "" + ВремФайл.ИмяБезРасширения + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный); 
		ФайлАрхива.Добавить(Файл, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно); 
		ФайлАрхива.Записать();
		УдалитьФайлы(Файл);
	КонецЕсли;
	Возврат Новый Файл(ИмяАрхива);
КонецФункции


Функция СоздатьДБФ(номер,ВремИмяФайла)
	
			ДБФ= Новый  Xbase;
			ДБФ.Кодировка = КодировкаXBase.OEM;
			ДБФ.поля.Добавить("NDOC","N",10,0);
			ДБФ.поля.Добавить("DDOC","D");
			ДБФ.поля.Добавить("idtype","N",3,0);
			ДБФ.поля.Добавить("idfirm","N",3,0);
			ДБФ.поля.Добавить("iddep","N",5,0);
			ДБФ.поля.Добавить("ndep","S",200);
			ДБФ.поля.Добавить("szwonds","N",15,2);			
			ДБФ.поля.Добавить("szwnds","N",15,2);			
			ДБФ.поля.Добавить("srwonds","N",15,2);			
			ДБФ.поля.Добавить("srwnds","N",15,2);			
			
			ДБФ.поля.Добавить("idgood","N",10,0);
			ДБФ.поля.Добавить("ngood","S",150);
			ДБФ.поля.Добавить("idprod","N",10,0);
			ДБФ.поля.Добавить("nprod","S",150);
			ДБФ.поля.Добавить("coeff","N",10,0);
			ДБФ.поля.Добавить("coeffp","N",10,0);
			ДБФ.поля.Добавить("dvalid","D");
			ДБФ.поля.Добавить("series","S",30,0);
			ДБФ.поля.Добавить("eancode","S","13");
			ДБФ.поля.Добавить("barcode","S","13");
			ДБФ.поля.Добавить("extpart","S",13);
			ДБФ.поля.Добавить("idngtd","N",10,0);
			ДБФ.поля.Добавить("nngtd","S",30);
			ДБФ.поля.Добавить("idcnt","N",10,0);
			ДБФ.поля.Добавить("ncnt","S",50);
			ДБФ.поля.Добавить("cntcode3","S",5);
			ДБФ.поля.Добавить("qntd","N",15,2);
			ДБФ.поля.Добавить("pndsz","N",15,2);
			ДБФ.поля.Добавить("pndsr","N",15,2);
			ДБФ.поля.Добавить("czwonds","N",15,2);
			ДБФ.поля.Добавить("czwnds","N",15,2);
			ДБФ.поля.Добавить("crwonds","N",15,2);
			ДБФ.поля.Добавить("crwnds","N",15,2);
			ДБФ.поля.Добавить("sszwonds","N",15,2);
			ДБФ.поля.Добавить("ssznds","N",15,2);
			ДБФ.поля.Добавить("sszwnds","N",15,2);
			ДБФ.поля.Добавить("ssrwonds","N",15,2);
			ДБФ.поля.Добавить("ssrnds","N",15,2);
			ДБФ.поля.Добавить("ssrwnds","N",15,2);
			ДБФ.поля.Добавить("costreg","N",15,2);
			
			ДБФ.поля.Добавить("idcontr","N",15,0);
			ДБФ.поля.Добавить("ncontr","S",150);				  
			ДБФ.поля.Добавить("inncontr","S",15);				  
			ДБФ.поля.Добавить("kppcontr","S",15); 
			ДБФ.поля.Добавить("idsubtype","N",3);
			ДБФ.поля.Добавить("latname","S",100);
			
			Попытка
				ДБФ.СоздатьФайл(ВремИмяФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
			
	        Возврат ДБФ;
	
КонецФункции

Функция ВыгрузитьВАптеку() Экспорт
	
	КаталогФТП = Константы.КаталогФТП.Получить();
	//ВременныйКаталог = КаталогФТП;"\\z140\Astor_Ph2\Mail\";
	ДБФ= Новый  Xbase;
	ДБФ.Кодировка = КодировкаXBase.ANSI;
	
	ТХТ = "ВЫБРАТЬ
	|	ПеремещениеТовараТовар.Ссылка.Номер КАК NDOC,
	|	ПеремещениеТовараТовар.Ссылка.Дата КАК DateDoc,
	|	ПеремещениеТовараТовар.Ссылка.Склад.Код КАК PODRCD,
	|	0 КАК NumZak,
	|	ПеремещениеТовараТовар.ЕИТ.Код КАК CodeEIT,
	|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.Код КАК CodeDefEIT,
	|	ПеремещениеТовараТовар.Баркод.Производитель.Код КАК CodeIzg,
	|	ПеремещениеТовараТовар.Серия.СрокГодности КАК GDate,				
	|	ПеремещениеТовараТовар.КоличествоФакт КАК Qnt,
	|	ПеремещениеТовараТовар.Партия.ЦенаПроизводителяБезНДС  КАК Price_Izg,
	|	ПеремещениеТовараТовар.ЦенаЗакуп КАК PricePost,
	|	ПеремещениеТовараТовар.ЦенаРозн КАК PriceR,
	|	ПеремещениеТовараТовар.СтавкаНДС.Ставка КАК Nds,				
	|	ПеремещениеТовараТовар.Серия.Наименование КАК Ser,
	|	ВЫБОР КОГДА ПеремещениеТовараТовар.Партия.БарКод.Наименование ЕСТЬ NULL ТОГДА
	|		ПеремещениеТовараТовар.Партия.Наименование
	|	ИНАЧЕ
	|		ПеремещениеТовараТовар.Партия.БарКод.Наименование КОНЕЦ КАК EAN13,
	|	ПеремещениеТовараТовар.Партия.Наименование КАК ExtParty,
	|	ПеремещениеТовараТовар.ЕИТ.ЕдИзм.Код КАК OKEI,
	|	ПеремещениеТовараТовар.ЕИТ.ЕдИзм.Наименование КАК NameOKEI,
	|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.ЕдИзм.Код КАК CodDefOKEI,
	|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.ЕдИзм.Наименование КАК NDefOKEI,
	|	ПеремещениеТовараТовар.Товар.ГруппаФТГ.Код КАК CodeFTG,
	|	ПеремещениеТовараТовар.Товар.ГруппаФТГ.Наименование КАК NameFTG,
	|	ПеремещениеТовараТовар.ЕИТ.НаименованиеТовара КАК NameGood,
	|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.НаименованиеТовара КАК NGoodEIT,
	|	ПеремещениеТовараТовар.Коэфф КАК Koeff,					   
	|	ПеремещениеТовараТовар.Товар.ЕдиницаМин.К КАК KoefDefEIT,
	|	ПеремещениеТовараТовар.Баркод.Производитель.Наименование КАК NameIzg,
	|	ПеремещениеТовараТовар.Партия.НомерГТД.Наименование КАК GTD,
	|	ПеремещениеТовараТовар.Партия.НомерГТД.Страна.Наименование КАК Country 
	|ИЗ
	|	Документ.ВводОстатков.Товар КАК ПеремещениеТовараТовар
	|ГДЕ
	|	ПеремещениеТовараТовар.Ссылка = &Док
	|
	|УПОРЯДОЧИТЬ ПО
	|	DATEDOC,
	|	NDOC";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Док",ЭтотОбъект.Ссылка);
	
	Рез=Запрос.Выполнить();
	
	ТЗ=Рез.Выгрузить();
	
	СформироватьСтруктуруДБФ(ТЗ,ДБФ);
	
	
	//ФайлВыгрузки=ВременныйКаталог + "temp.dbf";
	ВремНомДок = "";
	ВремИмяФайла = "";
	НормальноеИмяФайла = "";
	КонечныйКаталогФайла = "";
	ВремИмяФайла =ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+ "rsttemp.dbf"; //КонечныйКаталогФайла + "temp.dbf"; 
	Попытка
		ДБФ.СоздатьФайл(ВремИмяФайла); // Создаем новый для обработки следующего документа
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	стр = ТЗ.Получить(0);
	Префикс = "rst";
	ВремНомДок = стр.NDOC;
	КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(Стр.PODRCD)=1,"0"+Стр.PODRCD,Стр.PODRCD) + "\In\";
	ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
	НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + СокрЛП(Стр.PODRCD) + "_" + СокрЛП(Формат(ВремНомДок,"ЧГ=0")) + "_" + СокрЛП(Лев(Стр.DateDoc,10)) +".dbf";
	
	Для Каждого Стр из ТЗ Цикл  //Пробегаем по ТЗ ...дальше будем бегать по полям в текущ. строке
		
		ДБФ.Добавить();
		Инд = 0;
		//------------------<ВАЖНО>-------------------Virus----28.11.2007
		// Обход начинаем с третьей колонки, т.к. нам они нужны только для разделения 
		// одной ТЗ на количество файлов , которое будет соответствовать кол-ву документов в ТЗ.
		// ВЫВОД: в запросе первые три поля НЕ ТРОГАТЬ !!!!!!!!!!!
		Партия = "";
		КоэффПоУмолчанию = 1;
		КодЕИТПоУмолчанию = 0;
		ТоварПоУмолчанию = "";
		Подменять = 0;
		Для к=3 По ТЗ.Колонки.Количество() - 1 Цикл  //пробегаем по значениям полей в строке
			Имя = ТЗ.Колонки.Получить(к);
			//Если Имя.Имя = "ExtParty" Тогда
			//	Партия = стр.Получить(к); 
			//КонецЕсли;
			
			Значение = стр.Получить(к);
			//Если (Имя.Имя = "KoefDefEIT") и (Значение <> 1) Тогда
			//	Подменять = 1;	
			//КонецЕсли;
			
			//Если Подменять = 1 Тогда
			//	Если Имя.Имя = "KoefDefEIT" Тогда
			//		
			//		ТХТ = "ВЫБРАТЬ ПЕРВЫЕ 1
			//		|	ЕИТ.Код КАК Код,
			//		|	ЕИТ.К КАК К,
			//		|	ЕИТ.НаименованиеТовара КАК НаименованиеТовара,
			//		|	ЕИТ.ЕдИзм.Код как КодЕдИзм,
			//		|	ЕИТ.ЕдИзм.Наименование как ИмяЕдИзм
			//		|ИЗ
			//		|	Справочник.ЕИТ КАК ЕИТ
			//		|ГДЕ
			//		|	ЕИТ.Владелец = &ТоварСсылка
			//		|
			//		|УПОРЯДОЧИТЬ ПО
			//		|	К ВОЗР,
			//		|	Код УБЫВ";	
			//		Запрос = Новый Запрос;
			//		Запрос.Текст = ТХТ;
			//		СпрПартия = Справочники.Партии.НайтиПоНаименованию(Партия);
			//		Запрос.УстановитьПараметр("ТоварСсылка",СпрПартия.Владелец);
			//		Рез = Запрос.Выполнить().Выгрузить();
			//		КоэффПоУмолчанию = Рез.Получить(0).К;
			//		КодЕИТПоУмолчанию = Рез.Получить(0).Код;
			//		ТоварПоУмолчанию = Рез.Получить(0).НаименованиеТовара;
			//		КодЕдИзм = Рез.Получить(0).КодЕдИзм;
			//		ИмяЕдИзм = Рез.Получить(0).ИмяЕдИзм;
			//		Значение = КоэффПоУмолчанию;
			//	ИначеЕсли Имя.Имя = "CodeDefEIT" Тогда
			//		Значение = КодЕИТПоУмолчанию;
			//	ИначеЕсли Имя.Имя = "CodDefOKEI" Тогда
			//		Значение = КодЕдИзм;
			//	ИначеЕсли Имя.Имя = "NDefOKEI" Тогда
			//		Значение = ИмяЕдИзм;
			//	ИначеЕсли Имя.Имя = "NGoodEIT" Тогда
			//		Значение = ТоварПоУмолчанию;
			//	КонецЕсли;
			//КонецЕсли;
			
			Если Имя.Имя = "IDPOST" Тогда
				Значение = Формат(100000 + Значение,"ЧГ=0");
			КонецЕсли;					
			
			состояние(Значение);
			ДБф.УстановитьЗначениеПоля(Инд,Значение);
			Инд=Инд+1;
		КонецЦикла;
		//ДБФ.Кодировка = КодировкаXBase.ANSI;
		Дбф.Записать();
		
	КонецЦикла;
	
	Если ДБФ.Открыта()  = Истина Тогда
		ДБФ.ЗакрытьФайл();
	КонецЕсли;
	
	Попытка
		ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла); // переименовываем в норм. вид
		Архивация(НормальноеИмяФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ложь;
	КонецПопытки;
	
	
	Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
	СтрИзм=Изменения.Добавить();
	СтрИзм.Сотрудник    = ПараметрыСеанса.ТекущийСотр;
	СтрИзм.Дата   = ТекущаяДата();
	СтрИзм.ТипИзм   = Перечисления.ДействияНадДокументами.Выгрузка;
	СтрИзм.КомментарийИзменения = "Выгружен в файл";
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);	
	Возврат Истина;
	//ПереместитьФайл(Архив.ПолноеИмя,КонечныйКаталогФайла + "" +Архив.Имя);
	
	
	
КонецФункции

Функция ВыгрузитьВIDS() Экспорт
	
	КаталогФТП = Константы.КаталогФТП.Получить();
	
	ВремИмяФайла =ПараметрыСеанса.КАТАЛОГ_ВРЕМЕННЫХ_ФАЙЛОВ+ "rsttemp.dbf";
	ДБФ = СоздатьДБФ(Номер,ВремИмяФайла);
	Если ДБФ = Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось создать файл для выгрузки : " + ВремИмяФайла);	
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	
	КодСклада = СокрЛП(Формат(Склад.Код,"ЧГ=0"));
	Префикс = "rst";
	КонечныйКаталогФайла = КаталогФТП + "apt_" + ?(СтрДлина(КодСклада)=1,"0"+КодСклада,КодСклада) + "\In\";
	ОМ17_ПроверитьИСоздатьКаталог(КонечныйКаталогФайла);
	НормальноеИмяФайла = КонечныйКаталогФайла + "" + Префикс +"" + КодСклада + "_" + СокрЛП(Формат(Номер,"ЧГ=0")) + "_" + Формат(Дата,"ДФ=dd.MM.yyyy") +".dbf";
	
	
	
	
	ТХТ = "ВЫБРАТЬ
	|	ТЧ.Партия.ВидПоступленияТовара.Порядок КАК id_type,
	|	ТЧ.Ссылка.Фирма.Код КАК id_firm,
	|	ТЧ.Ссылка.Склад.Код КАК id_dep,
	|	ТЧ.Ссылка.Склад.Наименование КАК name_dep,
	|	ТЧ.Товар.Код КАК id_good,
	|	ТЧ.Товар.Наименование КАК name_good,
	|	Подстрока(ТЧ.Товар.МеждународноеНазвание,1,100) КАК latname,
	|	ТЧ.Производитель.Код КАК id_producer,
	|	ТЧ.Производитель.Наименование КАК name_producer,
	|	ТЧ.Коэфф КАК coeffp,
	|	ТЧ.СрокГодности КАК dvalid,
	|	ЕСТЬNULL(ТЧ.СерияСтрока, ""*"") КАК series,
	|	ТЧ.Баркод.Наименование КАК eancode,
	|	ТЧ.Партия.Наименование КАК barcode,
	|	ТЧ.Партия.Код КАК extpart,
	|	ТЧ.НомерГТД.Код КАК id_ngtd,
	|	ТЧ.НомерГТД.Наименование КАК name_ngtd,
	|	ТЧ.НомерГТД.Страна.Код КАК id_country,
	|	ТЧ.НомерГТД.Страна.Наименование КАК name_ngtd_country,
	|	ТЧ.НомерГТД.Страна.КодПоКлассификатору КАК cntcode3,
	|	ТЧ.КоличествоФакт * ТЧ.Коэфф КАК qnt_d,
	|	ТЧ.СуммаЗакуп - ТЧ.НДСЗакуп КАК str_sum_z_wo_nds,
	|	ТЧ.НДСЗакуп КАК str_sum_z_nds,
	|	ТЧ.СуммаЗакуп КАК str_sum_z_w_nds,
	|	ТЧ.СуммаРозн - ТЧ.НДСРозн КАК str_sum_r_wo_nds,
	|	ТЧ.НДСРозн КАК str_sum_r_nds,
	|	ТЧ.СуммаРозн КАК str_sum_r_w_nds,
	|	ТЧ.СтавкаНДС.Ставка КАК p_nds_z,
	|	ТЧ.СтавкаНДС.Ставка КАК p_nds_r,
	|	ТЧ.ЦенаГосРегистрации КАК costreg,
	|	0 КАК Номер,
	|	ТЧ.Поставщик.Код КАК idcontr,
	|	ТЧ.Поставщик.Наименование КАК ncontr,
	|	ТЧ.Поставщик.ИНН КАК inncontr,
	|	ТЧ.Поставщик.КПП КАК kppcontr,
	|	ЕСТЬNULL(ТЧ.Ссылка.ВидВводаОстатков.Порядок,0) КАК idsubtype
	|ИЗ
	|	Документ.ВводОстатков.Товар КАК ТЧ
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	name_good";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТЗЗапроса=Запрос.Выполнить().Выгрузить();
	
	ТЗСумм = ТЗЗапроса.Скопировать(,"номер,str_sum_z_wo_nds, str_sum_z_w_nds, str_sum_r_wo_nds, str_sum_r_w_nds");
	ТЗСумм.Свернуть("номер","str_sum_z_wo_nds, str_sum_z_w_nds, str_sum_r_wo_nds, str_sum_r_w_nds");
	
	ПерваяСтрока = ТЗСумм.Получить(0);
	sum_z_wo_nds	= ПерваяСтрока.str_sum_z_wo_nds;
	sum_z_w_nds		= ПерваяСтрока.str_sum_z_w_nds;
	sum_r_wo_nds	= ПерваяСтрока.str_sum_r_wo_nds;
	sum_r_w_nds		= ПерваяСтрока.str_sum_r_w_nds;
	н=0;
	Для Каждого стр из ТЗЗапроса Цикл		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		н=н+1;
		
		
		ВремКол = стр.qnt_d/стр.coeffp;
		Если ЦЕЛ(ВремКол) = ВремКол Тогда
			Количество = ВремКол;
			КоэффПрив  = 1;
		Иначе
			Количество = стр.qnt_d;
			КоэффПрив  = стр.coeffp;
		КонецЕсли;
		
		ЦенаЗакупСНДС = стр.str_sum_z_w_nds/Количество;
		ЦенаЗакупБНДС = стр.str_sum_z_wo_nds/Количество;
		ЦенаРознСНДС = стр.str_sum_r_w_nds/Количество;
		ЦенаРознБНДС = стр.str_sum_r_wo_nds/Количество;				
		
		
		ДБФ.Добавить();
		ДБФ.NDOC = Номер;
		ДБФ.DDOC = Дата;
		ДБФ.idtype		= стр.id_type;
		ДБФ.iddep		= стр.id_dep;
		ДБФ.ndep	 	= стр.name_dep;
		ДБФ.idfirm	 	= стр.id_firm;
		ДБФ.szwonds= sum_z_wo_nds;	//расчетное		
		ДБФ.szwnds = sum_z_w_nds;	//расчетное		
		ДБФ.srwonds= sum_r_wo_nds;	//расчетное		
		ДБФ.srwnds = sum_r_w_nds;	//расчетное		
		
		ДБФ.idgood		= стр.id_good;
		ДБФ.ngood		= стр.name_good;
		ДБФ.latname		= стр.latname;
		ДБФ.idprod		= стр.id_producer;
		ДБФ.nprod		= стр.name_producer;
		ДБФ.coeff		= стр.coeffp;
		ДБФ.coeffp		= КоэффПрив; //расчетное
		ДБФ.dvalid		= стр.dvalid;
		ДБФ.series		= ?(стр.series="","*",стр.series);
		ДБФ.eancode		= стр.eancode;
		ДБФ.barcode		= стр.barcode;
		ДБФ.extpart		= Формат(стр.extpart,"ЧГ=0");
		ДБФ.idngtd		= стр.id_ngtd;
		ДБФ.nngtd		= стр.name_ngtd;
		ДБФ.idcnt		= стр.id_country;
		ДБФ.ncnt		= стр.name_ngtd_country;
		ДБФ.cntcode3	= Формат(стр.cntcode3,"ЧЦ=3; ЧВН=");
		ДБФ.qntd		= Количество ; //рассчетное
		ДБФ.pndsz		= стр.p_nds_z;
		ДБФ.pndsr		= стр.p_nds_r;
		ДБФ.costreg		= стр.costreg;
		ДБФ.czwonds		= ЦенаЗакупБНДС; //расчетное
		ДБФ.czwnds		= ЦенаЗакупСНДС; //расчетное
		ДБФ.crwonds		= ЦенаРознБНДС; //расчетное
		ДБФ.crwnds		= ЦенаРознСНДС; //расчетное
		ДБФ.sszwonds	= стр.str_sum_z_wo_nds;
		ДБФ.ssznds		= стр.str_sum_z_nds;
		ДБФ.sszwnds		= стр.str_sum_z_w_nds;
		ДБФ.ssrwonds	= стр.str_sum_r_wo_nds;
		ДБФ.ssrnds		= стр.str_sum_r_nds;
		ДБФ.ssrwnds		= стр.str_sum_r_w_nds;				
		
		ДБФ.idcontr		= стр.idcontr;
		ДБФ.ncontr		= стр.ncontr;				  
		ДБФ.inncontr	= ?(ПустаяСтрока(стр.inncontr)=Истина,"0",стр.inncontr);				  
		ДБФ.kppcontr	= ?(ПустаяСтрока(стр.kppcontr)=Истина,"0",стр.kppcontr);				
		ДБФ.idsubtype	= стр.idsubtype;				
		
		Дбф.Записать();
		
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	ПереместитьФайл(ВремИмяФайла,НормальноеИмяФайла);
	Архивация(НормальноеИмяФайла);
	
	Статус = Перечисления.СтатусПрихода.ВыгруженНаАптеку;
	СтрИзм=Изменения.Добавить();
	СтрИзм.Сотрудник    = ПараметрыСеанса.ТекущийСотр;
	СтрИзм.Дата   = ТекущаяДата();
	СтрИзм.ТипИзм   = Перечисления.ДействияНадДокументами.Выгрузка;
	СтрИзм.КомментарийИзменения = "Выгружен в файл (новый формат)";
	
	Для к=0 По 3 Цикл
		Попытка
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);	
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	
	Возврат истина;	
	
	
КонецФункции
//=============================================================================

Процедура МО_ОбновитьДанныеСерии  (ТекСтрДок)  экспорт
    // Назначение:
	// Обновляает данные партии в справочнике партий
	// Партия должна быть
	//--------------------------------------------------------------------------------
	Если ТекСтрДок.Серия=Справочники.Серии.ПустаяСсылка() Тогда
		Возврат; // ибо нехуя
	КонецЕсли;
	
	
	
	Серия=ТекСтрДок.Серия.ПолучитьОбъект(); // ибо ссылка
	Серия.Сертификат=ТекСтрДок.Сертификат;
	Серия.Баркод=ТекСтрДок.Баркод;
	Серия.Записать(); // ибо объект
 КонецПроцедуры

//============================================================================ GtG ===
 Функция ПроверкаНаНули  (Парам) 
     // Назначение:
 	// Проверяет строки товара на наличие строк с нулевыми значениями
 	// 
     // 
 	//--------------------------------------------------------------------------------
	Для Каждого ТекСтрокаТовар Из Товар Цикл
		Если ТекСтрокаТовар[Парам]=0 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЦикла; 	
	
	Возврат Истина;
 КонецФункции
 //============================================================================ GtG ===
 Процедура ПроверитьНаЗаполнение(Отказ)
	
	 

	НайденнаяСтрока = Товар.Найти(0,"Коэфф");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть строки с коэффициентами =0!
					|Это недопустимо!
					|Очевидно проблемы с единицами товаров.");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;


	Если ПроверкаНаНули("ЦенаЗакупБезНДС")=Ложь Тогда
		// Есть строки с 0-ми
		#Если Клиент Тогда
			Сообщить("В документе есть строки без закуп. цены!
			|Это недопустимо!
			|Укажите цену закупочную!");
		#КонецЕсли
		ПроведениеЗакончено=Истина;

		Отказ = ИСТИНА;
		ВОЗВРАТ ;
	КонецЕсли;
	
	НайденнаяСтрока = Товар.Найти(Справочники.Серии.ПустаяСсылка(),"Серия");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
			#Если Клиент Тогда
				Сообщить("В документе есть товар БЕЗ СЕРИЙ!!!
				|Это недопустимо!
				|Укажите серию, или используйте срок годности, если ее нет .");
				ПроведениеЗакончено=Истина;
			#КонецЕсли
			Отказ = Истина;
			Возврат ;
	КонецЕсли;
		
	
	 
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДвижений(ТаблицыДвижений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Запрос.Текст = "
					//0  ВТТовары
	               |
				   |ВЫБРАТЬ
	               |	ТЧ.Товар,
	               |	ТЧ.Ссылка.Склад КАК Склад,
	               |	ТЧ.Партия,
	               |	ТЧ.СтавкаНДС,
	               |	ТЧ.Ссылка.Склад.Фирма КАК Фирма,
	               |	ТЧ.КоличествоФакт * ТЧ.Коэфф КАК КолВо,
	               |	ТЧ.СуммаЗакуп КАК СуммаЗакупСНДС,
	               |	ТЧ.НДСЗакуп КАК СуммаНДСЗакуп,
	               |	ВЫБОР
	               |		КОГДА ТЧ.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн)
	               |			ТОГДА ТЧ.СуммаРозн
	               |		ИНАЧЕ ТЧ.СуммаЗакуп
	               |	КОНЕЦ КАК СуммаРознСНДС,
	               |	ВЫБОР
	               |		КОГДА ТЧ.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн)
	               |			ТОГДА ТЧ.НДСРозн
	               |		ИНАЧЕ ТЧ.НДСЗакуп
	               |	КОНЕЦ КАК СуммаРознНДС,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыОпераций.ПоступлениеТМЦ) КАК ВидОперации,
	               |	ТЧ.ЦенаЗакуп,
	               |	ТЧ.ЦенаРозн,
	               |	ТЧ.КоличествоФакт
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.ВводОстатков.Товар КАК ТЧ
	               |ГДЕ
	               |	ТЧ.Ссылка = &Ссылка
	               |;
	               |
				   //1 Регистр Партии
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Товар,
	               |	ВТТовары.Склад,
	               |	ВТТовары.Партия,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.КолВо,
	               |	ВТТовары.СуммаЗакупСНДС,
	               |	ВТТовары.СуммаНДСЗакуп,
	               |	ВТТовары.СуммаРознСНДС,
	               |	ВТТовары.СуммаРознНДС,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) как ВидДвижения,
				   |	&Дата как Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |;
	               |
				   //2  Регистр СтавокНДС
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Склад,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) как ВидДвижения,
				   |	&Дата как Период,				   
	               |	СУММА(ВТТовары.СуммаЗакупСНДС) КАК СуммаЗакупСНДС,
	               |	СУММА(ВТТовары.СуммаНДСЗакуп) КАК СуммаНДСЗакуп,
	               |	СУММА(ВТТовары.СуммаРознСНДС) КАК СуммаРознСНДС,
	               |	СУММА(ВТТовары.СуммаРознНДС) КАК СуммаРознНДС
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТовары.Склад,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.Фирма,
	               |	ВТТовары.ВидОперации,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
				   |	&Дата				   
	               |;
	               |
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТТовары
	               |;
	               |";
				   
			Результат = Запрос.ВыполнитьПакет();	   
			ТаблицыДвижений.Вставить("ПартииЖНВЛС",				                        Результат[1].Выгрузить());
			ТаблицыДвижений.Вставить("ОстаткиПоСтНДСПоСкладам",		                    Результат[2].Выгрузить());

				   
	
КонецПроцедуры
 
 
 Процедура МО_ПроверкаЦеныПроизводителя(ТСД) Экспорт
	 //цена ропизводителя не должна превышать цены госрегистрации (если они обе есть)
		Если ТСД.ЦенаГосРегистрации<>0 и ТСД.ЦенаПроизводителя<>0 Тогда
			Если ТСД.БойБрак+ТСД.Недовоз<ТСД.Количество ТОгда
				Если ТСД.ЦенаПроизводителя>ТСД.ЦенаГосРегистрации Тогда
					Сообщить("Строка №"+ТСД.НомерСТРОКИ +"   "+ТСД.Товар+" --  цена производителя больше цены госрегистрации! Все в брак, на остатки не приходуем!",СтатусСообщения.Внимание);
					ТСД.БойБрак=ТСД.Количество;
					ТСД.Недовоз=0;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры
 
 Процедура ОбработкаПроведения(Отказ, Режим)
	 
	 //Отключаем проверку на время перевода 36,6
	 ПроверитьИОбновитьДанныеПартии(ЭтотОбъект,Отказ);
	 
	 Если Отказ = Истина Тогда
	 	#Если Клиент Тогда
	    	 Сообщить("Не удалось обновить данные в партиях документа. Документ непроведен",СтатусСообщения.ОченьВажное);
	 	#КонецЕсли		
	 	Возврат;
	 КонецЕсли;
	 
	 //----------------------------< ВАЖНЫЙ МОМЕНТ! >--------------------------------GtG---
	 // Автоматически удалять движения нельзя! ИБО когда происходит расценка непроведенного документа
	 // она накручивает на док движения регистра сведений, а при автоматическом
	 // удалении движений всю эту расценку к херам сносит.
	 //
	 // ПОЭТОМУ: удаляем движения регистров накопления вручную, а регистры сведений не трогаем
	 //-------------------------------------------------------------------------------GtG---
	 
	//============================< Очистка рагистров накопления >================================GtG===
	//Движения.Взаиморасчеты.Очистить(); 			 Движения.Взаиморасчеты.Записать();
	Движения.ОстаткиПоСтНДСПоСкладам.Очистить(); //Движения.ОстаткиПоСтНДСПоСкладам.Записать();
	Движения.ПартииЖНВЛС.Очистить();             //Движения.ПартииЖНВЛС.Записать();
	//============================================================================================GtG===
	
		
	#Если Клиент Тогда
	ОчиститьСообщения(); 
	#КонецЕсли
	
	
	
	//----------------------------< По регитсру учета по каждому товару >--------------------------------GtG---
	// приход в регистры: 
	//                    ПартииЖНВЛС
	//                    ОстаткиПоСтНДСПоСкладам
	//                    Взаиморасчеты
	//---------------------------------------------------
	ТаблицыДвижений = Новый Структура();
	ПодготовитьТаблицыДвижений(ТаблицыДвижений);
	
	Таблица= ТаблицыДвижений.ПартииЖНВЛС;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ПартииЖНВЛС.Записывать = Истина;
	Движения.ПартииЖНВЛС.Загрузить(Таблица);	
	
	
	Таблица= ТаблицыДвижений.ОстаткиПоСтНДСПоСкладам;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ОстаткиПоСтНДСПоСкладам.Записывать = Истина;
	Движения.ОстаткиПоСтНДСПоСкладам.Загрузить(Таблица);
	
	//Для Каждого ТекСтрокаТовар Из Товар Цикл
		
		
		//Если ТекСтрокаТовар.Товар.УчаствуетВАП=Истина ТОгда
		//	ПРедупреждение("Строка "+ТекСтрокаТовар.НомерСтроки+" ТОВАР НЕ УЧАСТВУЕТ В АП СЕТИ 
		//	|Нужно удалить эту строку и ввести заново с другим товаром!
		//	|"+ТекСтрокаТовар.Товар);
		//	Отказ=Истина;
		//	Возврат;
		//КонецЕсли;
		
		// == Эти процедурки есть уже в процедуре ПЕРЕДЗАПИСЬЮ()
		//ОМ1_ОбновитьДанныеПартииИзВводаОстатков  (ТекСтрокаТовар, ЭтотОбъект);//МО_ОбновитьДанныеПартии  (ТекСтрокаТовар); // прицепить к партии серию
		//МО_ОбновитьДанныеСерии 	 (ТекСтрокаТовар); // прицепить к серии сертификат
		
		
	//	ДвижениеП = Движения.ПартииЖНВЛС.Добавить();
	//	ДвижениеП.ВидДвижения=ВидДвиженияНакопления.Приход;
	//	ДвижениеП.Период = Дата;
	//	ДвижениеП.Товар = ТекСтрокаТовар.Товар;
	//	ДвижениеП.Склад = Склад;
	//	ДвижениеП.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
	//	ДвижениеП.пАРТИЯ = ТекСтрокаТовар.Партия ;
	//	ДвижениеП.Фирма= Склад.Фирма;
	//	ДвижениеП.ВидОперации=Перечисления.ВидыОпераций.ПоступлениеТМЦ;
	//	
	//	
	//	ДвижениеП.Колво = ТекСтрокаТовар.КоличествоФакт*ТекСтрокаТовар.Коэфф;
	//	ДвижениеП.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
	//	ДвижениеП.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
	//	Если Склад.ТипСклада = Перечисления.ТипыМХ.Опт Тогда
	//		ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар.СуммаЗакуп;
	//		ДвижениеП.СуммаРознНДС = ТекСтрокаТовар.НДСЗакуп;
	//	Иначе
	//		ДвижениеП.СуммаРознСНДС = ТекСтрокаТовар.СуммаРозн;
	//		ДвижениеП.СуммаРознНДС = ТекСтрокаТовар.НДСРозн;
	//	КонецЕсли;		
	//	ЕстьПартионныеТовары=Истина;
	//	
	//	
	//	
	//КонецЦикла;
	//// записываем движения регистров
	////Движения.ПартииЖНВЛС.Записать();
	//
	//
	////----------------------------< По регитсру учета по ставке НДС >--------------------------------GtG---
	//ТЗПодСвертку = ТОвар.Выгрузить();
	//
	//ТЗПодСвертку.Свернуть("СтавкаНДС","СуммаЗакуп,НДСЗакуп,СуммаРозн,НДСРозн");
	//
	//Для Каждого ТекСтрокаТовар Из ТЗПодСвертку Цикл
	//	// регистр ОстаткиПоСтНДСПоСкладам Приход
	//	
	//	Если ТекСтрокаТовар.СуммаЗакуп=0 тогда
	//		Продолжить;
	//	КонецЕсли; 	
	//
	//	
	//	Движение = Движения.ОстаткиПоСтНДСПоСкладам.Добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	//	Движение.Период = Дата;
	//	Движение.Склад = Склад;
	//	Движение.СтавкаНДС = ТекСтрокаТовар.СтавкаНДС;
	//	Движение.Фирма= Склад.Фирма;
	//	Движение.ВидОперации=Перечисления.ВидыОпераций.ПоступлениеТМЦ;

	//	Движение.СуммаЗакупСНДС = ТекСтрокаТовар.СуммаЗакуп;
	//	Движение.СуммаНДСЗакуп = ТекСтрокаТовар.НДСЗакуп;
	//	Если Склад.ТипСклада = Перечисления.ТипыМХ.Опт Тогда
	//		Движение.СуммаРознСНДС = ТекСтрокаТовар.СуммаЗакуп;
	//		Движение.СуммаРознНДС = ТекСтрокаТовар.НДСЗакуп;
	//	Иначе
	//		Движение.СуммаРознСНДС = ТекСтрокаТовар.СуммаРозн;
	//		Движение.СуммаРознНДС = ТекСтрокаТовар.НДСРозн;
	//	КонецЕсли;
	//КонецЦикла;
	// записываем движения регистров
	//Движения.ОстаткиПоСтНДСПоСкладам.Записать();

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОМ41_ПередУдалениемДокумента  (ЭтотОбъект,Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;		
	 //----------------------------< ВАЖНЫЙ МОМЕНТ! >--------------------------------GtG---
	 // Автоматически удалять движения нельзя! ИБО когда происходит расценка непроведенного документа
	 // она накручивает на док движения регистра сведений, а при автоматическом
	 // удалении движений всю эту расценку к херам сносит.
	 //
	 // ПОЭТОМУ: удаляем движения регистров накопления вручную, а регистры сведений не трогаем
	 //-------------------------------------------------------------------------------GtG---
	 
	//============================< Очистка рагистров накопления >================================GtG===
	Движения.ОстаткиПоСтНДСПоСкладам.Очистить(); Движения.ОстаткиПоСтНДСПоСкладам.Записать();
	Движения.ПартииЖНВЛС.Очистить();             Движения.ПартииЖНВЛС.Записать();
	//============================================================================================GtG===

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЗаписатьДействияВИсториюДокумента(Изменения,РежимЗаписи,ПометкаУдаления);	
	
КонецПроцедуры


