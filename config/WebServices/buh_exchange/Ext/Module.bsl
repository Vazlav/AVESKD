
Функция WHSDownload(INN)
	
	Возврат ОбменСБухгалтериейСервер.ЗагрузкаСкладов(INN);
	
КонецФункции

Функция SupplDownload()
	
	Возврат ОбменСБухгалтериейСервер.ЗагрузкаКонтрагентов();
	
КонецФункции

Функция CatDownload()
	
	Возврат ОбменСБухгалтериейСервер.ЗагрузкаКатегорийУслуг();
	
КонецФункции

Функция DocDownload(INN, BegDate, FinDate, DocType, WHSCode, SupplINN)
	
	//Если DocType = "АС_ПоступлениеТоваров" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ПоступлениеТоваров(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ВыручкаККМ" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ВыручкаККМ(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_Переоценка" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_Переоценка(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ВозвратНеВДеньПокупки" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ВозвратНеВДеньПокупки(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ВозвратТоваровПоставщику" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ВозвратТоваровПоставщику(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ВозвратСКомиссии" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ВозвратСКомиссии(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_МелкооптоваяОтгрузка" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_МелкооптоваяОтгрузка(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ОптоваяОтгрузка" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ОптоваяОтгрузка(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ПередачаНаКомиссию" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ПередачаНаКомиссию(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_Инвентаризация" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_Инвентаризация(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ПеремещениеТоваров" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ПеремещениеТоваров(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_Списание" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_Списание(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_ОтчетАптекиКомиссионераОПродажах" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_ОтчетАптекиКомиссионераОПродажах(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_РКО" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_РКО(INN, BegDate, FinDate);
	//ИначеЕсли DocType = "АС_БанковскиеРеквизитыКонтрагентов" Тогда 
	//	Возврат ОбменСБухгалтериейСервер.АС_БанковскиеРеквизитыКонтрагентов(INN, BegDate, FinDate);
	//КонецЕсли;
	
	СписокДокументов	= "";
	Выполнить("СписокДокументов	= ОбменСБухгалтериейСервер." + DocType + "(INN, BegDate, FinDate, WHSCode, SupplINN)");
	
	Возврат СписокДокументов;
	
КонецФункции

Функция GetConst(ConstName)
	
	Возврат ОбменСБухгалтериейСервер.ЗначениеКонстанты(ConstName);
	
КонецФункции

Функция zup_get_goods_assort(INN, Month)
    
     Тип_Результат		= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Goods_Assort_Result");
     Тип_СтрокаТаблицыРезультата	= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Goods_Assort_Table_String");	
    
     Результат=ФабрикаXDTO.Создать(Тип_Результат);    // ResultState - строка, результат и ошибки; GAT_strings- массив строк типа Goods_Assort_Table_String

    
     НачПериода=НачалоМесяца(Month);
     КонПериода=КонецМесяца(Month);
     
     Запрос=Новый Запрос();
     Запрос.Текст="ВЫБРАТЬ
   			   |	Фирмы.Ссылка
   			   |ИЗ
   			   |	Справочник.Фирмы КАК Фирмы
   			   |ГДЕ
   			   |	Фирмы.ИНН = &ИНН";
    Запрос.УстановитьПараметр("ИНН",СокрЛП(INN));
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	
    
    Рез=Запрос.Выполнить();
    Если рез.Пустой() Тогда
    	Результат.ResultState="ERR: Нет фирмы с таким ИНН "+INN;
    	Возврат Результат;
    КонецЕсли;
    
    Выб=Рез.Выбрать();
    
    Пока Выб.Следующий() Цикл
    	Фирма=Выб.Ссылка;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Фирма",Фирма);
    
    //---------------<Данные по разборке товара>---------------------------// GtG // 15.12.2014 15:01:08
    
    Запрос.Текст= "ВЫБРАТЬ
                  |	ПартииЖНВЛСОбороты.Склад КАК Склад,
                  |	НАЧАЛОПЕРИОДА(ПартииЖНВЛСОбороты.Период, ДЕНЬ) КАК Дата,
                  |	СУММА(ПартииЖНВЛСОбороты.КолвоПриход / ПартииЖНВЛСОбороты.Партия.К) КАК КолвоУпак
                  |ПОМЕСТИТЬ ДанныеПоРазбору
                  |ИЗ
                  |	РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Фирма = &Фирма) КАК ПартииЖНВЛСОбороты
                  |ГДЕ
                  |	(ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ВводОстатков
                  |			ИЛИ ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТовара
                  |			ИЛИ ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТовара)
                  |	И ПартииЖНВЛСОбороты.Партия.К > 0
                  |
                  |СГРУППИРОВАТЬ ПО
                  |	ПартииЖНВЛСОбороты.Склад,
                  |	НАЧАЛОПЕРИОДА(ПартииЖНВЛСОбороты.Период, ДЕНЬ)
                  |
                  |ИНДЕКСИРОВАТЬ ПО
                  |	Склад
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  |	ДанныеПоРазбору.Склад.Код КАК СкладКод,
                  |	НАЧАЛОПЕРИОДА(ДанныеПоРазбору.Дата, ДЕНЬ) КАК Дата,
                  |	ВЫРАЗИТЬ(ДанныеПоРазбору.КолвоУпак КАК ЧИСЛО(10, 0)) КАК КолвоУпак
                  |ИЗ
                  |	ДанныеПоРазбору КАК ДанныеПоРазбору
                  |
                  |УПОРЯДОЧИТЬ ПО
                  |	СкладКод,
                  |	Дата
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |УНИЧТОЖИТЬ ДанныеПоРазбору"; // Сгенерировано в GtG's Консоль запросов. 15.12.2014 15:56:31

   Рез=Запрос.Выполнить();
   
   Если Рез.Пустой() Тогда
   	Результат.ResultState="INFO: По фирме "+INN+" за период с "+НачПериода+" по "+КонПериода+" разборки товара не производилось!";
   	Возврат Результат;
   КонецЕсли;
   
   Выб=Рез.Выбрать();
   
   
   Результат.ResultState="ОК";
   
   Пока Выб.Следующий() Цикл
   	
   	 СтрокаРезультата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыРезультата);
    	
    	СтрокаРезультата.Date=     Выб.Дата;
    	СтрокаРезультата.apt_code= Выб.СкладКод;
    	СтрокаРезультата.pack_qnt= Выб.КолвоУпак;
    	
   	 Результат.GAT_strings.Добавить( СтрокаРезультата);
   	
   КонецЦикла;

   Возврат  Результат;
	
КонецФункции

Функция zup_get_pers_modeldata(month)
	
	 Тип_Результат		= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Pers_model_data");
     Тип_СтрокаТаблицыРезультата	= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Pers_model_data_string");	
    
     Результат=ФабрикаXDTO.Создать(Тип_Результат);    	
	
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(РеализацияККМ.Дата, ДЕНЬ)) КАК РабочихДней,
	             |	РеализацияККМ.Склад.Код КАК СкладКод,
	             |	СУММА(РеализацияККМ.СуммаСоСкидкой) КАК СуммаСоСкидкой,
	             |	СУММА(РеализацияККМ.КоличествоЧеков) КАК КоличествоЧеков,
	             |	СУММА(РеализацияККМ.СуммаСоСкидкой) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(РеализацияККМ.Дата, ДЕНЬ)) КАК СрДнТО,
	             |	СУММА(РеализацияККМ.КоличествоЧеков) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(РеализацияККМ.Дата, ДЕНЬ)) КАК СрДнКК,
	             |	ЕСТЬNULL(РеализацияККМ.Склад.Бренд.Код, 0) КАК БрендСкладаКод,
	             |	ЕСТЬNULL(РеализацияККМ.Склад.Бренд.Наименование, ""-не указан-"") КАК БрендСкладаНаименование
	             |ИЗ
	             |	Документ.РеализацияККМ КАК РеализацияККМ
	             |ГДЕ
	             |	РеализацияККМ.Дата МЕЖДУ &Дата1 И &Дата2
	             |	И РеализацияККМ.Проведен = ИСТИНА
	             |	И РеализацияККМ.КоличествоЧеков > 0
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РеализацияККМ.Склад.Код,
	             |	ЕСТЬNULL(РеализацияККМ.Склад.Бренд.Код, 0),
	             |	ЕСТЬNULL(РеализацияККМ.Склад.Бренд.Наименование, ""-не указан-"")
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СкладКод";
	Запрос.УстановитьПараметр("Дата1",Началомесяца(month));
	Запрос.УстановитьПараметр("Дата2",Конецмесяца(month));
	
	
	Рез=Запрос.Выполнить();
	
	Выб=Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		СтрокаРезультата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыРезультата);			 
		СтрокаРезультата.WorkDays=Выб.РабочихДней;
		СтрокаРезультата.apt_code =Выб.СкладКод;
		СтрокаРезультата.TO           =Выб.СуммаСоСкидкой;
		СтрокаРезультата.ChecksCount       =Выб.КоличествоЧеков;
		СтрокаРезультата.AVG_DayTO              =Выб.СрДнТО;
		СтрокаРезультата.AVG_DayChCnt                =Выб.СрДнКК;
		СтрокаРезультата.Apt_Brend_code                   =Выб.БрендСкладаКод;
		СтрокаРезультата.Apt_Brend_Name                        =Выб.БрендСкладаНаименование;
				
		
		 Результат.PMD_Strings.Добавить( СтрокаРезультата);

	
	КонецЦикла;
				 
	Возврат Результат;
	
КонецФункции

Функция zup_get_FactWD(month)
	
	Запрос=Новый Запрос();
	Запрос.Текст= "	ВЫБРАТЬ РАЗЛИЧНЫЕ
|		ПДМ_КонтрольСотрудников.Сотрудник,
|		ПДМ_КонтрольСотрудников.Склад,
|		НАЧАЛОПЕРИОДА(ПДМ_КонтрольСотрудников.НачалоСмены, ДЕНЬ) КАК ДатаНачалаСмены,
|		НАЧАЛОПЕРИОДА(ПДМ_КонтрольСотрудников.КонецСмены, ДЕНЬ) КАК ДатаКонцаСмены
|	ПОМЕСТИТЬ Т1
|	ИЗ
|		РегистрСведений.ПДМ_КонтрольСотрудников КАК ПДМ_КонтрольСотрудников
|	ГДЕ
|		(ПДМ_КонтрольСотрудников.Период МЕЖДУ &Период1 И &Период2
|				ИЛИ ПДМ_КонтрольСотрудников.НачалоСмены МЕЖДУ &Период1 И &Период2
|				ИЛИ ПДМ_КонтрольСотрудников.КонецСмены МЕЖДУ &Период1 И &Период2)
|	;
|	
|	////////////////////////////////////////////////////////////////////////////////
|	ВЫБРАТЬ
|		Т1.Сотрудник,
|		Т1.Склад,
|		Т1.ДатаНачалаСмены КАК ДатаСмены
|	ПОМЕСТИТЬ Т2
|	ИЗ
|		Т1 КАК Т1
|	
|	ОБЪЕДИНИТЬ ВСЕ
|	
|	ВЫБРАТЬ
|		Т1.Сотрудник,
|		Т1.Склад,
|		Т1.ДатаКонцаСмены
|	ИЗ
|		Т1 КАК Т1
|	;
|	
|	////////////////////////////////////////////////////////////////////////////////
|	ВЫБРАТЬ РАЗЛИЧНЫЕ
|		Т2.Сотрудник КАК Сотрудник,
|		Т2.Склад КАК Склад,
|		Т2.ДатаСмены
|	ПОМЕСТИТЬ Т3
|	ИЗ
|		Т2 КАК Т2
|	
|	ИНДЕКСИРОВАТЬ ПО
|		Склад,
|		Сотрудник
|	;
|	
|	////////////////////////////////////////////////////////////////////////////////
|	ВЫБРАТЬ РАЗЛИЧНЫЕ
|		Т3.Сотрудник.ТабНомер КАК ТабНомер,
|		Т3.Склад.Код КАК СкладКод,
|		Т3.ДатаСмены КАК ДатаСмены
|	ИЗ
|		Т3 КАК Т3
|	
|	УПОРЯДОЧИТЬ ПО
|		СкладКод,
|		ДатаСмены,
|		ТабНомер
|	;
|	
|	////////////////////////////////////////////////////////////////////////////////
|	УНИЧТОЖИТЬ Т1
|	;
|	
|	////////////////////////////////////////////////////////////////////////////////
|	УНИЧТОЖИТЬ Т2
|	;
|	
|	////////////////////////////////////////////////////////////////////////////////
|	УНИЧТОЖИТЬ Т3
 |"; // Сгенерировано в GtG's Консоль запросов. 24.12.2014 15:46:55

 
 Запрос.УстановитьПараметр("Период1",НачалоМесяца(month));
 Запрос.УстановитьПараметр("Период2",КонецМесяца(month));
 
 Рез=Запрос.Выполнить();
 
 Выб=Рез.Выбрать();
 
 
 Тип_Результат		= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Pers_FactWD");
 Тип_СтрокаТаблицыРезультата	= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Pers_FactWD_string");	
 
 Результат=ФабрикаXDTO.Создать(Тип_Результат);    
 
 
 Пока Выб.Следующий() Цикл
	 Стр=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыРезультата);
	 Стр.TabNum=Выб.ТабНомер;
	 Стр.apt_code=Выб.СкладКод;
	 Стр.Wrk_date=Выб.ДатаСмены;
	 
	 Результат.FWD_Strings.Добавить(Стр);
 КонецЦикла;
  
	
Возврат Результат;	
	
	
КонецФункции

Функция zup_get_FactWD_apt(month, apt_code)
	
	
	Запрос=Новый Запрос();
	Запрос.Текст= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ПДМ_КонтрольСотрудников.Сотрудник,
	              |	ПДМ_КонтрольСотрудников.Склад,
	              |	НАЧАЛОПЕРИОДА(ПДМ_КонтрольСотрудников.НачалоСмены, ДЕНЬ) КАК ДатаНачалаСмены,
	              |	НАЧАЛОПЕРИОДА(ПДМ_КонтрольСотрудников.КонецСмены, ДЕНЬ) КАК ДатаКонцаСмены
	              |ПОМЕСТИТЬ Т1
	              |ИЗ
	              |	РегистрСведений.ПДМ_КонтрольСотрудников КАК ПДМ_КонтрольСотрудников
	              |ГДЕ
	              |	(ПДМ_КонтрольСотрудников.Период МЕЖДУ &Период1 И &Период2
	              |			ИЛИ ПДМ_КонтрольСотрудников.НачалоСмены МЕЖДУ &Период1 И &Период2
	              |			ИЛИ ПДМ_КонтрольСотрудников.КонецСмены МЕЖДУ &Период1 И &Период2)
	              |	И ПДМ_КонтрольСотрудников.Склад.Код = &Код
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Т1.Сотрудник,
	              |	Т1.Склад,
	              |	Т1.ДатаНачалаСмены КАК ДатаСмены
	              |ПОМЕСТИТЬ Т2
	              |ИЗ
	              |	Т1 КАК Т1
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Т1.Сотрудник,
	              |	Т1.Склад,
	              |	Т1.ДатаКонцаСмены
	              |ИЗ
	              |	Т1 КАК Т1
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	Т2.Сотрудник КАК Сотрудник,
	              |	Т2.Склад КАК Склад,
	              |	Т2.ДатаСмены
	              |ПОМЕСТИТЬ Т3
	              |ИЗ
	              |	Т2 КАК Т2
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Склад,
	              |	Сотрудник
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	Т3.Сотрудник.ТабНомер КАК ТабНомер,
	              |	Т3.Склад.Код КАК СкладКод,
	              |	Т3.ДатаСмены КАК ДатаСмены
	              |ИЗ
	              |	Т3 КАК Т3
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	СкладКод,
	              |	ДатаСмены,
	              |	ТабНомер
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |УНИЧТОЖИТЬ Т1
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |УНИЧТОЖИТЬ Т2
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |УНИЧТОЖИТЬ Т3"; // Сгенерировано в GtG's Консоль запросов. 24.12.2014 15:46:55
	
	
	Запрос.УстановитьПараметр("Период1",НачалоМесяца(month));
	Запрос.УстановитьПараметр("Период2",КонецМесяца(month));
	Запрос.УстановитьПараметр("Код",apt_code);
	
	
	
	Рез=Запрос.Выполнить();
	
	Выб=Рез.Выбрать();
	
	
	Тип_Результат		= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Pers_FactWD");
	Тип_СтрокаТаблицыРезультата	= ФабрикаXDTO.Тип("http://localhost/ave_skd", "Pers_FactWD_string");	
	
	Результат=ФабрикаXDTO.Создать(Тип_Результат);    
	
	
	Пока Выб.Следующий() Цикл
		Стр=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыРезультата);
		Стр.TabNum=Выб.ТабНомер;
		Стр.apt_code=Выб.СкладКод;
		Стр.Wrk_date=Выб.ДатаСмены;
		
		Результат.FWD_Strings.Добавить(Стр);
	КонецЦикла;
	
	
	Возврат Результат;	
	
	
	
	
КонецФункции

Функция zup_Get_Vyr_by_apt_by_date(BeginDate, EndDate)
	//--------------------------------------------------------// GtG |>01.06.2015 17:39:58
	// Получить выручку по аптекам по дням
	// Используется в АВЕ ЗУП при загрузке данных в документ 
	// АС_СуммыРеализованнойНаценки
	// для расчета мотивации по пирамиде управления (Региональные директора и Управляющие)
	//--------------------------------------------------------// GtG <|
	
	
	Запрос=новый Запрос();
	
	Запрос.Текст= "	ВЫБРАТЬ
	|		ПДМ_КонтрольСотрудников.Склад КАК Склад,
	|		НАЧАЛОПЕРИОДА(ПДМ_КонтрольСотрудников.Период, ДЕНЬ) КАК Дата,
	|		СУММА(ПДМ_КонтрольСотрудников.СуммаРознФакт) КАК СуммаРознФакт,
	|		СУММА(ПДМ_КонтрольСотрудников.СуммаЗакуп) КАК СуммаЗакуп
	|	ПОМЕСТИТЬ выр
	|	ИЗ
	|		РегистрСведений.ПДМ_КонтрольСотрудников КАК ПДМ_КонтрольСотрудников
	|	ГДЕ
	|		ПДМ_КонтрольСотрудников.Период МЕЖДУ &Период1 И &Период2
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПДМ_КонтрольСотрудников.Склад,
	|		НАЧАЛОПЕРИОДА(ПДМ_КонтрольСотрудников.Период, ДЕНЬ)
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|		МестаХранения.Код КАК Код,
	|		выр.Дата КАК Дата,
	|		выр.СуммаРознФакт - выр.СуммаЗакуп КАК СРН,
	|		МестаХранения.Бренд.ПроцентСРНУправляющего КАК ПроцентСРНУправляющего,
	|		МестаХранения.Бренд.ПроцентСРНРегионала КАК ПроцентСРНРегионала
	|	ИЗ
	|		выр КАК выр
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	|			ПО выр.Склад = МестаХранения.Ссылка
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Код,
	|		Дата,
	|		СРН
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	УНИЧТОЖИТЬ выр
	|"; // Сгенерировано в GtG's Консоль запросов. 01.06.2015 17:42:04
	
	
	Запрос.УстановитьПараметр("Период1",НачалоДня(BeginDate));
	Запрос.УстановитьПараметр("Период2", КонецДня(EndDate));
	
	
	Рез=Запрос.Выполнить().Выгрузить();
	
	ХДТО_ТЗ=СериализаторXDTO.ЗаписатьXDTO(Рез);
	
	Возврат ХДТО_ТЗ; // в Зупе это значение надо вернуть 
	 
КонецФункции

Функция Universal_Query_Function__TZ_Result(IncomingData)
	
	 // IncomingData XDTO-Структура
	 //       |
	 //       +------ Запрос (Текст запроса)
	 //       |
	 //       +------ ПараметрыЗапроса (структура)
	 //                   |
	 //                   +---- Имя,Значение
	 //--------------------------------------------------// GtG // 01.06.2015 17:58:13
	 
	ВхСтруктура=СериализаторXDTO.ПрочитатьXDTO(IncomingData);
	
	Запрос=Новый Запрос();
	
	Запрос.Текст=ВхСтруктура.Запрос;
	
	Для Каждого Парам Из ВхСтруктура.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Парам.Ключ,Парам.Значение);
	КонецЦикла;	
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	
	
	ХДТО_ТЗ=СериализаторXDTO.ЗаписатьXDTO(ТЗ);
	
	Возврат ХДТО_ТЗ;
	
КонецФункции

Функция Universal_Query_Function__ArrayOfTZ_Result(IncomingData)
    
    // IncomingData XDTO-Структура
    //       |
    //       +------ Запрос (Текст запроса, который возвращает пакетный результат)
    //       |
    //       +------ ПараметрыЗапроса (структура)
    //                   |
    //                   +---- Имя,Значение
    //--------------------------------------------------// GtG // 01.06.2015 17:58:13
    
    ВхСтруктура=СериализаторXDTO.ПрочитатьXDTO(IncomingData);
    
    
    Запрос=Новый Запрос();
    
    Запрос.Текст=ВхСтруктура.Запрос;
    
    Если ВхСтруктура.Свойство("ПараметрыЗапроса")=Истина ТОгда
        //---------------<Для вызова из 1С>---------------------------// GtG // 11.08.2015 15:47:47 
        Для Каждого Парам Из ВхСтруктура.ПараметрыЗапроса Цикл
            Запрос.УстановитьПараметр(Парам.Ключ,Парам.Значение);
        КонецЦикла;    
    Иначе
        //---------------<Для вызова с сайтов, IncomingData - плоская структура>---------------------------// GtG // 11.08.2015 15:48:12 
        // параметры типа Парам_НазваниеПараметра1
        //                Парам_НазваниеПараметра2
        
        // IncomingData XDTO-Структура
        //       |
        //       +------ Запрос (Текст запроса, который возвращает пакетный результат)

        //       |
        //       +------ Парам_НазваниеПараметра1     "значение параметра 1"
        //       |
        //       +------ Парам_НазваниеПараметра2  "значение параметра 2"
        //--------------------------------------------------// GtG // 01.06.2015 17:58:13
        
        Для Каждого Парам Из ВхСтруктура Цикл
            
            Если Найти(Парам.Ключ,"Парам_")<>0 Тогда
                Запрос.УстановитьПараметр(СтрЗаменить(Парам.Ключ,"Парам_",""),Парам.Значение);
            КонецЕсли;    
        КонецЦикла;    
        
    КонецЕсли;
    
    
    МассивРезультатов=Запрос.ВыполнитьПакет(); // массив результатов запроса.
    
    МассивДляХДТО=Новый Массив;
    
	Для Каждого Рез из МассивРезультатов Цикл
		Если Рез=Неопределено ТОгда   // пустой результат, при удалении временной таблицы
			РезТЗ=Новый ТаблицаЗначений; // пустая
		Иначе
			РезТЗ=Рез.Выгрузить();
		КонецЕсли;
		МассивДляХДТО.Добавить(РезТЗ);
	КонецЦикла;    
	
    
    ХДТО_Массив_ТЗ=СериализаторXDTO.ЗаписатьXDTO(МассивДляХДТО);
    
    Возврат ХДТО_Массив_ТЗ;
    
КонецФункции

Функция Universal_AddReference_Function(IncomingData)
    
    //IncomingData - Структура такого вида:
    //  ВидСправочника - Строка имя вида справочника
    //  ЗначенияРеквизитов - Структура вида: 
    //                                Имя реквизита    - строка Функциязначенияреквизита обрабатываемая через вычислить()
    //  ВернутьЗначенияреквизитов - массив имен реквизитов  // на случай, если надо что-то создать и получить назад значения тех реквизитов которые заполняются автоматически 
    //------------------------------------------------------------------------------------------------------------------                
    СтруктураВозврата=Новый Структура;
    СтруктураВозврата.Вставить("Успешно",Истина);
        
    ВхСтруктура=СериализаторXDTO.ПрочитатьXDTO(IncomingData);

    Попытка
        Спр=Справочники[ВхСтруктура.ВидСправочника].СоздатьЭлемент();
        Для каждого Рекв Из ВхСтруктура.ЗначенияРеквизитов Цикл
            Спр[Рекв.Ключ]=Вычислить(Рекв.Значение);
        КонецЦикла;
        
        Спр.Записать();
        
        Если ВхСтруктура.ВернутьЗначенияреквизитов.Количество()>0 Тогда
            СтруктураВозвращаемыхРеквизитов=Новый Структура;
            
            Для каждого ВозврРекв из ВхСтруктура.ВернутьЗначенияреквизитов цикл 
                СтруктураВозвращаемыхРеквизитов.Вставить(ВозврРекв,Спр[ВозврРекв]);
            Конеццикла;
            
            СтруктураВозврата.Вставить("СтруктураВозвращаемыхРеквизитов",СтруктураВозвращаемыхРеквизитов);
        КонецЕсли;    
        
        
        ХДТО_Структура=СериализаторXDTO.ЗаписатьXDTO(СтруктураВозврата);
        Возврат ХДТО_Структура;

        
    Исключение
        СтруктураВозврата.Вставить("Успешно",Ложь);
        СтруктураВозврата.Вставить("Ошибка",""+Рекв.Ключ+"  "+Рекв.Значение+"  >"+ОписаниеОшибки());
        ХДТО_Структура=СериализаторXDTO.ЗаписатьXDTO(СтруктураВозврата);
        Возврат ХДТО_Структура;
    Конецпопытки;
    
    //Возвращает СтруктураВозврата
    // Либо Успешно --- истина
    //      СтруктураВозвращаемыхРеквизитов
    //                  имя --- значение
    // либо Успешно --- ложь
    //      Ошибка  --- описание ошибки текстом
    
КонецФункции

//---------------<УЧЕТ В ЗАКУПКЕ. ФУНКЦИИ ДЛЯ ОБМЕНА.>---------------------------// GtG // 15.12.2015 12:35:21 
Функция Exch_GetQueue(OrgCode, DocVid, Limit,LimitSkd,DateLimit)
	
	Запрос=Новый Запрос();
	//Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 123456789
	//             |	ОбменСкладБух.СсылкаТХТ,
	//             |	ОбменСкладБух.КодСклада КАК КодСклада
	//             |ИЗ
	//             |	РегистрСведений.ОбменСкладБух КАК ОбменСкладБух
	//             |ГДЕ
	//             |	ОбменСкладБух.ВидДокумента = &ВидДокумента
	//             |	И ОбменСкладБух.ДатаОчередиСклад <= &ДатаОчередиСклад
	//             |	И ОбменСкладБух.КодФирмы = &КодФирмы
	//             |	И ОбменСкладБух.КодСклада В
	//             |			(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 987654321
	//             |				ОбменСкладБух.КодСклада
	//             |			ИЗ
	//             |				РегистрСведений.ОбменСкладБух КАК ОбменСкладБух
	//             |			ГДЕ
	//             |				ОбменСкладБух.ВидДокумента = &ВидДокумента
	//             |				И ОбменСкладБух.КодФирмы = &КодФирмы
	//             |				И ОбменСкладБух.ДатаОчередиСклад <= &ДатаОчередиСклад)
	//             |
	//             |УПОРЯДОЧИТЬ ПО
	//             |	ОбменСкладБух.ОшибкаПриЗагрузке,
	//			 |	ОбменСкладБух.ДатаОчередиСклад,
	//             |	КодСклада
	//             |";
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 123456789
	               |	ОбменСкладБух.СсылкаТХТ,
	               |	ОбменСкладБух.КодСклада КАК КодСклада,
	               |	ОбменСкладБух.ОшибкаПриЗагрузке
	               |ИЗ
	               |	РегистрСведений.ОбменСкладБух КАК ОбменСкладБух
	               |ГДЕ
	               |	ОбменСкладБух.ВидДокумента = &ВидДокумента
	               |	И ОбменСкладБух.ДатаОчередиСклад <= &ДатаОчередиСклад
	               |	И ОбменСкладБух.КодФирмы = &КодФирмы
	               |	И ОбменСкладБух.КодСклада В
	               |			(ВЫБРАТЬ
	               |				КС.КодСклада
	               |			ИЗ
	               |				(ВЫБРАТЬ ПЕРВЫЕ 987654321
	               |					ОбменСкладБух.КодСклада,
	               |					СУММА(ВЫБОР
	               |							КОГДА ОбменСкладБух.ОшибкаПриЗагрузке = """"
	               |								ТОГДА 0
	               |							ИНАЧЕ 1
	               |						КОНЕЦ) КАК КолвоОшибочныхСтрок
	               |				ИЗ
	               |					РегистрСведений.ОбменСкладБух КАК ОбменСкладБух
	               |				ГДЕ
	               |					ОбменСкладБух.ВидДокумента = &ВидДокумента
	               |					И ОбменСкладБух.КодФирмы = &КодФирмы
	               |					И ОбменСкладБух.ДатаОчередиСклад <= &ДатаОчередиСклад
	               |				СГРУППИРОВАТЬ ПО
	               |					ОбменСкладБух.КодСклада
	               |				УПОРЯДОЧИТЬ ПО
	               |					КолвоОшибочныхСтрок) КАК КС)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОбменСкладБух.ОшибкаПриЗагрузке,
	               |	ОбменСкладБух.ДатаОчередиСклад,
	               |	КодСклада"; // Сгенерировано в GtG's Консоль запросов. 09.03.2016 20:14:39";
				 
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"123456789",Формат(Limit,"ЧГ=0"));			 
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"987654321",Формат(LimitSkd,"ЧГ=0"));
	
	Запрос.УстановитьПараметр("ВидДокумента",DocVid);
	Запрос.УстановитьПараметр("КодФирмы",OrgCode);
	Запрос.УстановитьПараметр("ДатаОчередиСклад",DateLimit);
	
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	
	ХДТО_ТЗ=СериализаторXDTO.ЗаписатьXDTO(ТЗ);
	
	Возврат ХДТО_ТЗ;

	
КонецФункции

Функция Exch_GetDocument(OrgCode,DocVid, GUID, QText)
	
	Запрос=Новый Запрос();
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ОбменСкладБух.Объект
	             |ИЗ
	             |	РегистрСведений.ОбменСкладБух КАК ОбменСкладБух
	             |ГДЕ
	             |	ОбменСкладБух.ВидДокумента = &ВидДокумента
	             |	И ОбменСкладБух.КодФирмы = &КодФирмы
	             |	И ОбменСкладБух.СсылкаТХТ = &GUID";
				 
	Запрос.УстановитьПараметр("ВидДокумента",DocVid);
	Запрос.УстановитьПараметр("GUID",GUID);
	Запрос.УстановитьПараметр("КодФирмы",OrgCode);
	
	Рез=Запрос.Выполнить();
	
	Если Рез.Пустой() ТОгда
		ПустойМассив=Новый Массив;
		ХДТО_ПустойМассив=СериализаторXDTO.ЗаписатьXDTO(ПустойМассив);
    	Возврат ХДТО_ПустойМассив;
	Конецесли;	
	
	Выб=Рез.Выбрать();
	Выб.Следующий();
	
	Ссылка=Выб.Объект;
	
	Запрос.Текст=QText;   // в запросе должен быть один единственный параметр - Ссылка
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	
	МассивРезультатов=Запрос.ВыполнитьПакет(); // массив результатов запроса.
	
	МассивДляХДТО=Новый Массив;
	
	Для Каждого Рез из МассивРезультатов Цикл
		Если Рез=Неопределено ТОгда   // пустой результат, при удалении временной таблицы
			РезТЗ=Новый ТаблицаЗначений; // пустая
		Иначе
			РезТЗ=Рез.Выгрузить();
		КонецЕсли;
		МассивДляХДТО.Добавить(РезТЗ);
	КонецЦикла;    
	
	
	ХДТО_Массив_ТЗ=СериализаторXDTO.ЗаписатьXDTO(МассивДляХДТО);
	
	Возврат ХДТО_Массив_ТЗ;
	
КонецФункции

Функция Exch_DelDocs(OrgCode, DocVid, GUIDList)
	
	
	ТЗ=СериализаторXDTO.ПрочитатьXDTO(GUIDList);
	
	Х=ТЗ.Количество();
	У=0;
	Й=0;
	
	Для Каждого Стр Из ТЗ Цикл
		Мз=РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
		
		МЗ.ВидДокумента=СокрЛП(DocVid);
		МЗ.КодФирмы=СокрЛП(OrgCode);
		
		МЗ.СсылкаТХТ=СокрЛП(Стр.GUID);
		МЗ.Прочитать();
		Попытка
			МЗ.Удалить();
			У=У+1;
		Исключение
			// Нишмогла
			Й=Й+1;
		КонецПопытки;
		
	КонецЦикла;	
	
	Возврат "Удалено "+У+" из "+Х+?(Й<>0," Не удалось удалить "+Й,"");
	
КонецФункции

Функция Exch_ErrorDocs(OrgCode, DocVid, GUIDList)
	
	
	
	
	ТЗ=СериализаторXDTO.ПрочитатьXDTO(GUIDList);
	
	Х=ТЗ.Количество();
	
	Для Каждого Стр Из ТЗ Цикл
		Мз=РегистрыСведений.ОбменСкладБух.СоздатьМенеджерЗаписи();
		МЗ.ВидДокумента=СокрЛП(DocVid);
		МЗ.КодФирмы=СокрЛП(OrgCode);
		
		МЗ.СсылкаТХТ=СокрЛП(Стр.GUID);
		МЗ.Прочитать();
		МЗ.ОшибкаПриЗагрузке=Стр.Описание;
		МЗ.Записать();
	КонецЦикла;	
	
	Возврат "Ошибки отмечены. "+Х+" записей.";
	
КонецФункции

Функция zup_put_KKMUsersTable_2016(UsersTZ)
	
	ТЗ=СериализаторXDTO.ПрочитатьXDTO(UsersTZ);
	
	ЕстьИНН = 0;
	Если ТЗ.Колонки.Найти("ИНН") <> Неопределено Тогда
		ЕстьИНН = 1;
	КонецЕсли;
	
	МВТ=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос();
	Запрос.МенеджерВременныхТаблиц=МВТ;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТЗ.Код,
	             |	ТЗ.Наименование,
	             |	ТЗ.Фамилия,
	             |	ТЗ.Имя,
	             |	ТЗ.Отчество,
	             |	ТЗ.СНИЛС,
	             |	ТЗ.ОператорККМ,
	             |	ТЗ.БДИсточник,
	             |	ТЗ.КодОсновногоМестаРаботы,
	             |	ТЗ.Должность
				 |  "+?(ЕстьИНН = 0, "",", ТЗ.ИНН")+"
	             |ПОМЕСТИТЬ ЗупТЗ
	             |ИЗ
	             |	&tz КАК ТЗ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЗупТЗ.Код,
	             |	ЗупТЗ.Наименование,
	             |	ЗупТЗ.Фамилия,
	             |	ЗупТЗ.Имя,
	             |	ЗупТЗ.Отчество,
	             |	ЗупТЗ.СНИЛС,
	             |	ЗупТЗ.ОператорККМ,
	             |	ЗупТЗ.БДИсточник,
	             |	ЗупТЗ.КодОсновногоМестаРаботы,
	             |	ЗупТЗ.Должность,
	             |	Сотрудники_Физлица.Ссылка,
	             |	ВЫБОР
	             |		КОГДА Сотрудники_Физлица.Ссылка ЕСТЬ NULL 
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Создать,
	             |	ВЫБОР
	             |		КОГДА Сотрудники_Физлица.Ссылка ЕСТЬ НЕ NULL 
	             |			ТОГДА ВЫБОР
	             |					КОГДА ЕСТЬNULL(ЗупТЗ.Фамилия, """") <> ЕСТЬNULL(Сотрудники_Физлица.Фамилия, """")
	             |							ИЛИ ЕСТЬNULL(ЗупТЗ.КодОсновногоМестаРаботы, 0) <> ЕСТЬNULL(Сотрудники_Физлица.КодОсновногоМестаРаботы, 0)
	             |							ИЛИ ЕСТЬNULL(ЗупТЗ.Должность, """") <> ЕСТЬNULL(Сотрудники_Физлица.Должность, """")
				 |							ИЛИ ЕСТЬNULL(ЗупТЗ.Отчество, """") <> ЕСТЬNULL(Сотрудники_Физлица.Отчество, """")
				 |							"+?(ЕстьИНН = 0, ""," ИЛИ ЕСТЬNULL(ЗупТЗ.ИНН, """") <> ЕСТЬNULL(Сотрудники_Физлица.ИНН, """")")+"
	             |						ТОГДА ИСТИНА
	             |					ИНАЧЕ ЛОЖЬ
	             |				КОНЕЦ
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Обновить
				 |  "+?(ЕстьИНН = 0, "",", ЗупТЗ.ИНН")+"
	             |ПОМЕСТИТЬ База
	             |ИЗ
	             |	ЗупТЗ КАК ЗупТЗ
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники_Физлица КАК Сотрудники_Физлица
	             |		ПО ЗупТЗ.Код = Сотрудники_Физлица.Код";
				 
		Запрос.УстановитьПараметр("tz",ТЗ);		 
		Запрос.Выполнить();
		
		
		
		Запрос.Текст="ВЫБРАТЬ
	             |	База.Код,
	             |	База.Наименование,
	             |	База.Фамилия,
	             |	База.Имя,
	             |	База.Отчество,
	             |	База.СНИЛС,
	             |	База.ОператорККМ,
	             |	База.БДИсточник,
	             |	База.КодОсновногоМестаРаботы,
	             |	База.Должность,
	             |	База.Ссылка,
	             |	База.Создать,
	             |	База.Обновить
				 |  "+?(ЕстьИНН = 0, "",", База.ИНН")+"
	             |ИЗ
	             |	База КАК База
	             |ГДЕ
	             |	База.Создать = ИСТИНА
	             |; ";
				 
		Рез=Запрос.Выполнить();
		Выб=Рез.Выбрать();
		
		ХСоздано=0;
		ХОшСоздано=0;
		
		
		Х=0;
		//НачатьТранзакцию();
		Пока Выб.Следующий() Цикл 
			Х=Х+1;
			
			Спр=Справочники.Сотрудники_Физлица.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Спр,Выб,,"ссылка");
			Спр.ДатаИзменения = ТекущаяДата();
			Спр.ДатаСоздания = ТекущаяДата();
			Попытка 
				Спр.Записать();
				ХСоздано=ХСоздано+1;
			Исключение
				ХОшСоздано=ХОшСоздано+1;
				МЗ = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
				МЗ.ДатаОшибки = ТекущаяДата();
				МЗ.ОписаниеОшибки = ОписаниеОшибки();
				МЗ.МестоВозникновения = "web.zup_put_KKMUsersTable_2016 - создание элемента";
				МЗ.Объект = "web.zup_put_KKMUsersTable_2016 - ins " + ХОшСоздано;
				МЗ.Записать();
			КонецПопытки;
			
			
			
			//Если Х%100=0 Тогда
			//	ЗафиксироватьТранзакцию();
			//	НачатьТранзакцию();
			//Конецесли;	

		КонецЦикла;
		
		//Попытка
		//	ЗафиксироватьТранзакцию();
		//Исключение
		//КонецПопытки;
		
				 
				 
				 
				 
	  Запрос.Текст="ВЫБРАТЬ
	             |	База.Код,
	             |	База.Наименование,
	             |	База.Фамилия,
	             |	База.Имя,
	             |	База.Отчество,
	             |	База.СНИЛС,
	             |	База.ОператорККМ,
	             |	База.БДИсточник,
	             |	База.КодОсновногоМестаРаботы,
	             |	База.Должность,
	             |	База.Ссылка,
	             |	База.Создать,
	             |	База.Обновить
				 |  "+?(ЕстьИНН = 0, "",", База.ИНН")+"
	             |ИЗ
	             |	База КАК База
	             |ГДЕ
	             |	База.Обновить = ИСТИНА";
	
				 
		Рез=Запрос.Выполнить();
		Выб=Рез.Выбрать();
		
		ХОбн=0;
		ХОшОбн=0;
		
		Х=0;
		//НачатьТранзакцию();
		Пока Выб.Следующий() Цикл 
			Х=Х+1;
			
			Спр=Выб.Ссылка.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(Спр,Выб,,"Ссылка");
			Спр.ДатаИзменения = ТекущаяДата();
			Спр.ДатаСоздания = ТекущаяДата();			
			Попытка 
				Спр.Записать();
				ХОбн=ХОбн+1;
			Исключение
				ХОшОбн=ХОшОбн+1;
				МЗ = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
				МЗ.ДатаОшибки = ТекущаяДата();
				МЗ.ОписаниеОшибки = ОписаниеОшибки();
				МЗ.МестоВозникновения = "web.zup_put_KKMUsersTable_2016 - обновление элемента";
				МЗ.Объект = "web.zup_put_KKMUsersTable_2016 - upd " + ХОшОбн;
				МЗ.Записать();
			КонецПопытки;
			
		
			//Если Х%100=0 Тогда
			//	ЗафиксироватьТранзакцию();
			//	НачатьТранзакцию();
			//Конецесли;	
			
		КонецЦикла;
		
		//Попытка
		//	ЗафиксироватьТранзакцию();
		//Исключение
		//КонецПопытки;

		 
	  МВТ.Закрыть();
	  
	  УЗ_РегламентныеЗадания.ОбновитьАРМ_РолиФизлиц();
	
	  Возврат "ОК. Новые: создано-"+ХСоздано+", ошибок-"+ХОшСоздано+". Обновленные: успешно-"+ХОбн+", ошибок-"+ХОшОбн+".";
	
	
	
	
	
КонецФункции

Функция Exch_OperCash_Delete(recIDArray)
	
	МассивИД=СериализаторXDTO.ПрочитатьXDTO(recIDArray);
	Для Каждого Элем Из МассивИД Цикл
		НЗ=РегистрыСведений.АптекаОфис.СоздатьНаборЗаписей();
		НЗ.Отбор.Код.Установить(Элем,Истина);
		НЗ.Записать();
	КонецЦикла;
	
	Возврат "ok";
	
КонецФункции

Функция Exch_ReUploadDocument(str_1c_vid_doc, GUID, SearchMethod)
	
	Если SearchMethod=300 Тогда // Ищем РККМ по гуиду смены	
		
		Запрос=Новый Запрос();
		Запрос.Текст="ВЫБРАТЬ
		             |	УЗ_РеализацияККМ.Ссылка
		             |ИЗ
		             |	Документ.УЗ_РеализацияККМ КАК УЗ_РеализацияККМ
		             |ГДЕ
		             |	УЗ_РеализацияККМ.GuidСмены = &GuidСмены";
					 
		Запрос.УстановитьПараметр("GuidСмены",GUID);
		
		Рез=Запрос.Выполнить();
		
		Если Рез.Пустой() Тогда
			Возврат "Нет РККМ с гуидом смены "+GUID;
		КонецЕсли;
		
		Выб=Рез.Выбрать();
		Пока Выб.Следующий() Цикл
			Док=Выб.Ссылка.ПолучитьОбъект();
			Док.ПоместитьВОбменСкладБух();
			Возврат "Отправлено в обмен";
		КонецЦикла;	
		
	Иначе // остальные документы ищем по ГУИДу документа 1с
		
		Док=Документы[str_1c_vid_doc].ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
		
		Попытка 
			
			ОбДок= Док.ПолучитьОбъект();
			Если ОбДок.Ссылка.Пустая()=Ложь Тогда
				Попытка 
					ОбДок.ПоместитьВОбменСкладБух();
					Возврат "Отправлено в обмен";
					
				Исключение
					Возврат "У вида документов "+str_1c_vid_doc+" нет процедуры ПоместитьВОбменСкладБух()";
				КонецПопытки;
				
				
			КонецЕсли;	
		Исключение 
			Возврат ("Нет документа с таким ГУИДом!");
		Конецпопытки;	
		
	Конецесли;	
	
	
КонецФункции

Функция Exch_GetDocListForComparison(str_1c_vid_doc, DateFrom, DateTo, OrgCode)
	
	
	Запрос=Новый Запрос();
	
	Запрос.УстановитьПараметр("ФирмаКод",OrgCode);
	Запрос.УстановитьПараметр("ДатаС",НачалоДня(DateFrom));
	Запрос.УстановитьПараметр("ДатаПо",КонецДня(DateTo));
	
	
	Если str_1c_vid_doc="УЗ_РеализацияККМ" ТОгда
		
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	БазаВыручки.Guid,
		             |	БазаВыручки.Сумма
		             |ИЗ
		             |	(ВЫБРАТЬ
		             |		УЗ_РеализацияККМ.GuidСмены КАК Guid,
		             |		УЗ_РеализацияККМ.СуммаВыручки КАК Сумма
		             |	ИЗ
		             |		Документ.УЗ_РеализацияККМ КАК УЗ_РеализацияККМ
		             |	ГДЕ
		             |		УЗ_РеализацияККМ.ФирмаКод = &ФирмаКод
		             |		И УЗ_РеализацияККМ.Дата МЕЖДУ &ДатаС И &ДатаПо
		             |		И УЗ_РеализацияККМ.Проведен = ИСТИНА
		             |	
		             |	ОБЪЕДИНИТЬ ВСЕ
		             |	
		             |	ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |		УЗ_РеализацияККМОтчетКомиссионераОПродажах.Ссылка.GuidСмены,
		             |		УЗ_РеализацияККМОтчетКомиссионераОПродажах.Ссылка.СуммаВыручки
		             |	ИЗ
		             |		Документ.УЗ_РеализацияККМ.ОтчетКомиссионераОПродажах КАК УЗ_РеализацияККМОтчетКомиссионераОПродажах
		             |	ГДЕ
		             |		УЗ_РеализацияККМОтчетКомиссионераОПродажах.КомитентОрганизация = &ФирмаКод
		             |		И УЗ_РеализацияККМОтчетКомиссионераОПродажах.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		             |		И УЗ_РеализацияККМОтчетКомиссионераОПродажах.Ссылка.Проведен = ИСТИНА) КАК БазаВыручки";
		
		
		РезТЗ=Запрос.Выполнить().Выгрузить();
		
				
		
	ИначеЕсли  str_1c_vid_doc="УЗ_ПоступлениеТовара" ТОгда
		
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |	УЗ_ПоступлениеТовара.ИДДокументаАптеки КАК Guid,
		             |	УЗ_ПоступлениеТовара.СуммаДок КАК Сумма
		             |ИЗ
		             |	Документ.УЗ_ПоступлениеТовара КАК УЗ_ПоступлениеТовара
		             |ГДЕ
		             |	УЗ_ПоступлениеТовара.Дата МЕЖДУ &ДатаС И &ДатаПо
		             |	И УЗ_ПоступлениеТовара.Проведен = ИСТИНА
		             |	И (УЗ_ПоступлениеТовара.Фирма.Код = &ФирмаКод
		             |			ИЛИ УЗ_ПоступлениеТовара.ФирмаКомитент.Код = &ФирмаКод)";
		
		РезТЗ=Запрос.Выполнить().Выгрузить();

	ИначеЕсли  str_1c_vid_doc="УЗ_Торг2" Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		             |	""123456789012345678901234567890123456"" КАК Guid,
		             |	УЗ_Торг2.СуммаЗакупБезНДС КАК Сумма,
		             |	УЗ_Торг2.Ссылка
		             |ИЗ
		             |	Документ.УЗ_Торг2 КАК УЗ_Торг2
		             |ГДЕ
		             |	УЗ_Торг2.Дата МЕЖДУ &ДатаС И &ДатаПо
		             |	И УЗ_Торг2.Проведен = ИСТИНА
		             |	И (УЗ_Торг2.Фирма.Код = &ФирмаКод
		             |			ИЛИ УЗ_Торг2.ДокументПоступления.ФирмаКомитент.Код = &ФирмаКод)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	УЗ_Торг2.Дата";
		
		РезТЗ=Запрос.Выполнить().Выгрузить();
		
		Для Каждого Стр Из РезТЗ Цикл
			Стр.Guid =Стр.ССылка.УникальныйИдентификатор();
		КонецЦикла;
		
		РезТЗ.Колонки.Удалить("Ссылка");
		
		
	ИначеЕсли  str_1c_vid_doc="УЗ_МелкооптоваяРеализация" или
			   str_1c_vid_doc="УЗ_ВозвратТовара" или
			   str_1c_vid_doc="УЗ_ВозвратОтПокупателя" или
			   str_1c_vid_doc="УЗ_Списание" или
			   str_1c_vid_doc="УЗ_Разбраковка"  или
			   str_1c_vid_doc="УЗ_КорректировкаНедовоза" или
			   str_1c_vid_doc="УЗ_Перемещение"
		ТОгда
		
		Запрос.Текст="ВЫБРАТЬ
		             |	""123456789012345678901234567890123456"" КАК Guid,
		             |	Стандартныйдокумент.СуммаЗакупБезНДС КАК Сумма,
		             |	Стандартныйдокумент.Ссылка
		             |ИЗ
		             |	Документ."+str_1c_vid_doc+" КАК Стандартныйдокумент
		             |ГДЕ
		             |	Стандартныйдокумент.Дата МЕЖДУ &ДатаС И &ДатаПо
		             |	И Стандартныйдокумент.Проведен = ИСТИНА
		             |	И Стандартныйдокумент.Фирма.Код = &ФирмаКод
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	Стандартныйдокумент.Дата";
		
		РезТЗ=Запрос.Выполнить().Выгрузить();
		
		Для Каждого Стр Из РезТЗ Цикл
			Стр.Guid =Стр.ССылка.УникальныйИдентификатор();
		КонецЦикла;
		 	
	    РезТЗ.Колонки.Удалить("Ссылка");
		
	КонецЕсли;
	
	ХДТОРез=СериализаторXDTO.ЗаписатьXDTO(РезТЗ);
	Возврат ХДТОРез;
	
	
КонецФункции


Функция Exch_GetDocListForComparison_ver2(QueryText, DateFrom, DateTo, OrgCode,CalculateGUID)
	
	
	Запрос=Новый Запрос();
	
	Запрос.УстановитьПараметр("ФирмаКод",OrgCode);
	Запрос.УстановитьПараметр("ДатаС",НачалоДня(DateFrom));
	Запрос.УстановитьПараметр("ДатаПо",КонецДня(DateTo));
	
	Запрос.Текст=QueryText;
	
	
	РезТЗ=Запрос.Выполнить().Выгрузить();
	
	Если CalculateGUID=Истина Тогда
		Для Каждого Стр Из РезТЗ Цикл
			Стр.Guid =Стр.ССылка.УникальныйИдентификатор();
		КонецЦикла;
	КонецЕсли;	
	
	РезТЗ.Колонки.Удалить("Ссылка");      // GtG  //  10.04.2016 20:46:11 
	
	ХДТОРез=СериализаторXDTO.ЗаписатьXDTO(РезТЗ);
	Возврат ХДТОРез;
	
	
КонецФункции



