
////////////////////////////////////////////////////////////
// СПРАВОЧНАЯ ИНФОРМАЦИЯ

// -- Товары

Функция site_pc_ap_getlist_fuzzy_match(searchstring, from_begining)
	
	УсловиеПоискаТоваров=ПоискПоНечеткомуСоответствию.ПолучитьУсловиеОтбораПоНечеткомуСоответствию(searchstring,не from_begining);
	
	
	Запрос=Новый Запрос();
	
	Запрос.Текст="ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	|	ЕСТЬNULL(ИМЯСПРАВОЧНИКА.Родитель.Код, 0) КАК ПапкаКод
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	111 = 111
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"111 = 111",СокрЛП(УсловиеПоискаТоваров));
	
	Рез=Запрос.Выполнить();
	
	Тип_ТаблицаВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","reflist");
	Тип_СтрокаТаблицыВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","reflist_string");
	
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Выб=Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		СтрокаВозврата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.code=Число(Выб.Код);//" type="xs:integer"/>
		СтрокаВозврата.name=СокрЛП(Выб.Наименование);//" type="xs:string"/>
		СтрокаВозврата.extra_info=СокрЛП(Выб.ПапкаКод);
		
		ТаблицаВозврата.string.Добавить(СтрокаВозврата);
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	
	
	
КонецФункции

Функция site_pc_fuzzy_search10_prod(search_string)
	
	УсловиеПоискаТоваров=ПоискПоНечеткомуСоответствию.ПолучитьУсловиеОтбораПоНечеткомуСоответствию(search_string);
	
	Запрос=Новый Запрос();
	Запрос.Текст=
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК good_code,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК name,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.МинЦенаMedlux КАК price,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС КАК zhnvls,
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Код, 0) КАК podkat_code,
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Наименование, """") КАК podkat_name,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП КАК ap_active
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	111 = 111
	|	И НЕ АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления
	|	И НЕ АССОРТИМЕНТНЫЙ_ПЛАН.ПККН";
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"111 = 111", УсловиеПоискаТоваров);
	
	Результат=Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Тип_Таблица=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","goods_list");
	Тип_СтрокаТаблицы=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","goods_list_string");	
	
	Отчет=ФабрикаXDTO.Создать(Тип_Таблица);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаОтчета=ФабрикаXDTO.Создать(Тип_СтрокаТаблицы);
		
		СтрокаОтчета.good_code=ВыборкаДетальныеЗаписи.good_code;
		СтрокаОтчета.name=ВыборкаДетальныеЗаписи.name;
		СтрокаОтчета.ap_active=ВыборкаДетальныеЗаписи.ap_active;
			
		Отчет.goods_list_string.Добавить( СтрокаОтчета );
		
	КонецЦикла;
	
	Возврат Отчет;	

КонецФункции

Функция site_avans_getpricelist()
	
	Запрос = Новый Запрос;
	                		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК good_code,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС КАК zhnvls,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК name,
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Код, 0) КАК podkat_code,
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Наименование, """") КАК podkat_name,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП КАК ap_active,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.АссортиментГипермаркета КАК hyper,
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.Наименование, """") КАК brand_name,
	|	ВЫБОР
	|		КОГДА АССОРТИМЕНТНЫЙ_ПЛАН.Категория.Наименование ПОДОБНО ""СТМ%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК stm,
	|	МИНИМУМ(ЕСТЬNULL(СрокиПоставкиТоваров_ДляЗаказовПоПредоплате.СрокПоставки, 0)) КАК supply_term,
	|	ЕСТЬNULL(ИнтернетЦены.Цена, 0) КАК price
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПоставкиТоваров_ДляЗаказовПоПредоплате КАК СрокиПоставкиТоваров_ДляЗаказовПоПредоплате
	|		ПО (СрокиПоставкиТоваров_ДляЗаказовПоПредоплате.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЦены КАК ИнтернетЦены
	|		ПО АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка = ИнтернетЦены.Товар
	|			И (ИнтернетЦены.СубъектРФ = &СубъектРФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование,
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Код, 0),
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Наименование, """"),
	|	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.АссортиментГипермаркета,
	|	ВЫБОР
	|		КОГДА АССОРТИМЕНТНЫЙ_ПЛАН.Категория.Наименование ПОДОБНО ""СТМ%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИнтернетЦены.Цена, 0),
	|	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.Наименование, """")";
	
	Запрос.УстановитьПараметр("СубъектРФ", Справочники.СубъектыРФ.НайтиПоКоду(31)); //!!! временно
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Тип_Таблица = ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "price_list");
	Тип_СтрокаТаблицы = ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "price_list_string");
	
	
	Отчет = ФабрикаXDTO.Создать(Тип_Таблица);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 		
		СтрокаОтчета=ФабрикаXDTO.Создать(Тип_СтрокаТаблицы);
		
		СтрокаОтчета.good_code		= ВыборкаДетальныеЗаписи.good_code;
		СтрокаОтчета.name			= ВыборкаДетальныеЗаписи.name;
		СтрокаОтчета.zhnvls			= ВыборкаДетальныеЗаписи.zhnvls;
		СтрокаОтчета.price			= ВыборкаДетальныеЗаписи.price;
		СтрокаОтчета.supply_term	= ВыборкаДетальныеЗаписи.supply_term;
		СтрокаОтчета.podkat_code	= ВыборкаДетальныеЗаписи.podkat_code;
		СтрокаОтчета.podkat_name	= ВыборкаДетальныеЗаписи.podkat_name;
        СтрокаОтчета.ap_active		= ВыборкаДетальныеЗаписи.ap_active;
		СтрокаОтчета.hyper			= ВыборкаДетальныеЗаписи.hyper;
		СтрокаОтчета.stm			= ВыборкаДетальныеЗаписи.stm;
		СтрокаОтчета.brand_name		= ВыборкаДетальныеЗаписи.brand_name;
		
		Отчет.price_list_string.Добавить(СтрокаОтчета);
		
	КонецЦикла;
	
	Возврат Отчет;
	
КонецФункции

// -- Аптеки

Функция it_get_subject_list()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаХранения.Код КАК apt_code,
	|	МестаХранения.СубъектРФ.Наименование КАК subject_name,
	|	МестаХранения.СубъектРФ.Код КАК subject_code
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	НЕ МестаХранения.СубъектРФ.Наименование ЕСТЬ NULL ";
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "subject_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "subject_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.subject_name = СокрЛП(ВыборкаДетальныеЗаписи.subject_name);
		СтрокаВозврата.apt_code = ВыборкаДетальныеЗаписи.apt_code;
		СтрокаВозврата.subject_code = ВыборкаДетальныеЗаписи.subject_code;
		
		ТаблицаВозврата.subject_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_apt_firm(apt_code)
	
	//ТСО {14.09.2015 #0042}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.Код КАК КодАптеки,
	|	МестаХранения.Фирма.Код КАК КодФирмы,
	|	МестаХранения.Фирма.Наименование КАК НаименованиеФирмы
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.Фирма <> ЗНАЧЕНИЕ(Справочник.Фирмы.ПустаяСсылка)
	|	И 111 = 111";
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "МестаХранения.Код = &Код");
		Запрос.УстановитьПараметр("Код", apt_code);
	КонецЕсли; 	
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_firm_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_firm_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code		= Выборка.КодАптеки;
		СтрокаВозврата.firm_code	= Выборка.КодФирмы;
		СтрокаВозврата.firm_name	= СокрЛП(Выборка.НаименованиеФирмы);
		
		ТаблицаВозврата.apt_firm_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата; 	
	
КонецФункции

Функция it_get_camera_list()
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	МестаХранения.Код,
	                    |	МестаХранения.Наименование,
	                    |	МестаХранения.АдресКамеры
	                    |ИЗ
	                    |	Справочник.МестаХранения КАК МестаХранения
	                    |ГДЕ
	                    |	ПОДСТРОКА(МестаХранения.АдресКамеры, 1, 100) <> """"");
	
	Рез=Запрос.Выполнить();
	
	Тип_ТаблицаВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","camera_list");
	Тип_СтрокаТаблицыВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","camera_list_string");

	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Выб=Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		СтрокаВозврата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code=Число(Выб.Код);//" type="xs:integer"/>
		СтрокаВозврата.apt_name=СокрЛП(Выб.Наименование);//" type="xs:string"/>
		СтрокаВозврата.camera_url=СокрЛП(Выб.АдресКамеры);
		
		ТаблицаВозврата.camera_list_string.Добавить(СтрокаВозврата);
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	
	
						
	
	
КонецФункции

Функция get_apt_info(apt_code)
	
	//ТСО {11.03.2015 #0015}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаХранения.Код,
	|	МестаХранения.Наименование,
	|	ЕСТЬNULL(МестаХранения.Фирма.Код, 0) КАК КодФирмы,
	|	ЕСТЬNULL(МестаХранения.Фирма.Наименование, """") КАК НаименованиеФирмы,
	|	ЕСТЬNULL(ДопРеквизитыМестХранений.КатегорияАптекиПоТО.ПорогПоТоваруДня, 0) КАК ПорогПоТоваруДня,
	|	ДопРеквизитыМестХранений.МобильныйБухгалтер.Наименование КАК МобБухгалтерФИО,
	|	ДопРеквизитыМестХранений.МобильныйБухгалтер.ЭлектроннаяПочта КАК МобБухгалтерМэйл,
	|	ДопРеквизитыМестХранений.ОфисныйБухгалтер.Наименование КАК ОфБухгалтерФИО,
	|	ДопРеквизитыМестХранений.ОфисныйБухгалтер.ЭлектроннаяПочта КАК ОфБухгалтерМэйл,
	|	МестаХранения.АптекаКлиника,
	|	ВЫБОР
	|		КОГДА МестаХранения.ФорматПоПлощади = &ФорматГипермаркет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГипермаркет,
	|	ЕСТЬNULL(Управляющие.ФИО, """") КАК УправляющийАптекойФИО
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений КАК ДопРеквизитыМестХранений
	|		ПО МестаХранения.Ссылка = ДопРеквизитыМестХранений.Аптека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК Управляющие
	|		ПО МестаХранения.Ссылка = Управляющие.Ссылка
	|			И (Управляющие.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой))
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И 111 = 111";
	
	Запрос.УстановитьПараметр("ФорматГипермаркет", Справочники.ФорматПоПлощади.НайтиПоКоду("000000014"));
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "МестаХранения.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли; 	
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_info");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_info_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code 		= Выборка.Код;
		СтрокаВозврата.apt_name 		= СокрЛП(Выборка.Наименование);
		СтрокаВозврата.firm_code 		= Выборка.КодФирмы;
		СтрокаВозврата.firm_name 		= СокрЛП(Выборка.НаименованиеФирмы);
		СтрокаВозврата.goods_day_limit	= Выборка.ПорогПоТоваруДня;
		СтрокаВозврата.buh_name			= СокрЛП(Выборка.МобБухгалтерФИО);
		СтрокаВозврата.buh_mail			= СокрЛП(Выборка.МобБухгалтерМэйл);
		СтрокаВозврата.office_buh_name	= СокрЛП(Выборка.ОфБухгалтерФИО);
		СтрокаВозврата.office_buh_mail	= СокрЛП(Выборка.ОфБухгалтерМэйл);
		СтрокаВозврата.hyper			= Выборка.ЭтоГипермаркет;
		СтрокаВозврата.clinic			= Выборка.АптекаКлиника;
		
		ТаблицаВозврата.apt_info_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	
	
КонецФункции

Функция get_apt_info_2(apt_code)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(1) КАК КолвоСотрудников
	|ПОМЕСТИТЬ втСотрудники
	|ИЗ
	|	Справочник.Сотрудники_Физлица КАК Сотрудники_Физлица
	|ГДЕ
	|	Сотрудники_Физлица.Состояние <> 0
	|	И Сотрудники_Физлица.КодОсновногоМестаРаботы = &КодСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК КолвоКасс
	|ПОМЕСТИТЬ втКассы
	|ИЗ
	|	РегистрСведений.УЗ_ФискальныеРегистраторыВАптеках КАК УЗ_ФискальныеРегистраторыВАптеках
	|ГДЕ
	|	УЗ_ФискальныеРегистраторыВАптеках.ДатаПоследнейСмены >= &ДатаНачала
	|	И УЗ_ФискальныеРегистраторыВАптеках.СкладКод = &КодСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОТЧ_ОтчетПоВыручкеОбороты.СуммаВыручкиОборот) КАК СуммаВыручки
	|ПОМЕСТИТЬ втВыручка
	|ИЗ
	|	РегистрНакопления.ОТЧ_ОтчетПоВыручке.Обороты(&ДатаНачала, &ДатаОкончания, , СкладКод = &КодСклада) КАК ОТЧ_ОтчетПоВыручкеОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МестаХранения.Метро.Наименование, """") КАК Метро,
	|	ЕСТЬNULL(МестаХранения.РежимРаботы.Наименование, """") КАК РежимРаботы,
	|	ЕСТЬNULL(втСотрудники.КолвоСотрудников, 0) КАК КолвоСотрудников,
	|	ЕСТЬNULL(втКассы.КолвоКасс, 0) КАК КолвоКасс,
	|	ЕСТЬNULL(втВыручка.СуммаВыручки, 0) КАК СуммаВыручки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСотрудники КАК втСотрудники
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКассы КАК втКассы
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыручка КАК втВыручка
	|		ПО (ИСТИНА)
	|ГДЕ
	|	МестаХранения.Код = &КодСклада";
	
	ДатаОкончания = КонецДня(ТекущаяДата() - 24*60*60);
	ДатаНачала = НачалоДня(ДатаОкончания - 29*24*60*60);
	
	Запрос.УстановитьПараметр("КодСклада", apt_code);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_info_2");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_info_2_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code 	= apt_code;
		СтрокаВозврата.metro 		= СокрЛП(Выборка.Метро);
		СтрокаВозврата.time 		= СокрЛП(Выборка.РежимРаботы);
		СтрокаВозврата.qnt_workers 	= Выборка.КолвоСотрудников;
		СтрокаВозврата.qnt_cashbox	= Выборка.КолвоКасс;
		СтрокаВозврата.sum_sales	= Окр(Выборка.СуммаВыручки / 30, 2); // среднедневная выручка за последние 30 дней
		
		ТаблицаВозврата.apt_info_2_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция it_add_camera_url(apt_code, URL)
	
	Аптека=Справочники.МестаХранения.НайтиПоКоду(apt_code);
	
	Если Аптека=Неопределено Тогда
		Возврат "bad code";
	КонецЕсли;	  
	
	ОбАптека=Аптека.ПолучитьОбъект();
	ОбАптека.АдресКамеры=СокрЛП(URL);
	ОбАптека.Записать();
	
	Возврат "ok";
	
КонецФункции

Функция get_apt_regim_list(date, apt_code)

	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);	
	Если Аптека.Пустая() Тогда
		Возврат "-1 Не найдена аптека по коду " + apt_code;
	КонецЕсли;
	
	РежимРаботы = Аптека.РежимРаботы;	
	Если РежимРаботы.Пустая() Тогда
		Возврат "-1 Не заполнен режим работы по аптеке";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РежимыРаботыАптекСостав.ВремяНачала КАК ВремяНачала,
	|	РежимыРаботыАптекСостав.ВремяОкончания КАК ВремяОкончания,
	|	РежимыРаботыАптекСостав.ПланВЧасах КАК ПланВЧасах
	|ИЗ
	|	Справочник.РежимыРаботыАптек.Состав КАК РежимыРаботыАптекСостав
	|ГДЕ
	|	РежимыРаботыАптекСостав.Ссылка = &Ссылка
	|	И РежимыРаботыАптекСостав.ДеньНедели = &ДеньНедели";	
	
	Запрос.УстановитьПараметр("Ссылка",	РежимРаботы);
	Запрос.УстановитьПараметр("ДеньНедели", ДеньНедели(date));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_regim_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_regim_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл						
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.time_begin	= Выборка.ВремяНачала;
		СтрокаВозврата.time_end		= Выборка.ВремяОкончания;		
		СтрокаВозврата.hours_plan	= Выборка.ПланВЧасах;
		
		ТаблицаВозврата.apt_regim_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_all_apt_regim_list()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.Код КАК КодАптеки,
	|	РежимыРаботыАптекСостав.ДеньНедели КАК ДеньНедели,
	|	РежимыРаботыАптекСостав.ВремяНачала КАК ВремяНачала,
	|	РежимыРаботыАптекСостав.ВремяОкончания КАК ВремяОкончания,
	|	РежимыРаботыАптекСостав.ПланВЧасах КАК ПланВЧасах
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РежимыРаботыАптек.Состав КАК РежимыРаботыАптекСостав
	|		ПО МестаХранения.РежимРаботы = РежимыРаботыАптекСостав.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАптеки,
	|	ДеньНедели";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "all_apt_regim_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "all_apt_regim_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл						
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code		= Выборка.КодАптеки;
		СтрокаВозврата.day_of_week	= Выборка.ДеньНедели;
		СтрокаВозврата.time_begin	= Выборка.ВремяНачала;
		СтрокаВозврата.time_end		= Выборка.ВремяОкончания;		
		СтрокаВозврата.hours_plan	= Выборка.ПланВЧасах;
		
		ТаблицаВозврата.all_apt_regim_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	
	
КонецФункции

// -- Поставщики

Функция it_get_suppliers_list(apt_code)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрактыИАптеки.Владелец.Владелец.Код КАК КодПоставщика,
	|	КонтрактыИАптеки.Владелец.Владелец.Наименование КАК НаименованиеПоставщика,
	|	ЕСТЬNULL(КонтрактыИАптеки.Владелец.Владелец.ОтветственныйМенеджер.Наименование, """") КАК ОтветственныйМенеджер,
	|	КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки КАК ОсуществляетПрямыеПоставки
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|ГДЕ
	|	111 = 111
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодПоставщика";
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "КонтрактыИАптеки.Аптека = &Аптека");		
		Запрос.УстановитьПараметр("Аптека", Аптека);
		
		СубъектРФ = Аптека.СубъектРФ;
		Если СубъектРФ = Справочники.СубъектыРФ.НайтиПоКоду(14)
			Или СубъектРФ = Справочники.СубъектыРФ.НайтиПоКоду(32) Тогда
			ПодменятьНаименованиеПоставщика = Истина;
		Иначе
			ПодменятьНаименованиеПоставщика = Ложь;
		КонецЕсли;	
		
	КонецЕсли; 	
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "suppliers_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "suppliers_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.КодПоставщика = 3055 И ПодменятьНаименованиеПоставщика Тогда
			НаименованиеПоставщика = "ДЖИ ДИ ПИ (СПБ)";
		Иначе
			НаименованиеПоставщика = СокрЛП(ВыборкаДетальныеЗаписи.НаименованиеПоставщика);
		КонецЕсли;
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.code 	= ВыборкаДетальныеЗаписи.КодПоставщика;
		СтрокаВозврата.name 	= НаименованиеПоставщика;
		СтрокаВозврата.manager	= СокрЛП(ВыборкаДетальныеЗаписи.ОтветственныйМенеджер);
		СтрокаВозврата.active	= ВыборкаДетальныеЗаписи.ОсуществляетПрямыеПоставки;
		
		ТаблицаВозврата.suppliers_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

// -- Сотрудники

Функция get_sotr_info(apt_code)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники_Физлица.Код,
	|	Сотрудники_Физлица.Наименование,
	|	Сотрудники_Физлица.СНИЛС
	|ИЗ
	|	Справочник.Сотрудники_Физлица КАК Сотрудники_Физлица
	|ГДЕ
	|	Сотрудники_Физлица.Состояние <> 0
	|	И 111 = 111";
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "Сотрудники_Физлица.КодОсновногоМестаРаботы = &КодОсновногоМестаРаботы");
		Запрос.УстановитьПараметр("КодОсновногоМестаРаботы", apt_code);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "sotr_info");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "sotr_info_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.code 	= Выборка.Код;
		СтрокаВозврата.name 	= СокрЛП(Выборка.Наименование);
		СтрокаВозврата.tab_num	= Выборка.Код;
		СтрокаВозврата.pfr_num	= Выборка.СНИЛС;
		
		ТаблицаВозврата.sotr_info_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_supplier_info(supplier_code)
	
	Запрос = Новый Запрос();	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поставщики.Код,
	|	Поставщики.Наименование,
	|	Поставщики.ОтветственныйЗаВыгрузкуНакладныхФИО,
	|	Поставщики.ОтветственныйЗаВыгрузкуНакладныхПочта,
	|	Поставщики.FTPДляПретензийАдрес,
	|	Поставщики.FTPДляПретензийПользователь,
	|	Поставщики.FTPДляПретензийПароль,
	|	Поставщики.ПочтаДляПретензий,
	|	ЕСТЬNULL(Поставщики.ОтветственныйМенеджер.Наименование, """") КАК Менеджер,
	|	ЕСТЬNULL(Поставщики.ОтветственныйМенеджер.ЛогинЛК, """") КАК ЛогинМенеджера
	|ИЗ
	|	Справочник.Поставщики КАК Поставщики
	|ГДЕ
	|	Поставщики.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.Поставщики.НайтиПоКоду(supplier_code));
				 
	Результат = Запрос.Выполнить();  	
	Выборка = Результат.Выбрать();	
	
	Тип_СтруктураВозврата = ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "suppliers_info");
	СтруктураВозврата = ФабрикаXDTO.Создать(Тип_СтруктураВозврата);
	
	Если Выборка.Следующий() Тогда 		
		СтруктураВозврата.supplier_code	= Выборка.Код;
		СтруктураВозврата.supplier_name	= Выборка.Наименование;
		СтруктураВозврата.contact_name	= Выборка.ОтветственныйЗаВыгрузкуНакладныхФИО;
		СтруктураВозврата.contact_mail	= Выборка.ОтветственныйЗаВыгрузкуНакладныхПочта;
		СтруктураВозврата.ftp_adress	= Выборка.FTPДляПретензийАдрес;
		СтруктураВозврата.ftp_user		= Выборка.FTPДляПретензийПользователь;
		СтруктураВозврата.ftp_password	= Выборка.FTPДляПретензийПароль;
		СтруктураВозврата.pretenz_mail	= Выборка.ПочтаДляПретензий;
		СтруктураВозврата.manager_name	= Выборка.Менеджер;
		СтруктураВозврата.manager_login	= Выборка.ЛогинМенеджера;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция change_usr_pwd(snils, newpwd)
	
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	АРМ_РолиФизлиц.СотрудникФизлицо,
	             |	АРМ_РолиФизлиц.Заведующий,
	             |	АРМ_РолиФизлиц.ТерМен,
	             |	АРМ_РолиФизлиц.Пароль
	             |ИЗ
	             |	РегистрСведений.АРМ_РолиФизлиц КАК АРМ_РолиФизлиц
	             |ГДЕ
	             |	АРМ_РолиФизлиц.СотрудникФизлицо.СНИЛС = &СНИЛС";
	
	Запрос.УстановитьПараметр("СНИЛС",СокрЛП(snils));
	
	Рез=Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат("Пользователь со СНИЛС "+сокрлп(snils)+" не найден в таблице ответственных пользователей.
		|Либо это рядовой пользователь и ему не положено иметь персональный пароль,
		|либо это новый ответственный пользователь, которого должны внести в таблицу АРМ Роли физлиц в складской базе.
		|Для внесения в эту таблицу следует обратиться в офис.");
	КонецЕсли;
	
	
	Выб=Рез.Выбрать();
	Выб.Следующий();
	
	МЗ=РегистрыСведений.АРМ_РолиФизлиц.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МЗ,Выб);
	МЗ.Пароль=СокрЛП(newpwd);
	
	Попытка
		МЗ.Записать();
		Возврат "Проль успешно изменен!";
	Исключение
		Возврат "Не удалось изменить пароль! "+ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции


////////////////////////////////////////////////////////////
// ПОСТУПЛЕНИЯ

Функция check_invoice_status(supplier_code, invoice_number)
	
	Поставщик = Справочники.Поставщики.НайтиПоКоду(supplier_code);
	
	Если Поставщик.Пустая() Тогда
		Возврат "-1 Не найден поставщик по коду " + Формат(supplier_code, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	Запрос = Новый Запрос();	
	Запрос.Текст =   	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ПоступлениеТовара.Проведен
	|				И ПоступлениеТовара.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусПрихода.ВыгруженНаАптеку)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыгруженНаАптеку
	|ИЗ
	|	Документ.УЗ_ПоступлениеТовара КАК ПоступлениеТовара
	|ГДЕ
	|	ПоступлениеТовара.Поставщик = &Поставщик
	|	И ПоступлениеТовара.ВхНомерНакл = &НомерДокумента
	|	И ПоступлениеТовара.Дата >= &НачалоПериода";
	
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("НомерДокумента", invoice_number);
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоГода(ТекущаяДата()), -1));
				 
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда		
		Возврат 0;		
	КонецЕсли;
	 
	Выборка = Результат.Выбрать();	
	Выборка.Следующий(); 
	
	Если Выборка.ВыгруженНаАптеку Тогда
		Возврат 2;	
	Иначе
		Возврат 1; 		
	КонецЕсли; 	
	
КонецФункции

Функция get_invoice_status(supplier_code, invoice_number)
	
	Поставщик = Справочники.Поставщики.НайтиПоКоду(supplier_code);
	
	Если Поставщик.Пустая() Тогда
		Возврат "-1 Не найден поставщик по коду " + Формат(supplier_code, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	Запрос = Новый Запрос();	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТовара.Ссылка КАК Ссылка,
	|	ПоступлениеТовара.Проведен КАК Проведен,
	|	ПоступлениеТовара.ПометкаУдаления КАК ПометкаУдаления,
	|	ПоступлениеТовара.Статус КАК Статус,
	|	ПоступлениеТовара.СтатусДокАптеки КАК СтатусДокАптеки,
	|	ПоступлениеТовара.ДатаФактПоступления КАК ДатаФактПоступления
	|ИЗ
	|	Документ.УЗ_ПоступлениеТовара КАК ПоступлениеТовара
	|ГДЕ
	|	ПоступлениеТовара.Поставщик = &Поставщик
	|	И ПоступлениеТовара.ВхНомерНакл = &НомерДокумента
	|	И ПоступлениеТовара.Дата >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТовара.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("НомерДокумента", invoice_number);
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоГода(ТекущаяДата()), -1));
	
	
	invoice_status = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "invoice_status"));
	invoice_status.found = Ложь;
	invoice_status.posted = Ложь;
	invoice_status.deleted = Ложь;
	invoice_status.status_in_office = "";
	invoice_status.status_in_apt = "";
	invoice_status.goods_receipt_date = Дата(1,1,1);
	
	
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда		
		ОМ_ТСО.ДобавитьДокументВРегистрОтсутствующих(Поставщик, invoice_number);
		Возврат invoice_status;		
	КонецЕсли;
	 
	Выборка = Результат.Выбрать();	
	Выборка.Следующий(); 
	
	invoice_status.found = Истина;
	invoice_status.posted = Выборка.Проведен;
	invoice_status.deleted = Выборка.ПометкаУдаления;
	invoice_status.status_in_office = ОМ_ТСО.ПолучитьИмяЗначенияПеречисления(Выборка.Статус);;
	invoice_status.status_in_apt = ОМ_ТСО.ПолучитьИмяЗначенияПеречисления(Выборка.СтатусДокАптеки);;
	invoice_status.goods_receipt_date = Выборка.ДатаФактПоступления;
		
	Возврат invoice_status;
	
КонецФункции


////////////////////////////////////////////////////////////
// ПЕРЕМЕЩЕНИЯ

Функция get_transferdoc_number(invoice_number, invoice_date, from_loc, to_loc)
	
	Параметры = Новый Структура("invoice_number, invoice_date, from_loc, to_loc", invoice_number, invoice_date, from_loc, to_loc);
	
	ТекДата = ТекущаяДата();
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекДата, "get_transferdoc_number", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	
	Отправитель = Справочники.МестаХранения.НайтиПоКоду(from_loc);
	Получатель = Справочники.МестаХранения.НайтиПоКоду(to_loc);
	
	Если ЗначениеЗаполнено(invoice_date) Тогда
		ДатаНачала = invoice_date - 2*24*60*60;
		ДатаОкончания = invoice_date + 2*24*60*60;
	Иначе
		ДатаНачала = Мин(НачалоГода(ТекДата), ДобавитьМесяц(ТекДата, -3));
		ДатаОкончания = КонецГода(ТекДата);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЗ_Перемещение.Номер
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.Дата Между &ДатаНачала И &ДатаОкончания
	|	И УЗ_Перемещение.СкладОтправитель = &Отправитель
	|	И УЗ_Перемещение.ПометкаУдаления = ЛОЖЬ
	|	И УЗ_Перемещение.НомДокАптекиОтправителя = &НомДокАптеки
	|	И УЗ_Перемещение.СкладПолучатель = &Получатель";
	
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	Запрос.УстановитьПараметр("Отправитель",	Отправитель);
	Запрос.УстановитьПараметр("Получатель",		Получатель);	
	Запрос.УстановитьПараметр("НомДокАптеки",	invoice_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьВЛог(ТекДата, "get_transferdoc_number", 2, 0, "Возвращаемое значение", "0");
		Возврат 0;
	КонецЕсли;
	   	
	Выборка = РезультатЗапроса.Выбрать();		
	Если Выборка.Количество() > 1 Тогда
		ТекстОшибки = "-1 По данному номеру зарегистрировано более одного документа";
		ЗаписьВЛог(ТекДата, "get_transferdoc_number", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Выборка.Следующий();
	НомерДокументаПеремещения = Выборка.Номер;
	
	ЗаписьВЛог(ТекущаяДата(), "get_transferdoc_number", 2, 0, "Возвращаемое значение", НомерДокументаПеремещения);	   
	Возврат НомерДокументаПеремещения;
	
КонецФункции

Функция get_transferdoc_guid(invoice_number, invoice_date, from_loc, to_loc)
	
	Параметры = Новый Структура("invoice_number, invoice_date, from_loc, to_loc", invoice_number, invoice_date, from_loc, to_loc);
	
	ТекДата = ТекущаяДата();
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекДата, "get_transferdoc_guid", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	
	Отправитель = Справочники.МестаХранения.НайтиПоКоду(from_loc);
	Получатель = Справочники.МестаХранения.НайтиПоКоду(to_loc);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЗ_Перемещение.ИДДокументаАптекиОтправитель КАК ИДДокументаАптекиОтправитель
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.СкладОтправитель = &Отправитель
	|	И УЗ_Перемещение.ПометкаУдаления = ЛОЖЬ
	|	И УЗ_Перемещение.НомДокАптекиОтправителя = &НомДокАптеки
	|	И УЗ_Перемещение.СкладПолучатель = &Получатель";
	
	Запрос.УстановитьПараметр("Отправитель",	Отправитель);
	Запрос.УстановитьПараметр("Получатель",		Получатель);	
	Запрос.УстановитьПараметр("НомДокАптеки",	invoice_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьВЛог(ТекДата, "get_transferdoc_guid", 2, 0, "Возвращаемое значение", "");
		Возврат 0;
	КонецЕсли;
	   	
	Выборка = РезультатЗапроса.Выбрать();		
	Если Выборка.Количество() > 1 Тогда
		ТекстОшибки = "-1 По данному номеру зарегистрировано более одного документа";
		ЗаписьВЛог(ТекДата, "get_transferdoc_guid", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Выборка.Следующий();
	ИДДокументаПеремещения = Выборка.ИДДокументаАптекиОтправитель;
	
	ЗаписьВЛог(ТекущаяДата(), "get_transferdoc_guid", 2, 0, "Возвращаемое значение", ИДДокументаПеремещения);	   
	Возврат ИДДокументаПеремещения;
	
КонецФункции

// ==>ЕНТ-1521.Коробка.2019.03.25
// Копия функции get_transferdoc_guid.
// В запросе уточнен статус документа
Функция get_transferdoc_guid_new(invoice_number, invoice_date, from_loc, to_loc)
	
	Параметры = Новый Структура("invoice_number, invoice_date, from_loc, to_loc", invoice_number, invoice_date, from_loc, to_loc);
	
	ТекДата = ТекущаяДата();
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекДата, "get_transferdoc_guid_new", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	
	Отправитель = Справочники.МестаХранения.НайтиПоКоду(from_loc);
	Получатель = Справочники.МестаХранения.НайтиПоКоду(to_loc);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЗ_Перемещение.ИДДокументаАптекиОтправитель КАК ИДДокументаАптекиОтправитель
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.СкладОтправитель = &Отправитель
	|	И УЗ_Перемещение.ПометкаУдаления = ЛОЖЬ
	|	И УЗ_Перемещение.НомДокАптекиОтправителя = &НомДокАптеки
	|	И УЗ_Перемещение.СкладПолучатель = &Получатель
	// ==>.Изменения по сравнению с get_transferdoc_guid
	|	И УЗ_Перемещение.Статус = &Статус";
	// <==.Изменения по сравнению с get_transferdoc_guid
	
	Запрос.УстановитьПараметр("Отправитель",	Отправитель);
	Запрос.УстановитьПараметр("Получатель",		Получатель);	
	Запрос.УстановитьПараметр("НомДокАптеки",	invoice_number);
	// ==>.Изменения по сравнению с get_transferdoc_guid
	Запрос.УстановитьПараметр("Статус",	Перечисления.СтатусыПеремещения.ОжидаетСогласования);
	// <==.Изменения по сравнению с get_transferdoc_guid
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьВЛог(ТекДата, "get_transferdoc_guid_new", 2, 0, "Возвращаемое значение", "");
		Возврат 0;
	КонецЕсли;
	   	
	Выборка = РезультатЗапроса.Выбрать();		
	Если Выборка.Количество() > 1 Тогда
		ТекстОшибки = "-1 По данному номеру зарегистрировано более одного документа";
		ЗаписьВЛог(ТекДата, "get_transferdoc_guid_new", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Выборка.Следующий();
	ИДДокументаПеремещения = Выборка.ИДДокументаАптекиОтправитель;
	
	ЗаписьВЛог(ТекущаяДата(), "get_transferdoc_guid_new", 2, 0, "Возвращаемое значение", ИДДокументаПеремещения);	   
	Возврат ИДДокументаПеремещения;
	
КонецФункции
// <==ЕНТ-1521.Коробка.2019.03.25

Функция post_transferorder_ready(order_number, order_type, doc_number, doc_date, exp_type, individual, now, qnt_places)
	
	Параметры = Новый Структура(
	"order_number, order_type, doc_number, doc_date, exp_type, individual, now, qnt_places", 
	order_number, order_type, doc_number, doc_date, exp_type, individual, now, qnt_places);
	
	ТекДата = ТекущаяДата();
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекДата, "post_transferorder_ready", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	Если ЗначениеЗаполнено(doc_date) Тогда
		ДатаНачала = doc_date - 2*24*60*60;
		ДатаОкончания = doc_date + 2*24*60*60;
	Иначе
		ДатаНачала = Мин(НачалоГода(ТекДата), ДобавитьМесяц(ТекДата, -3));
		ДатаОкончания = КонецГода(ТекДата);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_Перемещение.Ссылка
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.Номер = &НомерПеремещения
	|	И УЗ_Перемещение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("НомерПеремещения", doc_number);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДокументПеремещения = Выборка.Ссылка;	
	
	СкладОтправитель	= ДокументПеремещения.СкладОтправитель;
	ФирмаОтправитель	= СкладОтправитель.Фирма;
	СкладПолучатель		= ДокументПеремещения.СкладПолучатель;
	ВидЭкспедиции		= Справочники.ВидыЭкспедиции.НайтиПоКоду(exp_type);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_РаспоряжениеНаПеремещение.НомерЗаявкиЛК
	|ИЗ
	|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
	|ГДЕ
	|	УЗ_РаспоряжениеНаПеремещение.ДокументПеремещения = &ДокументПеремещения";
	
	Запрос.УстановитьПараметр("ДокументПеремещения", ДокументПеремещения);
	
	РезультатЗапроса = Запрос.Выполнить();
	    	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = "-1 Накладная с указанным номером уже привязана к заявке " + Выборка.НомерЗаявкиЛК;
		ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если order_type = 1 Тогда // распоряжение создано в 1С
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УЗ_РаспоряжениеНаПеремещение.Ссылка
		|ИЗ
		|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
		|ГДЕ
		|	УЗ_РаспоряжениеНаПеремещение.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", order_number);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = "-1 Не найдено распоряжение по номеру " + order_number;
			ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();			
		Выборка.Следующий();
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ДокументПеремещения	= ДокументПеремещения;
		ДокОбъект.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
		ДокОбъект.ИндивидуальныйЗаказ	= individual;
		ДокОбъект.Срочно				= now;
		ДокОбъект.ВидЭкспедиции 		= ВидЭкспедиции;
		ДокОбъект.КоличествоМест		= qnt_places;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
			ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецПопытки;
		
		
	ИначеЕсли order_type = 2 Тогда // распоряжение создано в ЛК
		
		ДокОбъект = Документы.УЗ_РаспоряжениеНаПеремещение.СоздатьДокумент();
		ДокОбъект.Дата					= ТекДата;
		ДокОбъект.Склад					= СкладОтправитель;
		ДокОбъект.Фирма					= ФирмаОтправитель;
		ДокОбъект.СкладПолучатель		= СкладПолучатель;
		ДокОбъект.СозданВручную			= Истина;
		ДокОбъект.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
		ДокОбъект.ДокументПеремещения	= ДокументПеремещения;
		ДокОбъект.НомерЗаявкиЛК			= order_number;
		ДокОбъект.ИндивидуальныйЗаказ	= individual;
		ДокОбъект.Срочно				= now;
		ДокОбъект.ВидЭкспедиции 		= ВидЭкспедиции;
		ДокОбъект.КоличествоМест		= qnt_places;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
			ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = "-1 Неизвестный тип заявки: " + order_type;
		ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready", 2, 0, "Возвращаемое значение", "1");
	
	Возврат 1;
	
КонецФункции

Функция post_transferorder_ready_guid(order_number, order_type, doc_guid, doc_date, exp_type, individual, now, qnt_places)
	
	Параметры = Новый Структура(
	"order_number, order_type, doc_guid, doc_date, exp_type, individual, now, qnt_places", 
	order_number, order_type, doc_guid, doc_date, exp_type, individual, now, qnt_places);
	
	ТекДата = ТекущаяДата();
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекДата, "post_transferorder_ready_guid", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_Перемещение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.ИДДокументаАптекиОтправитель = &ИДДокументаАптекиОтправитель";
	
	Запрос.УстановитьПараметр("ИДДокументаАптекиОтправитель", doc_guid);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДокументПеремещения = Выборка.Ссылка;	
	
	СкладОтправитель	= ДокументПеремещения.СкладОтправитель;
	ФирмаОтправитель	= СкладОтправитель.Фирма;
	СкладПолучатель		= ДокументПеремещения.СкладПолучатель;
	ВидЭкспедиции		= Справочники.ВидыЭкспедиции.НайтиПоКоду(exp_type);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_РаспоряжениеНаПеремещение.НомерЗаявкиЛК
	|ИЗ
	|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
	|ГДЕ
	|	УЗ_РаспоряжениеНаПеремещение.ДокументПеремещения = &ДокументПеремещения";
	
	Запрос.УстановитьПараметр("ДокументПеремещения", ДокументПеремещения);
	
	РезультатЗапроса = Запрос.Выполнить();
	    	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = "-1 Накладная с указанным номером уже привязана к заявке " + Выборка.НомерЗаявкиЛК;
		ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready_guid", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если order_type = 1 Тогда // распоряжение создано в 1С
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УЗ_РаспоряжениеНаПеремещение.Ссылка
		|ИЗ
		|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
		|ГДЕ
		|	УЗ_РаспоряжениеНаПеремещение.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", order_number);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = "-1 Не найдено распоряжение по номеру " + order_number;
			ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready_guid", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();			
		Выборка.Следующий();
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ДокументПеремещения	= ДокументПеремещения;
		ДокОбъект.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
		ДокОбъект.ИндивидуальныйЗаказ	= individual;
		ДокОбъект.Срочно				= now;
		ДокОбъект.ВидЭкспедиции 		= ВидЭкспедиции;
		ДокОбъект.КоличествоМест		= qnt_places;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
			ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready_guid", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецПопытки;
		
		
	ИначеЕсли order_type = 2 Тогда // распоряжение создано в ЛК
		
		ДокОбъект = Документы.УЗ_РаспоряжениеНаПеремещение.СоздатьДокумент();
		ДокОбъект.Дата					= ТекДата;
		ДокОбъект.Склад					= СкладОтправитель;
		ДокОбъект.Фирма					= ФирмаОтправитель;
		ДокОбъект.СкладПолучатель		= СкладПолучатель;
		ДокОбъект.СозданВручную			= Истина;
		ДокОбъект.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
		ДокОбъект.ДокументПеремещения	= ДокументПеремещения;
		ДокОбъект.НомерЗаявкиЛК			= order_number;
		ДокОбъект.ИндивидуальныйЗаказ	= individual;
		ДокОбъект.Срочно				= now;
		ДокОбъект.ВидЭкспедиции 		= ВидЭкспедиции;
		ДокОбъект.КоличествоМест		= qnt_places;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
			ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready_guid", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = "-1 Неизвестный тип заявки: " + order_type;
		ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready_guid", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	ЗаписьВЛог(ТекущаяДата(), "post_transferorder_ready_guid", 2, 0, "Возвращаемое значение", "1");
	
	Возврат 1;
	
КонецФункции


Функция change_transferorder_status(order_number, order_status)
	
	Параметры = Новый Структура("order_number, order_status", order_number, order_status);
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекущаяДата(), "change_transferorder_status", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	Если order_status = "packed" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
	ИначеЕсли order_status = "control_stop" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Отклонен;
	ИначеЕсли order_status = "control_confirm" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Подтвержден;
	ИначеЕсли order_status = "exp_assigned" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.НазначенВодитель;
	ИначеЕсли order_status = "shiping" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Вывезен;
	ИначеЕсли order_status = "delivered" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Доставлен;
	ИначеЕсли order_status = "taken" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Принят;
	ИначеЕсли order_status = "aborted" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.НеПринят;
	ИначеЕсли order_status = "checked" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Проверен;
	ИначеЕсли order_status = "expired" Тогда
		Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Просрочен;
	Иначе
		ТекстОшибки = "-1 Неизвестный код статуса: " + order_status;
		ЗаписьВЛог(ТекущаяДата(), "change_transferorder_status", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_РаспоряжениеНаПеремещение.Ссылка
	|ИЗ
	|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
	|ГДЕ
	|	УЗ_РаспоряжениеНаПеремещение.НомерЗаявкиЛК = &НомерЗаявкиЛК";
	
	Запрос.УстановитьПараметр("НомерЗаявкиЛК", order_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = "-1 Не найдено распоряжение по номеру " + order_number;
		ЗаписьВЛог(ТекущаяДата(), "change_transferorder_status", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();			
	Выборка.Следующий();
	
	ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
	ДокОбъект.Статус = Статус; 	
	Если Статус = Перечисления.СтатусыРаспоряженийНаПеремещение.Отклонен Тогда
		ДокОбъект.ДокументПеремещения = Документы.УЗ_Перемещение.ПустаяСсылка();
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
		ЗаписьВЛог(ТекущаяДата(), "change_transferorder_status", 2, 0, "Возвращаемое значение", ТекстОшибки);
		Возврат ТекстОшибки;
	КонецПопытки;
	
	
	ЗаписьВЛог(ТекущаяДата(), "change_transferorder_status", 2, 0, "Возвращаемое значение", "1");
	
	Возврат 1;
	
КонецФункции

Функция check_doc_move_status(from_loc_code, doc_number, doc_date)
	
	СкладОтправитель = Справочники.МестаХранения.НайтиПоКоду(from_loc_code);
	
	Если СкладОтправитель.Пустая() Тогда
		Возврат "-1 Не найдена аптека по коду " + Формат(from_loc_code, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	Если ЗначениеЗаполнено(doc_date) Тогда
		ДатаНачала = doc_date - 2*24*60*60;
		ДатаОкончания = doc_date + 2*24*60*60;
	Иначе
		ДатаНачала = Мин(НачалоГода(ТекДата), ДобавитьМесяц(ТекДата, -3));
		ДатаОкончания = КонецГода(ТекДата);
	КонецЕсли;
	
	Запрос = Новый Запрос();	
	Запрос.Текст =   	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_Перемещение.Проведен
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.Дата Между &ДатаНачала И &ДатаОкончания
	|	И УЗ_Перемещение.СкладОтправитель = &СкладОтправитель
	|	И УЗ_Перемещение.НомДокАптекиОтправителя = &НомДокАптекиОтправителя
	|	И УЗ_Перемещение.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	УЗ_Перемещение.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("НомДокАптекиОтправителя", doc_number);
				 
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда		
		Возврат 0;		
	КонецЕсли;
	 
	Выборка = Результат.Выбрать();	
	Выборка.Следующий(); 
	
	Если Выборка.Проведен Тогда
		Возврат 2;	
	Иначе
		Возврат 1; 		
	КонецЕсли;
	
КонецФункции

Функция check_doc_move_status_guid(from_loc_code, doc_guid, doc_date)
	
	СкладОтправитель = Справочники.МестаХранения.НайтиПоКоду(from_loc_code);
	
	Если СкладОтправитель.Пустая() Тогда
		Возврат "-1 Не найдена аптека по коду " + Формат(from_loc_code, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
		
	Запрос = Новый Запрос();	
	Запрос.Текст =   	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_Перемещение.Проведен КАК Проведен
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.СкладОтправитель = &СкладОтправитель
	|	И УЗ_Перемещение.ИДДокументаАптекиОтправитель = &ИДДокументаАптекиОтправитель
	|	И УЗ_Перемещение.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	УЗ_Перемещение.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("ИДДокументаАптекиОтправитель", doc_guid);
				 
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда		
		Возврат 0;		
	КонецЕсли;
	 
	Выборка = Результат.Выбрать();	
	Выборка.Следующий(); 
	
	Если Выборка.Проведен Тогда
		Возврат 2;	
	Иначе
		Возврат 1; 		
	КонецЕсли;
	
КонецФункции


Функция change_transferorder_exp_type(order_number, exp_type)
	
	ВидЭкспедиции = Справочники.ВидыЭкспедиции.НайтиПоКоду(exp_type);
	Если ВидЭкспедиции.Пустая() Тогда
		ТекстОшибки = "-1 Не найден вид экспедиции по коду " + exp_type;
		Возврат ТекстОшибки;
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_РаспоряжениеНаПеремещение.Ссылка,
	|	УЗ_РаспоряжениеНаПеремещение.ВидЭкспедиции
	|ИЗ
	|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
	|ГДЕ
	|	УЗ_РаспоряжениеНаПеремещение.НомерЗаявкиЛК = &НомерЗаявкиЛК";
	
	Запрос.УстановитьПараметр("НомерЗаявкиЛК", order_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = "-1 Не найдено распоряжение по номеру " + order_number;
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();			
	Выборка.Следующий();

	
	Если Выборка.ВидЭкспедиции = ВидЭкспедиции Тогда
		Возврат 1;
	КонецЕсли;
	
	ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
	ДокОбъект.ВидЭкспедиции = ВидЭкспедиции; 	
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
		Возврат ТекстОшибки;
	КонецПопытки;
	
	
	Возврат 1;
	
КонецФункции


////////////////////////////////////////////////////////////
// ПЕРЕМЕЩЕНИЯ (АРХИВ)

Функция get_doc_opt_list(apt_code, start_date, end_date)

	//ТСО {14.09.2015 #0042}
	
	Запрос = Новый Запрос;
	
	Если start_date < Дата(2016,1,1) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЗ_МелкооптоваяРеализация.Склад.Код КАК КодАптеки,
		|	УЗ_МелкооптоваяРеализация.НомДокАптеки
		|ИЗ
		|	Документ.УЗ_МелкооптоваяРеализация КАК УЗ_МелкооптоваяРеализация
		|ГДЕ
		|	УЗ_МелкооптоваяРеализация.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И УЗ_МелкооптоваяРеализация.Проведен = ИСТИНА
		|	И 111 = 111
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияОптом.Склад.Код,
		|	РеализацияОптом.НомДокАптеки
		|ИЗ
		|	Документ.РеализацияОптом КАК РеализацияОптом
		|ГДЕ
		|	РеализацияОптом.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РеализацияОптом.Проведен = ИСТИНА
		|	И 222 = 222";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЗ_МелкооптоваяРеализация.Склад.Код,
		|	УЗ_МелкооптоваяРеализация.НомДокАптеки
		|ИЗ
		|	Документ.УЗ_МелкооптоваяРеализация КАК УЗ_МелкооптоваяРеализация
		|ГДЕ
		|	УЗ_МелкооптоваяРеализация.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И УЗ_МелкооптоваяРеализация.Проведен = ИСТИНА
		|	И 111 = 111";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", start_date);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(end_date));
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "УЗ_МелкооптоваяРеализация.Склад = &Склад");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "222 = 222", "РеализацияОптом.Склад = &Склад");
		Запрос.УстановитьПараметр("Склад", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "opt_doc_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "opt_doc_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.НомДокАптеки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.apt_code		= Выборка.КодАптеки;
		СтрокаТаблицыВозврата.doc_number	= СокрЛП(Выборка.НомДокАптеки);
		
		ТаблицаВозврата.opt_doc_list_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_move_goods_list(goods_code_list)
	
	Возврат Неопределено;
	
	//МассивТоваров = Новый Массив;
	//
	//Для Каждого ТекСтрока Из goods_code_list.goods_code_list_string Цикл
	//	
	//	Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);	
	//	
	//	Если ЗначениеЗаполнено(Товар) Тогда
	//		МассивТоваров.Добавить(Товар);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НАЧАЛОПЕРИОДА(ПартииЖНВЛСОбороты.Период, ДЕНЬ) КАК on_date,
	//|	ПартииЖНВЛСОбороты.Товар.Код КАК product,
	//|	ПартииЖНВЛСОбороты.Склад.Код КАК loc,
	//|	ПартииЖНВЛСОбороты.Партия.Поставщик.Код КАК supp,
	//|	СУММА(ПартииЖНВЛСОбороты.КолвоОборот / ПартииЖНВЛСОбороты.Партия.К) КАК mov_qnt,
	//|	СУММА(ПартииЖНВЛСОбороты.СуммаЗакупСНДСОборот) КАК mov_sum_pur,
	//|	СУММА(ПартииЖНВЛСОбороты.СуммаРознСНДСОборот) КАК mov_sum_rtl,
	//|	СУММА(ВЫБОР
	//|			КОГДА ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТовара
	//|				ТОГДА ПартииЖНВЛСОбороты.КолвоОборот / ПартииЖНВЛСОбороты.Партия.К
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК pur_qnt,
	//|	СУММА(ВЫБОР
	//|			КОГДА ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТовара
	//|				ТОГДА ПартииЖНВЛСОбороты.СуммаЗакупСНДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК pur_sum_pur,
	//|	СУММА(ВЫБОР
	//|			КОГДА ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТовара
	//|				ТОГДА ПартииЖНВЛСОбороты.СуммаРознСНДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК pur_sum_rtl,
	//|	СУММА(ВЫБОР
	//|			КОГДА ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	//|				ТОГДА -ПартииЖНВЛСОбороты.КолвоОборот / ПартииЖНВЛСОбороты.Партия.К
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК rtl_qnt,
	//|	СУММА(ВЫБОР
	//|			КОГДА ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	//|				ТОГДА -ПартииЖНВЛСОбороты.СуммаЗакупСНДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК rtl_sum_pur,
	//|	СУММА(ВЫБОР
	//|			КОГДА ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	//|				ТОГДА -ПартииЖНВЛСОбороты.СуммаРознСНДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК rtl_sum_rtl
	//|ИЗ
	//|	РегистрНакопления.ПартииЖНВЛС.Обороты(, , Регистратор,  Товар В (&Товары)) КАК ПартииЖНВЛСОбороты
	//|ГДЕ
	//|	ПартииЖНВЛСОбороты.Партия.К > 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НАЧАЛОПЕРИОДА(ПартииЖНВЛСОбороты.Период, ДЕНЬ),
	//|	ПартииЖНВЛСОбороты.Товар.Код,
	//|	ПартииЖНВЛСОбороты.Склад.Код,
	//|	ПартииЖНВЛСОбороты.Партия.Поставщик.Код
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	on_date";
	//
	//Запрос.УстановитьПараметр("Товары", МассивТоваров);

	//Результат = Запрос.Выполнить();
	//
	//Выборка = Результат.Выбрать();
	//
	//Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "move_goods_list");
	//Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "move_goods_list_string");	
	//
	//ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);		
	//	ЗаполнитьЗначенияСвойств(СтрокаТаблицыВозврата, Выборка);
	//	
	//	ТаблицаВозврата.move_goods_list_string.Добавить(СтрокаТаблицыВозврата);			
	//	
	//КонецЦикла; 	
	//
	//Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_move_order_list(apt_code)
	
	Возврат Неопределено;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	РаспоряжениеНаПеремещение.Номер,
	//|	РаспоряжениеНаПеремещение.Дата,
	//|	РаспоряжениеНаПеремещение.СозданВручную,
	//|	РаспоряжениеНаПеремещение.Срочно,
	//|	РаспоряжениеНаПеремещение.Склад.Код КАК Отправитель,
	//|	ЕСТЬNULL(РаспоряжениеНаПеремещение.СкладПолучатель.Код, 0) КАК Получатель
	//|ИЗ
	//|	Документ.РаспоряжениеНаПеремещение КАК РаспоряжениеНаПеремещение
	//|ГДЕ
	//|	НЕ РаспоряжениеНаПеремещение.ПометкаУдаления
	//|	И РаспоряжениеНаПеремещение.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПеремещение.Зарегистрирован), ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПеремещение.Собран))
	//|	И 111 = 111";
	//
	//Если ЗначениеЗаполнено(apt_code) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "РаспоряжениеНаПеремещение.СкладПолучатель = &Аптека");
	//	Запрос.УстановитьПараметр("Аптека", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	//КонецЕсли;

	//Результат = Запрос.Выполнить();
	//
	//Выборка = Результат.Выбрать();
	//
	//Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "move_order_list");
	//Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "move_order_list_string");	
	//
	//ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
	//	
	//	СтрокаТаблицыВозврата.from_loc		= Выборка.Отправитель;
	//	СтрокаТаблицыВозврата.to_loc		= Выборка.Получатель;
	//	СтрокаТаблицыВозврата.doc_number	= Выборка.Номер;
	//	СтрокаТаблицыВозврата.doc_date		= Выборка.Дата;
	//	СтрокаТаблицыВозврата.auto			= Не Выборка.СозданВручную;
	//	СтрокаТаблицыВозврата.now			= Выборка.Срочно;
	//	
	//	// пока не заполняем
	//	СтрокаТаблицыВозврата.therm			= Ложь;
	//	СтрокаТаблицыВозврата.summ			= 0;
	//	СтрокаТаблицыВозврата.qnt_pos		= 0;
	//	СтрокаТаблицыВозврата.qnt_pack		= 0;
	//	СтрокаТаблицыВозврата.qnt_plac		= 0;
	//	СтрокаТаблицыВозврата.apt_comment	= "";
	//	СтрокаТаблицыВозврата.apt_sotr		= "";
	//	СтрокаТаблицыВозврата.reg_date		= Дата(1,1,1);
	//	СтрокаТаблицыВозврата.accept_date	= Дата(1,1,1);
	//	
	//	ТаблицаВозврата.move_order_list_string.Добавить(СтрокаТаблицыВозврата);			
	//	
	//КонецЦикла; 	
	//
	//Возврат ТаблицаВозврата;
	
КонецФункции

Функция post_move_order_status(doc_number, doc_number_lk, invoice_number, invoice_summ, status)
	
	Возврат Неопределено;
	
КонецФункции

Функция check_doc_opt_exist(apt_code, doc_number, to_loc, intercompany, order_number, order_type, exp_type)
	
	Параметры = Новый Структура(
	"apt_code, doc_number, to_loc, intercompany, order_number, order_type, exp_type", 
	apt_code, doc_number, to_loc, intercompany, order_number, order_type, exp_type);
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	Склад = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	СкладПолучатель = Справочники.МестаХранения.НайтиПоКоду(to_loc);	

	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(to_loc) Тогда 		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЗ_Перемещение.Ссылка
		|ИЗ
		|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
		|ГДЕ
		|	УЗ_Перемещение.Дата > &ДатаОтбора
		|	И УЗ_Перемещение.СкладОтправитель = &Склад
		|	И УЗ_Перемещение.ПометкаУдаления = ЛОЖЬ
		|	И УЗ_Перемещение.НомДокАптекиОтправителя = &НомДокАптеки
		|	И УЗ_Перемещение.СкладПолучатель = &СкладПолучатель";
		
		Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
		
	Иначе		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЗ_МелкооптоваяРеализация.Ссылка
		|ИЗ
		|	Документ.УЗ_МелкооптоваяРеализация КАК УЗ_МелкооптоваяРеализация
		|ГДЕ
		|	УЗ_МелкооптоваяРеализация.Дата > &ДатаОтбора
		|	И УЗ_МелкооптоваяРеализация.Склад = &Склад
		|	И УЗ_МелкооптоваяРеализация.ПометкаУдаления = ЛОЖЬ
		|	И УЗ_МелкооптоваяРеализация.Поставщик = &Поставщик
		|	И УЗ_МелкооптоваяРеализация.НомДокАптеки = &НомДокАптеки";
		
		Запрос.УстановитьПараметр("Поставщик", Справочники.Поставщики.НайтиПоКоду(3055));
		
	КонецЕсли;
	         	
	Запрос.УстановитьПараметр("ДатаОтбора",		Мин(НачалоГода(ТекущаяДата()), ДобавитьМесяц(ТекущаяДата(), -3)));
	Запрос.УстановитьПараметр("Склад",			Склад);
	Запрос.УстановитьПараметр("НомДокАптеки",	doc_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", "0");
		Возврат 0;
	КонецЕсли;
	   	
	Выборка = РезультатЗапроса.Выбрать();		
	Если Выборка.Количество() > 1 Тогда
		ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", "2");
		Возврат 2;
	КонецЕсли;
	
	Выборка.Следующий();
	ДокументПеремещения = Выборка.Ссылка;
	
	
	// Добавим связку между распоряжением и перемещением	
	Если ЗначениеЗаполнено(to_loc) И ЗначениеЗаполнено(order_number) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УЗ_РаспоряжениеНаПеремещение.НомерЗаявкиЛК
		|ИЗ
		|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
		|ГДЕ
		|	УЗ_РаспоряжениеНаПеремещение.ДокументПеремещения = &ДокументПеремещения";
		
		Запрос.УстановитьПараметр("ДокументПеремещения", ДокументПеремещения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТекстОшибки = "-1 Накладная с указанным номером уже привязана к заявке " + Выборка.НомерЗаявкиЛК;
			ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
		КонецЕсли;
		
		Если order_type = 1 Тогда // распоряжение создано в 1С
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УЗ_РаспоряжениеНаПеремещение.Ссылка
			|ИЗ
			|	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
			|ГДЕ
			|	УЗ_РаспоряжениеНаПеремещение.Номер = &Номер";
			
			Запрос.УстановитьПараметр("Номер", order_number);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ТекстОшибки = "-1 Не найдено распоряжение по номеру " + order_number;
				ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", ТекстОшибки);
				Возврат ТекстОшибки;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();			
			Выборка.Следующий();
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.ДокументПеремещения	= ДокументПеремещения;
			ДокОбъект.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
			ДокОбъект.НомерЗаявкиЛК			= order_number;
			
			Если ЗначениеЗаполнено(exp_type) Тогда
				ДокОбъект.ВидЭкспедиции = Справочники.ВидыЭкспедиции.НайтиПоКоду(exp_type);
			КонецЕсли;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
				ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", ТекстОшибки);
				Возврат ТекстОшибки;
			КонецПопытки;
			
			
		ИначеЕсли order_type = 2 Тогда // распоряжение создано в ЛК
			                
			ДокОбъект = Документы.УЗ_РаспоряжениеНаПеремещение.СоздатьДокумент();
			ДокОбъект.Дата					= ТекущаяДата();
			ДокОбъект.Склад					= Склад;
			ДокОбъект.Фирма					= Склад.Фирма;
			ДокОбъект.СкладПолучатель		= Справочники.МестаХранения.НайтиПоКоду(to_loc);
			ДокОбъект.СозданВручную			= Истина;
			ДокОбъект.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Собран;
			ДокОбъект.ДокументПеремещения	= ДокументПеремещения;
			ДокОбъект.НомерЗаявкиЛК			= order_number;
			
			Если ЗначениеЗаполнено(exp_type) Тогда
				ДокОбъект.ВидЭкспедиции = Справочники.ВидыЭкспедиции.НайтиПоКоду(exp_type);
			КонецЕсли;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = "-1 Ошибка записи документа: " + ОписаниеОшибки();
				ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", ТекстОшибки);
				Возврат ТекстОшибки;
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = "-1 Неизвестный тип заявки: " + order_type;
			ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", ТекстОшибки);
			Возврат ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗаписьВЛог(ТекущаяДата(), "check_doc_opt_exist", 2, 0, "Возвращаемое значение", "1");
	   
	Возврат 1;
	
КонецФункции

Функция post_doc_opt_number(apt_code, doc_number, number_from_site)

	//ТСО {06.04.2015 #0024}
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Новый Структура("apt_code, doc_number, number_from_site", apt_code, doc_number, number_from_site)); 
	ЗаписьВЛог(ТекущаяДата(), "post_doc_opt_number", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	                                                             	
	ДатаОтбора = ДобавитьМесяц(ТекущаяДата(), -12);
	Склад = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	Поставщик = Справочники.Поставщики.НайтиПоКоду(3055);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УЗ_МелкооптоваяРеализация.Ссылка
	|ИЗ
	|	Документ.УЗ_МелкооптоваяРеализация КАК УЗ_МелкооптоваяРеализация
	|ГДЕ
	|	УЗ_МелкооптоваяРеализация.Дата > &ДатаОтбора
	|	И УЗ_МелкооптоваяРеализация.Склад = &Склад
	|	И УЗ_МелкооптоваяРеализация.ПометкаУдаления = ЛОЖЬ
	|	И УЗ_МелкооптоваяРеализация.Поставщик = &Поставщик
	|	И УЗ_МелкооптоваяРеализация.НомДокАптеки = &НомДокАптеки
	|
	|УПОРЯДОЧИТЬ ПО
	|	УЗ_МелкооптоваяРеализация.Дата УБЫВ"; 	

	Запрос.УстановитьПараметр("ДатаОтбора", ДатаОтбора);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("НомДокАптеки", doc_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Док = Выборка.Ссылка;
		
	Иначе 		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияОптом.Ссылка
		|ИЗ
		|	Документ.РеализацияОптом КАК РеализацияОптом
		|ГДЕ
		|	РеализацияОптом.Дата > &ДатаОтбора
		|	И РеализацияОптом.Склад = &Склад
		|	И РеализацияОптом.ПометкаУдаления = ЛОЖЬ
		|	И РеализацияОптом.Покупатель = &Поставщик
		|	И РеализацияОптом.НомДокАптеки = &НомДокАптеки
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияОптом.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ДатаОтбора", ДатаОтбора);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Поставщик", Поставщик);
		Запрос.УстановитьПараметр("НомДокАптеки", doc_number);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Док = Выборка.Ссылка;
			
		Иначе  			
			ЗаписьВЛог(ТекущаяДата(), "post_doc_opt_number", 2, 0, "Возвращаемое значение", "0");
			Возврат 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МЗ = РегистрыСведений.НомераЗаявокЛК.СоздатьМенеджерЗаписи();
	МЗ.Объект		= Док;
	МЗ.НомерЗаявки	= number_from_site;
	МЗ.Записать();
	
	ЗаписьВЛог(ТекущаяДата(), "post_doc_opt_number", 2, 0, "Возвращаемое значение", "1");
	
	Возврат 1;
	
КонецФункции

Функция check_doc_move_exist(apt_code, doc_number)

	//ТСО {06.04.2015 #0023}
	
	Возврат Неопределено;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ИСТИНА КАК ДокументНайден
	//|ИЗ
	//|	Документ.ПеремещениеТовара КАК ПеремещениеТовара
	//|ГДЕ
	//|	ПеремещениеТовара.Дата > &ДатаОтбора
	//|	И ПеремещениеТовара.Склад = &Склад
	//|	И ПеремещениеТовара.Проведен = ИСТИНА
	//|	И ПеремещениеТовара.НомДокАптеки = &НомДокАптеки";
	//
	//Запрос.УстановитьПараметр("ДатаОтбора", ДобавитьМесяц(ТекущаяДата(), -12));
	//Запрос.УстановитьПараметр("Склад", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	//Запрос.УстановитьПараметр("НомДокАптеки", doc_number);

	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат 0;
	//Иначе
	//	Возврат 1;
	//КонецЕсли;
	
КонецФункции

Функция get_doc_move_list(apt_code)

	//ТСО {06.04.2015 #0023}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЗ_Перемещение.СкладОтправитель.Код КАК КодАптеки,
	|	УЗ_Перемещение.СкладПолучатель.Код КАК КодАптекиПолучателя,
	|	УЗ_Перемещение.НомДокАптекиОтправителя
	|ИЗ
	|	Документ.УЗ_Перемещение КАК УЗ_Перемещение
	|ГДЕ
	|	УЗ_Перемещение.Дата > &ДатаОтбора
	|	И УЗ_Перемещение.Проведен = ИСТИНА
	|	И УЗ_Перемещение.НомДокАптекиОтправителя <> """"
	|	И 111 = 111
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТовара.Склад.Код,
	|	ПеремещениеТовара.СкладПолучатель.Код,
	|	ПеремещениеТовара.НомДокАптеки
	|ИЗ
	|	Документ.ПеремещениеТовара КАК ПеремещениеТовара
	|ГДЕ
	|	ПеремещениеТовара.Дата > &ДатаОтбора
	|	И ПеремещениеТовара.Проведен = ИСТИНА
	|	И ПеремещениеТовара.НомДокАптеки <> """"
	|	И 222 = 222";
	
	Запрос.УстановитьПараметр("ДатаОтбора", ДобавитьМесяц(ТекущаяДата(), -1));
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "УЗ_Перемещение.СкладОтправитель = &Склад");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "222 = 222", "ПеремещениеТовара.Склад = &Склад");
		Запрос.УстановитьПараметр("Склад", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "move_doc_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "move_doc_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.from_loc		= Выборка.КодАптеки;
		СтрокаТаблицыВозврата.to_loc		= Выборка.КодАптекиПолучателя;
		СтрокаТаблицыВозврата.doc_number	= Выборка.НомДокАптеки;
		
		ТаблицаВозврата.move_doc_list_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////
// ПЕРЕМЕЩЕНИЯ ПО ИНД. ЗАКАЗАМ

Функция get_ost_default_apt(goods_code_list)
	                     		
	КодыТовара = Новый Массив;  	
	Для Каждого ТекСтрока Из goods_code_list.goods_code_list_string Цикл 			
		КодыТовара.Добавить(ТекСтрока.good_code);			
	КонецЦикла;
	
	КодАптеки = 243;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЗ_ПартииОстатки.ТоварКод,
	|	СУММА(ВЫРАЗИТЬ(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К КАК ЧИСЛО(15, 2))) КАК КолвоОстаток,
	|	ВЫРАЗИТЬ(СУММА(УЗ_ПартииОстатки.СуммаЗакупБезНДСОстаток * (1 + УЗ_ПартииОстатки.СтавкаНДСЗакуп / 100)) / СУММА(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакупСНДС,
	|	МАКСИМУМ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0))) КАК ЦенаРознСНДС
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			ТоварКод В (&КодыТовара)
	|				И СкладКод = &КодАптеки) КАК УЗ_ПартииОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	|		ПО УЗ_ПартииОстатки.ПартияКод = УЗ_Партии.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО УЗ_ПартииОстатки.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = &КодАптеки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО (РЦП.АптекаКод = &КодАптеки)
	|			И УЗ_ПартииОстатки.ПартияКод = РЦП.ПартияКод
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПартииОстатки.ТоварКод
	|
	|ИМЕЮЩИЕ
	|	СУММА(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.ТоварКод КАК КодТовара,
	|	втОстатки.КолвоОстаток - ЕСТЬNULL(ТоварыКПеремещениюОстатки.КоличествоОстаток, 0) КАК КолвоОстаток,
	|	втОстатки.ЦенаЗакупСНДС,
	|	втОстатки.ЦенаРознСНДС
	|ИЗ
	|	втОстатки КАК втОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПеремещению.Остатки(
	|				,
	|				ТоварКод В (&КодыТовара)
	|					И СкладКод = &КодАптеки) КАК ТоварыКПеремещениюОстатки
	|		ПО втОстатки.ТоварКод = ТоварыКПеремещениюОстатки.ТоварКод
	|ГДЕ
	|	втОстатки.КолвоОстаток > ЕСТЬNULL(ТоварыКПеремещениюОстатки.КоличествоОстаток, 0)";
	                                                             	 	
	Запрос.УстановитьПараметр("КодыТовара", КодыТовара);
	Запрос.УстановитьПараметр("КодАптеки", КодАптеки);
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_ost_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_ost_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл 		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.good_code	= Выборка.КодТовара;
		СтрокаВозврата.apt_code		= 243;
		СтрокаВозврата.qnt_ost		= Выборка.КолвоОстаток;
		СтрокаВозврата.price		= Выборка.ЦенаЗакупСНДС;
		СтрокаВозврата.price_rozn	= Выборка.ЦенаРознСНДС;
		
		ТаблицаВозврата.goods_ost_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция create_transferorder(transferorder_data)
	
	АптекаОтправитель = Справочники.МестаХранения.НайтиПоКоду(transferorder_data.from_loc);
	АптекаПолучатель = Справочники.МестаХранения.НайтиПоКоду(transferorder_data.to_loc);
	
	Док = Документы.УЗ_РаспоряжениеНаПеремещение.СоздатьДокумент();
	
	Док.Дата				= ТекущаяДата();
	Док.Фирма				= АптекаОтправитель.Фирма;		
	Док.Склад				= АптекаОтправитель;
	Док.СкладПолучатель		= АптекаПолучатель;
	Док.Статус				= Перечисления.СтатусыРаспоряженийНаПеремещение.Создан;
	Док.СозданВручную		= Ложь;
	Док.Срочно				= Истина;
	Док.ИндивидуальныйЗаказ = Истина;
	Док.Комментарий			= "#Индивидуальный заказ";
	       	
	Для Каждого ТекСтрока Из transferorder_data.transferorder_table Цикл 		
		НовСтрока = Док.Товар.Добавить();
		НовСтрока.Товар			= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);
		НовСтрока.Количество	= ТекСтрока.qnt;
		НовСтрока.СуммаЗакуп	= ТекСтрока.summ;
		
	КонецЦикла;
	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Док.Номер;
	
КонецФункции


////////////////////////////////////////////////////////////
// ПРЕТЕНЗИИ ПОСТАВЩИКАМ

Функция get_pretenz_list(select_date)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПретензияПоставщикуТовар.Ссылка КАК Ссылка,
	|	ПретензияПоставщикуТовар.Ссылка.Номер КАК Номер,
	|	ПретензияПоставщикуТовар.Ссылка.Склад.Код КАК СкладКод,
	|	ПретензияПоставщикуТовар.Ссылка.НомерНакладнойПоставщика КАК ДокументПоступленияНомер,
	|	ПретензияПоставщикуТовар.Ссылка.ДатаНакладнойПоставщика КАК ДокументПоступленияДата,
	|	ПретензияПоставщикуТовар.Ссылка.Поставщик.Код КАК ПоставщикКод,
	|	ПретензияПоставщикуТовар.Ссылка.СотрудникАптекиПоПриемке КАК СотрудникАптекиПоПриемке,
	|	ПретензияПоставщикуТовар.Ссылка.НомерПретензииНаСайте КАК НомерПретензииНаСайте,
	|	ПРЕДСТАВЛЕНИЕ(ПретензияПоставщикуТовар.Ссылка.Источник) КАК Источник,
	|	ВЫБОР
	|		КОГДА ПретензияПоставщикуТовар.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументаПретензииПоставщику.Просрочен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочено,
	|	ЕСТЬNULL(ПретензияПоставщикуТовар.Ссылка.ДокументПоступления.НомерИнтернетЗаказа, """") КАК НомерИнтернетЗаказа,
	|	ЕСТЬNULL(ПретензияПоставщикуТовар.Товар.Код, 0) КАК ТоварКод,
	|	ЕСТЬNULL(ПретензияПоставщикуТовар.Товар.Наименование, ПретензияПоставщикуТовар.НаименованиеОтсутствующейПозиции) КАК ТоварНаименование,
	|	ПретензияПоставщикуТовар.КодПартии КАК КодПартии,
	|	ПретензияПоставщикуТовар.БойБрак КАК БойБрак,
	|	ПретензияПоставщикуТовар.Недовоз КАК Недовоз,
	|	ПретензияПоставщикуТовар.Излишек КАК Излишек,
	|	ПретензияПоставщикуТовар.ПримечаниеАптеки КАК ПримечаниеАптеки,
	|	ЕСТЬNULL(ПретензияПоставщикуТовар.ТипПретензии.Код, 0) КАК ТипПретензииКод,
	|	ПретензияПоставщикуТовар.Серия КАК Серия,
	|	ПретензияПоставщикуТовар.Баркод КАК Баркод,
	|	ПретензияПоставщикуТовар.КодРешенияПоставщика КАК КодРешенияПоставщика,
	|	ПретензияПоставщикуТовар.ДатаОтветаПоставщика КАК ДатаОтветаПоставщика,
	|	ПретензияПоставщикуТовар.ЗаявленнаяПоставщикомДатаРешения КАК ЗаявленнаяПоставщикомДатаРешения,
	|	ПретензияПоставщикуТовар.СпециалистПоставщикаПоПретензии КАК СпециалистПоставщикаПоПретензии,
	|	ПретензияПоставщикуТовар.ПримечаниеПоставщика КАК ПримечаниеПоставщика,
	|	ПретензияПоставщикуТовар.НомерПретензииПоставщика КАК НомерПретензииПоставщика
	|ИЗ
	|	Документ.ПретензияПоставщику.Товар КАК ПретензияПоставщикуТовар
	|ГДЕ
	|	ПретензияПоставщикуТовар.Ссылка.ДатаПоследнегоИзменения >= &ДатаПоследнегоИзменения
	|ИТОГИ
	|	МАКСИМУМ(НомерПретензииПоставщика)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ДатаПоследнегоИзменения", select_date);

	Результат = Запрос.Выполнить();
	
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Тип_ТаблицаВозврата 			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "spisok_pretenziy");
	Тип_СтрокаТаблицыВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "pretenziya");
	Тип_СтрокаПодчиненнойТаблицы	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "tovar_pretenzii");
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл 		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.doc_number		= ВыборкаПоДокументам.Номер;
		СтрокаТаблицыВозврата.supp_code			= ВыборкаПоДокументам.ПоставщикКод;
		СтрокаТаблицыВозврата.apt_code			= ВыборкаПоДокументам.СкладКод;
		СтрокаТаблицыВозврата.invoice_number	= ВыборкаПоДокументам.ДокументПоступленияНомер;
		СтрокаТаблицыВозврата.invoice_date		= ВыборкаПоДокументам.ДокументПоступленияДата;
		СтрокаТаблицыВозврата.apt_sotr			= ВыборкаПоДокументам.СотрудникАптекиПоПриемке;
		СтрокаТаблицыВозврата.source			= ВыборкаПоДокументам.Источник;
		СтрокаТаблицыВозврата.expired			= ВыборкаПоДокументам.Просрочено;
		СтрокаТаблицыВозврата.doc_number_lk		= ВыборкаПоДокументам.НомерПретензииНаСайте;
		СтрокаТаблицыВозврата.doc_number_supp	= ВыборкаПоДокументам.НомерПретензииПоставщика;
		СтрокаТаблицыВозврата.internet_order_number = СокрЛП(ВыборкаПоДокументам.НомерИнтернетЗаказа);
		
		Выборка = ВыборкаПоДокументам.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаПодчиненнойТаблицы = ФабрикаXDTO.Создать(Тип_СтрокаПодчиненнойТаблицы);
			
			//Если Выборка.КодРешенияПоставщика = 1 Тогда
			//	РешениеПоставщика = "Возврат";
			//ИначеЕсли Выборка.КодРешенияПоставщика = 2 Тогда
			//	РешениеПоставщика = "Замена";
			//ИначеЕсли Выборка.КодРешенияПоставщика = 3 Тогда
			//	РешениеПоставщика = "Компенсация";
			//ИначеЕсли Выборка.КодРешенияПоставщика = 4 Тогда
			//	РешениеПоставщика = "Отказ";
			//ИначеЕсли Выборка.КодРешенияПоставщика = 5 Тогда
			//	РешениеПоставщика = "Требуется дополнительная информация";
			//КонецЕсли;
			
			СтрокаПодчиненнойТаблицы.good_code			= Выборка.ТоварКод;
			СтрокаПодчиненнойТаблицы.good_name			= Выборка.ТоварНаименование;
			СтрокаПодчиненнойТаблицы.batch_code			= Выборка.КодПартии;
			СтрокаПодчиненнойТаблицы.qnt_brak			= Выборка.БойБрак;
			СтрокаПодчиненнойТаблицы.qnt_nedovoz		= Выборка.Недовоз;
			СтрокаПодчиненнойТаблицы.qnt_izl			= Выборка.Излишек;
			СтрокаПодчиненнойТаблицы.serial_num			= Выборка.Серия;
			СтрокаПодчиненнойТаблицы.barcode			= Выборка.Баркод;
			СтрокаПодчиненнойТаблицы.apt_comment		= Выборка.ПримечаниеАптеки;
			СтрокаПодчиненнойТаблицы.pretenz_type_id	= Выборка.ТипПретензииКод;
			СтрокаПодчиненнойТаблицы.supp_result_id		= Выборка.КодРешенияПоставщика;
			СтрокаПодчиненнойТаблицы.supp_reply_date	= Выборка.ДатаОтветаПоставщика;
			СтрокаПодчиненнойТаблицы.supp_solution_date	= Выборка.ЗаявленнаяПоставщикомДатаРешения;
			СтрокаПодчиненнойТаблицы.supp_sotr			= Выборка.СпециалистПоставщикаПоПретензии;
			СтрокаПодчиненнойТаблицы.supp_comment		= Выборка.ПримечаниеПоставщика;
	
			СтрокаТаблицыВозврата.tovary.Добавить(СтрокаПодчиненнойТаблицы);
			
		КонецЦикла;		
		
		ТаблицаВозврата.pretenzii.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция post_nedovoz(supplier_code, invoice_number)	
	
	//ТСО {18.02.2015 #0002; изм #0045}
	
	Поставщик = Справочники.Поставщики.НайтиПоКоду(supplier_code);
	
	Если Поставщик.Пустая() Тогда
		Возврат "-1 Не найден поставщик по коду " + Формат(supplier_code, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	
	// ---------- //
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ДокументНайден
	|ИЗ
	|	Документ.ПретензияПоставщику КАК ПретензияПоставщику
	|ГДЕ
	|	ПретензияПоставщику.Поставщик = &Поставщик
	|	И ПретензияПоставщику.НомерНакладнойПоставщика = &НомерНакладной";
	
	Запрос.УстановитьПараметр("Поставщик",		Поставщик);
	Запрос.УстановитьПараметр("НомерНакладной",	invoice_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		Возврат "-1 Претензия была ранее создана";		
	КонецЕсли;
	
	
	// ---------- //
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТовара.Ссылка,
	|	ПоступлениеТовара.Поставщик,
	|	ПоступлениеТовара.Склад,
	|	ПоступлениеТовара.Фирма,
	|	ПоступлениеТовара.ВхНомерНакл,
	|	ПоступлениеТовара.ВхДатаНакл
	|ИЗ
	|	Документ.УЗ_ПоступлениеТовара КАК ПоступлениеТовара
	|ГДЕ
	|	ПоступлениеТовара.Поставщик = &Поставщик
	|	И ПоступлениеТовара.ВхДатаНакл > &ДатаОтбора
	|	И ПоступлениеТовара.ВхНомерНакл = &НомерДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТовара.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Поставщик",		Поставщик);
	Запрос.УстановитьПараметр("НомерДокумента",	invoice_number);
	Запрос.УстановитьПараметр("ДатаОтбора",		ДобавитьМесяц(ТекущаяДата(), -1));

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		Возврат 0;		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДокументПоступления = Выборка.Ссылка;		
	
	Док = Документы.ПретензияПоставщику.СоздатьДокумент();
	
	Док.Дата				= ТекущаяДата();
	Док.ДокументПоступления	= ДокументПоступления;
	Док.Поставщик			= Поставщик;
	Док.Фирма				= Выборка.Фирма;
	Док.Склад				= Выборка.Склад;
	Док.Статус				= Перечисления.СтатусыДокументаПретензииПоставщику.Зарегистрирован;
	Док.Источник			= Перечисления.ИсточникиПретензий.ЛК;
	
	Док.ДатаПоследнегоИзменения = ТекущаяДата();
	
	Док.НомерНакладнойПоставщика	= Выборка.ВхНомерНакл;    
	Док.ДатаНакладнойПоставщика		= Выборка.ВхДатаНакл;      	
	
	Док.Комментарий	= "Недопоставка по всей накладной!";
	     
	
	// ---------- //
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТовараТовар.Товар,
	|	ПоступлениеТовараТовар.Серия,
	|	ПоступлениеТовараТовар.КодПартии,
	|	ПоступлениеТовараТовар.Количество КАК КоличествоПоНакладной,
	|	ПоступлениеТовараТовар.Количество КАК Недовоз,
	|	ПоступлениеТовараТовар.ЦенаЗакупБезНДС,
	|	ПоступлениеТовараТовар.СтавкаНДСЗакуп КАК СтавкаНДС,
	|	ПоступлениеТовараТовар.НДСЗакуп,
	|	ПоступлениеТовараТовар.ЦенаЗакупБезНДС * ПоступлениеТовараТовар.Количество КАК СуммаЗакупБезНДС
	|ИЗ
	|	Документ.УЗ_ПоступлениеТовара.Товар КАК ПоступлениеТовараТовар
	|ГДЕ
	|	ПоступлениеТовараТовар.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл			
		НовСтр = Док.Товар.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		НовСтр.ТипПретензии = Справочники.ТипыПретензийПоставщику.НетПоставкиТовара;
	КонецЦикла;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Возврат 1;
	Исключение
		Возврат "-1 " + ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

Функция post_no_goods(supplier_code, invoice_number)
	
	//ТСО {18.02.2015 #0003}
	
	Возврат Неопределено;
	
	//Поставщик = Справочники.Поставщики.НайтиПоКоду(supplier_code);
	//
	//Если Поставщик.Пустая() Тогда
	//	Возврат "-1 Не найден поставщик по коду " + Формат(supplier_code, "ЧДЦ=; ЧН=; ЧГ=0");
	//КонецЕсли;

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ПоступлениеТовара.Ссылка КАК ДокументПоступления,
	//|	ПоступлениеТовара.Дата КАК ДатаПоступления
	//|ИЗ
	//|	Документ.ПоступлениеТовара КАК ПоступлениеТовара
	//|ГДЕ
	//|	ПоступлениеТовара.Поставщик = &Поставщик
	//|	И ПоступлениеТовара.ВхДатаНакл > &НачалоПериода
	//|	И ПоступлениеТовара.ВхНомерНакл = &НомерДокумента
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДатаПоступления УБЫВ";
	//
	//Запрос.УстановитьПараметр("Поставщик", Поставщик);
	//Запрос.УстановитьПараметр("НомерДокумента", invoice_number);
	//Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоГода(ТекущаяДата()), -1));

	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда		
	//	Возврат "0";		
	//КонецЕсли;

	//Выборка = РезультатЗапроса.Выбрать();

	//Пока Выборка.Следующий() Цикл 		
	//	Док = Выборка.ДокументПоступления.ПолучитьОбъект();		
	//	Док.ОтсутствуетПоставка = Истина;
	//	
	//	Попытка
	//		Док.Записать();
	//	Исключение
	//		Возврат "-1 " + ОписаниеОшибки();
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	//Возврат "1";
	
КонецФункции

Функция post_pretenz_list(pretenz_list)
	
	//ТСО {06.04.2015 #0023}
	
	КодПоставщика = pretenz_list.sup_code;
	Поставщик = Справочники.Поставщики.НайтиПоКоду(КодПоставщика);
	
	Если Поставщик.Пустая() Тогда
		Возврат "-1 Не найден поставщик по коду " + Формат(КодПоставщика, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	КодАптеки = pretenz_list.apt_code;
	Аптека = Справочники.МестаХранения.НайтиПоКоду(КодАптеки);
	
	Если Аптека.Пустая() Тогда
		Возврат "-1 Не найдена аптека по коду " + Формат(КодАптеки, "ЧДЦ=; ЧН=; ЧГ=0");
	КонецЕсли;
	
	
	// ---------- //
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ДокументНайден
	|ИЗ
	|	Документ.ПретензияПоставщику КАК ПретензияПоставщику
	|ГДЕ
	|	ПретензияПоставщику.Поставщик = &Поставщик
	|	И ПретензияПоставщику.Склад = &Аптека
	|	И ПретензияПоставщику.НомерНакладнойПоставщика = &НомерНакладной";
	
	Запрос.УстановитьПараметр("Поставщик",		Поставщик);
	Запрос.УстановитьПараметр("Аптека",			Аптека);
	Запрос.УстановитьПараметр("НомерНакладной",	pretenz_list.invoice_number);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда		
		Возврат 2; //Претензия была ранее создана		
	КонецЕсли;
	
	
	// ---------- //
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТовара.Ссылка КАК Ссылка,
	|	ПоступлениеТовара.ВхНомерНакл КАК ВхНомерНакл,
	|	ПоступлениеТовара.ВхДатаНакл КАК ВхДатаНакл,
	|	ЛОЖЬ КАК КроссДокинг,
	|	ЗНАЧЕНИЕ(Справочник.Поставщики.ПустаяСсылка) КАК Посредник
	|ИЗ
	|	Документ.УЗ_ПоступлениеТовара КАК ПоступлениеТовара
	|ГДЕ
	|	ПоступлениеТовара.Поставщик = &Поставщик
	|	И ПоступлениеТовара.Склад = &Аптека
	|	И ПоступлениеТовара.ВхДатаНакл МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПоступлениеТовара.ВхНомерНакл = &НомерДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦепочкиПоКроссДокингу.Накладная,
	|	ЦепочкиПоКроссДокингу.НомерВхПоставщика,
	|	ЦепочкиПоКроссДокингу.ДатаВхПоставщика,
	|	ИСТИНА,
	|	ЕСТЬNULL(Поставщики.Ссылка, ЗНАЧЕНИЕ(Справочник.Поставщики.ПустаяСсылка))
	|ИЗ
	|	РегистрСведений.ЦепочкиПоКроссДокингу КАК ЦепочкиПоКроссДокингу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики КАК Поставщики
	|		ПО ЦепочкиПоКроссДокингу.ПосредникКод = Поставщики.Код
	|ГДЕ
	|	ЦепочкиПоКроссДокингу.ПоставщикКод = &ПоставщикКод
	|	И ЦепочкиПоКроссДокингу.ДатаВхПоставщика МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЦепочкиПоКроссДокингу.НомерВхПоставщика = &НомерДокумента";
	
	Запрос.УстановитьПараметр("Поставщик",		Поставщик);
	Запрос.УстановитьПараметр("ПоставщикКод",	Поставщик.Код);
	Запрос.УстановитьПараметр("Аптека",			Аптека);
	Запрос.УстановитьПараметр("НомерДокумента",	pretenz_list.invoice_number);
	
	Если ЗначениеЗаполнено(pretenz_list.invoice_date) Тогда
		ДатаНачала		= ДобавитьМесяц(pretenz_list.invoice_date, -1);
		ДатаОкончания	= ДобавитьМесяц(pretenz_list.invoice_date, 1) 
	Иначе
		ДатаНачала		= Дата(1,1,1);
		ДатаОкончания	= ТекущаяДата();
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		Возврат 0;		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДокументПоступления = Выборка.Ссылка;		
	
	Док = Документы.ПретензияПоставщику.СоздатьДокумент();
	
	Док.Дата				= ТекущаяДата();
	Док.ДокументПоступления	= ДокументПоступления;
	Док.Поставщик			= Поставщик;
	Док.Фирма				= Аптека.Фирма;
	Док.Склад				= Аптека;
	Док.Статус				= Перечисления.СтатусыДокументаПретензииПоставщику.Зарегистрирован;
	Док.Источник			= Перечисления.ИсточникиПретензий.ЛК;
	Док.КроссДокинг			= Выборка.КроссДокинг;
	Док.ПоставщикКомитент	= Выборка.Посредник;
	
	Док.ДатаПоследнегоИзменения = ТекущаяДата();
	
	Док.НомерНакладнойПоставщика	= Выборка.ВхНомерНакл;    
	Док.ДатаНакладнойПоставщика		= Выборка.ВхДатаНакл;      	
	
	Док.НомерПретензииНаСайте	= pretenz_list.doc_number_lk;
	Док.ДатаПретензииНаСайте	= pretenz_list.doc_date_lk;
	     
	
	// ---------- //
	
	МассивТоваров = Новый Массив;
	
	Для Каждого ТекСтрока Из pretenz_list.pretenz_list_string Цикл		
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);		
		Если ЗначениеЗаполнено(Товар) Тогда
			МассивТоваров.Добавить(Товар);			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТовараТовар.Товар,
	|	ПоступлениеТовараТовар.Товар.Код КАК КодТовара,
	|	ПоступлениеТовараТовар.СтавкаНДСЗакуп КАК СтавкаНДС,
	|	ПоступлениеТовараТовар.ЦенаЗакупБезНДС КАК ЦенаЗакупБезНДС,
	|	ПоступлениеТовараТовар.Количество КАК КоличествоПоНакладной,
	|	ПоступлениеТовараТовар.КодПартии
	|ИЗ
	|	Документ.УЗ_ПоступлениеТовара.Товар КАК ПоступлениеТовараТовар
	|ГДЕ
	|	ПоступлениеТовараТовар.Ссылка = &Док
	|	И ПоступлениеТовараТовар.Товар В(&Товары)";
	
	Запрос.УстановитьПараметр("Док",	ДокументПоступления);
	Запрос.УстановитьПараметр("Товары",	МассивТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		Возврат 3;		
	КонецЕсли;
	
	ТоварыДокумента = РезультатЗапроса.Выгрузить();
	
	Для Каждого ТекСтрока Из pretenz_list.pretenz_list_string Цикл
		
		Строки = ТоварыДокумента.НайтиСтроки(Новый Структура("КодТовара", ТекСтрока.good_code));
		
		НайденнаяСтрока = Строки[0];
		
		Если ТекСтрока.qnt_brak > 0 Тогда
			
			НовСтр = Док.Товар.Добавить();
			
			НовСтр.ВидПретензии = 1;
			НовСтр.Товар = НайденнаяСтрока.Товар;
			НовСтр.СтавкаНДСЗакуп = НайденнаяСтрока.СтавкаНДС;
			
			НовСтр.КоличествоПоНакладной = НайденнаяСтрока.КоличествоПоНакладной;
			НовСтр.ЦенаЗакупБезНДС		 = НайденнаяСтрока.ЦенаЗакупБезНДС;			
			
			НовСтр.БойБрак	= ТекСтрока.qnt_brak;
			
			НовСтр.Серия		= ТекСтрока.serial_num;
			НовСтр.Баркод		= ТекСтрока.barcode;
			НовСтр.КодПартии	= НайденнаяСтрока.КодПартии;
			
			НовСтр.ПримечаниеАптеки	= ТекСтрока.apt_comment;
			
			НовСтр.СуммаЗакупБезНДС	= НовСтр.ЦенаЗакупБезНДС * НовСтр.БойБрак;
			НовСтр.НДСЗакуп			= НовСтр.СуммаЗакупБезНДС * НовСтр.СтавкаНДСЗакуп / 100;
			
			НовСтр.ТипПретензии = ОМ_ТСО.ПолучитьТипПретензииПоставщика(ТекСтрока.apt_comment, 1);
			
		КонецЕсли;
		
		Если ТекСтрока.qnt_nedovoz > 0 Тогда
			
			НовСтр = Док.Товар.Добавить();
			
			НовСтр.ВидПретензии = 2;
			НовСтр.Товар = НайденнаяСтрока.Товар;
			НовСтр.СтавкаНДСЗакуп = НайденнаяСтрока.СтавкаНДС;
			
			НовСтр.КоличествоПоНакладной = НайденнаяСтрока.КоличествоПоНакладной;
			НовСтр.ЦенаЗакупБезНДС		 = НайденнаяСтрока.ЦенаЗакупБезНДС;			
			
			НовСтр.Недовоз	= ТекСтрока.qnt_nedovoz;
			
			НовСтр.Серия		= ТекСтрока.serial_num;
			НовСтр.Баркод		= ТекСтрока.barcode;
			НовСтр.КодПартии	= НайденнаяСтрока.КодПартии;
			
			НовСтр.ПримечаниеАптеки	= ТекСтрока.apt_comment;
			
			НовСтр.СуммаЗакупБезНДС	= НовСтр.ЦенаЗакупБезНДС * НовСтр.Недовоз;
			НовСтр.НДСЗакуп			= НовСтр.СуммаЗакупБезНДС * НовСтр.СтавкаНДСЗакуп / 100;
			
			НовСтр.ТипПретензии = ОМ_ТСО.ПолучитьТипПретензииПоставщика(ТекСтрока.apt_comment, 2);
			
		КонецЕсли;
		
		Если ТекСтрока.qnt_izl > 0 Тогда
			
			НовСтр = Док.Товар.Добавить();
			
			НовСтр.ВидПретензии = 3;
			НовСтр.Товар = НайденнаяСтрока.Товар;
			НовСтр.СтавкаНДСЗакуп = НайденнаяСтрока.СтавкаНДС;
			
			НовСтр.КоличествоПоНакладной = НайденнаяСтрока.КоличествоПоНакладной;
			НовСтр.ЦенаЗакупБезНДС		 = НайденнаяСтрока.ЦенаЗакупБезНДС;			
			
			НовСтр.Излишек	= ТекСтрока.qnt_izl;
			
			НовСтр.Серия		= ТекСтрока.serial_num;
			НовСтр.Баркод		= ТекСтрока.barcode;
			НовСтр.КодПартии	= НайденнаяСтрока.КодПартии;
			
			НовСтр.ПримечаниеАптеки	= ТекСтрока.apt_comment;
			
			НовСтр.СуммаЗакупБезНДС	= НовСтр.ЦенаЗакупБезНДС * НовСтр.Излишек;
			НовСтр.НДСЗакуп			= НовСтр.СуммаЗакупБезНДС * НовСтр.СтавкаНДСЗакуп / 100;
			
			НовСтр.ТипПретензии = ОМ_ТСО.ПолучитьТипПретензииПоставщика(ТекСтрока.apt_comment, 3);
			
		КонецЕсли;
		
	КонецЦикла; 	
	
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Возврат 1;  			
	Исключение
		Возврат "-1 " + ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция get_izlishki_list(apt_code, start_date, end_date)
	
	//ТСО {03.08.2015 #0038}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПретензииПоставщикамТовары.Ссылка.Номер КАК НомерПретензии,
	|	ПретензииПоставщикамТовары.Ссылка.Дата КАК ДатаПретензии,
	|	ПретензииПоставщикамТовары.Ссылка.ДокументПоступления.ДатапоступленияНаСклад КАК ДатаПоступления,
	|	ПретензииПоставщикамТовары.Ссылка.НомерНакладнойПоставщика КАК НомерНакладнойПоставщика,
	|	ПретензииПоставщикамТовары.Ссылка.ДатаНакладнойПоставщика КАК ДатаНакладнойПоставщика,
	|	ПретензииПоставщикамТовары.Ссылка.Склад.Код КАК КодАптеки,
	|	ЕСТЬNULL(ПретензииПоставщикамТовары.Товар.Код, 0) КАК КодТовара,
	|	ПретензииПоставщикамТовары.КодТовараПоставщика,
	|	ПретензииПоставщикамТовары.ИШК,
	|	ЕСТЬNULL(ПретензииПоставщикамТовары.Товар.Наименование, ПретензииПоставщикамТовары.НаименованиеОтсутствующейПозиции) КАК НаименованиеТовара,
	|	ПретензииПоставщикамТовары.Излишек КАК Колво,
	|	ПретензииПоставщикамТовары.СуммаЗакупБезНДС КАК Сумма,
	|	ЕСТЬNULL(ПретензииПоставщикамТовары.ТипПретензии.Код, 0) КАК КодТипаПретензии,
	|	ПретензииПоставщикамТовары.ПримечаниеАптеки
	|ИЗ
	|	Документ.ПретензииПоставщикам.Товары КАК ПретензииПоставщикамТовары
	|ГДЕ
	|	ПретензииПоставщикамТовары.Излишек > 0
	|	И ПретензииПоставщикамТовары.Ссылка.Поставщик = &Поставщик
	|	И ПретензииПоставщикамТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПретензииПоставщикамТовары.Ссылка.Проведен = ИСТИНА
	|	И 111 = 111";
	
	Запрос.УстановитьПараметр("Поставщик", Справочники.Поставщики.НайтиПоКоду(3055)); //GDP
	Запрос.УстановитьПараметр("ДатаНачала", start_date);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(end_date));
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "ПретензииПоставщикамТовары.Ссылка.Склад = &Аптека");
		Запрос.УстановитьПараметр("Аптека", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "izlishki_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "izlishki_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл 		
			
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);		
		СтрокаТаблицыВозврата.doc_number		= Выборка.НомерПретензии;
		СтрокаТаблицыВозврата.doc_date			= Выборка.ДатаПретензии;
		СтрокаТаблицыВозврата.receipt_date		= Выборка.ДатаПоступления;
		СтрокаТаблицыВозврата.invoice_number	= Выборка.НомерНакладнойПоставщика;
		СтрокаТаблицыВозврата.invoice_date		= Выборка.ДатаНакладнойПоставщика;
		СтрокаТаблицыВозврата.apt_code			= Выборка.КодАптеки;
		СтрокаТаблицыВозврата.good_code			= Выборка.КодТовара;
		СтрокаТаблицыВозврата.good_supp_code	= Выборка.КодТовараПоставщика;
		СтрокаТаблицыВозврата.barcode			= Выборка.ИШК;
		СтрокаТаблицыВозврата.good_name			= Выборка.НаименованиеТовара;
		СтрокаТаблицыВозврата.qnt				= Выборка.Колво;
		СтрокаТаблицыВозврата.summ				= Выборка.Сумма;
		СтрокаТаблицыВозврата.pretenz_type_id	= Выборка.КодТипаПретензии;
		СтрокаТаблицыВозврата.apt_comment		= Выборка.ПримечаниеАптеки;
				
		ТаблицаВозврата.izlishki_list_string.Добавить(СтрокаТаблицыВозврата);
		
	КонецЦикла; 
	
	Возврат ТаблицаВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////
// ВОЗВРАТЫ ПОСТАВЩИКАМ

Функция check_doc_vozvr_exist(apt_code, doc_apt_number)

	//ТСО {06.08.2015 #0039}
	
	Возврат Неопределено;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ВозвратТовараПоставщику.НомерЗаявкиЛК
	//|ИЗ
	//|	Документ.ВозвратТовараПоставщику КАК ВозвратТовараПоставщику
	//|ГДЕ
	//|	ВозвратТовараПоставщику.Дата > &ДатаОтбора
	//|	И ВозвратТовараПоставщику.Склад = &Склад
	//|	И ВозвратТовараПоставщику.НомДокАптеки = &НомДокАптеки";
	//
	//Запрос.УстановитьПараметр("ДатаОтбора", ДобавитьМесяц(ТекущаяДата(), -3));
	//Запрос.УстановитьПараметр("Склад", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	//Запрос.УстановитьПараметр("НомДокАптеки", doc_apt_number);

	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат 2; //не найдена возвратная накладная по номеру
	//КонецЕсли;
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Следующий();
	//
	//Если ЗначениеЗаполнено(Выборка.НомерЗаявкиЛК) Тогда
	//	Возврат 3; //по данной накладной ранее была зафиксирована заявка
	//Иначе
	//	Возврат 1;
	//КонецЕсли; 
	
КонецФункции

Функция post_doc_vozvr_number(apt_code, doc_apt_number, doc_lk_number, doc_lk_date)

	//ТСО {06.08.2015 #0039}
	
	Возврат Неопределено;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ВозвратТовараПоставщику.Ссылка,
	//|	ВозвратТовараПоставщику.НомерЗаявкиЛК
	//|ИЗ
	//|	Документ.ВозвратТовараПоставщику КАК ВозвратТовараПоставщику
	//|ГДЕ
	//|	ВозвратТовараПоставщику.Дата > &ДатаОтбора
	//|	И ВозвратТовараПоставщику.Склад = &Склад
	//|	И ВозвратТовараПоставщику.НомДокАптеки = &НомДокАптеки";
	//
	//Запрос.УстановитьПараметр("ДатаОтбора", ДобавитьМесяц(ТекущаяДата(), -3));
	//Запрос.УстановитьПараметр("Склад", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	//Запрос.УстановитьПараметр("НомДокАптеки", doc_apt_number);

	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат 2; //не найдена возвратная накладная по номеру
	//КонецЕсли;
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Следующий();
	//
	//Если ЗначениеЗаполнено(Выборка.НомерЗаявкиЛК) Тогда
	//	Возврат 3; //по данной накладной ранее была зафиксирована заявка
	//	
	//Иначе
	//	ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	ДокОбъект.НомерЗаявкиЛК = doc_lk_number;
	//	ДокОбъект.ДатаЗаявкиЛК = doc_lk_date;
	//	
	//	Попытка
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		Возврат 1; //успешно			
	//	Исключение
	//		Возврат "-1 " + ОписаниеОшибки(); 			
	//	КонецПопытки;
	//	
	//КонецЕсли;	
	
КонецФункции


////////////////////////////////////////////////////////////
// СПИСАНИЯ
   
Функция get_limit_summ(apt_code)
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code); 	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛимитыСписанияПоСрокамГодности.СуммаЛимита
	|ИЗ
	|	РегистрСведений.ЛимитыСписанияПоСрокамГодности КАК ЛимитыСписанияПоСрокамГодности
	|ГДЕ
	|	ЛимитыСписанияПоСрокамГодности.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Аптека);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	СуммаЛимита = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаЛимита = ВыборкаДетальныеЗаписи.СуммаЛимита;
	КонецЦикла;
	
	Возврат СуммаЛимита;
	
КонецФункции


////////////////////////////////////////////////////////////
// ИНТЕРНЕТ-ЗАКАЗЫ

Функция site_pc_create_iorder(order_data)
	                                           
	ИдентификаторЗаказа = СокрЛП(order_data.order_id); 	
	
	КодСайта = ?(ЗначениеЗаполнено(order_data.site_id), order_data.site_id, 1); 
	Сайт = Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(КодСайта);
	
	
	// Блокировка повторной загрузки заказа
	Запрос = Новый Запрос();	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнтернетЗаказ.Ссылка
	|ИЗ
	|	Документ.ИнтернетЗаказ КАК ИнтернетЗаказ
	|ГДЕ
	|	ИнтернетЗаказ.ИдентификаторЗаказа = &ИдентификаторЗаказа
	|	И ИнтернетЗаказ.ТипИсточника = &ТипИсточника
	|	И ИнтернетЗаказ.Сайт = &Сайт";
	
	Запрос.УстановитьПараметр("ИдентификаторЗаказа",	ИдентификаторЗаказа);
	Запрос.УстановитьПараметр("Сайт",					Сайт);
	Запрос.УстановитьПараметр("ТипИсточника",			Перечисления.ИА_ТипИсточникаЗаказа.Сайт);
	
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() ТОгда
		Возврат -2; // заказ не создается, возвращается отказ.
	КонецЕсли;
	
	
	ДатаЗаказа=order_data.order_date;
	ДатаОтгрузки=order_data.delivery_date;	
	Склад=Справочники.МестаХранения.НайтиПоКоду(order_data.apt_code);
	Проезд=order_data.comment;
	
	ИнформацияОКлиенте=order_data.client;
	
	ТаблицаЗаказа=order_data.order_table;
	
	
	Док=Документы.ИнтернетЗаказ.СоздатьДокумент();
	
	
	
	Док.Дата=ТекущаяДата();
	
	Док.УстановитьНовыйНомер();
	
	Док.ДатаЗаказа=ДатаЗаказа;
	Док.ДатаОтгрузки=ДатаОтгрузки;
	
	Док.Сайт = Сайт;

	Если КодСайта = 1 Тогда // Личный кабинет АВЕ
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ИндивидуальныйЗаказ;
		Док.Склад = Склад;
		Док.ФизическаяАптека = Справочники.МестаХранения.ПустаяСсылка();
		
	ИначеЕсли КодСайта = 2 Тогда // 36,6
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.Обычный;
		Док.Склад = Склад;
		Док.ФизическаяАптека = Склад;
		
	ИначеЕсли КодСайта = 3 Тогда // Мед03
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.Обычный;
		Док.Склад = Справочники.МестаХранения.НайтиПоКоду(279); // Новозаводская нижняя ОНЛАЙН
		Док.ФизическаяАптека = Справочники.МестаХранения.НайтиПоКоду(243); //Г/З, Москва, Новозаводская, 2. нижняя аптека  Аптека №183
		
	Иначе
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ИндивидуальныйЗаказ;
		Док.Склад = Склад;
		Док.ФизическаяАптека = Склад;
		
	КонецЕсли;
	
	Если order_data.hospital Тогда
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ЗаказГоспиталки;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(order_data.for_clinic) Тогда  //!!! временно
		Док.ДляКлиники = order_data.for_clinic;
	КонецЕсли;
	
	Док.ИдентификаторЗаказа=ИдентификаторЗаказа; 
	
	Док.ТипИсточника=Перечисления.ИА_ТипИсточникаЗаказа.Сайт;	
		
	Док.НомерЗаказа=ОМ_СправочнаяСлужба.ОМСС_ПолучитьНомерЗаказа(Док.ТипИсточника);

	Док.ФИОКлиента=СокрЛП(ИнформацияОКлиенте.FIO);
	
	Док.ФамилияДляПоиска=Лев(Док.ФИОКлиента,Найти(Док.ФИОКлиента," ")-1);
	
	Док.Емэйл=СокрЛП(ИнформацияОКлиенте.email);
	
	Док.Телефон=СокрЛП(ИнформацияОКлиенте.phone);
	
	
	КлИнА=Справочники.КлиентыИнтернетАптеки.НайтиПоНаименованию(Док.ФИОКлиента,истина);
	Если КлинА.Пустая() ТОгда
		
		ОбКлИнА=Справочники.КлиентыИнтернетАптеки.СоздатьЭлемент();
		ОбКлИнА.Наименование=Док.ФИОКлиента;
		ОбКлИнА.Емэйл= Док.Емэйл;
		ОбКлИнА.Телефон=Док.Телефон;
		ОбКлИнА.Записать();
		
		КлИнА=ОбКлИнА.Ссылка;
	КонецЕсли;	
	
	Док.Клиент=КлИнА;
	
	Док.Источник=Склад;
	
	
	
	Док.Проезд=Проезд;
	
	Док.Комментарий="# WEB-service #" + Символы.ПС + Проезд;
	
	ТаблицаЗаказа=order_data.order_table.order_string;// массив order_string
	
	
	
	

	ТолькоПредзаказ = Истина;
	ЕстьГоспиталка = Ложь;
	БрендГоспиталка = Справочники.Брэнды.НайтиПоКоду(65528);
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказа Цикл
		
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(СтрокаЗаказа.good_code);
		
		Если Товар.Бренд = БрендГоспиталка Тогда
			ЕстьГоспиталка = Истина;
		КонецЕсли;
		
		Попытка
			Предзаказ = СтрокаЗаказа.predzakaz;
		Исключение
			Предзаказ = Ложь;
		КонецПопытки;
		
		Если Предзаказ = Ложь Тогда
			ТолькоПредзаказ = Ложь;
		КонецЕсли;
		
		
		// ТЧ Товар
		Стр = Док.Товар.Добавить();		
		Стр.Товар			= Товар;
		Стр.Количество		= СтрокаЗаказа.qnt;
		Стр.ЕИТ				= Товар.ЕдиницаПоУмолчанию;
		Стр.К				= Стр.ЕИТ.К;
		Стр.Цена			= СтрокаЗаказа.price;
		Стр.ЦенаСоСкидкой	= Стр.Цена;		
		Стр.Сумма 			= Стр.Цена * Стр.Количество;
		Стр.СуммаСоСкидкой	= Стр.ЦенаСоСкидкой * Стр.Количество;		
		Стр.СтатусСтроки	= Перечисления.ИА_СтатусСтрокиЗаказа.НетСтатуса;		
		Стр.НомерАптеки 	= СтрокаЗаказа.from_apt_code;
		Стр.Предзаказ		= Предзаказ;
		
		
		// ТЧ ЗаказИзЛК
		Стр = Док.ЗаказИзЛК.Добавить();		
		Стр.Товар			= Товар;
		Стр.Количество		= СтрокаЗаказа.qnt;
		Стр.Цена			= СтрокаЗаказа.supp_good_price;
		Стр.КодТовараПоставщика	= СтрокаЗаказа.supp_good_code;
		Стр.НаименованиеТовараПоставщика = СтрокаЗаказа.supp_good_name;
		Стр.Сумма			= Стр.Цена * Стр.Количество;
		Стр.ЦенаРозн 		= СтрокаЗаказа.price;
		Стр.СрокГодности	= СтрокаЗаказа.supp_good_godn;
		Стр.Поставщик		= Справочники.Поставщики.НайтиПоКоду(СтрокаЗаказа.supp_code);
		    		
	КонецЦикла;
	
	Если Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ИндивидуальныйЗаказ И ЕстьГоспиталка Тогда
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ИндивидуальныйЗаказПлюсГоспиталка;
	КонецЕсли;
	
	Если Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ИндивидуальныйЗаказ И ТолькоПредзаказ Тогда
		Док.ВидИнтернетЗаказа = Перечисления.ВидыИнтернетЗаказа.ИндивидуальныйЗаказПлюсПредзаказ;
	КонецЕсли;
		
	
	
	Док.Сумма = Док.Товар.Итог("Сумма");
	Док.СуммаСоСкидкой = Док.Товар.Итог("СуммаСоСкидкой");
	
	Попытка 		
		Док.Записать();
		Возврат 1;
		
	Исключение
		Возврат "-1   "+ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции

Функция site_pc_get_iorder_status(order_id)
	
	Запрос=Новый Запрос();
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ИнтернетЗаказ.СтатусЗаказа
	             |ИЗ
	             |	Документ.ИнтернетЗаказ КАК ИнтернетЗаказ
	             |ГДЕ
	             |	ИнтернетЗаказ.ИдентификаторЗаказа = &ИдентификаторЗаказа
	             |	И ИнтернетЗаказ.ТипИсточника = &ТипИсточника";
				 
	Запрос.УстановитьПараметр("ИдентификаторЗаказа",СокрЛП(order_id));
	Запрос.УстановитьПараметр("ТипИсточника",Перечисления.ИА_ТипИсточникаЗаказа.Сайт);
				 
	Рез=Запрос.Выполнить();
	
	Если Рез.Пустой()=Истина ТОгда
		Возврат сокрлп("Не найден заказ с ID="+order_id);
	КонецЕсли;
	
	Выб=Рез.Выбрать();
	Выб.Следующий();
	Возврат сокрлп(Выб.СтатусЗаказа);
	
КонецФункции

Функция get_iorder_info(site_id, order_id)
	
	КодСайта = ?(ЗначениеЗаполнено(site_id), site_id, 1); 
	Сайт = Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(КодСайта);
	
	Запрос = Новый Запрос();	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ИнтернетЗаказ.СтатусЗаказа) КАК СтатусЗаказа,
	|	ИнтернетЗаказ.ТребуемаяСуммаПредоплаты,
	|	ИнтернетЗаказ.КомментарийМенеджера
	|ИЗ
	|	Документ.ИнтернетЗаказ КАК ИнтернетЗаказ
	|ГДЕ
	|	ИнтернетЗаказ.ИдентификаторЗаказа = &ИдентификаторЗаказа
	|	И ИнтернетЗаказ.Сайт = &Сайт";
	
	Запрос.УстановитьПараметр("ИдентификаторЗаказа", СокрЛП(order_id));
	Запрос.УстановитьПараметр("Сайт", Сайт);
				 
	Результат = Запрос.Выполнить();  	
	Выборка = Результат.Выбрать();	
	
	Тип_СтруктураВозврата = ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "iorder_info");
	СтруктураВозврата = ФабрикаXDTO.Создать(Тип_СтруктураВозврата);
	
	Если Выборка.Следующий() Тогда 		
		СтруктураВозврата.status			= Выборка.СтатусЗаказа;
		СтруктураВозврата.prepayment_sum	= Выборка.ТребуемаяСуммаПредоплаты;
		СтруктураВозврата.comment			= Выборка.КомментарийМенеджера;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция post_payment_order(site_id, order_number, payment_sum)
	
	ТекДата = НачалоДня(ТекущаяДата());
	ИнтернетЗаказ = Документы.ИнтернетЗаказ.НайтиПоНомеру(order_number, ТекДата);
	
	НаборЗаписей = РегистрыСведений.ОнлайнОплатыИнтернетЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнтернетЗаказ.Установить(ИнтернетЗаказ);
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.ИнтернетЗаказ	= ИнтернетЗаказ;
	Запись.СуммаОплаты		= payment_sum;
	Запись.ДатаОплаты		= ТекДата;
	
	Попытка
		НаборЗаписей.Записать();
		Возврат 1;			
	Исключение
		Возврат "-1 " + ОписаниеОшибки();			
	КонецПопытки;
	
КонецФункции

Функция post_iorder_buy_info(site_id, order_id, iorder_buy_info_list)
	
	Сайт = Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(site_id);
	
	Запрос = Новый Запрос();	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнтернетЗаказ.Ссылка,
	|	ИнтернетЗаказ.СтатусЗаказа
	|ИЗ
	|	Документ.ИнтернетЗаказ КАК ИнтернетЗаказ
	|ГДЕ
	|	ИнтернетЗаказ.ИдентификаторЗаказа = &ИдентификаторЗаказа
	|	И ИнтернетЗаказ.Сайт = &Сайт";
	
	Запрос.УстановитьПараметр("ИдентификаторЗаказа", order_id);
	Запрос.УстановитьПараметр("Сайт", Сайт);
				 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		Возврат "-1 Заказ не найден";		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.СтатусЗаказа = Перечисления.ИА_СтатусЗаказа.Оплачен 
		Или Выборка.СтатусЗаказа = Перечисления.ИА_СтатусЗаказа.Завершен Тогда
		Возврат "-1 Информация о выкупе уже была внесена ранее";
	КонецЕсли;
	
	ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
	
	Для Каждого ТекСтрока Из iorder_buy_info_list.iorder_buy_info_list_string Цикл		
		ТекТовар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);
		
		НайденнаяСтрока = ДокОбъект.Товар.Найти(ТекТовар, "Товар");		
		Если НайденнаяСтрока <> Неопределено Тогда			
			НайденнаяСтрока.КоличествоВыкуплено = ТекСтрока.qnt_buy;			
		КонецЕсли;	
	
	КонецЦикла;	
	
	ДокОбъект.СтатусЗаказа = Перечисления.ИА_СтатусЗаказа.Оплачен;
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат 1;
	
КонецФункции


////////////////////////////////////////////////////////////
// МОТИВАЦИЯ

Функция get_top_goods(apt_code)
	
	//ТСО {07.12.2015 #0062}
	
	Сегодня = НачалоДня(ТекущаяДата());
	Вчера = Сегодня-24*60*60;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыГруппыЗаработай.Аптека.Код КАК КодАптеки,
	|	ТоварыГруппыЗаработай.Симптом.Наименование КАК Симптом,
	|	ТоварыГруппыЗаработай.Товар.Код КАК КодТовара,
	|	ТоварыГруппыЗаработай.КолвоОстатка,
	|	ТоварыГруппыЗаработай.СуммаСРН КАК СуммаСРН
	|ИЗ
	|	РегистрСведений.ТоварыГруппыЗаработай КАК ТоварыГруппыЗаработай
	|ГДЕ
	|	111 = 111
	|	И ТоварыГруппыЗаработай.Дата = &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАптеки,
	|	Симптом,
	|	СуммаСРН УБЫВ";
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "ТоварыГруппыЗаработай.Аптека = &Аптека");
		Запрос.УстановитьПараметр("Аптека", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Сегодня);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Запрос.УстановитьПараметр("Дата", Вчера);
		Результат = Запрос.Выполнить();
	КонецЕсли;		
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "top_goods_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "top_goods_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code		= Выборка.КодАптеки;
		СтрокаВозврата.good_code	= Выборка.КодТовара;
		СтрокаВозврата.symptom_name	= Выборка.Симптом;
		СтрокаВозврата.qnt			= Выборка.КолвоОстатка;
		СтрокаВозврата.crn_sum		= Выборка.СуммаСРН;
		
		ТаблицаВозврата.top_goods_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_effectiv_matrix(pfr_num_list)

	//ТСО {10.11.2015 #0051}
	
	МассивТабНомеров = Новый Массив;  	
	Для Каждого ТекСтрока Из pfr_num_list.pfr_num_list_string Цикл 			
		МассивТабНомеров.Добавить(ТекСтрока.pfr_num);
			
	КонецЦикла;

	ДатаНачала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -3));
	ДатаОкончания = КонецМесяца(ДобавитьМесяц(ДатаНачала, 2));	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(КонтрольСотрудников.Период, МЕСЯЦ) КАК Месяц,
	|	КонтрольСотрудников.СотрудникКод,
	|	Сотрудники_Физлица.СНИЛС КАК СотрудникСНИЛС,
	|	КонтрольСотрудников.СкладКод КАК КодСклада,
	|	СУММА(КонтрольСотрудников.ОбщийБонус) КАК СРН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(КонтрольСотрудников.Период, День)) КАК КолвоСмен
	|ПОМЕСТИТЬ втПродажи
	|ИЗ
	|	РегистрСведений.УЗ_КонтрольСотрудников КАК КонтрольСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники_Физлица КАК Сотрудники_Физлица
	|		ПО КонтрольСотрудников.СотрудникКод = Сотрудники_Физлица.Код
	|ГДЕ
	|	КонтрольСотрудников.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(КонтрольСотрудников.Период, МЕСЯЦ),
	|	КонтрольСотрудников.СотрудникКод,
	|	Сотрудники_Физлица.СНИЛС,
	|	КонтрольСотрудников.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПродажи.КодСклада,
	|	втПродажи.Месяц,
	|	СУММА(втПродажи.СРН) / СУММА(втПродажи.КолвоСмен) КАК СреднийСРН
	|ПОМЕСТИТЬ втПродажиГруппировка
	|ИЗ
	|	втПродажи КАК втПродажи
	|ГДЕ
	|	втПродажи.КолвоСмен > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втПродажи.КодСклада,
	|	втПродажи.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПродажи.КодСклада,
	|	втПродажи.СотрудникКод,
	|	втПродажи.СотрудникСНИЛС,
	|	втПродажи.Месяц КАК Месяц,
	|	втПродажи.СРН,
	|	ВЫРАЗИТЬ((втПродажи.СРН / втПродажи.КолвоСмен - втПродажиГруппировка.СреднийСРН) / втПродажиГруппировка.СреднийСРН * 100 КАК ЧИСЛО(15, 2)) КАК ПроцентОтклонения,
	|	ЕСТЬNULL(УровниСотрудниковАптекСрезПоследних.Уровень, 0) КАК Уровень,
	|	ЕСТЬNULL(УровниСотрудниковАптекПрошлыйМесяц.Уровень, 0) КАК УровеньПредыдущий
	|ПОМЕСТИТЬ втПродажиПоМесяцам
	|ИЗ
	|	втПродажи КАК втПродажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПродажиГруппировка КАК втПродажиГруппировка
	|		ПО втПродажи.КодСклада = втПродажиГруппировка.КодСклада
	|			И втПродажи.Месяц = втПродажиГруппировка.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УровниСотрудников.СрезПоследних(&ДатаОкончания, ) КАК УровниСотрудниковАптекСрезПоследних
	|		ПО втПродажи.СотрудникКод = УровниСотрудниковАптекСрезПоследних.СотрудникКод
	|			И втПродажи.КодСклада = УровниСотрудниковАптекСрезПоследних.СкладКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УровниСотрудников.СрезПоследних(ДОБАВИТЬКДАТЕ(&ДатаОкончания, МЕСЯЦ, -1), ) КАК УровниСотрудниковАптекПрошлыйМесяц
	|		ПО втПродажи.СотрудникКод = УровниСотрудниковАптекПрошлыйМесяц.СотрудникКод
	|			И втПродажи.КодСклада = УровниСотрудниковАптекПрошлыйМесяц.СкладКод
	|ГДЕ
	|	втПродажиГруппировка.СреднийСРН > 0
	|	И втПродажи.СотрудникСНИЛС <> """"
	|	И (&ПоВсемСотрудникам
	|			ИЛИ втПродажи.СотрудникСНИЛС В (&ТабНомера))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПродажиГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПродажиПоМесяцам.КодСклада КАК apt_code,
	|	втПродажиПоМесяцам.СотрудникСНИЛС КАК pfr_num,
	|	МАКСИМУМ(втПродажиПоМесяцам.Уровень) КАК level,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Уровень > втПродажиПоМесяцам.УровеньПредыдущий
	|					И втПродажиПоМесяцам.УровеньПредыдущий > 0
	|				ТОГДА 1
	|			КОГДА втПродажиПоМесяцам.Уровень < втПродажиПоМесяцам.УровеньПредыдущий
	|				ТОГДА 2
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК level_up,
	|	СУММА(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Месяц = ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, 2)
	|				ТОГДА втПродажиПоМесяцам.СРН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК crn_1,
	|	СУММА(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Месяц = ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, 1)
	|				ТОГДА втПродажиПоМесяцам.СРН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК crn_2,
	|	СУММА(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Месяц = &ДатаНачала
	|				ТОГДА втПродажиПоМесяцам.СРН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК crn_3,
	|	СУММА(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Месяц = ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, 2)
	|				ТОГДА втПродажиПоМесяцам.ПроцентОтклонения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК crn_dev_1,
	|	СУММА(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Месяц = ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, 1)
	|				ТОГДА втПродажиПоМесяцам.ПроцентОтклонения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК crn_dev_2,
	|	СУММА(ВЫБОР
	|			КОГДА втПродажиПоМесяцам.Месяц = &ДатаНачала
	|				ТОГДА втПродажиПоМесяцам.ПроцентОтклонения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК crn_dev_3
	|ИЗ
	|	втПродажиПоМесяцам КАК втПродажиПоМесяцам
	|
	|СГРУППИРОВАТЬ ПО
	|	втПродажиПоМесяцам.КодСклада,
	|	втПродажиПоМесяцам.СотрудникСНИЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПродажиПоМесяцам";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ТабНомера", МассивТабНомеров);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", МассивТабНомеров.Количество() = 0);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "effectiv_matrix");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "effectiv_matrix_string");
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 		              			
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);  		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыВозврата, Выборка);
		
		ТаблицаВозврата.effectiv_matrix_string.Добавить(СтрокаТаблицыВозврата);
		
	КонецЦикла;  	
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_sale_goods_of_day_list(date)
	
	Возврат Неопределено;
	
	//ТСО {28.05.2015 #0029}
	
	//Запрос = Новый Запрос;	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Мотивация.Сотрудник.Код КАК КодСотрудника,
	//|	Мотивация.Сотрудник.Наименование КАК ИмяСотрудника,
	//|	Мотивация.Сотрудник.ТабНомер КАК ТабельныйНомер,
	//|	Мотивация.Сотрудник.СНИЛС КАК СНИЛС,
	//|	Мотивация.Склад.Код КАК КодСклада,
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Мотивация.Товар) КАК КоличествоПозиций,
	//|	СУММА(Мотивация.КоличествоОборот) КАК КоличествоУпаковок,
	//|	СУММА(Мотивация.СуммаРознФактОборот) КАК СуммаПродаж,
	//|	СУММА(Мотивация.БонусТДОборот) КАК СуммаБонусов
	//|ИЗ
	//|	РегистрНакопления.ПродажиДляМотивации777.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК Мотивация
	//|ГДЕ
	//|	Мотивация.БонусТДОборот <> 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Мотивация.Сотрудник.Код,
	//|	Мотивация.Сотрудник.Наименование,
	//|	Мотивация.Сотрудник.ТабНомер,
	//|	Мотивация.Сотрудник.СНИЛС,
	//|	Мотивация.Склад.Код"; 
	//
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "777", Месяц(date));
	//
	//Запрос.УстановитьПараметр("ДатаНачала", date);
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(date));

	//Результат = Запрос.Выполнить();
	//
	//Выборка = Результат.Выбрать();
	//
	//Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "sale_goods_of_day_list");
	//Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "sale_goods_of_day_list_string");	
	//
	//ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	//
	//Пока Выборка.Следующий() Цикл 		
	//		
	//	СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);		
	//	СтрокаТаблицыВозврата.sotr_code		= Выборка.КодСотрудника;
	//	СтрокаТаблицыВозврата.sotr_name		= Выборка.ИмяСотрудника;
	//	СтрокаТаблицыВозврата.sotr_tab_num	= Выборка.ТабельныйНомер;
	//	СтрокаТаблицыВозврата.sotr_pfr_num	= Выборка.СНИЛС;
	//	СтрокаТаблицыВозврата.apt_code		= Выборка.КодСклада;
	//	СтрокаТаблицыВозврата.qnt_pos		= Выборка.КоличествоПозиций;
	//	СтрокаТаблицыВозврата.qnt_pack		= Выборка.КоличествоУпаковок;
	//	СтрокаТаблицыВозврата.sum_sales		= Выборка.СуммаПродаж;
	//	СтрокаТаблицыВозврата.sum_bonus		= Выборка.СуммаБонусов;
	//			
	//	ТаблицаВозврата.sale_goods_of_day_list_string.Добавить(СтрокаТаблицыВозврата);
	//	
	//КонецЦикла; 
	//
	//Возврат ТаблицаВозврата;	

КонецФункции

Функция get_priority_list(date)

	//ТСО {13.07.2015 #0033}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиДляМотивацииОбороты.СотрудникКод,
	|	ПродажиДляМотивацииОбороты.ТоварКод,
	|	ПродажиДляМотивацииОбороты.СкладКод,
	|	ПродажиДляМотивацииОбороты.КоличествоОборот КАК КоличествоПродаж,
	|	ПродажиДляМотивацииОбороты.СуммаРознФактОборот КАК СуммаПродажРозн,
	|	ПродажиДляМотивацииОбороты.ОбщийБонусОборот КАК СуммаБаллов,
	|	Сотрудники_Физлица.Наименование КАК СотрудникИмя,
	|	Сотрудники_Физлица.СНИЛС КАК СотрудникСНИЛС
	|ИЗ
	|	РегистрНакопления.УЗ_ПродажиДляМотивации777.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиДляМотивацииОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники_Физлица КАК Сотрудники_Физлица
	|		ПО ПродажиДляМотивацииОбороты.СотрудникКод = Сотрудники_Физлица.Код";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "777", Месяц(date));
	
	Запрос.УстановитьПараметр("ДатаНачала", date);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(date));

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "priority_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "priority_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл 		
			
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаТаблицыВозврата.sotr_code		= Выборка.СотрудникКод;
		СтрокаТаблицыВозврата.sotr_name		= Выборка.СотрудникИмя;
		СтрокаТаблицыВозврата.sotr_tab_num	= Выборка.СотрудникКод;
		СтрокаТаблицыВозврата.sotr_pfr_num	= Выборка.СотрудникСНИЛС;
		СтрокаТаблицыВозврата.apt_code		= Выборка.СкладКод;
		СтрокаТаблицыВозврата.good_code		= Выборка.ТоварКод;
		СтрокаТаблицыВозврата.qnt_pack		= Выборка.КоличествоПродаж;
		СтрокаТаблицыВозврата.sum_sales		= Выборка.СуммаПродажРозн;
		СтрокаТаблицыВозврата.sum_bonus		= Выборка.СуммаБаллов;
				
		ТаблицаВозврата.priority_list_string.Добавить(СтрокаТаблицыВозврата);
		
	КонецЦикла; 
	
	Возврат ТаблицаВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////
// АССОРТИМЕНТНОЕ ПЛАНИРОВАНИЕ

Функция assortment_get_list(apt_code)
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаНЗ.Товар,
	|	СУММА(ВЫБОР
	|			КОГДА МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1)
	|				ТОГДА МатрицаНЗ.НЗ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НЗ_1,
	|	СУММА(ВЫБОР
	|			КОГДА МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2)
	|				ТОГДА МатрицаНЗ.НЗ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НЗ_2,
	|	СУММА(ВЫБОР
	|			КОГДА МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_3)
	|				ТОГДА МатрицаНЗ.НЗ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НЗ_3
	|ПОМЕСТИТЬ втМатрицаНЗ
	|ИЗ
	|	РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
	|ГДЕ
	|	МатрицаНЗ.Аптека = &Аптека
	|
	|СГРУППИРОВАТЬ ПО
	|	МатрицаНЗ.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Матрица.Товар.Код КАК good_code,
	|	Матрица.Товар.Наименование КАК name,
	|	ЕСТЬNULL(Матрица.Товар.ГруппаАП.Наименование, """") КАК group_name,
	|	Матрица.Товар.МинЦенаMedlux КАК price,
	|	Матрица.КуМин КАК q_min,
	|	Матрица.КуМакс КАК q_max,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МатрицаНЗ.НЗ_1, 0) > 0
	|			ТОГДА ЕСТЬNULL(МатрицаНЗ.НЗ_1, 0)
	|		КОГДА ЕСТЬNULL(МатрицаНЗ.НЗ_2, 0) > 0
	|			ТОГДА ЕСТЬNULL(МатрицаНЗ.НЗ_2, 0)
	|		ИНАЧЕ ЕСТЬNULL(МатрицаНЗ.НЗ_3, 0)
	|	КОНЕЦ КАК nz_qnt
	|ИЗ
	|	РегистрСведений.Матрица КАК Матрица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМатрицаНЗ КАК МатрицаНЗ
	|		ПО Матрица.Товар = МатрицаНЗ.Товар
	|ГДЕ
	|	Матрица.Аптека = &Аптека
	|
	|УПОРЯДОЧИТЬ ПО
	|	name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втМатрицаНЗ";
	
	Запрос.УстановитьПараметр("Аптека", Аптека);

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "assortment_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "assortment_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.good_code		= Выборка.good_code;
		СтрокаТаблицыВозврата.name 			= Выборка.name;
		СтрокаТаблицыВозврата.group_name	= Выборка.group_name;
		СтрокаТаблицыВозврата.q_min			= Выборка.q_min;
		СтрокаТаблицыВозврата.q_max			= Выборка.q_max;
		СтрокаТаблицыВозврата.nz_qnt		= Выборка.nz_qnt;
		СтрокаТаблицыВозврата.price			= Выборка.price;
		
		ТаблицаВозврата.assortment_list_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(Отчеты.АссортиментныйПланАптеки.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных").НастройкиПоУмолчанию);
	НастройкиКомпановки = КомпоновщикНастроек.Настройки;
	
	ПараметрАптека = НастройкиКомпановки.ПараметрыДанных.Элементы.Найти("Аптека");
	ПараметрАптека.Значение = Аптека;
	
	УправлениеОтчетами.ЗапланироватьОтчетНаВыполнение("АссортиментныйПланАптеки", , НастройкиКомпановки, , , Аптека.Мэйл, ТекущаяДата());
	
	Возврат ТаблицаВозврата;
	
КонецФункции
     
Функция assortment_post_changes(apt_code, add_goods_list, delete_goods_list)
	
	Аптека					= Справочники.МестаХранения.НайтиПоКоду(apt_code);
	ВидНЗ					= Перечисления.ВидыНЗ.НЗ_3;
	КтоВнесВМатрицу			= ПараметрыСеанса.ТекущийСотр;
	ДатаВнесенияВМатрицу	= ТекущаяДата();
	СрокДействияРекламы		= ДатаВнесенияВМатрицу + 24*60*60;
	
	//Удаление товаров из матрицы
	Для Каждого ТекСтрока Из delete_goods_list.assortment_delete_list_string Цикл
		
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);	
		
		НаборЗаписей = РегистрыСведений.Матрица.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Аптека.Установить(Аптека);
		НаборЗаписей.Отбор.Товар.Установить(Товар);	
		НаборЗаписей.Записать();
		
		//НЗ
		НаборЗаписей = РегистрыСведений.МатрицаНЗ.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Аптека.Установить(Аптека); 
		НаборЗаписей.Отбор.Товар.Установить(Товар);
		НаборЗаписей.Отбор.ВидНЗ.Установить(ВидНЗ);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
	//Добавление товаров в матрицу
	Для Каждого ТекСтрока Из add_goods_list.assortment_add_list_string Цикл
		
		Товар	= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);
		СуммаНЗ	= ТекСтрока.nz_qnt;
		КуМин	= 1;
		КуМакс	= 1;
		
		НаборЗаписей = РегистрыСведений.Матрица.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Аптека.Установить(Аптека);
		НаборЗаписей.Отбор.Товар.Установить(Товар);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			Запись = НаборЗаписей[0];
			
		Иначе
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Аптека					= Аптека;
			Запись.Товар					= Товар;
			Запись.ГруппаXYZ				= "";
			Запись.ГруппаАПИтог				= Товар.ГруппаАП;			
			Запись.КтоВнесВМатрицу			= КтоВнесВМатрицу;
			Запись.ДатаВнесенияВМатрицу		= ДатаВнесенияВМатрицу; 			
			
		КонецЕсли;
		
		Запись.КуМин			= КуМин;
		Запись.КуМакс			= КуМакс;
		Запись.ДатаИзменения	= ДатаВнесенияВМатрицу;
		
		НаборЗаписей.Записать();
		
		//НЗ
		НаборЗаписей = РегистрыСведений.МатрицаНЗ.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Аптека.Установить(Аптека); 
		НаборЗаписей.Отбор.Товар.Установить(Товар);
		НаборЗаписей.Отбор.ВидНЗ.Установить(ВидНЗ);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			Запись = НаборЗаписей[0];
			
		Иначе
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Аптека					= Аптека;
			Запись.Товар					= Товар;
			Запись.ВидНЗ					= ВидНЗ;			
			//Запись.РекламнаяАкция			= РекламнаяАкция;
			Запись.ДатаНачалаАкции			= ДатаВнесенияВМатрицу;
			Запись.СрокДействияРекламы		= СрокДействияРекламы;
			//Запись.УсловиеРекламнойАкции	= УсловиеРекламнойАкции;
			Запись.КтоВнесВМатрицу 	 		= КтоВнесВМатрицу;
			Запись.ДатаВнесенияВМатрицу 	= ДатаВнесенияВМатрицу;
			
		КонецЕсли;
		
		Запись.НЗ = СуммаНЗ;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецФункции


// -- Прайсы

Функция get_apt_price_list(apt_code)
	
	Запрос = Новый Запрос;
	Запрос.Текст =                   
	"ВЫБРАТЬ
	|	УЗ_ПартииОстатки.ТоварКод,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК ТоварНаименование,
	|	МАКСИМУМ(ЕСТЬNULL(УЗ_Партии.Производитель.Наименование, """")) КАК Производитель,
	|	МАКСИМУМ(ВЫРАЗИТЬ(УЗ_ПартииОстатки.СуммаЗакупБезНДСОстаток / (УЗ_ПартииОстатки.КоличествоОстаток * УЗ_Партии.К) КАК ЧИСЛО(15, 2))) КАК Цена,
	|	СУММА(ВЫРАЗИТЬ(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К КАК ЧИСЛО(15, 2))) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(, СкладКод = &СкладКод) КАК УЗ_ПартииОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	|		ПО УЗ_ПартииОстатки.ПартияКод = УЗ_Партии.Код
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|		ПО УЗ_ПартииОстатки.ТоварКод = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПартииОстатки.ТоварКод,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование";  
	
	Запрос.УстановитьПараметр("СкладКод", apt_code);

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_price_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "apt_price_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.good_code	= Выборка.ТоварКод;
		СтрокаТаблицыВозврата.name		= Выборка.ТоварНаименование;
		СтрокаТаблицыВозврата.mnf		= Выборка.Производитель;
		СтрокаТаблицыВозврата.price		= Выборка.Цена;
		СтрокаТаблицыВозврата.qnt		= Выборка.КоличествоОстаток;
		
		ТаблицаВозврата.apt_price_list_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_goods_price(goods_code_list, apt_code)
	
	//ТСО {29.04.2015 #0027}
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);	
	СписокКодов = goods_code_list.goods_code_list_string;
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	
	КвЧисла = Новый КвалификаторыЧисла(15, 0); 
	ТипЧисло = Новый ОписаниеТипов("Число", КвЧисла);
	
	ТаблицаКодов.Колонки.Добавить("КодТовара", ТипЧисло);
	
	Для Каждого ТекСтрока Из СписокКодов Цикл
		Стр = ТаблицаКодов.Добавить(); 		
		Стр.КодТовара = ТекСтрока.good_code;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКодов.КодТовара
	|ПОМЕСТИТЬ втТаблицаКодов
	|ИЗ
	|	&ТаблицаКодов КАК ТаблицаКодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	втТаблицаКодов КАК втТаблицаКодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|		ПО втТаблицаКодов.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаКодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Товар.Код КАК КодТовара,
	|	втТовары.Товар.МинЦенаMedlux КАК ЦенаМедлюкс,
	|	ЕСТЬNULL(ИсторияРозничнойЦеныСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРозничнойЦены.СрезПоследних(
	|				,
	|				Товар В
	|						(ВЫБРАТЬ
	|							вт.Товар
	|						ИЗ
	|							втТовары КАК вт)
	|					И Регион = &Регион) КАК ИсторияРозничнойЦеныСрезПоследних
	|		ПО втТовары.Товар = ИсторияРозничнойЦеныСрезПоследних.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТовары";
	
	Запрос.УстановитьПараметр("ТаблицаКодов", ТаблицаКодов);
	Запрос.УстановитьПараметр("Регион", Аптека.Регион);

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_price_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_price_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл 		
		Если Выборка.ЦенаМедлюкс > 0 Тогда
			Цена = Выборка.ЦенаМедлюкс;
		Иначе
			Цена = Выборка.Цена;			
		КонецЕсли;
			
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);		
		СтрокаТаблицыВозврата.good_code	= Выборка.КодТовара;
		СтрокаТаблицыВозврата.price		= Цена;
				
		ТаблицаВозврата.goods_price_list_string.Добавить(СтрокаТаблицыВозврата);
		
	КонецЦикла; 
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_suppliers_goods_list()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогПрайсЛистов.КодПрайсЛиста,
	|	ВЫБОР
	|		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	|			ТОГДА 1
	|		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	|	КОНЕЦ КАК БазовыйКоэфф,
	|	КонтрактыИАптеки.Аптека.СубъектРФ
	|ПОМЕСТИТЬ Параметры
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	|			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	|		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	|ГДЕ
	|	КонтрактыИАптеки.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	|	И ЕСТЬNULL(КонтрактыИАптеки.Аптека.СубъектРФ, ЗНАЧЕНИЕ(Справочник.СубъектыРФ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СубъектыРФ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Связки.ТоварФирмы.Код КАК КодТовара,
	|	Связки.ТоварФирмы.Наименование КАК НаименованиеТовара,
	|	ЕСТЬNULL(Связки.ТоварФирмы.Производитель.Наименование, """") КАК НаименованиеПроизводителя,
	|	Параметры.АптекаСубъектРФ.Код КАК КодСубъекта
	|ИЗ
	|	РегистрСведений.ПрайсЛисты КАК Прайсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	|		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО (Связки.Поставщик = Прайсы.ПоставщикСвязки)
	|			И (Связки.КодТовараПоставщика = Прайсы.Код)
	|ГДЕ
	|	Прайсы.Цена > 0
	|	И Прайсы.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Параметры";

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "suppliers_goods_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "suppliers_goods_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.subject_code	= Выборка.КодСубъекта;
		СтрокаТаблицыВозврата.good_code		= Выборка.КодТовара;
		СтрокаТаблицыВозврата.good_name		= Выборка.НаименованиеТовара;
		СтрокаТаблицыВозврата.producer_name	= Выборка.НаименованиеПроизводителя;
		
		ТаблицаВозврата.suppliers_goods_list_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;	
	
КонецФункции

// -- Неликвиды

Функция get_nelikvid_balance(apt_code)

	//ТСО {14.12.2015 #0066}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверкаНеликвидов.Аптека.Код КАК СкладКод,
	|	ПроверкаНеликвидов.Товар.Код КАК ТоварКод,
	|	ПроверкаНеликвидов.ДатаПроверки,
	|	ПроверкаНеликвидов.ФактическоеКоличество
	|ПОМЕСТИТЬ втНеликвиды
	|ИЗ
	|	РегистрСведений.ПроверкаНеликвидов КАК ПроверкаНеликвидов
	|ГДЕ
	|	111 = 111
	|	И ПроверкаНеликвидов.СтатусПроверки В(&СтатусыПроверки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНеликвиды.ТоварКод КАК Код
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	втНеликвиды КАК втНеликвиды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНеликвиды.СкладКод КАК Код
	|ПОМЕСТИТЬ втСклады
	|ИЗ
	|	втНеликвиды КАК втНеликвиды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЗ_ПартииОстатки.ТоварКод КАК ТоварКод,
	|	УЗ_ПартииОстатки.СкладКод КАК СкладКод,
	|	СУММА(ВЫРАЗИТЬ(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К КАК ЧИСЛО(15, 2))) КАК КоличествоОстаток
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			ТоварКод В
	|					(ВЫБРАТЬ
	|						втТовары.Код
	|					ИЗ
	|						втТовары)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						втСклады.Код
	|					ИЗ
	|						втСклады)) КАК УЗ_ПартииОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	|		ПО УЗ_ПартииОстатки.ПартияКод = УЗ_Партии.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПартииОстатки.ТоварКод,
	|	УЗ_ПартииОстатки.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНеликвиды.СкладКод,
	|	втНеликвиды.ТоварКод,
	|	втНеликвиды.ДатаПроверки,
	|	втНеликвиды.ФактическоеКоличество КАК КолвоОстатокНач,
	|	втОстатки.КоличествоОстаток КАК КолвоОстатокКон
	|ИЗ
	|	втНеликвиды КАК втНеликвиды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО втНеликвиды.ТоварКод = втОстатки.ТоварКод
	|			И втНеликвиды.СкладКод = втОстатки.СкладКод";
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "ПроверкаНеликвидов.Аптека = &Аптека");
		Запрос.УстановитьПараметр("Аптека", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли; 
	
	СтатусыПроверки = Новый Массив;
	СтатусыПроверки.Добавить(Перечисления.СтатусыПроверки.Совпадает);
	СтатусыПроверки.Добавить(Перечисления.СтатусыПроверки.СовпадаетЧастично);
	Запрос.УстановитьПараметр("СтатусыПроверки", СтатусыПроверки);
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "nelikvid_balance_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "nelikvid_balance_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл 		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code		= Выборка.СкладКод;
		СтрокаВозврата.good_code	= Выборка.ТоварКод;
		СтрокаВозврата.check_date	= Выборка.ДатаПроверки;
		СтрокаВозврата.qnt_start	= Выборка.КолвоОстатокНач;
		СтрокаВозврата.qnt_end		= Выборка.КолвоОстатокКон;
		
		ТаблицаВозврата.nelikvid_balance_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	
	
КонецФункции

Функция get_nelikvidy_list(apt_code, start_date, end_date)
	
	//ТСО {23.07.2015 #0037; изм #0081}
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверкаНеликвидов.КодПозиции,
	|	ПроверкаНеликвидов.Аптека,
	|	ПроверкаНеликвидов.Аптека.Код КАК СкладКод,
	|	ПроверкаНеликвидов.Товар,
	|	ПроверкаНеликвидов.Товар.Код КАК ТоварКод,
	|	ПроверкаНеликвидов.ДатаСозданияЗаписи,
	|	ПроверкаНеликвидов.ТипЗаявки
	|ПОМЕСТИТЬ втНеликвиды
	|ИЗ
	|	РегистрСведений.ПроверкаНеликвидов КАК ПроверкаНеликвидов
	|ГДЕ
	|	ПроверкаНеликвидов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверки.НеПроверен)
	|	И ПроверкаНеликвидов.ДатаСозданияЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И 111 = 111
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроверкаНеликвидов.Товар.Код,
	|	ПроверкаНеликвидов.Аптека.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНеликвиды.КодПозиции,
	|	втНеликвиды.СкладКод,
	|	втНеликвиды.ТоварКод,
	|	втНеликвиды.ДатаСозданияЗаписи,
	|	втНеликвиды.ТипЗаявки,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К, 0) КАК ЧИСЛО(15, 2))) КАК КолвоОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(УЗ_Партии.Серия, """")) КАК Серия
	|ИЗ
	|	втНеликвиды КАК втНеликвиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УЗ_Партии.Остатки(
	|				,
	|				ТоварКод В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							вт.ТоварКод
	|						ИЗ
	|							втНеликвиды КАК вт)
	|					И СкладКод В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							вт.СкладКод
	|						ИЗ
	|							втНеликвиды КАК вт)) КАК УЗ_ПартииОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	|			ПО УЗ_ПартииОстатки.ПартияКод = УЗ_Партии.Код
	|		ПО втНеликвиды.ТоварКод = УЗ_ПартииОстатки.ТоварКод
	|			И втНеликвиды.СкладКод = УЗ_ПартииОстатки.СкладКод
	|
	|СГРУППИРОВАТЬ ПО
	|	втНеликвиды.ДатаСозданияЗаписи,
	|	втНеликвиды.ТипЗаявки,
	|	втНеликвиды.КодПозиции,
	|	втНеликвиды.СкладКод,
	|	втНеликвиды.ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНеликвиды";
	
	Запрос.УстановитьПараметр("ДатаНачала", start_date);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(end_date));
	
	Если ЗначениеЗаполнено(apt_code) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "ПроверкаНеликвидов.Аптека = &Аптека");
		Запрос.УстановитьПараметр("Аптека", Справочники.МестаХранения.НайтиПоКоду(apt_code));
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "nelikvidy_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "nelikvidy_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.id			= Выборка.КодПозиции;
		СтрокаТаблицыВозврата.date			= Выборка.ДатаСозданияЗаписи;
		СтрокаТаблицыВозврата.goods_code	= Выборка.ТоварКод;
		СтрокаТаблицыВозврата.apt_code		= Выборка.СкладКод;
		СтрокаТаблицыВозврата.qnt			= Выборка.КолвоОстаток;
		СтрокаТаблицыВозврата.serial		= Выборка.Серия;
		СтрокаТаблицыВозврата.type			= Выборка.ТипЗаявки;
		
		ТаблицаВозврата.nelikvidy_list_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция post_nelikvid_status(nelikvid_id, revision_date, qnt_fact, comment)
	
	//ТСО {23.07.2015 #0037; изм #0047, #0080}
	
	НаборЗаписей = РегистрыСведений.ПроверкаНеликвидов.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.КодПозиции.Установить(nelikvid_id);	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Запись = НаборЗаписей[0];
		Запись.ДатаПроверки = revision_date;
		Запись.ФактическоеКоличество = qnt_fact;
		Запись.СтатусПроверки = ?(qnt_fact = 0, Перечисления.СтатусыПроверки.НеСовпадает, Перечисления.СтатусыПроверки.Проверен);
		
		Если comment = 1 Тогда
			Запись.КомментарийАптеки = Перечисления.КомментарииАптекПоНеликвидам.ЕстьНаОстаткеПродадим;
		ИначеЕсли comment = 2 Тогда
			Запись.КомментарийАптеки = Перечисления.КомментарииАптекПоНеликвидам.ЕстьНаОстаткеНеПродадим;
		Иначе
			Запись.КомментарийАптеки = Перечисления.КомментарииАптекПоНеликвидам.НетНаОстатке;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
			Возврат 1;  			
		Исключение
			Возврат "-1 " + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Возврат "-1 Не найдена запись по идентификатору " + nelikvid_id;
		
	КонецЕсли;
	
КонецФункции

// -- Дефектура

Функция defektura_post_list(defektura_list)
	
	ТекДата = ТекущаяДата();	
	СтрокаОшибок = "";
	Источник = Перечисления.ИсточникиДефектурныхЗаявок.ЛК;
	
	Для Каждого ТекСтрока Из defektura_list.defektura_list_string Цикл
		
		Аптека = Справочники.МестаХранения.НайтиПоКоду(ТекСтрока.apt_code);
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.good_code);
		
		НаборЗаписей = РегистрыСведений.Дефектура.СоздатьНаборЗаписей();	
		
		НаборЗаписей.Отбор.Аптека.Установить(Аптека);
		НаборЗаписей.Отбор.Товар.Установить(Товар);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить(ТекДата);
		НаборЗаписей.Отбор.Источник.Установить(Источник);
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Аптека		= Аптека;
		Запись.Товар		= Товар;
		Запись.ДатаЗаписи	= ТекДата;
		Запись.Источник		= Источник;
		Запись.Количество	= ТекСтрока.qnt;
		
		Запись.ФактическийОстатокАптеки	= ТекСтрока.fact;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СтрокаОшибок = СтрокаОшибок + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если СтрокаОшибок = "" Тогда
		Возврат 1;
	Иначе
		Возврат "-1 " + СтрокаОшибок;
	КонецЕсли;	
	
КонецФункции

Функция defektura_get_price(select_goods_list, apt_code)
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	
	СписокТоваров = select_goods_list.select_goods_list_string;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	КвЧисла = Новый КвалификаторыЧисла(15, 0); 
	ТипЧисло = Новый ОписаниеТипов("Число", КвЧисла);
	
	ТаблицаТоваров.Колонки.Добавить("КодТовара",	ТипЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество",	ТипЧисло);
	
	Для Каждого СтрокаЗаказа Из СписокТоваров Цикл

		Стр = ТаблицаТоваров.Добавить();
		
		Стр.КодТовара = СтрокаЗаказа.good_code;
		Стр.Количество = СтрокаЗаказа.qnt;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.КодТовара КАК Код,
	|	ТаблицаТоваров.Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЗ_ПартииОстатки.ТоварКод,
	|	СУММА(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К) КАК КолвоОстаток
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			ТоварКод В
	|					(ВЫБРАТЬ
	|						вт.Код
	|					ИЗ
	|						втТовары КАК вт)
	|				И СкладКод = &КодАптеки) КАК УЗ_ПартииОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	|		ПО УЗ_ПартииОстатки.ПартияКод = УЗ_Партии.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПартииОстатки.ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Код,
	|	АП.УчаствуетВАП КАК УчаствуетВАП,
	|	ЕСТЬNULL(АП.ГруппаАП.Наименование, """") КАК ГруппаАП,
	|	втТовары.Количество,
	|	ЕСТЬNULL(Матрица.КуМакс, -1) КАК КуМакс,
	|	ЕСТЬNULL(втОстатки.КолвоОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(РЦ.Цена, 0) КАК Цена
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ПО втТовары.Код = АП.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
	|		ПО (АП.Ссылка = Матрица.Товар)
	|			И (Матрица.Аптека = &Аптека)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО втТовары.Код = втОстатки.ТоварКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО втТовары.Код = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = &КодАптеки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстатки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Аптека",			Аптека);
	Запрос.УстановитьПараметр("КодАптеки",		apt_code);

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_price");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_price_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	//К1 = Константы.КоэффициентДляДефектурнойЗаявки_0_50.Получить();
	//К2 = Константы.КоэффициентДляДефектурнойЗаявки_50_200.Получить();
	//К3 = Константы.КоэффициентДляДефектурнойЗаявки_200_500.Получить();
	//К4 = Константы.КоэффициентДляДефектурнойЗаявки_500.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.УчаствуетВАП Тогда
			Активный	= Ложь;
			Цена		= 0;
			Количество	= 0;
			
		ИначеЕсли Выборка.ГруппаАП = "I" Или Выборка.ГруппаАП = "G" Или Выборка.КуМакс = -1 Тогда
			Активный	= Ложь;
			Цена		= Выборка.Цена;
			Количество	= 0;
			
		Иначе
			Активный = Истина;
			Цена = Выборка.Цена;
			
			//Если Цена < 50 Тогда
			//	К = К1;				
			//ИначеЕсли Цена < 200 Тогда
			//	К = К2;
			//ИначеЕсли Цена < 500 Тогда
			//	К = К3;
			//Иначе
			//	К = К4;			
			//КонецЕсли;
			//
			//МаксимальноеКоличество = Выборка.КуМакс * К + Выборка.Остаток;
			//Количество = Мин(Выборка.Количество > МаксимальноеКоличество);
			
			Количество = Выборка.Количество;
			
		КонецЕсли;

		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.good_code	= Выборка.Код;
		СтрокаТаблицыВозврата.price		= Цена;
		СтрокаТаблицыВозврата.qnt		= Количество;
		СтрокаТаблицыВозврата.qnt_apt	= Выборка.Остаток;
		СтрокаТаблицыВозврата.active	= Активный;
		
		ТаблицаВозврата.goods_price_string.Добавить(СтрокаТаблицыВозврата);			
		
	КонецЦикла; 	
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция defektura_post_goodslist(apt_code, defektura_goodslist)
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	ТекДата = ТекущаяДата();
	Источник = Перечисления.ИсточникиДефектурныхЗаявок.ЛК;
	
	СтрокаОшибок = "";
	
	Для Каждого ТекТовар Из defektura_goodslist.defektura_goodslist_string Цикл
		
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекТовар.good_code);
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	0 КАК КолВо
		//|ИЗ
		//|	РегистрСведений.Матрица КАК Матрица
		//|ГДЕ
		//|	Матрица.Аптека = &Аптека
		//|	И Матрица.Товар = &Товар
		//|	И Матрица.ГруппаАПИтог <> ""I""";
		//
		//Запрос.УстановитьПараметр("Аптека", Аптека);
		//Запрос.УстановитьПараметр("Товар", Товар);
		//
		//РезультатЗапроса = Запрос.Выполнить(); 		
		//Проинф = РезультатЗапроса.Пустой();

		
		НаборЗаписей = РегистрыСведений.Дефектура.СоздатьНаборЗаписей();	
		
		НаборЗаписей.Отбор.Аптека.Установить(Аптека);
		НаборЗаписей.Отбор.Товар.Установить(Товар);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить(ТекДата);
		НаборЗаписей.Отбор.Источник.Установить(Источник);
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Аптека		= Аптека;
		Запись.Товар		= Товар;
		Запись.ДатаЗаписи	= ТекДата;
		Запись.Источник		= Источник;
		Запись.Количество	= ТекТовар.qnt;
		
		Если ЗначениеЗаполнено(ТекТовар.fact) Тогда
			Запись.ФактическийОстатокАптеки	= ТекТовар.fact;
		КонецЕсли;
		
		//Запись.ПроинформироватьАптекуОбОтсутствииВАП = Проинф;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СтрокаОшибок = СтрокаОшибок + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если СтрокаОшибок = "" Тогда
		Возврат 1;
	Иначе
		Возврат "-1 " + СтрокаОшибок;
	КонецЕсли;
	
КонецФункции  

Функция defektura_check_data(apt_code, good_code)
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(good_code);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Дефектура.ДатаЗаписи
	|ИЗ
	|	РегистрСведений.Дефектура КАК Дефектура
	|ГДЕ
	|	Дефектура.Аптека = &Аптека
	|	И Дефектура.Товар = &Товар
	|	И Дефектура.ДатаЗаписи > &ДатаЗаписи";
	
	Запрос.УстановитьПараметр("Аптека", Аптека);
	Запрос.УстановитьПараметр("ДатаЗаписи", ТекущаяДата() - 72*24*60*60);
	Запрос.УстановитьПараметр("Товар", Товар);

	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// -- Спец. цены

Функция spec_price_search_goods(search_string)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК good_code,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК name,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП КАК ap_active
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование ПОДОБНО &Наименование
	|	И (НЕ АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Наименование", "%" + search_string + "%");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТаблицыВозврата.good_code	= ВыборкаДетальныеЗаписи.good_code;
		СтрокаТаблицыВозврата.name 		= ВыборкаДетальныеЗаписи.name;
		СтрокаТаблицыВозврата.ap_active	= ВыборкаДетальныеЗаписи.ap_active;
			
		ТаблицаВозврата.goods_list_string.Добавить(СтрокаТаблицыВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция spec_price_get_pricelist(apt_code)
	       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпециальныеЦеныАптеки.Ссылка.Товар.Код КАК good_code,
	|	СпециальныеЦеныАптеки.Ссылка.Товар.Наименование КАК name,
	|	СпециальныеЦеныАптеки.Ссылка.СпециальнаяЦена КАК price,
	|	СпециальныеЦеныАптеки.Ссылка.НачПериода КАК date_start,
	|	СпециальныеЦеныАптеки.Ссылка.КонПериода КАК date_end,
	|	СпециальныеЦеныАптеки.Ссылка.Код КАК КодЦены
	|ИЗ
	|	Справочник.СпециальныеЦены.Аптеки КАК СпециальныеЦеныАптеки
	|ГДЕ
	|	СпециальныеЦеныАптеки.Аптека.Код = &КодАптеки
	|	И СпециальныеЦеныАптеки.Ссылка.КонПериода >= &ТекДата
	|	И (НЕ СпециальныеЦеныАптеки.Ссылка.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодЦены УБЫВ
	|ИТОГИ ПО
	|	good_code";
	
	Запрос.УстановитьПараметр("КодАптеки", apt_code);
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));

	Результат = Запрос.Выполнить();
	
	ВыборкаТовар = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "spec_price_list");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "spec_price_list_string");	
	
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока ВыборкаТовар.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаТовар.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТаблицыВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
			
			СтрокаТаблицыВозврата.good_code		= ВыборкаДетальныеЗаписи.good_code;
			СтрокаТаблицыВозврата.name 			= ВыборкаДетальныеЗаписи.name;
			СтрокаТаблицыВозврата.price			= ВыборкаДетальныеЗаписи.price;
			СтрокаТаблицыВозврата.date_start	= ВыборкаДетальныеЗаписи.date_start;
			СтрокаТаблицыВозврата.date_end		= ВыборкаДетальныеЗаписи.date_end;
			
			ТаблицаВозврата.spec_price_list_string.Добавить(СтрокаТаблицыВозврата);			
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция spec_price_post_pricelist(apt_code, spec_price_import)
		
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);
	СтрокаОшибок = "";
	
	Для Каждого ТекТовар Из spec_price_import.spec_price_import_string Цикл
		
		НовСпр = Справочники.СпециальныеЦены.СоздатьЭлемент();
		НовСпр.Товар			= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекТовар.good_code);
		НовСпр.СпециальнаяЦена 	= ТекТовар.price;
		НовСпр.НачПериода		= ТекущаяДата();
		НовСпр.КонПериода		= ТекущаяДата() + Константы.СрокДействияСпециальныхЦен.Получить()*24*60*60;
		
		НовСтрСпр = НовСпр.Аптеки.Добавить();
		НовСтрСпр.Аптека = Аптека;
		
		Попытка
			НовСпр.Записать();
		Исключение
			СтрокаОшибок = СтрокаОшибок + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
		
	КонецЦикла;
	
	Если СтрокаОшибок = "" Тогда
		Возврат 1;
	Иначе
		Возврат "-1 " + СтрокаОшибок;
	КонецЕсли;
	
КонецФункции

// -- Инд. заказы

Функция site_pc_get_price(select_goods_list, apt_code, exp_date)
	
	Аптека = Справочники.МестаХранения.НайтиПоКоду(apt_code);	
	СписокТоваров = select_goods_list.select_goods_list_string;
	МассивТоваров = Новый Массив;
	ПодкатегорияГоспитальные = Справочники.Подкатегории.НайтиПоКоду(17);
	
	Для Каждого СтрокаЗаказа Из СписокТоваров Цикл 
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(СтрокаЗаказа.good_code);		
		Если ЗначениеЗаполнено(Товар) И МассивТоваров.Найти(Товар) = Неопределено Тогда
			Если Товар.ПометкаУдаления = Ложь И Товар.ПККН = Ложь Тогда
				МассивТоваров.Добавить(Товар);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КаталогПрайсЛистов.Настройка.Владелец КАК Поставщик,
	|	КаталогПрайсЛистов.Настройка КАК Настройка,
	|	КаталогПрайсЛистов.КодПрайсЛиста КАК КодПрайсЛиста,
	|	ВЫБОР
	|		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	|			ТОГДА 1
	|		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	|	КОНЕЦ КАК БазовыйКоэфф
	|ПОМЕСТИТЬ Параметры
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	|			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	|		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	|ГДЕ
	|	КонтрактыИАптеки.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Аптека = &Аптека
	|	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Владелец.ПринимаетИндивидуальныеЗаказы = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыНаценок.Код КАК Код,
	|	ВариантыНаценок.Наценка_0_20 КАК Наценка_0_20,
	|	ВариантыНаценок.Наценка_20_100 КАК Наценка_20_100,
	|	ВариантыНаценок.Наценка_100_300 КАК Наценка_100_300,
	|	ВариантыНаценок.Наценка_300_500 КАК Наценка_300_500,
	|	ВариантыНаценок.Наценка_500_1000 КАК Наценка_500_1000,
	|	ВариантыНаценок.Наценка_1000_5000 КАК Наценка_1000_5000,
	|	ВариантыНаценок.Наценка_5000 КАК Наценка_5000
	|ПОМЕСТИТЬ втНаценки
	|ИЗ
	|	Справочник.ВариантыНаценок КАК ВариантыНаценок
	|ГДЕ
	|	&ТекДата МЕЖДУ ВариантыНаценок.НачалоСрокаДействия И ВариантыНаценок.ОкончаниеСрокаДействия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Связки.ТоварФирмы КАК Товар,
	|	ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2)) КАК ЦенаБезНаценки,
	|	ВЫБОР
	|		КОГДА втНаценки.Код ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА Прайсы.Цена > 5000
	|			ТОГДА втНаценки.Наценка_5000
	|		КОГДА Прайсы.Цена > 1000
	|			ТОГДА втНаценки.Наценка_1000_5000
	|		КОГДА Прайсы.Цена > 500
	|			ТОГДА втНаценки.Наценка_500_1000
	|		КОГДА Прайсы.Цена > 300
	|			ТОГДА втНаценки.Наценка_300_500
	|		КОГДА Прайсы.Цена > 100
	|			ТОГДА втНаценки.Наценка_100_300
	|		КОГДА Прайсы.Цена > 20
	|			ТОГДА втНаценки.Наценка_20_100
	|		ИНАЧЕ втНаценки.Наценка_0_20
	|	КОНЕЦ КАК Наценка,
	|	Параметры.Поставщик.Код КАК КодПоставщика,
	|	ВЫБОР
	|		КОГДА Параметры.Поставщик.КоличествоДнейДоставкиИЗ = 0
	|			ТОГДА Параметры.Поставщик.КоличествоДнейДоставки
	|		ИНАЧЕ Параметры.Поставщик.КоличествоДнейДоставкиИЗ
	|	КОНЕЦ КАК ДнейДоставки,
	|	Прайсы.Код КАК КодТовараПоставщика,
	|	Прайсы.Товар КАК НаименованиеТовараПоставщика,
	|	Прайсы.СрокГодности КАК СрокГодности
	|ПОМЕСТИТЬ втПрайс
	|ИЗ
	|	РегистрСведений.ПрайсЛисты КАК Прайсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	|		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	|			И Прайсы.Код = Связки.КодТовараПоставщика
	|			И (Связки.Блокировка = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаценки КАК втНаценки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Связки.ТоварФирмы В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Параметры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Матрица.Товар КАК Товар,
	|	Матрица.Товар.Код КАК КодТовара
	|ПОМЕСТИТЬ втМатрица
	|ИЗ
	|	РегистрСведений.Матрица КАК Матрица
	|ГДЕ
	|	Матрица.Аптека = &Аптека
	|	И Матрица.Товар В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМатрица.Товар КАК Товар,
	|	МАКСИМУМ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0))) КАК ЦенаРозн
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			ТоварКод В
	|					(ВЫБРАТЬ
	|						втМатрица.КодТовара
	|					ИЗ
	|						втМатрица)
	|				И СкладКод = &КодАптеки) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМатрица КАК втМатрица
	|		ПО Остатки.ТоварКод = втМатрица.КодТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО Остатки.ТоварКод = РЦ.ТоварКод
	|			И Остатки.СкладКод = РЦ.АптекаКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО Остатки.ПартияКод = РЦП.ПартияКод
	|			И Остатки.СкладКод = РЦП.АптекаКод
	|
	|СГРУППИРОВАТЬ ПО
	|	втМатрица.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втМатрица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПрайс.Товар КАК Товар,
	|	втПрайс.Товар.Код КАК КодТовара,
	|	втПрайс.Товар.Подкатегория КАК Подкатегория,
	|	втПрайс.КодПоставщика КАК КодПоставщика,
	|	ВЫБОР
	|		КОГДА втПрайс.КодПоставщика = 3055
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоставщикGDP,
	|	втПрайс.ДнейДоставки КАК ДнейДоставки,
	|	ВЫРАЗИТЬ(втПрайс.ЦенаБезНаценки * (1 + втПрайс.Наценка / 100) КАК ЧИСЛО(10, 2)) КАК ЦенаРасчетная,
	|	ЕСТЬNULL(втОстатки.ЦенаРозн, 0) КАК ЦенаОстатка,
	|	ЕСТЬNULL(ИнтернетЦены.Цена, 0) КАК ИнтернетЦена,
	|	втПрайс.ЦенаБезНаценки КАК ЦенаПрайса,
	|	втПрайс.КодТовараПоставщика КАК КодТовараПоставщика,
	|	втПрайс.НаименованиеТовараПоставщика КАК НаименованиеТовараПоставщика,
	|	втПрайс.СрокГодности КАК СрокГодности,
	|	ЕСТЬNULL(ДопустимыеПроцентыОтклоненияЗЦ.ПроцентОтклонения, 0) КАК ПроцентОтклонения
	|ИЗ
	|	втПрайс КАК втПрайс
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО втПрайс.Товар = втОстатки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнтернетЦены КАК ИнтернетЦены
	|		ПО втПрайс.Товар = ИнтернетЦены.Товар
	|			И (ИнтернетЦены.СубъектРФ = &Субъект_ПоУмолчанию)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеПроцентыОтклоненияЗЦ КАК ДопустимыеПроцентыОтклоненияЗЦ
	|		ПО (втПрайс.ЦенаБезНаценки МЕЖДУ ДопустимыеПроцентыОтклоненияЗЦ.ЦенаС И ДопустимыеПроцентыОтклоненияЗЦ.ЦенаПо)
	|ГДЕ
	|	втПрайс.ДнейДоставки <= &МаксКолвоДнейДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоставщикGDP УБЫВ,
	|	ДнейДоставки,
	|	ЦенаРасчетная
	|ИТОГИ
	|	МИНИМУМ(ЦенаРасчетная),
	|	МАКСИМУМ(ЦенаОстатка),
	|	МАКСИМУМ(ИнтернетЦена),
	|	МАКСИМУМ(ПроцентОтклонения)
	|ПО
	|	Товар";
	
	Запрос.УстановитьПараметр("Товары",			МассивТоваров);
	Запрос.УстановитьПараметр("Аптека",			Аптека);
	Запрос.УстановитьПараметр("КодАптеки",		apt_code);
	Запрос.УстановитьПараметр("Субъект_ПоУмолчанию", Справочники.СубъектыРФ.НайтиПоКоду(31));
	Запрос.УстановитьПараметр("ТекДата",		ТекущаяДата());
	
	МаксКолвоДнейДоставки = (exp_date - НачалоДня(ТекущаяДата())) / (24*60*60);
	Запрос.УстановитьПараметр("МаксКолвоДнейДоставки", МаксКолвоДнейДоставки);
	
	Результат = Запрос.Выполнить();
	
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "ind_price_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "ind_price_list_string");	
			
	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
		
	
	ВыборкаТовар = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	                
	Пока ВыборкаТовар.Следующий() Цикл
		
		ЛучшаяЦенаПоставщика = ВыборкаТовар.ЦенаРасчетная;
		МаксДопустимаяЦена = ЛучшаяЦенаПоставщика * (1 + ВыборкаТовар.ПроцентОтклонения / 100);
		
		Выборка = ВыборкаТовар.Выбрать();
		
		ЦенаПоставщика = 0;
		ЦенаПрайса = 0;
		Пока Выборка.Следующий() Цикл			
			Если Выборка.ЦенаРасчетная <= МаксДопустимаяЦена Или Выборка.ПоставщикGDP Тогда
				ЦенаПоставщика	= Выборка.ЦенаРасчетная;
				КодПоставщика	= Выборка.КодПоставщика;
				ДнейДоставки	= Выборка.ДнейДоставки;				
				КодТовПост		= Выборка.КодТовараПоставщика;
				НаимТовПост		= Выборка.НаименованиеТовараПоставщика;
				ЦенаПрайса		= Выборка.ЦенаПрайса;
				СрокГодности	= Выборка.СрокГодности;			
				
				Прервать;
				
			КонецЕсли; 			
			  			
		КонецЦикла;
		
		Если ВыборкаТовар.ЦенаОстатка > ЦенаПрайса Тогда
			Цена = ВыборкаТовар.ЦенаОстатка;  				
		ИначеЕсли ВыборкаТовар.ИнтернетЦена > ЦенаПрайса Тогда 				
			Цена = ВыборкаТовар.ИнтернетЦена;
		Иначе
			Цена = ЦенаПоставщика;
		КонецЕсли;
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);			
		СтрокаВозврата.good_code	= ВыборкаТовар.КодТовара;
		СтрокаВозврата.price		= Цена;
		СтрокаВозврата.qnt			= 0;
		СтрокаВозврата.supp_code	= КодПоставщика;
		СтрокаВозврата.supp_days	= ДнейДоставки;
		
		СтрокаВозврата.supp_good_code	= КодТовПост;
		СтрокаВозврата.supp_good_name	= НаимТовПост;
		СтрокаВозврата.supp_good_price	= ЦенаПрайса;
		СтрокаВозврата.supp_good_godn	= СрокГодности;
		
		СтрокаВозврата.hospital = ВыборкаТовар.Подкатегория=ПодкатегорияГоспитальные;
		
		ТаблицаВозврата.ind_price_list_string.Добавить(СтрокаВозврата);
		
		
		Инд = МассивТоваров.Найти(ВыборкаТовар.Товар);
		МассивТоваров.Удалить(Инд);
		
	КонецЦикла;

	
	Если МассивТоваров.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АП.Код КАК Код
		|ИЗ
		|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		|ГДЕ
		|	АП.Ссылка В(&Товары)
		|	И АП.Подкатегория = &Подкатегория";
		
		Запрос.УстановитьПараметр("Товары", МассивТоваров);
		Запрос.УстановитьПараметр("Подкатегория", ПодкатегорияГоспитальные);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);			
			СтрокаВозврата.good_code	= Выборка.Код;
			СтрокаВозврата.hospital		= Истина;
			ТаблицаВозврата.ind_price_list_string.Добавить(СтрокаВозврата);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Возврат ТаблицаВозврата;	
	
КонецФункции

Функция get_goods_in_matrix(apt_code, search_string)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Матрица.Товар.Код КАК КодТовара,
	|	Матрица.ГруппаАПИтог КАК ГруппаАП
	|ИЗ
	|	РегистрСведений.Матрица КАК Матрица
	|ГДЕ
	|	Матрица.Аптека = &Аптека
	|	И Матрица.Товар.Наименование ПОДОБНО &ШаблонНаименования";
	
	Запрос.УстановитьПараметр("Аптека",				Справочники.МестаХранения.НайтиПоКоду(apt_code));
	Запрос.УстановитьПараметр("ШаблонНаименования",	"%" + search_string + "%");
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_in_matrix_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_in_matrix_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл 		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.good_code	= Выборка.КодТовара;
		СтрокаВозврата.ap_group		= Выборка.ГруппаАП;
		
		ТаблицаВозврата.goods_in_matrix_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция get_ost_grupp_apt(apt_code, goods_code_list, apt_clinic, ost_be)
	                     		
	КодыТовара = Новый Массив;  	
	Для Каждого ТекСтрока Из goods_code_list.goods_code_list_string Цикл 			
		КодыТовара.Добавить(ТекСтрока.good_code);			
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияЗаведующие.ФИО
	|ПОМЕСТИТЬ втДиректорАптеки
	|ИЗ
	|	Справочник.МестаХранения.Заведующие КАК МестаХраненияЗаведующие
	|ГДЕ
	|	МестаХраненияЗаведующие.Ссылка = &Аптека
	|	И МестаХраненияЗаведующие.Должность = &Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаХраненияЗаведующие.Ссылка.Код КАК Код
	|ПОМЕСТИТЬ втСклады
	|ИЗ
	|	Справочник.МестаХранения.Заведующие КАК МестаХраненияЗаведующие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДиректорАптеки КАК втДиректорАптеки
	|		ПО МестаХраненияЗаведующие.ФИО = втДиректорАптеки.ФИО
	|			И (МестаХраненияЗаведующие.Должность = &Должность)
	|ГДЕ
	|	МестаХраненияЗаведующие.Ссылка.СтатусАптеки = &СтатусАптеки
	|	И 111 = 111
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЗ_ПартииОстатки.ТоварКод,
	|	УЗ_ПартииОстатки.СкладКод,
	|	СУММА(ВЫРАЗИТЬ(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К КАК ЧИСЛО(15, 2))) КАК КолвоОстаток,
	|	ВЫРАЗИТЬ(СУММА(УЗ_ПартииОстатки.СуммаЗакупБезНДСОстаток * (1 + УЗ_ПартииОстатки.СтавкаНДСЗакуп / 100)) / СУММА(УЗ_ПартииОстатки.КоличествоОстаток / УЗ_Партии.К) КАК ЧИСЛО(15, 2)) КАК ЦенаЗакупСНДС
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			ТоварКод В (&КодыТовара)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						втСклады.Код
	|					ИЗ
	|						втСклады)) КАК УЗ_ПартииОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
	|		ПО УЗ_ПартииОстатки.ПартияКод = УЗ_Партии.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПартииОстатки.ТоварКод,
	|	УЗ_ПартииОстатки.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.СкладКод КАК КодСклада,
	|	втОстатки.ТоварКод КАК КодТовара,
	|	втОстатки.КолвоОстаток - ЕСТЬNULL(ТоварыКПеремещениюОстатки.КоличествоОстаток, 0) КАК КолвоОстаток,
	|	втОстатки.ЦенаЗакупСНДС,
	|	1 КАК КолвоПозиций
	|ИЗ
	|	втОстатки КАК втОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПеремещению.Остатки(
	|				,
	|				ТоварКод В (&КодыТовара)
	|					И СкладКод В
	|						(ВЫБРАТЬ
	|							втСклады.Код
	|						ИЗ
	|							втСклады)) КАК ТоварыКПеремещениюОстатки
	|		ПО втОстатки.ТоварКод = ТоварыКПеремещениюОстатки.ТоварКод
	|ГДЕ
	|	втОстатки.КолвоОстаток > ЕСТЬNULL(ТоварыКПеремещениюОстатки.КоличествоОстаток, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолвоПозиций УБЫВ
	|ИТОГИ
	|	СУММА(КолвоПозиций)
	|ПО
	|	КодСклада";
	
	Если ЗначениеЗаполнено(apt_clinic) И apt_clinic = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "111 = 111", "МестаХраненияЗаведующие.Ссылка.АптекаКлиника = ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ost_be) И ost_be = Истина Тогда
		Должность = Перечисления.ДолжностиРуководителейАптек.ДиректорБизнесЕдиницы;
	Иначе
		Должность = Перечисления.ДолжностиРуководителейАптек.УправляющийАптекой;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Аптека",			Справочники.МестаХранения.НайтиПоКоду(apt_code));
	Запрос.УстановитьПараметр("Должность",		Должность);
	Запрос.УстановитьПараметр("СтатусАптеки",	Перечисления.СтатусыАптеки.Р);
	Запрос.УстановитьПараметр("КодыТовара",		КодыТовара);
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_ost_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "goods_ost_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.КодТовара = Null Тогда // строка итога
			Продолжить;
		КонецЕсли;
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.good_code	= Выборка.КодТовара;
		СтрокаВозврата.apt_code		= Выборка.КодСклада;
		СтрокаВозврата.qnt_ost		= Выборка.КолвоОстаток;
		СтрокаВозврата.price		= Выборка.ЦенаЗакупСНДС;
		
		ТаблицаВозврата.goods_ost_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////
// МАЛИНА

Функция get_ap_malina()
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	АССОРТИМЕНТНЫЙ_ПЛАН.Код как АПКод,
	             |	АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаМалина.Код как МалинаКод
	             |ИЗ
	             |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	             |ГДЕ
	             |	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП = ИСТИНА
	             |	И АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаМалина.Ссылка ЕСТЬ НЕ NULL ";
	Рез=Запрос.Выполнить();			 
	Выб=Рез.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "reflist");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "reflist_string");	
	
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока  Выб.Следующий() Цикл
		
		СтрокаТВ=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТВ.Code=Выб.АПКод;
		СтрокаТВ.Name=Формат(Выб.МалинаКод,"ЧГ=0");
		СтрокаТВ.extra_info="";
		
		ТаблицаВозврата.string.Добавить(СтрокаТВ);
	КонецЦикла;	
				 
	Возврат ТаблицаВозврата;
КонецФункции

Функция get_malina_grp()
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	ГруппыМалины.Код,
	             |	ГруппыМалины.Наименование
	             |ИЗ
	             |	Справочник.ГруппыМалины КАК ГруппыМалины";
	Рез=Запрос.Выполнить();			 
	Выб=Рез.Выбрать();
	
	Тип_ТаблицаВозврата 		= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "reflist");
	Тип_СтрокаТаблицыВозврата 	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "reflist_string");	
	
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Пока  Выб.Следующий() Цикл
		
		СтрокаТВ=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		
		СтрокаТВ.Code=Выб.Код;
		СтрокаТВ.Name=Выб.Наименование;
		СтрокаТВ.extra_info="";
		
		ТаблицаВозврата.string.Добавить(СтрокаТВ);
	КонецЦикла;	
				 
	Возврат ТаблицаВозврата;			 
				 
КонецФункции


////////////////////////////////////////////////////////////
// ДЛЯ АЛЬЯНСА

Функция get_oriola_price_list()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
	|	МАКСИМУМ(СвязкиТовараСПоставщиком.КодТовараПоставщика) КАК КодТовараПоставщика
	|ПОМЕСТИТЬ втСвязки
	|ИЗ
	|	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	|ГДЕ
	|	СвязкиТовараСПоставщиком.Поставщик = &ПоставщикСвязок
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиТовараСПоставщиком.ТоварФирмы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОптовыхСкладов.НаименованиеТовараСклада КАК НаименованиеТовараGDP,
	|	ЕСТЬNULL(ОстаткиОптовыхСкладов.Товар.Наименование, """") КАК НаименованиеТовараAVE,
	|	ОстаткиОптовыхСкладов.КодТовараСклада КАК КодТовараGDP,
	|	ЕСТЬNULL(ОстаткиОптовыхСкладов.Товар.Код, 0) КАК КодТовараAVE,
	|	ЕСТЬNULL(втСвязки.КодТовараПоставщика, """") КАК КодТовараAHC,
	|	ОстаткиОптовыхСкладов.Количество КАК Количество,
	|	ОстаткиОптовыхСкладов.ЦенаБезНДС КАК ЦенаБезНДС,
	|	ОстаткиОптовыхСкладов.ЦенаСНДС КАК ЦенаСНДС,
	|	ОстаткиОптовыхСкладов.СрокГодности КАК СрокГодности,
	|	ОстаткиОптовыхСкладов.Серия КАК Серия,
	// НДС20/18
	//|	ВЫБОР
	//|		КОГДА ОстаткиОптовыхСкладов.ЦенаБезНДС = 0
	//|			ТОГДА ЕСТЬNULL(ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Ставка, 0)
	//|		ИНАЧЕ ВЫБОР ВЫРАЗИТЬ(ОстаткиОптовыхСкладов.ЦенаСНДС / ОстаткиОптовыхСкладов.ЦенаБезНДС КАК ЧИСЛО(5, 2))
	//|				КОГДА 1
	//|					ТОГДА 0
	//|				КОГДА 1.1
	//|					ТОГДА 10
	//|				КОГДА 1.18
	//|					ТОГДА 18
	//|				ИНАЧЕ ЕСТЬNULL(ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Ставка, 0)
	//|			КОНЕЦ
	//|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиОптовыхСкладов.ЦенаБезНДС = 0
	|			ТОГДА ЕСТЬNULL(ВЫБОР
	|						КОГДА ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Код = 3
	|								И &ДатаНДС < ДАТАВРЕМЯ(2019, 1, 1)
	|							ТОГДА 18
	|						ИНАЧЕ ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Ставка
	|					КОНЕЦ, 0)
	|		ИНАЧЕ ВЫБОР ВЫРАЗИТЬ(ОстаткиОптовыхСкладов.ЦенаСНДС / ОстаткиОптовыхСкладов.ЦенаБезНДС КАК ЧИСЛО(5, 2))
	|				КОГДА 1
	|					ТОГДА 0
	|				КОГДА 1.1
	|					ТОГДА 10
	|				КОГДА 1.18
	|					ТОГДА 18
	|				ИНАЧЕ ЕСТЬNULL(ВЫБОР
	|							КОГДА ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Код = 3
	|									И &ДатаНДС < ДАТАВРЕМЯ(2019, 1, 1)
	|								ТОГДА 18
	|							ИНАЧЕ ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Ставка
	|						КОНЕЦ, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.ОстаткиОптовыхСкладов КАК ОстаткиОптовыхСкладов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвязки КАК втСвязки
	|		ПО ОстаткиОптовыхСкладов.Товар = втСвязки.ТоварФирмы
	|ГДЕ
	|	ОстаткиОптовыхСкладов.ОптовыйСклад В(&Склад)";
	
	Запрос.УстановитьПараметр("Склад",				Справочники.ОптовыеСклады.НайтиПоКоду(5)); //Оптовый (белые столбы)
	Запрос.УстановитьПараметр("ПоставщикСвязок",	Справочники.Поставщики.НайтиПоКоду(456)); //АЛЬЯНС ХЕЛСКЕА РУС
	Запрос.УстановитьПараметр("ДатаНДС",			ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "oriola_price_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "oriola_price_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл 		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.good_name_gdp	= СокрЛП(Выборка.НаименованиеТовараGDP);
		СтрокаВозврата.good_name_ave	= СокрЛП(Выборка.НаименованиеТовараAVE);
		СтрокаВозврата.good_code_gdp	= Выборка.КодТовараGDP;
		СтрокаВозврата.good_code_ave	= Выборка.КодТовараAVE;
		СтрокаВозврата.good_code_ahc	= Выборка.КодТовараAHC;
		СтрокаВозврата.qnt_1			= Выборка.Количество;
		СтрокаВозврата.qnt_2			= 0;
		СтрокаВозврата.qnt_3			= 0;
		СтрокаВозврата.price1			= Выборка.ЦенаБезНДС;
		СтрокаВозврата.price2			= Выборка.ЦенаСНДС;
		СтрокаВозврата.godn				= Выборка.СрокГодности;
		СтрокаВозврата.ser				= Выборка.Серия;
		СтрокаВозврата.nds				= Выборка.СтавкаНДС;
		
		ТаблицаВозврата.oriola_price_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции  


////////////////////////////////////////////////////////////
// ДЛЯ МКБ

Функция PostReportCashOnTerminal(ReportCashOnTerminal)
	
	CashOnTerminal = ReportCashOnTerminal.CashOnTerminal[0];
	 	
	КодВалюты = CashOnTerminal.Currency;
	Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);	
	Если Валюта.Пустая() Тогда
		Возврат "Не найдена валюта по коду " + КодВалюты;
	КонецЕсли;
	
	КодАптеки = CashOnTerminal.TransferOrderId;
	Аптека = Справочники.МестаХранения.НайтиПоКоду(КодАптеки);	
	
	МЗ = РегистрыСведений.Самоинкассации.СоздатьМенеджерЗаписи();
	МЗ.Дата				= CashOnTerminal.DatetimeTransaction;
	МЗ.КодАптеки		= КодАптеки;
	МЗ.Аптека			= Аптека;
	МЗ.СотрудникID		= CashOnTerminal.CourierId;
	МЗ.СотрудникФИО		= CashOnTerminal.CourierName;
	МЗ.НомерТерминала	= CashOnTerminal.TerminalId;
	МЗ.НомерЧека		= CashOnTerminal.Receipt_Number;
	МЗ.НомерСессии		= CashOnTerminal.Transaction;
	МЗ.Сумма			= CashOnTerminal.Amount;
	МЗ.Комиссия			= CashOnTerminal.ComissAmount;
	МЗ.Валюта			= Валюта;
	
	Попытка
		МЗ.Записать();	
		Возврат "";
	Исключение
		Возврат "Ошибка записи: " + ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции


////////////////////////////////////////////////////////////
// ОТЧЕТЫ

Функция get_missed_sales_list(date)
	
	Если ЗначениеЗаполнено(date) Тогда
		ДатаНачала = date;
	Иначе
		ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	ДатаОкончания = КонецДня(ДатаНачала);
	
	ДатаНачала_Продажи = ДобавитьМесяц(ДатаНачала, -1);
	ДатаОкончания_Продажи = КонецДня(ДатаНачала - 24*60*60);
	
	Дельта = 60; //сек
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЗ_СменаККМ.СкладКод КАК СкладКод,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(УЗ_СменаККМ.ДатаОткрытия, ДЕНЬ, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), &ДатаНачала, ДЕНЬ) * -1)) КАК ВремяОткрытия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УЗ_СменаККМ.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(УЗ_СменаККМ.ДатаЗакрытия, ДЕНЬ, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), &ДатаНачала, ДЕНЬ) * -1)
	|		КОНЕЦ) КАК ВремяЗакрытия
	|ПОМЕСТИТЬ втСмены
	|ИЗ
	|	Документ.УЗ_СменаККМ КАК УЗ_СменаККМ
	|ГДЕ
	|	УЗ_СменаККМ.ДатаОткрытия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_СменаККМ.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РежимыРаботыАптек.Аптека.Код КАК КодАптеки,
	|	РежимыРаботыАптекСостав.ВремяНачала КАК ВремяОткрытияПлан,
	|	РежимыРаботыАптекСостав.ВремяОкончания КАК ВремяЗакрытияПлан,
	|	втСмены.ВремяОткрытия КАК ВремяОткрытияФакт,
	|	втСмены.ВремяЗакрытия КАК ВремяЗакрытияФакт,
	|	ЧАС(РежимыРаботыАптекСостав.ВремяНачала) КАК ВремяОткрытияПлан_Час,
	|	ЧАС(втСмены.ВремяОткрытия) КАК ВремяОткрытияФакт_Час,
	|	ЧАС(РежимыРаботыАптекСостав.ВремяОкончания) КАК ВремяЗакрытияПлан_Час,
	|	ЧАС(втСмены.ВремяЗакрытия) КАК ВремяЗакрытияФакт_Час,
	|	РАЗНОСТЬДАТ(РежимыРаботыАптекСостав.ВремяНачала, втСмены.ВремяОткрытия, СЕКУНДА) КАК ОтклонениеОтВремениОткрытия,
	|	ВЫБОР
	|		КОГДА втСмены.ВремяЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(втСмены.ВремяЗакрытия, РежимыРаботыАптекСостав.ВремяОкончания, СЕКУНДА)
	|	КОНЕЦ КАК ОтклонениеОтВремениЗакрытия
	|ПОМЕСТИТЬ втРежимы
	|ИЗ
	|	(ВЫБРАТЬ
	|		РежимыРаботыАптекСрезПоследних.Аптека КАК Аптека,
	|		РежимыРаботыАптекСрезПоследних.РежимРаботы КАК РежимРаботы
	|	ИЗ
	|		РегистрСведений.РежимыРаботыАптек.СрезПоследних КАК РежимыРаботыАптекСрезПоследних) КАК РежимыРаботыАптек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РежимыРаботыАптек.Состав КАК РежимыРаботыАптекСостав
	|		ПО РежимыРаботыАптек.РежимРаботы = РежимыРаботыАптекСостав.Ссылка
	|			И (РежимыРаботыАптекСостав.ДеньНедели = &ДеньНедели)
	|			И (РежимыРаботыАптекСостав.Выходной = ЛОЖЬ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСмены КАК втСмены
	|		ПО РежимыРаботыАптек.Аптека.Код = втСмены.СкладКод
	|ГДЕ
	|	РежимыРаботыАптек.РежимРаботы.Код <> ""000000001""
	|	И (РАЗНОСТЬДАТ(РежимыРаботыАптекСостав.ВремяНачала, втСмены.ВремяОткрытия, СЕКУНДА) >= &Дельта
	|			ИЛИ ВЫБОР
	|				КОГДА втСмены.ВремяЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА 0
	|				ИНАЧЕ РАЗНОСТЬДАТ(втСмены.ВремяЗакрытия, РежимыРаботыАптекСостав.ВремяОкончания, СЕКУНДА)
	|			КОНЕЦ >= &Дельта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЗ_ПочасоваяВыручка.СкладКод КАК СкладКод,
	|	УЗ_ПочасоваяВыручка.Час КАК Час,
	|	СУММА(УЗ_ПочасоваяВыручка.СуммаВыручки) КАК СуммаВыручки
	|ПОМЕСТИТЬ втПочасоваяВыручка_Откр
	|ИЗ
	|	РегистрСведений.УЗ_ПочасоваяВыручка КАК УЗ_ПочасоваяВыручка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРежимы КАК втРежимы
	|		ПО УЗ_ПочасоваяВыручка.СкладКод = втРежимы.КодАптеки
	|			И (ЧАС(УЗ_ПочасоваяВыручка.Час) МЕЖДУ втРежимы.ВремяОткрытияПлан_Час И втРежимы.ВремяОткрытияФакт_Час)
	|ГДЕ
	|	УЗ_ПочасоваяВыручка.Час МЕЖДУ &ДатаНачала_Продажи И &ДатаОкончания_Продажи
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПочасоваяВыручка.Час,
	|	УЗ_ПочасоваяВыручка.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПочасоваяВыручка_Откр.СкладКод КАК СкладКод,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(втПочасоваяВыручка_Откр.СуммаВыручки) КАК ЧИСЛО(15, 2)) КАК СуммаВыручки
	|ПОМЕСТИТЬ втПочасоваяВыручка_Средняя_Откр
	|ИЗ
	|	втПочасоваяВыручка_Откр КАК втПочасоваяВыручка_Откр
	|
	|СГРУППИРОВАТЬ ПО
	|	втПочасоваяВыручка_Откр.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПочасоваяВыручка_Откр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЗ_ПочасоваяВыручка.СкладКод КАК СкладКод,
	|	УЗ_ПочасоваяВыручка.Час КАК Час,
	|	СУММА(УЗ_ПочасоваяВыручка.СуммаВыручки) КАК СуммаВыручки
	|ПОМЕСТИТЬ втПочасоваяВыручка_Закр
	|ИЗ
	|	РегистрСведений.УЗ_ПочасоваяВыручка КАК УЗ_ПочасоваяВыручка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРежимы КАК втРежимы
	|		ПО УЗ_ПочасоваяВыручка.СкладКод = втРежимы.КодАптеки
	|			И (ЧАС(УЗ_ПочасоваяВыручка.Час) МЕЖДУ втРежимы.ВремяЗакрытияФакт_Час И втРежимы.ВремяЗакрытияПлан_Час)
	|ГДЕ
	|	УЗ_ПочасоваяВыручка.Час МЕЖДУ &ДатаНачала_Продажи И &ДатаОкончания_Продажи
	|
	|СГРУППИРОВАТЬ ПО
	|	УЗ_ПочасоваяВыручка.Час,
	|	УЗ_ПочасоваяВыручка.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПочасоваяВыручка_Закр.СкладКод КАК СкладКод,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(втПочасоваяВыручка_Закр.СуммаВыручки) КАК ЧИСЛО(15, 2)) КАК СуммаВыручки
	|ПОМЕСТИТЬ втПочасоваяВыручка_Средняя_Закр
	|ИЗ
	|	втПочасоваяВыручка_Закр КАК втПочасоваяВыручка_Закр
	|
	|СГРУППИРОВАТЬ ПО
	|	втПочасоваяВыручка_Закр.СкладКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПочасоваяВыручка_Закр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРежимы.КодАптеки КАК КодАптеки,
	|	втРежимы.ОтклонениеОтВремениОткрытия КАК ОтклонениеОтВремениОткрытия,
	|	втРежимы.ОтклонениеОтВремениЗакрытия КАК ОтклонениеОтВремениЗакрытия,
	|	ЕСТЬNULL(втПочасоваяВыручка_Средняя_Откр.СуммаВыручки, 0) КАК СредняяСуммаВыручки_Откр,
	|	ЕСТЬNULL(втПочасоваяВыручка_Средняя_Закр.СуммаВыручки, 0) КАК СредняяСуммаВыручки_Закр
	|ИЗ
	|	втРежимы КАК втРежимы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПочасоваяВыручка_Средняя_Откр КАК втПочасоваяВыручка_Средняя_Откр
	|		ПО втРежимы.КодАптеки = втПочасоваяВыручка_Средняя_Откр.СкладКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПочасоваяВыручка_Средняя_Закр КАК втПочасоваяВыручка_Средняя_Закр
	|		ПО втРежимы.КодАптеки = втПочасоваяВыручка_Средняя_Закр.СкладКод";
	
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	Запрос.УстановитьПараметр("ДеньНедели",		ДеньНедели(ДатаНачала));
	Запрос.УстановитьПараметр("Дельта",			Дельта);	
	Запрос.УстановитьПараметр("ДатаНачала_Продажи",		ДатаНачала_Продажи);
	Запрос.УстановитьПараметр("ДатаОкончания_Продажи",	ДатаОкончания_Продажи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Тип_ТаблицаВозврата			= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "missed_sales_list");
	Тип_СтрокаТаблицыВозврата	= ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "missed_sales_list_string");

	ТаблицаВозврата = ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ОтклонениеОтВремениОткрытия = Выборка.ОтклонениеОтВремениОткрытия;
		Если ОтклонениеОтВремениОткрытия < Дельта Тогда
			dev_begin = 0;
			СуммаНедополученнойВыручки_Откр = 0;
		Иначе
			ОтклонениеОтВремениОткрытияМин = Цел(ОтклонениеОтВремениОткрытия/60);
			dev_begin = ОтклонениеОтВремениОткрытияМин;
			СуммаНедополученнойВыручки_Откр = Окр(Выборка.СредняяСуммаВыручки_Откр/60*ОтклонениеОтВремениОткрытияМин, 2);
		КонецЕсли;
		
		ОтклонениеОтВремениЗакрытия = Выборка.ОтклонениеОтВремениЗакрытия; 
		Если ОтклонениеОтВремениЗакрытия < Дельта Тогда
			dev_end = 0;
			СуммаНедополученнойВыручки_Закр = 0;
		Иначе
			ОтклонениеОтВремениЗакрытияМин = Цел(ОтклонениеОтВремениЗакрытия/60);
			dev_end = ОтклонениеОтВремениЗакрытияМин;
			СуммаНедополученнойВыручки_Закр = Окр(Выборка.СредняяСуммаВыручки_Закр/60*ОтклонениеОтВремениЗакрытияМин, 2);
		КонецЕсли;
		
		sum_missed_sales = СуммаНедополученнойВыручки_Откр + СуммаНедополученнойВыручки_Закр;
		
		
		СтрокаВозврата = ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.apt_code		= Выборка.КодАптеки;
		СтрокаВозврата.dev_begin	= dev_begin;
		СтрокаВозврата.dev_end		= dev_end;		
		СтрокаВозврата.sum_missed_sales	= sum_missed_sales;
		
		ТаблицаВозврата.missed_sales_list_string.Добавить(СтрокаВозврата);
		
	КонецЦикла;
	
	Возврат ТаблицаВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЙ ЗАПРОС

Функция Universal_Query_Function__TZ_Result(IncomingData)

    // IncomingData XDTO-Структура
    //       |
    //       +------ Запрос (Текст запроса)
    //       |
    //       +------ ПараметрыЗапроса (структура)
    //                   |
    //                   +---- Имя,Значение
    //--------------------------------------------------// GtG // 01.06.2015 17:58:13
    
    ВхСтруктура=СериализаторXDTO.ПрочитатьXDTO(IncomingData);
    
    
    Запрос=Новый Запрос();
    
    Запрос.Текст=ВхСтруктура.Запрос;
    
    Если ВхСтруктура.Свойство("ПараметрыЗапроса")=Истина ТОгда
        //---------------<Для вызова из 1С>---------------------------// GtG // 11.08.2015 15:47:47 
        Для Каждого Парам Из ВхСтруктура.ПараметрыЗапроса Цикл
            Запрос.УстановитьПараметр(Парам.Ключ,Парам.Значение);
        КонецЦикла;    
    Иначе
        //---------------<Для вызова с сайтов, IncomingData - плоская структура>---------------------------// GtG // 11.08.2015 15:48:12 
        // параметры типа Парам_НазваниеПараметра1
        //                Парам_НазваниеПараметра2
        
        // IncomingData XDTO-Структура
        //       |
        //       +------ Запрос        "Текст запроса"
        //       |
        //       +------ Парам_НазваниеПараметра1     "значение параметра 1"
        //       |
        //       +------ Парам_НазваниеПараметра2  "значение параметра 2"
        //--------------------------------------------------// GtG // 01.06.2015 17:58:13
        
        Для Каждого Парам Из ВхСтруктура Цикл
            
            Если Найти(Парам.Ключ,"Парам_")<>0 Тогда
                Запрос.УстановитьПараметр(СтрЗаменить(Парам.Ключ,"Парам_",""),Парам.Значение);
            КонецЕсли;    
        КонецЦикла;    
        
    КонецЕсли;
    
    ТЗ=Запрос.Выполнить().Выгрузить();
    
    
    ХДТО_ТЗ=СериализаторXDTO.ЗаписатьXDTO(ТЗ);
    
    Возврат ХДТО_ТЗ;
	
КонецФункции

Функция Universal_Query_Function__ArrayOfTZ_Result(IncomingData)
    
    // IncomingData XDTO-Структура
    //       |
    //       +------ Запрос (Текст запроса, который возвращает пакетный результат)
    //       |
    //       +------ ПараметрыЗапроса (структура)
    //                   |
    //                   +---- Имя,Значение
    //--------------------------------------------------// GtG // 01.06.2015 17:58:13
    
    ВхСтруктура=СериализаторXDTO.ПрочитатьXDTO(IncomingData);
    
    
    Запрос=Новый Запрос();
    
    Запрос.Текст=ВхСтруктура.Запрос;
    
    Если ВхСтруктура.Свойство("ПараметрыЗапроса")=Истина ТОгда
        //---------------<Для вызова из 1С>---------------------------// GtG // 11.08.2015 15:47:47 
        Для Каждого Парам Из ВхСтруктура.ПараметрыЗапроса Цикл
            Запрос.УстановитьПараметр(Парам.Ключ,Парам.Значение);
        КонецЦикла;    
    Иначе
        //---------------<Для вызова с сайтов, IncomingData - плоская структура>---------------------------// GtG // 11.08.2015 15:48:12 
        // параметры типа Парам_НазваниеПараметра1
        //                Парам_НазваниеПараметра2
        
        // IncomingData XDTO-Структура
        //       |
        //       +------ Запрос (Текст запроса, который возвращает пакетный результат)

        //       |
        //       +------ Парам_НазваниеПараметра1     "значение параметра 1"
        //       |
        //       +------ Парам_НазваниеПараметра2  "значение параметра 2"
        //--------------------------------------------------// GtG // 01.06.2015 17:58:13
        
        Для Каждого Парам Из ВхСтруктура Цикл
            
            Если Найти(Парам.Ключ,"Парам_")<>0 Тогда
                Запрос.УстановитьПараметр(СтрЗаменить(Парам.Ключ,"Парам_",""),Парам.Значение);
            КонецЕсли;    
        КонецЦикла;    
        
    КонецЕсли;
    
    
    МассивРезультатов=Запрос.ВыполнитьПакет(); // массив результатов запроса.
    
    МассивДляХДТО=Новый Массив;
    
	Для Каждого Рез из МассивРезультатов Цикл
		Если Рез=Неопределено ТОгда   // пустой результат, при удалении временной таблицы
			РезТЗ=Новый ТаблицаЗначений; // пустая
		Иначе
			РезТЗ=Рез.Выгрузить();
		КонецЕсли;
		МассивДляХДТО.Добавить(РезТЗ);
	КонецЦикла;    
	
    
    ХДТО_Массив_ТЗ=СериализаторXDTO.ЗаписатьXDTO(МассивДляХДТО);
    
    Возврат ХДТО_Массив_ТЗ;
    
КонецФункции


////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЙ ОТЧЕТ

Функция site_pc_rep_getparams(rep_name, user_type_id)
	
	
	Построитель=Новый ПостроительОтчета;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	WS_Настройки_ОтчетовТекстыЗапросов.ТекстЗапроса
	                    |ИЗ
	                    |	Справочник.WS_Настройки_Отчетов.ТекстыЗапросов КАК WS_Настройки_ОтчетовТекстыЗапросов
	                    |ГДЕ
	                    |	WS_Настройки_ОтчетовТекстыЗапросов.Ссылка.Наименование = &Наименование
	                    |	И WS_Настройки_ОтчетовТекстыЗапросов.user_type_id = &user_type_id");
						
	Запрос.УстановитьПараметр("user_type_id",user_type_id);
	Запрос.УстановитьПараметр("Наименование","site_pc_rep_sales");
	
	Рез=Запрос.Выполнить().Выгрузить();
	
		
	Построитель.Текст=Рез.Получить(0).ТекстЗапроса;

	Тип_ТаблицаВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","rep_params");
	Тип_СтрокаТаблицыВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","rep_parameter");
	 
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);

	
	Для Каждого ДП из Построитель.ДоступныеПоля Цикл
		Если ДП.Отбор=Ложь Тогда
			Продолжить;
		КонецЕсли;	
		
		ТипЗначения="";

		Если СокрЛП(дп.ТипЗначения)="Number" Тогда 
			ТипЗначения="N";
		ИначеЕсли СокрЛП(дп.ТипЗначения)="String" Тогда 
			ТипЗначения="S";
		ИначеЕсли СокрЛП(дп.ТипЗначения)="Date" Тогда 
			ТипЗначения="D";
		ИначеЕсли СокрЛП(дп.ТипЗначения)="Boolean" Тогда 
			ТипЗначения="B";
		Иначе 
			ТипЗначения=СокрЛП(дп.ТипЗначения);	
		конецесли;
		
			
		
		
		СтрокаВозврата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);

		СтрокаВозврата.Name=ДП.Имя;
		СтрокаВозврата.Type=ТипЗначения;
		
		ТаблицаВозврата.rep_parameter.Добавить(СтрокаВозврата);
		
	КонецЦикла;

	
	Возврат ТаблицаВозврата;
	
	
КонецФункции

Функция site_pc_ref_getlist(refname)
	
	
	
	
	Если Метаданные.Справочники.Найти(refname)<>неопределено Тогда
		
			
		
		
		
		Запрос=Новый Запрос();
		
		Запрос.Текст="ВЫБРАТЬ
		|	ИМЯСПРАВОЧНИКА.Код,
		|	ИМЯСПРАВОЧНИКА.Наименование КАК Наименование,
		|   isnull(ИМЯСПРАВОЧНИКА.Родитель.Код,0) как ПапкаКод
		|ИЗ
		|	Справочник.КАКОЙТОТАМСПРАВОЧНИК КАК ИМЯСПРАВОЧНИКА   
		|    ГДЕКАКОЕТОУСЛОВИЕ    
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"КАКОЙТОТАМСПРАВОЧНИК",СокрЛП(refname));
		
		Если СокрЛП(refname)= "АССОРТИМЕНТНЫЙ_ПЛАН" Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ГДЕКАКОЕТОУСЛОВИЕ"," ГДЕ ИМЯСПРАВОЧНИКА.УчаствуетВАП = ИСТИНА ");
		Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ГДЕКАКОЕТОУСЛОВИЕ"," ");
		КонецЕсли;	 
		
		//---------------<Ебанутые объекты БД>---------------------------// GtG // 13.08.2013 20:41:52
		Если  refname="УсловияПроведенияАкции" Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,".Наименование",".Условие");
		КонецЕсли;
		
		Если Метаданные.Справочники[refname].Иерархический=Ложь ТОгда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИМЯСПРАВОЧНИКА.Родитель.Код,0","0,0");
		КонецЕсли;
		
		
		
		
		
		
	ИначеЕсли Метаданные.Перечисления.Найти(refname)<> Неопределено Тогда
		 Запрос=Новый Запрос();
		
		Запрос.Текст="ВЫБРАТЬ
		             |	КАКОЙТОТАМСПРАВОЧНИК.Порядок КАК Код,
		             |	КАКОЙТОТАМСПРАВОЧНИК.Ссылка как Наименование, """" как ПапкаКод
		             |ИЗ
		             |	Перечисление.КАКОЙТОТАМСПРАВОЧНИК КАК КАКОЙТОТАМСПРАВОЧНИК";
					 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"КАКОЙТОТАМСПРАВОЧНИК",СокрЛП(refname));
		
	КонецЕсли;
	
	
	Рез=Запрос.Выполнить();
	
	Тип_ТаблицаВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","reflist");
	Тип_СтрокаТаблицыВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","reflist_string");
	
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Выб=Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		СтрокаВозврата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.code=Число(Выб.Код);//" type="xs:integer"/>
		СтрокаВозврата.name=СокрЛП(Выб.Наименование);//" type="xs:string"/>
		СтрокаВозврата.extra_info=СокрЛП(Выб.ПапкаКод);
		
		ТаблицаВозврата.string.Добавить(СтрокаВозврата);
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	
КонецФункции

Функция site_pc_ref_ap_getfilteredlist(term)
	
	ЛогВходящихПараметров="";

	
	МассивИнтервальныхВидовСравнения=Новый Массив;
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.Интервал);
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяГраницы);
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяНачало);
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяОкончание);
	
	
	
	

	Построитель=новый построительОтчета;
	Построитель.Текст= "ВЫБРАТЬ
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование
	                   |ИЗ
	                   |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	                   |{ГДЕ
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.Код КАК ТоварБрендКод,
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория.Код КАК ТоварПодкатегорияКод,
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаФТГ.Код КАК ТоварГруппаФТГКод,
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.СпецПроект.Код КАК ТоварСпецПроектКод,
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.Разбивается КАК ТоварРазбивается,
	                   |	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Код КАК ПартияПроизводительКод}"; // Сгенерировано в GtG's Консоль запросов. 16.08.2013 14:21:46
	
	Построитель.Отбор.Сбросить();
	
	ЭлемОтбора=Построитель.Отбор.Добавить(term.left_part);
	ЭлемОтбора.ВидСравнения=ВидСравнения[(СокрЛП(term.comp_type))];
	ЭлемОтбора.Использование=Истина;
	
	ТипЗначенияПравойЧасти=СокрЛП(term.right_part_val_type);
	
	ЛогВходящихПараметров=ЛогВходящихПараметров+"----------Произвольные параметры ---------------"+Символы.ПС;
		
		Если  term.right_part.string_value.Количество()>1 Тогда
			
			Если  МассивИнтервальныхВидовСравнения.Найти(ЭлемОтбора.ВидСравнения)<>Неопределено Тогда
				ЭлемОтбора.ЗначениеС=ПриведениеКТипу(term.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти );
				ЭлемОтбора.ЗначениеПо=ПриведениеКТипу(term.right_part.string_value.Получить(1),ТипЗначенияПравойЧасти );
			Иначе	
				СписокЗначенийУсловия=Новый СписокЗначений;
				
				Для Каждого СОП из term.right_part.string_value Цикл
					СписокЗначенийУсловия.Добавить(ПриведениеКТипу(СОП,ТипЗначенияПравойЧасти ));
				КонецЦикла;	
				
				ЭлемОтбора.Значение=СписокЗначенийУсловия;
			КонецЕсли;
		Иначе
			ЭлемОтбора.Значение=ПриведениеКТипу(term.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти );
		КонецЕсли;

		ЛогВходящихПараметров=ЛогВходящихПараметров+СокрЛП(term.left_part)+"  "+ВидСравнения[(СокрЛП(term.comp_type))]+"  "+ПриведениеКТипу(term.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти )+" Тип:"+ТипЗначенияПравойЧасти+Символы.ПС;
		
		ЗаписьВЛог(ТекущаяДата() , "site_pc_ref_ap_getfilteredlist"  ,1,0,"Входящие параметры",ЛогВходящихПараметров);
		
		ЛогЗапроса=Новый Структура("Запрос,Параметры,Настройки",Построитель.текст,Построитель.Параметры,Построитель.ПолучитьНастройки(Истина, Истина, Истина, Истина, Истина));
		ТекстЛогЗапроса=ЗначениеВСтрокуВнутр(ЛогЗапроса);
		
		ЗаписьВЛог(ТекущаяДата() , "site_pc_ref_ap_getfilteredlist"  ,2,0,"Запрос и его параметры",ТекстЛогЗапроса);
		
	
		
	Построитель.Выполнить();	
	 Рез=Построитель.Результат;
	
	Тип_ТаблицаВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","reflist");
	Тип_СтрокаТаблицыВозврата=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","reflist_string");
	
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_ТаблицаВозврата);
	
	Выб=Рез.Выбрать();
	
	Пока Выб.Следующий() Цикл
		СтрокаВозврата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицыВозврата);
		СтрокаВозврата.code=Число(Выб.Код);//" type="xs:integer"/>
		СтрокаВозврата.name=СокрЛП(Выб.Наименование);//" type="xs:string"/>
		
		ТаблицаВозврата.string.Добавить(СтрокаВозврата);
	КонецЦикла;
	
	Возврат ТаблицаВозврата;	

	
	
КонецФункции

Функция site_pc_ref_getcount(refname)
	Запрос=Новый Запрос();

	
	Если Метаданные.Справочники.Найти(refname)<>неопределено Тогда
		Запрос.Текст="ВЫБРАТЬ
	             |	Count(ИМЯСПРАВОЧНИКА.ссылка) как колвоэлементов
	             |ИЗ
	             |	Справочник.КАКОЙТОТАМСПРАВОЧНИК КАК ИМЯСПРАВОЧНИКА
	             |";
	 	Запрос.Текст=СтрЗаменить(Запрос.Текст,"КАКОЙТОТАМСПРАВОЧНИК",СокрЛП(refname));

		
	ИначеЕсли Метаданные.Перечисления.Найти(refname)<> Неопределено Тогда
		Запрос.Текст="ВЫБРАТЬ
		             |	КОЛИЧЕСТВО(ИмяПеречисления.Ссылка) КАК колвоэлементов
		             |ИЗ
		             |	Перечисление.КАКОЕТОТАМПЕРЕЧИСЛЕНИЕ КАК ИмяПеречисления";
	 	
					 
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"КАКОЕТОТАМПЕРЕЧИСЛЕНИЕ",СокрЛП(refname));
		
	КонецЕсли;

	
	
	
	
	
		 
	 
	 Рез=Запрос.Выполнить();
	 
	 
	 Выб=Рез.Выбрать();
	 
	 Выб.Следующий();
		 
	 Возврат выб.колвоэлементов;	

 КонецФункции
 
Функция site_pc_rep_sales(query_terms)
	// Вставить содержимое обработчика.
	Построитель=Новый ПостроительОтчета;
	Построитель.Текст=ПолучитьТекстЗапросаДляОтчета("site_pc_rep_sales", query_terms.user_type_id);
	
	Построитель=ЗапонитьНастройкиПостроителяПо_query_terms(query_terms,Построитель);
	
	Построитель.Выполнить();
	
	Результат=Построитель.Результат;

	Возврат ВывестиОтчет(Результат);
		
КонецФункции

Функция site_pc_rep_rests(query_terms)
	Построитель=Новый ПостроительОтчета;
	Построитель.Текст=ПолучитьТекстЗапросаДляОтчета("site_pc_rep_rests", query_terms.user_type_id);
	
	Построитель=ЗапонитьНастройкиПостроителяПо_query_terms(query_terms,Построитель);

	Возврат "Иди на хуй";
КонецФункции

Функция site_pc_rep_salesshort(query_terms)
	Построитель=Новый ПостроительОтчета;
	Построитель.Текст=ПолучитьТекстЗапросаДляОтчета("site_pc_rep_salesshort", query_terms.user_type_id);
	
	Построитель=ЗапонитьНастройкиПостроителяПо_query_terms(query_terms,Построитель);

	Возврат "Иди на хуй";
КонецФункции

Функция site_pc_rep_restsandsales(query_terms)
	Построитель=Новый ПостроительОтчета;
	Построитель.Текст=ПолучитьТекстЗапросаДляОтчета("site_pc_rep_restsandsales", query_terms.user_type_id);
	
	Построитель=ЗапонитьНастройкиПостроителяПо_query_terms(query_terms,Построитель);

	Возврат "Иди на хуй";
КонецФункции


////////////////////////////////////////////////////////////
// ПРОЧИЕ

Функция hellow()
	Возврат "Вас приветствует корпоративный Web-сервис АВЕ!";
КонецФункции

Функция get_print_form(apt_code, doc_number, file_num, file_type, doc_type)
	
	//ТСО {25.03.2015 #0020; изм #0054}
	
	Если Не ЗначениеЗаполнено(СокрЛП(doc_number)) Тогда
		Возврат "-1 Не заполнен номер документа";
	КонецЕсли;
	
	Если doc_type = 1 Или ЗначениеЗаполнено(doc_type) = Ложь Тогда // мелкооптовая реализация на Ориолу
		
		Если file_num < 1 Или file_num > 5 Тогда
			Возврат "-1 Неизвестный тип формы: " + file_num;
		КонецЕсли;
		
		Если file_type <> 1 И file_type <> 2 Тогда
			Возврат "-1 Неизвестный тип файла: " + file_type;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СформированныеПечатныеФормы.ДанныеФормы
		|ИЗ
		|	РегистрСведений.СформированныеПечатныеФормы КАК СформированныеПечатныеФормы
		|ГДЕ
		|	СформированныеПечатныеФормы.Документ.НомДокАптеки = &НомДокАптеки
		|	И СформированныеПечатныеФормы.Документ.Склад = &Склад
		|	И СформированныеПечатныеФормы.ТипФормы = &ТипФормы
		|	И СформированныеПечатныеФормы.ТипФайла = &ТипФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	СформированныеПечатныеФормы.Документ.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("НомДокАптеки",	doc_number);
		Запрос.УстановитьПараметр("Склад",			Справочники.МестаХранения.НайтиПоКоду(apt_code));
		Запрос.УстановитьПараметр("ТипФормы",		file_num);
		Запрос.УстановитьПараметр("ТипФайла",		file_type);
		
		
	ИначеЕсли doc_type = 2 Тогда // распоряжение на перемещение
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СформированныеПечатныеФормы.ДанныеФормы
		|ИЗ
		|	РегистрСведений.СформированныеПечатныеФормы КАК СформированныеПечатныеФормы
		|ГДЕ
		|	СформированныеПечатныеФормы.Документ ССЫЛКА Документ.УЗ_РаспоряжениеНаПеремещение
		|	И ВЫРАЗИТЬ(СформированныеПечатныеФормы.Документ КАК Документ.УЗ_РаспоряжениеНаПеремещение).Номер = &НомерДокумента";
		
		Запрос.УстановитьПараметр("НомерДокумента",	doc_number);
		
	Иначе
		
		Возврат "-1 Неизвестный тип документа: " + doc_type;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "-1 Не найдена сохраненная форма";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ДанныеФормы;
	КонецЦикла; 		
	
КонецФункции


////////////////////////////////////////////////////////////
// ОБЩИЕ

Процедура ЗаписьВЛог(Дата, WebФункция, ID, web_user_id, Данные, ОписаниеОшибки)
	
	МЗ = РегистрыСведений.ЛогWebСервиса.СоздатьМенеджерЗаписи();
	
	МЗ.Дата			= Дата;
	МЗ.WebФункция	= WebФункция;
	МЗ.ID			= ID ;
	МЗ.web_user_id	= web_user_id;
	
	МЗ.Прочитать();
	
	МЗ.Дата				= Дата;
	МЗ.WebФункция		= WebФункция;
	МЗ.ID				= ID;
	МЗ.web_user_id		= web_user_id;
	МЗ.Данные			= Данные;
	МЗ.ОписаниеОшибки	= ОписаниеОшибки;
	
	МЗ.Записать();	
	
КонецПроцедуры

Функция ПолучитьЛогПараметров(Параметры)
	
	ЛогПараметров = "";
	
	Для Каждого ТекПараметр Из Параметры Цикл
		
		Если ТипЗнч(ТекПараметр.Значение) = Тип("Строка") Тогда
			ТекЗначение = """" + ТекПараметр.Значение + """";
		Иначе
			ТекЗначение = Формат(ТекПараметр.Значение, "ЧДЦ=; ЧН=; ЧГ=0; ДЛФ=DT; БЛ=Ложь; БИ=Истина");
		КонецЕсли;			
		
		ЛогПараметров = ЛогПараметров + ТекПараметр.Ключ + " = " + ТекЗначение +  "; ";
		
	КонецЦикла;
	
	Возврат Сред(ЛогПараметров, 1, СтрДлина(ЛогПараметров)-2);
	
КонецФункции

Функция ПриведениеКТипу(Значение,ТипЗначения)
	   Если СокрЛП(ТипЗначения)="N" Тогда 
			Возврат  Число(Значение);
		ИначеЕсли СокрЛП(ТипЗначения)="S" Тогда 
			Возврат СокрЛП(Значение);
		ИначеЕсли СокрЛП(ТипЗначения)="D" Тогда 
			Возврат Дата(Значение);
		ИначеЕсли СокрЛП(ТипЗначения)="B" Тогда 
			Если Значение="0" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;	
		Иначе 
			Возврат Значение;	
		конецесли;
КонецФункции	 
 
Функция ЗапонитьНастройкиПостроителяПо_query_terms(query_terms,Построитель)
	
	ЛогВходящихПараметров="";
	
	        	
	МассивИнтервальныхВидовСравнения=Новый Массив;
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.Интервал);
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяГраницы);
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяНачало);
	МассивИнтервальныхВидовСравнения.Добавить(ВидСравнения.ИнтервалВключаяОкончание);
	
	Построитель.Параметры.Очистить();
	
	//---------------<Жесткие ограничения>---------------------------// GtG // 16.08.2013 13:57:37
	Построитель.Параметры.Вставить("user_type_id",query_terms.user_type_id);
	Построитель.Параметры.Вставить("interval_begin",НачалоДня(query_terms.interval_begin));
	Построитель.Параметры.Вставить("interval_end",КонецДня(query_terms.interval_end));
	Построитель.Параметры.Вставить("web_user_id",query_terms.web_user_id);
	
	Построитель.Параметры.Вставить("ИспользоватьОтборПоНЗ",Ложь);
	
	//---------------<Логгинг>---------------------------// GtG // 16.08.2013 19:59:00
	ЛогВходящихПараметров=ЛогВходящихПараметров+"user_type_id"+" = "+query_terms.user_type_id+Символы.ПС;
	ЛогВходящихПараметров=ЛогВходящихПараметров+"interval_begin"+" = "+query_terms.interval_begin+Символы.ПС;
	ЛогВходящихПараметров=ЛогВходящихПараметров+"interval_end"+" = "+query_terms.interval_end+Символы.ПС;
	ЛогВходящихПараметров=ЛогВходящихПараметров+"web_user_id"+" = "+query_terms.web_user_id+Символы.ПС;
	ЛогВходящихПараметров=ЛогВходящихПараметров+"----------Обязательные параметры ---------------"+Символы.ПС;

	//---------------<>---------------------------// GtG // 16.08.2013 19:59:04
	
	

	//---------------<Обязательные параметры построителя - параметры запроса>---------------------------// GtG // 16.08.2013 13:56:51
	Для Каждого ОП из query_terms.required_parameters Цикл
		
		
		//ЗаписьВЛог(ТекущаяДата() , "ЗапонитьНастройкиПостроителяПо_query_terms"  ,1 ,ОП.left_part ,"Что приходит? "+ТипЗнч(ОП.left_part));
		
		ТипЗначенияПравойЧасти=СокрЛП(ОП.right_part_val_type);		
		
		Если  ОП.right_part.string_value.Количество()>1 Тогда
			
			
				СписокЗначенийУсловия=Новый СписокЗначений;
				ЛогСтр="{";
				Для Каждого СОП из ОП.right_part.string_value Цикл
					СписокЗначенийУсловия.Добавить(ПриведениеКТипу(СОП,ТипЗначенияПравойЧасти ));
					ЛогСтр=ЛогСтр+ПриведениеКТипу(СОП,ТипЗначенияПравойЧасти )+",";
				КонецЦикла;	
				ЛогСтр=ЛогСтр+"}";
				ЛогСтр=СтрЗаменить(ЛогСтр,",}","}");
				
				
				Построитель.Параметры.Вставить(СокрЛП(ОП.left_part),СписокЗначенийУсловия);
			    ЛогВходящихПараметров=ЛогВходящихПараметров+СокрЛП(ОП.left_part)+"  "+ЛогСтр+" Тип:"+ТипЗначенияПравойЧасти+Символы.ПС;
		Иначе
			Построитель.Параметры.Вставить(СокрЛП(ОП.left_part),ПриведениеКТипу(ОП.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти ));
			ЛогВходящихПараметров=ЛогВходящихПараметров+СокрЛП(ОП.left_part)+"  "+ПриведениеКТипу(ОП.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти )+" Тип:"+ТипЗначенияПравойЧасти+Символы.ПС;
		КонецЕсли;
		
		
		
		
		
	КонецЦикла;	
	
	
	ЛогВходящихПараметров=ЛогВходящихПараметров+"----------Произвольные параметры ---------------"+Символы.ПС;
	//---------------<произвольные параметры построителя - элементы отбора>---------------------------// GtG // 16.08.2013 13:57:05	
	Для Каждого ПП из query_terms.query_term Цикл
		
		Если  Найти(ПП.left_part,"МатрицаНЗ")<>0 Тогда
			Построитель.Параметры.Вставить("ИспользоватьОтборПоНЗ",Истина);
		КонецЕсли;	
		
		ЭлемОтбора=Построитель.Отбор.Добавить(СокрЛП(ПП.left_part));
		ЭлемОтбора.Использование=истина;
		ЭлемОтбора.ВидСравнения=ВидСравнения[(СокрЛП(ПП.comp_type))];
		ТипЗначенияПравойЧасти=СокрЛП(ПП.right_part_val_type);
		
		Если  ПП.right_part.string_value.Количество()>1 Тогда
			
			Если  МассивИнтервальныхВидовСравнения.Найти(ЭлемОтбора.ВидСравнения)<>Неопределено Тогда
				ЭлемОтбора.ЗначениеС=ПриведениеКТипу(ПП.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти );
				ЭлемОтбора.ЗначениеПо=ПриведениеКТипу(ПП.right_part.string_value.Получить(1),ТипЗначенияПравойЧасти );;
			Иначе	
				СписокЗначенийУсловия=Новый СписокЗначений;
				Для Каждого СОП из ПП.right_part.string_value Цикл
					
					СписокЗначенийУсловия.Добавить(ПриведениеКТипу(СОП,ТипЗначенияПравойЧасти ));
				КонецЦикла;	
				ЭлемОтбора.Значение=СписокЗначенийУсловия;
			КонецЕсли;
		Иначе
			ЭлемОтбора.Значение=ПриведениеКТипу(ПП.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти );
		КонецЕсли;
		
		ЛогВходящихПараметров=ЛогВходящихПараметров+СокрЛП(ПП.left_part)+"  "+ВидСравнения[(СокрЛП(ПП.comp_type))]+"  "+ПриведениеКТипу(ПП.right_part.string_value.Получить(0),ТипЗначенияПравойЧасти )+" Тип:"+ТипЗначенияПравойЧасти+Символы.ПС;
		
	КонецЦикла;	                                                                                         
	
	//ЗаписьВЛог(ТекущаяДата() , "ЗапонитьНастройкиПостроителяПо_query_terms"  ,1,query_terms.web_user_id ,"Входящие параметры",ЛогВходящихПараметров);

	
	ЛогЗапроса=Новый Структура("Запрос,Параметры,Настройки",Построитель.текст,Построитель.Параметры,Построитель.ПолучитьНастройки(Истина, Истина, Истина, Истина, Истина));
	ТекстЛогЗапроса=ЗначениеВСтрокуВнутр(ЛогЗапроса);
	
	ЗаписьВЛог(ТекущаяДата() , "ЗапонитьНастройкиПостроителяПо_query_terms"  ,1,query_terms.web_user_id ,"Запрос и его параметры",ТекстЛогЗапроса);
	
	
	
	Возврат Построитель;  // с заполненными параметрами и отбором
	
	
КонецФункции	 
   
Функция ПолучитьТекстЗапросаДляОтчета(rep_name, user_type_id)
	
	
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	WS_Настройки_ОтчетовТекстыЗапросов.ТекстЗапроса
	                    |ИЗ
	                    |	Справочник.WS_Настройки_Отчетов.ТекстыЗапросов КАК WS_Настройки_ОтчетовТекстыЗапросов
	                    |ГДЕ
	                    |	WS_Настройки_ОтчетовТекстыЗапросов.Ссылка.Наименование = &Наименование
	                    |	И WS_Настройки_ОтчетовТекстыЗапросов.user_type_id = &user_type_id");
						
	Запрос.УстановитьПараметр("user_type_id",user_type_id);
	Запрос.УстановитьПараметр("Наименование",СокрЛП(rep_name));
	
	Рез=Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество()=0 Тогда
		Возврат "Отчет site_pc_rep_sales еще не настроен для пользователя с user_type_id = "+user_type_id;
	КонецЕсли;
	
	Возврат Рез.Получить(0).ТекстЗапроса;
КонецФункции	
  
Функция ВывестиОтчет(РезультатПостроителя)
	
	Тип_Отчет =ФабрикаXDTO.Тип("http://www.site_pc.avews.org","report");
	Тип_Таблица=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","rep_table");
	Тип_СтрокаТаблицы=ФабрикаXDTO.Тип("http://www.site_pc.avews.org","rep_string");
	
	

	Отчет=ФабрикаXDTO.Создать(Тип_Отчет);
	
	//---------------<ГУИД результата>---------------------------// GtG // 16.08.2013 16:10:48 
	Отчет.result_guid=сокрлп(Новый УникальныйИдентификатор);
	
	//---------------<имена колонок>---------------------------// GtG // 16.08.2013 16:11:00
	КолонкиОтчета=ФабрикаXDTO.Создать(Тип_СтрокаТаблицы);
	
	для Каждого Колонка из РезультатПостроителя.Колонки Цикл
		КолонкиОтчета.rep_cell_value.Добавить(Колонка.Имя);
	КонецЦикла;	
	
	Отчет.rep_columns=КолонкиОтчета;
	
	//---------------<таблица данных>---------------------------// GtG // 16.08.2013 16:11:09 
	ТаблицаВозврата=ФабрикаXDTO.Создать(Тип_Таблица);
	
	Выб=РезультатПостроителя.Выбрать();
	
	Пока Выб.Следующий() Цикл
		СтрокаВозврата=ФабрикаXDTO.Создать(Тип_СтрокаТаблицы);
		
		для Каждого Колонка из РезультатПостроителя.Колонки Цикл
			ЗначениеЯчейкиОтчета = Выб[Колонка.Имя];
			
			Если ЗначениеЯчейкиОтчета=Null Тогда
				ЗначениеЯчейкиОтчета="";
			КонецЕсли;	
			
		СтрокаВозврата.rep_cell_value.Добавить(ЗначениеЯчейкиОтчета);
		КонецЦикла;
				
		
		
		ТаблицаВозврата.rep_string.Добавить(СтрокаВозврата);
	КонецЦикла;

	Отчет.rep_table=ТаблицаВозврата;
	
	Возврат Отчет;
	
КонецФункции

Функция Get_info_Oriola()

                Запрос = Новый Запрос;
                ТекстЗапроса = 
                "ВЫБРАТЬ
                |	СпрНоменклатура.Код КАК Код,
                |	СпрНоменклатура.Наименование КАК Наименоние,
                |	СпрНоменклатура.АссортиментныйПлан.Код КАК АП_Код,
                |	СпрНоменклатура.АссортиментныйПлан.Наименование КАК АП_Наименование,
                |	СпрНоменклатура.Завод.Код КАК Завод_Код,
                |	СпрНоменклатура.Завод.Наименование КАК Завод_Наименование,
                |	СпрНоменклатура.Концерн.Код КАК Концерн_Код,
                |	СпрНоменклатура.Концерн.Наименование КАК Концерн_Наименование,
                |	СпрНоменклатура.ИШК КАК ИШК,
                |	СпрНоменклатура.Группа.Код КАК Группа_Код,
                |	СпрНоменклатура.Группа.Наименование КАК Группа_Наименование,
                |	СпрНоменклатура.Фармпорядок.Код КАК Фармпорядок_Код,
                |	СпрНоменклатура.Фармпорядок.Наименование КАК Фармпорядок_Наименование,
                |	СпрНоменклатура.ЗаводскаяУпаковкаКолвоШтук КАК ЗаводскаяУпаковкаКолвоШтук,
                |	СпрНоменклатура.ЗаводскаяУпаковкаШирина КАК ЗаводскаяУпаковкаШирина,
                |	СпрНоменклатура.ЗаводскаяУпаковкаВысота КАК ЗаводскаяУпаковкаВысота,
                |	СпрНоменклатура.ЗаводскаяУпаковкаДлина КАК ЗаводскаяУпаковкаДлина,
                |	СпрНоменклатура.ЗаводскаяУпаковкаВес КАК ЗаводскаяУпаковкаВес,
                |	СпрНоменклатура.МалыйСтандартКолвоШтук КАК МалыйСтандартКолвоШтук,
                |	СпрНоменклатура.МалыйСтандартШирина КАК МалыйСтандартШирина,
                |	СпрНоменклатура.МалыйСтандартВысота КАК МалыйСтандартВысота,
                |	СпрНоменклатура.МалыйСтандартДлина КАК МалыйСтандартДлина,
                |	СпрНоменклатура.МалыйСтандартВес КАК МалыйСтандартВес,
                |	СпрНоменклатура.ЕдиничнаяУпаковкаКолвоШтук КАК ЕдиничнаяУпаковкаКолвоШтук,
                |	СпрНоменклатура.ЕдиничнаяУпаковкаШирина КАК ЕдиничнаяУпаковкаШирина,
                |	СпрНоменклатура.ЕдиничнаяУпаковкаВысота КАК ЕдиничнаяУпаковкаВысота,
                |	СпрНоменклатура.ЕдиничнаяУпаковкаДлина КАК ЕдиничнаяУпаковкаДлина,
                |	СпрНоменклатура.ЕдиничнаяУпаковкаВес КАК ЕдиничнаяУпаковкаВес,
                |	СпрНоменклатура.ТемпературныйРежим.Код КАК ТемпературныйРежим_Код,
                |	СпрНоменклатура.ТемпературныйРежим.Наименование КАК ТемпературныйРежим_Наименование,
                |	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ВидУчета) КАК ВидУчета,
                |	СпрНоменклатура.ЖВНЛС КАК ЖВНЛС,
                |	СпрНоменклатура.СтавкаНДСПоУмолчанию.Код КАК СтавкаНДСПоУмолчанию_Код,
				// ==> 2019.01.11. Коробка. ЕНТ - 1139 
				// Передаем ставку (число) в поле СтавкаНДСПоУмолчанию_Наименование
                //|	СпрНоменклатура.СтавкаНДСПоУмолчанию.Наименование КАК СтавкаНДСПоУмолчанию_Наименование,  
                |	СпрНоменклатура.СтавкаНДСПоУмолчанию.Ставка КАК СтавкаНДСПоУмолчанию_Наименование,
				// <== 2019.01.11. Коробка. ЕНТ - 1139 
                |	СпрНоменклатура.МНН.Код КАК МНН_Код,
                |	СпрНоменклатура.МНН.Наименование КАК МНН_Наименование,
                |	СпрНоменклатура.Поставщик.КодДДП КАК Поставщик_КодДДП,
                |	СпрНоменклатура.КодОП КАК КодОП,
                |	СпрНоменклатура.ПККН КАК ПККН,
                |	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ТипСТМ) КАК ТипСТМ,
                |	СпрНоменклатура.Сезон КАК Сезон,
                |	СпрНоменклатура.УчаствуетВАП КАК УчаствуетВАП,
                |	СпрНоменклатура.Подкатегория.Код КАК Подкатегория_Код,
                |	СпрНоменклатура.Подкатегория.Наименование КАК Подкатегория_Наименование,
                |	СпрНоменклатура.ВремяЖизни КАК ВремяЖизни,
                |	ЦеныГосреестра.Период КАК ЦеныГосреестра_Период,
                |	ЦеныГосреестра.Цена КАК ЦеныГосреестра_Цена,
                |	СпрНоменклатура.Страна.Код КАК Страна_Код,
                |	СпрНоменклатура.Страна.Наименование КАК Страна_Наименование,
                |	СпрНоменклатура.СчетчикИзменений КАК СчетчикИзменений,
                |	СпрНоменклатура.Активный КАК Активный,
                |	СпрНоменклатура.ГоспитальныйАссортимент КАК ГоспитальныйАссортимент,
                |	СпрНоменклатура.КодНалоговойСтавки КАК КодНалоговойСтавки
                |ИЗ
                |	Справочник.ИндивидуальнаяПозиция КАК СпрНоменклатура
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныГосреестра КАК ЦеныГосреестра
                |		ПО (ЦеныГосреестра.Номенклатура = СпрНоменклатура.Ссылка)
                |ГДЕ
                |	СпрНоменклатура.ФлагПередачиВИСОриола = ИСТИНА
                |	И СпрНоменклатура.ПометкаУдаления = ЛОЖЬ";
                Запрос.Текст = ТекстЗапроса;
                
                РезультатЗапроса = Запрос.Выполнить();
                ТЗ = РезультатЗапроса.Выгрузить();
                ХДТООтвет = СериализаторXDTO.ЗаписатьXDTO(ТЗ);
                
                Возврат ХДТООтвет;

	
КонецФункции

Функция AnswerFromOriola(IncomingData)
	
	ТЗ_Полученная = СериализаторXDTO.ПрочитатьXDTO(IncomingData);
	
	СпрИП = Справочники.ИндивидуальнаяПозиция;
	Для каждого СтрокаТЗ Из ТЗ_Полученная Цикл
		
		НайденныйЭлемент = СпрИП.НайтиПоКоду(СтрокаТЗ.Код1С);
		Если НайденныйЭлемент <> Неопределено Тогда
			
			СпрОбъект = НайденныйЭлемент.ПолучитьОбъект();
			Если СпрОбъект.СчетчикИзменений = СтрокаТЗ.СчетчикИзменений  Тогда
			
				СпрОбъект.ФлагПередачиВИСОриола = Ложь;
			
			КонецЕсли;
			
			СпрОбъект.КодНалоговойСтавки = СтрокаТЗ.КодНалоговойСтавкиОриола;
			СпрОбъект.КодGDP			 = СтрокаТЗ.КодОриола;
			
			СпрОбъект.Записать();
			
			// Связка кода налоговой ставки с товаром 1с в справочнике "Связки товара с поставщиком"
			Если СтрокаТЗ.КодНалоговойСтавкиОриола <> 0 Тогда
			
				Поставщик = Справочники.Поставщики.НайтиПоКоду(582);
				Если Поставщик = Неопределено Тогда
					Возврат "Ок,Не найден поставщик"
				КонецЕсли; 

				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	СвязкиТовараСПоставщиком.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
				|ГДЕ
				|	СвязкиТовараСПоставщиком.Поставщик = &Поставщик
				|	И СвязкиТовараСПоставщиком.ТоварФирмы = &ТоварФирмы
				|	И СвязкиТовараСПоставщиком.КодТовараПоставщика = &КодТовараПоставщика";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("Поставщик", Поставщик);
				Запрос.УстановитьПараметр("ТоварФирмы",НайденныйЭлемент.АссортиментныйПлан);
				Запрос.УстановитьПараметр("КодТовараПоставщика", СтрЗаменить(Строка(СтрокаТЗ.КодНалоговойСтавкиОриола),Символы.НПП,""));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					// Такая связка уже есть, ничего не делаем
				Иначе	
					
					НовыйЭлементСпрСвязка = Справочники.СвязкиТовараСПоставщиком.СоздатьЭлемент();
					НовыйЭлементСпрСвязка.КодТовараПоставщика	= СтрЗаменить(Строка(СтрокаТЗ.КодНалоговойСтавкиОриола),Символы.НПП,"");
					НовыйЭлементСпрСвязка.Поставщик				= Поставщик;
					НовыйЭлементСпрСвязка.ТоварФирмы			= НайденныйЭлемент.АссортиментныйПлан;
					НовыйЭлементСпрСвязка.Записать();
					
				КонецЕсли; 
			
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат "Ок";

КонецФункции

Функция Get_relocOrder_info(number)
Запрос = Новый Запрос; 
Запрос.Текст = "ВЫБРАТЬ
               |	УЗ_РаспоряжениеНаПеремещение.ДокументПеремещения.Дата КАК ДокументПеремещенияДата,
               |	УЗ_РаспоряжениеНаПеремещение.ДокументПеремещения.ИДДокументаАптекиОтправитель КАК ДокументПеремещенияИДДокументаАптекиОтправитель
               |ИЗ
               |	Документ.УЗ_РаспоряжениеНаПеремещение КАК УЗ_РаспоряжениеНаПеремещение
               |ГДЕ
               |	УЗ_РаспоряжениеНаПеремещение.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", СокрЛП(number));
	Выборка = Запрос.Выполнить().Выбрать();

	Тип_СтруктураВозврата = ФабрикаXDTO.Тип("http://www.site_pc.avews.org", "relocOrder_info");
	СтруктураВозврата = ФабрикаXDTO.Создать(Тип_СтруктураВозврата);
	
	Если Выборка.Следующий() Тогда 		
		СтруктураВозврата.relocOrder_date	= Выборка.ДокументПеремещенияДата;
		СтруктураВозврата.relocOrder_guid	= Выборка.ДокументПеремещенияИДДокументаАптекиОтправитель;
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции
