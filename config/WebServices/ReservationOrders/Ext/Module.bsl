Процедура ЗаписьВЛог(Дата, WebФункция, ID, web_user_id, Данные, ОписаниеОшибки)
	
	МЗ = РегистрыСведений.ЛогWebСервиса.СоздатьМенеджерЗаписи();
	
	МЗ.Дата			= Дата;
	МЗ.WebФункция	= WebФункция;
	МЗ.ID			= ID ;
	МЗ.web_user_id	= web_user_id;
	
	МЗ.Прочитать();
	
	МЗ.Дата				= Дата;
	МЗ.WebФункция		= WebФункция;
	МЗ.ID				= ID;
	МЗ.web_user_id		= web_user_id;
	МЗ.Данные			= Данные;
	МЗ.ОписаниеОшибки	= ОписаниеОшибки;
	
	МЗ.Записать();	
	
КонецПроцедуры

Функция ПолучитьЛогПараметров(Параметры)
	
	ЛогПараметров = "";
	
	Для Каждого ТекПараметр Из Параметры Цикл
		
		Если ТипЗнч(ТекПараметр.Значение) = Тип("Строка") Тогда
			ТекЗначение = """" + ТекПараметр.Значение + """";
		Иначе
			ТекЗначение = Формат(ТекПараметр.Значение, "ЧДЦ=; ЧН=; ЧГ=0; ДЛФ=DT; БЛ=Ложь; БИ=Истина");
		КонецЕсли;			
		
		ЛогПараметров = ЛогПараметров + ТекПараметр.Ключ + " = " + ТекЗначение +  "; ";
		
	КонецЦикла;
	
	Возврат Сред(ЛогПараметров, 1, СтрДлина(ЛогПараметров)-2);
	
КонецФункции


Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ДобавитьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ДобавитьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("</" + Имя + ">");
	
КонецПроцедуры

Функция ВернутьТекстОтветаXML(КодОтвета,ТекстОшибки)
	
//<Message>
//	<ActionResponse>
//		<ResultCode>0</ResultCode> - Код возврата - 0 - все хорошо
//		<ErrorText>OK</ErrorText> - Необязательный комментарий
//		<Необязательная структура с необходимыми данными>
//	</ActionResponse>
//</Message>
	
	
	ЗаписьXML = Новый ТекстовыйДокумент;
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");	
	ЗаписьXML.ДобавитьСтроку("<Message>");
		ЗаписьXML.ДобавитьСтроку("<ActionResponse>");
			ЗаписатьЭлементXML(ЗаписьXML, "ResultCode",	Формат(КодОтвета,"ЧГ=0; ЧН=0") );
			ЗаписатьЭлементXML(ЗаписьXML, "ErrorText",	КорректировкаСпецСимволов(ТекстОшибки) );
		ЗаписьXML.ДобавитьСтроку("</ActionResponse>");
	ЗаписьXML.ДобавитьСтроку("</Message>");
	
КонецФункции

Функция ВернутьОтвет(КодОтвета,ТекстОшибки)
	
	
	Answer = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.366-hybris-reservation.org", "Answer"));
	ActionResponse = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.366-hybris-reservation.org", "ActionResponse"));
	
	ActionResponse.ResultCode = КодОтвета;
	ActionResponse.ErrorText = ТекстОшибки;
	
	Answer.Message = ActionResponse;
	
	Возврат Answer;	
	
	
КонецФункции

Функция ПолучитьСтатус(СтатусИсточника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	HYBRIS_СтатусыЗаказа.Статус366 КАК Статус366
	               |ИЗ
	               |	РегистрСведений.HYBRIS_СтатусыЗаказа КАК HYBRIS_СтатусыЗаказа
	               |ГДЕ
	               |	HYBRIS_СтатусыЗаказа.Идентификатор = &СтатусИсточника";
	Запрос.УстановитьПараметр("СтатусИсточника",СтатусИсточника);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Статус366;
	
КонецФункции

Функция ПолучитьСтатусHybris(Статус366)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	HYBRIS_СтатусыЗаказа.Идентификатор КАК СтатусИсточника
	               |ИЗ
	               |	РегистрСведений.HYBRIS_СтатусыЗаказа КАК HYBRIS_СтатусыЗаказа
	               |ГДЕ
	               |	HYBRIS_СтатусыЗаказа.Статус366 = &Статус366";
	Запрос.УстановитьПараметр("Статус366",Статус366);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СтатусИсточника;
	
КонецФункции


Функция ПолучитьЗаказПокупателя(Склад,Источник,НомерИнтернетЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК Заказ
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.ИсточникИнтернетЗаказа = &Источник
	               |	И ЗаказПокупателя.Склад = &Склад
	               |	И ЗаказПокупателя.НомерИнтернетЗаказа = &НомерИнтернетЗаказа";
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Источник",Источник);
	Запрос.УстановитьПараметр("НомерИнтернетЗаказа",НомерИнтернетЗаказа);


	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Заказ;
	
КонецФункции

Функция ПолучитьЗаказПокупателяПоНомеруЗаказа(НомерИнтернетЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК Заказ
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.НомерИнтернетЗаказа = &НомерИнтернетЗаказа";
	
	Запрос.УстановитьПараметр("НомерИнтернетЗаказа",НомерИнтернетЗаказа);

	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Заказ;
	
КонецФункции


Процедура ЗаполнитьСтрокуТела(ХМЛ,НоваяСтрока)
	
	Пока ХМЛ.Прочитать() Цикл
		Если ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "row" Тогда
			прервать;
		КонецЕсли;
		
		Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ХМЛ.Имя = "goods_ptr"			Тогда 	ХМЛ.Прочитать();	НоваяСтрока.КодПартии	= Число(ХМЛ.Значение);
			ИначеЕсли ХМЛ.Имя = "id_goods"	  	Тогда	ХМЛ.Прочитать();	НоваяСтрока.КодТовара	= Число(ХМЛ.Значение);
			ИначеЕсли ХМЛ.Имя = "goods_qty"	  	Тогда	ХМЛ.Прочитать();	НоваяСтрока.КоличествоНовый	= Число(ХМЛ.Значение);
			ИначеЕсли ХМЛ.Имя = "goods_prc"	  	Тогда	ХМЛ.Прочитать();	НоваяСтрока.ЦенаРозн	= Число(ХМЛ.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



Функция ПроверкаНаличияЗаказа(НомерЗаказа)
	
	
КонецФункции

Функция НайтиКлиента(Шапка)
	
	Если ЗначениеЗаполнено(Шапка.КлиентИнтернетЗаказа) Тогда
		
		КлиентИнтернетЗаказаСсылка = Справочники.КлиентыИнтернетЗаказов.НайтиПоНаименованию(Шапка.КлиентИнтернетЗаказа,Истина);
		Если НЕ ЗначениеЗаполнено(КлиентИнтернетЗаказаСсылка) Тогда
			
			КлиентИнтернетЗаказаСсылка = Справочники.КлиентыИнтернетЗаказов.СоздатьЭлемент();
			КлиентИнтернетЗаказаСсылка.Наименование = Шапка.КлиентИнтернетЗаказа;
			КлиентИнтернетЗаказаСсылка.Телефон = Шапка.Телефон;
			//КлиентИнтернетЗаказаСсылка.Емэйл = "";
			//КлиентИнтернетЗаказаСсылка.Адрес = "";
			КлиентИнтернетЗаказаСсылка.Записать();
		Иначе
			Если НЕ (КлиентИнтернетЗаказаСсылка.Телефон = Шапка.Телефон ) Тогда
				КлиентИнтернетЗаказаСсылка = Справочники.КлиентыИнтернетЗаказов.СоздатьЭлемент();
				КлиентИнтернетЗаказаСсылка.Наименование = Шапка.КлиентИнтернетЗаказа;
				КлиентИнтернетЗаказаСсылка.Телефон = Шапка.Телефон;
				КлиентИнтернетЗаказаСсылка.Емэйл = "";
				КлиентИнтернетЗаказаСсылка.Адрес = "";
				КлиентИнтернетЗаказаСсылка.Записать();
			КонецЕсли;					
		КонецЕсли;
		Шапка.КлиентИнтернетЗаказа = КлиентИнтернетЗаказаСсылка.Ссылка;
	Иначе
		Шапка.КлиентИнтернетЗаказа = Справочники.КлиентыИнтернетЗаказов.ПустаяСсылка();
	
	КонецЕсли;
	
		
КонецФункции

Функция CreateOrder(Id_loc, IncomingData)
	
	hdr = IncomingData.hdr;
	str = IncomingData.str;
	
	Шапка = Новый Структура();
	Шапка.Вставить("КлиентИнтернетЗаказа",	hdr.buyer_fullname);
	Шапка.Вставить("Телефон",				hdr.buyer_phone);
	Шапка.Вставить("СуммаАванса",			hdr.sum_prepay);
	Шапка.Вставить("КодИсточникаЗаказа",	hdr.id_source_order);
	Шапка.Вставить("Дата",					hdr.ddoc_source_order);
	Шапка.Вставить("НомерИнтернетЗаказа",	hdr.ndoc_source_order);
	Шапка.Вставить("Комментарий",			hdr.dsc_office);
	Шапка.Вставить("ТорговоеПриложение",	hdr.channel_order);
	

	Склад = Справочники.МестаХранения.НайтиПоКоду(id_loc);
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат ВернутьОтвет(500,"Аптеки с кодом "  + id_loc + " не существует в справочнике. Заказ не создан.");
	КонецЕсли;
	ИсточникЗаказа =  Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(Шапка.КодИсточникаЗаказа);
	Если НЕ ЗначениеЗаполнено(ИсточникЗаказа) Тогда
		Возврат ВернутьОтвет(500,"Источник заказа с кодом "  + Шапка.КодИсточникаЗаказа + " не найден в справочнике СайтыИнтернетЗаказов. Заказ не создан.");
	КонецЕсли;
	
	НайтиКлиента(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.НомерИнтернетЗаказа = &НомерИнтернетЗаказа
	               |	И ЗаказПокупателя.ИсточникИнтернетЗаказа = &ИсточникЗаказа";
				   
	Запрос.УстановитьПараметр("НомерИнтернетЗаказа",Шапка.НомерИнтернетЗаказа);
	Запрос.УстановитьПараметр("ИсточникЗаказа",ИсточникЗаказа);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ЗаказПокупателя = Документы.ЗаказПокупателя.СоздатьДокумент();
		ЗаказПокупателя.Дата				= ТекущаяДата();
		
		ЗаказПокупателя.ИсточникИнтернетЗаказа = ИсточникЗаказа;
		ЗаказПокупателя.КлиентИнтернетЗаказа = Шапка.КлиентИнтернетЗаказа;
		ЗаказПокупателя.НомерИнтернетЗаказа = Шапка.НомерИнтернетЗаказа;
		ЗаказПокупателя.СтатусДокАптеки		= Перечисления.СтатусДокАптеки.Неопределено;
		
		ЗаказПокупателя.Склад				= Склад;
		ЗаказПокупателя.Телефон				= Шапка.Телефон;
		ЗаказПокупателя.ТипЗаказа			= Перечисления.ИЗ_Типы.Бронирование;
		ЗаказПокупателя.ДатаОкончанияЖизниЗаказа = ТекущаяДата() + ЗаказПокупателя.ИсточникИнтернетЗаказа.ВремяЖизниЗаказа*60*60;
		ЗаказПокупателя.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.SHIPPED;
		ЗаказПокупателя.СтатусЗаказаЛокальный = Справочники.СтатусыЗаказаПокупателяЛокальные.НайтиПоКоду("CREATED");
		ЗаказПокупателя.ТорговоеПриложение	= Шапка.ТорговоеПриложение;
		ДокСсылка = ЗаказПокупателя.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			ДокСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку();
			ЗаказПокупателя.УстановитьСсылкуНового(ДокСсылка);
		КонецЕсли;
		ЗаказПокупателя.ИДДокументаАптеки	= XMLСтрока(ДокСсылка);
		ЗаказПокупателя.УстановитьНовыйНомер();
		
		КодБезКС = "22"+Формат(Число(ЗаказПокупателя.Номер), "ЧЦ=10; ЧВН=; ЧГ=0");

		ЗаказПокупателя.ШКЗаказа = ВычислитьКонтрольнуюСумму(КодБезКС);
		
		Для Каждого СтрокаЗаказа Из str Цикл		
			
			ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(СтрокаЗаказа.id_goods);
			Коэфф = ТоварСсылка.ЕдиницаПоУмолчанию.К;
			
			
			Стр = ЗаказПокупателя.Заявка.Добавить();		
			стр.КодТовара		= СтрокаЗаказа.id_goods;
			Стр.Товар			= ТоварСсылка;
			Стр.Количество		= СтрокаЗаказа.goods_qty;
			Стр.Коэфф			= Коэфф;
			Стр.КоэффициентРазбивки			= Коэфф;
			Стр.ЦенаРозн		= СтрокаЗаказа.goods_prc;
			Стр.КодПартии		= СтрокаЗаказа.goods_ptr;
		КонецЦикла;			
		
		
		
		Попытка
			ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			ЗаказПокупателя.ВыгрузитьВАптеку("NEW");
			Возврат ВернутьОтвет(0,"OK");
		Исключение
			Возврат ВернутьОтвет(500,ОписаниеОшибки());	
		КонецПопытки;
	Иначе
		Возврат ВернутьОтвет(500,"Уже существует заказ с номером : " + Шапка.НомерИнтернетЗаказа);
	КонецЕсли;
	
	
КонецФункции


Функция CreateOrderOld(Id_loc, OrderNumber, IncomingData)
	
		
	ХМЛ = Новый ЧтениеXML();
	Попытка
		ХМЛ.УстановитьСтроку(IncomingData);
	Исключение
		Возврат ВернутьТекстОтветаXML(500,ОписаниеОшибки());
	КонецПопытки;
	
	Шапка = Новый Структура();
	
	Тело = Новый ТаблицаЗначений;
	Тело.Колонки.Добавить("КодПартии",	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12,0,ДопустимыйЗнак.Неотрицательный)));
	Тело.Колонки.Добавить("КодТовара",	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12,0,ДопустимыйЗнак.Неотрицательный)));
	Тело.Колонки.Добавить("Количество",	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12,0,ДопустимыйЗнак.Неотрицательный)));
	Тело.Колонки.Добавить("ЦенаРозн",	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Неотрицательный)));
	
	
	Пока ХМЛ.Прочитать() Цикл
		
		Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			
			Если ХМЛ.Имя = "hdr" Тогда //заполняем шапку
				
				Пока ХМЛ.Прочитать() Цикл
					Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Если ХМЛ.Имя = "buyer_fullname" Тогда
							ХМЛ.Прочитать(); Шапка.Вставить("КлиентИнтернетЗаказа",СокрЛП(ХМЛ.Значение));
							
						ИначеЕсли ХМЛ.Имя = "buyer_phone" Тогда
							ХМЛ.Прочитать(); Шапка.Вставить("Телефон",СокрЛП(ХМЛ.Значение));							
							
						ИначеЕсли ХМЛ.Имя = "sum_prepay" Тогда
							ХМЛ.Прочитать(); Шапка.Вставить("СуммаАванса",Число(ХМЛ.Значение));
							
						ИначеЕсли ХМЛ.Имя = "id_source_order"  Тогда
							ХМЛ.Прочитать(); 
							Если ХМЛ.ИмеетЗначение Тогда 
								Шапка.Вставить("КодИсточникаЗаказа",Число(ХМЛ.Значение));
							КонецЕсли;
							
						ИначеЕсли ХМЛ.Имя = "ddoc_source_order" Тогда
							ХМЛ.Прочитать(); Шапка.Вставить("Дата",Дата(ХМЛ.Значение));	
							
						ИначеЕсли ХМЛ.Имя = "ndoc_source_order" Тогда
							ХМЛ.Прочитать(); Шапка.Вставить("НомерИнтернетЗаказа",СокрЛП(ХМЛ.Значение));		
							
						ИначеЕсли ХМЛ.Имя = "dsc_office"  Тогда
							ХМЛ.Прочитать(); 
							Если ХМЛ.ИмеетЗначение Тогда 
								Шапка.Вставить("Комментарий",СокрЛП(ХМЛ.Значение));								
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "hdr" Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ХМЛ.Имя = "str" Тогда  //заполняем таблич. часть
				
				Пока ХМЛ.Прочитать() Цикл
					Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента и ХМЛ.Имя = "row" Тогда
						НоваяСтрока = Тело.Добавить();
						ЗаполнитьСтрокуТела(ХМЛ,НоваяСтрока);
					КонецЕсли;
					
					Если ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "str" Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Склад = Справочники.МестаХранения.НайтиПоКоду(id_loc);
	ИсточникЗаказа =  Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(Шапка.КодИсточникаЗаказа);
	НайтиКлиента(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.НомерИнтернетЗаказа = &НомерИнтернетЗаказа
	               |	И ЗаказПокупателя.ИсточникИнтернетЗаказа = &ИсточникЗаказа";
				   
	Запрос.УстановитьПараметр("НомерИнтернетЗаказа",Шапка.НомерИнтернетЗаказа);
	Запрос.УстановитьПараметр("ИсточникЗаказа",ИсточникЗаказа);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ЗаказПокупателя = Документы.ЗаказПокупателя.СоздатьДокумент();
		ЗаказПокупателя.Дата				= ТекущаяДата();
		
		ЗаказПокупателя.ИсточникИнтернетЗаказа = ИсточникЗаказа;
		ЗаказПокупателя.КлиентИнтернетЗаказа = Шапка.КлиентИнтернетЗаказа;
		ЗаказПокупателя.НомерИнтернетЗаказа = Шапка.НомерИнтернетЗаказа;
		ЗаказПокупателя.СтатусДокАптеки		= Перечисления.СтатусДокАптеки.Неопределено;
		
		ЗаказПокупателя.Склад				= Склад;
		ЗаказПокупателя.Телефон				= Шапка.Телефон;
		ЗаказПокупателя.ТипЗаказа			= Перечисления.ИЗ_Типы.Бронирование;
		ЗаказПокупателя.ДатаОкончанияЖизниЗаказа = ТекущаяДата() + ЗаказПокупателя.ИсточникИнтернетЗаказа.ВремяЖизниЗаказа*60*60;
		ЗаказПокупателя.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.SHIPPED;
		ДокСсылка = ЗаказПокупателя.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			ДокСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку();
			ЗаказПокупателя.УстановитьСсылкуНового(ДокСсылка);
		КонецЕсли;
		ЗаказПокупателя.ИДДокументаАптеки	= XMLСтрока(ДокСсылка);
		ЗаказПокупателя.УстановитьНовыйНомер();
		
		КодБезКС = "22"+Формат(Число(ЗаказПокупателя.Номер), "ЧЦ=10; ЧВН=; ЧГ=0");

		ЗаказПокупателя.ШКЗаказа = ВычислитьКонтрольнуюСумму(КодБезКС);
		
		
		Для Каждого СтрокаЗаказа Из Тело Цикл			
			Стр = ЗаказПокупателя.Заявка.Добавить();		
			стр.КодТовара		= СтрокаЗаказа.КодТовара;
			Стр.Товар			= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(СтрокаЗаказа.КодТовара);
			Стр.Количество		= СтрокаЗаказа.Количество;
			Стр.Коэфф			= 1;
			Стр.КоэффициентРазбивки			= 1;
			Стр.ЦенаРозн		= СтрокаЗаказа.ЦенаРозн;
			Стр.КодПартии		= СтрокаЗаказа.КодПартии;
		КонецЦикла;			
		
		
		
		Попытка
			ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
			ЗаказПокупателя.ВыгрузитьВАптеку();
			Возврат ВернутьТекстОтветаXML(0,"OK");
		Исключение
			Возврат ВернутьТекстОтветаXML(500,ОписаниеОшибки());	
		КонецПопытки;
	Иначе
		Возврат ВернутьТекстОтветаXML(500,"Уже существует заказ с номером : " + Шапка.НомерИнтернетЗаказа);
	КонецЕсли;
	
	
КонецФункции


Функция SetStatusOrder(Id_loc, Status, id_source_order, ndoc_source_order)
	
	Склад = Справочники.МестаХранения.НайтиПоКоду(Id_loc);
	Источник = Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(id_source_order);
	Статус = ПолучитьСтатус(Status);
	СтатусЛокальный = Справочники.СтатусыЗаказаПокупателяЛокальные.НайтиПоКоду(СокрЛП(Status));
	Если Статус = Неопределено или НЕ ЗначениеЗаполнено(Статус) или  НЕ ЗначениеЗаполнено(СтатусЛокальный) Тогда
		Возврат ВернутьОтвет(500,"Нет соответсвия статусу " + Status + " в базе приемника");
	КонецЕсли;
	
	
	Заказ = ПолучитьЗаказПокупателя(Склад,Источник,ndoc_source_order);
	
	Если Заказ = Неопределено Тогда
		Возврат ВернутьОтвет(500,"Не найден заказ по номеру " + ndoc_source_order + " в базе приемника");
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.СтатусЗаказаПокупателя = Статус;
	ЗаказОбъект.СтатусЗаказаЛокальный  = СтатусЛокальный;
	ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ЗаказОбъект.ВыгрузитьВАптеку(Status);

	
	//Если  Status = "CANCELLED" Тогда
	//	ЗаказОбъект.ВыгрузитьВАптеку("4");
	//ИначеЕсли  Status = "READY" Тогда
	//	ЗаказОбъект.ВыгрузитьВАптеку();
	//КонецЕсли;
	
	Возврат ВернутьОтвет(0,"ОК");
	
	
КонецФункции


Функция GetOrder(Id_loc, ndoc_source_orders, id_source_order)
	
	
	Склад = Справочники.МестаХранения.НайтиПоКоду(Id_loc);
	Источник = Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(id_source_order);
	
	Заказ = ПолучитьЗаказПокупателя(Склад,Источник,СокрЛП(ndoc_source_orders));
	
	Если Заказ = Неопределено Тогда
		Возврат ВернутьОтвет(500,"Не найден заказ по номеру " + ndoc_source_orders + " в базе приемника");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Выборка.СтатусЗаказаПокупателя КАК СтатусЗаказаПокупателя,
	               |	Выборка.Заказ КАК Заказ,
	               |	Выборка.id_goods КАК id_goods,
	               |	Выборка.id_part КАК id_part,
	               |	СУММА(Выборка.qty_requested) КАК qty_requested,
	               |	МАКСИМУМ(Выборка.price_requested) КАК price_requested,
	               |	СУММА(Выборка.qty_reserved) КАК qty_reserved,
	               |	МАКСИМУМ(Выборка.price_reserved) КАК price_reserved,
				   |	МАКСИМУМ(Выборка.ExpiryDate) КАК ExpiryDate,
				   |	МАКСИМУМ(Выборка.ExpiryDateFact) КАК ExpiryDateFact
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Заявка.Ссылка.СтатусЗаказаПокупателя КАК СтатусЗаказаПокупателя,
	               |		Заявка.Ссылка КАК Заказ,
	               |		Заявка.КодТовара КАК id_goods,
	               |		Заявка.КодПартии КАК id_part,
	               |		Заявка.Количество КАК qty_requested,
	               |		Заявка.ЦенаРозн КАК price_requested,
	               |		0 КАК qty_reserved,
	               |		0 КАК price_reserved,
				   |		Заявка.СрокГодности КАК ExpiryDate,
				   |		ДАТАВРЕМЯ(1, 1, 1) КАК ExpiryDateFact
	               |	ИЗ
	               |		Документ.ЗаказПокупателя.Заявка КАК Заявка
	               |	ГДЕ
	               |		Заявка.Ссылка = &ЗаказСсылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Заказ.Ссылка.СтатусЗаказаПокупателя,
	               |		Заказ.Ссылка,
	               |		Заказ.КодТовара,
	               |		Заказ.КодПартии,
	               |		0,
	               |		0,
	               |		Заказ.Количество,
	               |		Заказ.ЦенаРозн,
				   |		ДАТАВРЕМЯ(1, 1, 1) КАК ExpiryDate,
				   |		Заказ.СрокГодностиФакт КАК ExpiryDateFact
	               |	ИЗ
	               |		Документ.ЗаказПокупателя.Заказ КАК Заказ
	               |	ГДЕ
	               |		Заказ.Ссылка = &ЗаказСсылка) КАК Выборка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выборка.СтатусЗаказаПокупателя,
	               |	Выборка.Заказ,
	               |	Выборка.id_goods,
	               |	Выборка.id_part";
	
	Запрос.УстановитьПараметр("ЗаказСсылка",Заказ);
	Рез = Запрос.Выполнить();
	
	Выборка = Рез.Выбрать();
	Выборка.Следующий();

	СтатусХайбрис = ПолучитьСтатусHybris(Выборка.СтатусЗаказаПокупателя);
		
	
	ReservationOrderOut = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.366-hybris-reservation.org", "ReservationOrderOut"));
	HdrOutList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.366-hybris-reservation.org", "HdrOutList"));
	

	HdrOutList.ndoc_source_order = ndoc_source_orders;
	HdrOutList.Status = СтатусХайбрис;
	
	ReservationOrderOut.HdrOut = HdrOutList;

	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.366-hybris-reservation.org", "StrOutList"));
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		ReservationOrderOut.StrOut.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	
	Возврат ReservationOrderOut;	
	
	
КонецФункции

// ==> ЕНТ-1284.Коробка. 2019.03.04. Курьерская доставка
Функция GetHandledEcomOrderInfo(
	OrderNumber,
	OrderStatus,
	SubStatus,
	PaymentMethod,
	PaymentStatus,
	PaymentSum,
	DeliveryAmount,
	DeliveryRate,
	DateEnd,
	DateShipp,
	Address,
	Timeslot)
	
	Параметры = Новый Структура("OrderNumber, OrderStatus, SubStatus, PaymentMethod,PaymentStatus,PaymentSum,DeliveryAmount,DeliveryRate,DateEnd,DateShipp,Address,Timeslot",
	OrderNumber,
	OrderStatus,
	SubStatus,
	PaymentMethod,
	PaymentStatus,
	PaymentSum,
	DeliveryAmount,
	DeliveryRate,
	DateEnd,
	DateShipp,
	Address,
	Timeslot);
	
	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекущаяДата(), "GetHandledEcomOrderInfo", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	Заказ = ПолучитьЗаказПокупателяПоНомеруЗаказа(OrderNumber);
	Если Заказ = Неопределено Тогда
		
		ЗаписьВЛог(ТекущаяДата(), "GetHandledEcomOrderInfo", 2, 0, "Возвращаемое значение", "Не найден заказ");	   
		Возврат ВернутьОтвет(500,"Не найден заказ по номеру " + OrderNumber + " в базе приемника");
		
	КонецЕсли;
	
	// ==> ЕНТ-1363.Коробка. 2019.04.02. Курьерская доставка
	// Проверка на дублирование
	СоздаватьДокМОР = Истина;
	Если ВРег(OrderStatus) = "FINISHED" и Заказ.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.SOLD Тогда
		СоздаватьДокМОР = Ложь;
	КонецЕсли; 
	Если ВРег(OrderStatus) = "LOST" и Заказ.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.НайтиПоКоду(13) Тогда
		СоздаватьДокМОР = Ложь;
	КонецЕсли; 
	Если ВРег(OrderStatus) = "RETURN" и Заказ.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.НайтиПоКоду(12) Тогда
		СоздаватьДокМОР = Ложь;
	КонецЕсли; 
	Если ВРег(OrderStatus) = "CANCELLED" и Заказ.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.SENDBACK Тогда
		СоздаватьДокМОР = Ложь;
	КонецЕсли; 
	Если ВРег(OrderStatus) = "DEFECT" и Заказ.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.НайтиПоКоду(11) Тогда
		СоздаватьДокМОР = Ложь;
	КонецЕсли; 
	
	// Проверка на корректную последовательность
	//
	
	// <== ЕНТ-1363.Коробка. 2019.04.02. Курьерская доставка
	
	Статус = ПолучитьСтатус(OrderStatus);
	СтатусЛокальный = Справочники.СтатусыЗаказаПокупателяЛокальные.НайтиПоКоду(СокрЛП(OrderStatus));
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.ПричинаВозврата			= SubStatus;
	Если PaymentMethod = "Online" Тогда
		
		ЗаказОбъект.СпособОплаты		= Перечисления.СпособОплатыИЗ.ОплатаНаСайте;
		Если PaymentStatus = "Оплачен" Тогда
			ЗаказОбъект.СтатусОплаты    	= Перечисления.СтатусОплатыИЗ.ОплатаОнЛайн;
		ИначеЕсли PaymentStatus = "Не оплачен" Тогда
			ЗаказОбъект.СтатусОплаты    	= Перечисления.СтатусОплатыИЗ.НеОплачен;
		КонецЕсли; 
		
	ИначеЕсли PaymentMethod = "Cash" Тогда
		
		ЗаказОбъект.СпособОплаты		= Перечисления.СпособОплатыИЗ.ОплатаКурьеру;
		Если PaymentStatus = "Оплачен" Тогда
			ЗаказОбъект.СтатусОплаты    	= Перечисления.СтатусОплатыИЗ.ОплатаНал;
		ИначеЕсли PaymentStatus = "Не оплачен" Тогда
			ЗаказОбъект.СтатусОплаты    	= Перечисления.СтатусОплатыИЗ.НеОплачен;
		КонецЕсли; 
		
	ИначеЕсли PaymentMethod = "Card" Тогда
		
		ЗаказОбъект.СпособОплаты		= Перечисления.СпособОплатыИЗ.ОплатаКурьеру;
		Если PaymentStatus = "Оплачен" Тогда
			ЗаказОбъект.СтатусОплаты    	= Перечисления.СтатусОплатыИЗ.ОплатаБезНал;
		ИначеЕсли PaymentStatus = "Не оплачен" Тогда
			ЗаказОбъект.СтатусОплаты    	= Перечисления.СтатусОплатыИЗ.НеОплачен;
		КонецЕсли; 

	КонецЕсли; 
	
	ЗаказОбъект.СуммаПродажиDelivery	= PaymentSum;
	ЗаказОбъект.СуммаДоставки			= DeliveryAmount;
	ЗаказОбъект.КоэффДоставки			= DeliveryRate;
	
	ЗаказОбъект.СтатусЗаказаПокупателя = Статус;
	ЗаказОбъект.СтатусЗаказаЛокальный  = СтатусЛокальный;
	
	ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	// ==> ЕНТ-1363.Коробка. 2019.03.26. Курьерская доставка
	
	// ВРег(OrderStatus) = "DEFECT" доработать 
	Если ВРег(OrderStatus) = "LOST" ИЛИ 
		ВРег(OrderStatus) = "RETURN" ИЛИ
		ВРег(OrderStatus) = "CANCELLED" Тогда
		
		
		Если СоздаватьДокМОР Тогда
			СоздатьМОРпоЗаказуПокупателя(Заказ, Ложь)
		КонецЕсли; 
		
	ИначеЕсли ВРег(OrderStatus) = "FINISHED" Тогда
		
		Если СоздаватьДокМОР Тогда
		   СоздатьМОРпоЗаказуПокупателя(Заказ)
		КонецЕсли; 
	
	КонецЕсли;
	// <== ЕНТ-1363.Коробка. 2019.03.26. Курьерская доставка
	
	ЗаписьВЛог(ТекущаяДата(), "GetHandledEcomOrderInfo", 2, 0, "Возвращаемое значение", "ОК");	   
	Возврат ВернутьОтвет(0,"ОК");
	
КонецФункции
// <== ЕНТ-1284.Коробка. 2019.03.04.Курьерская доставка

// ==> ЕНТ-1363.Коробка. 2019.03.26. Курьерская доставка
Процедура СоздатьМОРпоЗаказуПокупателя(ЗаказПокупателя, Продажа = Истина)

	ДокОбъект = Документы.УЗ_МелкооптоваяРеализация.СоздатьДокумент();
	ДокОбъект.Дата				= ТекущаяДата();
	ДокОбъект.Склад				= ЗаказПокупателя.Склад;
	ДокОбъект.Фирма				= ЗаказПокупателя.Склад.Фирма;
	ДокОбъект.ДокументОснования =  ЗаказПокупателя;
	ДокОбъект.СтатусВСистемеЭДО = Перечисления.СтатусыВСистемеЭДО.НеТребуетВыгрузки;
	ДокОбъект.СтатусВыгрузкиОпт = Перечисления.СтатусыВыгрузки.НеТребуетВыгрузки;
	
	Если Продажа Тогда
		
		ДокОбъект.Поставщик = Справочники.Поставщики.НайтиПоКоду(4445); // СТАРТ-М ООО
		ДокОбъект.ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю;
		ДокОбъект.ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоНаименованию("Курьерская доставка покупателю"); 
		ДокОбъект.Комментарий		= "Продажа по заказу "+ ЗаказПокупателя;
	
	Иначе
		
		ДокОбъект.ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоКоду(8); // "МОР (Возврат)"
		ДокОбъект.Комментарий		= "Возврат по заказу "+ ЗаказПокупателя;
		ДокОбъект.Поставщик = Справочники.Поставщики.НайтиПоКоду(3055); // Джи Ди Пи
		ДокОбъект.ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ИсходномуПоставщику;
	
	КонецЕсли; 
	
	// Заполнение ТЧ МОР
	ДокПоступлениеТовараСсылка = ЗаказПокупателя.ДокументОснование;
	Если ДокПоступлениеТовараСсылка = Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
		
		ЗаписьВЛог(ТекущаяДата(), "SetStatusOrderDelivery", 2, 0, "Не найден документ основание у заявки "+ЗаказПокупателя.Ссылка, "");	   
	    Возврат;
		
	КонецЕсли; 
	Товары = ПолучитьТаблицуТовараДляПродажи(ДокПоступлениеТовараСсылка);
	ДокОбъект.Товар.Загрузить(Товары);
	
	Попытка 
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	   	ЗаписьВЛог(ТекущаяДата(), "SetStatusOrderDelivery", 2, 0, "Ошибка при записи ""МОР""", ОписаниеОшибки());	   
	КонецПопытки;
	
	// В документе ЗаказПокупателя ТЧ не заполнена.
	// Проведем заполнение ТЧ у документа ЗаказПокупателя
	ДокЗаказПокупателяОбъект = ЗаказПокупателя.ПолучитьОбъект();
	ДокЗаказПокупателяОбъект.Заказ.Загрузить(Товары);
	Если Продажа Тогда
		ДокЗаказПокупателяОбъект.МОРПродажи = ДокОбъект.Ссылка;
	КонецЕсли; 
	Попытка
		ДокЗаказПокупателяОбъект.Записать()
	Исключение
	   	ЗаписьВЛог(ТекущаяДата(), "SetStatusOrderDelivery", 2, 0, "Ошибка при записи ""Заказ покупателя""", ОписаниеОшибки());	   
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьТаблицуТовараДляПродажи(ДокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.КодТовара КАК КодТовара,
	               |	Товары.Товар КАК Товар,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Коэфф КАК Коэфф,
	               |	Товары.КоэффициентРазбивки КАК КоэффициентРазбивки,
	               |	Товары.СтавкаНДСРозн КАК СтавкаНДС,
	               |	Товары.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
	               |	Товары.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
	               |	Товары.НДСЗакуп КАК СуммаНДСРеализации,
	               |	Товары.СуммаЗакуп КАК СуммаРеализации,
	               |	Товары.КодПартии КАК КодПартии,
				   // для док Заказ покупателя
	               |	0 КАК СуммаОплатыБаллами,
	               |	0 КАК СуммаАванса,
	               |	Товары.СуммаРозн КАК СуммаПродажи,
	               |	Товары.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДСПродажи,
	               |	Товары.ЦенаРозн КАК ЦенаРозн,
	               |	Товары.ЦенаРозн КАК ЦенаПродажи,
	               |	Товары.Количество КАК КоличествоПродано,
	             //  |	Товары.СуммаЗакуп КАК СуммаПродажи,
	               |	Товары.СрокГодности КАК СрокГодностиФакт
	               |ИЗ
	               |	Документ.УЗ_ПоступлениеТовара.Товар КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &докСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товары.Товар.Наименование";
	Запрос.УстановитьПараметр("ДокСсылка",ДокСсылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьМОРпоПоступлениеТовара(ДокСсылка)

	ДокОбъект = Документы.УЗ_МелкооптоваяРеализация.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ДокументОснования	= ДокСсылка;
	ДокОбъект.Склад				= ДокСсылка.Склад;
	ДокОбъект.Фирма				= ДокСсылка.Фирма;
	ДокОбъект.НомДокАптеки		= ДокСсылка.ВхНомерСФ;
	ДокОбъект.ТипПоставки		= Справочники.ТипыПоставокНаСклад.НайтиПоКоду(8); // "МОР (Возврат)"
	ДокОбъект.СтатусДокАптеки 	= Перечисления.СтатусДокАптеки.Проведен;
	ДокОбъект.Поставщик			= ДокСсылка.Поставщик;
	ДокОбъект.ВидОперацииМелкооптовойРеализации	= Перечисления.ВидыОперацийМелкооптовойРеализации.ИсходномуПоставщику;
	ДокОбъект.Статус			= Перечисления.СтатусыСписания.Завершен;
	ДокОбъект.СтатусВСистемеЭДО = Перечисления.СтатусыВСистемеЭДО.НеТребуетВыгрузки;
	ДокОбъект.СтатусВыгрузкиОпт = Перечисления.СтатусыВыгрузки.НеТребуетВыгрузки;
	ДокОбъект.Комментарий		= "Возврат по заказу "+СокрЛ(ДокОбъект.НомерИнтернетЗаказа); 
	
	Товары = ПолучитьТаблицуТовараДляПродажи(ДокСсылка);
	ДокОбъект.Товар.Загрузить(Товары);
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Попытка 
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция SetStatusOrderDelivery(Id_loc, Status, id_source_order, ndoc_source_order)
	
	Параметры = Новый Структура("Id_loc, Status, id_source_order, ndoc_source_order",
	Id_loc,
	Status,
	id_source_order,
	ndoc_source_order);

	ЛогВходящихПараметров = ПолучитьЛогПараметров(Параметры); 
	ЗаписьВЛог(ТекущаяДата(), "SetStatusOrderDelivery", 1, 0, "Входящие параметры", ЛогВходящихПараметров);
	
	Склад = Справочники.МестаХранения.НайтиПоКоду(Id_loc);
	Источник = Справочники.СайтыИнтернетЗаказов.НайтиПоКоду(id_source_order);
	Статус = ПолучитьСтатус(Status);
	СтатусЛокальный = Справочники.СтатусыЗаказаПокупателяЛокальные.НайтиПоКоду(СокрЛП(Status));
	
	Заказ = ПолучитьЗаказПокупателя(Склад,Источник,СокрЛП(ndoc_source_order));
	
	Если Заказ = Неопределено Тогда
		ЗаписьВЛог(ТекущаяДата(), "SetStatusOrderDelivery", 2, 0, "Возвращаемое значение", "");	   
		Возврат ВернутьОтвет(500,"Не найден заказ по номеру " + ndoc_source_order + " в базе приемника");
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.СтатусЗаказаПокупателя = Статус;
	ЗаказОбъект.СтатусЗаказаЛокальный  = СтатусЛокальный;
	ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//ЗаказОбъект.ВыгрузитьВАптеку(Status);
	
	Если Status = "LOST" ИЛИ 
		Status = "RETURN" ИЛИ
		Status = "CANCELED" ИЛИ
		Status = "DEFECT" Тогда
		
		СоздатьМОРпоЗаказуПокупателя(Заказ, Ложь)
		
	ИначеЕсли Status = "SOLD" Тогда
		
		СоздатьМОРпоЗаказуПокупателя(Заказ)
	
	КонецЕсли; 
	
	ЗаписьВЛог(ТекущаяДата(), "SetStatusOrderDelivery", 2, 0, "Возвращаемое значение", "ОК");	   
	Возврат ВернутьОтвет(0,"ОК");
	
КонецФункции
// <== ЕНТ-1363.Коробка. 2019.03.26. Курьерская доставка
