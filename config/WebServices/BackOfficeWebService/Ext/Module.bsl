
Функция КорректировкаСпецСимволов(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	//ЗаписьXML.ЗаписатьТекст(Значение);
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Значение = "" Тогда
		ЗаписьXML.ДобавитьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ДобавитьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("<" + Имя + ">");
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлемента(ЗаписьXML,Имя)
	
	ЗаписьXML.ДобавитьСтроку("</" + Имя + ">");
	
КонецПроцедуры

Функция СформироватьТекстXMLСОшибкой(ОписаниеОшибки)
	
	ЗаписьXML = Новый ТекстовыйДокумент;
	
	
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");
	ЗаписьXML.ДобавитьСтроку("<document>");
		ЗаписатьЭлементXML(ЗаписьXML, "error",	КорректировкаСпецСимволов(ОписаниеОшибки) );	
	ЗаписьXML.ДобавитьСтроку("</document>");
	
	Возврат ЗаписьXML.ПолучитьТекст();

	
КонецФункции

Функция UniversalQuery(IncomingData)
	
	Запрос = Новый Запрос;
	Запрос.Текст  = IncomingData;
	Попытка
		Рез = Запрос.Выполнить();
	Исключение
		Возврат СформироватьТекстXMLСОшибкой(ОписаниеОшибки());
	КонецПопытки;
	
	Если Рез.Пустой() Тогда
		Возврат СформироватьТекстXMLСОшибкой("Результат запроса вернул пустой набор записей");
	КонецЕсли;
	
	ТЗ = Рез.Выгрузить();
	КоллекцияКолонок = ТЗ.Колонки;
	КоличествоКолонок = КоллекцияКолонок.Количество();
	
	ЗаписьXML = Новый ТекстовыйДокумент;
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");
	ЗаписьXML.ДобавитьСтроку("<document>");
	ЗаписьXML.ДобавитьСтроку("<rowset>");

	
	Для каждого стр из ТЗ Цикл
		ЗаписьXML.ДобавитьСтроку("<row>");
		Для к = 0 По КоличествоКолонок - 1 Цикл
			ИмяКолонки = КоллекцияКолонок.Получить(к).Имя;	
			Значение = стр[ИмяКолонки];
			ТипЗначения = ТипЗнч(Значение);
			Если ТипЗначения = Тип("Строка") Тогда
				ЗначениеСтрока = КорректировкаСпецСимволов(Значение);
			ИначеЕсли ТипЗначения = Тип("Число") Тогда
				ЗначениеСтрока = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧГ=0");
			ИначеЕсли ТипЗначения = Тип("Дата") Тогда
				ЗначениеСтрока = Формат(Значение,"ДФ=dd.MM.yyyy");
			ИначеЕсли ТипЗначения = Тип("Булево") Тогда
				ЗначениеСтрока = Формат(Число(Значение),"ЧН=0");
			КонецЕсли;
			
			ЗаписатьЭлементXML(ЗаписьXML, ИмяКолонки, ЗначениеСтрока );
			
		КонецЦикла;
		ЗаписьXML.ДобавитьСтроку("</row>");	
		
	КонецЦикла;
	
	ЗаписьXML.ДобавитьСтроку("</rowset>");
	ЗаписьXML.ДобавитьСтроку("</document>");
	
	Возврат ЗаписьXML.ПолучитьТекст();

	
КонецФункции

Функция ПолучитьДокументИнвентаризации(ver, guid, ndoc, ddoc, id_doc_subtype, Склад)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЗ_Инвентаризация.Ссылка
	|ИЗ
	|	Документ.УЗ_Инвентаризация КАК УЗ_Инвентаризация
	|ГДЕ
	|	УЗ_Инвентаризация.ИДДокументаАптеки = &ИДДокументаАптеки
	|	И НЕ(УЗ_Инвентаризация.ПометкаУдаления = Истина
	|				ИЛИ УЗ_Инвентаризация.СтатусДокАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусДокАптеки.Аннулирован))";
	
	Запрос.УстановитьПараметр("ИДДокументаАптеки",СокрЛП(guid));
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();  Выборка.Следующий(); Возврат Выборка.Ссылка;
	Иначе
		ДокОбъект = Документы.УЗ_Инвентаризация.СоздатьДокумент();
		ДокОбъект.ВерсияДокументаАптеки = ver;
		ДокОбъект.ИДДокументаАптеки = guid;
		ДокОбъект.НомДокАптеки = ndoc;
		ДокОбъект.Дата = ddoc;
		ДокОбъект.Склад = Склад;
		ДокОбъект.СтатусДокАптеки = Перечисления.СтатусДокАптеки.Создан;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат ДокОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПодобратьПартию(ФирмаКод, ПоставщикКод, id_dep , id_goods, series, dvalid, barcode)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Ост.ПартияКод КАК ПартияКод,
	               |	Ост.СкладКод КАК СкладКод,
	               |	Ост.ФирмаКод КАК ФирмаКод,
	               |	&Серия КАК Серия,
	               |	&СрокГодности КАК СрокГодности,
	               |	&Баркод КАК БарКод,
	               |	0 КАК ВидПоступления,
	               |	0 КАК ВидПоступленияИсходный,
	               |	ВЫБОР
	               |		КОГДА Ост.СкладКод = &СкладКод
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК СортировкаПоСкладу,
	               |	ВЫБОР
	               |		КОГДА П.Серия = &Серия
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК СортировкаПоСерии,
	               |	П.Ссылка КАК Партия,
	               |	П.КодТовара КАК КодТовара,
	               |	П.К КАК К,
	               |	П.НомерГТД КАК НомерГТД,
	               |	П.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
	               |	П.СтавкаНДСРозн КАК СтавкаНДСРозн,
	               |	П.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
	               |	П.ЦенаЗакуп КАК ЦенаЗакуп,
	               |	П.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДСРасчет,
	               |	П.ЦенаПроизводителяБезНДС КАК ЦенаПроизводителяБезНДС,
	               |	П.Производитель КАК Производитель,
	               |	ЕСТЬNULL(П.Производитель.Код, 0) КАК КодПроизводителя,
	               |	ЕСТЬNULL(П.Производитель.Наименование, """") КАК НаименованиеПроизводителя,
	               |	П.ФирмаИсходная КАК ФирмаИсходная,
	               |	0 КАК ПоставщикКомитентВнутренний,
	               |	П.БэкМаржа КАК БэкМаржа,
	               |	ВЫБОР
	               |		КОГДА П.ВидПоступления = 1
	               |			ТОГДА &ПоставщикКод
	               |		ИНАЧЕ П.Поставщик
	               |	КОНЕЦ КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА П.ВидПоступления = 1
	               |			ТОГДА &ПоставщикКод
	               |		ИНАЧЕ П.ПоставщикИсходный
	               |	КОНЕЦ КАК ПоставщикИсходный
	               |ИЗ
	               |	РегистрНакопления.УЗ_Партии.Остатки(, ТоварКод = &ТоварКод) КАК Ост
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК П
	               |		ПО Ост.ПартияКод = П.Код
	               |ГДЕ
	               |	НЕ П.ТипПартии = ""I""
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЫБОР
	               |		КОГДА П.Серия = &Серия
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Ост.СкладКод = &СкладКод
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Ост.ФирмаКод = &ФирмаКод
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ФирмаКод",ФирмаКод);
	Запрос.УстановитьПараметр("ПоставщикКод",ПоставщикКод);
	Запрос.УстановитьПараметр("СкладКод",id_dep);
	Запрос.УстановитьПараметр("ТоварКод",id_goods);
	Запрос.УстановитьПараметр("Серия",series);
	Запрос.УстановитьПараметр("СрокГодности",dvalid);
	Запрос.УстановитьПараметр("БарКод",barcode);
	Рез = Запрос.Выполнить();
	
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();  Выборка.Следующий(); Возврат Выборка;
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Ост.ПартияКод КАК ПартияКод,
		               |	Ост.СкладКод КАК СкладКод,
		               |	Ост.ФирмаКод КАК ФирмаКод,
		               |	&Серия КАК Серия,
		               |	&СрокГодности КАК СрокГодности,
		               |	&Баркод КАК БарКод,
		               |	0 КАК ВидПоступления,
		               |	0 КАК ВидПоступленияИсходный,
		               |	ВЫБОР
		               |		КОГДА Ост.СкладКод = &СкладКод
		               |			ТОГДА 0
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СортировкаПоСкладу,
		               |	ВЫБОР
		               |		КОГДА П.Серия = &Серия
		               |			ТОГДА 0
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СортировкаПоСерии,
		               |	П.Ссылка КАК Партия,
		               |	П.КодТовара КАК КодТовара,
		               |	П.К КАК К,
		               |	П.НомерГТД КАК НомерГТД,
		               |	П.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
		               |	П.СтавкаНДСРозн КАК СтавкаНДСРозн,
		               |	П.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
		               |	П.ЦенаЗакуп КАК ЦенаЗакуп,
		               |	П.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДСРасчет,
		               |	П.ЦенаПроизводителяБезНДС КАК ЦенаПроизводителяБезНДС,
		               |	П.Производитель КАК Производитель,
		               |	ЕСТЬNULL(П.Производитель.Код, 0) КАК КодПроизводителя,
		               |	ЕСТЬNULL(П.Производитель.Наименование, """") КАК НаименованиеПроизводителя,
		               |	П.ФирмаИсходная КАК ФирмаИсходная,
		               |	0 КАК ПоставщикКомитентВнутренний,
		               |	П.БэкМаржа КАК БэкМаржа,
		               |	ВЫБОР
		               |		КОГДА П.ВидПоступления = 1
		               |			ТОГДА &ПоставщикКод
		               |		ИНАЧЕ П.Поставщик
		               |	КОНЕЦ КАК Поставщик,
		               |	ВЫБОР
		               |		КОГДА П.ВидПоступления = 1
		               |			ТОГДА &ПоставщикКод
		               |		ИНАЧЕ П.ПоставщикИсходный
		               |	КОНЕЦ КАК ПоставщикИсходный
		               |ИЗ
		               |	РегистрНакопления.УЗ_Партии КАК Ост
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК П
		               |		ПО Ост.ПартияКод = П.Код
		               |ГДЕ
		               |	Ост.ТоварКод = &ТоварКод
		               |	И Ост.СкладКод = &СкладКод
		               |	И НЕ П.ТипПартии = ""I""";
		
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			Выборка = Рез.Выбрать();  Выборка.Следующий(); Возврат Выборка;
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Ост.ПартияКод КАК ПартияКод,
			               |	Ост.СкладКод КАК СкладКод,
			               |	Ост.ФирмаКод КАК ФирмаКод,
			               |	&Серия КАК Серия,
			               |	&СрокГодности КАК СрокГодности,
			               |	&Баркод КАК БарКод,
			               |	0 КАК ВидПоступления,
			               |	0 КАК ВидПоступленияИсходный,
			               |	ВЫБОР
			               |		КОГДА П.Серия = &Серия
			               |			ТОГДА 0
			               |		ИНАЧЕ 1
			               |	КОНЕЦ КАК СортировкаПоСерии,
			               |	П.Ссылка КАК Партия,
			               |	П.КодТовара КАК КодТовара,
			               |	П.К КАК К,
			               |	П.НомерГТД КАК НомерГТД,
			               |	П.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
			               |	П.СтавкаНДСРозн КАК СтавкаНДСРозн,
			               |	П.ЦенаГосРегистрации КАК ЦенаГосРегистрации,
			               |	П.ЦенаЗакуп КАК ЦенаЗакуп,
			               |	П.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДСРасчет,
			               |	П.ЦенаПроизводителяБезНДС КАК ЦенаПроизводителяБезНДС,
			               |	П.Производитель КАК Производитель,
			               |	ЕСТЬNULL(П.Производитель.Код, 0) КАК КодПроизводителя,
			               |	ЕСТЬNULL(П.Производитель.Наименование, """") КАК НаименованиеПроизводителя,
			               |	П.ФирмаИсходная КАК ФирмаИсходная,
			               |	0 КАК ПоставщикКомитентВнутренний,
			               |	П.БэкМаржа КАК БэкМаржа,
			               |	ВЫБОР
			               |		КОГДА П.ВидПоступления = 1
			               |			ТОГДА &ПоставщикКод
			               |		ИНАЧЕ П.Поставщик
			               |	КОНЕЦ КАК Поставщик,
			               |	ВЫБОР
			               |		КОГДА П.ВидПоступления = 1
			               |			ТОГДА &ПоставщикКод
			               |		ИНАЧЕ П.ПоставщикИсходный
			               |	КОНЕЦ КАК ПоставщикИсходный
			               |ИЗ
			               |	РегистрНакопления.УЗ_Партии КАК Ост
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК П
			               |		ПО Ост.ПартияКод = П.Код
			               |ГДЕ
			               |	Ост.ТоварКод = &ТоварКод
			               |	И НЕ П.ТипПартии = ""I""";
			Рез = Запрос.Выполнить();
			Если НЕ Рез.Пустой() Тогда
				Выборка = Рез.Выбрать();  Выборка.Следующий(); Возврат Выборка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьРозничнуюЦену(КодПартииСтарый, КодПартииНовый, КодТовара, КодАптеки, КодАптекиИсточник)
	
	    Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АП.Код,
		               |	ВЫБОР
		               |		КОГДА АП.ЖНВЛС = ИСТИНА
		               |			ТОГДА ЕСТЬNULL(РЦП.Цена, 0)
		               |		ИНАЧЕ ЕСТЬNULL(РЦПолучателя.Цена, ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)))
		               |	КОНЕЦ КАК Цена
		               |ИЗ
		               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		               |		ПО АП.Код = РЦ.ТоварКод
		               |			И (РЦ.АптекаКод = &КодАптекиИсточник)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		               |		ПО (РЦП.АптекаКод = &КодАптекиИсточник)
		               |			И (РЦП.ПартияКод = &ПартияКодИсточник)
		               |			И АП.Код = РЦП.ТоварКод
		               |			И (РЦП.Уценка = ЛОЖЬ)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦПолучателя
		               |		ПО АП.Код = РЦПолучателя.ТоварКод
		               |			И (РЦПолучателя.АптекаКод = &КодАптеки)
		               |ГДЕ
		               |	АП.Код = &КодТовара";
					   
		Запрос.УстановитьПараметр("КодТовара",КодТовара);
		Запрос.УстановитьПараметр("КодАптеки",КодАптеки);
		Запрос.УстановитьПараметр("КодАптекиИсточник",КодАптекиИсточник);
		Запрос.УстановитьПараметр("ПартияКодИсточник",КодПартииСтарый);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат 0;
		Иначе
			Выборка = Рез.Выбрать(); Выборка.Следующий(); Возврат Выборка.Цена;
		КонецЕсли;

	
	
КонецФункции

Функция GetGpart(ver, guid, ndoc, ddoc, id_doc_subtype, id_dep, id_goods, series, dvalid, coeff, barcode)
	
	Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(id_goods);
	Склад = Справочники.МестаХранения.НайтиПоКоду(id_dep);
	ФирмаКод = Склад.Фирма.Код;
	Поставщик = Склад.Фирма.ФирмаКакПоставщик;
	ПоставщикКод = Поставщик.Код;
	
	Попытка
		ДокИнв = ПолучитьДокументИнвентаризации(ver, guid, ndoc, ddoc, id_doc_subtype, Склад);
	Исключение
		Возврат СформироватьТекстXMLСОшибкой("Не удалось создать документ инвентаризации. Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
	ВыборкаПоПартии = ПодобратьПартию(ФирмаКод,  ПоставщикКод, id_dep , id_goods, series, dvalid, barcode);
	
	Если ВыборкаПоПартии = Неопределено Тогда
		Возврат СформироватьТекстXMLСОшибкой("Не удалось подобрать партию по данному товару");
	КонецЕсли;
	
	//Создание партии
	НоваяПартия = Справочники.УЗ_Партии.СоздатьЭлемент();
	НоваяПартия.УстановитьНовыйКод();
	Если НоваяПартия.Код = 0 Тогда // иногда не срабатывает УстановитьНовыйКод() и далее вылетает ошибка.  на 8.2 такой картины никогда не было
		НоваяПартия.УстановитьНовыйКод();
	КонецЕсли;
	
	Если НоваяПартия.Код = 0 Тогда
		Возврат СформироватьТекстXMLСОшибкой("Не удалось создать партию по данному товару");
	КонецЕсли;
	
	КодБезКС = "24"+Формат(Число(НоваяПартия.Код), "ЧЦ=10; ЧВН=; ЧГ=0");
	НоваяПартия.Наименование        = ВычислитьКонтрольнуюСумму(КодБезКС);
	ЗаполнитьЗначенияСвойств(НоваяПартия,ВыборкаПоПартии);
	НоваяПартия.ДатаПоступления		= ДокИнв.Дата;
	НоваяПартия.ДокументПоступления = ДокИнв;
	Попытка
		НоваяПартия.Записать();
	Исключение
		Возврат СформироватьТекстXMLСОшибкой("Не удалось создать партию по данному товару");		
	КонецПопытки;
	//Получаем розничну цену
	РозничнаяЦена = ПолучитьРозничнуюЦену(ВыборкаПоПартии.ПартияКод,НоваяПартия.Код,id_goods,id_dep, ВыборкаПоПартии.СкладКод);
	Если РозничнаяЦена = 0 Тогда
		РозничнаяЦена = Окр(ВыборкаПоПартии.ЦенаЗакуп*1.03/coeff,1)*coeff;
	КонецЕсли;
	//Записываем розничную цену
	МЗРЦ = РегистрыСведений.РозничныеЦеныПоПартиям.СоздатьМенеджерЗаписи();
	МЗРЦ.АптекаКод = id_dep;
	МЗРЦ.ТоварКод = id_goods;
	МЗРЦ.ПартияКод = НоваяПартия.Код;
	МЗРЦ.Цена = РозничнаяЦена;
	МЗРЦ.Коэффициент = coeff;
	МЗРЦ.ДатаУстановки = ТекущаяДата();
	МЗРЦ.Документ = ДокИнв;
	МЗРЦ.Записать();
	
	//конец создания партии
	
	Если ПоставщикКод <> ВыборкаПоПартии.Поставщик Тогда
		Поставщик	= Справочники.Поставщики.НайтиПоКоду(ВыборкаПоПартии.Поставщик);
		ПоставщикКод = ВыборкаПоПартии.Поставщик;
	КонецЕсли;
	
	Контрагент		= Поставщик;
	КодКонтрагента	=  Формат(ПоставщикКод,"ЧГ=0");
	СчетКонтрагента = Контрагент.ОсновнойСчет;
	КодСчетаКонтрагента = СчетКонтрагента.Код;
	КодБанка		= СчетКонтрагента.Банк.Код; 
	
	ЕстьСчет = Истина;
	Если СчетКонтрагента = Неопределено или СчетКонтрагента.Пустая() или КодСчетаКонтрагента = Неопределено Тогда
		ЕстьСчет = ЛОЖЬ;
	КонецЕсли;
	
	
	ЗаписьXML = Новый ТекстовыйДокумент;
	ЗаписьXML.ДобавитьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");
	ЗаписьXML.ДобавитьСтроку("<document>");	
	
	Если ЕстьСчет Тогда
		ЗаписьXML.ДобавитьСтроку("<bank>");
			ЗаписьXML.ДобавитьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXML(ЗаписьXML, "bic",	Формат(КодБанка,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Банк.Наименование)));
				   ЗаписатьЭлементXML(ЗаписьXML, "corr_acc",	СокрЛП(СчетКонтрагента.Банк.КоррСчет));
			ЗаписьXML.ДобавитьСтроку("</row>");
		ЗаписьXML.ДобавитьСтроку("</bank>"); //конец записи секции  "bank"
		
		ЗаписьXML.ДобавитьСтроку("<bank_account>");
			ЗаписьXML.ДобавитьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",				Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );				
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",			КорректировкаСпецСимволов(СокрЛП(СчетКонтрагента.Наименование)));
				   ЗаписатьЭлементXML(ЗаписьXML, "num",				СокрЛП(СчетКонтрагента.НомерСчета));
				   ЗаписатьЭлементXML(ЗаписьXML, "id_contragent",	КодКонтрагента);
				   ЗаписатьЭлементXML(ЗаписьXML, "id_bank",			Формат(КодБанка,"ЧГ=0; ЧН=0"));
			ЗаписьXML.ДобавитьСтроку("</row>");
		ЗаписьXML.ДобавитьСтроку("</bank_account>"); //конец записи секции  "bank"		
	КонецЕсли;		
	Если НЕ ПоставщикКод = 0 Тогда
	ЗаписьXML.ДобавитьСтроку("<contragent>");
		ЗаписьXML.ДобавитьСтроку("<row>");
			 ЗаписатьЭлементXML(ЗаписьXML, "id", КодКонтрагента); 			
		     ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", ""+Число(Контрагент.ПометкаУдаления));
			 ЗаписатьЭлементXML(ЗаписьXML, "is_internal", ""+Число(Контрагент.Внутренний));
			 ЗаписатьЭлементXML(ЗаписьXML, "descr",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ПолнНаименование))); 
			 ЗаписатьЭлементXML(ЗаписьXML, "sdescr",КорректировкаСпецСимволов(СокрЛП(Контрагент.Наименование)));
			 ЗаписатьЭлементXML(ЗаписьXML, "inn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ИНН)));
			 ЗаписатьЭлементXML(ЗаписьXML, "kpp",	КорректировкаСпецСимволов(СокрЛП(Контрагент.КПП)));
			 ЗаписатьЭлементXML(ЗаписьXML, "ogrn",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОГРН)));
			 ЗаписатьЭлементXML(ЗаписьXML, "okpo",	КорректировкаСпецСимволов(СокрЛП(Контрагент.ОКПО)));
			 ЗаписатьЭлементXML(ЗаписьXML, "addr_u",	КорректировкаСпецСимволов(СокрЛП(Контрагент.Адрес)));
			 ЗаписатьЭлементXML(ЗаписьXML, "addr_f",	КорректировкаСпецСимволов(СокрЛП(Контрагент.АдресГрузополучателя)));
			 Если ЕстьСчет Тогда
			 	ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", Формат(Число(СокрЛП(КодСчетаКонтрагента)),"ЧГ=0") );
			 Иначе
				ЗаписатьЭлементXML(ЗаписьXML, "id_bank_account", "0" );
			 КонецЕсли;
			 ЗаписатьЭлементXML(ЗаписьXML, "type_tax", "" + Число(Контрагент.КонтрагентНаУСН)); 
			 ЗаписатьЭлементXML(ЗаписьXML, "e_mail", ""); 
			 ЗаписатьЭлементXML(ЗаписьXML, "phone", "");
			 ЗаписатьЭлементXML(ЗаписьXML, "director", "");
			 ЗаписатьЭлементXML(ЗаписьXML, "bookkeeper", "");
		ЗаписьXML.ДобавитьСтроку("</row>");
	ЗаписьXML.ДобавитьСтроку("</contragent>"); //конец записи секции  "contragent"
	КонецЕсли;
	Если ЗначениеЗаполнено(Товар.МНН) Тогда
		ЗаписьXML.ДобавитьСтроку("<inter_name>");
				ЗаписьXML.ДобавитьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",	Формат(Товар.МНН.Код,"ЧГ=0; ЧН=0") );				
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted", "0"); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(Товар.МНН.Наименование)));
				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
				ЗаписьXML.ДобавитьСтроку("</row>");
		ЗаписьXML.ДобавитьСтроку("</inter_name>"); //конец записи секции  "mnn"
	КонецЕсли;	
	Если ВыборкаПоПартии.КодПроизводителя > 0 Тогда
		ЗаписьXML.ДобавитьСтроку("<producer>");
				ЗаписьXML.ДобавитьСтроку("<row>");
				   ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(ВыборкаПоПартии.КодПроизводителя,"ЧГ=0; ЧН=0") );
				   ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"0"); 
				   ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(ВыборкаПоПартии.НаименованиеПроизводителя)));
				   ЗаписатьЭлементXML(ЗаписьXML, "sname",		"");
				   ЗаписатьЭлементXML(ЗаписьXML, "id_country",	"0");
				   ЗаписатьЭлементXML(ЗаписьXML, "is_importer",	"0");
				ЗаписьXML.ДобавитьСтроку("</row>");
		ЗаписьXML.ДобавитьСтроку("</producer>"); //конец записи секции  "producer"
	КонецЕсли;	
		ЗаписьXML.ДобавитьСтроку("<goods>");
				ЗаписьXML.ДобавитьСтроку("<row>");
				  ЗаписатьЭлементXML(ЗаписьXML, "id",			Формат(Товар.Код,"ЧГ=0"));
				  ЗаписатьЭлементXML(ЗаписьXML, "is_deleted",	"" + Число(Товар.ПометкаУдаления)); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_active",	"" + Число(Товар.УчаствуетВАП));
				  ЗаписатьЭлементXML(ЗаписьXML, "descr",		КорректировкаСпецСимволов(СокрЛП(Товар.Наименование)));
				  ЗаписатьЭлементXML(ЗаписьXML, "descr_ecr",	"");
				  ЗаписатьЭлементXML(ЗаписьXML, "descr_en",		КорректировкаСпецСимволов(СокрЛП(Лев(Товар.МеждународноеНазвание,150))));
				  ЗаписатьЭлементXML(ЗаписьXML, "article",		""); 
				  // НДС20/18 
				  //ЗаписатьЭлементXML(ЗаписьXML, "p_vat",		Формат(Товар.СтавкаНДС.Ставка,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "p_vat",		Формат(ПереопределениеЗначенияСтавки20_18(Товар.СтавкаНДС,ТекущаяДата()),"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ap",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_ftg",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_main","0"); //основная группа
				  ЗаписатьЭлементXML(ЗаписьXML, "id_group_general","0"); //обобщенная группа
				  ЗаписатьЭлементXML(ЗаписьXML, "id_brand_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_trade_name","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_inter_name",Формат(Товар.МНН.Код,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_category_goods","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_sub_category_goods",Формат(Товар.Подкатегория.Код,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_med_form",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_destination","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_prod_form",	"0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "id_storing_place","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_life_important","" + Формат(Число(Товар.ЖНВЛС),"ЧН=0"));  
				  ЗаписатьЭлементXML(ЗаписьXML, "is_social_important","0"); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(Товар.ПККН),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_mandatory",		"" + Формат(Число(Товар.АптечныйОб),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "is_prescription","" + Формат(Число(Товар.ОтпускПоРецепту),"ЧН=0")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "date_in", 		Формат(Товар.ДатаВВодаВАП,"ДФ=dd.MM.yyyy")); 
				  ЗаписатьЭлементXML(ЗаписьXML, "producer_country_descr",	КорректировкаСпецСимволов(СокрЛП(Товар.Страна.Наименование)));
				ЗаписьXML.ДобавитьСтроку("</row>");
		ЗаписьXML.ДобавитьСтроку("</goods>"); //конец записи секции  "good"
		
		ЗаписьXML.ДобавитьСтроку("<gpart>");
				ЗаписьXML.ДобавитьСтроку("<row>");
				
				    ЗаписатьЭлементXML(ЗаписьXML, "id"			,	Формат(НоваяПартия.Код,"ЧГ=0; ЧН=0")); 
  					ЗаписатьЭлементXML(ЗаписьXML, "id_goods"	,	Формат(НоваяПартия.КодТовара,"ЧГ=0") ); 
  					ЗаписатьЭлементXML(ЗаписьXML, "id_producer"	,	Формат(ВыборкаПоПартии.КодПроизводителя,"ЧГ=0; ЧН=0") );
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_pur"	,	Формат(ВыборкаПоПартии.СтавкаНДСЗакуп,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "p_vat_rtl"	,	Формат(ВыборкаПоПартии.СтавкаНДСРозн,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_reg_wo_vat_pack",Формат(ВыборкаПоПартии.ЦенаГосРегистрации,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_prod_wo_vat_pack"	,Формат(ВыборкаПоПартии.ЦенаПроизводителяБезНДС,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "dvalid_supp"	,	Формат(ВыборкаПоПартии.СрокГодности,"ДФ=dd.MM.yyyy")); 
					ЗаписатьЭлементXML(ЗаписьXML, "series"		,	КорректировкаСпецСимволов(ВыборкаПоПартии.Серия)); 
					ЗаписатьЭлементXML(ЗаписьXML, "eancode_supp",	ВыборкаПоПартии.БарКод); 
					ЗаписатьЭлементXML(ЗаписьXML, "barcode"		,	НоваяПартия.Наименование); 
					ЗаписатьЭлементXML(ЗаписьXML, "stcdn"		,	КорректировкаСпецСимволов(ВыборкаПоПартии.НомерГТД)); 
					ЗаписатьЭлементXML(ЗаписьXML, "certif"		,	""); 
					ЗаписатьЭлементXML(ЗаписьXML, "back_margin"	,	Формат(ВыборкаПоПартии.БэкМаржа,"ЧРД=.; ЧН=0; ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "coeff"		,	Формат(ВыборкаПоПартии.К,"ЧГ=0; ЧН=0") ) ;
					ЗаписатьЭлементXML(ЗаписьXML, "guid"		,	Формат(НоваяПартия.Код,"ЧГ=0; ЧН=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat",Формат(Окр(ВыборкаПоПартии.ЦенаЗакупБезНДСРасчет/ВыборкаПоПартии.К,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack" 	,Формат(ВыборкаПоПартии.ЦенаЗакупБезНДСРасчет,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_wo_vat_pack_supp" 	,Формат(Окр(ВыборкаПоПартии.ЦенаЗакуп/(1+ВыборкаПоПартии.СтавкаНДСЗакуп/100),2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat" 	,Формат(Окр(Окр(ВыборкаПоПартии.ЦенаЗакупБезНДСРасчет*(1+ВыборкаПоПартии.СтавкаНДСЗакуп/100),2)/ВыборкаПоПартии.К,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					//ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat" 	,Формат(Окр(ВыборкаПоПартии.ЦенаЗакуп/ВыборкаПоПартии.К,2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_pur_w_vat_pack" 	,Формат(Окр(ВыборкаПоПартии.ЦенаЗакупБезНДСРасчет*(1+ВыборкаПоПартии.СтавкаНДСЗакуп/100),2),"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat" 	, 		Формат(РозничнаяЦена/coeff,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "cost_rtl_w_vat_pack"	,	Формат(РозничнаяЦена,"ЧРД=.; ЧН=0; ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "is_individual_price"	,	"1"); 
  					ЗаписатьЭлементXML(ЗаписьXML, "is_opened","0");
					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent_initial",	Формат(ВыборкаПоПартии.ПоставщикИсходный,"ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_contragent",	Формат(ВыборкаПоПартии.Поставщик,"ЧГ=0"));
					ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond_initial",	"0" ); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_supp_cond",	"0" ); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_firm_initial"		,	Формат(ВыборкаПоПартии.ФирмаИсходная,"ЧГ=0")); 
					ЗаписатьЭлементXML(ЗаписьXML, "id_consignor",	"0" );
					
				ЗаписьXML.ДобавитьСтроку("</row>");
		ЗаписьXML.ДобавитьСтроку("</gpart>"); //конец записи секции  "str"
	
	
	ЗаписьXML.ДобавитьСтроку("</document>");
	
	
	Возврат ЗаписьXML.ПолучитьТекст();
	
КонецФункции

