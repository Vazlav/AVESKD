Перем СписокКомПодключений;
Перем КэшированныйЗапросПоОстаткам;
Перем КэшированныйЗапросПоСвязкам;

Функция ПодключитьсяКДочернейБазе(Сервер,База,Пользователь,Пароль)
	
	//Параметры:
	//<Строка соединения> (обязательный)
	//Тип: Строка. Строка параметров, используемая 1С:Предприятием 
	//для соединения с информационной базой.
	//Строка соединения представляет собой набор параметров, каждый из которых является фрагментом вида: 
	//<Имя параметра=><Значение>, 
	//где Имя параметра — имя параметра, а Значение — его значение. 
	//Фрагменты отделяются друг от друга символами ';'. 
	//Если значение содержит пробельные символы, то оно должно быть заключено в двойные кавычки (").
	//Для файлового варианта определен параметр: 
	//File — каталог информационной базы (файловый режим);
	//Для клиент-серверного варианта определены параметры: 
	//Srvr — имя сервера 1С:Предприятия; 
	//Ref — имя информационной базы на сервере;
	//Для всех вариантов определены параметры: 
	//Usr — имя пользователя; 
	//Pwd — пароль и UC<Код доступа> позволяет выполнить установку соединения с информационной базой, 
	//на которую установлена блокировка установки соединений. 
	//Если при установке блокировки задан непустой код доступа, то для установки соединения 
	//необходимо в параметре /UC указать этот код доступа. 
	
	СтрокаСоединения="Srvr="""+Сервер+"""; Ref="""+База+"""; ";

	СтрокаСоединения=СтрокаСоединения+" Usr="""+Пользователь+"""; Pwd="""+Пароль+""""; 		
	
	
	
	Попытка
		
		Комец=Новый COMObject("V81.COMConnector");
		
		Ком=Комец.Connect(СтрокаСоединения);
		Возврат Ком;
	Исключение
		
		предупреждение("Не удалось подключиться к базе! Причина 
		|"+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
КонецФункции


Процедура СоздатьСвязкиВДочернихБазах(ПоставщикКод,ТекАПКод,ТекКодПост)
	
	////СпрДочернихБаз = Справочники.ДочерниеБазыДанных.Выбрать();
	//Для каждого ЭлементСписка из СписокКомПодключений Цикл
	//	Ком = ЭлементСписка.Значение;
	////Пока СпрДочернихБаз.Следующий() Цикл
	//	
	//	//Ком = ПодключитьсяКДочернейБазе(СпрДочернихБаз.Сервер,СпрДочернихБаз.ИмяБазы,СпрДочернихБаз.Пользователь,СпрДочернихБаз.Пароль);
	//	//Если Ком = Неопределено Тогда
	//	//	Возврат;
	//	//КонецЕсли;
	//	
	//	СпрСвязокКомБазы = Ком.Справочники.СвязкиТовараСПоставщиком;
	//	СпрПоставщикиКомБазы = Ком.Справочники.Поставщики;
	//	СпрАПКомБазы = Ком.Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
	//	//Проверим, если ли такой поставщик в дочерней базе
	//	ПоставщикСсылка = СпрПоставщикиКомБазы.НайтиПоКоду(ПоставщикКод);
	//	Если ПоставщикСсылка.Пустая() Тогда
	//		Сообщить("Не удалось создать связку в базе: " + ЭлементСписка.Представление + ". Отсутствует поставщик" );
	//		//Ком = Неопределено;
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ТоварСсылка = СпрАПКомБазы.НайтиПоКоду(ТекАПКод);
	//	Если ТоварСсылка.Пустая() Тогда
	//		Сообщить("Не удалось создать связку в базе: " + ЭлементСписка.Представление + ". Отсутствует данный товар" );
	//		//Ком = Неопределено;
	//		Продолжить;
	//	КонецЕсли;
	//	// Проверим, есть существует ли уже такая связка в справочнике
	//	Запрос=Ком.NewObject("Запрос");
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	СвязкиТовараСПоставщиком.КодТовараПоставщика
	//				   |ИЗ
	//				   |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	//				   |ГДЕ
	//				   |	СвязкиТовараСПоставщиком.Поставщик.Код = &ПоставщикКод
	//				   |	И СвязкиТовараСПоставщиком.КодТовараПоставщика = &КодТовараПоставщика
	//				   |	И СвязкиТовараСПоставщиком.ТоварФирмы.Код = &КодТовара";
	//	Запрос.УстановитьПараметр("ПоставщикКод",ПоставщикКод);
	//	Запрос.УстановитьПараметр("КодТовараПоставщика",ТекКодПост);
	//	Запрос.УстановитьПараметр("КодТовара",ТекАПКод);
	//	РезТЗ = Запрос.Выполнить().Выгрузить();
	//	Если РезТЗ.Количество() > 0 Тогда
	//		Сообщить("В базе: " + ЭлементСписка.Представление + " есть уже такая связка" );
	//		//Ком = Неопределено;
	//		Продолжить;			
	//	КонецЕсли;
	//	

	//	//СВязку не нашли, значит создаем ее:
	//	НовыйЭлемент = СпрСвязокКомБазы.СоздатьЭлемент();
	//	НовыйЭлемент.Поставщик = ПоставщикСсылка;
	//	НовыйЭлемент.КодТовараПоставщика = ТекКодПост;
	//	НовыйЭлемент.ТоварФирмы = ТоварСсылка;
	//	Попытка
	//		НовыйЭлемент.Записать();
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//		//Ком = Неопределено;
	//	КонецПопытки;
	//	
	//КонецЦикла;
	
	
КонецПроцедуры

Процедура УдалитьСвязкиВДочернихБазах(ПоставщикКод,ТекАПКод,ТекКодПост)
	
	//Для каждого ЭлементСписка из СписокКомПодключений Цикл
	//	Ком = ЭлементСписка.Значение;
	//	СпрСвязокКомБазы = Ком.Справочники.СвязкиТовараСПоставщиком;
	//	СпрПоставщикиКомБазы = Ком.Справочники.Поставщики;
	//	СпрАПКомБазы = Ком.Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
	//	//Проверим, если ли такой поставщик в дочерней базе
	//	ПоставщикСсылка = СпрПоставщикиКомБазы.НайтиПоКоду(ПоставщикКод);
	//	Если ПоставщикСсылка.Пустая() Тогда
	//		Сообщить("Не удалось удалить связку в базе: " + ЭлементСписка.Представление + ". Отсутствует поставщик" );
	//		//Ком = Неопределено;
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ТоварСсылка = СпрАПКомБазы.НайтиПоКоду(ТекАПКод);
	//	Если ТоварСсылка.Пустая() Тогда
	//		Сообщить("Не удалось удалить связку в базе: " + ЭлементСписка.Представление + ". Отсутствует данный товар" );
	//		//Ком = Неопределено;
	//		Продолжить;
	//	КонецЕсли;
	//	// Проверим, есть существует ли уже такая связка в справочнике
	//	Запрос=Ком.NewObject("Запрос");
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	СвязкиТовараСПоставщиком.Ссылка как Ссылка
	//				   |ИЗ
	//				   |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	//				   |ГДЕ
	//				   |	СвязкиТовараСПоставщиком.Поставщик.Код = &ПоставщикКод
	//				   |	И СвязкиТовараСПоставщиком.КодТовараПоставщика = &КодТовараПоставщика
	//				   |	И СвязкиТовараСПоставщиком.ТоварФирмы.Код = &КодТовара";
	//	Запрос.УстановитьПараметр("ПоставщикКод",ПоставщикКод);
	//	Запрос.УстановитьПараметр("КодТовараПоставщика",ТекКодПост);
	//	Запрос.УстановитьПараметр("КодТовара",ТекАПКод);
	//	РезТЗ = Запрос.Выполнить().Выгрузить();
	//
	//	Для каждого стр из РезТЗ Цикл
	//		СвязкаОбъект = стр.Ссылка.ПолучитьОбъект();
	//		Попытка
	//			СвязкаОбъект.Удалить();
	//		Исключение
	//			Сообщить(ОписаниеОшибки());
	//		КонецПопытки;
	//	КонецЦикла;
	//	
	//КонецЦикла;
КонецПроцедуры

Процедура ПривестиШиринуКолонокТЗ()
	ЭлементыФормы.Прайс.Колонки.Код.Ширина = 6;
	ЭлементыФормы.Прайс.Колонки.Товар.Ширина = 50;
	ЭлементыФормы.Прайс.Колонки.Связан.Ширина = 6;
	ЭлементыФормы.Прайс.Колонки.Производитель.Ширина = 50;	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПоставщикПриИзменении(Элемент)
	
	
	//ЭтаФорма.ПрайсПоставщика.Отбор.Поставщик.Использование = Истина;
	//ЭтаФорма.ПрайсПоставщика.Отбор.Поставщик.Значение = Поставщик;
	ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Прайсы.Код,
	|	Прайсы.Товар КАК Товар,
	|	СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК Связан,
	|	Прайсы.Производитель
	|ИЗ
	|	РегистрСведений.Прайсы КАК Прайсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	|		ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	|			И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	|ГДЕ
	|	Прайсы.Поставщик = &Поставщик" ;
	Если УсловиеФильтра.Количество() > 0 Тогда
		ТХТ = ТХТ + "
		|	И Прайсы.Код В(&УсловиеФильтра) ";
	КонецЕсли;
	ТХТ = ТХТ +  "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар";
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("УсловиеФильтра",УсловиеФильтра);
	Прайс = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.Прайс.СоздатьКолонки();
	ПривестиШиринуКолонокТЗ();
	
	Если ЭлементыФормы.Прайс.Колонки.Найти("БарКод") = Неопределено Тогда
		ЭлементыФормы.НайтиПоБаркоду.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодтянутьСвязкиДляНесопоставленногоТовара()
	
	ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.Код как НашКод,
	      |	СвязкиТовараСПоставщиком.КодТовараПоставщика КАК КодТовараПоставщика
	      |ИЗ
	      |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |ГДЕ
	      |	СвязкиТовараСПоставщиком.Поставщик = &Поставщик  и СвязкиТовараСПоставщиком.КодТовараПоставщика В(&УсловиеФильтра)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	КодТовараПоставщика";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("УсловиеФильтра",УсловиеФильтра);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого стр из Прайс Цикл 
		НайденнаяСтрока = ТЗ.Найти(стр.Код,"КодТовараПоставщика");
		Если НайденнаяСтрока = Неопределено Тогда
		Иначе
			стр.Связан = НайденнаяСтрока.НашКод;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФильтрПоСловуПриИзменении(Элемент)
	
	Если ПустаяСтрока(СокрЛП(ФильтрПоСлову)) = Истина Тогда
		ПоставщикПриИзменении("");
	Иначе
			ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			      |	Прайсы.Код,
			      |	Прайсы.Товар КАК Товар,
				  |	СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК Связан,
			      |	Прайсы.Производитель
			      |ИЗ
			      |	РегистрСведений.Прайсы КАК Прайсы
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
			      |		ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
			      |			И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
			      |ГДЕ
			      |	Прайсы.Поставщик = &Поставщик
			      |	И Прайсы.Товар ПОДОБНО &Товар
			      |
			      |УПОРЯДОЧИТЬ ПО
			      |	Товар";
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("Поставщик",Поставщик);
			Запрос.УстановитьПараметр("Товар","%" + СокрЛП(ФильтрПоСлову) + "%");
			Прайс = Запрос.Выполнить().Выгрузить();
			ЭлементыФормы.Прайс.СоздатьКолонки();
			ПривестиШиринуКолонокТЗ();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КнОчиститьФильтрНажатие(Элемент)
	
	ФильтрПоСлову = "";
	ФильтрПоСловуПриИзменении("");	
	
КонецПроцедуры

Процедура СправочникАППриАктивизацииСтроки(Элемент)
	
		
	Если Остатки=Истина ТОгда
		КэшированныйЗапросПоОстаткам.Параметры.Очистить();
		КэшированныйЗапросПоОстаткам.УстановитьПараметр("Склад",ПоСкладу);
		КэшированныйЗапросПоОстаткам.УстановитьПараметр("Товар",Элемент.ТекущаяСтрока.Ссылка);
		
		ЭлементыФормы.ТабОстатков.Значение=КэшированныйЗапросПоОстаткам.Выполнить().Выгрузить();
		ЭлементыФормы.ТабОстатков.СоздатьКолонки();
	КонецЕсли;	

	
	
	
	
	Если Прайс.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	  |	СвязкиТовараСПоставщиком.Поставщик.Наименование КАК Поставщик,
	//	  |	СвязкиТовараСПоставщиком.КодТовараПоставщика КАК Код,
	//	  |	ЕСТЬNULL(Прайсы.Товар, ""------"") КАК Товар
	//	  |ИЗ
	//	  |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	//	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайсы
	//	  |		ПО СвязкиТовараСПоставщиком.Поставщик = Прайсы.Поставщик
	//	  |			И СвязкиТовараСПоставщиком.КодТовараПоставщика = Прайсы.Код
	//	  |ГДЕ
	//	  |	СвязкиТовараСПоставщиком.ТоварФирмы = &ТоварФирмы
	//	  |
	//	  |УПОРЯДОЧИТЬ ПО
	//	  |	Поставщик";
		  
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТХТ;
	КэшированныйЗапросПоСвязкам.УстановитьПараметр("ТоварФирмы",Элемент.ТекущаяСтрока.Ссылка);
	ВсеСвязкиПоТовару = КэшированныйЗапросПоСвязкам.Выполнить().Выгрузить();
	ЭлементыФормы.ВсеСвязкиПоТовару.СоздатьКолонки();
	
	ЭлементыФормы.ВсеСвязкиПоТовару.Колонки.Код.Ширина = 6;
	ЭлементыФормы.ВсеСвязкиПоТовару.Колонки.Товар.Ширина = 50;
	ЭлементыФормы.ВсеСвязкиПоТовару.Колонки.Поставщик.Ширина = 20;
	
	Если Поставщик.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = Прайс.Найти(Элемент.ТекущаяСтрока.Код,"Связан");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		ЭлементыФормы.Прайс.ТекущаяСтрока = НайденнаяСтрока;	
	КонецЕсли;
	
	
	
	
КонецПроцедуры

Процедура кнСвязатьНажатие(Элемент)
	
	Если Поставщик.Пустая() Тогда
		Предупреждение("Не выбран поставщик!");
		Возврат;
	КонецЕсли;
	Если СокрЛП(НовыйКод) = "" Тогда
		Если ЭлементыФормы.Прайс.ТекущаяСтрока.Связан <> null Тогда
			Предупреждение("Данный товар поставщка уже имеет связку!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекАп = ЭлементыФормы.СправочникАП.ТекущаяСтрока;
	ТекАПКод = ТекАП.Код;
	Если СокрЛП(НовыйКод) = "" Тогда 
		ТекКодПост = ЭлементыФормы.Прайс.ТекущаяСтрока.Код;
	Иначе
		ТекКодПост = СокрЛП(НовыйКод);
	КонецЕсли;

	НовыйЭлемент = Справочники.СвязкиТовараСПоставщиком.СоздатьЭлемент();
	НовыйЭлемент.КодТовараПоставщика = ТекКодПост;
	НовыйЭлемент.Поставщик = Поставщик;
	НовыйЭлемент.ТоварФирмы = ТекАП;
	Попытка
		НовыйЭлемент.Записать();
		Если СокрЛП(НовыйКод) = "" Тогда
			ЭлементыФормы.Прайс.ТекущаяСтрока.Связан = ТекАПКод;
		КонецЕсли;
		СоздатьСвязкиВДочернихБазах(Поставщик.Код,ТекАПКод,ТекКодПост);
		НовыйКод = "";
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	
	
	
КонецПроцедуры

Процедура кнУдалитьСвязьНажатие(Элемент)
	
	Если Поставщик.Пустая() Тогда
		Предупреждение("Не выбран поставщик!");
		Возврат;
	КонецЕсли;
	Если СокрЛП(НовыйКод) = "" Тогда
		Если ЭлементыФормы.Прайс.ТекущаяСтрока.Связан = null Тогда
			Предупреждение("Данная позиция не имеет связки.!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СокрЛП(НовыйКод) = "" Тогда 
		ТекАПКод = ЭлементыФормы.Прайс.ТекущаяСтрока.Связан;
		ТекАп = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекАПКод);
		ТекКодПост = ЭлементыФормы.Прайс.ТекущаяСтрока.Код;
	Иначе
		ТекАп = ЭлементыФормы.СправочникАП.ТекущаяСтрока;
		ТекАПКод = ТекАп.Код;
		ТекКодПост = СокрЛП(НовыйКод);
	КонецЕсли;
	
	Если ТекАП.Пустая() Тогда
		Сообщить("Не могу удалить связь. Нет в АП элемента с кодом : " +  ТекАПКод, СтатусСообщения.Важное ); 
		Возврат;
	КонецЕсли;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	СвязкиТовараСПоставщиком.Ссылка как СвязкаСсылка
	      |ИЗ
	      |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |ГДЕ
	      |	СвязкиТовараСПоставщиком.Поставщик = &Поставщик
	      |	И СвязкиТовараСПоставщиком.ТоварФирмы = &ТоварФирмы
	      |	И СвязкиТовараСПоставщиком.КодТовараПоставщика = &КодТовараПоставщика";
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("ТоварФирмы",ТекАП);
	Запрос.УстановитьПараметр("КодТовараПоставщика",СокрЛП(ТекКодПост));
	
	ВремТЗ = Запрос.Выполнить().Выгрузить();
	Если ВремТЗ.Количество() = 0 Тогда
		Предупреждение("Данная позиция не имеет связки.!");
		Возврат;
	Иначе 
		Успешно = Ложь;
		Для каждого стр из ВремТЗ Цикл
			Объект = стр.СвязкаСсылка.ПолучитьОбъект();
			Попытка
				Объект.Удалить();
				Успешно = Истина;
				
				УдалитьСвязкиВДочернихБазах(Поставщик.Код,ТекАПКод,ТекКодПост);
				
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		Если (Успешно = Истина) Тогда
			Если (СокрЛП(НовыйКод) = "") Тогда
				ЭлементыФормы.Прайс.ТекущаяСтрока.Связан = NULL;
			Иначе
				НовыйКод = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ОбработкаТаймера()
	
	//СпрДочернихБаз = Справочники.ДочерниеБазыДанных.Выбрать();

	//Пока СпрДочернихБаз.Следующий() Цикл
	//	
	//	Ком = ПодключитьсяКДочернейБазе(СпрДочернихБаз.Сервер,СпрДочернихБаз.ИмяБазы,СпрДочернихБаз.Пользователь,СпрДочернихБаз.Пароль);
	//	Если Ком = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	СписокКомПодключений.Добавить(Ком,СпрДочернихБаз.ИмяБазы);
	//	
	//КонецЦикла;	
	//
	//КоличествоПодключений = СписокКомПодключений.Количество();
	//ЭлементыФормы.ТекстПодключения.Заголовок = "Количество COM-подключений: " + КоличествоПодключений ;
	//ЭтаФорма.Обновить();
	Если ТЗНесопоставленныйТовар.Количество() = 0 Тогда
		Если Поставщик.Пустая() = Ложь Тогда
			ПоставщикПриИзменении("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Процедура ПриОткрытии()
	
	ПодключитьОбработчикОжидания("ОбработкаТаймера",1,Истина);
	Если ТЗНесопоставленныйТовар.Количество() > 0 Тогда
		ЭлементыФормы.Прайс.Значение = ТЗНесопоставленныйТовар;
		ЭлементыФормы.Прайс.СоздатьКолонки();
		ПривестиШиринуКолонокТЗ();
		
		ПодтянутьСвязкиДляНесопоставленногоТовара();		
		
	Иначе
		ЭлементыФормы.НайтиПоБаркоду.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрайсВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КодАП = ВыбраннаяСтрока.Связан;
	Если КодАП <> NULL Тогда
		НайденнаяСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(КодАП);
		Если НайденнаяСсылка.Пустая() = Истина Тогда
			Предупреждение("По данному коду: " + КодАП + " не найден товар в справочнике");
			Возврат;
		Иначе
			ЭлементыФормы.СправочникАП.ТекущаяСтрока = НайденнаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура НайтиПоБаркодуНажатие(Элемент)

	ТекбарКод = СокрЛП(ЭлементыФормы.Прайс.ТекущаяСтрока.БарКод);
	
	ТХТ = "ВЫБРАТЬ
	      |	ШКПТ.Владелец.Владелец.Код как Код
	      |ИЗ
	      |	Справочник.ШКПТ КАК ШКПТ
	      |ГДЕ
	      |	ШКПТ.Наименование = &БарКод";
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("БарКод",ТекбарКод);
	ТЗ = Запрос.Выполнить().Выгрузить();
	//Сообщить(ТЗ.Получить(0).Код);
	Если ТЗ.Количество() = 0 Тогда
		Предупреждение("По баркоду: " + ТекБарКод + " не найден товар в справочнике");
		Возврат;
	КонецЕсли;
	НайденнаяСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТЗ.Получить(0).Код);
	Если НайденнаяСсылка.Пустая() = Истина Тогда
		Предупреждение("По данному коду: " + ТЗ.Получить(0).Код + " не найден товар в справочнике");
		Возврат;
	Иначе
		ЭлементыФормы.СправочникАП.ТекущаяСтрока = НайденнаяСсылка;
	КонецЕсли;	
	
КонецПроцедуры

СписокКомПодключений = Новый СписокЗначений;

Запрос=Новый Запрос("ВЫБРАТЬ
                    |	ККМ_ПользователиКассиры.Фирма,
                    |	ККМ_ПользователиКассиры.Аптека,
                    |	ККМ_ПользователиКассиры.Пользователь
                    |ИЗ
                    |	РегистрСведений.ККМ_ПользователиКассиры КАК ККМ_ПользователиКассиры
                    |ГДЕ
                    |	ККМ_ПользователиКассиры.Пользователь = &Пользователь");
Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
Рез=Запрос.Выполнить().Выгрузить();
Если Рез.Количество()<>0 Тогда
	Остатки=Истина;
	ПоСкладу=Рез.Получить(0).Аптека;
КонецЕсли;	
					
					
КэшированныйЗапросПоОстаткам=Новый Запрос("ВЫБРАТЬ
                                          |	ПартииЖНВЛСОстатки.Партия,
                                          |	ПартииЖНВЛСОстатки.КолвоОстаток КАК Остаток,
                                          |	ПартииЖНВЛСОстатки.СуммаЗакупСНДСОстаток / ПартииЖНВЛСОстатки.КолвоОстаток КАК Цена_Закупочная
                                          |ИЗ
                                          |	РегистрНакопления.ПартииЖНВЛС.Остатки(
                                          |			,
                                          |			Склад = &Склад
                                          |				И Товар = &Товар) КАК ПартииЖНВЛСОстатки
                                          |ГДЕ
                                          |	ПартииЖНВЛСОстатки.КолвоОстаток > 0");



КэшированныйЗапросПоСвязкам=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	СвязкиТовараСПоставщиком.Поставщик.Наименование КАК Поставщик,
	      |	СвязкиТовараСПоставщиком.КодТовараПоставщика КАК Код,
	      |	ЕСТЬNULL(Прайсы.Товар, ""------"") КАК Товар
	      |ИЗ
	      |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайсы
	      |		ПО СвязкиТовараСПоставщиком.Поставщик = Прайсы.Поставщик
	      |			И СвязкиТовараСПоставщиком.КодТовараПоставщика = Прайсы.Код
	      |ГДЕ
	      |	СвязкиТовараСПоставщиком.ТоварФирмы = &ТоварФирмы
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Поставщик");