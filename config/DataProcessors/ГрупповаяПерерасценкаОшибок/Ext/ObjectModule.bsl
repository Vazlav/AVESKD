#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоступлениеТовараОшибкиРасценки.Ссылка,
	|	ПоступлениеТовараОшибкиРасценки.Товар КАК Товар,
	|	ПоступлениеТовараОшибкиРасценки.ОписаниеОшибки,
	|	ПоступлениеТовараОшибкиРасценки.Ссылка.Поставщик,
	|	ПоступлениеТовараОшибкиРасценки.НомерСтроки,
	|	ПоступлениеТовараОшибкиРасценки.ИгнорироватьОшибку
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	Товар.*,
	|	ОписаниеОшибки,
	|	Поставщик.*,
	|	НомерСтроки,
	|	ИгнорироватьОшибку}
	|ИЗ
	|	Документ.ПоступлениеТовара.ОшибкиРасценки КАК ПоступлениеТовараОшибкиРасценки
	|ГДЕ
	|	(НЕ ПоступлениеТовараОшибкиРасценки.Ссылка.Проведен)
	|	И (НЕ ПоступлениеТовараОшибкиРасценки.Ссылка.ПометкаУдаления)
	|	И ПоступлениеТовараОшибкиРасценки.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	//|	И ПоступлениеТовараОшибкиРасценки.ИгнорироватьОшибку = ЛОЖЬ
	//|	И (ПоступлениеТовараОшибкиРасценки.ОписаниеОшибки ПОДОБНО ""%Превышение закупочной цены!%""
	//|			ИЛИ ПоступлениеТовараОшибкиРасценки.ОписаниеОшибки ПОДОБНО ""%Заниженный процент наценки!%""
	//|			ИЛИ ПоступлениеТовараОшибкиРасценки.ОписаниеОшибки ПОДОБНО ""%не прошел%""
	//|			ИЛИ ПоступлениеТовараОшибкиРасценки.ОписаниеОшибки ПОДОБНО ""%Розничная цена отличается%"")
	|{ГДЕ
	|	ПоступлениеТовараОшибкиРасценки.Товар.*,
	|	ПоступлениеТовараОшибкиРасценки.ОписаниеОшибки,
	|	ПоступлениеТовараОшибкиРасценки.Ссылка.Поставщик.*,
	|	ПоступлениеТовараОшибкиРасценки.Ссылка.Склад.*}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар
	|АВТОУПОРЯДОЧИВАНИЕ";
	                                                                   
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Ссылка", "Поступление товара");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОписаниеОшибки", "Описание ошибки");
	
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Поставщик");
	УниверсальныйОтчет.ДобавитьОтбор("Товар");
	УниверсальныйОтчет.ДобавитьОтбор("Склад.Бренд");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТаблицаОшибок) Экспорт
	
	ТаблицаОшибок.Строки.Очистить();
	
	ПостроительОтчета = УниверсальныйОтчет.ПостроительОтчета;
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("Ссылка");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Товар");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ОписаниеОшибки");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Поставщик");
	ПостроительОтчета.ВыбранныеПоля.Добавить("НомерСтроки");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ИгнорироватьОшибку");
	
	Параметры = ПостроительОтчета.Параметры;
	Параметры.Вставить("ДатаНачала", НачалоДня(УниверсальныйОтчет.ДатаКон));
	Параметры.Вставить("ДатаКонца", КонецДня(УниверсальныйОтчет.ДатаКон));
	
	ПостроительОтчета.Выполнить();
	Результат = ПостроительОтчета.Результат;
	
	ТекНоменклатура = Неопределено;
	
	Выборка = Результат.Выбрать();
	ТаблицаОшибокКопия.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекНоменклатура <> Выборка.Товар Тогда
			ТекНоменклатура = Выборка.Товар;
			СтрокаНоменклатуры = ТаблицаОшибок.Строки.Добавить();
			СтрокаНоменклатуры.Представление = ТекНоменклатура;
			СтрокаНоменклатуры.ДанныеСтроки = ТекНоменклатура;
		КонецЕсли;	
		
		СтрокаДокумента = СтрокаНоменклатуры.Строки.Добавить();
		СтрокаДокумента.Представление = Выборка.Ссылка;
		СтрокаДокумента.ДанныеСтроки = Выборка.Ссылка;
		СтрокаДокумента.Поставщик = Выборка.Поставщик;
		СтрокаДокумента.Ошибка = Выборка.ОписаниеОшибки;
		СтрокаДокумента.НомерСтроки = Выборка.НомерСтроки;
		СтрокаДокумента.ИгнорироватьОшибку = Выборка.ИгнорироватьОшибку;
		
		СтрокаТЗКопии = ТаблицаОшибокКопия.Добавить();
		СтрокаТЗКопии.Док = Выборка.Ссылка;
		СтрокаТЗКопии.ИндексСтрокиДерева = СтрокаНоменклатуры.Строки.Индекс(СтрокаДокумента);
		СтрокаТЗКопии.ИндексСтрокиРодителя = ТаблицаОшибок.Строки.Индекс(СтрокаНоменклатуры);
		

	КонецЦикла;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 1;
УниверсальныйОтчет.мИмяЭлементаУправленияБыстрыеОтборы = "КоманднаяПанель2";

#КонецЕсли
