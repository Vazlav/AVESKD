////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Обновляет таблицу отчета
//
Процедура ОбновитьОтчет() Экспорт
	
	СформироватьОтчет(ТаблицаОшибок);
	
КонецПроцедуры // ОбновитьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	УниверсальныйОтчет.мДействиеПолеВводаВидСравненияПриИзменении = Новый Действие("ПолеВводаВидСравненияПриИзменении");
	УниверсальныйОтчет.мДействиеПолеВводаЗначениеПриИзменении = Новый Действие("ПолеВводаЗначениеПриИзменении");
	УниверсальныйОтчет.мДействиеКоманднаяПанельФормыПечать = Новый Действие("КоманднаяПанельФормыПечать");
	
	УниверсальныйОтчет.ФормаПриОткрытии(УниверсальныйОтчет, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события при закрытии формы
//
Процедура ПриЗакрытии()
	
	УниверсальныйОтчет.ФормаПриЗакрытии(УниверсальныйОтчет, ЭтотОбъект, ЭтаФорма);
		
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Печать"
//
Процедура КоманднаяПанельФормыПечать(Кнопка)
	
	УниверсальныйОтчет.ФормаПечать(УниверсальныйОтчет, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // КоманднаяПанельФормыПечать()

// Процедура - обработчик нажатия кнопки "Сформировать"
//
Процедура КоманднаяПанельФормыСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры // КоманднаяПанельФормыСформировать()

// Процедура - обработчик нажатия кнопки "Настройка"
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	УниверсальныйОтчет.ФормаНастройка(УниверсальныйОтчет, ЭтотОбъект, ЭтаФорма, ТаблицаОшибок);
	
КонецПроцедуры // КоманднаяПанельФормыНастройка()

// Процедура - обработчик нажатия кнопки "БыстрыеОтборы"
//
Процедура КоманднаяПанельФормыБыстрыеОтборы(Кнопка)
	
	УниверсальныйОтчет.УправлениеОтображениемЭлементовФормы(УниверсальныйОтчет, ЭтаФорма, Кнопка.Имя);
	УниверсальныйОтчет.УправлениеПанельюБыстрыеОтборы(УниверсальныйОтчет, ЭтаФорма);
	
КонецПроцедуры // КоманднаяПанельФормыБыстрыеОтборы()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик нажатия кнопки "КнопкаНастройкаПериода"
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	УниверсальныйОтчет.ФормаНастройкаПериода(УниверсальныйОтчет);
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик нажатия кнопки "КнопкаМинусПериод"
//
Процедура КнопкаМинусПериодНажатие(Элемент)
	
	УниверсальныйОтчет.ФормаМинусПериод(УниверсальныйОтчет);
	
КонецПроцедуры // КнопкаМинусПериодНажатие()

// Процедура - обработчик нажатия кнопки "КнопкаПлюсПериод"
//
Процедура КнопкаПлюсПериодНажатие(Элемент)
	
	УниверсальныйОтчет.ФормаПлюсПериод(УниверсальныйОтчет);
	
КонецПроцедуры // КнопкаПлюсПериодНажатие()

// Процедура - обработчик события "Обработка расшифровки" поля табличного документа "ПолеТабличногоДокументаРезультат"
//
Процедура ПолеТабличногоДокументаРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаРасшифровки(Расшифровка, ОтчетОбъект);
	
КонецПроцедуры // ПолеТабличногоДокументаРезультатОбработкаРасшифровки()

// Процедура - обработчик события "При изменении" поля ввода "ПолеВводаВидСравнения"
//
Процедура ПолеВводаВидСравненияПриИзменении(Элемент)
	
	УниверсальныйОтчет.ВидСравненияПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры // ПолеВводаВидСравненияПриИзменении()

// Процедура - обработчик события "При изменении" полей ввода "Значение", "ЗначениеС", "ЗначениеПо"
//
Процедура ПолеВводаЗначениеПриИзменении(Элемент)
	
	УниверсальныйОтчет.ЗначениеПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры // ПолеВводаВидСравненияПриИзменении()


Процедура КоманднаяПанель2УстановитьФлажки(Кнопка)
	
	Для Каждого СтрокаДерева Из ТаблицаОшибок.Строки Цикл
		УстановитьФлаг(СтрокаДерева, 1);
	КонецЦикла;	
	
КонецПроцедуры

Процедура КоманднаяПанель2СнятьФлажки(Кнопка)
	
	Для Каждого СтрокаДерева Из ТаблицаОшибок.Строки Цикл
		УстановитьФлаг(СтрокаДерева, 0);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьФлаг(СтрокаДерева, Флаг)
	
	СтрокаДерева.Пометка = Флаг;
	Для Каждого СтрокаВложенная Из СтрокаДерева.Строки Цикл
		УстановитьФлаг(СтрокаВложенная, Флаг);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТаблицаОшибокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	                                         
	Если ТипЗнч(ДанныеСтроки.ДанныеСтроки) = Тип("ДокументСсылка.ПоступлениеТовара") Тогда
		ОформлениеСтроки.Ячейки.Представление.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
	Иначе
		ОформлениеСтроки.Ячейки.Представление.УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
	КонецЕсли;	
	
	Если ДанныеСтроки.ДоступностьРасценки = Истина Тогда
		ОформлениеСтроки.ЦветФона=Новый Цвет(192,240,192);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаОшибокПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущиеДанные.ИгнорироватьОшибку = ТекущиеДанные.Пометка;
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли; 
	
	Если ТекущиеДанные.Уровень() = 1 Тогда
		ПометкаРодителя = ТекущиеДанные.Пометка;
		Для каждого Строка Из ТекущиеДанные.Родитель.Строки Цикл
			Если Строка.Пометка <> ПометкаРодителя Тогда
				ПометкаРодителя = 2;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		ТекущиеДанные.Родитель.Пометка = ПометкаРодителя;
	Иначе
		Для каждого Строка Из ТекущиеДанные.Строки Цикл
			Строка.Пометка = ТекущиеДанные.Пометка;
			Строка.ИгнорироватьОшибку = ТекущиеДанные.Пометка;
		КонецЦикла; 
	КонецЕсли;
	
	
	ПроверитьДоступностьРасценки();
	
КонецПроцедуры

Процедура ПроверитьДоступностьРасценки()
	
	ТЗПриходов = Новый ТаблицаЗначений;
	ТЗПриходов.Колонки.Добавить("Сумма");
	ТЗПриходов.Колонки.Добавить("Док");
	ТЗПриходов.Колонки.Добавить("ИгнорироватьОшибку");
	
	Для Каждого СтрокаТовар Из ТаблицаОшибок.Строки Цикл
		
		Для Каждого СтрокаДок Из СтрокаТовар.Строки Цикл
			НоваяСтрока = ТЗПриходов.Добавить();
			НоваяСТрока.Док = СтрокаДок.ДанныеСтроки;
			НоваяСтрока.ИгнорироватьОшибку = Число(СтрокаДок.Пометка);
			НоваяСтрока.Сумма = 1;
		КонецЦикла;
	КонецЦикла;	
	
	ТЗПриходов.Свернуть("Док","Сумма,ИгнорироватьОшибку");
	ЗначениеДоступности = Ложь;
	Для каждого стр из ТЗПриходов Цикл
		Если стр.Сумма <> стр.ИгнорироватьОшибку Тогда
			ЗначениеДоступности = Ложь;
		Иначе
			ЗначениеДоступности = Истина;
		КонецЕсли;
		НайденныеСтроки = ТаблицаОшибокКопия.НайтиСтроки(Новый Структура("Док",стр.Док));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого ТекСтрока из НайденныеСтроки Цикл
				РодительСтроки = ТаблицаОшибок.Строки.Получить(ТекСтрока.ИндексСтрокиРодителя);
				РодительСтроки.Строки.Получить(ТекСтрока.ИндексСтрокиДерева).ДоступностьРасценки = ЗначениеДоступности ;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	ТЗПриходов= Неопределено;

КонецПроцедуры

Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ВыбраннаяСтрока.ДанныеСтроки.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанель2Свернуть(Кнопка)
	
	Для Каждого СтрокаДерева Из ТаблицаОшибок.Строки Цикл
		ЭлементыФормы.ТаблицаОшибок.Свернуть(СтрокаДерева);
	КонецЦикла;	
	
КонецПроцедуры

Процедура КоманднаяПанель2Развернуть(Кнопка)
	
	Для Каждого СтрокаДерева Из ТаблицаОшибок.Строки Цикл
		ЭлементыФормы.ТаблицаОшибок.Развернуть(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель2ОтметитьПоПоставщику(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаОшибок.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока.ДанныеСтроки) = Тип("ДокументСсылка.ПоступлениеТовара") Тогда
		Если Найти(ТекущаяСтрока.Ошибка, "Превышение закупочной цены!") <> 0 Тогда
			ТипОшибки = "Превышение закупочной цены!";
		ИначеЕсли Найти(ТекущаяСтрока.Ошибка, "ЦЕНЫ НЕТ В ГОСРЕЕСТРЕ") <> 0 Тогда
			ТипОшибки = "ЦЕНЫ НЕТ В ГОСРЕЕСТРЕ";
		Иначе
			ТипОшибки = "Заниженный процент наценки!";
		КонецЕсли;
		
		Поставщик = ТекущаяСтрока.Поставщик;
		ПометкаРодителя = 1;
		Для Каждого СтрокаДерева Из ТекущаяСтрока.Родитель.Строки Цикл
			Если СтрокаДерева.Поставщик = Поставщик И Найти(СтрокаДерева.Ошибка, ТипОшибки) <> 0 Тогда
				СтрокаДерева.Пометка = 1;
			Иначе
				ПометкаРодителя = 2;
			КонецЕсли;	
		КонецЦикла;
		ТекущаяСтрока.Родитель.Пометка = ПометкаРодителя;
	КонецЕсли;	
	
КонецПроцедуры

Функция РасценитьДокумент(Документ)
	
		
	//Для каждого стр из Документ.Товар Цикл
	//	ОМ1_ОбновитьДанныеПартии(стр,Документ);	
	//КонецЦикла;
	
	
	ПараметрыРасценки = Новый Структура;
	
	ПараметрыРасценки.Вставить("Авторасценка",Истина) ;
	ПараметрыРасценки.Вставить("Склад",Документ.СКЛАД);
	ПараметрыРасценки.Вставить("Документ",Документ.Ссылка) ;
	ПараметрыРасценки.Вставить("ТипДокумента",ТипЗнч(Документ.Ссылка)) ;
	ПараметрыРасценки.Вставить("ВидДокумента",Документ.Метаданные().Имя) ;
	ПараметрыРасценки.Вставить("Комментировать",Ложь);
	ПараметрыРасценки.Вставить("ВыводитьНеРасцененные",Ложь);
	ПараметрыРасценки.Вставить("Регион",Документ.Склад.Регион);	
	ПараметрыРасценки.Вставить("МинимальныйПроцентНаценкиКромеТопов",0);
	ПараметрыРасценки.Вставить("ЗаписыватьЦеныВРегистрЦен",Ложь);
	ПараметрыРасценки.Вставить("УстановитьрозничныеЦеныВДокументе",Истина);
	ПараметрыРасценки.Вставить("ИспользоватьЦеныКонкурентов",Ложь);
	ПараметрыРасценки.Вставить("ПроверятьЗакупкуИРозницу",Истина);

	
	СтруктураРезультата = Расценка.Расценить(ПараметрыРасценки);
	ТЗ = СтруктураРезультата.ТП;
	ТЗКосяков = СтруктураРезультата.ТЗКосяков;
	Результат = СтруктураРезультата.Результат;
	КоличествоОшибокРасценки = СтруктураРезультата.КоличествоОшибокРасценки;
	
	Для каждого стр из ТЗ Цикл
		Если стр.ЦенаРозн = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТЧ = Документ.Товар;
		СтрокаТЧ  = ТЧ.Найти(стр.Партия,"Партия");
		Если НЕ СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ.ЦенаРозн=стр.ЦенаРозн;	
				СтрокаТЧ.СуммаРозн=СтрокаТЧ.ЦенаРозн*СтрокаТЧ.КоличествоФакт;
				
				Если  СтрокаТЧ.СуммаЗакуп<>0 и СтрокаТЧ.СуммаРозн<>0 Тогда
					СтрокаТЧ.ПроцентРознНац=(СтрокаТЧ.СуммаРозн/СтрокаТЧ.СуммаЗакуп-1)*100;
				ИначеЕсли СтрокаТЧ.ЦенаРозн<>0 и СтрокаТЧ.ЦенаЗакуп<>0 ТОГДА
					СтрокаТЧ.ПроцентРознНац=(СтрокаТЧ.ЦенаРозн/СтрокаТЧ.ЦенаЗакуп-1)*100;
				КонецЕсли;	
				
				СтрокаТЧ.НДСРозн=ОМ3_НДСИзСуммыПоСтавке(СтрокаТЧ.СуммаРозн,СтрокаТЧ.СтавкаНДС);

		КонецЕсли;
	КонецЦикла;
	
	Если ТЗКосяков.Количество()>0 или Результат = Ложь ТОгда
		Документ.Статус=Перечисления.СтатусПрихода.ПроблемыСРасценкой;
		Для каждого Стр из ТЗКосяков Цикл
			СтрОп=Документ.ОшибкиРасценки.Добавить();
			СтрОП.Товар 	= Стр.Товар;
			СтрОП.Партия 	= Стр.Партия;
			СтрОП.ОписаниеОшибки= Стр.Косяк;
			СтрОП.ЦенаПоРасценке= Стр.ЦенаПоРасценке;
		КонецЦикла;
	Иначе
		Документ.Статус=Перечисления.СтатусПрихода.Расценен;
	КонецЕсли;

		
	СтрИзм=Документ.Изменения.Добавить();
	СтрИзм.Дата=ТекущаяДата();
	СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
	СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.АвтоРасценка;
	КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+ТЗКосяков.Количество();
	СтрИзм.КомментарийИзменения="Ошибок при расценке "+КоличествоОшибокРАсценки;		
	
	
	Для н = 0 По 5 Цикл
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Запись);
			Прервать;
		Исключение
			Предупреждение("Ожидание блокировки",1);
		КонецПопытки;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Процедура ПровестиИВыгрузитьДокументВАптеку(Док)
	
	ДокументПровелся=Ложь;
	Для к = 1 по 3 Цикл
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ДокументПровелся=Истина;
			Прервать;
		Исключение
			ДокументПровелся=Ложь;
			Предупреждение("Проведение документа. Ожидание блокировки...2 сек",2);
		КонецПопытки;
	КонецЦикла;
	
	Склад = Док.Склад;
	
	Если (ДокументПровелся = Истина) и (Склад.НеВыгружатьНакладныеАвтоматически = Ложь) Тогда
		
		
				//--------------------------------------------------------------------------------------
			//Определяем смеху работы аптеки (комиссия/купля-продажа)
			//Если по комиссии, то склад подменяем на склад на комитент
			//--------------------------------------------------------------------------------------
			СтруктураКомиссии = Новый Структура;
			СтруктураКомиссии.Вставить("РаботаТолькоПоКомиссии",Ложь);

			Попытка
				
				Если Склад.РаботаТолькоПоКомиссии = Истина И Склад.Комитент.Пустая() = Ложь Тогда
					СтруктураКомиссии["РаботаТолькоПоКомиссии"] = Истина;
					СтруктураКомиссии.Вставить("ФирмаКомиссионер",Склад.Фирма);
					СтруктураКомиссии.Вставить("СкладКомиссионер",Склад);
					
					Склад = Склад.Комитент;	
					
					СтруктураКомиссии.Вставить("ФирмаКомитент",Склад.Фирма);
					СтруктураКомиссии.Вставить("СкладКомитент",Склад);				
					
					
				КонецЕсли;
			Исключение
			КонецПопытки;
			// Нашли склад, если не нашли. то возврат ложь

		
		
		
		Если СтруктураКомиссии["РаботаТолькоПоКомиссии"] = Истина Тогда
			ОбработкаПередачи = Обработки.ПередачаНаКомиссию.Создать();
			ОбработкаПередачи.ДокОснование = Док.Ссылка;
			ОбработкаПередачи.СкладКомиссионер = СтруктураКомиссии["СкладКомиссионер"];
			ОбработкаПередачи.ФирмаКомиссионер = СтруктураКомиссии["ФирмаКомиссионер"];
			НачатьТранзакцию();
			Попытка
				Результат = ОбработкаПередачи.ПередатьНаКомиссию();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
			
		Иначе
			Док.ВыгрузитьВАптеку();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасценить(Кнопка)
	
	Если Вопрос("Выбранные документы будут перерасценены. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	//Для Каждого СтрокаТовар Из ТаблицаОшибок.Строки Цикл
	//	Если СтрокаТовар.Пометка = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Для Каждого СтрокаДок Из СтрокаТовар.Строки Цикл
	//		Если СтрокаДок.Пометка = 0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Док = СтрокаДок.ДанныеСтроки.ПолучитьОбъект();
	//		Док.ОшибкиРасценки[СтрокаДок.НомерСтроки - 1].ИгнорироватьОшибку = Истина;
	//		Если НЕ ЗаписатьДокумент(Док, РежимЗаписиДокумента.Запись) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если РасценитьДокумент(Док)= Истина Тогда
	//			ПровестиИВыгрузитьДокументВАптеку(Док);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//КонецЦикла;
	
	ТЗПриходов = Новый ТаблицаЗначений;
	ТЗПриходов.Колонки.Добавить("Сумма");
	ТЗПриходов.Колонки.Добавить("Док");
	ТЗПриходов.Колонки.Добавить("ДоступностьРасценки");
	
	Для Каждого СтрокаТовар Из ТаблицаОшибок.Строки Цикл
		
		Для Каждого СтрокаДок Из СтрокаТовар.Строки Цикл
			НоваяСтрока = ТЗПриходов.Добавить();
			НоваяСТрока.Док = СтрокаДок.ДанныеСтроки;
			НоваяСтрока.ДоступностьРасценки = Число(СтрокаДок.ДоступностьРасценки);
			НоваяСтрока.Сумма = 1;
		КонецЦикла;
	КонецЦикла;	
	
	ТЗПриходов.Свернуть("Док","Сумма,ДоступностьРасценки");
	Для каждого стр из ТЗПриходов Цикл
		Если стр.Сумма <> стр.ДоступностьРасценки Тогда
			Продолжить;
		КонецЕсли;
		Сообщить("Обрабатывается документ : "+стр.Док + " ");
		ДокОбъект = стр.Док.ПолучитьОбъект();
		Для каждого СтрТЧ ИЗ ДокОбъект.ОшибкиРасценки Цикл
			СтрТЧ.ИгнорироватьОшибку = Истина;	
		КонецЦикла;
		
		Если НЕ ЗаписатьДокумент(ДокОбъект, РежимЗаписиДокумента.Запись) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РасценитьДокумент(ДокОбъект)= Истина Тогда
			ПровестиИВыгрузитьДокументВАптеку(ДокОбъект);
		КонецЕсли;		
		
		ОбщегоНазначения.Задержка(3);
	КонецЦикла;
	ТЗПриходов= Неопределено;
	
	ОбновитьОтчет();


	
КонецПроцедуры

Функция ЗаписатьДокумент(Док, РежимЗаписи)
	
	Попытка
		Док.Записать(РежимЗаписи);
	Исключение
		Сообщить("Ошибка при обработке документа: " + Док.Ссылка, СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	
