Функция ПолучитьПодключение(ИмяПодключения)
    АДО=Новый COMОбъект("ADOdb.Connection");
    
    
    Настройка=Справочники.НастройкаПодключенияКPGСерверамОбмена.НайтиПоНаименованию(СокрЛП(ИмяПодключения));
    
    Если Настройка.Пустая() Тогда
        ЗаписьЖурналаРегистрации("PG", ,,,"Не нашел настройку "+СокрЛП(ИмяПодключения)) ;
        Возврат Неопределено;
    КонецЕсли;    
    
    Драйвер=СокрЛП(Настройка.Драйвер);//"PostgreSQL UNICODE(x64)";
    Сервер=СокрЛП(Настройка.Сервер);//"10.8.10.196";
    Порт=Формат(Настройка.Порт,"ЧГ=");//"5432";
    База=СокрЛП(Настройка.База);//"ids$apteka$repl";
    Пользователь=СокрЛП(Настройка.Пользователь);//"postgres";
    Пароль=СокрЛП(Настройка.Пароль);//"138963";
    
    Попытка
        АДО.Open("Driver={"+Драйвер+"};Server="+Сервер+";Port="+Порт+";Database="+База+";Uid="+Пользователь+";Pwd="+Пароль+";");
        Возврат АДО;
    Исключение
        Возврат Неопределено;
    КонецПопытки;
    
КонецФункции   



Процедура КнопкаВыполнитьНажатие(Кнопка)
    // Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДатаОткрытие(Элемент, СтандартнаяОбработка)
    ПоискДанных();
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
    ПоискДанных();
КонецПроцедуры

Процедура ПоискДанных()
    
    ЭлементыФормы.КЧФТП.Заголовок="";
    ЭлементыФормы.КЧПГ.Заголовок="";
    ПодхФайл="";
    СтрокВФайле="";
    
    ЭлементыФормы.ПеревыгрузитьСФТП.Доступность=Ложь;
    ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Ложь;
    ЭлементыФормы.ПеревыгрузитьDBFВыручку.Доступность=Ложь;
    
    
    Если Аптека.Пустая() Тогда
        Предупреждение("Аптека не выбрана!");
        Возврат;
    КонецЕсли;
    
    Если Дата=Дата("00010101") Тогда
        Предупреждение("Не указана дата!");
        Возврат;
    КонецЕсли;    
    
    
    
    
    
    // Восстанавливаем файлы из бэкапа сразу в виндовскую шару, минуя процесс перетаскивания
    // с линуксового фтп на винду через регламендт.
    
    //---------------<Отдельное подключение к фтп>---------------------------// GtG // 03.01.2014 14:37:39
    Сервер="192.168.10.1";
    Порт=2121;
    ИмяПользователя ="check";
    ПарольПользователя="Check_Upload";
    Прокси ="";
    ПассивноеСоединение=Истина;
    Таймаут=30;
    
    Попытка
        FTP=Новый  FTPСоединение(Сервер, Порт, ИмяПользователя, ПарольПользователя, Прокси, ПассивноеСоединение, Таймаут) ;
    Исключение
        Предупреждение("Какая-то проблема с интернетом. Нет доступа к FTP серверу "+символы.пс+ОписаниеОшибки(),15);
        Возврат;
    КонецПопытки;
    //---------------<>---------------------------// GtG // 03.01.2014 14:37:53
    
    ПутьВиндовскойШары=Константы.КаталогФТП.Получить()+"KKM_CHECKS_CSV";
    
    ВсегоВосстановлено=0;
    
    ПутьКФайламБэкапа="/backup/"+Формат(Дата,"ДФ=yyyy")+"/"+Формат(Аптека.Код,"ЧЦ=5; ЧВН=; ЧГ=");//  /backup/2014/00064/0000200303/2014-01-01
    
    попытка
        
        СписокПутейККассам=FTP.НайтиФайлы(ПутьКФайламБэкапа,"*",ложь);
        если СписокПутейККассам.Количество()=0  тогда
            ЭлементыФормы.КЧФТП.Заголовок="0";
            ЭлементыФормы.ПеревыгрузитьСФТП.Доступность=Ложь;
            
        Иначе
            //Конецпопытки;
            КФТП=0;
            Для Каждого ПапкаКассы Из СписокПутейККассам Цикл
                
                //Сообщить(ПапкаКассы.ПолноеИмя);
                // это типа  /backup/2014/00064/0000200303
                
                ПапкаДатыВыручки=ПапкаКассы.ПолноеИмя+"/"+Формат(Дата,"ДФ=yyyy-MM-dd");
                //Попытка
                
                СписокФайловДляВосстановления=FTP.НайтиФайлы(ПапкаДатыВыручки,"*.csv",ложь);
                если СписокФайловДляВосстановления.Количество()=0 тогда
                    Продолжить;
                КонецЕсли;
                КФТП=КФТП+СписокФайловДляВосстановления.Количество();
            КонецЦикла;	
            ЭлементыФормы.КЧФТП.Заголовок=КФТП;
            ЭлементыФормы.ПеревыгрузитьСФТП.Доступность=Истина;
        конецесли;    
        
    Исключение
        
        ЭлементыФормы.КЧФТП.Заголовок="0"; 
        ЭлементыФормы.ПеревыгрузитьСФТП.Доступность=Ложь;
        
    КонецПопытки;    
    //---------------<Ищем на постгрее>---------------------------// GtG // 30.04.2014 14:54:11 
    ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Ложь;
    ПГ=ПолучитьПодключение("Перевыгрузка Чеков");
    
    ПГТХТ="
    |/*-------------------------------------/
    |/  Количество чеков по аптеке по дате  /
    |/-------------------------------------*/
    |
    |Select Count(id) from repl.store_packs
    |where 
    |id in 
    |(
    |
    |Select id from repl.store_packs as Data
    |Inner Join 
    |(
    |SELECT  distinct id_dep, posnum, shiftnum
    |FROM repl.store_packs 
    |where id_dep='"+Формат(Аптека.Код,"ЧЦ=5; ЧВН=; ЧГ=")+"'
    |and date_trunc('day',doc_dt) ='"+Формат(НачалоДня(Дата),"ДФ='yyyy-MM-dd HH:mm:ss'")+"'
    |) as filter
    |on
    |Data.id_dep=filter.id_dep
    |and
    |Data.posnum=filter.posnum
    |and
    |Data.shiftnum=filter.shiftnum
    |)
    |;";
    
    Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
    Попытка 
        АДО_рекордСет.Open(ПГТХТ,ПГ,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        ЭлементыФормы.КЧПГ.Заголовок="0";
        ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Ложь;
    КонецПопытки;
    
    Попытка
        АДО_рекордСет.MoveFirst();
    Исключение
        ЭлементыФормы.КЧПГ.Заголовок="0";
        ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Ложь;
    КонецПопытки;    
    
    ЭлементыФормы.КЧПГ.Заголовок=АДО_рекордСет.Fields(0).Value;
    Если  АДО_рекордСет.Fields(0).Value >0 Тогда
        ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Истина;
    КонецЕсли;
    
    //---------------<Данные про онлайновость аптеки>---------------------------// GtG // 19.05.2014 20:45:04
    ПГТХТ="SELECT 
	|
	|floor(extract (epoch from (now()-modifydatetime)))::integer sec_qty
|FROM repl.loc_info 
|where id_dep='{"+Формат(Аптека.Код,"ЧГ=0")+",0}'";

Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
    Попытка 
        АДО_рекордСет.Open(ПГТХТ,ПГ,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        
    КонецПопытки;
    
    Попытка
        АДО_рекордСет.MoveFirst();
        БылаОнлайнСекундНазад=АДО_рекордСет.Fields(0).Value;
        ЭлементыФормы.НадписьПроОнлайн.Заголовок="Была онлайн "+БылаОнлайнСекундНазад+" секунд назад";
    
    Исключение
        
    КонецПопытки;    
    
    
    ПГ.Close();

    
    
    
    
    
    
    
    
    
    
    
    
КонецПроцедуры    

Процедура Надпись4Нажатие(Элемент)
    ЗапуститьПриложение("\\id-app-01\common\IT\1C\PG odbc driver\psqlodbc_09_03_0210");
КонецПроцедуры

Процедура ОсновныеДействияФормыГенераторСкриптаНаВыгрузкуЧеков(Кнопка)
    
    
    БазовыйТекст=	
    "SELECT
    | 'sales', 
    | aid,
    | cash.save_str_to_csv(aid), 
    | ndoc::varchar(20), 
    | ddoc  
    | FROM cash.cash_str 
    |	WHERE id_type in (1, 2) 
    |	and 
    |	id_hdr in (Select aid from cash.cash_hdr where ddoc::date = '####')
    |
    |union all
    |
    |SELECT
    | 'system', 
    | aid,
    | cash.save_sys_to_csv(aid), 
    | ndoc::varchar(20), 
    | ddoc  
    | FROM cash.cash_str 
    |	WHERE id_type not in (1, 2, 9, 10) 
    |	and 
    |	id_hdr in (Select aid from cash.cash_hdr where ddoc::date = '####')
    |
    |  union all
    |  
    |  SELECT
    | 'avans', 
    | aid,
    | cash.save_adv_to_csv(aid), 
    | ndoc::varchar(20), 
    | ddoc  
    | FROM cash.cash_str 
    |	WHERE id_type in (9, 10) 
    |	and 
    |	id_hdr in (Select aid from cash.cash_hdr where ddoc::date = '####')
    |
    |  union all
    |  
    |  SELECT
    | 'np sales', 
    | aid,
    | cash.save_np_str_to_csv(aid), 
    | ndoc::varchar(20), 
    | ddoc  
    | FROM cash.cash_str 
    |	WHERE id_type in (5, 7) 
    |	and 
    |	id_hdr in (Select aid from cash.cash_hdr where ddoc::date = '####')
    |
    | union all      
    |
    | Select 'hdr',
    |	aid,
    |	cash.save_hdr_to_csv(aid),
    |	ndoc::varchar(20),
    |	ddoc
    | from cash.cash_hdr 
	|where 
	|   ddoc::date = '####' 
	|   and
	|   is_posting =true ";
    
    ТХТ=Новый ТекстовыйДокумент;
    
    
    ТХТ.ДобавитьСтроку("-------- "+Аптека+" /// "+Аптека.Код+" /// "+ Формат(Дата,"ДЛФ=D")+"   ------------------");
    ТХТ.ДобавитьСтроку("");
    ТХТ.ДобавитьСтроку(СтрЗаменить(БазовыйТекст,"####",Формат(Дата,"ДФ=yyyy-MM-dd")  ));
    ТХТ.ДобавитьСтроку(";");
    ТХТ.ДобавитьСтроку("");
    
    
    
    ТХТ.Показать();
    
    
    
КонецПроцедуры

Процедура УдалитьРеализацииЗаДату();
    Запрос=Новый Запрос("ВЫБРАТЬ
    |   РеализацияККМ.Ссылка
    |ИЗ
    |   Документ.РеализацияККМ КАК РеализацияККМ
    |ГДЕ
    |   РеализацияККМ.Склад = &Склад
    |   И РеализацияККМ.Дата МЕЖДУ &Дата1 И &Дата2
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   СменаККМ.Ссылка
    |ИЗ
    |   Документ.СменаККМ КАК СменаККМ
    |ГДЕ
    |   СменаККМ.Склад = &Склад
    |   И СменаККМ.Дата МЕЖДУ &Дата1 И &Дата2");
    
    Запрос.УстановитьПараметр("Склад",Аптека);
    Запрос.УстановитьПараметр("Дата1",НачалоДня(Дата));
    Запрос.УстановитьПараметр("Дата2",КонецДня(Дата));
    
    Рез=Запрос.Выполнить();
    
    Если Рез.Пустой()=Ложь Тогда
        
        Выб=Рез.Выбрать();
        Пока Выб.Следующий() Цикл
            Сообщить("Удаляем "+Выб.Ссылка);
            Выб.Ссылка.ПолучитьОбъект().Удалить();
        КонецЦикла;
    Конецесли;
    
КонецПроцедуры    


Процедура ПеревыгрузитьСФТПНажатие(Элемент)
    
    // Восстанавливаем файлы из бэкапа сразу в виндовскую шару, минуя процесс перетаскивания
    // с линуксового фтп на винду через регламендт.
    
    
    УдалитьРеализацииЗаДату();
    
    //---------------<Отдельное подключение к фтп>---------------------------// GtG // 03.01.2014 14:37:39
    Сервер="192.168.10.1";
    Порт=2121;
    ИмяПользователя ="check";
    ПарольПользователя="Check_Upload";
    Прокси ="";
    ПассивноеСоединение=Истина;
    Таймаут=30;
    
    Попытка
        FTP=Новый  FTPСоединение(Сервер, Порт, ИмяПользователя, ПарольПользователя, Прокси, ПассивноеСоединение, Таймаут) ;
    Исключение
        Предупреждение("Какая-то проблема с интернетом. Нет доступа к FTP серверу "+символы.пс+ОписаниеОшибки(),15);
        Возврат;
    КонецПопытки;
    //---------------<>---------------------------// GtG // 03.01.2014 14:37:53
    
    ПутьВиндовскойШары=Константы.КаталогФТП.Получить()+"KKM_CHECKS_CSV";
    
    ВсегоВосстановлено=0;
    
    
    
    Сообщить("Восстанавливаем чеки за "+Дата+" по аптеке "+Аптека);
    
    ПутьКФайламБэкапа="/backup/"+Формат(Дата,"ДФ=yyyy")+"/"+Формат(Аптека.Код,"ЧЦ=5; ЧВН=; ЧГ=");//  /backup/2014/00064/0000200303/2014-01-01
    
    //попытка
    СписокПутейККассам=FTP.НайтиФайлы(ПутьКФайламБэкапа,"*",ложь);
    //Исключение
    если СписокПутейККассам.Количество()=0  тогда
        Сообщить("Нет ничего по коду "+Формат(Аптека.Код,"ЧЦ=5; ЧВН=; ЧГ="));
        Возврат;
    конецесли;    
    //Конецпопытки;
    
    Для Каждого ПапкаКассы Из СписокПутейККассам Цикл
        
        //Сообщить(ПапкаКассы.ПолноеИмя);
        // это типа  /backup/2014/00064/0000200303
        
        ПапкаДатыВыручки=ПапкаКассы.ПолноеИмя+"/"+Формат(Дата,"ДФ=yyyy-MM-dd");
        //Попытка
        
        СписокФайловДляВосстановления=FTP.НайтиФайлы(ПапкаДатыВыручки,"*.csv",ложь);
        если СписокФайловДляВосстановления.Количество()=0 тогда
            //Исключение
            Сообщить("Нет файлов по дате по коду "+Формат(Аптека.Код,"ЧЦ=5; ЧВН=; ЧГ="));
            Продолжить;
        КонецЕсли;
        //КонецПопытки;
        
        КолвоХХХ=СписокФайловДляВосстановления.Количество();
        
        Сообщить("Найдено для восстановления по аптеке "+Аптека.Код+" по кассе "+ПапкаКассы.ИмяБезРасширения+" файлов для перевыгрузки "+КолвоХХХ+" штук");
        
        //---------------<Определяем версию формата в который восстанавливать>---------------------------// GtG // 09.01.2014 12:56:29
        // Если есть хотя бы один чек с именем типа ???_ то эту смену нужно грузить в первом формате.
        // второй от первого отличается наличием доп колонки с ид смены
        
        ПервыйФормат=Ложь;
        Для Каждого Файл Из СписокФайловДляВосстановления Цикл
            
            Если Найти(Файл.Имя,"hdr_")<>0 или
                Найти(Файл.Имя,"str_")<>0 или
                Найти(Файл.Имя,"adv_")<>0 или
                Найти(Файл.Имя,"sys_")<>0 тогда
                ПервыйФормат=Истина;
                Прервать;
            КонецЕсли;	
            
        КонецЦикла;
        
        ХХХ=0;
        ПодменаФормата=0;
        Для Каждого Файл Из СписокФайловДляВосстановления Цикл
            ХХХ=ХХХ+1;
            
            Если ПервыйФормат=Истина Тогда
                ФайлИмя=Файл.Имя;
                ФайлИмя=СтрЗаменить(ФайлИмя,"str2_","str_");
                ФайлИмя=СтрЗаменить(ФайлИмя,"hdr2_","hdr_");
                ФайлИмя=СтрЗаменить(ФайлИмя,"sys2_","sys_");
                ФайлИмя=СтрЗаменить(ФайлИмя,"adv2_","adv_");
                ПодменаФормата=ПодменаФормата+1;
            Иначе
                ФайлИмя=Файл.Имя;
            Конецесли;	
            
            
            
            FTP.Получить(Файл.ПолноеИмя,ПутьВиндовскойШары+"\"+ФайлИмя);
            Состояние("Скопировано "+ХХХ+" из "+КолвоХХХ+" по апт."+Аптека.Код+" Подмена формата у "+ПодменаФормата+" файлов");
        КонецЦикла;	
        
        ВсегоВосстановлено=ВсегоВосстановлено+ХХХ;
        
    КонецЦикла;		
    
    
    Предупреждение("Восстановлено "+ВсегоВосстановлено+" файлов",10);
    
    
КонецПроцедуры

Процедура ПеревыгрузитьИзPGНажатие(Элемент)
    
   // УдалитьРеализацииЗаДату();
   
   ПРедупреждение("Существующие документы Реализация ККМ и Смены ККМ НЕ удаляются!");
   
    
    
    ПГ=ПолучитьПодключение("Перевыгрузка Чеков");
    
    ПГТХТ="/*------------ Перевыгрузка последнего варианта данных -----------------*/
	|Update repl.store_packs set processed=false 
	|where 
	|id in 
	|(
	|  select id from ( 
	|Select 
	|max(Data.id) as id, 
	|Data.pack_type,
	|Data.id_dep,
	|Data.doc_dt,
	|Data.posnum,
	|Data.shiftnum,
	|Data.ncheck
	| from repl.store_packs as Data
	|Inner Join 
	|(
	|	SELECT  distinct id_dep, posnum, shiftnum
	|	FROM repl.store_packs 
	|	where id_dep='"+Формат(Аптека.Код,"ЧЦ=5; ЧВН=; ЧГ=")+"'
	|	and date_trunc('day',doc_dt) ='"+Формат(НачалоДня(Дата),"ДФ='yyyy-MM-dd HH:mm:ss'")+"'
	|) as filter
	|on
	|Data.id_dep=filter.id_dep
	|and
	|Data.posnum=filter.posnum
	|and
	|Data.shiftnum=filter.shiftnum
	|Group by
	|	Data.pack_type,
	|Data.id_dep,
	|Data.doc_dt,
	|Data.posnum,
	|Data.shiftnum,
	|Data.ncheck) as idlist) ";
	
	Попытка
		ПГ.Execute(ПГТХТ);
	Исключение
		Сообщить(""+ОписаниеОшибки()+Символы.ПС+ПГТХТ);
	КонецПопытки;
    
КонецПроцедуры

Процедура АптекаПриИзменении(Элемент)
    ЭлементыФормы.КЧФТП.Заголовок="";
    ЭлементыФормы.КЧПГ.Заголовок="";
    Код=Аптека.Код;
    
    ПутьКБэкапамДБФ=Константы.КаталогФТП.Получить()+"\OUT\KKM_Backup\"+Формат(Код,"ЧЦ=5; ЧГ=");
    
    ЭлементыФормы.ПеревыгрузитьСФТП.Доступность=Ложь;
    ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Ложь;
    ЭлементыФормы.ПеревыгрузитьDBFВыручку.Доступность=Ложь;
    
КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
    Аптека=Справочники.МестаХранения.НайтиПоКоду(Код);
    ПутьКБэкапамДБФ=Константы.КаталогФТП.Получить()+"\OUT\KKM_Backup\"+Формат(Код,"ЧЦ=5; ЧГ=");
    
КонецПроцедуры

Процедура ОбыскатьНажатие(Элемент)
    
    ПодхФайл="";
    СтрокВФайле="";
    
    //---------------<Ищем среди файлов за дату перевыгрузки плюс пару дней>---------------------------// GtG // 30.04.2014 23:24:14 
    СписокФайлов=Новый Массив;
    //kkm582_20140417065655046.zip
    
    Для Ы=0 по МаксФайлов Цикл
        Маска="kkm"+Формат(Код,"ЧГ=")+"_"+Формат(Дата+ы*24*60*60,"ДФ=yyyyMMdd")+"*.zip";
        
        
        МФ=   НайтиФайлы(ПутьКБэкапамДБФ,Маска);
        
        Для Каждого Ф из МФ Цикл
            СписокФайлов.Добавить(Ф); 
        КонецЦикла;    
    КонецЦикла; 
    
    //---------------<Выворачиваем что там есть в этих файлах>---------------------------// GtG // 30.04.2014 23:29:15
    
    ТЗ=Новый ТаблицаЗначений;
    ТЗ.Колонки.Добавить("ПИФ");
    ТЗ.Колонки.Добавить("НужныхСтрок");
    
    ЭлементыФормы.Индикатор1.Значение=0;
    ЭлементыФормы.Индикатор1.МаксимальноеЗначение=СписокФайлов.Количество();
    
    Для Каждого Ф Из СписокФайлов Цикл
        Состояние(Ф.ПолноеИмя);
        ЭлементыФормы.Индикатор1.Значение=ЭлементыФормы.Индикатор1.Значение+1;
        
        СтрТЗ=ТЗ.Добавить();
        СтрТЗ.Пиф=Ф.ПолноеИмя;
        СтрТЗ.НужныхСтрок=0;
        
        
        ДБФФайл=ОМ17_РаспаковатьФайлВоВременныйКаталогИПереименоватьЕго(Ф.ПолноеИмя,"YKKM_tmp.DBF");
        
        //==================<Считываем ДБФ в таблицу значений>===================GtG====14.01.2008
        ДБФ= Новый  XBase;
        
        
        //==================<Сразу Отсеиваем пустые файлы>===================GtG====18.01.2008
        
        Попытка // битые файлы могут быть
            ДБФ.ОткрытьФайл(ДБФФайл);
            
            
            Если ДБФ.КоличествоЗаписей()=0 Тогда
                
                
                Попытка
                    ДБФ.ЗакрытьФайл();
                Исключение
                КонецПопытки;
                
                
                Продолжить;
            Иначе
                
                Для Ый=1 По ДБФ.КоличествоЗаписей() Цикл
                    ДБФ.Перейти(Ый);
                    Если НачалоДня(Дата(ДБФ.DTDOC))=НачалоДня(Дата) ТОгда
                        СтрТЗ.НужныхСтрок=СтрТЗ.НужныхСтрок+1;
                    КонецЕсли;    
                КонецЦикла;   
                ДБФ.ЗакрытьФайл(); 
            КонецЕсли; 	
            
        ИСключение //(Битый файл) запросить у аптеки новую выгрузку файла
            
            Попытка
                ДБФ.ЗакрытьФайл();
            Исключение
            КонецПопытки;
            
            Продолжить;
        КонецПопытки; 	
        
    КонецЦикла;    
    
    
    ТЗ.Сортировать("НужныхСтрок desc");
    
    
    //---------------<Файл с максимальным количеством нужных строк и есть самый подходящий>---------------------------// GtG // 30.04.2014 23:42:40
    Если ТЗ.Количество()>0 Тогда
        Если ТЗ.Получить(0).НужныхСтрок=0 Тогда
            ПодхФайл="Не найдено!";
        Иначе
            ПодхФайл=ТЗ.Получить(0).ПИФ;
            СтрокВФайле=ТЗ.Получить(0).НужныхСтрок;
            
            ЭлементыФормы.ПеревыгрузитьDBFВыручку.Доступность=Истина;
            
        КонецЕсли;
    Иначе
        ПодхФайл="Не найдено!";
    КонецЕсли;
    
    
    
    
    
КонецПроцедуры

Процедура ПеревыгрузитьDBFВыручкуНажатие(Элемент)
    
    Если ПодхФайл="Не найдено!" Или ПустаяСтрока(ПодхФайл) Тогда
        Возврат;
    КонецЕсли;
    
    Ф=Новый Файл(ПодхФайл);
    
    УдалитьРеализацииЗаДату();
    КопироватьФайл(ПодхФайл,Константы.КаталогФТП.Получить()+"Out\"+Ф.Имя);
    
    
    
    
    Предупреждение("Файл "+ПодхФайл+" скопирован в папку загрузки ",5);
КонецПроцедуры

Процедура tvНажатие(Элемент)
    ПРЕДУПРЕЖДЕНИЕ("КОГДА-НИБУДЬ ЭТО БУДЕТ РАБОТАТЬ");
    //    Are there parameters to start TeamViewer?
    
    //TeamViewer can be run via command line using different parameters which have to be preceded with a "--" (e.g. --Password 123456). Alternatively you may also use the short form which is executed with a "-" in the beginning (e.g. -P 123456).
    
    //Below you can see an example of a command line in which TeamViewer is connecting to a specific ID, using a predefined password and a preset connection mode:
    
    //C:\Program Files\TeamViewer\Version8\teamviewer.exe -i 18876347 --Password test -m fileTransfer
    //The available connection modes are:
    
    //    Remote-Control:
    //    teamviewer.exe -i <ID> --Password <Password>
    //    FileTransfer:
    //    teamviewer.exe -i <ID> --Password <Password> -m fileTransfer
    //    VPN:
    //    teamviewer.exe -i <ID> --Password <Password> -m vpn
    
КонецПроцедуры

Процедура ОбновитьАЧРНажатие(Элемент)
    ОбновлениеАЧР();
    
КонецПроцедуры

Процедура ОбновлениеАЧР()
    
    Запрос=Новый Запрос("ВЫБРАТЬ
    |   Х.ПослЗапуск,
    |   Х.Робот
    |ИЗ
    |   (ВЫБРАТЬ
    |       МАКСИМУМ(ЛогЗагрузкиЧеков.Дата) КАК ПослЗапуск,
    |       ПОДСТРОКА(ЛогЗагрузкиЧеков.Сообщение, 1, 50) КАК Робот
    |   ИЗ
    |       РегистрСведений.ЛогЗагрузкиЧеков КАК ЛогЗагрузкиЧеков
    |   ГДЕ
    |       ЛогЗагрузкиЧеков.Задание = ""ПИНГ""
    |       И ЛогЗагрузкиЧеков.Дата >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
    |   
    |   СГРУППИРОВАТЬ ПО
    |       ПОДСТРОКА(ЛогЗагрузкиЧеков.Сообщение, 1, 50)) КАК Х
    |ГДЕ
    |   РАЗНОСТЬДАТ(Х.ПослЗапуск, &Дата, минута) < 20");
    
    Запрос.УстановитьПараметр("Дата",ТекущаяДата());
    ЭлементыФормы.АЧР.Значение= Запрос.Выполнить().Выгрузить();
    ЭлементыФормы.АЧР.СоздатьКолонки();
    ЭлементыФормы.АЧР.Колонки.Найти("ПослЗапуск").Ширина=25;
    
    
    
КонецПроцедуры    



Процедура ПриОткрытии()
    
       
    
    ПодключитьОбработчикОжидания("ОбновлениеАЧР",60);
    
    Если Аптека.Пустая()=Ложь и Дата<>Дата("00010101") ТОгда
         ПоискДанных();
    КонецЕсли;
    
    
КонецПроцедуры

Процедура УдалитьТолькоРККМИСменыНажатие(Элемент)
	
	Предупреждение("Внимание! Будут удалены Реализации ККМ и Смены ККМ за дату!
					|Но новые данные нужно выгрузить из аптеки запросом!");
	
	УдалитьРеализацииЗаДату();

КонецПроцедуры



ЭлементыФормы.ПеревыгрузитьСФТП.Доступность=Ложь;
ЭлементыФормы.ПеревыгрузитьИзPG.Доступность=Ложь;
ЭлементыФормы.ПеревыгрузитьDBFВыручку.Доступность=Ложь;
МаксФайлов=2;