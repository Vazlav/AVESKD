
Функция ПолучитьКодПрайсЛиста()
	
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Счетчики");
			БлокировкаМатрицы.УстановитьЗначение("Счетчик","Прайсы");
			БлокировкаМатрицы.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();	

			МЗ = РегистрыСведений.Счетчики.СоздатьМенеджерЗаписи();
			МЗ.Счетчик = "Прайсы";
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.Значение = МЗ.Значение + 1;	
			Иначе
				МЗ.Счетчик = "Прайсы";
				МЗ.Значение = 1;
			КонецЕсли;
			МЗ.Записать();
			ЗафиксироватьТранзакцию();
			Возврат МЗ.Значение;
		Исключение
			ОтменитьТранзакцию();
			Возврат -1;
		КонецПопытки;
		
	
	
КонецФункции

Функция ЗафиксироватьАктивностьПоставщика(Поставщик)
	
	МЗ = РегистрыСведений.ИмпортПрайсовАктивныйПоставщик.СоздатьМенеджерЗаписи();
	МЗ.Поставщик = Поставщик;
	МЗ.ДатаЗаписи = ТекущаяДата();
	Попытка
		МЗ.Записать(Ложь);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция УдалитьАктивностьПоставщика(Поставщик)
	
	МЗ = РегистрыСведений.ИмпортПрайсовАктивныйПоставщик.СоздатьМенеджерЗаписи();
	МЗ.Поставщик = Поставщик;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		МЗ.Удалить();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗафиксироватьПрайсНаУдаление(КодПрайсЛиста)
	
			МЗ = РегистрыСведений.ПрайсЛистыНаУдаление.СоздатьМенеджерЗаписи();
			МЗ.КодПрайсЛиста = КодПрайсЛиста;
			МЗ.Прочитать();
			Если НЕ МЗ.Выбран() Тогда
				МЗ.КодПрайсЛиста = КодПрайсЛиста;
				МЗ.ДатаУдаления = ТекущаяДата() + 5*60;
			КонецЕсли;
			МЗ.Записать();	
				
КонецПроцедуры


Процедура УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла)
	
	Если Длина > 12 Тогда
		Попытка
			УдалитьФайлы(НовоеПолноеИмяФайла);
		Исключение
			Сообщить("не удалось удалить: " + НовоеПолноеИмяФайла);
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьСоответствиеПолей(СписокПолей,ДБФ)
	
	СтрокаПолей = "";
	
	Для каждого СтрПоле из СписокПолей Цикл
		Если ДБФ.поля.Найти(СтрПоле.Значение) = Неопределено Тогда
			СтрокаПолей = СтрокаПолей + "," + СтрПоле.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаПолей;
	
КонецФункции

Процедура ПроверитьСоответствиеАптекиВФайле(ТекСтрокаФайла,ТекНастройка,УзелОбмена)
	

	МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
	МЗ.НастройкаОбмена = ТекНастройка.Настройка;
	МЗ.УзелОбмена = УзелОбмена;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
		СтруктураПолей = Новый Структура;
		СписокПолей = Новый СписокЗначений;
		Для каждого поле из ТаблицаПолей Цикл
			СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
			СписокПолей.Добавить(поле.ИмяПоляВФайле);
		КонецЦикла;
	Иначе
		Сообщить("не удалось получить список полей для данной настройки");
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = ТекНастройка.КаталогОбмена + "\" + ТекСтрокаФайла.Файл;
	
	//Промерим на длину 8 символов
	ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
	Длина = СтрДлина(ФайлОбъектНовый.Имя);
	ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
	
	Если Длина > 12 Тогда
		Уник = Новый УникальныйИдентификатор;
		Уник = Прав(Уник,8);
		НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
		Попытка
			КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
			возврат;
		КонецПопытки;
	Иначе
		НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
	КонецЕсли;	
	
	Если НРег(ФайлОбъектНовый.Расширение) = ".dbf" Тогда    // Если это DBF файл
		
		ДБФ= Новый  XBase;
		
		Попытка
			ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
		Исключение
			
			Сообщить("Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ")	;	
			
			УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
			
			Возврат;
		КонецПопытки;
		
		Если ДБФ.КоличествоЗаписей() = 0 Тогда
			Сообщить("Файл: " + ФайлЗагрузки + " не содержит строк! ");		
			ДБФ.ЗакрытьФайл();
			УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
			Возврат;
		КонецЕсли;
		
		
		ОтсутствующиеПоля = ПроверитьСоответствиеПолей(СписокПолей,ДБФ);
		Если НЕ ПустаяСтрока(ОтсутствующиеПоля) Тогда
			Сообщить("Нет полей : " + ОтсутствующиеПоля + " в файле: " + ФайлЗагрузки);
			Если ДБФ.Открыта() Тогда
				ДБФ.ЗакрытьФайл();
			КонецЕсли;
		
			УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
			Возврат;
		Иначе
			//Предупреждение("Формат соответствует настройке.");
		КонецЕсли;
		
		ДБФ.Перейти(1);
		
		ДатаДок = ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["ДатаДок"]);
		Если ТипЗнч(ДатаДок) = ТипЗнч("Строка") Тогда
			ДатаДок = ОМ20_Чернов.Стр_ПолучитьДату(ДатаДок);
		КонецЕсли;		
		
		Если КонецДня(ДатаДок) > КонецДня(ТекущаяДата()) Тогда
			Сообщить("Ошибка : Дата документа " + ДатаДок + " больше текущей. Документ не будет загружен", СтатусСообщения.Важное);
		КонецЕсли;
		
		
		СкладКод = СокрЛП(Формат(ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["Склад"]),"ЧГ=0"));
		ТХТ = "ВЫБРАТЬ
		      |	КодыАптек.Аптека КАК Склад,
		      |	КодыАптек.Активность,
		      |	КодыАптек.Владелец.Активность как АктивностьКонтракта
		      |ИЗ
		      |	Справочник.КонтрактыИАптеки КАК КодыАптек
		      |ГДЕ
		      |	КодыАптек.КодАптекиВнешн = &СкладКод
		      |	И КодыАптек.Владелец.Владелец = &Поставщик";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("СкладКод",СкладКод);
		Запрос.УстановитьПараметр("Поставщик",ТекНастройка.Поставщик);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Сообщить("Ошибка : не найдена аптека по коду = " + СкладКод + " по поставщику: "+ТекНастройка.Поставщик+ " - " + ИсходноеПолноеИмяФайла, СтатусСообщения.Важное);
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			Сообщить(""+ТекНастройка.Поставщик+ ": по коду = " + СкладКод + " найдена аптека " + Выборка.Склад);
			Сообщить("активность аптеки: " + ?(Выборка.Активность=Истина,"активна","неактивна"));
			Сообщить("активность контракта: " + ?(Выборка.АктивностьКонтракта=Истина,"активен","неактивен"));
			
			ДоговорПоставки = ОМ_Справочники.ПолучитьДоговорПоставщика(Выборка.Склад.Фирма,ТекНастройка.Поставщик,ДатаДок);
			Если ДоговорПоставки.Пустая() Тогда
				Сообщить("По фирме "+ Выборка.Склад.Фирма + "  поставщик : " + ТекНастройка.Поставщик + "  Дата накл: " + ДатаДок);
				Сообщить("Ошибка : Не найден договор поставки. Документ не будет загружен", СтатусСообщения.Важное);
			Иначе
				Если НЕ ЗначениеЗаполнено(ДоговорПоставки.ВидПоступленияТовара) Тогда
					Сообщить("Ошибка : Не заполнен вид поступления товара в договоре поставки. Документ не будет загружен", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		
			
			
		КонецЕсли;		
		
		
		
		Если ДБФ.Открыта() Тогда
			ДБФ.ЗакрытьФайл();
		КонецЕсли;
		
		УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
 
		
	КонецЕсли;	
	
	
	
	
	
КонецПроцедуры

Процедура ПроверитьФорматНакладной(ТекСтрокаФайла,ТекНастройка)
	
	МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
	МЗ.НастройкаОбмена = ТекНастройка.Настройка;
	МЗ.УзелОбмена = "Накладная";
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
		СтруктураПолей = Новый Структура;
		СписокПолей = Новый СписокЗначений;
		Для каждого поле из ТаблицаПолей Цикл
			СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
			СписокПолей.Добавить(поле.ИмяПоляВФайле);
		КонецЦикла;
	Иначе
		Сообщить("не удалось получить список полей для данной настройки");
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = ТекНастройка.КаталогОбмена + "\" + ТекСтрокаФайла.Файл;
	
	//Промерим на длину 8 символов
	ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
	Длина = СтрДлина(ФайлОбъектНовый.Имя);
	ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
	
	Если Длина > 12 Тогда
		Уник = Новый УникальныйИдентификатор;
		Уник = Прав(Уник,8);
		НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
		Попытка
			КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
			возврат;
		КонецПопытки;
	Иначе
		НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
	КонецЕсли;	
	
	Если НРег(ФайлОбъектНовый.Расширение) = ".dbf" Тогда    // Если это DBF файл
		
		ДБФ= Новый  XBase;
		
		Попытка
			ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
		Исключение
			
			Сообщить("Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ")	;	
			
			УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
			
			Возврат;
		КонецПопытки;
		
		ОтсутствующиеПоля = ПроверитьСоответствиеПолей(СписокПолей,ДБФ);
		Если НЕ ПустаяСтрока(ОтсутствующиеПоля) Тогда
			Сообщить("Нет полей : " + ОтсутствующиеПоля + " в файле: " + ФайлЗагрузки);
			Если ДБФ.Открыта() Тогда
				ДБФ.ЗакрытьФайл();
			КонецЕсли;
			Возврат;
		Иначе
			Если ДБФ.Открыта() Тогда
				ДБФ.ЗакрытьФайл();
			КонецЕсли;
			Предупреждение("Формат соответствует настройке.");
		КонецЕсли;
		
		УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
 
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура ПроверитьФорматПрайса(ТекСтрокаФайла,ТекНастройка)
	
	МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
	МЗ.НастройкаОбмена = ТекНастройка.Настройка;
	МЗ.УзелОбмена = "Прайс";
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
		СтруктураПолей = Новый Структура;
		СписокПолей = Новый СписокЗначений;
		Для каждого поле из ТаблицаПолей Цикл
			СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
			СписокПолей.Добавить(поле.ИмяПоляВФайле);
		КонецЦикла;
	Иначе
		Сообщить("не удалось получить список полей для данной настройки");
		Возврат;
	КонецЕсли;	
		
	
	ФайлЗагрузки = ТекНастройка.КаталогОбмена + "\" + ТекСтрокаФайла.Файл;
	
	//Промерим на длину 8 символов
	ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
	Длина = СтрДлина(ФайлОбъектНовый.Имя);
	ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
	
	Если Длина > 12 Тогда
		Уник = Новый УникальныйИдентификатор;
		Уник = Прав(Уник,8);
		НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
		Попытка
			КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
			возврат;
		КонецПопытки;
	Иначе
		НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
	КонецЕсли;	
	
	Если НРег(ФайлОбъектНовый.Расширение) = ".dbf" Тогда    // Если это DBF файл
		
		ДБФ= Новый  XBase;
		
		Попытка
			ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
		Исключение

			Сообщить("Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ")	;	
			
			//Удаляем временный файлик
			Если Длина > 12 Тогда
				Попытка
					УдалитьФайлы(НовоеПолноеИмяФайла);
				Исключение
					//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
				КонецПопытки;                       
			КонецЕсли;
			
			Возврат;
		КонецПопытки;
		
		Если СокрЛП(ТекНастройка.Кодировка) = "OEM" или ПустаяСтрока(ТекНастройка.Кодировка) Тогда
			ДБФ.Кодировка = КодировкаXBase.OEM;
		Иначе
			ДБФ.Кодировка = КодировкаXBase.ANSI;
		КонецЕсли;
		
		//Проверим файл прайса на наличие необходимых полей по списку
		Если ОМ20_Чернов.DBF_НаличиеПолей(ДБФ,СписокПолей,1) = Ложь Тогда
			Предупреждение("Не прошла проверка на наличие полей в прайсе поставщика " + ТекНастройка.Поставщик);	
		Иначе
			Предупреждение("Формат соответствует настройке.");
		КонецЕсли;
		
		Если ДБФ.Открыта() Тогда
			ДБФ.ЗакрытьФайл();
		КонецЕсли;
		//Удаляем временный файлик
		Если Длина > 12 Тогда
			Попытка
				УдалитьФайлы(НовоеПолноеИмяФайла);
			Исключение
				//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
			КонецПопытки;                       
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ВидНастройкиПриИзменении(Элемент)
	
	
	
	
	Если ВидНастройки = "Прайс" Тогда
		ТХТ = "ВЫБРАТЬ
		|	НастройкиОбмена.НастройкаОбмена как Настройка,
		|	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
		|	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование КАК НаименованиеПоставщика,
		|	НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок КАК ЕстьСвязкаС,
		|	НастройкиОбмена.FILEКаталогОбмена КАК КаталогОбмена,
		|	НастройкиОбмена.FILEМаска КАК Маска,
		|	НастройкиОбмена.Кодировка,
		|	НастройкиОбмена.НастройкаОбмена.Владелец.ОсуществляетПрямыеПоставки КАК АктивностьПоставщика,
		|	НастройкиОбмена.НастройкаОбмена.Активность КАК АктивностьНастройки,
		|	КаталогПрайсЛистов.Дата КАК ДатаПрайса
		|ИЗ
		|	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
		|		ПО НастройкиОбмена.НастройкаОбмена = КаталогПрайсЛистов.Настройка
		|ГДЕ
		|	НастройкиОбмена.УзелОбмена = ""Прайс""
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";
		
		ЭлементыФормы.ТЧ.Колонки.ДатаПрайса.Видимость = Истина;
		ЭлементыФормы.ТЧ.Колонки.Автообмен.Видимость = Ложь;
		//ЭлементыФормы.КПФайлов.Кнопки.ПроверитьФормат.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ПроверитьФормат.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ОпределитьАптеку.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ДобавитьФайлВКаталогПоставщика.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.УстановитьКодАптекиВФайл.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.кнЗагрузитьПрайсЛист.Доступность = Истина;
		
	ИначеЕсли ВидНастройки = "Заказ" Тогда
		ТХТ = "ВЫБРАТЬ
		      |	НастройкиОбмена.НастройкаОбмена КАК Настройка,
		      |	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
			  |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование КАК НаименованиеПоставщика,
		      |	НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок КАК ЕстьСвязкаС,
		      |	НастройкиОбмена.FILEКаталогОбмена КАК КаталогОбмена,
		      |	НастройкиОбмена.FILEМаска КАК Маска,
		      |	НастройкиОбмена.Кодировка,
		      |	НастройкиОбмена.НастройкаОбмена.Владелец.ОсуществляетПрямыеПоставки КАК АктивностьПоставщика,
		      |	НастройкиОбмена.НастройкаОбмена.Активность КАК АктивностьНастройки,
		      |	НастройкиОбмена.НастройкаОбмена.АвтоВыгрузкаЗаказов КАК Автообмен
		      |ИЗ
		      |	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
		      |ГДЕ
		      |	НастройкиОбмена.УзелОбмена = ""Заказ""
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";
		
		
		ЭлементыФормы.ТЧ.Колонки.ДатаПрайса.Видимость = Ложь;
		ЭлементыФормы.ТЧ.Колонки.Автообмен.Видимость = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.УстановитьКодАптекиВФайл.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ПроверитьФормат.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ОпределитьАптеку.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ДобавитьФайлВКаталогПоставщика.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.кнЗагрузитьПрайсЛист.Доступность = Ложь;
		
	ИначеЕсли ВидНастройки = "Накладная" Тогда
		ТХТ = "ВЫБРАТЬ
		      |	НастройкиОбмена.НастройкаОбмена КАК Настройка,
		      |	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
			  |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование КАК НаименованиеПоставщика,
		      |	НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок КАК ЕстьСвязкаС,
		      |	НастройкиОбмена.FILEКаталогОбмена КАК КаталогОбмена,
		      |	НастройкиОбмена.FILEМаска КАК Маска,
		      |	НастройкиОбмена.Кодировка,
		      |	НастройкиОбмена.НастройкаОбмена.Владелец.ОсуществляетПрямыеПоставки КАК АктивностьПоставщика,
		      |	НастройкиОбмена.НастройкаОбмена.Активность КАК АктивностьНастройки,
		      |	НастройкиОбмена.НастройкаОбмена.АвтоЗагрузкаНакладных КАК Автообмен
		      |ИЗ
		      |	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
		      |ГДЕ
		      |	НастройкиОбмена.УзелОбмена = ""Накладная""
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";		
		
		ЭлементыФормы.ТЧ.Колонки.ДатаПрайса.Видимость = Ложь;
		ЭлементыФормы.ТЧ.Колонки.Автообмен.Видимость = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ПроверитьФормат.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ОпределитьАптеку.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ДобавитьФайлВКаталогПоставщика.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.УстановитьКодАптекиВФайл.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.кнЗагрузитьПрайсЛист.Доступность = Ложь;
		
	ИначеЕсли ВидНастройки = "Отказ" Тогда
		ТХТ = "ВЫБРАТЬ
		|	НастройкиОбмена.НастройкаОбмена как Настройка,
		|	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
		|	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование КАК НаименованиеПоставщика,
		|	НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок КАК ЕстьСвязкаС,
		|	НастройкиОбмена.FILEКаталогОбмена КАК КаталогОбмена,
		|	НастройкиОбмена.FILEМаска КАК Маска,
		|	НастройкиОбмена.Кодировка,
		|	НастройкиОбмена.НастройкаОбмена.Владелец.ОсуществляетПрямыеПоставки КАК АктивностьПоставщика,
		|	НастройкиОбмена.НастройкаОбмена.Активность КАК АктивностьНастройки
		|ИЗ
		|	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
		|ГДЕ
		|	НастройкиОбмена.УзелОбмена = ""Отказ""
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";		
		
		ЭлементыФормы.ТЧ.Колонки.ДатаПрайса.Видимость = Ложь;
		ЭлементыФормы.ТЧ.Колонки.Автообмен.Видимость = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ДобавитьФайлВКаталогПоставщика.Доступность = Ложь;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ПроверитьФормат.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.ОпределитьАптеку.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.УстановитьКодАптекиВФайл.Доступность = Истина;
		ЭлементыФормы.КПФайлов.Кнопки.Действия.Кнопки.кнЗагрузитьПрайсЛист.Доступность = Ложь;
		

		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЧ.Загрузить(ТЗ);
	
	
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ВидНастройкиПриИзменении("");
	
КонецПроцедуры

Процедура ТЧПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.АктивностьПоставщика = Ложь или  ДанныеСтроки.АктивностьНастройки = Ложь Тогда
		ОформлениеСтроки.ЦветТекста=Новый Цвет(160,160,160);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТЧПриАктивизацииСтроки(Элемент)
	
	ТаблицаФайлов.Очистить();
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = НайтиФайлы(ТекСтрока.КаталогОбмена,"*.*");
	Для Каждого стр из Файлы Цикл
		Если стр.ЭтоФайл() Тогда
			НоваяСтрока = ТаблицаФайлов.Добавить();	
			НоваяСтрока.Файл = стр.Имя;
			НоваяСтрока.Дата = стр.ПолучитьВремяИзменения();
			НоваяСтрока.Размер = стр.Размер();
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("Дата Убыв");
	
	ТаблицаКонтрактов.Строки.Очистить();
	
	ТХТ = "ВЫБРАТЬ
	      |	КонтрактыИНастройки.Контракт.Фирма КАК Фирма,
	      |	КонтрактыИАптеки.Аптека.Наименование КАК Аптека,
	      |	КонтрактыИАптеки.КодАптекиВнешн,
	      |	КонтрактыИАптеки.КодАптекиВнутр как ВнутрКод,
	      |	КонтрактыИНастройки.Контракт.Активность как АктивностьКонтракта,
	      |	КонтрактыИНастройки.Контракт КАК КонтрактСсылка,
	      |	КонтрактыИАптеки.Ссылка КАК КонтрактыИАптекаСсылка,
	      |	КонтрактыИНастройки.Контракт.Наименование КАК ИмяКонтракта,
	      |	КонтрактыИАптеки.Активность КАК АктивностьАптеки
	      |ИЗ
	      |	РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	      |		ПО КонтрактыИНастройки.Контракт = КонтрактыИАптеки.Владелец
	      |ГДЕ
	      |	КонтрактыИНастройки.НастройкаОбмена = &НастройкаОбмена
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	КонтрактСсылка";
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("НастройкаОбмена",ТекСтрока.Настройка);
	Рез  = Запрос.Выполнить().Выгрузить();
	
	СтарыйКонтракт = "";
	Для каждого стр из Рез Цикл
		Если СтарыйКонтракт <> стр.КонтрактСсылка Тогда
			СтрокаКонтракта = ТаблицаКонтрактов.Строки.Добавить();
			СтрокаКонтракта.Контракт = стр.ИмяКонтракта;
			СтрокаКонтракта.Фирма = стр.Фирма;
			СтрокаКонтракта.Активность = стр.АктивностьКонтракта;
			СтрокаКонтракта.ДанныеСтроки = стр.КонтрактСсылка;
			СтарыйКонтракт = стр.КонтрактСсылка;
		КонецЕсли;
		
		СтрокаАптеки = СтрокаКонтракта.Строки.Добавить();
		СтрокаАптеки.Контракт	= стр.КодАптекиВнешн;
		СтрокаАптеки.Фирма		= стр.Аптека;
		СтрокаАптеки.Активность = стр.АктивностьАптеки;
		СтрокаАптеки.ВнутрКод	= стр.ВнутрКод;
		СтрокаАптеки.ДанныеСтроки = стр.КонтрактыИАптекаСсылка;
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ТаблицаКонтрактовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	
	Если ДанныеСтроки.Активность=Ложь ТОгда
		ОформлениеСтроки.ЦветТекста=новый Цвет(160,160,160);
	КонецЕсли;	
	
	Если НЕ ДанныеСтроки.Родитель = неопределено Тогда
		Если ДанныеСтроки.Родитель.Активность = Ложь Тогда
			ОформлениеСтроки.ЦветТекста=новый Цвет(160,160,160);
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

Процедура ФильтрПоставщикПриИзменении(Элемент)
	
   ЭлементыФормы.ТЧ.ОтборСтрок.НаименованиеПоставщика.ВидСравнения = ВидСравнения.Содержит;
   ЭлементыФормы.ТЧ.ОтборСтрок.НаименованиеПоставщика.Значение =СокрЛП(ФильтрПоставщик) ;
   ЭлементыФормы.ТЧ.ОтборСтрок.НаименованиеПоставщика.Использование = НЕ ПустаяСтрока(ФильтрПоставщик);

	
КонецПроцедуры

Процедура КоманднаяПанель2ПроверитьФормат(Кнопка)
	
	ТекСтрокаФайла = ЭлементыФормы.ТаблицаФайлов.ТекущаяСтрока;
	Если ТекСтрокаФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекНастройка = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	
	Если ВидНастройки = "Прайс" Тогда
		ПроверитьФорматПрайса(ТекСтрокаФайла,ТекНастройка);
	ИначеЕсли ВидНастройки = "Накладная" Тогда
		ПроверитьФорматНакладной(ТекСтрокаФайла,ТекНастройка);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура КПНастройкиПросмотрПрайса(Кнопка)
	
	    ТекНастройка = ЭлементыФормы.ТЧ.ТекущаяСтрока;
		Если ТекНастройка = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КаталогПрайсЛистов.КодПрайсЛиста,
		               |	ВЫБОР
		               |		КОГДА КаталогПрайсЛистов.Коэффициент = 0
		               |			ТОГДА 1
		               |		ИНАЧЕ КаталогПрайсЛистов.Коэффициент
		               |	КОНЕЦ КАК Коэффициент
		               |ИЗ
		               |	РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
		               |ГДЕ
		               |	КаталогПрайсЛистов.Настройка = &Настройка";
		Запрос.УстановитьПараметр("Настройка",ТекНастройка.Настройка);
		РЕЗ = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Предупреждение("По данной настроке нет прайс листа");
			Возврат;
		КонецЕсли;
		
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		Построитель = Новый ПостроительОтчета;
		
		Построитель.Текст = "ВЫБРАТЬ
		                    |	ПрайсЛисты.НомерЗаписи,
		                    |	ПрайсЛисты.Код,
		                    |	ПрайсЛисты.Товар КАК Товар,
		                    |	ПрайсЛисты.Количество,
		                    |	ВЫРАЗИТЬ(ПрайсЛисты.Цена * &Коэффициент КАК ЧИСЛО(12, 2)) КАК Цена,
		                    |	ПрайсЛисты.Производитель,
		                    |	ПрайсЛисты.СрокГодности,
		                    |	ПрайсЛисты.Кратность,
		                    |	ПрайсЛисты.БарКод,
		                    |	ПрайсЛисты.КоличествоПолное,
		                    |	ПрайсЛисты.КоличествоВСпайке,
		                    |	ПрайсЛисты.КоличествоВКоробе,
		                    |	ПрайсЛисты.ВхЦенаСНДС
		                    |ИЗ
		                    |	РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
		                    |ГДЕ
		                    |	ПрайсЛисты.КодПрайсЛиста = &КодПрайсЛиста
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	Товар";
		Построитель.Параметры.Вставить("КодПрайсЛиста",Выборка.КодПрайсЛиста);
		Построитель.Параметры.Вставить("Коэффициент",Выборка.Коэффициент);
		Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
		Построитель.Выполнить();
		Построитель.МакетОформления=ПолучитьМакетОформления(СтандартноеОформление.ТРАВА);
		Построитель.ОформитьМакет();
		Построитель.Вывести();
	
	
	
	
КонецПроцедуры

Процедура КПФайловОпределитьАптеку(Кнопка)
	
	ТекСтрокаФайла = ЭлементыФормы.ТаблицаФайлов.ТекущаяСтрока;
	Если ТекСтрокаФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекНастройка = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидНастройки = "Накладная" или ВидНастройки = "Отказ" Тогда
		ПроверитьСоответствиеАптекиВФайле(ТекСтрокаФайла,ТекНастройка,ВидНастройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура АптекаПриИзменении(Элемент)
	
	НайденнаяСтрока = ТаблицаКонтрактов.Строки.Найти(Аптека.Код,"ВнутрКод",Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Предупреждение("Аптека не найдена");
	Иначе
		ЭлементыФормы.ТаблицаКонтрактов.ТекущаяСтрока = НайденнаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура КПФайловУстановитьКодАптекиВФайл(Кнопка)
	
	ТекСтрокаФайла = ЭлементыФормы.ТаблицаФайлов.ТекущаяСтрока;
	Если ТекСтрокаФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрКонтракта = ЭлементыФормы.ТаблицаКонтрактов.ТекущаяСтрока;
	Если ТекСтрКонтракта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекНастройка = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ВидНастройки = "Накладная"  Тогда
		
		МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
		МЗ.НастройкаОбмена = ТекНастройка.Настройка;
		МЗ.УзелОбмена = ВидНастройки;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
			СтруктураПолей = Новый Структура;
			СписокПолей = Новый СписокЗначений;
			Для каждого поле из ТаблицаПолей Цикл
				СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
				СписокПолей.Добавить(поле.ИмяПоляВФайле);
			КонецЦикла;
		Иначе
			Сообщить("не удалось получить список полей для данной настройки");
			Возврат;
		КонецЕсли;
		
		ФайлЗагрузки = ТекНастройка.КаталогОбмена + "\" + ТекСтрокаФайла.Файл;
		
		//Промерим на длину 8 символов
		ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
		Длина = СтрДлина(ФайлОбъектНовый.Имя);
		ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
		
		Если Длина > 12 Тогда
			Уник = Новый УникальныйИдентификатор;
			Уник = Прав(Уник,8);
			НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
			Попытка
				КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
				возврат;
			КонецПопытки;
		Иначе
			НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
		КонецЕсли;	
		
		Если НРег(ФайлОбъектНовый.Расширение) = ".dbf" Тогда    // Если это DBF файл
			
			ДБФ= Новый  XBase;
			
			Попытка
				ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,);	
			Исключение
				
				Сообщить("Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ")	;	
				
				УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
				
				Возврат;
			КонецПопытки;
			
			Если ДБФ.КоличествоЗаписей() = 0 Тогда
				Сообщить("Файл: " + ФайлЗагрузки + " не содержит строк! ");		
				ДБФ.ЗакрытьФайл();
				УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
				Возврат;
			КонецЕсли;
			
			
			ОтсутствующиеПоля = ПроверитьСоответствиеПолей(СписокПолей,ДБФ);
			Если НЕ ПустаяСтрока(ОтсутствующиеПоля) Тогда
				Сообщить("Нет полей : " + ОтсутствующиеПоля + " в файле: " + ФайлЗагрузки);
				Если ДБФ.Открыта() Тогда
					ДБФ.ЗакрытьФайл();
				КонецЕсли;
				
				УдалитьВременныйФайл(Длина,НовоеПолноеИмяФайла);
				Возврат;
			Иначе
				//Предупреждение("Формат соответствует настройке.");
			КонецЕсли;
			
			ДБФ.Перейти(1);
			ДБФ[СтруктураПолей["Склад"]] = СокрЛП(ТекСтрКонтракта.Контракт);
			ДБФ.Записать();
			ДБФ.ЗакрытьФайл();
			
			Если Длина > 12 Тогда
				ПереместитьФайл(НовоеПолноеИмяФайла,ИсходноеПолноеИмяФайла);	
			КонецЕсли;
			
			Предупреждение("В файл установлен код аптеки : " + СокрЛП(ТекСтрКонтракта.Контракт));
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КПФайловДобавитьФайлВКаталогПоставщика(Кнопка)
	
	ТекНастройка = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	// Если выбран поставщик (т.е. мы знаем куда кидать :)...)
	пер_Файл = ОМ20_Чернов.ФС_ВыбратьФайл(СтрЗаменить(ТекНастройка.Маска,"*.",""));
	Если пер_Файл<>"" Тогда
		// Перемещаем файл в каталог загрузки выбранного поставщика
		о_Файл = Новый Файл(пер_Файл);
		пер_ФайлНовый = ТекНастройка.КаталогОбмена+?(Прав(СокрЛП(ТекНастройка.КаталогОбмена),1)="\","","\")+о_Файл.Имя;
		Если ОМ20_Чернов.ФС_КопироватьФайл(пер_Файл, пер_ФайлНовый) Тогда
			ТаблицаФайлов.Очистить();
			
			Файлы = НайтиФайлы(ТекНастройка.КаталогОбмена,"*.*");
			Для Каждого стр из Файлы Цикл
				Если стр.ЭтоФайл() Тогда
					НоваяСтрока = ТаблицаФайлов.Добавить();	
					НоваяСтрока.Файл = стр.Имя;
					НоваяСтрока.Дата = стр.ПолучитьВремяИзменения();
					НоваяСтрока.Размер = стр.Размер();
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаФайлов.Сортировать("Дата Убыв");
			
		КонецЕсли;
	КонецЕсли;
	

	
КонецПроцедуры

Процедура КПФайловкнЗагрузитьПрайсЛист(Кнопка)
	
	ТекНастройка = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	
	ТХТ = "ВЫБРАТЬ
	      |	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
	      |	НастройкиОбмена.FILEКаталогОбмена КАК КаталогЗагрузки,
	      |	НастройкиОбмена.НастройкаОбмена,
	      |	НастройкиОбмена.FILEМаска КАК Маска,
	      |	НастройкиОбмена.Кодировка,
	      |	НастройкиОбмена.НастройкаОбмена.КоэффициентЦеныНаБазовыйПрайсПоставщика КАК КоэффициентНаБазовыйПрайс,
	      |	ЕСТЬNULL(КаталогПрайсЛистов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрайсЛиста,
	      |	НастройкиОбмена.НастройкаОбмена.КодПоставщика КАК КодПоставщика,
	      |	ВЫБОР
	      |		КОГДА НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок = ЗНАЧЕНИЕ(справочник.Поставщики.ПустаяСсылка)
	      |			ТОГДА НастройкиОбмена.НастройкаОбмена.Владелец
	      |		ИНАЧЕ НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок
	      |	КОНЕЦ КАК Поставщиксвязки
	      |ИЗ
	      |	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФорматаОбмена КАК НастройкиФорматаОбмена
	      |		ПО НастройкиОбмена.НастройкаОбмена = НастройкиФорматаОбмена.НастройкаОбмена
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	      |		ПО НастройкиОбмена.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	      |ГДЕ
	      |	НастройкиОбмена.УзелОбмена = ""Прайс""
	      |	И НастройкиФорматаОбмена.УзелОбмена = ""Прайс""
	      | И НастройкиОбмена.НастройкаОбмена = &ТекНастройка
		  | И НастройкиОбмена.НастройкаОбмена.Владелец.ОсуществляетПрямыеПоставки = Истина
		  | И НастройкиОбмена.НастройкаОбмена.Активность = Истина
	      |УПОРЯДОЧИТЬ ПО
	      |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекНастройка",ТекНастройка.Настройка);
	Запрос.Текст = ТХТ;
	ТЗНастроек = Запрос.Выполнить().Выгрузить();
	
	
	
	ТЗпроблем = Новый ТаблицаЗначений;
	ТЗпроблем.Колонки.Добавить("Поставщик");
	ТЗпроблем.Колонки.Добавить("НастройкаОбмена");
	ТЗпроблем.Колонки.Добавить("Проблема");
	Колво = ТЗНастроек.Количество();
	ы=0;
	Для каждого стр из ТЗНастроек Цикл
		ы=ы+1;
		
		#Если Клиент Тогда
			Состояние(""+ы+" из " + КолВо);
			ОбработкаПрерыванияПользователя();	
		#КонецЕсли
		Если ЗафиксироватьАктивностьПоставщика(стр.Поставщик) = Ложь Тогда
			Предупреждение("Данный прайс лист в данный момент находится в процессе загрузки!");
			Продолжить;
		КонецЕсли;
		
		
		
		МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
		МЗ.НастройкаОбмена = стр.НастройкаОбмена;
		МЗ.УзелОбмена = "Прайс";
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
			СтруктураПолей = Новый Структура;   // соотвтствие имен полей в 1с и в файле прайса
			СписокПолей = Новый СписокЗначений;
			Для каждого поле из ТаблицаПолей Цикл
				СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
				СписокПолей.Добавить(поле.ИмяПоляВФайле);
			КонецЦикла;
			
			КаталогЗагрузки = СокрЛП(стр.КаталогЗагрузки);
			Маска			= НРег(СокрЛП(стр.Маска));
			
			Попытка
				ОМ17_ПроверитьИСоздатьКаталог(КаталогЗагрузки + "\backup");
			Исключение
				Сообщить("Не удалось создать каталог: " + КаталогЗагрузки + "\backup");
			КонецПопытки;	
			
			~ЗагрузкаПоШаблону:
			
			ВремМаска = Маска;
			Если Маска = "*.xml" Тогда 
				Маска = "*.zip";
			КонецЕсли;
			
			НайденныеФайлы  = НайтиФайлы(КаталогЗагрузки,Маска);
			КолВОФайлов = НайденныеФайлы.Количество();

			Если КолВОФайлов = 0 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Нет файла прайс-листа";
				
				УдалитьАктивностьПоставщика(стр.Поставщик);
				
				Продолжить;
			КонецЕсли;
			
			Если КолВОФайлов > 1 Тогда
				
				ТЗВремФайлов = Новый ТаблицаЗначений;
				ТЗВремФайлов.Колонки.Добавить("ИндексМассива");
				ТЗВремФайлов.Колонки.Добавить("ДатаФайла");
				ИндексМассива = 0;
				Для каждого ф из НайденныеФайлы Цикл         
					Новаястрока = ТЗВремФайлов.Добавить();
					НоваяСтрока.ИндексМассива = ИндексМассива;
					НоваяСтрока.ДатаФайла = ф.ПолучитьВремяИзменения();
					ИндексМассива = ИндексМассива + 1;
				КонецЦикла;
				ТЗВремФайлов.Сортировать("ДатаФайла Убыв");
				ИндексМассива = ТЗВремФайлов.Получить(0).ИндексМассива;
				
				ФайлОбъект = НайденныеФайлы.Получить(ИндексМассива);	
				ТЗВремФайлов = Неопределено;
				//Сообщить(""+стр.Поставщик + "  " + ФайлОбъект.ПолноеИмя);
			Иначе
				ФайлОбъект = НайденныеФайлы.Получить(0);
			КонецЕсли;
			
			Если ФайлОбъект.Размер() = 0 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Файла прайс-листа имеет нулевой размер";
				
				УдалитьАктивностьПоставщика(стр.Поставщик);

				Продолжить;
			КонецЕсли;
			
			ДатаФайла = ФайлОбъект.ПолучитьВремяИзменения();
			Если стр.ДатаПрайсЛиста >= ДатаФайла Тогда
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецЕсли;
			
			ФайлЗагрузки = ФайлОбъект.ПолноеИмя;
			Сообщить("Обрабатывается файл: " + ФайлЗагрузки); // Чернов 11/08/2014
			
			ЭтоПрайсДБФ = Найти(Маска,".dbf");
			Если ЭтоПрайсДБФ = 0 Тогда
					УдалитьАктивностьПоставщика(стр.Поставщик);
					Продолжить;
			КонецЕсли;
			
			//Проверка на случай, когда поставщик еще файл не до конца выгрузил на сервер
			ОК = Ложь;
			Для к=0 по 5 Цикл
				Попытка
					ПереместитьФайл(ФайлЗагрузки,ФайлЗагрузки);
					ОК = Истина;
					Прервать;
				Исключение
					ОбщегоНазначения.Задержка(2);
				КонецПопытки;
			КонецЦикла;		
			
			Если ОК = Ложь Тогда
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецЕсли;
			
			
			//Промерим на длину 8 символов
			ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
			
			//Рез = ОМ20_Чернов.DBF_ADODB_Запрос(КаталогЗагрузки, "select count(*) from "+ ФайлОбъектНовый.Имя + "");
			//Если Рез = Ложь Тогда
			//	Сообщить("обнаружен битый прайс: " + ФайлОбъектНовый.ПолноеИмя);
			//	УдалитьАктивностьПоставщика(стр.Поставщик);
			//	Продолжить;
			//КонецЕсли;
			
			
			Длина = СтрДлина(ФайлОбъектНовый.Имя);
			ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
			
			Если Длина > 12 Тогда
				Уник = Новый УникальныйИдентификатор;
				Уник = Прав(Уник,8);
				НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
				Попытка
					КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
				Исключение
					УдалитьАктивностьПоставщика(стр.Поставщик);
					Продолжить;
				КонецПопытки;
			Иначе
				НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
			КонецЕсли;	
			
			
			ДБФ= Новый  XBase;
			
			Попытка
				ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
			Исключение
				//СообщениеОбОшибке = "Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ";	
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! "	;	

				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				УдалитьАктивностьПоставщика(стр.Поставщик);				
				Продолжить;
			КонецПопытки;
			
			Если СокрЛП(стр.Кодировка) = "OEM" или ПустаяСтрока(стр.Кодировка) Тогда
				ДБФ.Кодировка = КодировкаXBase.OEM;
			Иначе
				ДБФ.Кодировка = КодировкаXBase.ANSI;
			КонецЕсли;
			
			//Проверим файл прайса на наличие необходимых полей по списку
			Если ОМ20_Чернов.DBF_НаличиеПолей(ДБФ,СписокПолей,1) = Ложь Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не прошла проверка на наличие полей в прайсе поставщика " + стр.Поставщик;	
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецЕсли;
			
			//Скопируем весь файл в таблицу значений
			ТЗ = Новый ТаблицаЗначений;
			
			Если ОМ20_Чернов.DBF_СкопироватьСтруктуруИДанныеВТЗ(ДБФ, ТЗ, СписокПолей,,,1) = Ложь Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось скопировать данные в ТЗ:  " + стр.Поставщик;	
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецЕсли;
			
			//Обновление производителей
			//ЗначениеЭлемента = "";
			//Если СтруктураПолей.Свойство("Производитель",ЗначениеЭлемента) = Истина Тогда
			//	ОМ20_Чернов.ЗагрузитьНаименованияПроизводителей(ТЗ, ЗначениеЭлемента);
			//КонецЕсли;
			
			//Получим новый код прайс листа
			КодПрайсЛиста = ПолучитьКодПрайсЛиста();
			Если КодПрайсЛиста = -1 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось получить код прайс листа:  " + стр.Поставщик;	
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецЕсли;
			 
			//Сформируем набор записей прайса
			НаборЗаписей = РегистрыСведений.ПрайсЛисты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КодПрайсЛиста.Установить(КодПрайсЛиста);
			ПрошлыйГод = Год(ТекущаяДата()) - 1;
			н=0;
			Для каждого стрТЗ из ТЗ Цикл 
				н=н+1;
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				Запись = НаборЗаписей.Добавить(); 
				Запись.КодПрайсЛиста = КодПрайсЛиста;
				Запись.ПоставщикСвязки = стр.ПоставщикСвязки;

				Запись.НомерЗаписи = н;
				Для каждого стрПоля из СтруктураПолей Цикл
					Если стрПоля.Ключ = "Код" Тогда
						Значение = Формат(стрТЗ[стрПоля.Значение],"ЧГ=0");
					ИначеЕсли стрПоля.Ключ = "Страна" Тогда
						Продолжить;
					ИначеЕсли стрПоля.Ключ = "СрокГодности" Тогда
						Значение = ОМ20_Чернов.Стр_ПолучитьДату(стрТЗ[стрПоля.Значение]);
						Если Год(Значение) <= ПрошлыйГод или Год(Значение) > 3900 Тогда
							Значение = Дата('0001.01.01');	
						КонецЕсли;
					Иначе
						Значение = стрТЗ[стрПоля.Значение];
					КонецЕсли;
					
					Если ТипЗнч(Значение) = Тип("Строка") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;
					Запись[стрПоля.Ключ] = Значение;
				КонецЦикла;
				Запись.Цена				= Запись.Цена;
				//Запись.ЦенаПриведенная	= Окр(Запись.Цена*(?(КоэффПриведения=0,1,КоэффПриведения)),2);
				
			КонецЦикла;
			
			ПрайсЛистЗагружен = Ложь;
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Попытка
				Сообщить("запись: "+ стр.Поставщик + " настройка: " + стр.НастройкаОбмена);
				НаборЗаписей.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось записать прайс лист:  " + стр.Поставщик + "	"+ ОписаниеОшибки();
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецПопытки;
						
			//Запишем теперь в каталог существующий прайс
			НачатьТранзакцию();
			Блокировка = Новый БлокировкаДанных;
			БлокировкаКаталога = Блокировка.Добавить("РегистрСведений.КаталогПрайсЛистов");
			БлокировкаКаталога.УстановитьЗначение("Настройка",стр.НастройкаОбмена);
			БлокировкаКаталога.УстановитьЗначение("КодПоставщика",стр.КодПоставщика);
			БлокировкаКаталога.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();			
			МЗ = РегистрыСведений.КаталогПрайсЛистов.СоздатьМенеджерЗаписи();
			МЗ.Настройка = стр.НастройкаОбмена;
			МЗ.КодПоставщика = стр.КодПоставщика;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				КодПрайсЛистаНаУдаление = МЗ.КодПрайсЛиста;    //Запомним код прайса, который надо удалить
				//МЗ.КодПрайсЛистаСтарый = МЗ.КодПрайсЛиста;
				//МЗ.ДатаДляУдаления = ТекущаяДата() + 5*60;
				МЗ.КодПрайсЛиста = КодПрайсЛиста;	
				МЗ.Дата = ДатаФайла;
				МЗ.Коэффициент = стр.КоэффициентНаБазовыйПрайс;
			Иначе
				МЗ.Настройка = стр.НастройкаОбмена;
				МЗ.КодПоставщика = стр.КодПоставщика;
				МЗ.КодПрайсЛиста = КодПрайсЛиста;	
				МЗ.Дата = ДатаФайла;
				МЗ.Коэффициент = стр.КоэффициентНаБазовыйПрайс;
			КонецЕсли;
			Попытка
				МЗ.Записать();
				ЗафиксироватьТранзакцию();
				ПрайсЛистЗагружен = Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось обновить код прайс листа в каталоге:  " + стр.Поставщик + "	"+ ОписаниеОшибки();				
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				УдалитьАктивностьПоставщика(стр.Поставщик);
				Продолжить;
			КонецПопытки;

			
			ЗафиксироватьПрайсНаУдаление(КодПрайсЛистаНаУдаление);
			
			Попытка
				ДБФ.ЗакрытьФайл();
			Исключение
			КонецПопытки;			
			
			
			//Удаляем временный файлик
			Если Длина > 12 Тогда
				Попытка
					УдалитьФайлы(НовоеПолноеИмяФайла);
				Исключение
					//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
				КонецПопытки;                       
			КонецЕсли;
			
			
			Если ПрайсЛистЗагружен Тогда
				Попытка
					ПереместитьФайл(ФайлОбъектНовый.ПолноеИмя,ФайлОбъектНовый.Путь + "\backup\" + ФайлОбъектНовый.Имя);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		УдалитьАктивностьПоставщика(стр.Поставщик);
	КонецЦикла;
	
	ТЧПриАктивизацииСтроки("");
	
КонецПроцедуры

ВидНастройки = "Прайс";