Перем ТекДата;
Перем ID;
Перем мИнтервалАвтосохранения;
Перем мВремяСледующегоСохранения;


Функция Лог(Знач пар_1=Неопределено)
	
	Возврат -1;  // Делаем возврат , ибо надо доработать, на случай , если доступа к папке нет
	пл_ТД = ТекущаяДата();
	пл_ИмяФайла = "\\z130\common\Чернов\1C_A5.dbf";
	
	Попытка
		Если пар_1=-1 Тогда
			Возврат -1;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	о_Файл = Новый Файл(пл_ИмяФайла);
	Если НЕ о_Файл.Существует() Тогда
		о_XBase = Новый XBase;
		о_XBase.поля.Добавить("computer", "S", 25);
		о_XBase.поля.Добавить("user"		, "S", 25);
		о_XBase.поля.Добавить("process"	, "S", 200);
		о_XBase.поля.Добавить("d_start"	, "D");
		о_XBase.поля.Добавить("t_start"	, "S", 8);
		о_XBase.поля.Добавить("t_end"		, "S", 8);
		о_XBase.поля.Добавить("work_sec", "N", 4);
		о_XBase.СоздатьФайл(пл_ИмяФайла);
		Если НЕ о_XBase.Открыта() Тогда
			Возврат -1;
		КонецЕсли;
		о_XBase.ЗакрытьФайл();
	КонецЕсли;

	о_XBase = Новый XBase;
	Пока ИСТИНА Цикл
		Попытка
			о_XBase.ОткрытьФайл(пл_ИмяФайла,,Ложь);
			Если о_XBase.Открыта() Тогда
				Прервать;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Состояние("Ожидание разблокировки файла: "+пл_ИмяФайла+" ...");
		Если (ТекущаяДата()-пл_ТД)>5 Тогда
			Возврат -1; // Если пытаемся открыть файл более 5 сек, то прерываем это занятие ...
		КонецЕсли;
	КонецЦикла;
	
	Состояние("");
	о_XBase.Кодировка = КодировкаXBase.ANSI;
	Если ТипЗнч(пар_1)<>ТипЗнч(0) Тогда
		о_XBase.Добавить();
		о_XBase.computer= ИмяКомпьютера();
		о_XBase.user		= ИмяПользователя();
		о_XBase.process	= пар_1;
		
		пл_ТД = ТекущаяДата();
		о_XBase.d_start	= пл_ТД;
		о_XBase.t_start	= Формат(пл_ТД, "ДЛФ=T");
		о_XBase.Записать();
		
		пл_Возврат = о_XBase.НомерЗаписи();
		о_XBase.ЗакрытьФайл();
		Возврат пл_Возврат;
	Иначе
		о_XBase.Перейти(пар_1);
		
		пл_Начало		= о_XBase.t_start;
		пл_Конец 		= Формат(пл_ТД, "ДЛФ=T");;
		о_XBase.t_end = пл_Конец;
		
		пл_Начало = Число(Лев(пл_Начало, 2))*60*60 + Число(Сред(пл_Начало, 4, 2))*60 + Число(Прав(пл_Начало, 2));
		пл_Конец	= Число(Лев(пл_Конец , 2))*60*60 + Число(Сред(пл_Конец , 4, 2))*60 + Число(Прав(пл_Конец , 2));
		
		Если пл_Конец>=пл_Начало Тогда
			о_XBase.work_sec = пл_Конец-пл_Начало;
		Иначе
			о_XBase.work_sec = 24*60*60-пл_Начало+пл_Конец;
		КонецЕсли;
		
		о_XBase.Записать();
		о_XBase.ЗакрытьФайл();
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ОкруглениеВБольшую(число)
	Целое = Цел(число);
	Если Целое = число Тогда
		Возврат число;
	Иначе
		Возврат Целое + 1;
	КонецЕсли;
КонецФункции

Функция СоздатьИЗаполнитьСоответствие()

	
	СоответствиеСкоростей = Новый Соответствие;
	СоответствиеСкоростей.Вставить("V1",0);
	СоответствиеСкоростей.Вставить("V2",0);
	СоответствиеСкоростей.Вставить("V3",0);
	СоответствиеСкоростей.Вставить("V4",0);
	СоответствиеСкоростей.Вставить("K1",0.5);
	СоответствиеСкоростей.Вставить("K2",0.3);
	СоответствиеСкоростей.Вставить("K3",0.15);
	СоответствиеСкоростей.Вставить("K4",0.05);
	
	Возврат СоответствиеСкоростей;
	
КонецФункции

Процедура СоздатьФайлЗаказа(Аптека,ТЗ)
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	      |	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
	      |	ЗаявкаНаТовар.Дата КАК Дата
	      |ИЗ
	      |	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
	      |ГДЕ
	      |	ЗаявкаНаТовар.Склад = &Склад
	      |	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата УБЫВ,
	      |	НомерЗаявкиАптеки УБЫВ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Аптека);
	Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказОфиса);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
		НовыйНомер = "АЗ-0000001";
	Иначе
		Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) Тогда //Зачем два автозаказа в один день
			Возврат;
		КонецЕсли;
		ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
		НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
		НовыйНомер = Лев("АЗ-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
	КонецЕсли;
	
	ИмяФайла = "dem" + ВыбАптека.Код + "_" + НовыйНомер + "_"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ВремФайл = Константы.КаталогФТП.Получить() + "Out\demtemp.dbf";
	ВыгружаемыйФайл = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".dbf" ;
	ВыгружаемыйАрхив = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".zip" ;
	ДатаЗаказа = ТекущаяДата();
	
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("NDOC","S",20);
	ДБФ.поля.Добавить("DDOC","D",,);
	ДБФ.поля.Добавить("IDGOOD","N",10,0);
	ДБФ.поля.Добавить("QNT","N",10,0);
	ДБФ.поля.Добавить("IDTYPE","N",10,0);
	ДБФ.СоздатьФайл(ВремФайл);
	
	Для Каждого стр из ТЗ ЦИкл
		Если стр.Заказать > 0 Тогда	
			ДБФ.Добавить();
			ДБФ.NDOC=НовыйНомер;
			ДБФ.DDOC=ДатаЗаказа;
			ДБФ.IDGOOD=стр.Код;
			ДБФ.QNT=стр.Заказать;
			ДБФ.IDTYPE= 5;
			ДБФ.Записать();
		КонецЕсли;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	ПереместитьФайл(ВремФайл,ВыгружаемыйФайл);
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ВыгружаемыйФайл,ВыгружаемыйАрхив);
	УдалитьФайлы(ВыгружаемыйФайл);
	
КонецПроцедуры


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	
	//Если ПустаяСтрока(Аптека) = Истина Тогда
	//	Предупреждение("Не выбрана аптека!");
	//	Возврат;
	//КонецЕсли;
	//

	//КоличествоДней = ДеньГода(КонПериода) - ДеньГода(НачПериода) + 1;
	//Дата1 = НачалоДня(НачПериода);
	//
	//ТЗ=Новый ТаблицаЗначений();

	//ТЗ.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	//
	//
	//Для к = 1 по КоличествоДней Цикл
	//	стр = ТЗ.Добавить();
	//	стр.Дата = Дата1;
	//	Дата1 = Дата1 + 24*60*60;
	//КонецЦикла;
	//
	//НомерСтроки = 0;
	//КоличествоСтрок = ТЗ.Количество();
	//ТХТ = "ВЫБРАТЬ
	//|	Матрица.Владелец.Товар.ЕдиницаПоУмолчанию.Код как ЕИТ,
	//|	Матрица.Владелец.Товар.Код КАК Код,
	//|	Матрица.Владелец.Товар.Наименование КАК Товар,
	//|";
	//
	////ТХТ = ТХТ + "
	////|_2009_11_01.Остаток как _2009_11_01";
	//
	//Для каждого стр из ТЗ Цикл
	//	НомерСтроки = НомерСтроки + 1;
	//	ТХТ = ТХТ + "
	//	| _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + ".Остаток как _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + ?(КоличествоСтрок = НомерСтроки,"",",") + "";		
	//	
	//КонецЦикла;
	//
	//ТХТ = ТХТ + "
	//|ИЗ
	//|	Справочник.Матрица КАК Матрица
	//|";
	//
	//НомерДня = 0;
	//Для каждого стр из ТЗ Цикл
	//НомерДня = НомерДня + 1;
	//	
	//ТХТ = ТХТ + "	
	//| ЛЕВОЕ СОЕДИНЕНИЕ 
	//| (ВЫБРАТЬ
	//|	
	//|	ПартииЖНВЛСОстатки.Товар.Код как Код,
	//|	Сумма(ПартииЖНВЛСОстатки.КолвоОстаток/ПартииЖНВЛСОстатки.Партия.ЕИТЗакупки.К) КАК Остаток
	//|
	//|
	//|ИЗ
	//|	РегистрНакопления.ПартииЖНВЛС.Остатки(
	//|			&ДатаОстатка" + НомерДня + ",
	//|			Склад = &Аптека
	//|				) КАК ПартииЖНВЛСОстатки
	//|СГРУППИРОВАТЬ ПО
	//|ПартииЖНВЛСОстатки.Товар.Код ) как _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + " ПО Матрица.Код = _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + ".Код
	//|";
	//КонецЦикла;
	//ТХТ = ТХТ + "
	//|ГДЕ
	//|	Матрица.Аптека = &Аптека	
	//|";
	//
	//Сообщить(ТХТ);
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("Аптека",Аптека);
	//НомерДня = 0;
	//Для каждого стр из ТЗ Цикл
	//	НомерДня = НомерДня + 1;
	//	Запрос.УстановитьПараметр("ДатаОстатка"+НомерДня,КонецДня(стр.Дата));
	//КонецЦикла;
	//ТЗЗапроса = Запрос.Выполнить().Выгрузить();	
	//ЭлементыФормы.ТЗ.Значение = ТЗЗапроса;
	//ЭлементыФормы.ТЗ.СоздатьКолонки();
	
КонецПроцедуры

Функция ФильтрацияВсплесков(ТЗ,Скорость,Период,Код,КоличествоДнейПродаж);  //Фильтруем всплески
	
	БылВсплеск = Ложь;
	Если Скорость >= 10 Тогда
		Отклонение = 200;
	ИначеЕсли Скорость >=5 и Скорость <10 Тогда
		Отклонение = 400;
	ИначеЕсли Скорость > 1 и Скорость <5 Тогда
		Отклонение = 500;
	ИначеЕсли Скорость <=1 Тогда
		Отклонение = 800;
	КонецЕсли;
		
		
	Отбор = Новый Структура;
	Отбор.Вставить("Код",Код);
	Отбор.Вставить("Периоды",Период);
	НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
	
	Для каждого стр из НайденныеСтроки Цикл
		Если стр.Продажи > 4 Тогда
			РасчетноеОтклонение = (стр.Продажи - Скорость)*100/Скорость;
			РасчетноеОтклонение = ?(РасчетноеОтклонение < 0,(-1)*РасчетноеОтклонение,РасчетноеОтклонение);
			Если РасчетноеОтклонение > Отклонение Тогда
				 БылВсплеск = Истина;
				 стр.Продажи = стр.Продажи/(1+(РасчетноеОтклонение - Отклонение)/100);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если БылВсплеск = Истина Тогда
		НовыеПродажи = 0;
		Для каждого стр из НайденныеСтроки Цикл
			НовыеПродажи = НовыеПродажи + стр.Продажи;	
		КонецЦикла;
		Скорость = Окр(НовыеПродажи/КоличествоДнейПродаж,3);
	КонецЕсли;
	
	Возврат Скорость;
	
КонецФункции

Функция РасчитатьXYZ(Dx,ТЗ,Код,ДнейПродаж,КоличествоПродаж)
	
	ГруппаXYZ = "";
	Если (ДнейПродаж = 0) или (ДнейПродаж = 1) Тогда
		Возврат ГруппаXYZ;
	КонецЕсли;
	
	СредняяПродажа = КоличествоПродаж/ДнейПродаж;
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("Код",Код);
	НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
	//расчитаем Сумму (Xi-СредняяПродажа)^2
	Сумма = 0;
	Для каждого стр из НайденныеСтроки Цикл
		Если стр.ЕдиницаДляСвертки = 0 Тогда
			Продолжить;
		КонецЕсли;
		Сумма = Сумма + Pow((стр.Продажи - СредняяПродажа),2);
	КонецЦикла;

	Отклонение = Окр(Sqrt(Сумма/(ДнейПродаж-1)),2);
	Dx = Отклонение;
	Если Отклонение > 0 и Отклонение <=0.3 Тогда
	    ГруппаXYZ = "X";
	ИначеЕсли Отклонение > 0.3 и Отклонение <= 1.3 Тогда
	    ГруппаXYZ = "Y";		
	ИначеЕсли Отклонение > 1.3 и Отклонение <=4 Тогда
		ГруппаXYZ = "Z";
	ИначеЕсли Отклонение > 4 Тогда
		ГруппаXYZ = "W";
	КонецЕсли;
	
	Возврат ГруппаXYZ;
		
	
	
КонецФункции

Процедура РасчетABC()
	
	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.ЛогОбработки;
	ЭлементыФормы.Лог.ДобавитьСтроку("Начало расчета ABC: " + ТекущаяДата());
	
	Для Каждого ЭлементСписка Из СписокАптек Цикл
		Если ЭлементСписка.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
	
	Если НачПериода = ОМ3_ПустаяДата() или КонПериода = ОМ3_ПустаяДата() Тогда
		Предупреждение("Неправильно выбран период");
		Возврат;
	КонецЕсли;
	
	Если ПроцентА = 0 Тогда
		Предупреждение("Не задан процент А");
		Возврат;
	КонецЕсли;
	
	Если ПроцентБ = 0 Тогда
		Предупреждение("Не задан процент В");
		Возврат;
	КонецЕсли;
	
	ID = Лог("Автозаказ - расчет ABC " + ЭлементСписка.Значение);
	ЭлементыФормы.Лог.ДобавитьСтроку("- " + ЭлементСписка.Значение);
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	МатрицаАптеки.ГруппаАПВМатрице КАК ГруппаАПВМатрице,
	      |	МатрицаАптеки.АПаптеки,
	      |	МатрицаАптеки.АПТовар,
	      |	ЕСТЬNULL(Продажи.Товар.Наименование, МатрицаАптеки.АПТовар.Наименование) КАК Товар,
	      |	ВЫБОР
	      |		КОГДА Продажи.Товар.Наименование ЕСТЬ NULL 
	      |			ТОГДА ВЫБОР
	      |					КОГДА МатрицаАптеки.ГруппаАПВМатрице ПОДОБНО ""[ABCD]""
	      |						ТОГДА ""D""
	      |					КОГДА МатрицаАптеки.ГруппаАПВМатрице ПОДОБНО ""[GISXF]""
	      |						ТОГДА МатрицаАптеки.ГруппаАПВМатрице
	      |					ИНАЧЕ """"
	      |				КОНЕЦ
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА МатрицаАптеки.ГруппаАПВМатрице ПОДОБНО ""[GISXF]""
	      |					ТОГДА МатрицаАптеки.ГруппаАПВМатрице
	      |				ИНАЧЕ """"
	      |			КОНЕЦ
	      |	КОНЕЦ КАК ГруппаИтог,
	      |	Продажи.Количество,
	      |	Продажи.СуммаВыручка,
	      |	Продажи.СуммаВаловая
	      |ИЗ
	      |	(ВЫБРАТЬ
	      |		РеализацияККМТовар.Товар КАК Товар,
	      |		СУММА(РеализацияККМТовар.Количество * РеализацияККМТовар.К / РеализацияККМТовар.Партия.ЕИТЗакупки.К) КАК Количество,
	      |		СУММА(РеализацияККМТовар.Сумма) КАК СуммаВыручка,
	      |		СУММА(РеализацияККМТовар.Сумма - РеализацияККМТовар.СуммаЗакуп) КАК СуммаВаловая
	      |	ИЗ
	      |		Документ.РеализацияККМ.Товар КАК РеализацияККМТовар
	      |	ГДЕ
	      |		РеализацияККМТовар.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	      |		И РеализацияККМТовар.Ссылка.Склад = &Аптека
	      |	
	      |	СГРУППИРОВАТЬ ПО
	      |		РеализацияККМТовар.Товар) КАК Продажи
	      |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК АПаптеки,
	      |			Выборка.Товар КАК АПТовар,
	      |			Выборка.ГруппаАПИтог КАК ГруппаАПВМатрице
	      |		ИЗ
	      |			РегистрСведений.Матрица КАК Выборка
	      |		ГДЕ
	      |			Выборка.Аптека = &Аптека) КАК МатрицаАптеки
	      |		ПО Продажи.Товар = МатрицаАптеки.АПТовар";
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",ЭлементСписка.Значение);
	Запрос.УстановитьПараметр("Дата1",НачПериода);
	Запрос.УстановитьПараметр("Дата2",КонПериода);
	
	
	ТЗЗапроса = Запрос.Выполнить().Выгрузить();
////-----------------------------	
//	ТЗЗапроса.Сортировать("Товар");
//	ЭлементыФормы.ТЗ.Значение = ТЗЗапроса;
//	ЭлементыФормы.ТЗ.СоздатьКолонки();
//	Возврат;
////--------------------------------	
	//Посчитаем общие суммы и количества
	КоличествоИтог	= ТЗЗапроса.Итог("Количество");
	СуммаВыручкаИтог = ТЗЗапроса.Итог("СуммаВыручка");
	СуммаВаловаяИтог = ТЗЗапроса.Итог("СуммаВаловая");
	
	//Посчитаем проценты
	Процентов80 = Окр(КоличествоИтог*ПроцентА/100,2);
	Процентов95 = Окр(КоличествоИтог*(ПроцентА + ПроцентБ)/100,2);
	
	ТЗЗапроса.Колонки.Добавить("ГруппаУпак");
	ТЗЗапроса.Колонки.Добавить("ГруппаВал");
	ТЗЗапроса.Колонки.Добавить("ГруппаВыр");
	//ТЗЗапроса.Колонки.Добавить("ГруппаИтог");
	
	//ЭлементыФормы.Индикатор.Значение = 0;
	//ЭлементыФормы.Индикатор.МаксимальноеЗначение = ТЗЗапроса.Количество();
	//Считаем ABC по количеству
	ТЗЗапроса.Сортировать("Количество Убыв");
	
	Состояние("Расчет ABC по количеству упаковок....");
	НакопительнаяСумма = 0;
	Для Каждого стр из ТЗЗапроса Цикл
		//ЭлементыФормы.Индикатор.Значение = ЭлементыФормы.Индикатор.Значение + 1;
		Если стр.Количество = NULL Тогда
			Если стр.ГруппаИтог = "" 
				или стр.ГруппаИтог = "A" 
				или стр.ГруппаИтог = "B" 
				или стр.ГруппаИтог = "C" Тогда
				стр.ГруппаИтог = "D";
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		НакопительнаяСумма = НакопительнаяСумма + стр.Количество;
		Если НакопительнаяСумма <=Процентов80 Тогда
			стр.ГруппаУпак = "A";
		ИначеЕсли (НакопительнаяСумма > Процентов80) и (НакопительнаяСумма <= Процентов95) Тогда
			стр.ГруппаУпак = "B";
		Иначе
			стр.ГруппаУпак = "C";
		КонецЕсли;
	КонецЦикла;
	
	//Считаем ABC по выручке
	Процентов80 = Окр(СуммаВыручкаИтог*ПроцентА/100,2);
	Процентов95 = Окр(СуммаВыручкаИтог*(ПроцентА + ПроцентБ)/100,2);	
	ТЗЗапроса.Сортировать("СуммаВыручка Убыв");
	
	Состояние("Расчет ABC по сумме выручки....");
	//ЭлементыФормы.Индикатор.Значение = 0;
	НакопительнаяСумма = 0;
	Для Каждого стр из ТЗЗапроса Цикл
		//ЭлементыФормы.Индикатор.Значение = ЭлементыФормы.Индикатор.Значение + 1;
		Если стр.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		НакопительнаяСумма = НакопительнаяСумма + стр.СуммаВыручка;
		Если НакопительнаяСумма <=Процентов80 Тогда
			стр.ГруппаВыр = "A";
		ИначеЕсли (НакопительнаяСумма > Процентов80) и (НакопительнаяСумма <= Процентов95) Тогда
			стр.ГруппаВыр = "B";
		Иначе
			стр.ГруппаВыр = "C";
		КонецЕсли;
	КонецЦикла;	
	
	
		//Считаем ABC по валовой прибыли
	Процентов80 = Окр(СуммаВаловаяИтог*ПроцентА/100,2);
	Процентов95 = Окр(СуммаВаловаяИтог*(ПроцентА + ПроцентБ)/100,2);	
	ТЗЗапроса.Сортировать("СуммаВаловая Убыв");
	
	Состояние("Расчет ABC по сумме валовой прибыли....");
	//ЭлементыФормы.Индикатор.Значение = 0;
	НакопительнаяСумма = 0;
	Для Каждого стр из ТЗЗапроса Цикл
		//ЭлементыФормы.Индикатор.Значение = ЭлементыФормы.Индикатор.Значение + 1;
		Если стр.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;	
		
		НакопительнаяСумма = НакопительнаяСумма + стр.СуммаВаловая;
		Если НакопительнаяСумма <=Процентов80 Тогда
			стр.ГруппаВал = "A";
		ИначеЕсли (НакопительнаяСумма > Процентов80) и (НакопительнаяСумма <= Процентов95) Тогда
			стр.ГруппаВал = "B";
		Иначе
			стр.ГруппаВал = "C";
		КонецЕсли;
	КонецЦикла;
	
	//Теперь пройдемся по ТЗ и определим итоговую группу АП
	МатрицаABC = Новый Структура;
	Выборка = Справочники.МатрицаABC.Выбрать();
	Пока Выборка.Следующий() Цикл
		МатрицаABC.Вставить(Выборка.ГруппаУпак + ""+Выборка.ГруппаПрибыль + "" + Выборка.ГруппаВыручка,Выборка.ГруппаИтог);
	КонецЦикла;
	
	Состояние("Определение окончательной группы АП на основе матрицы ABC....");
	//ЭлементыФормы.Индикатор.Значение = 0;
	Для каждого стр из ТЗЗапроса Цикл
		//ЭлементыФормы.Индикатор.Значение = ЭлементыФормы.Индикатор.Значение + 1;
		Если стр.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		Если стр.ГруппаИтог <> "" Тогда
			Продолжить;
		КонецЕсли;
		стр.ГруппаИтог = МатрицаABC[стр.ГруппаУпак + "" + стр.ГруппаВал + "" + стр.ГруппаВыр]; 
	КонецЦикла;
	
	//А теперь обновим в матрице то, что мы тут расчитали
	НачатьТранзакцию();
	номер = 0;
	Состояние("Обновление групп АП в матрице аптеки....");
	
	МассивИзмерений = Новый Структура;
	МассивИзмерений.Вставить("Аптека",ЭлементСписка.Значение);	
		
	МассивИзменений = Новый Структура;
	МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
		
	Для каждого стр из ТЗЗапроса Цикл
		номер = номер + 1;
		
		
		Если стр.АПаптеки <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Если стр.ГруппаИтог = стр.ГруппаАПВМатрице Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.ГруппаАПВМатрице = "I" или
			стр.ГруппаАПВМатрице = "S" или 
			стр.ГруппаАПВМатрице = "X" или
			стр.ГруппаАПВМатрице = "G" или
			стр.ГруппаАПВМатрице = "F" Тогда
			Продолжить;
		КонецЕсли;
		
		Если номер%100 = 0 Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;

		МассивИзмерений.Вставить("Товар",стр.АПТовар);
		
		МассивИзменений.Вставить("ГруппаАПИтог",стр.ГруппаИтог);
		МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
		//Записываем изменения
		ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);		
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();	
	
	ЭлементСписка.Пометка = Истина;
	
	
	КонецЦикла;
	ЭлементыФормы.Лог.ДобавитьСтроку("Конец расчета ABC: " + ТекущаяДата());
КонецПроцедуры

Процедура РасчетQminQmax(ТЗЗапроса,Аптека)
	
		//Дальше идет расчет Qmin  и Qmax
		
			ТХТ = "ВЫБРАТЬ
			      |	Т.Код,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.Цена КАК Цена,
			      |	Т.Периоды КАК Периоды,
			      |	Т.ГруппаXYZ
			      |ПОМЕСТИТЬ ВТ1
			      |ИЗ
			      |	&Таб КАК Т
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Т.Код,
			      |	АП.Наименование КАК Товар,
			      |	АП.Ссылка КАК ТоварСсылка,
			      |	Матрица.КуМин КАК МатрицаКуМин,
			      |	Матрица.КуМакс КАК МатрицаКуМакс,
			      |	ЕСТЬNULL(ЕСТЬNULL(МатрицаНЗ_2.НЗ, МатрицаНЗ_1.НЗ), 0) КАК МатрицаНЗ,
			      |	Матрица.ГруппаАПИтог КАК ГруппаАП,
			      |	Т.Цена,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.ГруппаXYZ,
			      |	ВЫБОР
			      |		КОГДА АП.Поставщик = &ПустойПоставщик
			      |			ТОГДА 1
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК ПустойПоставщик,
			      |	0 КАК КуМинРасчет,
			      |	0 КАК КуМаксРасчет
			      |ИЗ
			      |	ВТ1 КАК Т
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
			      |		ПО (Матрица.Аптека = &Аптека)
			      |			И (Матрица.Товар.Код = Т.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = Т.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_1
			      |		ПО (МатрицаНЗ_1.Аптека = &Аптека)
			      |			И Т.Код = МатрицаНЗ_1.Товар.Код
			      |			И (МатрицаНЗ_1.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1))
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_2
			      |		ПО (МатрицаНЗ_2.Аптека = &Аптека)
			      |			И Т.Код = МатрицаНЗ_2.Товар.Код
			      |			И (МатрицаНЗ_2.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2))
			      |ГДЕ
			      |	Т.Периоды = 4
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ1";
			
	    //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Таб",ТЗЗапроса);
		Запрос.УстановитьПараметр("ПустойПоставщик",Справочники.Поставщики.ПустаяСсылка());
		ТЗЗапроса = Неопределено ;
		ТЗ = Запрос.Выполнить().Выгрузить();			
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
		КоличествоСтрок = ТЗ.Количество();
		ЭлементыФормы.Инд.МаксимальноеЗначение = КоличествоСтрок ;
		ЭлементыФормы.Инд.Значение = 0;
		ЭлементыФормы.текстПроцесса.Заголовок = "Расчет Qmin и Qmax...";
		
		Для каждого стр из ТЗ Цикл
			ЭлементыФормы.Инд.Значение = ЭлементыФормы.Инд.Значение + 1;
			//Если стр.Периоды < 4 Тогда
			//	Продолжить;
			//КонецЕсли;
			СредняяСкорость = стр.СредняяСкорость;
			Цена = стр.Цена;
			ГруппаАП = стр.ГруппаАП;
			//Получим коэффициенты нормативов
			Если Цена < 30 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 6; p = 5;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 8; p = 5;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 4; p = 5;				
				КонецЕсли;
			ИначеЕсли Цена >= 30 и Цена < 300 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 6; p = 5;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 7; p = 5;				
				КонецЕсли;
			ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 6; p = 5;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 7; p = 5;				
				КонецЕсли;
			ИначеЕсли Цена > 1500 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 4; p = 4;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 5; p = 4;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 6; p = 4;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 6; p = 4;				
				КонецЕсли;
			КонецЕсли;
			
			Если стр.ПустойПоставщик = 0 Тогда
				p = p*КоэффициентПоставщика;
			КонецЕсли;
			
			Если стр.ГруппаXYZ = "X" Тогда
				Kxyz = 0.8;
			ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
				Kxyz = 1;				
			ИначеЕсли стр.ГруппаXYZ = "Z" Тогда
				Kxyz = 1.3;				
			ИначеЕсли стр.ГруппаXYZ = "W" Тогда
				Kxyz = 1.5;								
			Иначе
				Kxyz = 1;
			КонецЕсли;
				
			//Расчет непосредственный 
			Если (СредняяСкорость > МинимальныйПорогСреднейСкорости) и  (СредняяСкорость < ПорогСреднейСкорости) Тогда
				//Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "C" или ГруппаАП = "D" Тогда
					//-------- Группа A -------------------------------------
					Если ГруппаАП = "A" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 3;
								стр.КуМаксРасчет = 6;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 4;
								стр.КуМаксРасчет = 8;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 3;
								стр.КуМаксРасчет = 6;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							КонецЕсли;						
						КонецЕсли;
					
					//-------- Группа B -------------------------------------
					ИначеЕсли ГруппаАП = "B" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 3;
								стр.КуМаксРасчет = 5;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;						
						КонецЕсли;
					
					
					//-------- Группа C -------------------------------------
					ИначеЕсли ГруппаАП = "C" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;						
						КонецЕсли;
					
                    //------ Группа D ----------------------------------------------
					ИначеЕсли ГруппаАП = "D" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;						
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;
			ИначеЕсли СредняяСкорость >= ПорогСреднейСкорости Тогда //Если скорость достоверна
				Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "G" Тогда
					стр.КуМинРасчет = СредняяСкорость*(1+(s*Ксз)*Kxyz);
					стр.КуМаксРасчет = СредняяСкорость*(1+(s*Ксз)*Kxyz+((p+КоэффициентУвеличенияПотребности)*Ксз));
					Если стр.КуМинРасчет < 1 Тогда
						стр.КуМинРасчет = ОкруглениеВБольшую(стр.КуМинРасчет);
						стр.КуМаксРасчет = ОкруглениеВБольшую(стр.КуМаксРасчет);
					Иначе
						стр.КуМинРасчет = Окр(стр.КуМинРасчет,0);
						стр.КуМаксРасчет = Окр(стр.КуМаксРасчет,0);
					КонецЕсли;						
				ИначеЕсли ГруппаАП = "C" Тогда
					Если Цена < 30 Тогда
						стр.КуМинРасчет = 2;
						стр.КуМаксРасчет = 3;
					ИначеЕсли Цена >= 30 и Цена < 300 Тогда
						стр.КуМинРасчет = 2;
						стр.КуМаксРасчет = 3;
					ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
						стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 2;
					ИначеЕсли Цена > 1500 Тогда
						стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 1;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СредняяСкорость <= МинимальныйПорогСреднейСкорости Тогда  //было СредняяСкорость > 0 и СредняяСкорость <= МинимальныйПорогСреднейСкорости
				 		стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 1;
			КонецЕсли;
			Если УчитыватьНЗ = Истина Тогда					
				//Корректируем Кумин и Кумакс с учетом незжимаемого запаса аптеки
				Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "C" или ГруппаАП = "D" Тогда
					Если стр.КуМинРасчет <= стр.МатрицаНЗ Тогда
						стр.КуМинРасчет = стр.МатрицаНЗ;
						Если стр.КуМаксРасчет < стр.МатрицаНЗ Тогда
							стр.КуМаксРасчет = стр.МатрицаНЗ;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//Иначе //Если скорость недостоверна
			//	Если ГруппаАП = "A" Тогда
			//		Если Цена < 30 Тогда
			//			стр.КуМинРасчет = 4;
			//			стр.КуМаксРасчет = 8;
			//		ИначеЕсли Цена >= 30 и Цена < 300 Тогда
			//			стр.КуМинРасчет = 3;
			//			стр.КуМаксРасчет = 6;
			//		ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 2;
			//		ИначеЕсли Цена > 1500 Тогда
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 2;
			//		КонецЕсли;
			//	ИначеЕсли  ГруппаАП = "B" или ГруппаАП = "G" Тогда
			//		Если Цена < 30 Тогда
			//			стр.КуМинРасчет = 3;
			//			стр.КуМаксРасчет = 5;
			//		ИначеЕсли Цена >= 30 и Цена < 300 Тогда
			//			стр.КуМинРасчет = 2;
			//			стр.КуМаксРасчет = 3;
			//		ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 2;
			//		ИначеЕсли Цена > 1500 Тогда
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 1;
			//		КонецЕсли;				
			//	КонецЕсли;
			//Конецесли;
			
		КонецЦикла;
		
		ЭлементыФормы.Инд.МаксимальноеЗначение = КоличествоСтрок;
		ЭлементыФормы.Инд.Значение = 0;
		ЭлементыФормы.текстПроцесса.Заголовок = "Обновление Qmin и Qmax в базе данных...";
		
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",Аптека);
		
		МассивИзменений = Новый Структура;
		ТекСотрудник = ПараметрыСеанса.ТекущийСотр;
		ДатаИзменения = ТекущаяДата();
		
		Для каждого стр из ТЗ Цикл
			ЭлементыФормы.Инд.Значение = ЭлементыФормы.Инд.Значение + 1;
			
			Если (стр.МатрицаКумин <> стр.КуМинРасчет) или (стр.МатрицаКуМакс <> стр.КуМаксРасчет) Тогда
				//измерения
				МассивИзмерений.Вставить("Товар",стр.ТоварСсылка); 
				//измеНения
				МассивИзменений.Вставить("КуМин",стр.КуМинРасчет); 
				МассивИзменений.Вставить("КуМакс",стр.КуМаксРасчет);
				МассивИзменений.Вставить("КтоВнесВМатрицу",ТекСотрудник);
				МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ДатаИзменения);
				//Записываем изменения
				ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);
			КонецЕсли;
			
		КонецЦикла;	
	
КонецПроцедуры
	
Процедура РасчетАвтозаказа(ТЗЗапроса,Аптека)	
		
	       
			//ТХТ = "ВЫБРАТЬ
			//	  |	Т.Код,
			//	  |	Т.МатрицаКуМин,
			//	  |	Т.МатрицаКуМакс,
			//	  |	Т.СредняяСкорость
			//	  |ПОМЕСТИТЬ ВТ
			//	  |ИЗ
			//	  |	&Таб КАК Т
			//	  |ГДЕ
			//	  |	Т.Периоды = 4
			//	  |;
			//	  |
			//	  |////////////////////////////////////////////////////////////////////////////////
			//	  |ВЫБРАТЬ
			//	  |	Выборка.Код,
			//	  |	Выборка.КуМин,
			//	  |	Выборка.КуМакс,
			//	  |	Выборка.Остаток,
			//	  |	Выборка.СредняяСкорость,
			//	  |	ВЫБОР
			//	  |		КОГДА Выборка.Остаток > Выборка.СредняяСкорость
			//	  |			ТОГДА ВЫРАЗИТЬ(Выборка.КуМакс - (Выборка.Остаток - Выборка.СредняяСкорость) как ЧИСЛО(10,0))
			//	  |		ИНАЧЕ Выборка.КуМакс
			//	  |	КОНЕЦ КАК Заказать
			//	  |ИЗ
			//	  |	(ВЫБРАТЬ
			//	  |		ВТ.Код КАК Код,
			//	  |		ВТ.МатрицаКуМин КАК КуМин,
			//	  |		ВТ.МатрицаКуМакс КАК КуМакс,
			//	  |		ОстатокНаНачало.Остаток КАК Остаток,
			//	  |		ВТ.СредняяСкорость КАК СредняяСкорость
			//	  |	ИЗ
			//	  |		ВТ КАК ВТ
			//	  |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			//	  |				ПартииЖНВЛСОстатки.Товар.Код КАК Код,
			//	  |				СУММА(ПартииЖНВЛСОстатки.КолвоОстаток / ПартииЖНВЛСОстатки.Партия.ЕИТЗакупки.К) КАК Остаток
			//	  |			ИЗ
			//	  |				РегистрНакопления.ПартииЖНВЛС.Остатки(&ДатаОстатка, Склад = &Аптека) КАК ПартииЖНВЛСОстатки
			//	  |			
			//	  |			СГРУППИРОВАТЬ ПО
			//	  |				ПартииЖНВЛСОстатки.Товар.Код) КАК ОстатокНаНачало
			//	  |			ПО (ОстатокНаНачало.Код = ВТ.Код)) КАК Выборка
			//	  |ГДЕ
			//	  |	Выборка.Остаток <= Выборка.КуМин
			//	  |;
			//	  |
			//	  |////////////////////////////////////////////////////////////////////////////////
			//	  |УНИЧТОЖИТЬ ВТ";
			Состояние("Закрытие товаров в пути...");
			ЭлементыФормы.Лог.ДобавитьСтроку("		- Начало закрытия товаров в пути: " + ТекущаяДата());
			ОМ21_ЗаказыПоставщикам.ОМ21_ЗакрытьТоварыВПути(Аптека,ТекущаяДата());
			ЭлементыФормы.Лог.ДобавитьСтроку("		- Конец  закрытия товаров в пути: " + ТекущаяДата());
			Состояние("Расчет количества заказа...");
			
			ТХТ = "ВЫБРАТЬ
			      |	Т.Код,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.Продажи КАК Продажи,
			      |	Т.ЕдиницаДляСвертки КАК ДнейПродаж,
			      |	Т.Цена КАК Цена,
			      |	Т.Активный
			      |ПОМЕСТИТЬ ВТ1
			      |ИЗ
			      |	&Таб КАК Т
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Т.Код,
			      |	Т.Цена,
			      |	Т.Активный,
			      |	СУММА(Т.СредняяСкорость) КАК СредняяСкорость,
			      |	СУММА(Т.Продажи) КАК Продажи,
			      |	СУММА(Т.ДнейПродаж) КАК ДнейПродаж
			      |ПОМЕСТИТЬ ВТ
			      |ИЗ
			      |	ВТ1 КАК Т
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Т.Код,
			      |	Т.Цена,
			      |	Т.Активный
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Выборка.Код,
			      |	Выборка.ГруппаАП,
			      |	Выборка.КуМин,
			      |	Выборка.КуМакс,
			      |	Выборка.НЗ,
			      |	Выборка.Продажи,
			      |	Выборка.Остаток,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток <= Выборка.КуМин
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |				И Выборка.Активный = ИСТИНА
			      |			ТОГДА ВЫБОР
			      |					КОГДА Выборка.Остаток > Выборка.СредняяСкорость
			      |						ТОГДА ВЫРАЗИТЬ(Выборка.КуМакс - (Выборка.Остаток - Выборка.СредняяСкорость) КАК ЧИСЛО(10, 0))
			      |					ИНАЧЕ Выборка.КуМакс
			      |				КОНЕЦ
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Заказать,
			      |	Выборка.ДнейПродаж,
			      |	Выборка.СредняяСкорость,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток = 0
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |			ТОГДА 1
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Дефектура,
			      |	Выборка.Цена,
			      |	0 КАК Сумма,
			      |	Выборка.ПризнакРекламнойАкции,
			      |	Выборка.СрокДействияРекламнойАкции,
			      |	Выборка.Активный
			      |ПОМЕСТИТЬ ИтоговыйЗаказ
			      |ИЗ
			      |	(ВЫБРАТЬ
			      |		ВТ.Код КАК Код,
			      |		Матрица.ГруппаАПИтог КАК ГруппаАП,
			      |		ВТ.Продажи КАК Продажи,
			      |		ВТ.ДнейПродаж КАК ДнейПродаж,
			      |		ЕСТЬNULL(Матрица.КуМин, 0) КАК КуМин,
			      |		ЕСТЬNULL(Матрица.КуМакс, 0) КАК КуМакс,
			      |		ЕСТЬNULL(ЕСТЬNULL(МатрицаНЗ_2.НЗ, МатрицаНЗ_1.НЗ), 0) КАК НЗ,
			      |		ВТ.Цена КАК Цена,
			      |		ЕСТЬNULL(ОстатокНаНачало.Остаток, 0) КАК Остаток,
			      |		ЕСТЬNULL(ВТ.СредняяСкорость, 0) КАК СредняяСкорость,
			      |		ВЫБОР
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0) > 0
			      |				ТОГДА МатрицаНЗ_2.РекламнаяАкция
			      |			ИНАЧЕ МатрицаНЗ_1.РекламнаяАкция
			      |		КОНЕЦ КАК ПризнакРекламнойАкции,
			      |		ВЫБОР
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0) > 0
			      |				ТОГДА МатрицаНЗ_2.СрокДействияРекламы
			      |			ИНАЧЕ МатрицаНЗ_1.СрокДействияРекламы
			      |		КОНЕЦ КАК СрокДействияРекламнойАкции,
			      |		ВТ.Активный КАК Активный
			      |	ИЗ
			      |		ВТ КАК ВТ
			      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			      |				ПартииЖНВЛСОстатки.Товар.Код КАК Код,
			      |				СУММА(ПартииЖНВЛСОстатки.КолвоОстаток / ПартииЖНВЛСОстатки.Партия.ЕИТЗакупки.К) КАК Остаток
			      |			ИЗ
			      |				РегистрНакопления.ПартииЖНВЛС.Остатки(&ДатаОстатка, Склад = &Аптека) КАК ПартииЖНВЛСОстатки
			      |			ГДЕ
			      |				ПартииЖНВЛСОстатки.КолвоОстаток > 0
			      |			
			      |			СГРУППИРОВАТЬ ПО
			      |				ПартииЖНВЛСОстатки.Товар.Код) КАК ОстатокНаНачало
			      |			ПО (ОстатокНаНачало.Код = ВТ.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
			      |			ПО (Матрица.Аптека = &Аптека)
			      |				И (Матрица.Товар.Код = ВТ.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_1
			      |			ПО (МатрицаНЗ_1.Аптека = &Аптека)
			      |				И ВТ.Код = МатрицаНЗ_1.Товар.Код
			      |				И (МатрицаНЗ_1.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1))
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_2
			      |			ПО (МатрицаНЗ_2.Аптека = &Аптека)
			      |				И ВТ.Код = МатрицаНЗ_2.Товар.Код
			      |				И (МатрицаНЗ_2.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2))) КАК Выборка
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	ИТОГОВЫЙЗАКАЗ.Код,
			      |	АП.Наименование КАК Товар,
			      |	АП.МинимальныйЗаказ КАК МинимальныйЗаказ,
			      |	ИТОГОВЫЙЗАКАЗ.ГруппаАП,
			      |	ИТОГОВЫЙЗАКАЗ.КуМин,
			      |	ИТОГОВЫЙЗАКАЗ.КуМакс,
			      |	ИТОГОВЫЙЗАКАЗ.НЗ,
			      |	ИТОГОВЫЙЗАКАЗ.Продажи,
			      |	ЕСТЬNULL(ТоварыВПути.ВПути, 0) КАК ВПути,
			      |	ИТОГОВЫЙЗАКАЗ.Остаток,
			      |	ВЫБОР
			      |		КОГДА ЕСТЬNULL(ТоварыВПути.ВПути, 0) > 0
			      |			ТОГДА 0
			      |		ИНАЧЕ ИТОГОВЫЙЗАКАЗ.Заказать
			      |	КОНЕЦ КАК Заказать,
			      |	0 КАК Резерв,
			      |	ИТОГОВЫЙЗАКАЗ.ДнейПродаж,
			      |	ИТОГОВЫЙЗАКАЗ.СредняяСкорость,
			      |	ИТОГОВЫЙЗАКАЗ.Дефектура,
			      |	ИТОГОВЫЙЗАКАЗ.Цена,
			      |	ИТОГОВЫЙЗАКАЗ.Сумма,
			      |	ИТОГОВЫЙЗАКАЗ.ПризнакРекламнойАкции,
			      |	ИТОГОВЫЙЗАКАЗ.СрокДействияРекламнойАкции,
			      |	ИТОГОВЫЙЗАКАЗ.Активный
			      |ИЗ
			      |	ИтоговыйЗаказ КАК ИТОГОВЫЙЗАКАЗ
			      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			      |			ЗаказПоставщикуОстатки.Товар.Код КАК Код,
			      |			ЗаказПоставщикуОстатки.КоличествоОстаток КАК ВПути
			      |		ИЗ
			      |			РегистрНакопления.ЗаказПоставщику.Остатки(&ДатаОстатка, Склад = &Аптека) КАК ЗаказПоставщикуОстатки) КАК ТоварыВПути
			      |		ПО (ТоварыВПути.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |
			      |УПОРЯДОЧИТЬ ПО
			      |	АП.Наименование
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ1
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ИтоговыйЗаказ
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ";
			
	    //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДатаОстатка",ТекущаяДата());
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Таб",ТЗЗапроса);
		ТЗ = Запрос.Выполнить().Выгрузить();	
		
		Если КоэффициентЗаказаA = 1 и КоэффициентЗаказаB = 1 и КоэффициентЗаказаC = 1 и КоэффициентЗаказаD = 1 Тогда
		Иначе
			Для Каждого стр из ТЗ Цикл
				Если стр.ГруппаАП = "A" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаA,0);
				ИначеЕсли стр.ГруппаАП = "B" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаB,0);
				ИначеЕсли стр.ГруппаАП = "C" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаC,0);
				ИначеЕсли стр.ГруппаАП = "D" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаD,0);					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Если ОграничениеДляНовыхАптек = Истина Тогда
		//	Для каждого стр из ТЗ Цикл
		//		Если стр.Продажи = 0 Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		УдвоенныеПродажи = (стр.Продажи*Поле_Коэфф);  // Исправил 2 на Поле_Коэфф по просьбе Санакоева 02/03/2010
		//		Если (стр.Заказать > УдвоенныеПродажи) и (стр.НЗ < УдвоенныеПродажи) Тогда
		//			стр.Заказать = УдвоенныеПродажи;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
		
		спр_АП = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
		Для каждого стр из ТЗ Цикл
			
		
			Если ОграничениеДляНовыхАптек = Истина Тогда
				Если стр.Продажи <> 0 Тогда
					УдвоенныеПродажи = (стр.Продажи*Поле_Коэфф);  // Исправил 2 на Поле_Коэфф по просьбе Санакоева 02/03/2010
					Если (стр.Заказать > УдвоенныеПродажи) и (стр.НЗ < УдвоенныеПродажи) Тогда
						стр.Заказать = УдвоенныеПродажи;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			Если Флаг_УчестьРеквизитМинимальныйЗаказ Тогда
				Попытка
					Если (стр.Заказать>0) Тогда
						// Если есть заказ
						//пер_МЗ = спр_АП.НайтиПоКоду(стр.Код).МинимальныйЗаказ;
						Если стр.Заказать<стр.МинимальныйЗаказ Тогда
							// Если Заказ>0 но меньше минимального заказа
							стр.Заказать = стр.МинимальныйЗаказ;
						Иначе
							Если УчитыватьКратностьЗаказа = Истина Тогда
								Если стр.МинимальныйЗаказ > 0 Тогда
									стр.Заказать = Окр(стр.Заказать/стр.МинимальныйЗаказ,0)*стр.МинимальныйЗаказ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					Сообщить("Это сообщение только для ИТ! Ничего страшного :) "+ОписаниеОшибки());
					Прервать;
				КонецПопытки;
			КонецЕсли;
			
			Если ПрименятьКоэффПоНЗ = Истина Тогда
				Если стр.Заказать > 0 и стр.НЗ > 0 Тогда
					КоличествоСНЗ = Окр(стр.НЗ/КоэффПоНЗ,0);
					КоличествоСНЗ = ?(КоличествоСНЗ=0,1,КоличествоСНЗ);
					стр.Заказать = Макс(стр.Заказать,КоличествоСНЗ);	
				КонецЕсли;
			КонецЕсли;
			
			стр.Сумма = стр.Заказать*стр.Цена;
			
		КонецЦикла;
		
		ТЗ.Колонки.Удалить("МинимальныйЗаказ");
		
		//СоздатьФайлЗаказа(Аптека,ТЗРез);
		//ЭлементыФормы.ТЗ.Значение = ТЗРез;
		//ТЗ.Колонки["Код"].Ширина = 10;
		//ТЗ.Колонки["Товар"].Ширина = 100;
		//ТЗ.Колонки["ГруппаАП"].Ширина = 5;
		//ТЗ.Колонки["КуМин"].Ширина = 10;
		//ТЗ.Колонки["КуМакс"].Ширина = 10;
		//ТЗ.Колонки["Продажи"].Ширина = 10;
		//ТЗ.Колонки["ВПути"].Ширина = 10;
		//ТЗ.Колонки["Остаток"].Ширина = 10;		
		//ТЗ.Колонки["Заказать"].Ширина = 10;
		//ТЗ.Колонки["Резерв"].Ширина = 10;
		//ТЗ.Колонки["ДнейПродаж"].Ширина = 10;		
		//ТЗ.Колонки["СредняяСкорость"].Ширина = 10;		
		//ТЗ.Колонки["НЗ"].Ширина = 10;
		//ТЗ.Колонки["Цена"].Ширина = 10;
		//ТЗ.Колонки["Дефектура"].Ширина = 10;		
		//ТЗ.Колонки["Сумма"].Ширина = 10;
		//
		//ЭлементыФормы.ТЗ.СоздатьКолонки();
		//ЭлементыФормы.ТЗ.Колонки["Сумма"].ОтображатьИтогиВПодвале = Истина;
		
		ВыбАптека = Аптека;
		
		
		Если РассчитыватьДефектуру = Истина Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Остаток",0);
			Строки = ТЗ.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				ТЗДефектуры = Новый ТаблицаЗначений;
				ТЗДефектуры.Колонки.Добавить("ГруппаABC");
				ТЗДефектуры.Колонки.Добавить("ДефектураПозиций");
				ТЗДефектуры.Колонки.Добавить("ДефектураРуб");
				
				Для каждого стр из Строки Цикл
					ТекСтрока = ТЗДефектуры.Добавить();
					ТекСтрока.ГруппаABC = стр.ГруппаАП;
					ТекСтрока.ДефектураПозиций = 1;
					ТекСтрока.ДефектураРуб = Окр((28-стр.ДнейПродаж)*стр.СредняяСкорость*стр.Цена,2);
				КонецЦикла;
				
				ТЗДефектуры.Свернуть("ГруппаABC","ДефектураПозиций,ДефектураРуб");
				ТЗДефектуры.Сортировать("ГруппаABC");
				
				ТабДок = Новый ТабличныйДокумент;
				Макет = ПолучитьМакет("Дефектура");
				ОбластьТитул = Макет.ПолучитьОбласть("Титул");
				ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				
				ОбластьТитул.Параметры.Аптека = ВыбАптека;
				ТабДок.Вывести(ОбластьТитул);
				ТабДок.Вывести(ОбластьШапки);
				
				Для каждого стр из ТЗДефектуры Цикл
					ОбластьСтрока.Параметры.ГруппаABC = стр.ГруппаABC;
					ОбластьСтрока.Параметры.ДефектураПозиций = стр.ДефектураПозиций;
					ОбластьСтрока.Параметры.ДефектураРуб = стр.ДефектураРуб;
					ТабДок.Вывести(ОбластьСтрока);
				КонецЦикла;
				ТабДок.ТолькоПросмотр = Истина;
				ТабДок.ОтображатьСетку = Ложь;
				ТабДок.Показать();				
				
			КонецЕсли;
		КонецЕсли;
		ЭлементыФормы.Лог.ДобавитьСтроку("		- Конец расчета автозаказа: " + ТекущаяДата());
	
КонецПроцедуры
	
	
Процедура РасчетАвтозаказаПоРекламнымАкциям()
	
	
	//ТХТнеправильный  = "ВЫБРАТЬ
	//	  |	ВЫборка.Склад КАК Склад,
	//	  |	ВЫборка.Товар.Код КАК Код,
	//	  |	ВЫборка.Товар,
	//	  |	ВЫборка.КолвоОстаток,
	//	  |	ВЫборка.НЗ,
	//	  |	ВЫборка.МинЗак,
	//	  |	ВЫборка.Заказать
	//	  |ИЗ
	//	  |	(ВЫБРАТЬ
	//	  |		ПартииЖНВЛСОстатки.Склад КАК Склад,
	//	  |		ПартииЖНВЛСОстатки.Товар КАК Товар,
	//	  |		ПартииЖНВЛСОстатки.КолвоОстаток КАК КолвоОстаток,
	//	  |		Матрица.НЗ КАК НЗ,
	//	  |		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
	//	  |		ВЫБОР
	//	  |			КОГДА ПартииЖНВЛСОстатки.КолвоОстаток < Матрица.НЗ
	//	  |				ТОГДА ВЫБОР
	//	  |						КОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ > 0
	//	  |							ТОГДА ВЫБОР
	//	  |									КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//	  |										ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//	  |									ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток
	//	  |								КОНЕЦ
	//	  |						ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток
	//	  |					КОНЕЦ
	//	  |			ИНАЧЕ 0
	//	  |		КОНЕЦ КАК Заказать
	//	  |	ИЗ
	//	  |		РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК ПартииЖНВЛСОстатки
	//	  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Матрица КАК Матрица
	//	  |			ПО ПартииЖНВЛСОстатки.Склад = Матрица.Аптека
	//	  |				И ПартииЖНВЛСОстатки.Товар = Матрица.Владелец.Товар
	//	  |				И (Матрица.РекламнаяАкция = ИСТИНА)
	//	  |				И (Матрица.НЗ > 0)
	//	  |	ГДЕ
	//	  |		ПартииЖНВЛСОстатки.КолвоОстаток > 0) КАК ВЫборка
	//	  |ГДЕ
	//	  |	ВЫборка.Заказать > 0
	//	  |
	//	  |УПОРЯДОЧИТЬ ПО
	//	  |	Склад,
	//	  |	ВЫборка.Товар.Наименование";
	
	//Построитель.Текст = "ВЫБРАТЬ
	//					|	ТЗПродаж.Склад,
	//					|	ТЗПродаж.Товар,
	//					|	ВЫРАЗИТЬ(ТЗПродаж.КоличествоРасход / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж КАК ЧИСЛО(12, 0)) КАК КоличествоРасход	                    
	//					|ПОМЕСТИТЬ ВыборкаПродаж
	//					|ИЗ
	//					|	(ВЫБРАТЬ
	//					|		СУММА(ПартииЖНВЛСОбороты.КолвоРасход / ПартииЖНВЛСОбороты.Партия.ЕИТЗакупки.К) КАК КоличествоРасход,
	//					|		ПартииЖНВЛСОбороты.Товар КАК Товар,
	//					|		ПартииЖНВЛСОбороты.Склад КАК Склад
	//					|	ИЗ
	//					|		РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Склад В (&СписокСкладов) {(Товар).*}) КАК ПартииЖНВЛСОбороты
	//					|	ГДЕ
	//					|		ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	//					|	
	//					|	СГРУППИРОВАТЬ ПО
	//					|		ПартииЖНВЛСОбороты.Товар,
	//					|		ПартииЖНВЛСОбороты.Склад) КАК ТЗПродаж
	//					|ИНДЕКСИРОВАТЬ ПО ТЗПродаж.Склад,ТЗПродаж.Товар 
	//					|;
	//					|
	//					|////////////////////////////////////////////////////////////////////////////////
	//					|ВЫБРАТЬ
	//					|	ВЫборка.Склад КАК Склад,
	//					|	ВЫборка.Товар.Код КАК Код,
	//					|	ВЫборка.Товар,
	//					|	ВЫборка.КолвоОстаток,
	//					|	ВЫборка.НЗ,
	//					|	ВЫборка.МинЗак,
	//					|	ВЫборка.Заказать,
	//					|	ВЫборка.КоличествоРасход КАК Продажи
	//					|ИЗ
	//					|	(ВЫБРАТЬ
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|				ТОГДА Матрица.Аптека
	//					|			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
	//					|		КОНЕЦ КАК Склад,
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|				ТОГДА Матрица.Владелец.Товар
	//					|			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
	//					|		КОНЕЦ КАК Товар,
	//					|		ПартииЖНВЛСОстатки.колвоостаток КАК КолвоОстаток,
	//					|		Матрица.НЗ КАК НЗ,
	//					|		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
	//					|		ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) КАК КоличествоРасход,
	//					|		ВЫБОР
	//					|			КОГДА ВыборкаПродаж.КоличествоРасход <= Матрица.НЗ
	//					|					ИЛИ ВыборкаПродаж.КоличествоРасход ЕСТЬ NULL 
	//					|				ТОГДА ВЫБОР
	//					|						КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|							ТОГДА Матрица.НЗ
	//					|						ИНАЧЕ ВЫБОР
	//					|								КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < Матрица.НЗ
	//					|									ТОГДА ВЫБОР
	//					|											КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	//					|												ТОГДА ВЫБОР
	//					|														КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|															ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|														ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток
	//					|													КОНЕЦ
	//					|											ИНАЧЕ Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	//					|										КОНЕЦ
	//					|								ИНАЧЕ 0
	//					|							КОНЕЦ
	//					|					КОНЕЦ
	//					|			ИНАЧЕ ВЫБОР
	//					|					КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|						ТОГДА ВыборкаПродаж.КоличествоРасход
	//					|					ИНАЧЕ ВЫБОР
	//					|							КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < ВыборкаПродаж.КоличествоРасход
	//					|								ТОГДА ВЫБОР
	//					|										КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	//					|											ТОГДА ВЫБОР
	//					|													КОГДА ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|														ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|													ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток
	//					|												КОНЕЦ
	//					|										ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	//					|									КОНЕЦ
	//					|							ИНАЧЕ 0
	//					|						КОНЕЦ
	//					|				КОНЕЦ
	//					|		КОНЕЦ КАК Заказать
	//					|	ИЗ
	//					|		РегистрСведений.Матрица КАК Матрица
	//					|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//					|				Остатки.Склад КАК Склад,
	//					|				Остатки.Товар КАК Товар,
	//					|				СУММА(ВЫРАЗИТЬ(Остатки.КолвоОстаток / Остатки.Партия.ЕИТЗакупки.К как Число(12,0))) КАК колвоостаток
	//					|			ИЗ
	//					|				РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК Остатки
	//					|			ГДЕ
	//					|				Остатки.КолвоОстаток > 0
	//					|			
	//					|			СГРУППИРОВАТЬ ПО
	//					|				Остатки.Товар,
	//					|				Остатки.Склад) КАК ПартииЖНВЛСОстатки
	//					|			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
	//					|				И (ПартииЖНВЛСОстатки.Товар = Матрица.Товар)
	//					//|				И (ПартииЖНВЛСОстатки.колвоостаток > 0)
	//					|			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПродаж КАК ВыборкаПродаж
	//					|			ПО Матрица.Аптека = ВыборкаПродаж.Склад
	//					|				И Матрица.Товар = ВыборкаПродаж.Товар
	//					|	ГДЕ
	//					|		Матрица.РекламнаяАкция = ИСТИНА
	//					|		И Матрица.НЗ > 0
	//					|		И Матрица.Аптека В(&СписокСкладов)
	//					|	{ГДЕ
	//					|		Матрица.Товар.* КАК Товар}) КАК ВЫборка
	//					|ГДЕ
	//					|	ВЫборка.Заказать > 0
	//					|
	//					|УПОРЯДОЧИТЬ ПО
	//					|	Склад,
	//					|	ВЫборка.Товар.Наименование
	//					|;
	//					|
	//					|////////////////////////////////////////////////////////////////////////////////
	//					|УНИЧТОЖИТЬ ВыборкаПродаж";						

						
						
						
						
						
	Построитель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ВЫРАЗИТЬ(ТЗПродаж.КоличествоРасход / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж КАК ЧИСЛО(12, 0)) КАК КоличествоРасход,
						|	ТЗПродаж.Товар,
						|	ТЗПродаж.Склад
						|ПОМЕСТИТЬ ВыборкаПродаж
						|ИЗ
						|	(ВЫБРАТЬ
						|		СУММА(ПартииЖНВЛСОбороты.КолвоРасход / ПартииЖНВЛСОбороты.Партия.ЕИТЗакупки.К) КАК КоличествоРасход,
						|		ПартииЖНВЛСОбороты.Товар КАК Товар,
						|		ПартииЖНВЛСОбороты.Склад КАК Склад
						|	ИЗ
						|		РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Склад В (&СписокСкладов)  {(Товар).*}) КАК ПартииЖНВЛСОбороты
						|	ГДЕ
						|		ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
						|	
						|	СГРУППИРОВАТЬ ПО
						|		ПартииЖНВЛСОбороты.Товар,
						|		ПартииЖНВЛСОбороты.Склад) КАК ТЗПродаж
						|ИНДЕКСИРОВАТЬ ПО ТЗПродаж.Склад,ТЗПродаж.Товар
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
						|	ВЫборка.Склад КАК Склад,
						|	ВЫборка.Товар.Код КАК Код,
						|	ВЫборка.Товар,
						|	ВЫборка.КолвоОстаток,
						|	ВЫборка.НЗ,
						|	ВЫборка.МинЗак,
						|	ВЫборка.ЗаказатьРасчетное,
						|	0 КАК Заказать,
						|	ВЫборка.КоличествоРасход КАК Продажи
						|ИЗ
						|	(ВЫБРАТЬ
						|		ВЫБОР
						|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
						|				ТОГДА Матрица.Аптека
						|			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
						|		КОНЕЦ КАК Склад,
						|		ВЫБОР
						|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
						|				ТОГДА Матрица.Товар
						|			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
						|		КОНЕЦ КАК Товар,
						|		ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток,0) КАК КолвоОстаток,
						|		Матрица.НЗ КАК НЗ,
						|		Матрица.Товар.МинимальныйЗаказ КАК МинЗак,
						|		ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) КАК КоличествоРасход,
						|		ВЫБОР
						|			КОГДА ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход,0) = 0
						|					 и (ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток,0) < Матрица.НЗ)
						|				ТОГДА Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток,0)
						|			ИНАЧЕ ВЫБОР
						|					КОГДА ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход,0)/28*&КоэффициентСкоростиПродаж < Матрица.НЗ
						|						ТОГДА Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
						|					ИНАЧЕ ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход,0)/28*&КоэффициентСкоростиПродаж - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
						|			КОНЕЦ
						|		КОНЕЦ КАК ЗаказатьРасчетное
						|	ИЗ
						|		РегистрСведений.Матрица КАК Матрица
						|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|				Остатки.Склад КАК Склад,
						|				Остатки.Товар КАК Товар,
						|				СУММА(ВЫРАЗИТЬ(Остатки.КолвоОстаток / Остатки.Партия.ЕИТЗакупки.К как Число(12,0))) КАК колвоостаток
						|			ИЗ
						|				РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК Остатки
						|			ГДЕ
						|				Остатки.КолвоОстаток > 0
						|			
						|			СГРУППИРОВАТЬ ПО
						|				Остатки.Товар,
						|				Остатки.Склад) КАК ПартииЖНВЛСОстатки
						|			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
						|				И (ПартииЖНВЛСОстатки.Товар = Матрица.Товар)
						//|				И (ПартииЖНВЛСОстатки.колвоостаток > 0)
						|			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПродаж КАК ВыборкаПродаж
						|			ПО Матрица.Аптека = ВыборкаПродаж.Склад
						|				И Матрица.Товар = ВыборкаПродаж.Товар
						|	ГДЕ
						|		Матрица.РекламнаяАкция = ИСТИНА
						|		И Матрица.НЗ > 0
						|		И Матрица.Аптека В(&СписокСкладов)
						|	{ГДЕ
						|		Матрица.Товар.* КАК Товар}) КАК ВЫборка
						|ГДЕ
						|	ВЫборка.ЗаказатьРасчетное > 0
						|
						|УПОРЯДОЧИТЬ ПО
						|	Склад,
						|	ВЫборка.Товар.Наименование
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|УНИЧТОЖИТЬ ВыборкаПродаж";						
						
						
						
						
						
						
						
						
						
		СписокСкладов = Новый СписокЗначений;  
		Для каждого стр из СписокАптек Цикл
			Если (стр.Пометка = Истина) Тогда
				Если УчитыватьТолькоНезакрепленныеЗаСотрудникомАптеки = Истина Тогда
					Если НЕ стр.Значение.Менеджер.Пустая() Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				СписокСкладов.Добавить(стр.Значение);
			КонецЕсли;				
		КонецЦикла;
	Построитель.Параметры.Вставить("СписокСкладов",СписокСкладов);	
	Построитель.Параметры.Вставить("Дата",ТекущаяДата());
	Построитель.Параметры.Вставить("КоличествоДнейПродаж",КоличествоДнейПродаж);
	Построитель.Параметры.Вставить("КоэффициентСкоростиПродаж",КоэффициентСреднейСкоростиПродаж);
	Построитель.Параметры.Вставить("НачПериода",НачалоДня(ТекущаяДата())-КоличествоДнейПродаж*24*60*60);
	Построитель.Параметры.Вставить("КонПериода",НачалоДня(ТекущаяДата())-1);
	//Сообщить(Строка(НачалоДня(ТекущаяДата())-КоличествоДнейПродаж*24*60*60));
	//Сообщить(НачалоДня(ТекущаяДата())-1);
	Сообщить("начало выполнения запроса" + ТекущаяДата());
	Построитель.Выполнить();
	
	Результат = Построитель.Результат;
	ТЗРез = Результат.Выгрузить();
	Сообщить("конец выполнения запроса" + ТекущаяДата());
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("СписокСкладов",СписокСкладов);
	//Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	//ТЗРез = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.ТЗПромежуточная.Значение = ТЗРез;
	ЭлементыФормы.ТЗПромежуточная.СоздатьКолонки();
	
	Если ТЗРез.Количество() = 0 Тогда
		Предупреждение("Данных для выгрузки нет!");
		Возврат;
	КонецЕсли;
	
	Для каждого стр из ТЗРез ЦИкл
//		Попытка
			стр.Заказать = Макс(стр.ЗаказатьРасчетное,стр.МинЗак,Окр(стр.Продажи/28*КоличествоДнейПотребности,0));	
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			Сообщить("."+ стр.ЗаказатьРасчетное + ".");
//			Сообщить("."+ стр.МинЗак + ".");
//			Сообщить("."+ Окр(стр.Продажи/28*КоличествоДнейПотребности,0) + ".");
//		КонецПопытки;
	КонецЦикла;
	
	
	Если АвтоматическиВыгружатьАвтозаказ = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//Возврат;
	
	ТЗРез.Индексы.Добавить("Склад");
	
	Для каждого стр из СписокАптек Цикл
		Если стр.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("Склад",стр.Значение);	
		НайденныйСтроки = ТЗРез.НайтиСтроки(Отбор);
		Если НайденныйСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
		|	ЗаявкаНаТовар.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
		|ГДЕ
		|	ЗаявкаНаТовар.Склад = &Склад
		|	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки
		|	И ЗаявкаНаТовар.НомерЗаявкиАптеки ПОДОБНО ""АР-%""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	НомерЗаявкиАптеки УБЫВ";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Склад",стр.Значение);
		Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказПоРекламе);
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
			НовыйНомер = "АР-0000001";
		Иначе
			//Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) Тогда //Зачем два автозаказа в один день
			//	Возврат;
			//КонецЕсли;
			ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
			НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
			НовыйНомер = Лев("АР-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
		КонецЕсли;
		
		ИмяФайла = "dem" + стр.Значение.Код + "_" + НовыйНомер + "_"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		ВремФайл = Константы.КаталогФТП.Получить() + "Out\demrekl.dbf";
		ВыгружаемыйФайл = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".dbf" ;
		ВыгружаемыйАрхив = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".zip" ;
		ДатаЗаказа = ТекущаяДата();
		
		ДБФ = Новый XBASE;
		ДБФ.поля.Добавить("NDOC","S",20);
		ДБФ.поля.Добавить("DDOC","D",,);
		ДБФ.поля.Добавить("IDGOOD","N",10,0);
		ДБФ.поля.Добавить("QNT","N",10,0);
		ДБФ.поля.Добавить("IDTYPE","N",10,0);
		ДБФ.СоздатьФайл(ВремФайл);
		
		Для Каждого ТекСтр из НайденныйСтроки ЦИкл
			Если ТекСтр.Заказать > 0 Тогда	
				ДБФ.Добавить();
				ДБФ.NDOC=НовыйНомер;
				ДБФ.DDOC=ДатаЗаказа;
				ДБФ.IDGOOD=ТекСтр.Товар.Код;
				ДБФ.QNT=ТекСтр.Заказать;
				ДБФ.IDTYPE= 6;
				ДБФ.Записать();
			КонецЕсли;
		КонецЦикла;
		ДБФ.ЗакрытьФайл();
		
		ПереместитьФайл(ВремФайл,ВыгружаемыйФайл);
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ВыгружаемыйФайл,ВыгружаемыйАрхив);
		УдалитьФайлы(ВыгружаемыйФайл);
	КонецЦикла;
	
	
	
	
	
	
КонецПроцедуры


Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	ЭлементыФормы.Лог.ДобавитьСтроку("Начало обработки: " + ТекущаяДата());

	Если ВыборРасчета = 0 Тогда
		РасчетABC();
		Лог(id);
		Возврат;
	КонецЕсли;

	Если РасчетПоВсем = Ложь Тогда
		ID = Лог("Автозаказ - расчет рекламы");
		РасчетАвтозаказаПоРекламнымАкциям();
		Лог(id);
		Возврат;
	КонецЕсли;
	
	
	////Сообщить("Начало = " + ТекущаяДата());
	
	ДатаТочкиОтсчета = ВыбДата;

	ТЗДат=Новый ТаблицаЗначений();

	ТЗДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	
	//Для к = 1 по КоличествоДней Цикл
	//	стр = ТЗДат.Добавить();
	//	стр.Дата = Дата1;
	//	Дата1 = Дата1 + 24*60*60;
	//КонецЦикла;
	к = 28;
	НомерПериода = 5;
	Пока к > 0 Цикл	
		Если к%7 = 0 Тогда
			НомерПериода = НомерПериода - 1;
			Если НомерПериода = 4 Тогда
				КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
			ИначеЕсли НомерПериода = 3 Тогда
				НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			ИначеЕсли НомерПериода = 2 Тогда
				НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			ИначеЕсли НомерПериода = 1 Тогда
				НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			КонецЕсли;			
		КонецЕсли;
		стр = ТЗДат.Добавить();
		стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
		к=к-1;
	КонецЦикла;	
	НачалоПервыйПериод = стр.Дата;
	////Сообщить(НачалоПервыйПериод);
	////Сообщить(НачалоВторойПериод);
	////Сообщить(НачалоТретийПериод);
	////Сообщить(НачалоЧетвертыйПериод);
	////Сообщить(КонецЧетвертыйПериод);
	
	УсловиеПОРекламе = "";
	//Если РасчетПоВсем = Ложь Тогда
	//	УсловиеПоРекламе = "И Матрица.РекламнаяАкция = ИСТИНА";
	//	РасчетАвтозаказаПоРекламнымАкциям();
	//	Возврат;
	//КонецЕсли;
	
	
	Для Каждого ЭлементСписка Из СписокАптек Цикл
		Если ЭлементСписка.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ВыборРасчета = 1 Тогда
			ID = Лог("Автозаказ - расчет Qmin/Qmax " + ЭлементСписка.Значение);
		Иначе
			ID = Лог("Автозаказ - расчет Автозаказа "  + ЭлементСписка.Значение);
			ЭлементыФормы.Лог.ДобавитьСтроку("		- расчет Автозаказа: " + ТекущаяДата());
		КонецЕсли;		
		
		 
		
		ТХТ = "ВЫБРАТЬ
		      |	Т.Дата,
		      |	0 КАК Товар
		      |ПОМЕСТИТЬ ВТДаты
		      |ИЗ
		      |	&Таб КАК Т
		      |;
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		      //|	Матрица.Товар.Код КАК Код,
		      //|	Матрица.Товар.Наименование КАК Товар,
			  |	Матрица.Товар.Код как КодТовара,
			  |	Матрица.Товар.УчаствуетВАП КАК Активный,
		      //|	Матрица.ГруппаАПИтог КАК ГруппаАП,
		      //|	ЕСТЬNULL(Матрица.КуМин, 0) КАК МатрицаКуМин,
		      //|	ЕСТЬNULL(Матрица.КуМакс, 0) КАК МатрицаКуМакс,
			  //|	ЕСТЬNULL(Матрица.НЗ, 0) КАК МатрицаНЗ,
		      |	Даты.Дата КАК Дата
		      //|	ВЫБОР КОГДА Матрица.Товар.Поставщик = &ПустойПоставщик
		      //|			ТОГДА 1
			  //|		  ИНАЧЕ 0 
			  //| КОНЕЦ КАК ПустойПоставщик,
			  //| Матрица.РекламнаяАкция как ПризнакРекламнойАкции,
			  //| Матрица.СрокДействияРекламы как СрокДействияРекламы
		      |ПОМЕСТИТЬ Пустой_Шаблон
		      |ИЗ
		      |	РегистрСведений.Матрица КАК Матрица
		      |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		      |			ВТДаты.Дата КАК Дата,
		      |			ВТДаты.Товар КАК Товар
		      |		ИЗ
		      |			ВТДаты КАК ВТДаты) КАК Даты
		      |		ПО (Даты.Товар <> Матрица.Товар)
		      |ГДЕ
		      |	Матрица.Аптека = &Аптека
		      //|	И Матрица.Владелец.Товар.УчаствуетВАП = ИСТИНА
			  | " + УсловиеПОРекламе + "
		      |;
			  |////////////////////////////////////////////////////////////////////////////////			  
			  |
			  |ВЫБРАТЬ РАЗЛИЧНЫЕ КодТовара  ПОМЕСТИТЬ ТАБЛИЦАКОДОВ ИЗ Пустой_Шаблон
		      |;
		      |////////////////////////////////////////////////////////////////////////////////
		      |	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		      |			НАЧАЛОПЕРИОДА(&НачПериода, ДЕНЬ) КАК Дата,
		      |			ПартииЖНВЛСОстатки.Товар.Код КАК КодТовара,
		      |			СУММА(ПартииЖНВЛСОстатки.КолвоОстаток / ПартииЖНВЛСОстатки.Партия.ЕИТЗакупки.К) КАК Остаток
			  | ПОМЕСТИТЬ ТЕМПОстатокНаНачало
		      |	ИЗ
		      |			РегистрНакопления.ПартииЖНВЛС.Остатки(
		      |					&НачПериода,
		      |					Склад = &Аптека
		      |						) КАК ПартииЖНВЛСОстатки
		      |		
		      |	СГРУППИРОВАТЬ ПО
		      |			ПартииЖНВЛСОстатки.Товар.Код
			  |;
			  |////////////////////////////////////////////////////////////////////////////////
		      |	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		      |			ПартииЖНВЛСОбороты.Период КАК Период,
		      |			ПартииЖНВЛСОбороты.Товар.Код КАК КодТовара,
		      |			СУММА(ПартииЖНВЛСОбороты.КолвоОборот / ПартииЖНВЛСОбороты.Партия.ЕИТЗакупки.К) КАК Оборот
			  | ПОМЕСТИТЬ ТЕМПОБОРОТЫ
		      |		ИЗ
		      |			РегистрНакопления.ПартииЖНВЛС.Обороты(
		      |					&НачПериода,
		      |					&КонПериода,
		      |					День,
		      |					Склад = &Аптека
		      |						 ) КАК ПартииЖНВЛСОбороты
		      |		
		      |		СГРУППИРОВАТЬ ПО
		      |			ПартииЖНВЛСОбороты.Период,
		      |			ПартииЖНВЛСОбороты.Товар.Код
			  |;			  
			  |////////////////////////////////////////////////////////////////////////////////
			  | ВЫБРАТЬ РАЗРЕШЕННЫЕ
		      |			ПоступлениеТовараТовар.Товар.Код КАК КодТовара,
		      |			СУММА(ПоступлениеТовараТовар.Количество * ПоступлениеТовараТовар.К / ПоступлениеТовараТовар.Партия.ЕИТЗакупки.К) КАК Продажа,
		      |			НАЧАЛОПЕРИОДА(ПоступлениеТовараТовар.Ссылка.Дата, ДЕНЬ) КАК Период
			  | ПОМЕСТИТЬ ТЕМППРОДАЖИ
		      |		ИЗ
		      |			Документ.РеализацияККМ.Товар КАК ПоступлениеТовараТовар
		      |		ГДЕ
		      |			ПоступлениеТовараТовар.Ссылка.Проведен = ИСТИНА
		      |			И ПоступлениеТовараТовар.Ссылка.Склад = &Аптека
		      |			И ПоступлениеТовараТовар.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
		     // |			И ПоступлениеТовараТовар.Товар.УчаствуетВАП = ИСТИНА
			 // |			" + УсловиеДляПродажи + "
		      |		
		      |		СГРУППИРОВАТЬ ПО
		      |			НАЧАЛОПЕРИОДА(ПоступлениеТовараТовар.Ссылка.Дата, ДЕНЬ),
		      |			ПоступлениеТовараТовар.Товар.Код
			  |;			  
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			  |	ЦеныСрезПоследних.АП.Код как КодТовара,
			  |	МАКСИМУМ(ЦеныСрезПоследних.ЦенаРознГТТ) КАК Цена
			  |ПОМЕСТИТЬ ТЕМПЦЕНЫ
			  |ИЗ
			  |	РегистрСведений.Цены.СрезПоследних(&Дата, РЕГИОН = &Регион ) КАК ЦеныСрезПоследних
			  |СГРУППИРОВАТЬ ПО
			  |	ЦеныСрезПоследних.АП.Код	
			  |;
			  |////////////////////////////////////////////////////////////////////////////////
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Пустой_Шаблон.КодТовара КАК Код,
			  //|	Пустой_Шаблон.ТоварСсылка.Наименование КАК Товар,
			  //|	Пустой_Шаблон.ТоварСсылка КАК ТоварСсылка,
			  |	Пустой_Шаблон.Дата КАК Дата,
			  //|	Пустой_Шаблон.ГруппаАП КАК ГруппаАП,
			  //|	Пустой_Шаблон.МатрицаКуМин КАК МатрицаКуМин,
			  //|	Пустой_Шаблон.МатрицаКуМакс КАК МатрицаКуМакс,
			  //|	Пустой_Шаблон.МатрицаНЗ КАК МатрицаНЗ,
			  //| Пустой_Шаблон.ПустойПоставщик КАК ПустойПоставщик,
			  //| Пустой_Шаблон.ПризнакРекламнойАкции КАК ПризнакРекламнойАкции,
			  //| Пустой_Шаблон.СрокДействияРекламы КАК СрокДействияРекламнойАкции,
			  |	ЕСТЬNULL(ТЕМПЦены.Цена, 0) КАК Цена,
			  |	ЕСТЬNULL(ТЕМПОстатокНаНачало.Остаток, 0) КАК Остаток,
			  |	ЕСТЬNULL(ТЕМПОбороты.Оборот, 0) КАК Оборот,
			  |	ЕСТЬNULL(ТЕМППродажи.Продажа, 0) КАК Продажи,
			  |	ВЫБОР
			  |		КОГДА Пустой_Шаблон.Дата >= &НачалоВторойПериод
			  |				И Пустой_Шаблон.Дата <= &НачалоПервыйПериод
			  |			ТОГДА 1
			  |		КОГДА Пустой_Шаблон.Дата >= &НачалоТретийПериод
			  |				И Пустой_Шаблон.Дата < &НачалоВторойПериод
			  |			ТОГДА 2
			  |		КОГДА Пустой_Шаблон.Дата >= &НачалоЧетвертыйПериод
			  |				И Пустой_Шаблон.Дата < &НачалоТретийПериод
			  |			ТОГДА 3
			  |		КОГДА Пустой_Шаблон.Дата >= &КонецЧетвертыйПериод
			  |				И Пустой_Шаблон.Дата <= &НачалоТретийПериод
			  |			ТОГДА 4
			  |	КОНЕЦ КАК Периоды,
			  |	1 КАК ЕдиницаДляСвертки,
			  | Пустой_Шаблон.Активный
			  |ИЗ
			  |	Пустой_Шаблон КАК Пустой_Шаблон			  
			  |
			  |ЛЕВОЕ СОЕДИНЕНИЕ ТЕМПОстатокНаНачало ПО (ТЕМПОстатокНаНачало.КодТовара = Пустой_Шаблон.КодТовара) И (ТЕМПОстатокНаНачало.Дата = Пустой_Шаблон.Дата)
			  |ЛЕВОЕ СОЕДИНЕНИЕ ТЕМПОбороты ПО (ТЕМПОбороты.Период = Пустой_Шаблон.Дата) И (ТЕМПОбороты.КодТовара = Пустой_Шаблон.КодТовара)
		      |ЛЕВОЕ СОЕДИНЕНИЕ ТЕМППРОДАЖИ ПО (ТЕМППРОДАЖИ.Период = Пустой_Шаблон.Дата) И (ТЕМППРОДАЖИ.КодТовара = Пустой_Шаблон.КодТовара)
			  |ЛЕВОЕ СОЕДИНЕНИЕ ТЕМПЦЕНЫ ПО (ТЕМПЦЕНЫ.КодТовара = Пустой_Шаблон.КодТовара)
		      |УПОРЯДОЧИТЬ ПО
		      |	Пустой_Шаблон.КодТовара,
		      |	Дата
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ВТДаты
		      |;
			  //|////////////////////////////////////////////////////////////////////////////////
			  //|УНИЧТОЖИТЬ БАЗА
			  //|;
			  //|////////////////////////////////////////////////////////////////////////////////
			  //|УНИЧТОЖИТЬ РаспоследниеЦены
			  //|;
			  //|////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМПОстатокНаНачало
		      |;
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМПОбороты
		      |;
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМППРОДАЖИ
		      |;	
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМПЦЕНЫ
		      |;
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТАБЛИЦАКОДОВ
		      |;			  
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ Пустой_Шаблон";		  
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Дата",ТекущаяДата());
		Запрос.УстановитьПараметр("Аптека",ЭлементСписка.Значение);
		Запрос.УстановитьПараметр("Регион",ЭлементСписка.Значение.Регион);
		Запрос.УстановитьПараметр("НачПериода",КонецЧетвертыйПериод);
		Запрос.УстановитьПараметр("КонПериода",КонецДня(НачалоПервыйПериод));
		Запрос.УстановитьПараметр("НачалоПервыйПериод",НачалоПервыйПериод);
		Запрос.УстановитьПараметр("НачалоВторойПериод",НачалоВторойПериод);
		Запрос.УстановитьПараметр("НачалоТретийПериод",НачалоТретийПериод);
		Запрос.УстановитьПараметр("НачалоЧетвертыйПериод",НачалоЧетвертыйПериод);
		Запрос.УстановитьПараметр("КонецЧетвертыйПериод",КонецЧетвертыйПериод);
		Запрос.УстановитьПараметр("ПустойПоставщик",Справочники.Поставщики.ПустаяСсылка());
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Таб",ТЗДат);
		ТЗЗапроса = Запрос.Выполнить().Выгрузить();	
		ТЗЗапроса.Колонки.Добавить("ОстатокНаКонец");
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		//ЭлементыФормы.Инд.Значение = 0;
		//ЭлементыФормы.Инд.МаксимальноеЗначение = ТЗЗапроса.Количество();
		Вхождение = Истина;
		СтарыйТовар = 0;
		ЭлементыФормы.текстПроцесса.Заголовок = "Расчет остатка на каждый день...";
		////Сообщить("Расчет остатка: " + ТекущаяДата());
		Для Каждого стр из ТЗЗапроса Цикл
			//ЭлементыФормы.Инд.Значение = ЭлементыФормы.Инд.Значение + 1;
			Если СтарыйТовар <> стр.Код Тогда
				ПредыдущийОстаток = стр.Остаток;//?(стр.Остаток = NULL,0, стр.Остаток);
				СтарыйТовар = стр.Код;
			КонецЕсли;
			
			стр.ОстатокНаКонец = ПредыдущийОстаток + стр.Оборот;//?(стр.Оборот = NULL,0,стр.Оборот);
			Если стр.Продажи = 0 и стр.ОстатокНаКонец = 0 Тогда  //Очищаем дни дефектура ( там где остаток = 0 и продаж не было)
				стр.ЕдиницаДляСвертки = 0;
			КонецЕсли;
			ПредыдущийОстаток = стр.ОстатокНаКонец;
			
		КонецЦикла;
		////Сообщить("Конец = " + ТекущаяДата());
		//		ЭлементыФормы.ТЗ.Значение = ТЗЗапроса;
		//	ЭлементыФормы.ТЗ.СоздатьКолонки();
		//возврат;
		
		ТЗЗапроса.Сортировать("Код, Дата Убыв");
		
		ТЗЗапросаПоДатам = ТЗЗапроса.Скопировать();
		
		ТЗЗапросаПоДатам.Индексы.Добавить("Код,Периоды"); //Убрали
		
		//-------Свернем таблицу, чтобы посчитать дни продажи и количество продаж по периодам
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!! 			ВНИМАНИЕ			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!! Если добавлять или удалять колонки, то ниже при расчете XYZ !!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!! надо изменить номера колонок ГруппаXYZ и  Отклонение  !!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//ТЗЗапроса.Свернуть("Код,Товар,ТоварСсылка,Периоды,Цена,МатрицаКуМин,МатрицаКуМакс,МатрицаНЗ,ПустойПоставщик,ПризнакРекламнойАкции,СрокДействияРекламнойАкции,ГруппаАП,Активный","Продажи,ЕдиницаДляСвертки");
		ТЗЗапроса.Свернуть("Код,Периоды,Цена,Активный","Продажи,ЕдиницаДляСвертки");
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//Скопируем и свернем ТЗ для Расчета XYZ
		ТЗЗапросаОбщиеИтоги = ТЗЗапроса.Скопировать();
		ТЗЗапросаОбщиеИтоги.Свернуть("Код","Продажи,ЕдиницаДляСвертки");
		
		// А теперь добавим необходимые колонки 
		ТЗЗапроса.Колонки.Добавить("СредняяСкорость",Новый ОписаниеТипов("Число"));
		ТЗЗапроса.Колонки.Добавить("ГруппаXYZ",Новый ОписаниеТипов("Строка"));
		ТЗЗапроса.Колонки.Добавить("Dx",Новый ОписаниеТипов("Число"));  // Отклонение
		
		//Расчитаем Группу XYZ
		Номер = 0;
        Сумма = 0;
		ГруппаXYZ = "";
		
		СтрокаИтогов = ТЗЗапросаОбщиеИтоги.Получить(0);
		Если (СтрокаИтогов.ЕдиницаДляСвертки = 0) или  (СтрокаИтогов.ЕдиницаДляСвертки = 1)  Тогда
			СредняяПродажа = 0;
			ПропуститьРасчетПоЭтомуТовару = Истина;
		Иначе
			СредняяПродажа = СтрокаИтогов.Продажи/СтрокаИтогов.ЕдиницаДляСвертки;
			ПропуститьРасчетПоЭтомуТовару = Ложь;
		КонецЕсли;
		
		Для каждого стр из ТЗЗапросаПоДатам Цикл
			Номер = Номер + 1;
			
			Если ПропуститьРасчетПоЭтомуТовару = Истина  Тогда
			Иначе		
				Если стр.ЕдиницаДляСвертки = 0 Тогда
				Иначе
					Сумма = Сумма + Pow((стр.Продажи - СредняяПродажа),2);
				КонецЕсли;
			КонецЕсли;
				
			
			Если Номер%28 = 0 Тогда
				Если ПропуститьРасчетПоЭтомуТовару = Ложь  Тогда
					Отклонение = Окр(Sqrt(Сумма/(СтрокаИтогов.ЕдиницаДляСвертки-1)),2);
					Dx = Отклонение;
					Если Отклонение > 0 и Отклонение <=0.3 Тогда
						ГруппаXYZ = "X";
					ИначеЕсли Отклонение > 0.3 и Отклонение <= 1.3 Тогда
						ГруппаXYZ = "Y";		
					ИначеЕсли Отклонение > 1.3 и Отклонение <=4 Тогда
						ГруппаXYZ = "Z";
					ИначеЕсли Отклонение > 4 Тогда
						ГруппаXYZ = "W";
					КонецЕсли;		
					Если ГруппаXYZ = "" Тогда					
					Иначе
						ТЗЗапроса.Получить(Номер/7-1).Установить(7,ГруппаXYZ);    //13
						ТЗЗапроса.Получить(Номер/7-1).Установить(8,Отклонение);   //14
					КонецЕсли;
				КонецЕсли;
				Попытка
					СтрокаИтогов = ТЗЗапросаОбщиеИтоги.Получить(Номер/28);
				Исключение
					////Сообщить("Последний номер" + Номер);
					Продолжить;
				КонецПопытки;
				Если (СтрокаИтогов.ЕдиницаДляСвертки = 0) или  (СтрокаИтогов.ЕдиницаДляСвертки = 1)  Тогда
					СредняяПродажа = 0;
					ПропуститьРасчетПоЭтомуТовару = Истина;
				Иначе
					СредняяПродажа = СтрокаИтогов.Продажи/СтрокаИтогов.ЕдиницаДляСвертки;
					ПропуститьРасчетПоЭтомуТовару = Ложь;
				КонецЕсли;
				Сумма = 0 ;
				ГруппаXYZ = "";
			КонецЕсли;
			
		КонецЦикла;
		
		
		
		ТЗЗапросаОбщиеИтоги = Неопределено;
		
		//Посчитаем скорости  по каждому периоду
		СоответствиеСкоростей = СоздатьИЗаполнитьСоответствие();
		КоличествоНедостоверныхПериодов = 0;
		
		ДнейПродаж = 0;
		КоличествоПродаж = 0;
		ЭлементыФормы.текстПроцесса.Заголовок = "Расчет средневзвешенной скорости...";
		Для каждого стр из ТЗЗапроса Цикл
			ОбработкаПрерыванияПользователя();
			ДнейПродаж = ДнейПродаж + стр.ЕдиницаДляСвертки;
			КоличествоПродаж = КоличествоПродаж + стр.Продажи;
			
			Если стр.Периоды = 4 Тогда
				//стр.ГруппаXYZ = РасчитатьXYZ(стр.Dx,ТЗЗапросаПоДатам,стр.Код,ДнейПродаж,КоличествоПродаж);
				ДнейПродаж = 0;
				КоличествоПродаж = 0;				
				//Здесь считаем общую скорость за все периоды
				Если стр.ЕдиницаДляСвертки <=2 Тогда
					КоличествоНедостоверныхПериодов = КоличествоНедостоверныхПериодов + 1;
					Если КоличествоНедостоверныхПериодов = 4 Тогда
						КоличествоНедостоверныхПериодов = 0;
						стр.СредняяСкорость = 0;
						СоответствиеСкоростей.Очистить();
						СоответствиеСкоростей = СоздатьИЗаполнитьСоответствие();					
						Продолжить;
					КонецЕсли;
					затычка = 0;
					к=1;
					Пока затычка = 0 Цикл
						Если СоответствиеСкоростей["K"+(стр.Периоды-к)] = 0 Тогда
							к=к+1;
							Продолжить;
						Иначе
							//Сообщить(стр.Код);
							СоответствиеСкоростей["K"+(стр.Периоды-к)] = СоответствиеСкоростей["K"+стр.Периоды] + СоответствиеСкоростей["K"+(стр.Периоды-к)];
							СоответствиеСкоростей["K"+стр.Периоды] = 0;
							затычка=1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					СкоростьЗаТекущийПериод = Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
					СкоростьЗаТекущийПериод = ФильтрацияВсплесков(ТЗЗапросаПоДатам,СкоростьЗаТекущийПериод,стр.Периоды,стр.Код,стр.ЕдиницаДляСвертки);  //Фильтруем всплески
					СоответствиеСкоростей["V"+стр.Периоды] = СкоростьЗаТекущийПериод;//Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
				КонецЕсли;
				//В конце всех периодов посчитаем средневзвешенную скорость
				СредняяСкорость = 0;
				Для к = 1 по 4 цикл
					СредняяСкорость = СредняяСкорость + СоответствиеСкоростей["K"+к]*СоответствиеСкоростей["V"+к];
				КонецЦикла;
				
				стр.СредняяСкорость = Окр(СредняяСкорость,3);
				СоответствиеСкоростей.Очистить();
				СоответствиеСкоростей = СоздатьИЗаполнитьСоответствие();
				КоличествоНедостоверныхПериодов = 0;
			ИНаче
				Если стр.ЕдиницаДляСвертки <=2 Тогда
					КоличествоНедостоверныхПериодов = КоличествоНедостоверныхПериодов + 1;
					СоответствиеСкоростей["K"+(стр.Периоды+1)] = СоответствиеСкоростей["K"+стр.Периоды] + СоответствиеСкоростей["K"+(стр.Периоды+1)];
					СоответствиеСкоростей["K"+стр.Периоды] = 0;
				Иначе
					СкоростьЗаТекущийПериод = Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
					СкоростьЗаТекущийПериод = ФильтрацияВсплесков(ТЗЗапросаПоДатам,СкоростьЗаТекущийПериод,стр.Периоды,стр.Код,стр.ЕдиницаДляСвертки); //Фильтруем всплески
					СоответствиеСкоростей["V"+стр.Периоды] = СкоростьЗаТекущийПериод;//Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		////Сообщить(ТекущаяДата());
		ТЗЗапросаПоДатам = Неопределено; //Освобождаем таблицу, ибо жрет много памяти
		
		Если ВыборРасчета = 1 Тогда
			РасчетQminQmax(ТЗЗапроса,ЭлементСписка.Значение);
			//ЭлементыФормы.ТЗРезультатКуМинКуМакс.Значение = ТЗЗапроса;
			//ЭлементыФормы.ТЗРезультатКуМинКуМакс.СоздатьКолонки();
		Иначе
			ЭлементыФормы.текстПроцесса.Заголовок = "Расчет величины заказа...";
			//ЭлементыФормы.ТЗПромежуточная.Значение = ТЗЗапроса;
			//ЭлементыФормы.ТЗПромежуточная.СоздатьКолонки();
			РасчетАвтозаказа(ТЗЗапроса,ЭлементСписка.Значение);
		КонецЕсли;
		ЭлементСписка.Пометка = Ложь;
		Лог(id);
	КонецЦикла;
   	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьНулевыеДаты(Кнопка)
	
	//Индекс = ТЗ.Количество() - 1; 
	//Пока Индекс >= 0 Цикл 
	//	стр = ТЗ.Получить(Индекс);
	//	
	//	Если стр.Продажи = 0 и стр.ОстатокНаКонец = 0 Тогда
	//		ТЗ.Удалить(Индекс); 
	//	КонецЕсли;
	//	
	//	Индекс = Индекс - 1; 
	//	
	//КонецЦикла;
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПериоды(Кнопка)
	
	к = 21;
	Пока к > 0 Цикл	
		Если к%7 = 0 Тогда
			Сообщить("---- граница ----");
		КонецЕсли;
		Сообщить(НачалоДня(ТекущаяДата()) - к*24*60*60);
		к=к-1;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПолучитьСписокАптек()
	
	СписокАптек.Очистить();
	
	Если СписокВыбораАптек = 0 Тогда
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХранения.Ссылка КАК Аптека,
		|	МестаХранения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.АссортиментноеПланирование = ИСТИНА
		|	И МестаХранения.АвтозаказНаОфисе = ИСТИНА
		//|	И МестаХранения.БрендыДляАвтозаказа." + ДеньНедели + " = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	Иначе
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХранения.Ссылка КАК Аптека,
		|	МестаХранения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.АвтозаказРекламныхАкций = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";		  
	КонецЕсли;
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
		
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр Из Рез Цикл
	
		СписокАптек.Добавить(стр.Аптека,стр.Наименование,Ложь);
	
	КонецЦикла;
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	ДеньНедели = Формат(ТекущаяДата(),"ДФ=дддд");

	ПолучитьСписокАптек();
	
	ВыборРасчета = 0;
	ВыборРасчетаПриИзменении(ЭлементыФормы.ВыборРасчета);
	//РасчетПоВсемПриИзменении(ЭлементыФормы.РасчетПоВсем);
	ПорогСреднейСкорости = 0.25;
	МинимальныйПорогСреднейСкорости = 0.1;
	КоэффициентПоставщика = 1.5;
	// Старый рабочий запрос без учета продаж за период
	//Построитель.Текст = "ВЫБРАТЬ
	//					|	ВЫборка.Склад КАК Склад,
	//					|	ВЫборка.Товар.Код КАК Код,
	//					|	ВЫборка.Товар,
	//					|	ВЫборка.КолвоОстаток,
	//					|	ВЫборка.НЗ,
	//					|	ВЫборка.МинЗак,
	//					|	ВЫборка.Заказать
	//					|ИЗ
	//					|	(ВЫБРАТЬ
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.КолвоОстаток, 0) = 0
	//					|				ТОГДА Матрица.Аптека
	//					|			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
	//					|		КОНЕЦ КАК Склад,
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.КолвоОстаток, 0) = 0
	//					|				ТОГДА Матрица.Владелец.Товар
	//					|			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
	//					|		КОНЕЦ КАК Товар,
	//					|		ПартииЖНВЛСОстатки.КолвоОстаток КАК КолвоОстаток,
	//					|		Матрица.НЗ КАК НЗ,
	//					|		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.КолвоОстаток, 0) = 0
	//					|				ТОГДА Матрица.НЗ
	//					|			ИНАЧЕ ВЫБОР
	//					|					КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.КолвоОстаток, 0) < Матрица.НЗ
	//					|						ТОГДА ВЫБОР
	//					|								КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	//					|									ТОГДА ВЫБОР
	//					|											КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|												ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|											ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток
	//					|										КОНЕЦ
	//					|								ИНАЧЕ Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.КолвоОстаток, 0)
	//					|							КОНЕЦ
	//					|					ИНАЧЕ 0
	//					|				КОНЕЦ
	//					|		КОНЕЦ КАК Заказать
	//					|	ИЗ
	//					|		Справочник.Матрица КАК Матрица
	//					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК ПартииЖНВЛСОстатки
	//					|			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
	//					|				И (ПартииЖНВЛСОстатки.Товар = Матрица.Владелец.Товар)
	//					|				И (ПартииЖНВЛСОстатки.КолвоОстаток > 0)
	//					|	ГДЕ
	//					|		Матрица.РекламнаяАкция = ИСТИНА
	//					|		И Матрица.НЗ > 0
	//					|		И Матрица.Аптека В(&СписокСкладов)
	//					|	{ГДЕ
	//					|		Матрица.Владелец.Товар.* КАК Товар}) КАК ВЫборка
	//					|ГДЕ
	//					|	ВЫборка.Заказать > 0
	//					|
	//					|УПОРЯДОЧИТЬ ПО
	//					|	Склад,
	//					|	ВЫборка.Товар.Наименование";
						
	Построитель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ВЫРАЗИТЬ(ТЗПродаж.КоличествоРасход / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж КАК ЧИСЛО(12, 0)) КАК КоличествоРасход,
	                    |	ТЗПродаж.Товар,
	                    |	ТЗПродаж.Склад
	                    |ПОМЕСТИТЬ ВыборкаПродаж
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		СУММА(ПартииЖНВЛСОбороты.КолвоРасход / ПартииЖНВЛСОбороты.Партия.ЕИТЗакупки.К) КАК КоличествоРасход,
	                    |		ПартииЖНВЛСОбороты.Товар КАК Товар,
	                    |		ПартииЖНВЛСОбороты.Склад КАК Склад
	                    |	ИЗ
	                    |		РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Склад В (&СписокСкладов)) КАК ПартииЖНВЛСОбороты
	                    |	ГДЕ
	                    |		ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	                    |	
	                    |	СГРУППИРОВАТЬ ПО
	                    |		ПартииЖНВЛСОбороты.Товар,
	                    |		ПартииЖНВЛСОбороты.Склад) КАК ТЗПродаж
	                    |;
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	Выборка.Аптека,
	                    |	Выборка.Товар,
	                    |	ВЫБОР
	                    |		КОГДА СУММА(Выборка.НЗ_2) > 0
	                    |			ТОГДА СУММА(Выборка.НЗ_2)
	                    |		ИНАЧЕ СУММА(Выборка.НЗ_1)
	                    |	КОНЕЦ КАК НЗ
	                    |ПОМЕСТИТЬ ВыборкаМатрица
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		МатрицаНЗ.Аптека КАК Аптека,
	                    |		МатрицаНЗ.Товар КАК Товар,
	                    |		МатрицаНЗ.НЗ КАК НЗ_1,
	                    |		0 КАК НЗ_2
	                    |	ИЗ
	                    |		РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
	                    |	ГДЕ
	                    |		МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1)
	                    |		И МатрицаНЗ.РекламнаяАкция = ИСТИНА
	                    |		И МатрицаНЗ.НЗ > 0
	                    |		И МатрицаНЗ.Аптека В(&СписокСкладов)
	                    |	{ГДЕ
	                    |		МатрицаНЗ.Товар.* КАК Товар}
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ
	                    |		МатрицаНЗ.Аптека,
	                    |		МатрицаНЗ.Товар,
	                    |		0,
	                    |		МатрицаНЗ.НЗ
	                    |	ИЗ
	                    |		РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
	                    |	ГДЕ
	                    |		МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2)
	                    |		И МатрицаНЗ.РекламнаяАкция = ИСТИНА
	                    |		И МатрицаНЗ.НЗ > 0
	                    |		И МатрицаНЗ.Аптека В(&СписокСкладов)
	                    |	{ГДЕ
	                    |		МатрицаНЗ.Товар.* КАК Товар}) КАК Выборка
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Выборка.Аптека,
	                    |	Выборка.Товар
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ВЫборка.Склад КАК Склад,
	                    |	ВЫборка.Товар.Код КАК Код,
	                    |	ВЫборка.Товар,
	                    |	ВЫборка.КолвоОстаток,
	                    |	ВЫборка.НЗ,
	                    |	ВЫборка.МинЗак,
	                    |	ВЫборка.Заказать,
	                    |	ВЫборка.КоличествоРасход КАК Продажи
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		ВЫБОР
	                    |			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	                    |				ТОГДА Матрица.Аптека
	                    |			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
	                    |		КОНЕЦ КАК Склад,
	                    |		ВЫБОР
	                    |			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	                    |				ТОГДА Матрица.Товар
	                    |			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
	                    |		КОНЕЦ КАК Товар,
	                    |		ПартииЖНВЛСОстатки.колвоостаток КАК КолвоОстаток,
	                    |		Матрица.НЗ КАК НЗ,
	                    |		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
	                    |		ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) КАК КоличествоРасход,
	                    |		ВЫБОР
	                    |			КОГДА ВыборкаПродаж.КоличествоРасход <= Матрица.НЗ
	                    |					ИЛИ ВыборкаПродаж.КоличествоРасход ЕСТЬ NULL 
	                    |				ТОГДА ВЫБОР
	                    |						КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	                    |							ТОГДА Матрица.НЗ
	                    |						ИНАЧЕ ВЫБОР
	                    |								КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < Матрица.НЗ
	                    |									ТОГДА ВЫБОР
	                    |											КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	                    |												ТОГДА ВЫБОР
	                    |														КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	                    |															ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	                    |														ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток
	                    |													КОНЕЦ
	                    |											ИНАЧЕ Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	                    |										КОНЕЦ
	                    |								ИНАЧЕ 0
	                    |							КОНЕЦ
	                    |					КОНЕЦ
	                    |			ИНАЧЕ ВЫБОР
	                    |					КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	                    |						ТОГДА ВыборкаПродаж.КоличествоРасход
	                    |					ИНАЧЕ ВЫБОР
	                    |							КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < ВыборкаПродаж.КоличествоРасход
	                    |								ТОГДА ВЫБОР
	                    |										КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	                    |											ТОГДА ВЫБОР
	                    |													КОГДА ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	                    |														ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	                    |													ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток
	                    |												КОНЕЦ
	                    |										ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	                    |									КОНЕЦ
	                    |							ИНАЧЕ 0
	                    |						КОНЕЦ
	                    |				КОНЕЦ
	                    |		КОНЕЦ КАК Заказать
	                    |	ИЗ
	                    |		ВыборкаМатрица КАК Матрица
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                    |				Остатки.Склад КАК Склад,
	                    |				Остатки.Товар КАК Товар,
	                    |				СУММА(Остатки.КолвоОстаток / Остатки.Партия.ЕИТЗакупки.К) КАК колвоостаток
	                    |			ИЗ
	                    |				РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК Остатки
	                    |			ГДЕ
	                    |				Остатки.КолвоОстаток > 0
	                    |			
	                    |			СГРУППИРОВАТЬ ПО
	                    |				Остатки.Товар,
	                    |				Остатки.Склад) КАК ПартииЖНВЛСОстатки
	                    |			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
	                    |				И (ПартииЖНВЛСОстатки.Товар = Матрица.Товар)
	                    //|				И (ПартииЖНВЛСОстатки.колвоостаток > 0)
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПродаж КАК ВыборкаПродаж
	                    |			ПО Матрица.Аптека = ВыборкаПродаж.Склад
	                    |				И Матрица.Товар = ВыборкаПродаж.Товар
	                    |) КАК ВЫборка
	                    |ГДЕ
	                    |	ВЫборка.Заказать > 0
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Склад,
	                    |	ВЫборка.Товар.Наименование
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ ВыборкаПродаж";							

        ТЗ.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанель2Действие(Кнопка)
	СписокАптек.ЗаполнитьПометки(Истина);
КонецПроцедуры

Процедура КоманднаяПанель2Действие1(Кнопка)
	СписокАптек.ЗаполнитьПометки(Ложь);
КонецПроцедуры

Процедура ВыборРасчетаПриИзменении(Элемент)
	
	ЭлементыФормы.ОтборПостроителя.Видимость = Ложь;
	Если Элемент.Значение = 0 Тогда
		ЭлементыФормы.ТекстОбработки.Заголовок = "РАСЧЕТ ABC";
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.НастройкиABC;
	ИначеЕсли Элемент.Значение = 1 Тогда
		ЭлементыФормы.ТекстОбработки.Заголовок = "РАСЧЕТ Qmin - Qmax";
	Иначе
		ЭлементыФормы.ТекстОбработки.Заголовок = "РАСЧЕТ АВТОЗАКАЗА";
		Если РасчетПоВсем = Ложь Тогда
			ЭлементыФормы.ОтборПостроителя.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РасчетПоВсемПриИзменении(ЭлементыФормы.РасчетПоВсем);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПримерОтбора(Кнопка)
	
	ТЗВРем = Новый ТаблицаЗначений;
	ТЗВРем.Колонки.Добавить("Период");
	ТЗВРем.Колонки.Добавить("Остаток");
	
	стр = ТЗВРем.Добавить();
	стр.Период = 1;
	стр.Остаток = 10;
	
	стр = ТЗВРем.Добавить();
	стр.Период = 2;
	стр.Остаток = 5;	
	
	стр = ТЗВРем.Добавить();
	стр.Период = 3;
	стр.Остаток = 3;	
	
	стр = ТЗВРем.Добавить();
	стр.Период = 4;
	стр.Остаток = 1;
	
	ТЗВРем.Колонки.Добавить("Хкол");
	Хкол=тзврем.ВыгрузитьКолонку("период");
	тзврем.ЗагрузитьКолонку(Хкол,"Хкол");
	
	
	
	Отбор = Новый Структура;
	//СписокПериодов = Новый СписокЗначений;
	//СписокПериодов.Добавить("Период",4);
	//СписокПериодов.Добавить("Хкол",1);
	//Отбор.Вставить("Период",СписокПериодов);
	Отбор.Вставить("Период",1);
	Отбор.Вставить("Хкол",4);
	Нашли = ТЗВРем.НайтиСтроки(Отбор);
	Сообщить(Нашли.Количество());
	
	
КонецПроцедуры

Процедура СоздатьФайлЗаказаНажатие(Элемент)
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	      |	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
	      |	ЗаявкаНаТовар.Дата КАК Дата
	      |ИЗ
	      |	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
	      |ГДЕ
	      |	ЗаявкаНаТовар.Склад = &Склад
	      |	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата УБЫВ,
	      |	НомерЗаявкиАптеки УБЫВ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",ВыбАптека);
	Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказОфиса);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
		НовыйНомер = "АЗ-0000001";
	Иначе
		Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) Тогда //Зачем два автозаказа в один день
			Возврат;
		КонецЕсли;
		ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
		НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
		НовыйНомер = Лев("АЗ-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
	КонецЕсли;
	
	ИмяФайла = "dem" + ВыбАптека.Код + "_" + НовыйНомер + "_"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ВремФайл = Константы.КаталогФТП.Получить() + "Out\demtemp.dbf";
	ВыгружаемыйФайл = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".dbf" ;
	ВыгружаемыйАрхив = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".zip" ;
	ДатаЗаказа = ТекущаяДата();
	ОтветственныйКод = ПараметрыСеанса.ТекущийСотр.Код;
	
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("NDOC","S",20);
	ДБФ.поля.Добавить("DDOC","D",,);
	ДБФ.поля.Добавить("IDGOOD","N",10,0);
	ДБФ.поля.Добавить("QNT","N",10,0);
	ДБФ.поля.Добавить("IDTYPE","N",10,0);
	ДБФ.поля.Добавить("SOTR","N",5,0);
	ДБФ.СоздатьФайл(ВремФайл);
	
	Для Каждого стр из ТЗ ЦИкл
		Если стр.Заказать > 0 Тогда	
			ДБФ.Добавить();
			ДБФ.NDOC=НовыйНомер;
			ДБФ.DDOC=ДатаЗаказа;
			ДБФ.IDGOOD=стр.Код;
			ДБФ.QNT=стр.Заказать;
			ДБФ.IDTYPE= 5;
			ДБФ.SOTR = ОтветственныйКод;
			ДБФ.Записать();
		КонецЕсли;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	ПереместитьФайл(ВремФайл,ВыгружаемыйФайл);
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ВыгружаемыйФайл,ВыгружаемыйАрхив);
	УдалитьФайлы(ВыгружаемыйФайл);
	Предупреждение("Заказ выгружен в файл: " + ВыгружаемыйАрхив);
	
	
КонецПроцедуры

Функция ЗадатьВопрос(ТекстВопроса)
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(ТекстВопроса, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;	
		КонецЕсли;
	
	
КонецФункции

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	КОЛИЧЕСТВО(*) КАК Количество
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад";
		  
		              
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Запрос.УстановитьПараметр("Склад",ВыбАптека);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Получить(0).Количество > 0 Тогда
		Отказ = ЗадатьВопрос("Остался невыгруженный точечный заказ. Вы действительно хотите закрыть обработку?");
	Иначе
		Отказ = ЗадатьВопрос("Закрыть обработку?");
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасчетПоВсемПриИзменении(Элемент)
	
	Если ВыборРасчета = 2 Тогда
		Если Элемент.Значение = Ложь Тогда
			ЭлементыФормы.ТекстОбработкиПродолжение.Заголовок = "( по рекламам )";
			ЭлементыФормы.ОтборПостроителя.Видимость = Истина;
			ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаАвтозаказПоРекламе;
		Иначе
			ЭлементыФормы.ТекстОбработкиПродолжение.Заголовок = "( по всем позициям )";
			ЭлементыФормы.ОтборПостроителя.Видимость = Ложь;
			ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаОбщийАвтозаказ;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ТекстОбработкиПродолжение.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДанныеВМатрицеНажатие(Элемент)
	      
	ФормаИзменения = ЭтотОбъект.ПолучитьФорму("РедактированиеМатрицы");
	ФормаИзменения.ВладелецФормы = ЭтаФорма;
	ФормаИзменения.ВыбАптека = ВыбАптека;
	ФормаИзменения.КуМин = ЭлементыФормы.ТЗ.ТекущаяСтрока.КуМин;
	ФормаИзменения.КуМакс = ЭлементыФормы.ТЗ.ТекущаяСтрока.КуМакс;
	ФормаИзменения.НЗ = ЭлементыФормы.ТЗ.ТекущаяСтрока.НЗ;
	ФормаИзменения.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЗ.ТекущаяСтрока.Код);
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("A","A");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("B","B");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("C","C");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("D","D");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("I","I");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("G","G");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("S","S");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("X","X");
	ФормаИзменения.ГруппаАП = ЭлементыФормы.ТЗ.ТекущаяСтрока.ГруппаАП;
	ФормаИзменения.ОткрытьМодально();
	
	ТекущийЭлемент = ЭлементыФормы.ТЗ;
	

КонецПроцедуры

Процедура ТЗПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Попытка
		Если (ДанныеСтроки.ГруппаАП="I") Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(192, 192, 192);
		ИначеЕсли (ДанныеСтроки.Остаток=0) и (ДанныеСтроки.Заказать>0) Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255, 200, 200);
		ИначеЕсли ТекДата < ДанныеСтроки.СрокДействияРекламнойАкции 
			и ДанныеСтроки.ПризнакРекламнойАкции = Истина 
			и ДанныеСтроки.НЗ > 0 Тогда
			ОформлениеСтроки.Ячейки.Товар.ЦветФона = Новый Цвет(182, 255,176);
		КонецЕсли;
		
	
		Если (ДанныеСтроки.Продажи>0) и (ДанныеСтроки.Продажи<(ДанныеСтроки.Остаток/3)) Тогда
			ОформлениеСтроки.Ячейки.Остаток.ЦветФона = Новый Цвет(128, 255, 255);
		КонецЕсли;
		
		Если ДанныеСтроки.Остаток = 0 и ДанныеСтроки.ДнейПродаж < 15 Тогда
			Если ДанныеСтроки.ГруппаАП = "A" или ДанныеСтроки.ГруппаАП = "B" или ДанныеСтроки.ГруппаАП = "C" Тогда
		    	ОформлениеСтроки.Ячейки.Остаток.ЦветФона = Новый Цвет(255, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ОбнулитьЗаказИИзменитьГруппу(Группа)
	
	
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ВыбАптека);
		МассивИзмерений.Вставить("Товар",Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЗ.ТекущаяСтрока.Код));
		
		МассивИзменений = Новый Структура;
		МассивИзменений.Вставить("ГруппаАПИтог",Группа);
		МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
		МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
		//Записываем изменения
		ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);		
		ЭлементыФормы.ТЗ.ТекущаяСтрока.Заказать = 0;
		ЭлементыФормы.ТЗ.ТекущаяСтрока.Сумма = 0 ;
		ЭлементыФормы.ТЗ.ТекущаяСтрока.ГруппаАП = Группа ;		
		
КонецПроцедуры

Процедура ГорячаяКнопкаДляСанакоеваНажатие(Элемент)
	
  	ОбнулитьЗаказИИзменитьГруппу("I");
	
	
КонецПроцедуры

Процедура ИзменитьГруппуНаDНажатие(Элемент)
	
	ОбнулитьЗаказИИзменитьГруппу("D");
	
КонецПроцедуры


Процедура ПанельНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если (РасчетПоВсем = Ложь) и (ТекущаяСтраница = 0) Тогда
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаАвтозаказПоРекламе;
	ИначеЕсли (РасчетПоВсем = Истина)  и (ТекущаяСтраница = 1) Тогда
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаОбщийАвтозаказ;
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

Процедура ТЗПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	 ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
	 Если (ИмяТекКол="Заказать") Тогда
		 
		ТекСтр = ЭлементыФормы.ТЗ.ТекущаяСтрока;
		Если ТекСтр.Активный = Ложь Тогда
			ТекСтр.Заказать = 0;
		КонецЕсли;
		ТекСтр.Сумма = ТекСтр.Заказать*ТекСтр.Цена;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
		
		//ТХТ = "ВЫБРАТЬ
		//|	0 КАК Код,
		//|	ВЫРАЗИТЬ("" "" КАК СТРОКА(150)) КАК Товар,
		//|	"""" КАК ГруппаАП,
		//|	0 КАК КуМин,
		//|	0 КАК КуМакс,
		//|	0 КАК НЗ,
		//|	0 КАК Продажи,
		//|	0 КАК ВПути,
		//|	0 КАК Остаток,
		//|	0 КАК Заказать,
		//|	0 КАК ДнейПродаж,
		//|	0 КАК СредняяСкорость,
		//|	0 КАК Дефектура,
		//|	0 КАК Цена,
		//|	0 КАК Сумма";
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = ТХТ;
		//ТЗ = Запрос.Выполнить().Выгрузить();
		//ТЗ.Колонки["Код"].Ширина = 10;
		//ТЗ.Колонки["Товар"].Ширина = 100;
		//ТЗ.Колонки["ГруппаАП"].Ширина = 5;
		//ТЗ.Колонки["КуМин"].Ширина = 10;
		//ТЗ.Колонки["КуМакс"].Ширина = 10;
		//ТЗ.Колонки["Продажи"].Ширина = 10;
		//ТЗ.Колонки["ВПути"].Ширина = 10;
		//ТЗ.Колонки["Остаток"].Ширина = 10;		
		//ТЗ.Колонки["Заказать"].Ширина = 10;
		//ТЗ.Колонки["ДнейПродаж"].Ширина = 10;		
		//ТЗ.Колонки["СредняяСкорость"].Ширина = 10;		
		//ТЗ.Колонки["НЗ"].Ширина = 10;
		//ТЗ.Колонки["Цена"].Ширина = 10;
		//ТЗ.Колонки["Дефектура"].Ширина = 10;		
		//ТЗ.Колонки["Сумма"].Ширина = 10;	
		//
		//ЭлементыФормы.ТЗ.СоздатьКолонки();
		//ЭлементыФормы.ТЗ.Колонки["Сумма"].ОтображатьИтогиВПодвале = Истина;	
	
КонецПроцедуры

Процедура ТочечныйЗаказНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЗ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	Если ТекСтрока.Активный = Ложь Тогда
		Предупреждение("Позиций неактивна. Точечный заказ невозможен.");
		Возврат;
	КонецЕсли;
	ФормаИзменения = ЭтотОбъект.ПолучитьФорму("ТочечныйЗаказ");
	ФормаИзменения.ВладелецФормы = ЭтаФорма;
	ФормаИзменения.Аптека = ВыбАптека;
	ФормаИзменения.ИндексТекСтроки = ТЗ.Индекс(ТекСтрока);
	ФормаИзменения.ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
	ФормаИзменения.ОткрытьМодально();
	
	ТекущийЭлемент = ЭлементыФормы.ТЗ;

КонецПроцедуры

Процедура ОтформатироватьОбласть(Макет,Текст,Ширина,НовыйТекст,ФорматнаяСтрока=Неопределено);
	
	Область=Макет.НайтиТекст(Текст,,Макет.Область("ШапкаТаблицы"));
	Если Область<>Неопределено тогда
		Область.Текст=СтрЗаменить(Область.Текст,Текст,НовыйТекст);
		Область.ШиринаКолонки=Ширина;
		Если ФорматнаяСтрока<>Неопределено тогда
			Макет.Область("R"+Область.Верх+"C"+Область.Лево+
			":R"+Макет.ВысотаТаблицы+"C"+Область.Лево).Формат=ФорматнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЗаказНажатие(Элемент)
	
		
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	УточненныйЗаказ.Поставщик.Наименование КАК Поставщик,
	      |	УточненныйЗаказ.Товар.Наименование КАК Товар,
	      |	УточненныйЗаказ.Цена,
	      |	УточненныйЗаказ.СрокГодности,
	      |	УточненныйЗаказ.Количество,
	      |	УточненныйЗаказ.Количество * УточненныйЗаказ.Цена КАК Сумма
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Поставщик,
	      |	Товар
	      |ИТОГИ
	      |	СУММА(Сумма)
	      |ПО
	      |	ОБЩИЕ,
	      |	Поставщик";
		  
		              
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТХТ;
	Построитель.Параметры.Вставить("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Построитель.Параметры.Вставить("Склад",ВыбАптека);
	
	Построитель.Выполнить();
	Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	Построитель.ОформитьМакет();
	Макет=Построитель.Макет;
	ОтформатироватьОбласть(Макет,"Поставщик",20,"Поставщик",Неопределено);
	ОтформатироватьОбласть(Макет,"Товар",50,"Товар",Неопределено);
	ОтформатироватьОбласть(Макет,"СрокГодности",10,"Срок годности","ДФ=dd.MM.yyyy");
	ОтформатироватьОбласть(Макет,"Цена",7,"Цена","ЧЦ=10; ЧДЦ=2");
	ОтформатироватьОбласть(Макет,"Количество",7,"Кол-во","ЧЦ=10; ЧДЦ=0");
	ОтформатироватьОбласть(Макет,"Сумма",10,"Сумма","ЧЦ=10; ЧДЦ=2");
	Макет.Область("ШапкаТаблицы").РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Макет.Область("ШапкаТаблицы").ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
	Макет.Область("ШапкаТаблицы").ВертикальноеПоложение=ВертикальноеПоложение.Центр;
	Макет.АвтоМасштаб = Истина;
	
	Построитель.Макет=Макет;
	Построитель.Вывести();
		

КонецПроцедуры

Процедура F5Нажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЗ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Предупреждение("Строка неопределена!");	
		Возврат;
	КонецЕсли;
	ТекБренд = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код).Бренд;
	Если ТекБренд.Пустая() Тогда
		Предупреждение("Нельзя менять группу по позициям с пустым брендом.");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите перевести в группу «I» все позиции с брендом " + СокрЛП(ТекБренд.Наименование)+ " ?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	

	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	Матрица.Товар.Код как Код,
	      |	Матрица.Товар КАК Товар
	      |ИЗ
	      |	РегистрСведений.Матрица КАК Матрица
	      |ГДЕ
	      |	Матрица.Аптека = &Аптека и Матрица.Товар.Бренд = &Бренд
	      |";

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Бренд",ТекБренд);
	Запрос.УстановитьПараметр("Аптека",ВыбАптека);
	ТаблицаКодов = Запрос.Выполнить().Выгрузить();
	н=0;
	Для каждого стр из ТаблицаКодов Цикл
		н=н+1;
		
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ВыбАптека);
		МассивИзмерений.Вставить("Товар",стр.Товар);
		
		МассивИзменений = Новый Структура;
		МассивИзменений.Вставить("ГруппаАПИтог","I");
		МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
		МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
		//Записываем изменения
		ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);			
		
		
		
		НайденнаяСтрока = ТЗ.Найти(стр.Код,"Код");
		Если НайденнаяСтрока = Неопределено Тогда
		Иначе
			НайденнаяСтрока.ГруппаАП = "I";
			НайденнаяСтрока.Заказать = 0;
			НайденнаяСтрока.Сумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ТЗПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если РольДоступна("УдаленныйЗаказ")=Истина Тогда 
		Предупреждение("Данной роли добавление позиций запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ФормаДобавления = ЭтотОбъект.ПолучитьФорму("ДобавлениеПозицииВЗаказ");
	ФормаДобавления.РежимВыбора = Истина;
	ФормаДобавления.ВладелецФормы = ЭтаФорма;
	ФормаДобавления.ВыбАптека = ВыбАптека;
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("A","A");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("B","B");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("C","C");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("D","D");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("I","I");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("G","G");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("S","S");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("X","X");
	ФормаДобавления.ГруппаАП = "I";
	ФормаДобавления.ОткрытьМодально();
    Отказ = Истина;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("РегистрСведенийКлючЗаписи.СохраненныеРасчетыЗаказов") Тогда
		ВосстановитьРасчетЗаказа(ЗначениеВыбора);
	Иначе	
		НайденнаяСтрока = ТЗ.Найти(ЗначениеВыбора["Код"],"Код");
		Если НайденнаяСтрока = Неопределено Тогда
			ТекСтрока = ТЗ.Добавить();
			ТекСтрока.Код = ЗначениеВыбора["Код"];
			ТекСтрока.Товар = ЗначениеВыбора["Товар"];
			ТекСтрока.НЗ = ЗначениеВыбора["НЗ"];
			ТекСтрока.Заказать = ЗначениеВыбора["Заказать"];
			ТекСтрока.ГруппаАП = ЗначениеВыбора["ГруппаАП"];
			ТекСтрока.ТоварСсылка = ЗначениеВыбора["ТоварСсылка"];
		Иначе
			Предупреждение("Данная позиция уже имеется в таблице заказа");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаЗаказа(Док,Поставщик)
	

	Док.Поставщик=Поставщик;
	Док.Склад = ВыбАптека;
	Док.Статус=Перечисления.СтатусЗаказаПоставщику.Создан;
	Док.Дата=ТекущаяДата();
		
	СтрИзм=Док.Изменения.Добавить();
	СтрИзм.Дата=ТекущаяДата();
	СтрИзм.КомментарийИзменения="Точечный заказ из автозаказа";
	СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
	СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.ВводНового;
	
КонецПроцедуры

Процедура ВыгрузитьЗаказПоставщику(Док)
		Нашли = Справочники.КодыАптек.НайтиПоРеквизиту("Аптека",Док.Склад,,Док.Поставщик);
		Если Нашли = Справочники.КодыАптек.ПустаяСсылка() Тогда
			//Предупреждение("На эту аптеку нет кода поставщика! Документ не выгружен!");
			Возврат;
		КонецЕсли;
		
		Если (Док.Поставщик.АвтоматическаяВыгрузкаЗаказов = Истина) Тогда
			Если Док.ВыгрузитьПоставщику() = Истина Тогда
				Док.Записать(РежимЗаписиДокумента.Проведение);
				ЭлементыФормы.Лог.ДобавитьСтроку("---> ОК! Выгружен");
				ОМ21_ЗаказыПоставщикам.ОМ21_УменьшитьКоличестваВПрайсе(Док);
			Иначе
				ЭлементыФормы.Лог.ДобавитьСтроку("---> НЕ выгружен");
			КонецЕсли;
		Иначе
			ЭлементыФормы.Лог.ДобавитьСтроку("---> НЕ выгружен (не включена автовыгрузка)");
		КонецЕсли;
КонецПроцедуры

Процедура ОчиститьРегистрТочечногоЗаказа()
	
	НаборЗаписей = РегистрыСведений.УточненныйЗаказ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр); 
	НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
	Для к=1 по 4 Цикл
		Попытка
			НаборЗаписей.Записать();
			ОчиститьСообщения();
			Прервать;
		Исключение
			Сообщить("Не удалось очистить регистр точечного заказа",СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Предупреждение("Попытка очистки №" + к,3);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


Процедура КоманднаяПанельРезультатаВыгрузить(Кнопка)
	
	Отказ = ЗадатьВопрос("Вы действительно хотите выгрузить заказы поставщикам?");
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	УточненныйЗаказ.Поставщик КАК Поставщик,
	      |	УточненныйЗаказ.Товар.Код КАК КодТовара,
	      |	УточненныйЗаказ.Товар КАК Товар,
	      |	УточненныйЗаказ.КодТовараПоставщика КАК КодТовараПоставщика,
	      |	УточненныйЗаказ.Цена,
	      |	УточненныйЗаказ.Количество,
	      |	УточненныйЗаказ.Количество * УточненныйЗаказ.Цена КАК Сумма,
	      |	ЕСТЬNULL(Прайс.Товар, """") КАК НаименованиеТовараПоставщика
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайс
	      |		ПО (Прайс.Поставщик = УточненныйЗаказ.Поставщик)
	      |			И (Прайс.Код = УточненныйЗаказ.КодТовараПоставщика)
	      |			И (УточненныйЗаказ.Цена = Прайс.Цена)
	      |			И (УточненныйЗаказ.СрокГодности = Прайс.СрокГодности)
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	УточненныйЗаказ.Поставщик.Наименование,
	      |	Товар";
		  
		              
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Запрос.УстановитьПараметр("Склад",ВыбАптека);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.ЛогОбработки;
	ЭлементыФормы.Лог.Очистить();
	ЭлементыФормы.Лог.ДобавитьСтроку("Создание и выгрузка заказов поставщикам:");
	Рез.Сортировать("Поставщик");
	
	Док=Документы.Заказ.СоздатьДокумент();
	ВремПоставщик = Справочники.Поставщики.ПустаяСсылка(); 
	Для каждого стр из Рез Цикл
		
		Поставщик=стр.Поставщик;
		КодТовара = стр.КодТовара;
		Товар = стр.Товар;
		Количество = стр.Количество;
		Цена = стр.Цена;
		Сумма = стр.Сумма;
		КодТовараПоставщика = стр.КодТовараПоставщика;
		ТоварПоставщика = стр.НаименованиеТовараПоставщика;
		
		Если (ВремПоставщик <> Поставщик)  Тогда
			Если НЕ ВремПоставщик.Пустая() Тогда
				Записан = Ложь;
				Пока Записан = Ложь Цикл
					Попытка
						Док.СуммаДок = Док.Товар.Итог("Сумма");
						Док.Записать(РежимЗАписиДокумента.Запись);
						ЭлементыФормы.Лог.ДобавитьСтроку("Создан: " + Док  + " "  + ВремПоставщик);
						Записан = Истина;
					Исключение
						Записан = Ложь;
					КонецПопытки; 
				КонецЦикла;				
				ВыгрузитьЗаказПоставщику(Док);
				Док=Документы.Заказ.СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьШапкуДокументаЗаказа(Док,Поставщик);
			ВремПоставщик = Поставщик;
		КонецЕсли;
		
			//------- Заполняем табл. часть документа		
			Стр = Док.Товар.Добавить();
			Стр.Товар=Товар;
			Стр.Количество=Количество;
			Стр.Цена = Цена;
			Стр.Сумма = Сумма;
			Стр.КодТовараПоставщика = КодТовараПоставщика;
			Стр.НаименованиеТовараПоставщика = ТоварПоставщика;

	КонецЦикла;
	
	Записан = Ложь;
	Пока Записан = Ложь Цикл
		Попытка
			Док.СуммаДок = Док.Товар.Итог("Сумма");
			Док.Записать(РежимЗАписиДокумента.Запись);
			ЭлементыФормы.Лог.ДобавитьСтроку("Создан: " + Док + " "  + ВремПоставщик);
			Записан = Истина;
		Исключение
			Записан = Ложь;
		КонецПопытки; 
	КонецЦикла;				
	ВыгрузитьЗаказПоставщику(Док);
	
	ОчиститьРегистрТочечногоЗаказа();
	
	
КонецПроцедуры

Процедура УдалитьБрендИзМатрицыНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЗ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Предупреждение("Строка неопределена!");	
		Возврат;
	КонецЕсли;
	ТекТовар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
	ТекБренд = ТекТовар.Бренд;
	Если ТекБренд.Пустая() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Удалить текущую позицию из матрицы?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			МассивИзмерений = Новый Структура;
			МассивИзмерений.Вставить("Аптека",ВыбАптека);
			МассивИзмерений.Вставить("Товар",ТекТовар);
			ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
			ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);
			ТЗ.Удалить(ТекСтрока);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите удалить ВЕСЬ бренд " + СокрЛП(ТекБренд.Наименование)+ " из матрицы ?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	

	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	Матрица.Товар.Код как Код,
	      |	Матрица.Товар КАК Товар
	      |ИЗ
	      |	РегистрСведений.Матрица КАК Матрица
	      |ГДЕ
	      |	Матрица.Аптека = &Аптека и Матрица.Товар.Бренд = &Бренд
	      |";

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Бренд",ТекБренд);
	Запрос.УстановитьПараметр("Аптека",ВыбАптека);
	ТаблицаКодов = Запрос.Выполнить().Выгрузить();

	
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	н=0;
	Для каждого стр из ТаблицаКодов Цикл
		н=н+1;
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ВыбАптека);
		МассивИзмерений.Вставить("Товар",стр.Товар);
		ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
		ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);

		НайденнаяСтрока = ТЗ.Найти(стр.Код,"Код");
		Если НайденнаяСтрока = Неопределено Тогда
		Иначе
			СписокУдаляемыхСтрок.Добавить(НайденнаяСтрока);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Для Каждого ССУС из СписокУдаляемыхСтрок цикл
		ТЗ.Удалить(ССУС.Значение);
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьМатрицыВыбранныхАптек(Кнопка)

	    Отказ = ЗадатьВопрос("Вы действительно хотите очистить матрицы аптек?");
		Если Отказ = Истина Тогда
			Возврат;
		КонецЕсли;
	
	
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		      |	Матрица.Товар КАК Товар
		      |ПОМЕСТИТЬ МАТРИЦАДЛЯОЧИСТКИ
		      |ИЗ
		      |	РегистрСведений.Матрица КАК Матрица
		      |ГДЕ
		      |	Матрица.Товар.УчаствуетВАП = ЛОЖЬ
		      |	И Матрица.Аптека = &Аптека
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			  |	МАТРИЦАДЛЯОЧИСТКИ.Товар,
		      |	ЕСТЬNULL(Остатки.Товар, 1) КАК Поле1
		      |ИЗ
		      |	МАТРИЦАДЛЯОЧИСТКИ КАК МАТРИЦАДЛЯОЧИСТКИ
		      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		      |			ПартииЖНВЛСОстатки.Товар КАК Товар
		      |		ИЗ
		      |			РегистрНакопления.ПартииЖНВЛС.Остатки(
		      |					&ДатаОстатка,
		      |					Склад = &Аптека
		      |						И товар В
		      |							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |								МАТРИЦАДЛЯОЧИСТКИ.Товар
		      |							ИЗ
		      |								МАТРИЦАДЛЯОЧИСТКИ)) КАК ПартииЖНВЛСОстатки
		      |		ГДЕ
		      |			ПартииЖНВЛСОстатки.КолвоОстаток > 0) КАК Остатки
		      |		ПО (Остатки.Товар = МАТРИЦАДЛЯОЧИСТКИ.Товар)
		      |ГДЕ
		      |	ЕСТЬNULL(Остатки.Товар, 1) = 1
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ МАТРИЦАДЛЯОЧИСТКИ";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	
	Для Каждого ЭлементСписка Из СписокАптек Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ЭлементСписка.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
    	//Запрос.Параметры.Очистить();
		Запрос.УстановитьПараметр("ДатаОстатка",КонецГода(ТекущаяДата()));
		Запрос.УстановитьПараметр("Аптека",ЭлементСписка.Значение);
		Рез = Запрос.Выполнить().Выгрузить();	  
		Состояние("Очистка матрицы " + ЭлементСписка.Представление);
		н=0;
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ЭлементСписка.Значение);

		//НачатьТранзакцию();
		Для каждого стр из Рез Цикл
			МассивИзмерений.Вставить("Товар",стр.Товар);
			ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
			ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);
			н=н+1;
		КонецЦикла;
		//ЗафиксироватьТранзакцию();	  
		
	КонецЦикла;
	Состояние("");
	Предупреждение("Очистка матриц произведена!",5);
	
КонецПроцедуры

Процедура АптекаМатрицыQminQmaxПриИзменении(Элемент)
	
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	МатрицаQminQmax.Аптека,
	      |	МатрицаQminQmax.ГруппаАП КАК ГруппаАП,
	      |	МатрицаQminQmax.ГруппаXYZ КАК ГруппаXYZ,
	      |	МатрицаQminQmax.ЦенаМин КАК ЦенаМин,
	      |	МатрицаQminQmax.ЦенаМакс,
	      |	МатрицаQminQmax.Qmin,
	      |	МатрицаQminQmax.Qmax
	      |ИЗ
	      |	Справочник.МатрицаQminQmax КАК МатрицаQminQmax
	      |ГДЕ
	      |	МатрицаQminQmax.Аптека = &Аптека
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ГруппаАП,
	      |	ЦенаМин,
	      |	ГруппаXYZ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",АптекаМатрицыQminQmax);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.ПустаяСсылка());
		РезЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ТЗМатрицаQminQmax = РезЗапроса.Выгрузить();
	ЭлементыФормы.ТЗМатрицаQminQmax.СоздатьКолонки();
	
КонецПроцедуры

Процедура СписокВыбораАптекПриИзменении(Элемент)
	ПолучитьСписокАптек();
КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьУстаревшиеРекламныеАкции(Кнопка)
	
	//Отказ = ЗадатьВопрос("Вы действительно хотите очистить устаревшую рекламу?");
	//Если Отказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	  |	Матрица.Аптека КАК Аптека,
	//	  |	Матрица.Товар КАК Товар
	//	  |ИЗ
	//	  |	РегистрСведений.Матрица КАК Матрица
	//	  |ГДЕ
	//	  |	Матрица.НЗ > 0
	//	  |	И Матрица.РекламнаяАкция = ИСТИНА
	//	  |	И Матрица.СрокДействияРекламы < &ТекДата
	//	  |
	//	  |УПОРЯДОЧИТЬ ПО
	//	  |	Аптека";
	//
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	//Рез = Запрос.Выполнить().Выгрузить();
	//КолСтрок = Рез.Количество();
	//Если КолСтрок = 0 Тогда
	//	Предупреждение("Нет данных для очистки");
	//	Возврат;
	//КонецЕсли;
	//н=0;
	//НачатьТранзакцию();
	//МассивИзмерений = Новый Структура;
	//МассивИзменений = Новый Структура;
	//МассивИзменений.Вставить("НЗ",0);
	//МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
	//МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
	//
	//Для каждого стр из Рез Цикл
	//	н=н+1;
	//	Если н%100 = 0 Тогда
	//		ЗафиксироватьТранзакцию();
	//		Состояние("Очищено " + н + " из " + КолСтрок );
	//		НачатьТранзакцию();
	//	КонецЕсли;
	//	
	//	МассивИзмерений.Вставить("Аптека",стр.Аптека);
	//	МассивИзмерений.Вставить("Товар",стр.Товар);
	//	ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);
	//КонецЦикла;
	//ЗафиксироватьТранзакцию();
	//Предупреждение("Выполнено.");
	
	
КонецПроцедуры

Процедура ВосстановитьРасчетЗаказа(КлючЗаписи)
	
	ТЗ.Очистить();
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(КлючЗаписи.Период);
	
	Для Каждого Измерение Из Метаданные.РегистрыСведений.СохраненныеРасчетыЗаказов.Измерения Цикл
		НаборЗаписей.Отбор[Измерение.Имя].Установить(КлючЗаписи[Измерение.Имя]);
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		Запись = НаборЗаписей[0];
		
		СохраненныйЗаказ = Запись.РасчетЗаказа.Получить();
		Если СохраненныйЗаказ.Колонки.Количество() <> ТЗ.Колонки.Количество() Тогда
			Предупреждение("Формат сохраненного заказа отличается от текущего!");
			Возврат;
		КонецЕсли;

		ТЗ = СохраненныйЗаказ.Скопировать();
		ВыбАптека = Запись.Склад;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СохранитьРасчетЗаказа()
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр);
	НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекДата;
		Запись.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Запись.Склад = ВыбАптека;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТЗ, Новый СжатиеДанных(9));
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Не удалось сохранить расчет заказа: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	мВремяСледующегоСохранения = ТекДата + мИнтервалАвтосохранения;
	
КонецПроцедуры

Процедура ТЗПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И ТекущаяДата() >= мВремяСледующегоСохранения Тогда
		СохранитьРасчетЗаказа();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВосстановитьРасчетЗаказаНажатие(Элемент)
	
	Если ТЗ.Количество() <> 0 Тогда
		Если Вопрос("Текущий расчет заказа будет заменен из архива. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаСписка = РегистрыСведений.СохраненныеРасчетыЗаказов.ПолучитьФормуСписка(, ЭтаФорма);
	ФормаСписка.РежимВыбора = Истина;
	ФормаСписка.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр);
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ПолучитьПравилаНажатие(Элемент)
	
	ТХТ = "ВЫБРАТЬ
	      |	МатрицаQminQmax.Аптека,
	      |	МатрицаQminQmax.ГруппаАП КАК ГруппаАП,
	      |	МатрицаQminQmax.ГруппаXYZ КАК ГруппаXYZ,
	      |	МатрицаQminQmax.ЦенаМин КАК ЦенаМин,
	      |	МатрицаQminQmax.ЦенаМакс,
	      |	МатрицаQminQmax.Qmin,
	      |	МатрицаQminQmax.Qmax
	      |ИЗ
	      |	Справочник.МатрицаQminQmax КАК МатрицаQminQmax
	      |ГДЕ
	      |	МатрицаQminQmax.Аптека = &Аптека
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ГруппаАП,
	      |	ЦенаМин,
	      |	ГруппаXYZ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",АптекаМатрицыQminQmax);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.ПустаяСсылка());
		РезЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ТЗМатрицаQminQmax = РезЗапроса.Выгрузить();
	ЭлементыФормы.ТЗМатрицаQminQmax.СоздатьКолонки();	
	
	
КонецПроцедуры

Процедура СохранитьДляВыбраннойАптекиНажатие(Элемент)
	
	НачатьТранзакцию();
	
	ТХТ = "ВЫБРАТЬ
	| МатрицаQminQmax.Ссылка
	|ИЗ
	|	Справочник.МатрицаQminQmax КАК МатрицаQminQmax
	|ГДЕ
	|	МатрицаQminQmax.Аптека = &Аптека
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",АптекаМатрицыQminQmax);
	Выборка = Запрос.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		РезЗапроса = Выборка.Выгрузить();
		Для каждого стр из РезЗапроса Цикл
			Объект = стр.ссылка.ПолучитьОбъект();
			Объект.Удалить();
		КонецЦикла;
	КонецЕсли;	 
	СпрМатрицаQminQmax = Справочники.МатрицаQminQmax;
	Для каждого стр из ТЗМатрицаQminQmax Цикл
		НовыйЭлемент = СпрМатрицаQminQmax.СоздатьЭлемент();
		НовыйЭлемент.Аптека = АптекаМатрицыQminQmax;
		НовыйЭлемент.ГруппаАП = стр.ГруппаАП;
		НовыйЭлемент.ГруппаXYZ = стр.ГруппаXYZ;
		НовыйЭлемент.ЦенаМин = стр.ЦенаМин;
		НовыйЭлемент.ЦенаМакс = стр.ЦенаМакс;
		НовыйЭлемент.Qmin = стр.Qmin;
		НовыйЭлемент.Qmax = стр.Qmax;
		НовыйЭлемент.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ПолучитьПравилаНажатие("");
	
	
	
КонецПроцедуры


 УчитыватьТолькоНезакрепленныеЗаСотрудникомАптеки = Истина;
 ВыбДата = ТекущаяДата();
 //Для расчета ABC
 ПроцентА = 70;
 ПроцентБ = 20;
 
 //Для расчета автозаказа
 КоэффициентЗаказаA = 1;
 КоэффициентЗаказаB = 1;
 КоэффициентЗаказаC = 1;
 КоэффициентЗаказаD = 1;
 Поле_Коэфф					= 2;
 КоэффПоНЗ = 2;
 КоличествоДнейПродаж = 28;
 КоличествоДнейПотребности = 7;
 КоэффициентСреднейСкоростиПродаж = 10;
 УчитыватьНЗ = Истина;
 Флаг_УчестьРеквизитминимальныйЗаказ = Истина;
 ЭлементыФормы.РасчетПоВсем.СписокВыбора.Добавить(Истина,"Расчет по всем");
 ЭлементыФормы.РасчетПоВсем.СписокВыбора.Добавить(Ложь,"Расчет по рекламе");
 ЭлементыФормы.СписокВыбораАптек.СписокВыбора.Добавить(0,"Аптеки на автозаказе");
 ЭлементыФормы.СписокВыбораАптек.СписокВыбора.Добавить(1,"Аптеки на рекламе");
 РасчетПоВсем = Истина;
 СписокВыбораАптек = 0;
 ОграничениеДляНовыхАптек = Истина;
 УчитыватьКратностьЗаказа = Истина;
 ЭлементыФормы.ОтборПостроителя.Видимость = Ложь;
Ксз = 1;
КоэффициентУвеличенияПотребности = 0;
ТекДата = НачалоДня(ТекущаяДата());

мИнтервалАвтосохранения = 120;
мВремяСледующегоСохранения = ТекущаяДата();