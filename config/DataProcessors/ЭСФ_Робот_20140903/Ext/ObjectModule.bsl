Перем ДиадокАПИ_ВК Экспорт;
Перем DiadocInvoiceAPI Экспорт;
Перем DiadocInvoiceAPIObject Экспорт;
Перем КритическаяОшибка;
Перем URLСервера Экспорт;
Перем КлючРазработчика Экспорт;
Перем МассивВидовЭД;
Перем СоответствиеКонтрагентов;
Перем СоответствиеСтатусыСФ;
Перем ЗапросПоискаПоступленияТОваров;
Перем КаталогРаспаковки;
Перем Задание;

Перем ТабАвтоподпись Экспорт; // таблица значений с колонками НомерСтроки, Организация, ДиадокАПИ. В колонке ДиадокАПИ - Объект Organization.


Функция ВернутьПараметрыАктивностиРобота() Экспорт
	
	
	
	Попытка
		ИФо=ЭтотОбъект.ИспользуемоеИмяФайла;
		Режим="Внешняя";
	Исключение
		Режим="КОНФ";
	КонецПопытки;	
	
	
	Параметры = Новый Структура;
	Параметры.Вставить("КодРобота",КодРобота);
	Параметры.Вставить("Операция","Загрузка ЭСФ Диадок ("+Режим+")");
	Параметры.Вставить("ДатаЗапуска",ТекущаяДата());
	Параметры.Вставить("ДатаПоследнейАктивности",ТекущаяДата());
	Параметры.Вставить("Компьютер",ИмяКомпьютера());
	Параметры.Вставить("Примечание","с " + Формат(НачПериода,"ДЛФ=D") + " по " + Формат(КонПериода,"ДЛФ=D")+" за указанный период "+Формат(ЗЗаупер,"БЛ='[-]'; БИ=[V]"));
	Возврат Параметры;
		
КонецФункции

 


Процедура DiadocInvoiceAPI_ЗагрузитьВК() Экспорт
	// Загрузка внешней компоненты
	//имяФайлаКомпоненты = получитьИмяВременногоФайла("dll");
	//ПолучитьМакет("ФайлКомпоненты").Записать(имяФайлаКомпоненты);
	
	ДиадокАПИ_ВК = Неопределено;
	DiadocInvoiceAPI= Неопределено;
	DiadocInvoiceAPIObject=Неопределено;
	
	КритическаяОшибка=Ложь;
	
	ПутьКДЛЛ1="C:\Program Files (x86)\1cv82\common\DLL"; // для 32битной	
	Массивфайлов=НайтиФайлы(ПутьКДЛЛ1,"AddInDiadocAPI.dll");
	Если Массивфайлов.Количество()=0 Тогда
		#Если ТОлстыйКлиент тогда
		ПРедупреждение("Не найден файл AddInDiadocAPI.dll в папке  C:\Program Files (x86)\1cv82\common\DLL !");
		#КонецЕсли
		Возврат;
	КонецЕсли;	
	
	ИмяФайлакомпоненты = Массивфайлов.Получить(0).ПолноеИмя;
	
	Попытка
		ПодключитьВнешнююКомпоненту("Addin.DiadocInvoiceAPI");//имяФайлаКомпоненты,"AddInDiadocAPI",ТипВнешнейКомпоненты.COM);	
		//ПодключитьВнешнююКомпоненту(имяФайлаКомпоненты,"AddInDiadocAPI",ТипВнешнейКомпоненты.COM);	
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Состояние("ВК AddInDiadocAPI.dll подключена");
		#КонецЕсли
	Исключение
		ТекстПредупреждениия=("Не удалось подключить внешнюю компоненту AddInDiadocAPI.dll! "+имяФайлаКомпоненты+"  "+ОписаниеОшибки());
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстПредупреждениия,10);
		#Иначе
		#КонецЕсли	

		ЛогОписание=ТекстПредупреждениия;
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(Задание, Перечисления.ТипыЗаписейЛога.Ошибка,ЛогОписание);
		
		
		КритическаяОшибка=Истина;
		КомпонентаЭДОАктивна=Ложь;
		Возврат;
	КонецПопытки;
	
	// Создание объекта API
	ДиадокАПИ_ВК = Новый("AddIn.DiadocInvoiceAPI");
	

	//Сообщить("URLСервера : "+ URLСервера);
	
	DiadocInvoiceAPIObject = ДиадокАПИ_ВК.CreateObject();
	КомпонентаЭДОАктивна=Истина;
	
	DiadocInvoiceAPIObject.ApiClientId=КлючРазработчика;
	DiadocInvoiceAPIObject.ServerUrl=URLСервера; 
	DiadocInvoiceAPIObject.ProxyMode = "NoProxy";
	
	
	//Сообщить("Создан объект DiadocInvoiceAPIObject. Версия компоненты "+);
	ВерсияДЛЛ=DiadocInvoiceAPIObject.GetVersion();
	
	Если DiadocInvoiceAPIObject.TestConnection() Тогда
		Сообщить("Проверка соединения с сервером Диадока прошла успешно!");
	Иначе
		Сообщить("Проверка соединения с сервером Диадока : ОШИБКА!!!!");
		DiadocInvoiceAPIObject=Неопределено;
	КонецЕсли;	
	
	//Попытка
	//	DiadocInvoiceAPI=DiadocInvoiceAPIObject.CreateConnectionByCertificate("88 48 37 ee fd 07 a1 09 1d 38 75 c1 44 10 eb dd 90 1f ad a1");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	ВызватьИсключение;
	//КонецПопытки;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	#Иначе
		
		МодульРегламентныхЗаданий.Запись_В_ЛогЗапускаРегламентныхЗаданий(Задание,ТекущаяДата(),Перечисления.СобытияРегламентногоЗадания.Запуск,"Внешняя компонента AddInDiadocAPI.dll подключена" );
	#КонецЕсли	
КонецПроцедуры

Процедура ЗаполнитьСписокОрганизаций(ПолеСписка)  Экспорт
    Запрос=Новый Запрос("ВЫБРАТЬ
                        |	ЭСФ_НастройкиОбмена_Фирмы.Фирма
                        |ИЗ
                        |	РегистрСведений.ЭСФ_НастройкиОбмена_Фирмы КАК ЭСФ_НастройкиОбмена_Фирмы");
	ПолеСписка.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Фирма"));
КонецПроцедуры

Процедура ЗаполнитьСоответствиеКонтрагентов(СистемаЭДО)
	СоответствиеКонтрагентов=Новый Соответствие();
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ЭСФ_НастройкиОбмена_Контрагенты.Контрагент,
	                    |	ЭСФ_НастройкиОбмена_Контрагенты.ИД
	                    |ИЗ
	                    |	РегистрСведений.ЭСФ_НастройкиОбмена_Контрагенты КАК ЭСФ_НастройкиОбмена_Контрагенты
	                    |ГДЕ
	                    |	ЭСФ_НастройкиОбмена_Контрагенты.СистемаЭДО = &СистемаЭДО");
						
	Запрос.УстановитьПараметр("СистемаЭДО",СистемаЭДО);
	
	Рез=Запрос.Выполнить().Выгрузить();
	Для  Каждого Стр Из Рез Цикл 
		СоответствиеКонтрагентов.Вставить(СокрЛП(Стр.ИД),Стр.Контрагент);
	КонецЦикла;
КонецПроцедуры	

Функция НастройкиОбменаОрганизации(Организация)
	
	Запрос=Новый Запрос("");
	
	
	СтруктураПараметров=Новый Структура("Ключ,URLСервера");
	
	
	Возврат СтруктураПараметров;
КонецФункции	




//Процедура ИнициализироватьПодключениеКСерверуАПИ() Экспорт
////	DiadocInvoiceAPI.Initialize( КлючРазработчика,URLСервера); // так было давно...

// //DiadocInvoiceAPI.ApiClientId=КлючРазработчика;
// //DiadocInvoiceAPI.ServerUrl=URLСервера; 
// //DiadocInvoiceAPI.ProxyMode = "NoProxy";


//Конецпроцедуры 	

Функция ПолучитьПараметрыФирмыДляПодключения(Орг) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ЭСФ_НастройкиОбмена_Фирмы.ИДФирмы,
	                    |	ЭСФ_НастройкиОбмена_Фирмы.ОтпечатокКлюча,
	                    |	ЭСФ_НастройкиОбмена_Фирмы.СистемаЭДО
	                    |ИЗ
	                    |	РегистрСведений.ЭСФ_НастройкиОбмена_Фирмы КАК ЭСФ_НастройкиОбмена_Фирмы
	                    |ГДЕ
	                    |	ЭСФ_НастройкиОбмена_Фирмы.Фирма = &Фирма
	                    |	И ЭСФ_НастройкиОбмена_Фирмы.ОкончаниеДействия >= &ОкончаниеДействия");
	Запрос.УстановитьПараметр("Фирма",Орг);
	Запрос.УстановитьПараметр("ОкончаниеДействия",НачалоДня(ТекущаяДата()));
	Рез=Запрос.Выполнить().Выгрузить();					
	
	СтруктураВозврата=Новый Структура();
	Для Каждого Стр Из Рез Цикл
		Для Каждого Кол Из Рез.Колонки Цикл 
		СтруктураВозврата.Вставить(Кол.Имя,Стр[Кол.Имя]);
		КонецЦикла;
	КонецЦикла;	
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Процедура  ПроверитьСтруктуруХраненияЭД(СистемаЭДО,ИДФирмы,КОММассивКонтрагентыОбмена)
	Если  КОММассивКонтрагентыОбмена.COUNT=0 Тогда
		Возврат;
	КонецЕсли;
	
	Корень=Константы.КаталогХраненияЭлектронныхДокументов.Получить(); // Х:\гдетотам\
	
	СоздатьКаталог(Корень+СистемаЭДО);
	СоздатьКаталог(Корень+СистемаЭДО+"\"+ИДФирмы);
	
	Для Ы=0 по КОММассивКонтрагентыОбмена.COUNT-1 Цикл
		КА=КОММассивКонтрагентыОбмена.GetItem(Ы);
		КаталогКА=Корень+СистемаЭДО+"\"+ИДФирмы+"\"+КА.Id;
		СоздатьКаталог(КаталогКА);//	"ccbf42c570dd4dca87666d97fa7ba704@diadoc.ru"
		ТХТ=Новый ТекстовыйДокумент;
		ТХТ.ДобавитьСтроку(КА.Name);//	"ЗАО "ПрофитМед""
		ТХТ.ДобавитьСтроку("ИНН: "+КА.Inn);//"7719022542"
		ТХТ.ДобавитьСтроку("КПП: "+КА.Kpp);//"771501001"
		
		Попытка
			ТХТ.Записать(КаталогКА+"\Описание.txt",КодировкаТекста.ANSI);
		Исключение
		КонецПопытки;
		
		
	КонецЦикла;	

	
	
КонецПроцедуры	


Функция СтруктураКомДокумента(ВидДокумента)
	//Если нужно выдернуть поле комобъектного значения (через точку) то указываем вместо точки два подчеркивания __//
	
	
	КваЧ=Новый КвалификаторыЧисла(18,2,ДопустимыйЗнак.Любой);
	КваД_ДВ=Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	КваД_Д=Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	Если ВидДокумента="Счет-фактура" Тогда
		СтруктураВозврата=Новый Структура;
		
		
		//AmendmentRequested Булево   4
		//ConfirmationDate Дата   19
		//Corrected Булево   4
		//Counteragent COM Объект   9   Counteragent.ID - строка 42
		//Currency Число   3
		//Department Не определено   0
		//Direction Строка   7
		//DocumentId Строка   72
		//InitialDocumentIds Массив   6
		//Organization COM Объект   9
		//OrganizationId Строка   42
		//InitialDocumentIds Массив   6
		//PathURL Строка   145
		//Revised Булево   4
		//Status Строка   18
		//SubordinateDocumentIds Массив   6
		//Timestamp Дата   19
		//TimestampSeconds Число   17
		//Type Строка   7
		//documentDate Дата   19
		//documentNumber Строка   14
		//fileName Строка   152
		//isDeleted Булево   4
		//total Число   9
		//vat Число   8
		
		
		
		СтруктураВозврата.Вставить("AmendmentRequested",Новый ОписаниеТипов("Булево") );
		СтруктураВозврата.Вставить("ConfirmationDate",Новый ОписаниеТипов("Дата",КваД_ДВ) ); 
		СтруктураВозврата.Вставить("Corrected",Новый ОписаниеТипов("Булево") ); 
		СтруктураВозврата.Вставить("Counteragent"); // COMОбъект
		СтруктураВозврата.Вставить("Counteragent__ID",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(42,ДопустимаяДлина.Фиксированная))); // COMОбъект
		СтруктураВозврата.Вставить("Currency",Новый ОписаниеТипов("Число",КваЧ) ); 
		СтруктураВозврата.Вставить("Department"); // COMОбъект
		СтруктураВозврата.Вставить("Direction",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(35,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("DocumentId",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(72,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("InitialDocumentIds"); // массив
		СтруктураВозврата.Вставить("Organization"); // COMОбъект 
		СтруктураВозврата.Вставить("OrganizationId",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(42,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("InitialDocumentIds"); // массив
		СтруктураВозврата.Вставить("PathURL",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("Revised",Новый ОписаниеТипов("Булево") ); 
		СтруктураВозврата.Вставить("Status",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(50,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("SubordinateDocumentIds"); // массив 
		СтруктураВозврата.Вставить("Timestamp",Новый ОписаниеТипов("Дата",КваД_ДВ) ); 
		СтруктураВозврата.Вставить("TimestampSeconds",Новый ОписаниеТипов("Число",КваЧ) ); 
		СтруктураВозврата.Вставить("Type",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(30,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("documentDate",Новый ОписаниеТипов("Дата",КваД_ДВ) ); 
		СтруктураВозврата.Вставить("documentNumber",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(30,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("fileName",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("isDeleted",Новый ОписаниеТипов("Булево") ); 
		СтруктураВозврата.Вставить("total",Новый ОписаниеТипов("Число",КваЧ) ); 
		СтруктураВозврата.Вставить("vat",Новый ОписаниеТипов("Число",КваЧ) ); 
		
		//---------------<Список нетипизируемых полей>---------------------------// GtG // 12.12.2012 19:21:54
		МассивИменНетипизируемыхПолей=Новый Массив;
		МассивИменНетипизируемыхПолей.Добавить("Counteragent"); // COMОбъект
		МассивИменНетипизируемыхПолей.Добавить("Department"); // COMОбъект
		МассивИменНетипизируемыхПолей.Добавить("InitialDocumentIds"); // массив
		МассивИменНетипизируемыхПолей.Добавить("Organization"); // COMОбъект 
		МассивИменНетипизируемыхПолей.Добавить("InitialDocumentIds"); // массив
		МассивИменНетипизируемыхПолей.Добавить("SubordinateDocumentIds"); // массив 
		МассивИменНетипизируемыхПолей.Добавить("НетипизируемыеПоля"); // массив
			
		СтруктураВозврата.Вставить("НетипизируемыеПоля",МассивИменНетипизируемыхПолей); 
		
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;	
	
	Если ВидДокумента="Корректировочный Счет-фактура" Тогда
		СтруктураВозврата=Новый Структура;
		
		
		//AmendmentRequested Булево   4
		//ConfirmationDate Дата   19
		//Corrected Булево   4
		//Counteragent COM Объект   9   Counteragent.ID - строка 42
		//Currency Число   3
		//Department Не определено   0
		//Direction Строка   7
		//DocumentId Строка   72
		//InitialDocumentIds Массив   6  // массив ссылок на исходные документы (ИД диадока корректируемого счета-фактуры)
		//Organization COM Объект   9
		//OrganizationId Строка   42
		
		//-----отличие от СФ------------------------------------------------------->
		//OriginalDocumentDate	20.05.2013 00:00:00	Дата
		//OriginalDocumentNumber	"22055/23560-13"	Строка
		//OriginalInvoiceRevisionDate	30.12.1899 00:00:00	Дата
		//OriginalInvoiceRevisionNumber	""	Строка
		//-------------------------------------------------------------------------//
		
		//InitialDocumentIds Массив   6
		//PathURL Строка   145
		//Revised Булево   4
		//Status Строка   18
		//SubordinateDocumentIds Массив   6
		//Timestamp Дата   19
		//TimestampSeconds Число   17
		
		//-----отличие от СФ------------------------------------------------------->
		//TotalDec	16,72	Число
		//TotalInc	0	Число
		//-------------------------------------------------------------------------//
		
		//Type Строка   7
		
		//-----отличие от СФ------------------------------------------------------->
		//VatDec	1,52	Число
		//VatInc	0	Число
		//-------------------------------------------------------------------------//
 		
		//documentDate Дата   19
		//documentNumber Строка   14
		//fileName Строка   152
		//isDeleted Булево   4
		//нет в корректировочном документе: total Число   9
		//нет в корректировочном документе: vat Число   8
		
		
		
		СтруктураВозврата.Вставить("AmendmentRequested",Новый ОписаниеТипов("Булево") );
		СтруктураВозврата.Вставить("ConfirmationDate",Новый ОписаниеТипов("Дата",КваД_ДВ) ); 
		СтруктураВозврата.Вставить("Corrected",Новый ОписаниеТипов("Булево") ); 
		СтруктураВозврата.Вставить("Counteragent"); // COMОбъект
		СтруктураВозврата.Вставить("Counteragent__ID",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(42,ДопустимаяДлина.Фиксированная))); // COMОбъект
		СтруктураВозврата.Вставить("Currency",Новый ОписаниеТипов("Число",КваЧ) ); 
		СтруктураВозврата.Вставить("Department"); // COMОбъект
		СтруктураВозврата.Вставить("Direction",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(35,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("DocumentId",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(72,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("InitialDocumentIds"); // массив
		СтруктураВозврата.Вставить("Organization"); // COMОбъект 
		СтруктураВозврата.Вставить("OrganizationId",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(42,ДопустимаяДлина.Фиксированная)) ); 
		
		//-----отличие от СФ------------------------------------------------------->
		СтруктураВозврата.Вставить("OriginalDocumentDate",Новый ОписаниеТипов("Дата",КваД_ДВ) );//	20.05.2013 00:00:00	Дата
		СтруктураВозврата.Вставить("OriginalDocumentNumber",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(30,ДопустимаяДлина.Фиксированная)) );//	"22055/23560-13"	Строка
		СтруктураВозврата.Вставить("OriginalInvoiceRevisionDate",Новый ОписаниеТипов("Дата",КваД_ДВ) );	//30.12.1899 00:00:00	Дата
		СтруктураВозврата.Вставить("OriginalInvoiceRevisionNumber",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(30,ДопустимаяДлина.Фиксированная)) );//	""	Строка
		//-------------------------------------------------------------------------//
		
		СтруктураВозврата.Вставить("InitialDocumentIds"); // массив
		СтруктураВозврата.Вставить("PathURL",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("Revised",Новый ОписаниеТипов("Булево") ); 
		СтруктураВозврата.Вставить("Status",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(50,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("SubordinateDocumentIds"); // массив 
		СтруктураВозврата.Вставить("Timestamp",Новый ОписаниеТипов("Дата",КваД_ДВ) ); 
		СтруктураВозврата.Вставить("TimestampSeconds",Новый ОписаниеТипов("Число",КваЧ) ); 
		//-----отличие от СФ------------------------------------------------------->
		СтруктураВозврата.Вставить("TotalDec",Новый ОписаниеТипов("Число",КваЧ) );//	16,72	Число
		СтруктураВозврата.Вставить("TotalInc",Новый ОписаниеТипов("Число",КваЧ) );//	0	Число
		//-------------------------------------------------------------------------//
		СтруктураВозврата.Вставить("Type",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(30,ДопустимаяДлина.Фиксированная)) ); 
		//-----отличие от СФ------------------------------------------------------->
		СтруктураВозврата.Вставить("VatDec",Новый ОписаниеТипов("Число",КваЧ) );//	1,52	Число
		СтруктураВозврата.Вставить("VatInc",Новый ОписаниеТипов("Число",КваЧ) );//	0	Число
		//-------------------------------------------------------------------------//
		СтруктураВозврата.Вставить("documentDate",Новый ОписаниеТипов("Дата",КваД_ДВ) ); 
		СтруктураВозврата.Вставить("documentNumber",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(30,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("fileName",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(200,ДопустимаяДлина.Фиксированная)) ); 
		СтруктураВозврата.Вставить("isDeleted",Новый ОписаниеТипов("Булево") ); 
		//СтруктураВозврата.Вставить("total",Новый ОписаниеТипов("Число",КваЧ) ); 
		//СтруктураВозврата.Вставить("vat",Новый ОписаниеТипов("Число",КваЧ) ); 
		
		//---------------<Список нетипизируемых полей>---------------------------// GtG // 12.12.2012 19:21:54
		МассивИменНетипизируемыхПолей=Новый Массив;
		МассивИменНетипизируемыхПолей.Добавить("Counteragent"); // COMОбъект
		МассивИменНетипизируемыхПолей.Добавить("Department"); // COMОбъект
		МассивИменНетипизируемыхПолей.Добавить("InitialDocumentIds"); // массив
		МассивИменНетипизируемыхПолей.Добавить("Organization"); // COMОбъект 
		МассивИменНетипизируемыхПолей.Добавить("InitialDocumentIds"); // массив
		МассивИменНетипизируемыхПолей.Добавить("SubordinateDocumentIds"); // массив 
		МассивИменНетипизируемыхПолей.Добавить("НетипизируемыеПоля"); // массив
			
		СтруктураВозврата.Вставить("НетипизируемыеПоля",МассивИменНетипизируемыхПолей); 
		
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;	
	
	
	
КонецФункции	

 Функция ТекстЗапросаДляПерегонаТЗВоВременнуюТаблицу(СтруктураТЗСФ,ТекстДляОбращенияКоВременнойТаблице=ложь)
	            
	ТХТ="Выбрать ";
	Для Каждого КолПараметры из СтруктураТЗСФ Цикл
		Если  СтруктураТЗСФ.НетипизируемыеПоля.Найти(КолПараметры.ключ)=Неопределено Тогда
	    ТХТ=ТХТ+Символы.пс+" КомСФ."+СтрЗаменить(КолПараметры.ключ,"__","")+" как " +СтрЗаменить(КолПараметры.ключ,"__","")+","
		КонецЕсли;
	КонецЦикла;	
	ТХТ=Лев(ТХТ,СтрДлина(ТХТ)-1);
	Если ТекстДляОбращенияКоВременнойТаблице=ложь тогда
		ТХТ=ТХТ+ символы.пс+" INTO COM_SF "+Символы.пс+" ИЗ &КомСФ как КомСФ";
	Иначе
		ТХТ=ТХТ+ Символы.пс+" ИЗ COM_SF как КомСФ";
	КонецЕсли;
	
	Возврат ТХТ;
КонецФункции


Процедура ЗагрузкаДанных(Орг) Экспорт
	
	ПараметрыАР=ВернутьПараметрыАктивностиРобота();
	ПараметрыАР.Примечание=ПараметрыАР.Примечание+" "+Орг;
	Обмен.ЗафиксироватьАктивностьРобота(ПараметрыАР);
	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("ЗагрузкаДанных("+Орг+")");
	#КонецЕсли
	
	ЗаполнитьСоответствиеКонтрагентов(Перечисления.СистемыЭДО.Диадок);// а вдруг добавился новый
	
	
	ПараметрыПодключенияОрг=ПолучитьПараметрыФирмыДляПодключения(Орг); 
	
	Если ПараметрыПодключенияОрг.количество()=0 Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Сообщить("По "+Орг+" не настроен документооборот, нет данных о сертификате подписи.");
		#КонецЕсли
		Возврат;
	КонецЕсли;	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние("Подключаемся к серверу...");
	#КонецЕсли
	DiadocConnection=Неопределено;
	Попытка
		DiadocConnection = DiadocInvoiceAPIObject.CreateConnectionByCertificate(ВРЕГ(СтрЗаменить(ПараметрыПодключенияОрг.ОтпечатокКлюча," ",""))); // переконнекчиваемся к серверу диадока
		ПодключениеУстановлено=Истина;
	Исключение
		ПодключениеУстановлено=Ложь;

		
			ТекстПредупреждениия="Не удалось подключиться к серверу диадока!"+ символы.ПС+
			("---------------------------------------------------------------------------")+ символы.ПС+
			"ЗагрузкаДанных("+Орг+")"+Символы.ПС+
			Описаниеошибки();
		#Если ТолстыйКлиентОбычноеПриложение Тогда	
			
		#Иначе
			РегламентноеЗадание=Справочники.РегламентныеЗадания.НайтиПоНаименованию("Загрузка Электронных Счетов-фактур");
			
			МодульРегламентныхЗаданий.Запись_В_ЛогЗапускаРегламентныхЗаданий(РегламентноеЗадание,ТекущаяДата(),Перечисления.СобытияРегламентногоЗадания.Завершение,"ОШИБКА:"+ОписаниеОшибки());
		#КонецЕсли

		ЛогОписание=ТекстПредупреждениия;
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(Задание, Перечисления.ТипыЗаписейЛога.Ошибка,ЛогОписание);
		
		
		
		Возврат;
	КонецПопытки;
	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда		
		Состояние("Получаем организацию по ИД "+ПараметрыПодключенияОрг.ИДФирмы+"...");
	#КонецЕсли

	Попытка
		Organization=DiadocConnection.GetOrganizationById(ПараметрыПодключенияОрг.ИДФирмы); //COM-объект
	Исключение
		ТекстОшибки="Не удалось получить организацию с сервера Диадока по ИД="+ПараметрыПодключенияОрг.ИДФирмы;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Сообщить(ТекстОшибки);
			Сообщить(ОписаниеОшибки());
		#Иначе
			РегламентноеЗадание=Справочники.РегламентныеЗадания.НайтиПоНаименованию("Загрузка Электронных Счетов-фактур");
			МодульРегламентныхЗаданий.Запись_В_ЛогЗапускаРегламентныхЗаданий(РегламентноеЗадание,ТекущаяДата(),Перечисления.СобытияРегламентногоЗадания.Завершение,"ОШИБКА:"+ТекстОшибки+символы.ПС+ОписаниеОшибки());
		#КонецЕсли
		
		ЛогОписание= ТекстОшибки;
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(Задание, Перечисления.ТипыЗаписейЛога.Ошибка,ЛогОписание);

		

		Возврат;
	КонецПопытки;
	КонтрагентыОбмена=Organization.GetCounteragentListByStatus(); //Коллекция Collection объектов Counteragent.
	                                                            
	ПроверитьСтруктуруХраненияЭД(Перечисления.СистемыЭДО.Диадок,ПараметрыПодключенияОрг.ИДФирмы,КонтрагентыОбмена);// проверит и создаст дерево папок
	
	// Корень хранилища
	//	системаЭДО
	//		Организация (ИДФирмы в системе ЭДО)
	//			Контрагент (ИД контрагента в системе ЭДО)   <--- проверка до этого уровня
	//				Дата (сутки)
	//					Вид документа
	//						Файлы электронных документов в zip-архивах (файлы документов и подписей в одном архиве по одному электронному документу)
	
	
	КоличествоКонтрагентовОбмена=КонтрагентыОбмена.COUNT;

	//---------------<Получим массив документов>---------------------------// GtG // 06.12.2012 19:36:24
	//Organization.GetDocuments(<BeginDate>, <EndDate>, <FilterCategory>, <//CounteragentId>, <//DepartmentId>, <//excludeSubdepartments>)
	//Синтаксис
	//GetDocuments(<BeginDate>, <EndDate>, <FilterCategory>, <CounteragentId>, <DepartmentId>, <excludeSubdepartments>)
	//
	//Параметры
	//<BeginDate> (дата и время, обязательный) Начало периода. 
	//<EndDate> (дата и время, обязательный) Окончание периода. 
	//<FilterCategory> (строка, обязательный) Категория типов документов. 
	//<CounteragentId> (строка, необязательный) Идентификатор контрагента. 
	//<DepartmentId> (строка, необязательный) Идентификатор подразделения организации. 
	//<excludeSubdepartments> (булево, необязательный) признак того, что в выборку не нужно включать документы по подразделениям, которые являются дочерними по отношению к <DepartmentId>
	//
	//---------------< <FilterCategory> >---------------------------// GtG // 10.12.2012 11:47:17
	//<FilterCategory> – категория документов, имеет вид КАТЕГОРИЯ.НАПРАВЛЕНИЕ_СТАТУС.
	//Для документов вида: счет-фактура, корректировочный счет-фактура, исправление счета-фактуры, исправление корректировочного счета фактуры, КАТЕГОРИЯ может принимать следующие значения:
	//
	//Invoice – счет-фактура
	//InvoiceRevision – исправление счета-фактуры
	//InvoiceCorrection – корректировочный счет-фактура
	//InvoiceCorrectionRevision – исправление корректировочного счета-фактуры
	//AnyInvoiceDocumentType – любой из выше перечисленных типов
	//НАПРАВЛЕНИЕ_СТАТУС:
	//
	//Outbound –исходящий
	//OutboundNotFinished – исходящий, документооборот не завершен
	//OutboundFinished - исходящий, документооборот завершен
	//Inbound –входящий
	//InboundNotFinished – входящий, документооборот не завершен
	//InboundFinished - входящий, документооборот завершен

	ЗаписьВЛогЗагрузок=ЛогЗагрузок.Добавить();
	ЗаписьВЛогЗагрузок.Дата=ТекущаяДата();
	
	
	Фильтр_СчетФактура_Вх="Invoice.Inbound"; // первичная входящая счет-фактура, без отбора по статусам
	Фильтр_СчетФактура_Вх_Незавершено="Invoice.InboundNotFinished"; // счета фактуры с незаконченным документооборотом
	Фильтр_СчетФактура_Вх_Завершено="Invoice.InboundFinished"; // первичная входящая счетфактура, документооборот завершен, все подписи и подтверждения получены
	
	Фильтр_СчетФактура_Вх_Корректировочная_Незавершено="InvoiceCorrection.InboundNotFinished";// корректировочная СФ , документооборот не завершен
	Фильтр_СчетФактура_Вх_Корректировочная_Завершено="InvoiceCorrection.InboundFinished";// корректировочная СФ, документооборот завершен

	//---------------<Новые счета фактуры>---------------------------// GtG // 11.12.2012 12:28:35 
	
	ПолучалкаДокументов=Organization.GetDocumentsTask(); // Объект типа DocumentsTask
	ПолучалкаДокументов.FromDocumentDate=НачПериода;
	ПолучалкаДокументов.ToDocumentDate=КонПериода;
	ПолучалкаДокументов.Category=Фильтр_СчетФактура_Вх_Незавершено;
	
	
	МассивСФ=ПолучалкаДокументов.GetDocuments();// Коллекция Collection объектов, производных от Document
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("Появилось новых счетов-фактур: "+МассивСФ.COUNT);
	#КонецЕсли

	ПринятьМассивСчетовФактур (Орг,ПараметрыПодключенияОрг,МассивСФ,Organization,Перечисления.ЭСФ_СтатусДокумента.Вх_ДокументооборотНеЗавершен,ЗаписьВЛогЗагрузок.Новых);
	
	//---------------<попереподписанные счета-фактуры>---------------------------// GtG // 11.12.2012 12:28:35 
	ПолучалкаДокументов=Organization.GetDocumentsTask(); // Объект типа DocumentsTask
	ПолучалкаДокументов.FromDocumentDate=НачПериода;
	ПолучалкаДокументов.ToDocumentDate=КонПериода;
	ПолучалкаДокументов.Category= Фильтр_СчетФактура_Вх_Завершено;

	МассивСФ=ПолучалкаДокументов.GetDocuments();// Коллекция Collection объектов, производных от Document
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("Появилось переподписанных счетов-фактур: "+МассивСФ.COUNT);
	#КонецЕсли

	
	ПринятьМассивСчетовФактур (Орг,ПараметрыПодключенияОрг,МассивСФ,Organization,Перечисления.ЭСФ_СтатусДокумента.Вх_ДокументооборотЗавершен,ЗаписьВЛогЗагрузок.Переподписанных);
	
	
	
	//---------------<Корректировочные Счета-Фактуры>---------------------------// GtG // 23.05.2013 16:33:57
	//---------------<Новые Корректировочные счета фактуры>---------------------------// GtG // 11.12.2012 12:28:35
	ПолучалкаДокументов=Organization.GetDocumentsTask(); // Объект типа DocumentsTask
	ПолучалкаДокументов.FromDocumentDate=НачПериода;
	ПолучалкаДокументов.ToDocumentDate=КонПериода;
	ПолучалкаДокументов.Category=Фильтр_СчетФактура_Вх_Корректировочная_Незавершено;
	
	МассивСФ=ПолучалкаДокументов.GetDocuments();// Коллекция Collection объектов, производных от Document
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("Появилось новых корректировочных счетов-фактур: "+МассивСФ.COUNT);
	#КонецЕсли

	ПринятьМассивСчетовФактур (Орг,ПараметрыПодключенияОрг,МассивСФ,Organization,Перечисления.ЭСФ_СтатусДокумента.Вх_ДокументооборотНеЗавершен,ЗаписьВЛогЗагрузок.Корректировочных,Истина);
	
	//---------------<попереподписанные Корректировочные счета-фактуры>---------------------------// GtG // 11.12.2012 12:28:35 
	ПолучалкаДокументов=Organization.GetDocumentsTask(); // Объект типа DocumentsTask
	ПолучалкаДокументов.FromDocumentDate=НачПериода;
	ПолучалкаДокументов.ToDocumentDate=КонПериода;
	ПолучалкаДокументов.Category=Фильтр_СчетФактура_Вх_Корректировочная_Завершено;
	
	МассивСФ=ПолучалкаДокументов.GetDocuments();// Коллекция Collection объектов, производных от Document
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("Появилось переподписанных корректировочных счетов-фактур: "+МассивСФ.COUNT);
	#КонецЕсли

	
	ПринятьМассивСчетовФактур (Орг,ПараметрыПодключенияОрг,МассивСФ,Organization,Перечисления.ЭСФ_СтатусДокумента.Вх_ДокументооборотЗавершен,ЗаписьВЛогЗагрузок.КорректировочныхПереподписанных,Истина);
	
	
	
	
	
	
	//---------------<Заткнуть пустое поступление товаров>---------------------------// GtG // 20.12.2012 16:08:14
	// На случай, когда счет фактура появилась раньше прихода товаров.  месяц туда, месяц сюда

	ЗаткнутьПустоеПоступлениеТоваров(Орг,НачПериода-30*24*60*60,КонПериода+30*24*60*60);
	
	
	Автоподписант=Автоподпись.Найти(Орг,"Организация"); //тч
	
	Если Автоподписант=Неопределено ТОгда
		
		СтрокаАвтоподписи=Автоподпись.Добавить();
		СтрокаАвтоподписи.Запуск=ТекущаяДата();
		
		СтрокаАвтоподписи.Организация=Орг;
		
		СТАП=ТабАвтоподпись.Добавить();  //тз
		СТАП.НомерСтроки=СтрокаАвтоподписи.НомерСтроки;
		СТАП.Организация=СтрокаАвтоподписи.Организация;
		
		//Если ПринимаемыйСтатус=Перечисления.ЭСФ_СтатусДокумента.Вх_ДокументооборотНеЗавершен ТОгда
		ПроцессАвтоматическогоФормированияРегламентныхДокументов=Organization.GetReceiptGenerationProcess();
		ПроцессАвтоматическогоФормированияРегламентныхДокументов.Start(); //запускает процесс автоматического формирования и подписания документов
		// работает якобы в отдельном системном процессе.(??? так заявлено)
		//КонецЕсли;
		СТАП.ПроцессАвтоподписи=ПроцессАвтоматическогоФормированияРегламентныхДокументов; // Чтобы отдельный процесс не умер нужно его куда-то замариновать.
	Иначе
		// Взбодрим процесс генерации подтверждений
		Автоподписант.Запуск=ТекущаяДата();
		
		РоботПодписания=ТабАвтоподпись.Найти(Орг,"Организация");
		Если РоботПодписания<> Неопределено Тогда
			РоботПодписания.ПроцессАвтоподписи.Start();
		КонецЕсли;	
	КонецЕсли;
	
	
	
	
	
	
	
	
	
КонецПроцедуры

Процедура ПринятьМассивСчетовФактур (Орг,ПараметрыПодключенияОрг,МассивСФ,Organization,ПринимаемыйСтатус,СчетчикСозданныхДокументов,признакКорректировки=ЛОжь)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("Принимаем счета-фактуры: "+МассивСФ.COUNT);
	#КонецЕсли

	СчетчикСозданныхДокументов=0;
	
	ДокументовДляОбработки=МассивСФ.COUNT;
	
	ТЗСчетовФактур=Новый ТаблицаЗначений;
	Если признакКорректировки=Ложь ТОгда
		СтруктураТЗСФ=СтруктураКомДокумента("Счет-фактура");
	Иначе
		СтруктураТЗСФ=СтруктураКомДокумента("Корректировочный Счет-фактура");
	КонецЕсли;
	
	Для Каждого КолПараметры Из СтруктураТЗСФ Цикл
		Если КолПараметры.Ключ="НетипизируемыеПоля" Тогда
			Продолжить;
		КонецЕсли;
		
		ТЗСчетовФактур.Колонки.Добавить(СтрЗаменить(КолПараметры.Ключ,"__",""),КолПараметры.Значение);
	КонецЦикла;	
	
	Для Ы=0 по МассивСФ.Count-1 Цикл //  Каждого ЭСФ из МассивСФ Цикл
		ЭСФ=МассивСФ.GetItem(Ы);
		
		//Сообщить("  "+Ы+"    "+ЭСФ);
		
		СФ=ТЗСчетовФактур.Добавить();
		
		Для Каждого КолПараметры Из СтруктураТЗСФ Цикл
			Если КолПараметры.Ключ="НетипизируемыеПоля" Тогда
				Продолжить;
			КонецЕсли;
			СФ[СтрЗаменить(КолПараметры.Ключ,"__","")]=Вычислить("ЭСФ."+СтрЗаменить(КолПараметры.Ключ,"__","."));
		КонецЦикла;
		
		
	КонецЦикла;
	
	//---------------<Обрабатываем сф>---------------------------// GtG // 11.12.2012 16:27:55
	
	Запрос=Новый Запрос(ТекстЗапросаДляПерегонаТЗВоВременнуюТаблицу(СтруктураТЗСФ));
	МВТ=Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц=МВТ;
	
	Запрос.УстановитьПараметр("КомСФ",ТЗСчетовФактур);
	Запрос.УстановитьПараметр("ПустаяСсылкаЭСФ",Документы.ЭлектронныйСчетФактура.ПустаяСсылка());
	
	
	Запрос.Выполнить(); // загоняем данные во временную таблицу в базу
	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТЗ_ССФ.ТекстовыйСтатус,
	             |	ТЗ_ССФ.ЭСФ_СтатусДокумента
	             |ПОМЕСТИТЬ СтатусыЭСФ
	             |ИЗ
	             |	&ТЗ_ССФ КАК ТЗ_ССФ";
	
	Запрос.УстановитьПараметр("ТЗ_ССФ",ТЗСтатусовСчетовФактур());
	Запрос.УстановитьПараметр("признакКорректировки",признакКорректировки);
	Запрос.УстановитьПараметр("Фирма",Орг);
	Запрос.УстановитьПараметр("СистемаЭДО",ПараметрыПодключенияОрг.СистемаЭДО);
	
	Запрос.Выполнить(); // загоняем данные ТЗ_ССФ во временную таблицу

	
	
	
	Запрос.Текст=ТекстЗапросаДляПерегонаТЗВоВременнуюТаблицу(СтруктураТЗСФ,Истина)+Символы.ПС+";"+Символы.ПС;
	Запрос.Текст=Запрос.Текст+"ВЫБРАТЬ
	                          |	МИНИМУМ(КомСФ.Timestamp) КАК Timestamp,
	                          |	КомСФ.documentDate КАК documentDate,
	                          |	КомСФ.documentNumber КАК documentNumber,
	                          |	КомСФ.CounteragentID
	                          |ПОМЕСТИТЬ ПервыеВерсииСФ
	                          |ИЗ
	                          |	COM_SF КАК КомСФ
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	КомСФ.documentDate,
	                          |	КомСФ.documentNumber,
	                          |	КомСФ.CounteragentID";

	
	ЗАпрос.Выполнить();
	 
	  
	Запрос.Текст="ВЫБРАТЬ
	             |	КомСФ.AmendmentRequested КАК AmendmentRequested,
	             |	КомСФ.ConfirmationDate КАК ConfirmationDate,
	             |	КомСФ.Corrected КАК Corrected,
	             |	КомСФ.Currency КАК Currency,
	             |	КомСФ.Direction КАК Direction,
	             |	КомСФ.DocumentId КАК DocumentId,
	             |	КомСФ.OrganizationId КАК OrganizationId,
	             |	КомСФ.PathURL КАК PathURL,
	             |	КомСФ.Revised КАК Revised,
	             |	КомСФ.Status КАК Status,
	             |	КомСФ.Timestamp КАК Timestamp,
	             |	КомСФ.TimestampSeconds КАК TimestampSeconds,
	             |	КомСФ.Type КАК Type,
	             |	КомСФ.documentDate КАК documentDate,
	             |	КомСФ.documentNumber КАК documentNumber,
	             |	КомСФ.fileName КАК fileName,
	             |	КомСФ.isDeleted КАК isDeleted,"+
				 ?(признакКорректировки=Ложь,"
	             		|	КомСФ.total КАК total,
	             		|	КомСФ.vat КАК vat,"
				 ,
				 "
				 		|КомСФ.TotalDec как TotalDec,
				 		|КомСФ.TotalInc как TotalInc,
				 		|КомСФ.VatDec как VatDec,
				 		|КомСФ.VatInc как VatInc,
						|КомСФ.OriginalDocumentDate,
						|КомСФ.OriginalDocumentNumber,
						|КомСФ.OriginalInvoiceRevisionDate,
						|КомСФ.OriginalInvoiceRevisionNumber,
				 |")+"
	             |	ВЫБОР
	             |		КОГДА ПервыеВерсииСФ.Timestamp ЕСТЬ NULL 
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК ОТКАЗАТЬ,
	             |	КомСФ.CounteragentID,
	             |	ЕСТЬNULL(ЭлектронныйСчетФактура.Ссылка, &ПустаяСсылкаЭСФ) КАК РанееЗагруженный,
	             |	ЭлектронныйСчетФактура.СтатусДокумента,
	             |	СтатусыЭСФ.ЭСФ_СтатусДокумента КАК КОМ_СтатусДокумента
	             |ПОМЕСТИТЬ ТМП
	             |ИЗ
	             |	COM_SF КАК КомСФ
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПервыеВерсииСФ КАК ПервыеВерсииСФ
	             |		ПО КомСФ.Timestamp = ПервыеВерсииСФ.Timestamp
	             |			И КомСФ.documentDate = ПервыеВерсииСФ.documentDate
	             |			И КомСФ.documentNumber = ПервыеВерсииСФ.documentNumber
	             |			И КомСФ.CounteragentID = ПервыеВерсииСФ.CounteragentID
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактура КАК ЭлектронныйСчетФактура
	             |		ПО КомСФ.DocumentId = ЭлектронныйСчетФактура.ИднтификаторВСистемеЭДО
	             |			И КомСФ.documentDate = ЭлектронныйСчетФактура.ВхДатаСФ
	             |			И КомСФ.documentNumber = ЭлектронныйСчетФактура.ВхНомерСФ
				 |          И ЭлектронныйСчетФактура.ЭтоКорректировочныйСФ = &признакКорректировки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыЭСФ КАК СтатусыЭСФ
	             |		ПО (КомСФ.Status ПОДОБНО СтатусыЭСФ.ТекстовыйСтатус + ""%"")
	             |
	             |	
	             |;"+ ?(признакКорректировки=Истина,"
				 |
				 |ВЫБРАТЬ
				 |		ЭлектронныйСчетФактура.ДокументОснование,
				 |		ЭлектронныйСчетФактура.ВхНомерСФ,
				 |		ЭлектронныйСчетФактура.ВхДатаСФ,
				 |		ЭСФ_НастройкиОбмена_Контрагенты.ИД
				 |Into ОснованияИсходныхСФ
				 |	ИЗ
				 |		Документ.ЭлектронныйСчетФактура КАК ЭлектронныйСчетФактура
				 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭСФ_НастройкиОбмена_Контрагенты КАК ЭСФ_НастройкиОбмена_Контрагенты
				 |			ПО (ЭлектронныйСчетФактура.Фирма = &Фирма)
				 |				И (ЭлектронныйСчетФактура.Поставщик = ЭСФ_НастройкиОбмена_Контрагенты.Контрагент)
				 |				И (ЭСФ_НастройкиОбмена_Контрагенты.СистемаЭДО = &СистемаЭДО)
				 |          ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТМП 
				 |          ПО ТМП.CounteragentID=ЭСФ_НастройкиОбмена_Контрагенты.ИД
				 |             и  (ЭлектронныйСчетФактура.ВхНомерСФ=ТМП.OriginalDocumentNumber)
				 |             и  (ЭлектронныйСчетФактура.ВхДатаСФ= ТМП.OriginalDocumentDate)
				 |
				 |  
				 |	ГДЕ
				 |		ЭлектронныйСчетФактура.Фирма = &Фирма
                 |
				 |;","")+"
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТМП.AmendmentRequested,
	             |	ТМП.ConfirmationDate,
	             |	ТМП.Corrected,
	             |	ТМП.Currency,
	             |	ТМП.Direction,
	             |	ТМП.DocumentId,
	             |	ТМП.OrganizationId,
	             |	ТМП.PathURL,
	             |	ТМП.Revised,
	             |	ТМП.Status,
	             |	ТМП.Timestamp,
	             |	ТМП.TimestampSeconds,
	             |	ТМП.Type,
	             |	ТМП.documentDate,
	             |	ТМП.documentNumber,
	             |	ТМП.fileName,
	             |	ТМП.isDeleted,"+
				 ?(признакКорректировки=Ложь,"
	             		|	ТМП.total КАК total,
	             		|	ТМП.vat КАК vat,"
				 ,
				 "
				 		|ТМП.TotalDec как TotalDec,
				 		|ТМП.TotalInc как TotalInc,
				 		|ТМП.VatDec как VatDec,
				 		|ТМП.VatInc как VatInc,
						|ТМП.OriginalDocumentDate,
						|ТМП.OriginalDocumentNumber,
						|ТМП.OriginalInvoiceRevisionDate,
						|ТМП.OriginalInvoiceRevisionNumber,
				 |")+"
	             |	ТМП.ОТКАЗАТЬ,
	             |	ТМП.CounteragentID,
	             |	ТМП.РанееЗагруженный,
	             |	ТМП.СтатусДокумента,
	             |	ТМП.КОМ_СтатусДокумента
				 |"+?(признакКорректировки=ЛОжь,"","
				 | ,ОснованияИсходныхСФ.ДокументОснование
				 | ")+"
				 |
	             |ИЗ
	             |	ТМП КАК ТМП
				 |"+?(признакКорректировки=ЛОжь,"","
				 | Left join ОснованияИсходныхСФ as ОснованияИсходныхСФ
				 | on  ОснованияИсходныхСФ.ИД=ТМП.CounteragentID 
				 | and ОснованияИсходныхСФ.ВхНомерСФ  = ТМП.OriginalDocumentNumber
				 | and ОснованияИсходныхСФ.ВхДатаСФ  = ТМП.OriginalDocumentDate
				 | ")+"
				 |
				 |
	             |ГДЕ
	             |	(ТМП.СтатусДокумента ЕСТЬ NULL 
	             |			ИЛИ ТМП.СтатусДокумента <> ТМП.КОМ_СтатусДокумента)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ СтатусыЭСФ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ПервыеВерсииСФ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |УНИЧТОЖИТЬ ТМП";
	  
	Рез=Запрос.Выполнить().Выгрузить();
	
	
	Х=0;
	Для Каждого СФ Из Рез Цикл
		Х=Х+1;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние("Загружаем счет-фактуру:("+Х+")");
		#КонецЕсли

		
		Если СФ.ОТКАЗАТЬ=Истина ТОгда
			ОтказатьВПринятииСФ(СФ,"Дублирующийся документ! Отказано в подписании.");
		Иначе
			ПринятьСФ(Орг,ПараметрыПодключенияОрг.ИДФирмы,СФ,Organization,признакКорректировки);
			
			СчетчикСозданныхДокументов=СчетчикСозданныхДокументов+1;
			
		КонецЕсли;
		
	КонецЦикла;

	//Если ПринимаемыйСтатус=Перечисления.ЭСФ_СтатусДокумента.Вх_ДокументооборотНеЗавершен ТОгда
	//	ПроцессАвтоматическогоФормированияРегламентныхДокументов=Organization.GetReceiptGenerationProcess();
	//	ПроцессАвтоматическогоФормированияРегламентныхДокументов.Start(); //запускает процесс автоматического формирования и подписания документов
	//	// работает якобы в отдельном системном процессе.(??? так заявлено)
	//КонецЕсли;
	МВТ.Закрыть();
КонецПроцедуры	

Процедура  ЗаткнутьПустоеПоступлениеТоваров(Орг,НачПер,КонПер)
	
	Запрос=Новый Запрос( "	ВЫБРАТЬ
	|		ЭлектронныйСчетФактура.Ссылка,
	|		ЭлектронныйСчетФактура.ВхДатаСФ,
	|		ЭлектронныйСчетФактура.ВхНомерСФ,
	|		ЭлектронныйСчетФактура.Фирма,
	|		ЭлектронныйСчетФактура.Поставщик
	|	ПОМЕСТИТЬ ЭСФБезПриходов
	|	ИЗ
	|		Документ.ЭлектронныйСчетФактура КАК ЭлектронныйСчетФактура
	|	ГДЕ
	|		ЭлектронныйСчетФактура.Фирма = &Орг
	|		И ЭлектронныйСчетФактура.ВхДатаСФ МЕЖДУ &НачПер И &КонПер
	|		И ЭлектронныйСчетФактура.ДокументОснование.Ссылка ЕСТЬ NULL 
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|		ЭСФБезПриходов.Ссылка КАК ЭСФ,
	|		ПоступлениеТовара.Ссылка КАК ПоступлениеТовара
	|	ИЗ
	|		ЭСФБезПриходов КАК ЭСФБезПриходов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТовара КАК ПоступлениеТовара
	|			ПО ЭСФБезПриходов.Фирма = ПоступлениеТовара.Фирма
	|				И ЭСФБезПриходов.Поставщик = ПоступлениеТовара.Поставщик
	|				И ЭСФБезПриходов.ВхДатаСФ = ПоступлениеТовара.ВхДатаСФ
	|				И ЭСФБезПриходов.ВхНомерСФ = ПоступлениеТовара.ВхНомерСФ
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	УНИЧТОЖИТЬ ЭСФБезПриходов
	|"); // Сгенерировано в GtG's Консоль запросов. 20.12.2012 16:49:50
	
	Запрос.УстановитьПараметр("Орг",Орг);
	Запрос.УстановитьПараметр("НачПер",НачПер);
	Запрос.УстановитьПараметр("КонПер",КонПер);
	
	Рез=Запрос.Выполнить().Выгрузить();
	
	ДЛя Каждого Стр из Рез Цикл
		 ЭСФ=Стр.ЭСФ.ПолучитьОбъект();
		 ЭСФ.ДокументОснование=Стр.ПоступлениеТовара;
		 ЭСФ.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;	
КонецПроцедуры


Процедура ОтказатьВПринятииСФ(СФ,ТекстОтказа)
	    // А вот отказать в принятии счета-фактуры невозможно.
Конецпроцедуры



Функция СформироватьАрхивныйПакет(Орг,ОргИД,СФ,КомOrganization)
	// Выгружает файлы из диадока и упаковывает их в один архив, складывает в папку архива и возвращает полный путь к получившемуся файлу
	
	ИмяАрхива=""+КаталогРаспаковки+"\"+СФ.DocumentId+".ZIP";
	КомментарийЗипа=""+СоответствиеКонтрагентов.Получить(СФ.OrganizationId)+" №"+СФ.documentNumber+" от "+СФ.documentDate;
	
	//---------------<Чистим каталог распаковки>---------------------------// GtG // 17.12.2012 17:54:50
	УдалитьФайлы(КаталогРаспаковки,"*.*");
	
	//---------------<Выгружаем файлы документа в каталог распаковки>---------------------------// GtG // 17.12.2012 17:55:39
	КомДокумент=КомOrganization.GetDocumentById(СФ.DocumentId); 
    КомДокумент.SaveAllContent(КаталогРаспаковки); 
	
	//---------------<Зипуем выгруженные данные>---------------------------// GtG // 17.12.2012 17:57:10
	МассивФайлов=НайтиФайлы(КаталогРаспаковки,"*.*");
	
	Зипь=Новый ЗаписьZipФайла();
	Зипь.Открыть(ИмяАрхива,,КомментарийЗипа,МетодСжатияZIP.Сжатие,УровеньСжатияZIP.Максимальный,);
	Для Каждого Файл Из МассивФайлов Цикл
		Зипь.Добавить(Файл.ПолноеИмя,РежимСохраненияПутейZIP.НеСохранятьПути,РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
		// Добавлен в архив файл Файл.ПолноеИмя
	КонецЦикла;	
	Зипь.Записать();
	
	//Записан архив ИмяАрхива
	
	ДатаДокумента=Формат(СФ.documentDate,"ДФ=yyyy-MM-dd");
	
	КХЭД=Константы.КаталогХраненияЭлектронныхДокументов.Получить();
	КАИД=СокрЛП(СФ.CounteragentID);
	
	ПапкаАрхива=СокрЛП(КХЭД)+Перечисления.СистемыЭДО.Диадок+"\"+СокрЛП(ОргИД)+"\"+СокрЛП(КАИД)+"\SF\"+ДатаДокумента+"\";
	
	СоздатьКаталог(ПапкаАрхива);
	
	ИмяКонечногоАрхива=СтрЗаменить(ИмяАрхива,""+КаталогРаспаковки+"\",ПапкаАрхива);
	
	
	ПереместитьФайл(ИмяАрхива,ИмяКонечногоАрхива);
	
	Возврат ИмяКонечногоАрхива;
	
КонецФункции	




Процедура ПринятьСФ(Орг,ОргИД,СФ,Organization,признакКорректировки=Ложь)
	
	Поставщик=СоответствиеКонтрагентов.Получить(СокрЛП(СФ.CounteragentID));
	ПоступлениеТоваров=НайтиПоступлениеТоваров(Орг,Поставщик,СФ.documentDate,СФ.documentNumber);
	
	ПутьКФайлуАрхива="-файлы хранятся на сервере провайдера-";//СформироватьАрхивныйПакет(Орг,ОргИД,СФ,Organization);
	
	Если СФ.РанееЗагруженный.Пустая()=Истина Тогда // новый
		Док=Документы.ЭлектронныйСчетФактура.СоздатьДокумент(); 
		Док.Дата=ТекущаяДата(); // создаем текущей датой когда грузим
		Док.Фирма=Орг;
		Док.Поставщик=Поставщик;
		Док.ВхДатаСФ =СФ.documentDate      ;
		Док.ВхНомерСФ= СФ.documentNumber   ;
		Док.ДатаРегистрации = ТекущаяДата(); 
		Док.ИднтификаторВСистемеЭДО = СФ.DocumentId;  
		Док.ЭтоКорректировочныйСФ   = признакКорректировки ;
	    
        Док.ПутьКФайлуАрхива  = ПутьКФайлуАрхива;
		
	Иначе
		Док=СФ.РанееЗагруженный.ПолучитьОбъект();
	КонецЕсли;
	
	
	
	
	
	Док.ДокументОснование =ПоступлениеТоваров;  // при первой загрузке может не быть
	Док.СтатусДокумента   =СоответствиеСтатусыСФ.Получить(СокрЛП(СФ.Status)); // может измениться
	
	Если признакКорректировки=Ложь ТОгда
		Док.ВхДатаСФИсх= "";
	    Док.ВхНомерСФИсх= "";
		
		Док.Сумма=СФ.Total;
		Док.СуммаНДС=СФ.Vat;
	Иначе
		Док.ДокументОснование =СФ.ДокументОснование;
		Док.ВхДатаСФИсх  = СФ.OriginalDocumentDate;
		Док.ВхНомерСФИсх = СФ.OriginalDocumentNumber;
		
		Док.Сумма=СФ.TotalInc-СФ.TotalDec; // предположительно одно из значений ноль.
		Док.СуммаНДС=СФ.VatInc-СФ.VatDec;
		
	КонецЕсли;

		
	Док.Записать();
	
	
	
	
Конецпроцедуры


Функция TestConnection() Экспорт
	
	Попытка
		DiadocInvoiceAPI.TestConnection();
	Исключение
		ТекстОшибки=ОписаниеОшибки()+ символы.ПС+ "TestConnection()";
    	ЛогОписание= ТекстОшибки;
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(Задание, Перечисления.ТипыЗаписейЛога.Ошибка,ЛогОписание);


		
		
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции	

Процедура Заполнить_СоответствиеСтатусыСФ()
	СоответствиеСтатусыСФ=Новый Соответствие();
	
	ПЭСДок=Перечисления.ЭСФ_СтатусДокумента;
	
	СоответствиеСтатусыСФ.Вставить("OutboundWaitingForInvoiceReceipt",ПЭСДок.Исх_ОжидаетсяИзвещениеОПолучении );
	СоответствиеСтатусыСФ.Вставить("OutboundNotFinished",ПЭСДок.Исх_ИзвещениеЕсть_НЕЗавершен);
	СоответствиеСтатусыСФ.Вставить("OutboundFinished",ПЭСДок.Исх_Завершен);
	СоответствиеСтатусыСФ.Вставить("InboundNotFinished",ПЭСДок.Вх_ДокументооборотНеЗавершен);
	СоответствиеСтатусыСФ.Вставить("InboundFinished",   ПЭСДок.Вх_ДокументооборотЗавершен);
	
	
КонецПроцедуры	


Функция НайтиПоступлениеТоваров(Орг,Поставщик,СФdocumentDate,СФdocumentNumber)
	ЗапросПоискаПоступленияТОваров.Параметры.Очистить();
	ЗапросПоискаПоступленияТОваров.УстановитьПараметр("Фирма",Орг  );
	ЗапросПоискаПоступленияТОваров.УстановитьПараметр("Поставщик",Поставщик   );
	ЗапросПоискаПоступленияТОваров.УстановитьПараметр("ВхДатаСФ",СФdocumentDate    );
	ЗапросПоискаПоступленияТОваров.УстановитьПараметр("ВхНомерСФ",СФdocumentNumber   );
	
	Рез=ЗапросПоискаПоступленияТОваров.Выполнить().Выгрузить();
	
	Если Рез.Количество()=0 тогда
		возврат Неопределено;
	Иначе
		возврат Рез.Получить(0).Ссылка;
	КонецЕсли;	
КонецФункции	


Функция ТЗСтатусовСчетовФактур()
	// Возвращает Типизированную ТЗ Для Загона её во временную таблицу запроса  колонки ТекстовыйСтатус и  ЭСФ_СтатусДокумента
	// соответствие текстовых статусов счетов фактур и значений перечисления
	ПЭСДок=Перечисления.ЭСФ_СтатусДокумента;
	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТекстовыйСтатус",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(32,ДопустимаяДлина.Фиксированная)));
	ТЗ.Колонки.Добавить("ЭСФ_СтатусДокумента",Новый ОписаниеТипов("ПеречислениеСсылка.ЭСФ_СтатусДокумента"));
	
	Стр=ТЗ.Добавить(); 
	Стр.ТекстовыйСтатус="OutboundWaitingForInvoiceReceipt";	
	Стр.ЭСФ_СтатусДокумента=ПЭСДок.Исх_ОжидаетсяИзвещениеОПолучении;
	
	Стр=ТЗ.Добавить(); 
	Стр.ТекстовыйСтатус="OutboundNotFinished";   			
	Стр.ЭСФ_СтатусДокумента=ПЭСДок.Исх_ИзвещениеЕсть_НЕЗавершен;
	
	Стр=ТЗ.Добавить(); 
	Стр.ТекстовыйСтатус="OutboundFinished";   				
	Стр.ЭСФ_СтатусДокумента=ПЭСДок.Исх_Завершен;
	
	Стр=ТЗ.Добавить(); 
	Стр.ТекстовыйСтатус="InboundNotFinished";   				
	Стр.ЭСФ_СтатусДокумента=ПЭСДок.Вх_ДокументооборотНеЗавершен;
	
	Стр=ТЗ.Добавить(); 
	Стр.ТекстовыйСтатус="InboundFinished";   				
	Стр.ЭСФ_СтатусДокумента=ПЭСДок.Вх_ДокументооборотЗавершен;
	
	Возврат ТЗ;
	
	
КонецФункции 	

Процедура СвернутьЛогЗагрузок()
	
	
	Если ЛогЗагрузок.Количество()<30 Тогда
		Возврат;
	Конецесли;	
	
	ТЗ=ЛогЗагрузок.Выгрузить();
	ТЗ.Свернуть("","Новых,Переподписанных,Корректировочных,КорректировочныхПереподписанных");
	
	ЛогЗагрузок.Очистить();
	
	Стр=ЛогЗагрузок.Добавить();
	ЗаполнитьЗначенияСвойств(Стр,ТЗ.Получить(0));
	
КонецПроцедуры	



Процедура ЗагрузкаДанныхИзДиадока(СписокОрг=Неопределено,Ззаупер=ложь)  Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОчиститьСообщения();
	#КонецЕсли
	
	ДиадокАПИ_ВК =0;
	DiadocInvoiceAPI =0;

	
	
	DiadocInvoiceAPI_ЗагрузитьВК(); // создает DiadocInvoiceAPIObject и проводит TestConnection
	                                // DiadocInvoiceAPIObject в случае ошибки подключения бутет Неопределено
	
	//ИнициализироватьПодключениеКСерверуАПИ();
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
	#Иначе
		МодульРегламентныхЗаданий.Запись_В_ЛогЗапускаРегламентныхЗаданий(Задание,ТекущаяДата(),Перечисления.СобытияРегламентногоЗадания.Запуск,"Инициализировано подключение к серверу API" );
	#КонецЕсли	
	
	
	//ПодключениеУстановлено=TestConnection();

	
	

	Если СписокОрг=Неопределено ТОгда
		СписокОрг=новый СписокЗначений;
		ЗаполнитьСписокОрганизаций(СписокОрг);
	Иначе
		
	КонецЕсли;
	
	
	ДатаПоследнегоЗапуска=ТекущаяДата();
	
	//---------------<Врежиме запуска регламентного задания (происходит на серваке) - последние 3 дня>---------------------------// GtG // 21.05.2013 12:36:52
	Если Ззаупер=Ложь Тогда
		НачПериода=НачалоДня(ТекущаяДата()-3*24*60*60);
		КонПериода=КонецДня(ТекущаяДата());
	Иначе
	//	// вручную (происходит на клиентской машине) - за указанный период
		НачПериода=НачалоДня(НачПериода);
		КонПериода=КонецДня(КонПериода);
	КонецЕсли;
	
	Для Каждого Орг Из СписокОрг Цикл
		
		Орг.Картинка=БиблиотекаКартинок.ГрузимЭто ;
		ЗагрузкаДанных(Орг.Значение);
		Орг.Картинка=Новый Картинка();
	КонецЦикла;
	
	СвернутьЛогЗагрузок();

	
КонецПроцедуры	

СвернутьЛогЗагрузок();

//---------------<Константы>---------------------------// GtG // 05.12.2012 20:16:15
URLСервера = "https://diadoc-api.kontur.ru:443";
КлючРазработчика = "A.V.E.-508dbaf8-5edf-4dc4-9fbc-1bf89d18c235";

МассивВидовЭД=Новый Массив; // это названия папок в дереве хранилища файлов
МассивВидовЭД.Добавить("Счета-фактуры");
МассивВидовЭД.Добавить("ТОРГ-12");
МассивВидовЭД.Добавить("Протоколы согласования цен");

КаталогРаспаковки=КаталогВременныхФайлов()+"DIADOK_TMP";
СоздатьКаталог(КаталогРаспаковки);

ЗапросПоискаПоступленияТОваров=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                                            |	ПоступлениеТовара.Ссылка
                                            |ИЗ
                                            |	Документ.ПоступлениеТовара КАК ПоступлениеТовара
                                            |ГДЕ
                                            |	ПоступлениеТовара.Фирма = &Фирма
                                            |	И ПоступлениеТовара.Поставщик = &Поставщик
                                            |	И ПоступлениеТовара.ВхДатаСФ = &ВхДатаСФ
                                            |	И ПоступлениеТовара.ВхНомерСФ = &ВхНомерСФ
                                            |	И ПоступлениеТовара.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ВхДатаСФ, ДЕНЬ, -15) И ДОБАВИТЬКДАТЕ(&ВхДатаСФ, ДЕНЬ, 15)
                                            |	И ПоступлениеТовара.ПометкаУдаления = ЛОЖЬ
                                            |
                                            |УПОРЯДОЧИТЬ ПО
                                            |	ПоступлениеТовара.Номер");




//---------------<Понеслась>---------------------------// GtG // 04.12.2012 11:38:43\

Задание=Справочники.РегламентныеЗадания.НайтиПоКоду("ЭлСчФактуры");
	//---------------<Саморегистрация в справочнике>---------------------------// GtG // 22.05.2013 19:05:54
	Если Задание.Пустая()=Истина Тогда
		ОбРз=Справочники.РегламентныеЗадания.СоздатьЭлемент();
		ОбРз.Код="ЭлСчФактуры";
		ОбРз.Наименование="Загрузка электронных счетов фактур";
		ОбРз.Записать();
		Задание=ОбРз.Ссылка;
	КонецЕсли;	


DiadocInvoiceAPI_ЗагрузитьВК();


//ИнициализироватьПодключениеКСерверуАПИ();
//#Если ТолстыйКлиентОбычноеПриложение Тогда

//#Иначе
//	МодульРегламентныхЗаданий.Запись_В_ЛогЗапускаРегламентныхЗаданий(Задание,ТекущаяДата(),Перечисления.СобытияРегламентногоЗадания.Запуск,"Инициализировано подключение к серверу API" );
//#КонецЕсли	


//ПодключениеУстановлено=TestConnection();

Заполнить_СоответствиеСтатусыСФ();



ТабАвтоподпись=Новый ТаблицаЗначений;
ТабАвтоподпись.Колонки.Добавить("НомерСтроки");
ТабАвтоподпись.Колонки.Добавить("Организация");
ТабАвтоподпись.Колонки.Добавить("ПроцессАвтоподписи");




