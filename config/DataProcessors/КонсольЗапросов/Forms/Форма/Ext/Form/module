
Перем БекапПрограммногоТекста;

	



Функция ДБФФайлВТипизированнуюТЗ(ИмяДБФФайла)
	
	// Типы ДБФа Строка, дата, Число.
	// Возвращает Типизированную ТЗ со всеми потрохами ДБФки или Неопределено, ежели там пусто.
	
	ДБФ=Новый XBase;
	
	ДБФ.ОткрытьФайл(ИмяДБФФайла);
	
	// Определяем типы колонок ДБФ для Типизации ТЗ
	Если ДБФ.КоличествоЗаписей()=0 Тогда
		Сообщить("Файл "+ИмяДБФФайла+" ПУСТОЙ!");
		Возврат Неопределено;
	КонецЕсли;	
	
	ТЗ=Новый ТаблицаЗначений;
	
	Для Каждого Поле Из ДБФ.поля Цикл
		Если  Поле.Тип="S" Тогда
			КваСтр=Новый КвалификаторыСтроки(ПОле.Длина,ДопустимаяДлина.Фиксированная);
			ТипКолонки=Новый ОписаниеТипов("Строка",,КваСтр,);
		ИначеЕсли  Поле.Тип="N" ИЛИ Поле.Тип="F" Тогда
			КваЧ=Новый КвалификаторыЧисла(Поле.Длина,Поле.Точность,ДопустимыйЗнак.Любой);
			ТипКолонки=Новый ОписаниеТипов("Число",КваЧ,,);
		ИначеЕсли  Поле.Тип="D" Тогда
			Квад=Новый КвалификаторыДаты(ЧастиДаты.Дата);
			ТипКолонки=Новый ОписаниеТипов("Дата",,,КваД);
		КонецЕсли;				
		
		
		Если ТЗ.Колонки.Найти(Поле.Имя)<>Неопределено Тогда
			Сообщить("В Файле есть колонки с одинаковыми именами !  "+Поле.Имя); 
			Продолжить;
		КонецЕсли;	
		
		ТЗ.Колонки.Добавить(Поле.Имя,ТипКолонки,Поле.Имя,Поле.Длина);
	КонецЦикла;
	
	Для Ы=1 По ДБФ.КоличествоЗаписей() Цикл
		ДБФ.Перейти(Ы);
		
		Стр=ТЗ.Добавить();
		
		Для Каждого Поле Из ДБФ.поля Цикл
			Стр[Поле.Имя]=ДБФ.ПолучитьЗначениеПоля(Поле.Имя);
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ТЗ;
КонецФункции


Процедура ВывестиПакетныйРезультат(Рез)
	
	   //Рез - Массив результатов запроса, получился при выполнении пакета
	   
	   Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		   Если ЭлемФормы.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		   
		   Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 Тогда
			  ЭлементыФормы.Удалить(ЭлемФормы);
		   КонецЕсли;
	   КонецЦикла;
	   
	   
	   Для Каждого СтрП1 Из ЭлементыФормы.Панель1.Страницы Цикл
		   Если СтрП1.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		   
	   	   ЭлементыФормы.Панель1.Страницы.Удалить(СтрП1);
	   КонецЦикла;
	   
	   
	   
		   
		   
		   
	   
	   
	   
	   
	   
	   х=0;
	   ИндексВМассивеРезультатов=0;
	   Для Каждого ЭлемРез Из Рез Цикл
		   
		   // Выводим результаты на закладку результатзапроса и попутно генерим новые странички и тзшки
		   Если Рез=Неопределено Тогда 
			   ИндексВМассивеРезультатов=ИндексВМассивеРезультатов+1;
			   Продолжить; // не интересно , ибо Результатом выполнения запроса на уничтожение временной таблицы является значение Неопределено, которое также помещается в массив результатов.
     	   КонецЕсли;
		   Х=Х+1;
		   Если  Х=1 Тогда
			   
			   Если ТипЗнч(ЭлемРез)=Тип("РезультатЗапроса") Тогда
				   ЭлементыФормы.РезЗапроса.Значение=ЭлемРез.Выгрузить();
			   ИначеЕсли ТипЗнч(ЭлемРез)=Тип("ТаблицаЗначений") Тогда
				   ЭлементыФормы.РезЗапроса.Значение=ЭлемРез;   // при выводе пакета из другой базы через ком соединение
			   КонецЕсли;	
					
			   ЭлементыФормы.РезЗапроса.СоздатьКолонки();
		   Иначе
			   
			НоваяСтр=ЭлементыФормы.Панель1.Страницы.Найти("РезЗапроса"+Х);
			
			Если НоваяСтр<>Неопределено Тогда
				ЭлементыФормы.Панель1.Страницы.Удалить(НоваяСтр);
			КонецЕсли;	
			   
			   
		    НоваяСтр=ЭлементыФормы.Панель1.Страницы.Добавить("РезЗапроса"+Х,"Результат запроса "+Х+"("+ИндексВМассивеРезультатов+")");
			ЭлементыФормы.Панель1.ТекущаяСтраница=НоваяСтр;
			ТекРезЗапроса=ЭлементыФормы.Добавить(Тип("ТабличноеПоле"),"РезЗапроса"+Х,Истина,ЭлементыФормы.Панель1);
			ТекРезЗапроса.Высота=ЭлементыФормы.РезЗапроса.Высота;
			ТекРезЗапроса.Ширина=ЭлементыФормы.РезЗапроса.Ширина; 
			ТекРезЗапроса.Подсказка="ЭлементыФормы.РезЗапроса"+Х+".Значение";
			
			
			
			//Граница ="";
			//ПервыйЭлемент="";
			//ГраницаПервогоЭлемента="";
			//ВторойЭлемент="";
			//ГраницаВторогоЭлемента ="";
			////ЭлементыФормы.РезЗапроса.ПолучитьПривязку(Граница, ПервыйЭлемент, ГраницаПервогоЭлемента,ВторойЭлемент,ГраницаВторогоЭлемента);
			
			//ТекРезЗапроса.УстановитьПривязку(Граница, ПервыйЭлемент, ГраницаПервогоЭлемента,ВторойЭлемент,ГраницаВторогоЭлемента);
			
			ТекРезЗапроса.Видимость=истина;
			
			
			Если ЭлемРез<>Неопределено Тогда 
				Если ТипЗнч(ЭлемРез)=Тип("РезультатЗапроса") Тогда
					ЭлементыФормы["РезЗапроса"+Х].Значение=ЭлемРез.Выгрузить();
				ИначеЕсли ТипЗнч(ЭлемРез)=Тип("ТаблицаЗначений") Тогда
					ЭлементыФормы["РезЗапроса"+Х].Значение=ЭлемРез;   // при выводе пакета из другой базы через ком соединение
				КонецЕсли;	
				ЭлементыФормы["РезЗапроса"+Х].СоздатьКолонки();
			КонецЕсли;

			   
			   
		  Конецесли;	   
			   
		   
	      ИндексВМассивеРезультатов=ИндексВМассивеРезультатов+1;
	   
	  КонецЦикла; 
	
	
	
	
	
	
Конецпроцедуры

Процедура СформироватьЗапрос(Запросом=Ложь,Пакетом=Ложь)
	 
		
	НачальноеВремя=ТекущаяДата();
	
	
	Построитель.ВыводитьОбщиеИтоги=ВыводитьОбщиеИтоги;
	Построитель.ТекстЗаголовка=ЗаголовокОтчета;
	
	Построитель.Параметры.Очистить();
	
	Для каждого  Стр Из ТППараметров Цикл
		Если Найти(Стр.Значение,"ДБФФайлВТипизированнуюТЗ")<>0  или Найти(Стр.Значение,"ТАБЛИЦА_ЗНАЧЕНИЙ")<>0 Тогда
			Запросом=Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Если Пакетом=Истина Тогда
		Запросом=Истина;
	КонецЕсли;	
	
	Если Запросом=Истина Тогда  // запросом
		МВТ=Новый МенеджерВременныхТаблиц;
		Запрос=Новый Запрос();
		Запрос.МенеджерВременныхТаблиц=МВТ;
		
		Запрос.Текст=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Запрос.Параметры.Очистить();
		Для каждого  Стр Из ТППараметров Цикл
			Если Найти(Стр.Значение,"ДБФФайлВТипизированнуюТЗ")<>0 Тогда
				Значение=Вычислить(Стр.Значение);
			ИначеЕсли Найти(Стр.Значение,"ТАБЛИЦА_ЗНАЧЕНИЙ")<>0 Тогда
				Значение=ЭлементыФормы[СтрЗаменить(Стр.Значение,"ТАБЛИЦА_ЗНАЧЕНИЙ_","")].Значение; //       ТабЗнач;
			ИначеЕсли СокрЛП(Стр.ВидГраницы)<>""  ТОгда
				Значение=Новый Граница(Стр.Значение,ВидГраницы[Стр.ВидГраницы]);
			Иначе
				Значение=Стр.Значение;
			КонецЕсли;
			Запрос.Параметры.Вставить(Стр.Имя,Значение);
		КонецЦикла;
		
		Если Пакетом=Ложь Тогда
			Рез=Запрос.Выполнить().Выгрузить();
			ЭлементыФормы.РезЗапроса.Значение=Рез;
		ЭлементыФормы.РезЗапроса.СоздатьКолонки();

			
		Иначе
			Рез=Запрос.ВыполнитьПакет();
			
			ВывестиПакетныйРезультат(Рез);
			
		КонецЕсли;
		
				
		ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы["РезультатЗапроса"];
		
		
	Иначе	// построителем
		
		
		Для каждого  Стр Из ТППараметров Цикл
			Если СокрЛП(Стр.ВидГраницы)<>""  ТОгда
				Значение=Новый Граница(Стр.Значение,ВидГраницы[Стр.ВидГраницы]);
			Иначе	
				Значение=Стр.Значение;
			КонецЕсли;
			Построитель.Параметры.Вставить(Стр.Имя,Значение);
		КонецЦикла; 
		
		Если РасшифровкаЯчеек=Истина Тогда
			Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
		КонецЕсли;
		Построитель.Выполнить();
		Построитель.МакетОформления=ПолучитьМакетОформления(ЭлементыФормы.Оформление.Значение);//СтандартноеОформление.Асфальт);
		Построитель.ОформитьМакет();
		Построитель.Вывести();
		
	КонецЕсли;
	
	ЭлементыФормы.ТТЗ.УстановитьТекст(Построитель.Текст);
	
	КонечноеВремя=ТекущаяДата();
	
	ВремяВыполнения=КонечноеВремя-НачальноеВремя;
	
	ЭлементыФормы.НадписьВремяВыполнения.Заголовок="Время выполнения: "+Формат(ВремяВыполнения,"ДФ='ЧЧ:мм:сс ""сек.""'");
	

КонецПроцедуры	

Процедура БэкапПараметровЗапроса(Знач БэкапТекстаЗапроса)
	ИмяФайлаБэкапаПараметров=СтрЗаменить(БэкапТекстаЗапроса,".1S.SQL",".ParamBKP");
	ЗначениеВФайл(ИмяФайлаБэкапаПараметров,ТППараметров);
КонецПроцедуры	



Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	БэкапТекстаЗапроса=GTGКаталогВременныхФайлов()+"\1SQuery_bkp_"+Формат(ТекущаяДата(),"ДФ=(yyyyMMdd.HHmmss); ДЛФ=")+"_"+ИмяТекущейИБ()+".1S.SQL";
	БэкапПараметровЗапроса(БэкапТекстаЗапроса);

	ЭлементыФормы.ТекстЗапроса.Записать(БэкапТекстаЗапроса);
	ЭлементыФормы.НадписьВремяВыполнения.Заголовок="Резервная копия текста запроса "+БэкапТекстаЗапроса;
	СформироватьЗапрос(Ложь,Пакетом);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыТекстЗапросаВПостроитель(Кнопка)
	Попытка
		Построитель.Текст= ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Исключение
		// как-бэ пох...
	КонецПопытки;
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если ПустаяСтрока(ТХТ)=Истина ТОгда
		КЗ= Новый КонструкторЗапроса();
	Иначе
		
		КЗ= Новый КонструкторЗапроса();
		КЗ.Текст=ТХТ;

	КонецЕсли;	
	
		
	
	КЗ.АвтоДобавлениеПредставлений=АвтоДобавлениепредставлений;
	
	КЗ.ОткрытьМодально();
	
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КЗ.Текст);
	
КонецПроцедуры

Процедура КоманднаяПанель6Сохранить(Кнопка)
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Заголовок=("Сохранить запрос");
	ДВФ.Расширение="1S.SQL";
	ДВФ.Фильтр="Запросы 1С *.1S.SQL|*.1S.SQL";
	
	Если ДВФ.Выбрать()=Истина ТОгда
		Текст=Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
		
		
		Текст.ВставитьСтроку(1,"//---------------------------Текст запроса построителя ---------------------------//");
		
		Текст.ВставитьСтроку(1,"// Заголовок отчета // "+ЗаголовокОтчета);
		
		Текст.Записать(ДВФ.ПолноеИмяФайла,КодировкаТекста.ANSI);
		Предупреждение("Сохранено в 
					    |"+ДВФ.ПолноеИмяФайла,10);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель6Открыть_сохраненный_запрос(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Заголовок=("Открыть сохраненный запрос");
	ДВФ.Расширение="1S.SQL";
	ДВФ.Фильтр="Запросы 1С *.1S.SQL|*.1S.SQL";
	
	ПредполагаемаяКодировка=новый СписокЗначений;
	ПредполагаемаяКодировка.Добавить(КодировкаТекста.ANSI,"Win-1251");
	ПредполагаемаяКодировка.Добавить(КодировкаТекста.UTF8,"UNICODE UTF-8");
	ПредполагаемаяКодировка.Добавить(КодировкаТекста.ANSI,"DOS-866");
	
	
	КТ=ВыбратьИзСписка(ПредполагаемаяКодировка);
	КодирТекста=КТ.Значение;
	Если ДВФ.Выбрать()=Истина ТОгда
		Текст=Новый ТекстовыйДокумент;
		Текст.Прочитать(ДВФ.ПолноеИмяФайла,КодирТекста);
		
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст.ПолучитьТекст());
		
		ПерваяСтрока=Текст.ПолучитьСтроку(1);
		
		Если Найти(ПерваяСтрока,"// Заголовок отчета //")<>0 Тогда
			ЗаголовокОтчета=СтрЗаменить(ПерваяСтрока,"// Заголовок отчета //","");
		КонецЕсли;	
		
	КонецЕсли; 
КонецПроцедуры

Процедура ОбновитьНажатие(Элемент)
	ЭлементыФормы.ТТЗ.УстановитьТекст(Построитель.Текст);
КонецПроцедуры

Процедура ВСписокНажатие(Элемент)
	
	
	 Перем Значение;

	ВвестиЗначение(Значение,"Значение списка",ТипЗначенийСписка);
	
	СписокЗначений1.Добавить(Значение);

	
	
	
КонецПроцедуры

Процедура УстановитьЗначениеПараметраЗапросаНажатие(Элемент)
	
	    Стр=ЭлементыФормы.ТППараметров.ТекущаяСтрока;
		
		ЗначениеСписка=Новый СписокЗначений;
		ЗначениеСписка.ЗагрузитьЗначения(СписокЗначений1.ВыгрузитьЗначения());
		
		
		Стр.Значение=ЗначениеСписка;
	
КонецПроцедуры

Процедура КоманднаяПанель7УдалитьИзСписка(Кнопка)
	
	СписокЗначений1.Удалить(ЭлементыФормы.СписокЗначений.ТекущаяСтрока);
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель7ОчиститьСписок(Кнопка)
	СписокЗначений1.Очистить();
КонецПроцедуры

Процедура КоманднаяПанель6Действие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Вопрос("Закрыть консоль запросов?", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Нет Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;	
	
	
	Если Вопрос("Сохранить запрос перед закрытием консоли?", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Да Тогда
		КоманднаяПанель6Сохранить("");
	КонецЕсли;	
	
	//---------------<Убираем из таблицы Дочерних консолей>---------------------------// GtG // 16.11.2012 12:06:19
	
	Стр=ДочерниеКонсоли.Найти(ЭтаФорма.КлючУникальности,"КлючУникальностиОкнаКонсоли");
	ДочерниеКонсоли.Удалить(Стр);
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыИзТекстаЗапроса(Кнопка)
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ШняжныеСимволы=Новый Массив;
	ШняжныеСимволы.Добавить(")");
	ШняжныеСимволы.Добавить("(");
	ШняжныеСимволы.Добавить(" ");
	ШняжныеСимволы.Добавить(",");
	ШняжныеСимволы.Добавить("""");
	ШняжныеСимволы.Добавить("/");
	ШняжныеСимволы.Добавить(".");
	ШняжныеСимволы.Добавить(Символы.ПС);
	ШняжныеСимволы.Добавить(Символы.Таб);
	
	
	ВТППараметров=ТППараметров.Скопировать();   // временная тз параметров
	ВТППараметров.Очистить();
	
	
	
	Пока Найти(ТХТ,"&")<> 0 Цикл
		
		ПозПервойСобаки=Найти(ТХТ,"&");
		
		ОгрызокЗапроса=Сред(ТХТ,ПозПервойСобаки+1,СтрДлина(ТХТ));
		
		ПозШняги=10000000;
		
		Для Каждого Шняжника из ШняжныеСимволы Цикл
			
			ТекШняжка=Найти(ОгрызокЗапроса,Шняжника);
			
			Если ТекШняжка>0 и ТекШняжка<ПозШняги Тогда
				ПозШняги=ТекШняжка;
			КонецЕсли;	
		КонецЦикла;
		
		ВыделенныйПараметр=Лев(ОгрызокЗапроса,ПозШняги-1);
		
		ВТППараметров.Добавить().Имя=СокрЛП(ВыделенныйПараметр);
		
		
		ОгрызокЗапроса=СтрЗаменить(ОгрызокЗапроса,"ВыделенныйПараметр","---");
		
		ОгрызокЗапроса=СтрЗаменить(ОгрызокЗапроса,"&---","---");
		
		ТХТ=ОгрызокЗапроса;
	КонецЦикла;	
	
	ВТППараметров.Свернуть("Имя,Значение","");
	
	
	
	Для Каждого ВСтр Из ВТППараметров Цикл
		Если ТППараметров.Найти(ВСтр.Имя,"Имя")=Неопределено Тогда
			 ТППараметров.Добавить().Имя=ВСтр.Имя;
		КонецЕсли;	 
	Конеццикла;	
	
	
	
	
	
	
КонецПроцедуры

Процедура ДБФФайлКакПараметрНажатие(Элемент)
	
	Стр=ЭлементыФормы.ТППараметров.ТекущаяСтрока;
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="*.DBF";
	Если ДВФ.Выбрать()=Истина Тогда
		Стр.Значение="ДБФФайлВТипизированнуюТЗ("""+ДВФ.ПолноеИмяФайла+""")";
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыВФайл(Кнопка)
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Расширение="VAL";
	ДВФ.Фильтр="Файл значений параметров |*.VAL";
	ДВФ.ИндексФильтра=0;
	ДВФ.Выбрать();
	
	ЗначениеВФайл(ДВФ.ПолноеИмяФайла,ТППараметров);
	
КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыИзФайла(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Расширение="VAL";
	ДВФ.Фильтр="Файл значений параметров |*.VAL";
	ДВФ.ИндексФильтра=0;
	ДВФ.Выбрать();
	
	Параметры=ЗначениеИзФайла(ДВФ.ПолноеИмяФайла);
	
	ЭлементыФормы.ТППараметров.Значение=Параметры;
	ЭлементыФормы.ТППараметров.СоздатьКолонки();
	
	

КонецПроцедуры



Процедура АвтосохранениеЗапроса()
	
	ТекИмяФайлаАвтосохранения=ПапкаАвтосохранения+"\"+СокрЛП(БазаИмениФайлаАвтосохранения)+"("+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd   HH-mm-ss'")+")"+ИмяТекущейИБ();
	
	Если СохранятьПараметры=Истина Тогда
		ЗначениеВФайл(ТекИмяФайлаАвтосохранения+".VAL",ТППараметров);
	КонецЕсли;
	
	Текст=Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
	
	
	Текст.ВставитьСтроку(1,"//---------------------------Текст запроса построителя ---------------------------//");
	
	Текст.ВставитьСтроку(1,"// Заголовок отчета // "+ЗаголовокОтчета);
	
	Текст.Записать(ТекИмяФайлаАвтосохранения+".SQL",КодировкаТекста.ANSI);
	Состояние("Автоматически сохранено в "+ТекИмяФайлаАвтосохранения);	
	
Конецпроцедуры	


Процедура КоманднаяПанель1ПодключениеКБазе(Кнопка)
	
	
	
	ФПП=ЭтотОбъект.ПолучитьФорму("ПрямоеПодключение",ЭтаФорма,1);
	
	ФПП.сервер="";
	ФПП.база="";
	ФПП.Пользователь="";
	ФПП.Пароль="";
	
	ФПП.ОткрытьМодально();
	
	
	
	
	
КонецПроцедуры

	  
	  
Процедура ВключитьАвтосохранениеПриИзменении(Элемент)
	
	Если ВключитьАвтосохранение=Истина ТОгда
		Если ПустаяСтрока(БазаИмениФайлаАвтосохранения)=Истина ТОгда
			Предупреждение("Не указана база имени файла автосохранения!");
			ВключитьАвтосохранение=Ложь;
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(ПапкаАвтосохранения)=Истина ТОгда
			Предупреждение("Не папка автосохранения!");
			ВключитьАвтосохранение=Ложь;
			Возврат;
		КонецЕсли;
		
		
		ПодключитьОбработчикОжидания("АвтосохранениеЗапроса",60*Интервал,ЛОжь);
		
	Иначе
		ОТключитьОбработчикОжидания("АвтосохранениеЗапроса");
 	КонецЕсли;	
	
КонецПроцедуры

Процедура ПапкаАвтосохраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВФ.Выбрать();
	ПапкаАвтосохранения=ДВФ.Каталог;
КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнитьЗапросВДругойБазе(Кнопка)
	
	БэкапТекстаЗапроса=GTGКаталогВременныхФайлов()+"\1SQuery_bkp_"+Формат(ТекущаяДата(),"ДФ=(yyyyMMdd.HHmmss); ДЛФ=")+"_"+ИмяТекущейИБ()+"@"+ИмяПодключенойБазы+".1S.SQL";
	БэкапПараметровЗапроса(БэкапТекстаЗапроса);

	ЭлементыФормы.ТекстЗапроса.Записать(БэкапТекстаЗапроса);
	ЭлементыФормы.НадписьВремяВыполнения.Заголовок="Резервная копия текста запроса "+БэкапТекстаЗапроса;

	
	
	
	Если ПустаяСтрока(ИмяПодключенойБазы)=Истина ТОгда
		Предупреждение("Не подключена другая база!");
		Возврат;
	Конецесли;
	
	
	Попытка
		Запрос=Ком.NewObject("Запрос");
	Исключение
		Если Найти (ОписаниеОшибки(),"Значение не является значением объектного типа (NewObject)")<>0 Тогда
			Предупреждение("Не выполнено подключение к складской базе! Выполняем подключение...",10);
			Возврат;
			
		Иначе
			Предупреждение(ОписаниеОшибки());
			Возврат;
			
		КонецЕсли; 	
	КонецПопытки; 
	
	
	Запрос.текст=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос.Параметры.Очистить();
		Для каждого  Стр Из ТППараметров Цикл
			Если Найти(Стр.Значение,"ДБФФайлВТипизированнуюТЗ")<>0 Тогда
				Значение=Вычислить(Стр.Значение);
			Иначе
				Значение=Стр.Значение;
			КонецЕсли;
			Запрос.Параметры.Вставить(Стр.Имя,Значение);
		КонецЦикла;

		
		//---------------<Одиночный результат>---------------------------// GtG // 15.10.2014 16:09:33	
		Если Пакетом=Ложь Тогда	
			
			РезТЗ=Запрос.Выполнить().Выгрузить();
			
			Если РезТЗ.Количество()=0 Тогда
				Предупреждение("Результат запроса пустой!");
				Возврат;
			КонецЕсли; 	
			
			
			ТЗ= СконвертироватьКомТЗВНормальнуюТЗ(РезТЗ);
			
			ЭлементыФормы.РезЗапроса.Значение=ТЗ;
			ЭлементыФормы.РезЗапроса.СоздатьКолонки();
			
		Иначе
			
			//---------------<Пакетом>---------------------------// GtG // 15.10.2014 16:09:40
			
			МассивКомТабличек=Запрос.ВыполнитьПакет();
			МассивНаВывод=Новый Массив;
			
			Для каждого Табличка Из МассивКомТабличек Цикл
				
				РезТЗ=Табличка.Выгрузить();
				
				//Если РезТЗ.Количество()=0 Тогда
				//	Предупреждение("Результат запроса пустой!");
				//	Возврат;
				//КонецЕсли; 	
				
				
				ТЗ= СконвертироватьКомТЗВНормальнуюТЗ(РезТЗ);
				
				МассивНаВывод.Добавить(ТЗ);
			КонецЦикла;
			
			ВывестиПакетныйРезультат(МассивНаВывод);
			МассивКомТабличек=Неопределено; 
			
			
			
		КонецЕсли;

ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы["РезультатЗапроса"];


	
	
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВыполнитьЗапросВДругойБазе.Текст="Выполнить в базе "+ИмяПодключенойБазы;
	
	//---------------<Подгонка размеров табличных полей результатов запроса>---------------------------// GtG // 15.10.2014 16:52:38
	
	ШиринаПанелиРезультатов=ЭлементыФормы.Панель1.Ширина;
	ВысотаПанелиРезультатов=ЭлементыФормы.Панель1.Высота;
	
	Для Каждого ЭЛЕМ Из ЭлементыФормы Цикл
		
		Если Найти(ЭЛЕМ.Имя,"РезЗапроса")<>0 Тогда
			Элем.Лево=6;
			Элем.Верх=6;
			Элем.Ширина=ШиринаПанелиРезультатов-14;
			Элем.Высота=ВысотаПанелиРезультатов-32;
		Конецесли;
	КонецЦикла;
	
	
	
	
	
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыВТекстМодуля(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	Для Каждого Стр Из ТППараметров Цикл
		ТХТ.ДобавитьСтроку("Запрос.УстановитьПараметр("""+Стр.Имя+""","+Стр.Имя+");");
	КонецЦикла;
	
	ТХТ.Показать();
	
	
КонецПроцедуры

Процедура КоманднаяПанель6ОчиститьТекст(Кнопка)
	//---------------<Очищаем текст от вертикальных палочек и лишних кавычек>---------------------------// GtG //
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ТХТ=СтрЗаменить(ТХТ,"|"," ");
	ТХТ=СтрЗаменить(ТХТ,"""""","""");
	ТХТ=СтрЗаменить(ТХТ,""";"," ");
	ТХТ=СтрЗаменить(ТХТ,"""ВЫБРАТЬ","ВЫБРАТЬ");
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТХТ);
	
	
КонецПроцедуры


Функция ПреобразоватьТекстЗапросаВТекстМодуля()
	
	ТХТДок=Новый ТекстовыйДокумент;
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ТХТДок.ДобавитьСтроку(" ""	"+СтрПолучитьСтроку(ТХТ,1));
	Для ы=2 по СтрЧислоСтрок(ТХТ) Цикл
		
		ТекСтрЗапроса=СтрПолучитьСтроку(ТХТ,Ы);
		ТекСтрЗапроса=СтрЗаменить(ТекСтрЗапроса,"""","""""");
		
		ТХТДок.ДобавитьСтроку("|	"+ТекСтрЗапроса);
	КонецЦикла;	
    ТХТДок.ДобавитьСтроку(" |""; // Сгенерировано в GtG's Консоль запросов. " +ТекущаяДата());

	Возврат ТХТДок; // тип ТекстовыйДокумент
	
КонецФункции	


Процедура КоманднаяПанель6ТЗТМ(Кнопка)
	ПреобразоватьТекстЗапросаВТекстМодуля().Показать();
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Найти("ТекстЗапроса");
	
	Если ПустаяСтрока(ЭтаФорма.КлючУникальности)=Истина ТОгда
		НГУИД="КОН"+Формат(ТекущаяДата(),"ДФ=HHmmss_ddMMyyyy");   // дает возможность открывать несколько консолей.
		ЭтаФорма.КлючУникальности=НГУИД;
	Иначе
		// открыто с назначением гуида
	КонецЕСли;

	НГУИД=ЭтаФорма.КлючУникальности;
	
	
	Если ДочерниеКонсоли.Найти(НГУИД,"КлючУникальностиОкнаКонсоли")=НЕопределено Тогда
		СДК=ДочерниеКонсоли.Добавить();
		СДК.Описание="Эта консоль";
		СДК.КлючУникальностиОкнаКонсоли=НГУИД;
	КонецЕсли;	
		
	
	
	
КонецПроцедуры

Процедура ПапкаССохраненнымиЗапросамиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ДВК=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВК.Выбрать();
	
	ПапкаССохраненнымиЗапросами=ДВК.Каталог;
	
КонецПроцедуры

Процедура КоманднаяПанель9ЗагрузитьЗапросыИзПапки(Кнопка)
	// Вставить содержимое обработчика.
	
	МНФ=НайтиФайлы(ПапкаССохраненнымиЗапросами+"\","*.1S.SQL");
	
	Для Каждого Ф из МНФ Цикл
		
		ТХТ=Новый ТекстовыйДокумент;
		ТХТ.Прочитать(Ф.ПолноеИмя);
		Заг=ТХТ.ПолучитьСтроку(1);
		
		ТекЗапрос=Запросы.Добавить();
		ТекЗапрос.НомерСтроки=Запросы.Количество();
		
		Если Найти("// Заголовок отчета //",Заг)<>0 Тогда
			Заг=СтрЗаменить(Заг,"// Заголовок отчета //","");
			Если ПустаяСтрока(Заг)=Ложь Тогда
				ТекЗапрос.ЗаголовокОтчета=Заг;
			Иначе
				ТекЗапрос.ЗаголовокОтчета=Ф.ИмяБезРасширения;
			Конецесли;
		Иначе	
			ТекЗапрос.ЗаголовокОтчета=Ф.ИмяБезРасширения;
		КонецЕсли;	
		
		ТекЗапрос.ТекстЗапроса=ЗначениеВСтрокуВнутр(ТХТ.ПолучитьТекст());
	КонецЦикла;
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель9ВыбратьЗапрос(Кнопка)
	ТекЗапрос=ЭлементыФормы.Запросы.ТекущаяСтрока;
	
	ЭлементыФормы.ТекстЗапроса.Очистить();
	ПолучитьЭлементФормыПрограммы().Очистить();
	
	ЗаголовокОтчета=ТекЗапрос.ЗаголовокОтчета;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ЗначениеИзСтрокиВнутр(ТекЗапрос.ТекстЗапроса));
	
	
	Попытка // для совместимости со старыми файлами
		Если ПустаяСтрока(ТекЗапрос.Параметры)=Ложь Тогда
			ТППараметров=ЗначениеИзСтрокиВнутр(ТекЗапрос.Параметры);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка // для совместимости со старыми файлами
		Если ПустаяСтрока(ТекЗапрос.ТекстПрограммы) =Ложь Тогда
			ПолучитьЭлементФормыПрограммы().УстановитьТекст(ЗначениеИзСтрокиВнутр(ТекЗапрос.ТекстПрограммы));
		Конецесли;	
	Исключение
	КонецПопытки;
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Найти("ТекстЗапроса");
КонецПроцедуры

Процедура КоманднаяПанель6ОтложитьЗапрос(Кнопка)
	// Вставить содержимое обработчика.
	
	Если ПустаяСтрока(ЗаголовокОтчета)=Истина Тогда
		ВвестиСтроку(ЗаголовокОтчета,"Название запроса?",200,ЛОжь);
	КонецЕсли;
	
	
	
	ОтлЗапр=Запросы.Добавить();
	
	ОтлЗапр.НомерСтроки=Запросы.Количество();
	Если ПустаяСтрока(ЗаголовокОтчета)=Истина Тогда
		ОтлЗапр.ЗаголовокОтчета="Запрос, "+ТекущаяДата();
	Иначе	
		ОтлЗапр.ЗаголовокОтчета=ЗаголовокОтчета;
	КонецЕсли;
	
	ОтлЗапр.ТекстЗапроса=ЗначениеВСтрокуВнутр(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
	
	ОтлЗапр.Параметры=ЗначениеВСтрокуВнутр(ТППараметров);
	
	ОтлЗапр.ТекстПрограммы=ЗначениеВСтрокуВнутр(ПолучитьЭлементФормыПрограммы().ПолучитьТекст());
	
	
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель9СохранитьРабочийПакетЗапросов(Кнопка)
	
	Если ПустаяСтрока(ПапкаССохраненнымиЗапросами)=Истина тогда
		ДВК=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДВК.Выбрать();
		
		ПапкаССохраненнымиЗапросами=ДВК.Каталог;
		
	Конецесли;	
	
	
 Пакет=ЗначениеВСтрокуВнутр(Запросы);
 
 ТХТ=Новый ТекстовыйДокумент();
 ТХТ.УстановитьТекст(Пакет);
 
 ИмяФайлаПакета="";
 ВвестиСтроку(ИмяФайлаПакета,"Имя пакета",250,Ложь);
 
 ИмяФайлаПакета=ПапкаССохраненнымиЗапросами+"\"+СокрЛП(ИмяФайлаПакета)+".1S.SQLPAK";
 ТХТ.Записать(ИмяФайлаПакета);
 Предупреждение("Сохранено в "+ИмяФайлаПакета);
 
	
КонецПроцедуры

Процедура КоманднаяПанель9ЗагрузитьПакетЗапросов(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="Файлы пакетов запросов *.1S.SQLPAK|*.1S.SQLPAK";
	ДВФ.ИндексФильтра=0;
	ДВФ.Расширение="1S.SQLPAK";
	
	ДВФ.Выбрать();
	
	ТХТ=Новый ТекстовыйДокумент;
	
	
	ТХТ.Прочитать(ДВФ.ПолноеИмяфайла);
	
	
	
	ЗапросыИзФайла=ЗначениеИзСтрокиВнутр(ТХТ.ПолучитьТекст());
	
	ЭлементыФормы.Запросы.Значение= ЗапросыИзФайла;	
КонецПроцедуры



Процедура ВыполнитьТекст(ТекстПрограммыИзФормы)

	Выполнить(ТекстПрограммыИзФормы);
	
КонецПроцедуры	


Функция ПолучитьЭлементФормыПрограммы()
    ИТСПП=ЭлементыФормы.ПрограммнаяПанель.ТекущаяСтраница.Имя;
    ТекстовоеПолеПрограммы=СтрЗаменить(ИТСПП,"Программа","ТекстПрограммы");
    Элем=ЭлементыФормы.Найти(ТекстовоеПолеПрограммы);
    Возврат  Элем;
КонецФункции    



Процедура КоманднаяПанель11Выполнить(Кнопка)
	// Вставить содержимое обработчика.
    
    //ИТСПП=ЭлементыФормы.ПрограммнаяПанель.ТекущаяСтраница.Имя;
    
    //ТекстовоеПолеПрограммы=СтрЗаменить(ИТСПП,"Программа","ТекстПрограммы");
    
    
    
    
	ТекстПрограммыИзФормы=ПолучитьЭлементФормыПрограммы().ПолучитьТекст(); // было .ТекстПрограммы
	БекапПрограммногоТекста=GTGКаталогВременныхФайлов()+"AUTOSAVE_"+Формат(ТекущаяДата(),"ДФ=(yyyyMMdd.HHmmss); ДЛФ=")+ИмяТекущейИБ()+".1S.PRG";
	//---------------<Автосэйв последнего запущеного куска программы>---------------------------// GtG // 07.12.2011 20:48:53 
	ЭлементыФормы.Надпись5.Заголовок="Сохранено в "+БекапПрограммногоТекста+"  "+Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy ""в"" HH:mm:ss'");
	ПолучитьЭлементФормыПрограммы().Записать(БекапПрограммногоТекста,КодировкаТекста.ANSI);
	
	ВыполнитьТекст(ТекстПрограммыИзФормы);
 
КонецПроцедуры

Процедура ПанельПрограмматораРезультатЗапроса(Кнопка)
	
	Если ПроверкаИспользованияПостроителяВЗапросе()=Истина ТОгда
		Возврат;
	КонецЕсли;	
	
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)");
	
КонецПроцедуры

Процедура ПанельПрограмматораСохранитьТекстПрограммы(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Расширение="1S.PRG";
	ДВФ.Фильтр="Файл программы для консоли *.1S.PRG|*.1S.PRG";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать() Тогда
		ПолучитьЭлементФормыПрограммы().Записать(ДВФ.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

Процедура ПанельПрограмматораОткрытьТекстПрограммы(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Расширение="1S.PRG";
	ДВФ.Фильтр="Файл программы для консоли *.1S.PRG|*.1S.PRG";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать() Тогда
		ПолучитьЭлементФормыПрограммы().Прочитать(ДВФ.ПолноеИмяФайла);
	КонецЕсли;	
	
		
КонецПроцедуры

Процедура ПанельПрограмматораТекстПрограммывВерхнийРегистр(Кнопка)
	ТХТ=ЭЛЕМЕНТЫФОРМЫ.ТЕКСТПРОГРАММЫ.ПОЛУЧИТЬТЕКСТ();
	ТХТ=ВРЕГ(ТХТ);
	ЭЛЕМЕНТЫФОРМЫ.ТЕКСТПРОГРАММЫ.УСТАНОВИТЬТЕКСТ(ТХТ);
КонецПроцедуры

Процедура ПанельПрограмматораОткрытьАвтосэйв(Кнопка)
	
	ФОАС=ЭтотОбъект.ПолучитьФорму("ОткрытиеФайловАвтосейва",ЭтаФорма,1);
	ФОАС.РасширениеФайлов="1S.PRG";
	ФОАС.ОткрытьМодально();
	
	Если Вопрос("Открыть автоматически сохраненный программный текст?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да ТОгда
		ПолучитьЭлементФормыПрограммы().УстановитьТекст(ФОАС.ЭлементыФормы.Просмотр.ПолучитьТекст());
	КонецЕсли;

	
КонецПроцедуры

Процедура ПанельПрограмматораКомПодключение(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("Ком  .... ;//<--- Это COM-объект, подключение к другой базе");
КонецПроцедуры

Процедура ПанельПрограмматораНовыйОбъектВДругойБазе(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("???? = Ком.NewObject(""?????""); // Объект в контексте  другой базы");
КонецПроцедуры

Процедура ПанельПрограмматораАктивизироватьОкноПрограмматора(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;");
КонецПроцедуры

Процедура ПанельПрограмматораРезультатЗапросаСИспПостроителя(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("Построитель.Выполнить();// если в запросе используется построитель");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("РезультатВыполнения=Построитель.Результат;//тип значения: РезультатЗапроса  ");
КонецПроцедуры

Процедура ПанельПрограмматораИндикатор(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ЭлементыФормы.Индикатор.Значение=0;");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ЭлементыФормы.Индикатор.МаксимальноеЗначение=???;");
КонецПроцедуры

Процедура КоманднаяПанель12ЗагрузитьИзФайла(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		ЭлементыФормы[ИмяТекТЗ()].Значение=ЗначениеИзФайла(ДВФ.ПолноеИмяФайла);
		ЭлементыФормы[ИмяТекТЗ()].СоздатьКолонки();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель13СохранитьВФайл(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		ЗначениеВФайл(ДВФ.ПолноеИмяФайла,РезЗапроса);
		Предупреждение("Сохранено в файл:
		|"+ДВФ.ПолноеИмяФайла,15);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельПрограмматораТабЗнач(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ТабЗнач   //<--- Это таблица значений на закладке Таблица значений");
КонецПроцедуры

Функция ИмяТекТЗ()
	Если ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ОсновнаяТаблицаЗначений ТОгда
		ИмяТЗ="ТабЗнач";
	ИначеЕсли ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ДопТаблицаЗначений1 ТОгда
		ИмяТЗ="ДопТабЗнач1";
	ИначеЕсли ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ДопТаблицаЗначений2 ТОгда
		ИмяТЗ="ДопТабЗнач2";
	КонецЕсли;	
	
	Возврат ИмяТЗ;
	
КонецФункции	


Процедура КоманднаяПанель12ДобавитьКолонку(Кнопка)
	////ИмяКолонки="НоваяКолонка";
	//ВвестиСтроку(ИмяКолонки,"Имя новой колонки",25);
	//ИмяКолонки=СтрЗаменить(СокрЛП(ИмяКолонки)," ","_");
	
	ФормаСозданияКолонки=ЭтотОбъект.ПолучитьФорму("СозданиеНовойКолонкиТаблицыЗначений", ЭтаФорма,1);
	ФормаСозданияКолонки.ОткрытьМодально();
	ИмяКолонки=ФормаСозданияКолонки.НаименованиеКолонки;
	ТипДанныхКолонки=ФормаСозданияКолонки.ТипДанных;
	
	Попытка
		
				
		ЭлементыФормы[ИмяТекТЗ()].Значение.Колонки.Добавить(ИмяКолонки,ТипДанныхКолонки);
		ЭлементыФормы[ИмяТекТЗ()].СоздатьКолонки();
		
	ИСключение
		Предупреждение("Не могу добавить колонку с таким именем !");
	КонецПопытки;
КонецПроцедуры

Функция ПроверкаИспользованияПостроителяВЗапросе()
	// Если в запросе используются фичи построителя, то в программаторе нужно
	// использовать работу через построителью. а не простой запрос.
	// В противном случае можно получить некорректные по смыслу данные , 
	// потому что условия из построителя не будут учтены.
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Если Найти(ТХТ,"{")<>0 или Найти(ТХТ,"}")<>0 Тогда
		Предупреждение("ВНИМАНИЕ!!! В ЗАПРОСЕ ИСПОЛЬЗУЕТСЯ ПОСТРОИТЕЛЬ!!! 
		               |НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ОБЫЧНЫЙ ЗАПРОС!!!");
	    Возврат ИСтина;
	ИНаче
		Возврат ЛОЖЬ;
	КонецЕсли;	
КонецФункции	



Процедура ПанельПрограмматораРезЗапроСОбрабДок(Кнопка)
	
	Если ПроверкаИспользованияПостроителяВЗапросе()=Истина ТОгда
		Возврат;
	КонецЕсли;	
	
ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("
//---------------<ШАблон>---------------------------| GtG | 20.01.2012 17:19:22
|СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)
|ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;
|ЭлементыФормы.Индикатор.Значение=0;
|ЭлементыФормы.Индикатор.МаксимальноеЗначение=РезЗапроса.Количество();

|Для Каждого Стр Из РезЗапроса Цикл
|   ОбработкаПрерыванияПользователя();
|	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;
|	
|	ДокументОбъект=Стр.Ссылка.ПолучитьОбъект();
|	
|	<<< Далее выполняем некие действия над документом >>>
|	
|	
|	
|	
|КонецЦикла;");

//---------------<>---------------------------| GtG | 20.01.2012 17:19:26


КонецПроцедуры

Процедура ПанельПрограмматораОбрареззасиндик(Кнопка)
	Если ПроверкаИспользованияПостроителяВЗапросе()=Истина ТОгда
		Возврат;
	КонецЕсли;	
	
	
	
ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("
|СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)
|ОчиститьСообщения();
|// Активируем эту страничку и инициализируем градусник ----------------------//
|ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;       //
|Х=0; Старт=ТекущаяДата(); У=Реззапроса.Количество(); ОбновлятьЧерезНСтрок=10; //
|КомментарийВыполняемойОперации=""Обработка результата запроса"";
|//---------------------------------------------------------------------------//
|
|// Обрабатываем в цикле результат запроса -----------------------------------//
|Для Каждого Стр Из Реззапроса Цикл                                           //
|	ОбработкаПрерыванияПользователя();
|
|	//<<< Тут пишем код >>>//
|	// Объект=Стр.Ссылка.ПолучитьОбъект(); //.Удалить();
|                                          //.Записать();
|                                          //.Записать(РежимЗаписиДокумента.Проведение);
|	//-------------- Градусник +10 -------------------------------------------//
|	ОбновитьИндикациюВыполнения(Х,У,Старт,ОбновлятьЧерезНСтрок,КомментарийВыполняемойОперации);
|   //------------------------------------------------------------------------//
|КонецЦикла;
|//------------------ конец обработки результата запроса ---------------------//
|");




	
	
	
	
КонецПроцедуры

Процедура ПанельПрограмматораПерегнатьВоВремТабл(Кнопка)
ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("
|СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)
|
|// Активируем эту страничку и инициализируем градусник -------------------//
|ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;    //
|ЭлементыФормы.Индикатор.Значение=0;                                       //
|ЭлементыФормы.Индикатор.МаксимальноеЗначение=РезЗапроса.Колонки.Количество();     //
|//------------------------------------------------------------------------//
|ОчиститьСообщения();
|Сообщить(""//	Текст запроса, для перегонки РезЗапроса во временную таблицу: "");
|Сообщить(""""""ВЫБРАТЬ"");
|// Обрабатываем в цикле результат запроса --------------------------------//
|Х=0;
|Для Каждого Кол Из Реззапроса.Колонки Цикл                                        //
|	Х=Х+1;
|	Сообщить(""|	 QRES.""+Кол.Имя+?(Х<Реззапроса.Колонки.Количество(),"","",""""));
|	
|	//-------------- Градусник +1 ----------------------------------------//
|	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;  //
|КонецЦикла;	
|Сообщить(""|    INTO ТМП"");
|Сообщить(""| FROM &QRES as QRES  """""");
|//------------------ конец обработки результата запроса ------------------//
|");

КонецПроцедуры

Процедура КоманднаяПанель6СгенеритьТекстОтчетаСПостроителем(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	
	ТХТ.ДобавитьСтроку(" Процедура КнопкаВыполнитьНажатие(Кнопка)
    |//          Отчет/обработка должна иметь реквизит Построитель типа ПостроительОтчета
	|   Построитель.ВыводитьОбщиеИтоги=Истина;
	|   Построитель.ТекстЗаголовка="""+ЗаголовокОтчета+""""+";
	|   Построитель.Параметры.Очистить();
	|");
	
	
	Для каждого  Стр Из ТППараметров Цикл
		Значение=Стр.Значение;
		ТХТ.ДобавитьСтроку("    Построитель.Параметры.Вставить("""+Стр.Имя+""",   <<<"+Значение+">>>   );" );
	КонецЦикла; 
	
	Если РасшифровкаЯчеек=Истина Тогда
		ТХТ.ДобавитьСтроку("    Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;");
	КонецЕсли;
		
	    
    
    
    ТХТ.ДобавитьСтроку("    Построитель.Выполнить();
	|   Построитель.МакетОформления=ПолучитьМакетОформления(СтандартноеОформление.ТРАВА);
	|   Построитель.ОформитьМакет();
	|   Построитель.Вывести();");
    ТХТ.ДобавитьСтроку("КонецПроцедуры");
    ТХТ.ДобавитьСтроку("");

    
    ТХТ.ДобавитьСтроку("//--------------------------------------- ЗАПРОС ------------------------------------------");
	
	тхз=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	тхз=СтрЗаменить(тхз,"""","""""");
	
	ТХТ.ДобавитьСтроку("Построитель.Текст="""+СтрПолучитьСтроку(тхз,1));
	Для ы=2 по СтрЧислоСтрок(тхз)-1 Цикл
		ТХТ.ДобавитьСтроку("|	"+СтрПолучитьСтроку(тхз,Ы));
	КонецЦикла;	
    ТХТ.ДобавитьСтроку("|"+СтрПолучитьСтроку(тхз,СтрЧислоСтрок(тхз))+""";");
	
	ТХТ.ДобавитьСтроку("//--------------------------------------- ------ ------------------------------------------");

    
	
	ТХТ.Показать();	
КонецПроцедуры

Процедура ИтогиПоКолонкамВТЗНаФорме(ЭлементФормы)
	
	ЭлементФормы.Подвал=Истина;
	Для Каждого Кол Из ЭлементФормы.Колонки Цикл
		
		Кол.ОтображатьВПодвале=Истина;
		Попытка
			Кол.ОтображатьИтогиВПодвале=Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;	
	
	
КонецПроцедуры	


Процедура КоманднаяПанель12ИтогиПоКолонкам(Кнопка)
	ИтогиПоКолонкамВТЗНаФорме(ЭлементыФормы[ИмяТекТЗ()]);
КонецПроцедуры

Процедура КоманднаяПанель13ИтогиПоКолонкам(Кнопка)
	
	Для Каждого Элем Из ЭлементыФормы Цикл
		Если Найти(Элем.имя,"РезЗапроса")<>0 Тогда
			ИтогиПоКолонкамВТЗНаФорме(Элем);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПанельПрограмматораПараметрыЗапросаДляПрограмматора(Кнопка)
	
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("//----------- Параметры запроса, с закладки ""Параметры запроса"" ---------------------");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("Запрос.Параметры.Очистить();");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("                              ");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("Для Каждого СтрПЗ Из ТППараметров Цикл");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("	Запрос.Параметры.Вставить(СтрПЗ.Имя,СтрПЗ.Значение);");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("КонецЦикла;");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("//------------------------------------------------------------------------------------------------");
	
	
	
	
КонецПроцедуры

Процедура ПанельПрограмматораСконвертироватьКОМтзВНормальнуюТЗССостТипом(Кнопка)
	
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(" НормальнаяТЗ=СконвертироватьКомТЗВНормальнуюТЗ_ССостТипом(КомТЗ);// Колонки нормальной тз имеют составной тип");

	
КонецПроцедуры

Процедура ПанельПрограмматораСконвертироватьКОМтзВНормальнуюТЗ(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(" НормальнаяТЗ=СконвертироватьКомТЗВНормальнуюТЗ(КомТЗ);// колонки нормальной тз имеют простой тип");
КонецПроцедуры

Функция ВыделитьИзТекстаПрограммыИменаЭлементовФормы()
	ТХТ=ПолучитьЭлементФормыПрограммы().ПолучитьТекст();
	
	ТЗИменЭлементовФормы=Новый ТаблицаЗначений;
	ТЗИменЭлементовФормы.Колонки.Добавить("ИмяЭФ");
	
	
	Для Ы=1 По СтрЧислоСтрок(ТХТ) Цикл
		ТекСтр=СтрПолучитьСтроку(ТХТ,Ы);
		
		Поз=Найти(ВРЕГ(ТекСтр),"ЭЛЕМЕНТЫФОРМЫ.");
		
		Если Поз=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1; 
		
		Огрызок=Сред(ТекСтр,Поз,СтрДлина(ТекСтр));
		//ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;  // примем что разные элементы формы в одной строке не упоминаются
		Обрубок=СтрЗаменить(Огрызок,"ЭлементыФормы.","");
		//Индикатор.Значение=Индикатор.Значение+1;
		// Ищем первую точку с конца - это имя элемента формы
		ПозТочки=Найти(Обрубок,".");
		
		ТЗИменЭлементовФормы.Добавить().ИмяЭФ=ВРЕГ("// "+Лев(Обрубок,ПозТочки-1));
	КонецЦикла;	
	
	ТЗИменЭлементовФормы.Свернуть("ИмяЭФ","");
	
	ТекстВозврата="";
	Для Каждого Стр Из ТЗИменЭлементовФормы Цикл
		ТекстВозврата=ТекстВозврата+Символы.ПС+Стр.ИмяЭФ;
	КонецЦикла;
	Возврат ТекстВозврата;
КонецФункции


Процедура ПанельПрограмматораГенераторТекстаМодуляОбработки(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	ТХТ.ДобавитьСтроку("// Если Вы используете эту возможность консоли, это означает что Вы представляете что делать дальше.");
	ТХТ.ДобавитьСтроку("//-------------- Текст обработки сгенерирован в GtG's Консоли запросов "+ТекущаяДата()+"-------------------------------------");
	
	ТХТ.ДобавитьСтроку("//-------------- Переменные ----------------------");
	ТХТ.ДобавитьСтроку("Перем Построитель,РезЗапроса,ТППараметров;");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("//-------------- Требуются элементы на форме -----------------");
	ТХТ.ДобавитьСтроку(ВыделитьИзТекстаПрограммыИменаЭлементовФормы());
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
    ТХТ.ДобавитьСтроку("");

	
	//---------------<Функция , выдающая текст запроса>---------------------------// GtG // 22.03.2012 19:06:11
	ТХТ.ДобавитьСтроку("Функция ГЕН_ТекстЗапроса()  // Текст запроса для исполнения");
	ТХТ.ДобавитьСтроку("Возврат ");
	ТХТ.ДобавитьСтроку(ПреобразоватьТекстЗапросаВТекстМодуля().ПолучитьТекст());
	ТХТ.ДобавитьСтроку("КонецФункции //ГЕН_ТекстЗапроса //"+ТекущаяДата());
	//---------------<Процедура выполнения запроса>---------------------------// GtG // 22.03.2012 19:06:46
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	
	ТХТ.ДобавитьСтроку("Процедура СформироватьЗапрос(Запросом=Ложь) 
	|	 
	|		
	|	НачальноеВремя=ТекущаяДата();
	|	
	|	
	|	Построитель.ВыводитьОбщиеИтоги=ИСТИНА;
	|	Построитель.ТекстЗаголовка="""+ЗаголовокОтчета+""" ;
	|	
	|	Построитель.Параметры.Очистить();
	|	
	|	Для каждого  Стр Из ТППараметров Цикл
	|		Если Найти(Стр.Значение,""ДБФФайлВТипизированнуюТЗ"")<>0 Тогда
	|			Запросом=Истина;
	|		КонецЕсли;
	|	КонецЦикла;	
	|	
	|	
	|	Если Запросом=Истина Тогда  // запросом
	|		МВТ=Новый МенеджерВременныхТаблиц;
	|		Запрос=Новый Запрос();
	|		Запрос.МенеджерВременныхТаблиц=МВТ;
	|		
	|		Запрос.Текст=ГЕН_ТекстЗапроса();
	|		Запрос.Параметры.Очистить();
	|		Для каждого  Стр Из ТППараметров Цикл
	|			Если Найти(Стр.Значение,""ДБФФайлВТипизированнуюТЗ"")<>0 Тогда
	|				Значение=Вычислить(Стр.Значение);
	|			Иначе
	|				Значение=Стр.Значение;
	|			КонецЕсли;
	|			Запрос.Параметры.Вставить(Стр.Имя,Значение);
	|		КонецЦикла;
	|		
	|		РезЗапроса=Запрос.Выполнить().Выгрузить();
	|
	|	Иначе	// построителем
	|		 Построитель.Текст=ГЕН_ТекстЗапроса();
	|		
	|		Для каждого  Стр Из ТППараметров Цикл
	|			Значение=Стр.Значение;
	|			Построитель.Параметры.Вставить(Стр.Имя,Значение);
	|		КонецЦикла; 
	|
	|		РасшифровкаЯчеек=ИСТИНА;
	|
	|		Если РасшифровкаЯчеек=Истина Тогда
	|			Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	|		КонецЕсли;
	|		Построитель.Выполнить();
	|		Построитель.МакетОформления=ПолучитьМакетОформления(СтандартноеОформление.Трава);
	|		Построитель.ОформитьМакет();
	|		Построитель.Вывести();
	|		
	|	КонецЕсли;
	|КонецПроцедуры");	
	
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	
	
	
	//---------------<Процедура программной обработки результата запроса>---------------------------// GtG // 22.03.2012 19:07:03
	ТХТ.ДобавитьСтроку("Процедура  ГЕН_ПрограммнаяОбработкаРезультатаЗапроса() // Эту процедуру нужно вызвать каким-либо образом. ");
	
	ТХТ.ДобавитьСтроку("//-------------- Параметры запроса -----------------");
	ТХТ.ДобавитьСтроку("ТППараметров.Очистить();");
	ТХТ.ДобавитьСтроку("ТППараметров.Колонки.Добавить(""Имя"");");
	ТХТ.ДобавитьСтроку("ТППараметров.Колонки.Добавить(""Значение"");");
	
	Для Каждого Стр Из ТППараметров Цикл
		
		ТХТ.ДобавитьСтроку("СтрПарам=ТППараметров.Добавить();");
		ТХТ.ДобавитьСтроку("СтрПарам.Имя="+Стр.Имя+";");
		ТХТ.ДобавитьСтроку("СтрПарам.Значение= < "+Стр.Значение+" > ;   // Требуется художественная обработка по месту");
	КонецЦикла;	
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	ТХТ.ДобавитьСтроку(ПолучитьЭлементФормыПрограммы().ПолучитьТекст());
	ТХТ.ДобавитьСтроку("КонецПроцедуры //ГЕН_ПрограммнаяОбработкаРезультатаЗапроса //"+ТекущаяДата());
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	
	ТХТ.ДобавитьСтроку("Построитель=Новый ПостроительОтчета;");
	ТХТ.ДобавитьСтроку("ТППараметров=Новый ТаблицаЗначений;");
	
	
	ТХТ.Показать("Черновик обработки "+ТекущаяДата());
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель5ПарамТМПостр(Кнопка)
	ТХТ=Новый ТекстовыйДокумент;
	ТХТ.ДобавитьСтроку("Построитель.Параметры.Очистить();");
	ТХТ.ДобавитьСтроку("//----------------------------- параметры построителя -------------------//");
	Для Каждого Стр Из ТППараметров Цикл
		ТХТ.ДобавитьСтроку("Построитель.Параметры.Вставить("""+Стр.Имя+""","+Стр.Имя+");");
	КонецЦикла;
	
	ТХТ.Показать();

КонецПроцедуры

Процедура КоманднаяПанель13ЗначениеИзФайла(Кнопка)
ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		РезЗапроса=ЗначениеИзФайла(ДВФ.ПолноеИмяФайла);
		ЭлементыФормы.РезЗапроса.СоздатьКолонки();
		Предупреждение("Загружено из файла:
		|"+ДВФ.ПолноеИмяФайла,15);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель6УничтожениеВременныхТаблиц(Кнопка)
	
	ТЗВТ=Новый ТаблицаЗначений;
	ТЗВТ.Колонки.Добавить("ИмяВТ");
	ТЗВТ.Колонки.Добавить("ПризнакУдаления",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Любой)));
	
	Т=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Для Ы=1 по СтрЧислоСтрок(Т) цикл
		
		ТекСтр=СтрПолучитьСтроку(Т,Ы);
		Если Найти(ТекСтр,"ПОМЕСТИТЬ")<>0 ИЛИ  Найти(ТекСтр,"INTO")<>0 Тогда
			ИмяВТ=СтрЗаменить(ТекСтр,"ПОМЕСТИТЬ","");
			ИмяВТ=СтрЗаменить(ИмяВТ,"INTO","");
			ИмяВТ=СтрЗаменить(ИмяВТ,";","");
			Стр=ТЗВТ.Добавить();
			Стр.ИмяВТ=СокрЛП(ИмяВТ);
			Стр.ПризнакУдаления=1;
		ИначеЕсли Найти(ТекСтр,"УНИЧТОЖИТЬ")<>0 ИЛИ  Найти(ТекСтр,"DELETE")<>0 Тогда
			ИмяВТ=СтрЗаменить(ТекСтр,"УНИЧТОЖИТЬ","");
			ИмяВТ=СтрЗаменить(ИмяВТ,"DELETE","");
			ИмяВТ=СтрЗаменить(ИмяВТ,";","");
			Стр=ТЗВТ.Добавить();
			Стр.ИмяВТ=СокрЛП(ИмяВТ);
			Стр.ПризнакУдаления=-1;	
		КонецЕсли;	
	КонецЦикла;
	
	ТЗВТ.Свернуть( "ИмяВТ","ПризнакУдаления");
	
	ЭлементыФормы.РезЗапроса.Значение=ТЗВТ;
	ЭлементыФормы.РезЗапроса.СоздатьКолонки();
	
	ВТКУдалению=ТЗВТ.НайтиСтроки(Новый Структура("ПризнакУдаления",1));
	
	Если ВТКУдалению.Количество()<>0 Тогда
	    ЭлементыФормы.ТекстЗапроса.ДобавитьСтроку(";
		                                           |//---------- Удаление временных таблиц --------------//");
		Для Каждого Стр Из ВТКУдалению Цикл
			ЭлементыФормы.ТекстЗапроса.ДобавитьСтроку("УНИЧТОЖИТЬ  "+Стр.ИмяВТ+" ;");
		КонецЦикла;	
		
	иначе
		Предупреждение("Нет не удаленных временных таблиц ");
	КонецЕсли;
КонецПроцедуры

Процедура ПанельПрограмматораОчисткаРегистраСведений(Кнопка)
	
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("//--------- ОПАСНО!!!  ПОЛНАЯ ОЧИСТКА РЕГИСТРА СВЕДЕНИЙ!!! --------------------//");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("РС=РегистрыСведений.<<Имя Регистра сведений>>.СоздатьНаборЗаписей();");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("РС.Прочитать();");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("РС.Очистить();");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("РС.Записать();");
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("//--------- ОПАСНО!!! ОПАСНО!!! ОПАСНО!!! ОПАСНО!!! ОПАСНО!!! --------------------//");
	
	
КонецПроцедуры

Процедура ПанельПрограмматораТЗПакета(Кнопка)
	Перем Х;
	ВвестиЧисло(Х,"Номер таблицы результата",10,0);
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ТЗ_"+Х+"= ЭлементыФормы.РезЗапроса"+Х+".Значение;");
КонецПроцедуры

Процедура ПанельПрограмматораЗаполнитьЗначенияСвойств(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ЗаполнитьЗначенияСвойств(<<Приемник>> , <<Источник>>);//,СписокЗаполняемыхСвойств,СписокИсключемыхСвойств);");
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
		
КонецПроцедуры

Процедура КоманднаяПанель14ОткрытьДочернююКонсоль(Кнопка)
	
	НГУИД2="КОН"+Формат(ТекущаяДата(),"ДФ=HHmmss_ddMMyyyy");
	
	ДочерняяКонсоль=ЭтотОбъект.ПолучитьФорму("Форма",,НГУИД2);
	ЗДК=ДочерниеКонсоли.Добавить();
	ЗДК.Описание="Еще одна консоль";
	ЗДК.КлючУникальностиОкнаКонсоли=ДочерняяКонсоль.КлючУникальности;
	
	
	ДочерняяКонсоль.Открыть();
	
	
КонецПроцедуры

Процедура ДочерниеКонсолиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КлючУникальностиОкнаКонсоли=ЭтаФорма.КлючУникальности ТОгда
		ОформлениеСтроки.ЦветФона=Новый Цвет(200,200,255);
	КонецЕсли;	
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЭтаФорма.Обновить();
КонецПроцедуры

Процедура ПанельПрограмматораФорма_связаной_консоли_по_КУ(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("Ф1=ЭтотОбъект.ПолучитьФорму(""Форма"",,""<< Ключ уникальности консоли >>""); // далее к окну консоли и данным в нем можно обращаться через переменную Ф1, например Ф1.РезЗапроса");
КонецПроцедуры

Процедура КоманднаяПанель6Открыть_автосейв_Запроса(Кнопка)
	//БекапЗапроса=GTGКаталогВременныхФайлов()+"\1SQuery_bkp.1S.SQL";
	//
	//ТХТ=Новый ТекстовыйДокумент;
	//ТХТ.Прочитать(БекапЗапроса,КодировкаТекста.UTF8,);
	//
	//ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТХТ.ПолучитьТекст());
	
	
	ФОАС=ЭтотОбъект.ПолучитьФорму("ОткрытиеФайловАвтосейва",ЭтаФорма,1);
	ФОАС.РасширениеФайлов="1S.SQL";
	ФОАС.ОткрытьМодально();
	
	Если Вопрос("Открыть автоматически сохраненный текст запроса?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да ТОгда
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ФОАС.ЭлементыФормы.Просмотр.ПолучитьТекст());
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПанельПрограмматораАктивизироватьСтрТЗ(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.ТаблицаЗначений;");
КонецПроцедуры

Процедура ПанельПрограмматораСХБ(Кнопка)
	
ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("	
	|
	|ИменаБазыДанныхВТерминахСУБД=Истина; // Ложь - в терминах модели БД 1С
	|ОбъектыМетаданных="""";
	|// --------- Вариант по конкретному объекту/объектам ---------------------------------
	|//ОбъектыМетаданных=Новый Массив();
	|//ОбъектыМетаданных.Добавить(Метаданные.Справочники.RfrjqnjNfvCghfdjxybrYfghbvt);
	|//------------------------------------------------------------------------------------
	|
	|ЭлементыФормы.РезЗапроса.Значение=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД) ;
	|
	|//ЭлементыФормы.РезЗапроса.Значение=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД).Получить(0).Поля ; // Для получения данных из вложенной таблички
	|
	|
	|ЭлементыФормы.РезЗапроса.СоздатьКолонки();
	|");
	
КонецПроцедуры

Процедура КоманднаяПанель13ПросмотрТаблицыЗначенийИзЯчейки(Кнопка)
	ЗначениеЯчейки=ЭлементыФормы.Реззапроса.ТекущаяСтрока[ЭлементыФормы.РезЗапроса.ТекущаяКолонка.имя];
	
	Таб=Новый ТабличныйДокумент;
	
	Мак=ЭтотОбъект.ПолучитьМакет("просмотрТЗ");
	
	Обл=Мак.ПолучитьОбласть("Заг");
	Обл.Параметры.ИмяКолонки=ЭлементыФормы.РезЗапроса.ТекущаяКолонка.имя;
	
	
	НомерСтроки=Реззапроса.Индекс(ЭлементыФормы.Реззапроса.ТекущаяСтрока)+1;
	
	
	Обл.Параметры.НомерСтроки=НомерСтроки;
	Таб.Вывести(Обл);
	
	Х=0;
	Для Каждого Кол Из ЗначениеЯчейки.Колонки Цикл
		Обл=Мак.ПолучитьОбласть("Шапка|Кол");
		Обл.Параметры.ИмяКол=Кол.Имя;
		х=х+1;
		Если Х=1 Тогда
			Таб.Вывести(Обл);
		Иначе
			Таб.Присоединить(Обл);
		КонецЕсли;
	КонецЦикла;	
		
	
	Для Каждого Стр Из ЗначениеЯчейки Цикл
		Х=0;

		Для Каждого Кол Из ЗначениеЯчейки.Колонки Цикл
			Обл=Мак.ПолучитьОбласть("Знач|Кол");
			Обл.Параметры.Значение=Стр[Кол.Имя];
			х=х+1;
			Если Х=1 Тогда
				Таб.Вывести(Обл);
			Иначе
				Таб.Присоединить(Обл);
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	Таб.Показать();
	
	
	
КонецПроцедуры

Процедура Кнопка11Нажатие(Элемент)
	Сообщить(Построитель.ПолучитьЗапрос().Текст);
КонецПроцедуры

Процедура КоманднаяПанель13ОчиститьРезультаты(Кнопка)
	
	СписокУдаляемыхЭлементов=Новый Массив;
	
	Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 и ЭлемФормы.Имя<>"РезЗапроса" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлемФормы);
		КонецЕсли;
	КонецЦикла;
	   
	
	СписокУдаляемыхСтраниц=Новый Массив;
	 Для Каждого СтрП1 Из ЭлементыФормы.Панель1.Страницы Цикл
		   Если СтрП1.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		  
	   	   СписокУдаляемыхСтраниц.Добавить(СтрП1);
	КонецЦикла;
	   
	   
	Для Каждого УЭФ Из СписокУдаляемыхЭлементов Цикл
		ЭлементыФормы.Удалить(УЭФ);
	КонецЦикла;	
	
	Для Каждого УС Из СписокУдаляемыхСтраниц Цикл
		ЭлементыФормы.Панель1.Страницы.Удалить(УС);
	КонецЦикла;	

	Реззапроса.Очистить();
	Реззапроса=Неопределено;
	ЭлементыФормы.Реззапроса.Значение=Неопределено;
	ЭлементыФормы.Реззапроса.СоздатьКолонки();
	
	   
КонецПроцедуры

Процедура КоманднаяПанель13СписокКолонокТекстом(Кнопка)
	// Вставить содержимое обработчика.
	
	Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		   
		   Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 Тогда
			  
			  
			  Сообщить("// Таблица значений "+ЭлемФормы.Имя+"  Колонки:");
			  
			  Попытка
				  Для Каждого Кол Из ЭлемФормы.Значение.КОлонки Цикл
					  
					  Сообщить("	"+Кол.Имя);
				  КонецЦикла;
			  Исключение
			  КонецПопытки;
			  
			  
			  
			  
		   КонецЕсли;
	   КонецЦикла;

	
КонецПроцедуры

Процедура КоманднаяПанель1СписокПолейОтбораВТекст(Кнопка)
	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Измерение");
	ТЗ.Колонки.Добавить("Отбор");
	ТЗ.Колонки.Добавить("ТипЗначения");
	ТЗ.Колонки.Добавить("ПутьКДанным");
	ТЗ.Колонки.Добавить("Родитель");
	ТЗ.Колонки.Добавить("СписокЗначений");


	
	
	Для Каждого ДП из Построитель.ДоступныеПоля Цикл
		Стр=ТЗ.Добавить();		
		
		Стр.Имя=ДП.Имя;
		Стр.Измерение=ДП.Измерение;
		Стр.Отбор   = дп.Отбор;
		Стр.ТипЗначения= дп.ТипЗначения;
		Стр.ПутьКДанным=ДП.ПутьКДанным;
		Стр.Родитель=дп.Родитель;
		Стр.СписокЗначений=дп.СписокЗначений;
	КонецЦикла;
	
	
	ЭлементыФормы.ТабЗнач.Значение=ТЗ;
	ЭлементыФормы.ТабЗнач.СоздатьКолонки();
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.ТаблицаЗначений;
КонецПроцедуры


Процедура ОтправкаТЗВДругуюКонсоль(ТЗ)
	СписокКонсолей=Новый СписокЗначений;
	СписокКонсолей.ЗагрузитьЗначения(ДочерниеКонсоли.ВыгрузитьКолонку("КлючУникальностиОкнаКонсоли"));
	
	ХЗ=СписокКонсолей.ВыбратьЭлемент("Консоль");
	
	Если ХЗ= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФдругойК=ЭтотОбъект.ПолучитьФорму("Форма",,ХЗ.Значение);
	
	ФдругойК.ЭлементыФормы.ТабЗнач.Значение=ТЗ;
	ФдругойК.ЭлементыФормы.ТабЗнач.СоздатьКолонки();
КонецПроцедуры	



Процедура КоманднаяПанель12Отправить_ТЗ_ВДругуюКонсоль(Кнопка)
	ОтправкаТЗВДругуюКонсоль(ЭлементыФормы[ИмяТекТЗ()].Значение);
КонецПроцедуры

Процедура КоманднаяПанель13ОтправитьРезультатЗапросаВТЗ(Кнопка)
	
	ИмяТЗ=ЭлементыФормы.Панель1.ТекущаяСтраница.Имя;
	
	Для Каждого Элем Из ЭлементыФормы Цикл
		Если Элем.Имя=ИмяТЗ и ТипЗнч(Элем)=Тип("ТабличноеПоле") Тогда
			ЭлементыФормы.ТабЗнач.Значение=Элем.Значение;
			ЭлементыФормы.ТабЗнач.СоздатьКолонки();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель13ОтправитьРЗВДругуюК(Кнопка)
	
	ИмяТЗ=ЭлементыФормы.Панель1.ТекущаяСтраница.Имя;
	
	Для Каждого Элем Из ЭлементыФормы Цикл
		Если Элем.Имя=ИмяТЗ и ТипЗнч(Элем)=Тип("ТабличноеПоле") Тогда
			ОтправкаТЗВДругуюКонсоль(Элем.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	
	
	КонецПроцедуры

Процедура КоманднаяПанель12ДобавитьТЗВЗапрос(Кнопка)
	
	ТХТ="//--------------------------------------------------------//
	    |//            ТАБЛИЦА ЗНАЧЕНИЙ                            //  
		|//--------------------------------------------------------//
		|Выбрать
		|";
		
		
		
	Для Каждого Кол из ЭлементыФормы[ИмяТекТЗ()].Значение.Колонки Цикл
		
		ТХТ=ТХТ+"
		|ТАБЛИЦА_ЗНАЧЕНИЙ."+Кол.Имя+" как "+Кол.Имя+",";
	КонецЦикла;
	
	ТХТ=Лев(ТХТ,СтрДлина(ТХТ)-1);
	
	ТХТ=ТХТ+"
	| ПОМЕСТИТЬ ТЗ_КОНСОЛИ_"+ИмяТекТЗ()+"
	|ИЗ &ТАБЛИЦА_ЗНАЧЕНИЙ_"+ИмяТекТЗ()+" как ТАБЛИЦА_ЗНАЧЕНИЙ
	|;
	|//--------------------------------------------------------//
	|";
	
	ЭлементыФормы.ТекстЗапроса.ДобавитьСтроку(тхт);
	
	Стр=ТППараметров.Найти("ТАБЛИЦА_ЗНАЧЕНИЙ_"+ИмяТекТЗ(),"Имя");
	Если Стр=Неопределено ТОгда
		Стр=ТППараметров.Добавить();
		Стр.Имя="ТАБЛИЦА_ЗНАЧЕНИЙ_"+ИмяТекТЗ();
	КонецЕсли;
	
	Стр.Значение="ТАБЛИЦА_ЗНАЧЕНИЙ_"+ИмяТекТЗ();
	
	
КонецПроцедуры

Процедура ПанельПрограмматораРеквизитыОбъектаМетаданных(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(  "		//--------------- Скрипт, для получения реквизитов объекта --------------
|		ОчиститьСообщения();
|		
|		ОбъектМД=Метаданные.Документы.СменаККМ;
|		Сообщить(""//=====  ""+ОбъектМД+""  =====//"");
|		
|		Попытка
|			Сообщить(""//--------------- СтандартныеРеквизиты ---------------//"");
|		Для Каждого Реквизит Из ОбъектМД.СтандартныеРеквизиты Цикл
|			Сообщить(Реквизит.Имя);
|		КонецЦикла;	
|		Исключение КонецПопытки;
|		
|		Попытка
|			Сообщить(""//--------------- Измерения ---------------//"");
|		Для Каждого Реквизит Из ОбъектМД.Измерения Цикл
|			Сообщить(Реквизит.Имя);
|		КонецЦикла;	
|		Исключение КонецПопытки;
|		
|		
|		Попытка
|			Сообщить(""//--------------- Ресурсы ---------------//"");
|		Для Каждого Реквизит Из ОбъектМД.Ресурсы Цикл
|			Сообщить(Реквизит.Имя);
|		КонецЦикла;	
|		Исключение КонецПопытки;
|		
|		Попытка
|			Сообщить(""//--------------- Реквизиты ---------------//"");
|		Для Каждого Реквизит Из ОбъектМД.Реквизиты Цикл
|			Сообщить(Реквизит.Имя);
|		КонецЦикла;	
|		Исключение КонецПопытки;
|		
|		
|		Попытка
|			Сообщить(""//--------------- Табличные части ---------------//"");
|		Для Каждого Реквизит Из ОбъектМД.ТабличныеЧасти Цикл
|			Сообщить(""//----- ""+Реквизит.Имя+""  : ----------------------------"");
|			Для Каждого Кол Из Реквизит.Реквизиты Цикл
|				Сообщить(""    ""+Кол.Имя);
|			КонецЦикла;	
|		КонецЦикла;	
|		Исключение 
|		Сообщить(ОписаниеОшибки());	
|		КонецПопытки;
|	
 |"); // Сгенерировано в GtG's Консоль запросов. 26.09.2013 14:29:08


КонецПроцедуры


Процедура СтруктураРегистровНакопления()
	
	 ИменаБазыДанныхВТерминахСУБД=Истина; // Ложь - в терминах модели БД 1С
	 ОбъектыМетаданных=Новый Массив;

	 СХ=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД) ;
	 
	 
	 Таб=Новый ТабличныйДокумент;
	 
	 
	 Макет=ЭтотОбъект.ПолучитьМакет("СтруктураХраненияОбъекта");
	 
	 
	 Область=Макет.ПолучитьОбласть("Шапка");
	 Область.Параметры.СИБ=СтрокаСоединенияИнформационнойБазы();
	 Таб.Вывести(Область);
	 
	 
	 Область=Макет.ПолучитьОбласть("ДанныеОбъектаШ");
	 Таб.Вывести(Область);
	 
	 ОбластьПоля=Макет.ПолучитьОбласть("раздел");
	 ОбластьПоля.Параметры.раздел="Поля";
	 
	 ОбластьИндексы=Макет.ПолучитьОбласть("раздел");
	 ОбластьИндексы.Параметры.раздел="Индексы";
	 
	 ОбластьДетали=Макет.ПолучитьОбласть("Детали");
	 
	 
	 ОбластьПоля=Макет.ПолучитьОбласть("Поле");
	 
	 ОбластьШИ=Макет.ПолучитьОбласть("ШапкаИндекса");
	 
	 Для Каждого Стр Из СХ Цикл
		 //Сообщить(""+Стр.ИмяТаблицыХранения);
		 Если Найти(Стр.ИмяТаблицы,"РегистрНакопления")  = 0 Тогда
			 Продолжить;
		КонецЕсли;
		 
		 Область=Макет.ПолучитьОбласть("ДанныеОбъектаС");

		 Область.Параметры.Заполнить(Стр);
		 
		 Таб.Вывести(Область);
		 
		 //Таб.НачатьГруппуСтрок(Стр.ИмяТаблицыХранения,Ложь);
		 
		 //Таб.Вывести(ОбластьДетали);
		 
		 //Таб.Вывести(ОбластьПоля);
		 
		 ТЗПолей=Стр.Поля;
		 Для Каждого П Из ТЗПолей Цикл
		   Если Найти(П.ИмяПоля,"Склад")  = 0 Тогда
				 Продолжить;
			КонецЕсли;

			 ОбластьПоля.Параметры.Заполнить(П);
			 Таб.Вывести(ОбластьПоля);
		 КонецЦикла;	 
		 
		 //Таб.ЗакончитьГруппуСтрок();
		 
	КонецЦикла; 
	 
	 
	
	Таб.Показать("Структура хранения БД");
	 
	
КонецПроцедуры

Процедура ПодробнаяСтруктураХраненияБазыДанных()
	
	 
	  
	
	 ИменаБазыДанныхВТерминахСУБД=Истина; // Ложь - в терминах модели БД 1С
	 ОбъектыМетаданных=Новый Массив;

	 СХ=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД) ;
	 
	 СХ.Сортировать("ИмяТаблицы");
	 
	 Таб=Новый ТабличныйДокумент;
	 
	 
	 Макет=ЭтотОбъект.ПолучитьМакет("СтруктураХраненияОбъекта");
	 
	 
	 Область=Макет.ПолучитьОбласть("Шапка");
	 Область.Параметры.СИБ=СтрокаСоединенияИнформационнойБазы();
	 Таб.Вывести(Область);
	 
	 
	 Область=Макет.ПолучитьОбласть("ДанныеОбъектаШ");
	 Таб.Вывести(Область);
	 
	 ОбластьПоля=Макет.ПолучитьОбласть("раздел");
	 ОбластьПоля.Параметры.раздел="Поля";
	 
	 ОбластьИндексы=Макет.ПолучитьОбласть("раздел");
	 ОбластьИндексы.Параметры.раздел="Индексы";
	 
	 ОбластьДетали=Макет.ПолучитьОбласть("Детали");
	 
	 
	 ОбластьПоля=Макет.ПолучитьОбласть("Поле");
	 
	 ОбластьШИ=Макет.ПолучитьОбласть("ШапкаИндекса");
	 
	 Для Каждого Стр Из СХ Цикл
		 
		 Область=Макет.ПолучитьОбласть("ДанныеОбъектаС");

		 Область.Параметры.Заполнить(Стр);
		 
		 Таб.Вывести(Область);
		 
		 Таб.НачатьГруппуСтрок(Стр.ИмяТаблицыХранения,Ложь);
		 
		 Таб.Вывести(ОбластьДетали);
		 
		 Таб.Вывести(ОбластьПоля);
		 
		 ТЗПолей=Стр.Поля;
		 Для Каждого П Из ТЗПолей Цикл
			 ОбластьПоля.Параметры.Заполнить(П);
			 Таб.Вывести(ОбластьПоля);
		 КонецЦикла;	 
		 
		 
		 
		 
		 
		 Таб.Вывести(ОбластьИндексы);
		 
		  ТЗПолей=Стр.Индексы;
		  Для Каждого П Из ТЗПолей Цикл
			  
			  
			 ОбластьШИ.Параметры.Заполнить(П);
			 Таб.Вывести(ОбластьШИ);
			 
			 Таб.НачатьГруппуСтрок(П.ИмяИндексаХранения);
			 
			 ТЗПолейИндекса=П.Поля;
			 Для Каждого ПИ Из ТЗПолейИндекса Цикл
				 ОбластьПоля.Параметры.Заполнить(Пи);
				 Таб.Вывести(ОбластьПоля);
			 КонецЦикла; 
			 
			 Таб.ЗакончитьГруппуСтрок();
		 КонецЦикла;	 
		 

		 
		 
		 Таб.ЗакончитьГруппуСтрок();
		 
	КонецЦикла; 
	 
	 
	
	Таб.Показать("Структура хранения БД "+ИмяТекущейИБ());
	 
	 

	 
	
КонецПроцедуры	

Процедура ПанельПрограмматораПодробнаяСтруктураХраненияБД(Кнопка)
	 ПодробнаяСтруктураХраненияБазыДанных();
КонецПроцедуры

Процедура ПанельПрограмматораГенераторСкриптовОчисткиМертвыхДвиженийИИтоговРегистровОстатков(Кнопка)
	ИменаБазыДанныхВТерминахСУБД=Истина; // Ложь - в терминах модели БД 1С
	ОбъектыМетаданных=Новый Массив;
	 
	Для Каждого РСВ Из Метаданные.РегистрыНакопления Цикл
		 ОбъектыМетаданных.Добавить(Рсв);
	КонецЦикла; 
	 

	СХ=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД) ;
	
	ТХТ=Новый ТекстовыйДокумент;
	
	 
	Для Каждого Стр Из СХ Цикл
		ТХТ.ДобавитьСтроку("-----------------------------------------------");
		ТХТ.ДобавитьСтроку("------   "+ Стр.Метаданные+"   ---------");
		
		МассивРесурсов=Новый Массив;
		
		Для Каждого Рес Из Метаданные.РегистрыНакопления[СтрЗаменить(Стр.Метаданные,"РегистрНакопления.","")].Ресурсы Цикл
			МассивРесурсов.Добавить(Рес.Имя);
		КонецЦикла;	
		
		
		Если найти(Стр.ИмяТаблицыХранения,"AccumRgOpt")<>0 Тогда
			продолжить;
		КонецЕсли;	
		
		ТХТ.ДобавитьСтроку("DELETE FROM "+Стр.ИмяТаблицыХранения);
		ТХТ.ДобавитьСтроку("     WHERE ");
		
		
		ТекстУсловия="";
		Для Каждого Поле из Стр.Поля Цикл
			
			Если МассивРесурсов.Найти(Поле.ИмяПоля)=Неопределено ТОгда
				Продолжить;
			КонецЕсли;	
			
			  ТекстУсловия=ТекстУсловия+Символы.ПС+"     "+Поле.ИмяПоляХранения+" = 0          ---"+Поле.ИмяПоля;
			  ТекстУсловия=ТекстУсловия+Символы.ПС+"AND";
		КонецЦикла;	
		ТекстУсловия=Лев(ТекстУсловия,СтрДлина(ТекстУсловия)-4);
		
		ТХТ.ДобавитьСтроку(ТекстУсловия);
		ТХТ.ДобавитьСтроку(";"); 
	КонецЦикла; 
	
	ТХТ.Показать();
	 

КонецПроцедуры

Процедура КолонкиDBFНажатие(Элемент)
	Стр=ЭлементыФормы.ТППараметров.ТекущаяСтрока;
	
	ДБФ=Новый XBase;
	
	ИмяФайлаДБФ=СтрЗаменить(Стр.Значение,"ДБФФайлВТипизированнуюТЗ(""","");
	ИмяФайлаДБФ=СтрЗаменить(ИмяФайлаДБФ,""")","");
	
	
	Попытка
		ДБФ.ОткрытьФайл(ИмяФайлаДБФ);
	Исключение
		Предупреждение("Не удалось открыть файл "+ИмяФайлаДБФ);
		Возврат;
	КонецПопытки;
	
	СписокКолонок="// КОЛОНКИ DBF "+ИмяФайлаДБФ+Символы.ПС+"//   ";
	ЗапросПоДБФ="Выбрать "+Символы.ПС;
	
	Для Каждого Кол Из ДБФ.поля Цикл
		СписокКолонок=СписокКолонок+Кол.Имя+", ";
		ЗапросПоДБФ=ЗапросПоДБФ+Символы.ПС+"	DBF."+Кол.Имя+",";
	КонецЦикла;	
	
	СписокКолонок=Лев(СписокКолонок,СтрДлина(СписокКолонок)-2);
	ЗапросПоДБФ=Лев(ЗапросПоДБФ,СтрДлина(ЗапросПоДБФ)-1)+Символы.ПС+"INTO _DBF"+Символы.ПС+" ИЗ &DBF as DBF ;";
	
	ТХТ=Новый ТекстовыйДокумент;
	
	ТХТ.ДобавитьСтроку(СписокКолонок);
	ТХТ.ДобавитьСтроку("//------------------------------------------------------------------");
	ТХТ.ДобавитьСтроку(ЗапросПоДБФ);
	
	ТХТ.Показать();
	
КонецПроцедуры

Процедура КоманднаяПанель13КоличествоСтрокРезультатаЗапроса(Кнопка)
	Для Каждого Элем Из ЭлементыФормы Цикл
		
		Если Найти(Элем.Имя,"РезЗапроса")<>0 Тогда
			Сообщить(""+Элем.Имя+"  Строк: "+ ЭлементыФормы[Элем.Имя].Значение.Количество());
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры











Процедура КоманднаяПанель16ВосстановитьПараметрыИзАвтосейва(Кнопка)
	ФОАС=ЭтотОбъект.ПолучитьФорму("ОткрытиеФайловАвтосейва",ЭтаФорма,1);
	ФОАС.РасширениеФайлов="ParamBKP";
	ФОАС.ОткрытьМодально();
	
	Если Вопрос("Открыть автоматически сохраненные параметры запроса?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да ТОгда
		ЭлементыФормы.ТППараметров.Значение=ФОАС.ЭлементыФормы.ТППараметров.Значение;
		ЭлементыФормы.ТППараметров.СоздатьКолонки();
		Если ЭлементыФормы.ТППараметров.Колонки.Количество()=0 Тогда
			ЭлементыФормы.ТППараметров.Колонки.Добавить("Имя");
			ЭлементыФормы.ТППараметров.Колонки.Добавить("Значение");
		КонецЕсли;	
			
			
		
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель6ПроверкаСодержимогоВременныхТаблиц(Кнопка)
	
	Стр=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ДобавитьТестВременной=Ложь;
	
	НовыйТекстЗапроса="";
	
	Для Ы=1 по СтрЧислоСтрок(Стр) Цикл
		
		ТекСтр= СтрПолучитьСтроку(Стр,Ы);
		Если Найти(ТекСтр,"ПОМЕСТИТЬ")<>0  Тогда 
			ДобавитьТестВременной=Истина;
			ИмяВременной= СтрЗаменить(ТекСтр,"ПОМЕСТИТЬ ","");
		КонецЕсли;
		
		Если Найти(ТекСтр,"INTO")<>0 Тогда 
			ДобавитьТестВременной=Истина;
			ИмяВременной= СтрЗаменить(ТекСтр,"INTO ","");
		КонецЕсли;
		
		
		Если Найти(ТекСтр,";")<>0 Тогда
			
			Если ДобавитьТестВременной=Истина ТОгда
				ТекСтр=СтрЗаменить(ТекСтр,";",";"+Символы.ПС+"Выбрать * из "+ИмяВременной+" ;  //-------------------------------------- Просмотр временной таблицы "+ИмяВременной+Символы.ПС);
				ДобавитьТестВременной=Ложь;
				ИмяВременной= "";
			КонецЕсли;
		КонецЕсли;
		
		
		НовыйТекстЗапроса=НовыйТекстЗапроса+символы.ПС+ТекСтр;
	КонецЦикла;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(НовыйТекстЗапроса);
	
	
КонецПроцедуры

Процедура КоманднаяПанель12ФайлИзOpenOffice(Кнопка)
	
	Ф=ЭтотОбъект.ПолучитьФорму("ПараметрыФайлаОО",ЭтаФорма,1);
	Ф.ОткрытьМодально();
	
	
	ЭлементыФормы[ИмяТекТЗ()].Значение=ЗагрузитьФайлЧерезОО(ф.Файл,ф.ИндексЛиста,ф.ИндексПервойСтроки,ф.ИндексПервойКолонки,ф.КолвоКолонок,ф.КолвоСтрокФайла,Ф.ТабТипизацииОО) ;
	
	ЭлементыФормы[ИмяТекТЗ()].СоздатьКолонки();
	
	
КонецПроцедуры

Процедура КоманднаяПанель12ОчиститьТабЗнач(Кнопка)
	
	Если ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ОсновнаяТаблицаЗначений ТОгда
		ИмяТЗ="ТабЗнач";
	ИначеЕсли ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ДопТаблицаЗначений1 ТОгда
		ИмяТЗ="ДопТабЗнач1";
	ИначеЕсли ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ДопТаблицаЗначений2 ТОгда
		ИмяТЗ="ДопТабЗнач2";
	КонецЕсли;	
	
	Если Вопрос("Очистить таб.знач "+ИмяТЗ+" ?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да ТОгда
		ЭлементыФормы[ИмяТЗ].Значение.Очистить();
		ЭлементыФормы[ИмяТЗ].Значение.Колонки.Очистить();
		ЭлементыФормы[ИмяТЗ].СоздатьКолонки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицыЗначенийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ОсновнаяТаблицаЗначений ТОгда
		ИмяТЗ="ТабЗнач";
	ИначеЕсли ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ДопТаблицаЗначений1 ТОгда
		ИмяТЗ="ДопТабЗнач1";
	ИначеЕсли ЭлементыФормы.ТаблицыЗначений.ТекущаяСтраница=ЭлементыФормы.ТаблицыЗначений.Страницы.ДопТаблицаЗначений2 ТОгда
		ИмяТЗ="ДопТабЗнач2";
	КонецЕсли;	

	ЭлементыФормы.КоманднаяПанельТЗ.ИсточникДействий = ЭлементыФормы[ИмяТЗ];
КонецПроцедуры

Процедура КоманднаяПанель12СохранитьТЗвФайл(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		ЗначениеВФайл(ДВФ.ПолноеИмяФайла,ЭлементыФормы[ИмяТекТЗ()].Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ПанельПрограмматораДействие(Кнопка)
  ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("  
  |  //--------------ADO--------------------------------------------------------------------------------------------------------    // GtG  //
  |  АДО=Новый COMОбъект(""ADOdb.Connection"");
  |  АДО.Open(""Driver={PostgreSQL UNICODE};Server=<<АДРЕС_СЕРВЕРА>>;Port=<<ПОРТ>>;Database=<<ИМЯБАЗЫДАННЫХ>>;Uid=<<ИМЯПОЛЬЗОВАТЕЛЯБД>>;Pwd=<<ПАРОЛЬ>>;"");
  |  
  |  Адо_РекордСет=Новый ComОбъект(""ADODB.recordset"");
  |  
  |  Попытка 
  |      Текст=""SELECT 111111 as SOME_QUERY "";
  |      АДО_рекордСет.Open(Текст,АДО,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
  |  Исключение
  |      Сообщить(""Не смог выполнить запрос к PG ""+ОписаниеОшибки());
  |  КонецПопытки;
  |  
  |  АДО_рекордСет.MoveFirst(); // переход на первую строку выборки
  |  
  |  Пока АДО_рекордСет.EOF()=0 Цикл
  |      
  |      Сообщить(""------------------------------------------------------------------------------------"");
  |      Сообщить(АДО_рекордСет.Fields(0).Value);
  |      АДО_рекордСет.MoveNext();// переход на следующую строку выборки
  |  КонецЦикла;    
  |");  
    



КонецПроцедуры

Процедура ПанельПрограмматораСтруктураХраненияРегистровНакопления(Кнопка)
	СтруктураРегистровНакопления();
КонецПроцедуры

Процедура ПанельПрограмматораТекстСозданияТипизированнойТЗПоРезультатуЗапроса(Кнопка)
ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("
	|СформироватьЗапрос(Истина);
	|
	|для Каждого Кол Из ЭлементыФормы.Реззапроса.Значение.Колонки Цикл    // если нужно обратиться к результату пакетного запроса то ... .РеззапросаN.Значение ...
	|	
	|	ИмяТаблицы=""ТЗ"";
	|	ТипЗначенияКол=Кол.типЗначения;
	|	Ква="""";
	|	
	|	Если ТипЗначенияКол.СодержитТип(Тип(""Булево"")) Тогда
	|		ОпТип=""Булево"";
	|	ИначеЕсли ТипЗначенияКол.СодержитТип(Тип(""Строка"")) Тогда
	|		ОпТип=""Строка"";
	|		Ква="",Новый КвалификаторыСтроки(""+ТипЗначенияКол.КвалификаторыСтроки.длина+"",ДопустимаяДлина.Переменная)"";
	|	ИначеЕсли 	ТипЗначенияКол.СодержитТип(Тип(""Число"")) Тогда
	|		ОпТип=""Число"";
	|		Ква="",Новый КвалификаторыЧисла(""+ТипЗначенияКол.КвалификаторыЧисла.Разрядность+"",""+ТипЗначенияКол.КвалификаторыЧисла.РазрядностьДробнойЧасти+"",ДопустимыйЗнак.Любой)"";
	|		
	|		
	|	ИначеЕсли 	ТипЗначенияКол.СодержитТип(Тип(""Дата"")) Тогда
	|		ОпТип=""Дата"";
	|		Ква="",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)"";
	|		
	|		
	|	КонецЕсли;	
	|	
	|	Сообщить("" ""+ИмяТаблицы+"".Колонки.Добавить(""""""+Кол.Имя+"""""", Новый ОписаниеТипов(""""""+ОпТип+""""""""+Ква+""));"");
	|КонецЦикла;	
	|");
КонецПроцедуры

Процедура ПанельПрограмматораВывестиТЗ_В_ТаблицуЗначений(Кнопка)
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку("
	| // --------- Выводим ТЗ -----------------------------//
	| ЭлементыФормы.ТабЗнач.Значение= << ТЗ >>;
	| ЭлементыФормы.ТабЗнач.СоздатьКолонки();
	|");
КонецПроцедуры

Процедура ПанельПрограмматораРезультатЗапросаВЦСВ(Кнопка)
	
	Сообщить("Номер результата запроса. Первая закладка 0, далее 2 и т.д.");
	
	НомерРезультата=0;
	ВвестиЧисло(НомерРезультата,"Номер результата запроса. Первая закладка 0, далее 2 и т.д.",12,0);
	
	НомерРезЗапроса=СокрЛп(Формат(НомерРезультата,"ЧН=' '; ЧГ="));
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Фильтр=("*.CSV|*.CSV");
	ДВФ.Выбрать();
	
	ИмяФайла=ДВФ.ПолноеИмяФайла;
	
	
	ТХТ="//---------------<Выводим результат {"+НомерРезультата+"} со страницы результата запроса в CSV файл>---------------------------//"+Символы.Пс+Символы.Пс;
	ТХТ=ТХТ+"ЗТ=Новый ЗаписьТекста("""+ИмяФайла+""");"+Символы.ПС;
	
	ТХТ=ТХТ+"ТЗ=ЭлементыФормы.РезЗапроса"+НомерРезЗапроса+".Значение;"+Символы.ПС;
	
	
	ТЗ=ЭлементыФормы["РезЗапроса"+НомерРезЗапроса].Значение;
	
	Если ТЗ.Колонки.Количество()=0 Тогда
		Предупреждение("У результата "+НомерРезультата+" нет колонок! Выводить нечего!");
		Возврат;
	КонецЕсли;	
	
	
	Стр="";
	
	Х=0;
	Для Каждого Кол из ТЗ.Колонки Цикл
		Х=Х+1;
		Если Х<ТЗ.Колонки.Количество() Тогда
			Стр=Стр+""""+Кол.Имя+"""+Символы.Таб+";
		иначе  
			Стр=Стр+""""+Кол.Имя+"""+Символы.ПС";
		КонецЕсли;
	КонецЦикла;
	
	ТХТ =ТХТ+"ЗТ.Записать("+Стр+");"+Символы.ПС;
	
	
	ТХТ=ТХТ+"Для Каждого Стр из ТЗ Цикл "+Символы.ПС;
	
	Х=0;
	Стр="СтрЗТ=";
	Для Каждого Кол из ТЗ.Колонки Цикл
		Х=Х+1;
		Если Х<ТЗ.Колонки.Количество() Тогда
			Стр=Стр+"		Формат(Стр."+Кол.Имя+",""ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0; ДФ=dd.MM.yyyy; БЛ=Ложь; БИ=Истина"")+Символы.Таб+"+Символы.ПС;
		иначе  
			Стр=Стр+"		Формат(Стр."+Кол.Имя+",""ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0; ДФ=dd.MM.yyyy; БЛ=Ложь; БИ=Истина"")+Символы.ПС;";
		КонецЕсли;
	КонецЦикла;

	ТХТ=ТХТ+"	"+Стр+Символы.ПС;
	
	ТХТ=ТХТ+"	ЗТ.Записать(СтрЗТ);"+Символы.ПС;
	
	
	ТХТ=ТХТ+"КонецЦикла;"+символы.ПС;
	ТХТ=ТХТ+"	ЗТ.Закрыть();"+Символы.ПС;
	ТХТ=ТХТ+"	Сообщить("" Готово! Сохранено в "+ИмяФайла+""");"+Символы.ПС;
	ТХТ=ТХТ+"//--------------------------------------------------------//";
	
	
	
	
	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(ТХТ);
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель13Сгенерить_текст_запроса_по_результату_запроса(Кнопка)

	ТХТ=Новый ТекстовыйДокумент;
	
	Х=0;
	
	Для Каждого Элем Из ЭлементыФормы Цикл
		
		Если Найти(Элем.Имя,"РезЗапроса")<>0 Тогда
			
			ТХТ.ДобавитьСтроку("""//-------------------------  "+Элем.Имя+"  -------------------------//");
			ТХТ.ДобавитьСтроку("|SELECT ");
			
			Х=Х+1;
			
			ТЗ=ЭлементыФормы[Элем.Имя].Значение;
			
			ИмяТТ="ттт"+Формат(Х,"ЧГ=0");
			ИмяТмпТТ="ТМПтт"+Формат(Х,"ЧГ=0");
			
			НК=0;
			КК=ТЗ.Колонки.Количество();
			Для Каждого Кол из ТЗ.Колонки Цикл
				НК=НК+1;
				ТХТ.ДобавитьСтроку("|   "+ИмяТТ+"."+Кол.Имя+" as "+Кол.Имя+?(НК<КК,",",""));
			КонецЦикла;
			ТХТ.ДобавитьСтроку("|INTO "+ИмяТмпТТ);
			ТХТ.ДобавитьСтроку("|FROM &"+Элем.Имя+" as "+ИмяТТ); 
			ТХТ.ДобавитьСтроку("| ;"); 
			ТХТ.ДобавитьСтроку("|"";");
		КонецЕсли;
	КонецЦикла;	
	
	ТХТ.Показать();


КонецПроцедуры

Процедура ТППараметровВидГраницыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(ВидГраницы.Включая);
	Элемент.СписокВыбора.Добавить(ВидГраницы.Исключая);
	
КонецПроцедуры

Процедура ПанельПрограмматораWS_Подключение(Кнопка)
		
ТХТ="	
	|АдресWSDL=""????"";       //Например ""http://bebebe.com:8080/bebe_bubu/ws/buh_exchange.1cws?wsdl"";
	|TargetNamespace=""????""; //Например ""http://localhost/bebe_bubu"" из первой строки WSDL  targetNamespace=""http://localhost/bebe_bubu""
	|DefinitionsName=""????""; //Например ""buh_exchange"" из первой строки WSDL definitions name=""buh_exchange""
	|PortName=""????"";        //Например   ""buh_exchangeSoap12""  в конце WSDL port name=""buh_exchangeSoap12"" binding=""tns:buh_exchangeSoap12Binding"">
	|
	|
	|Определение=Новый WSОпределения(СокрЛП(АдресWSDL));  // без пароля
	|
	|Прокси = Новый WSПрокси(Определение,
	|СокрЛП(TargetNamespace),//targetNamespace из WSDL
	|СокрЛП(DefinitionsName),//definitions name из  WSDL 
	|СокрЛП(PortName),       // port name из WSDL 
	|0);
	|
	| WSТип=Прокси.ФабрикаXDTO.Тип(<<URIПространстваИмен>>, <<Имя>>) ; // какой-то тип данных веб-сервиса
	| WSЗначениеWSТипа=Прокси.ФабрикаXDTO.Создать(WSТип);              // Значение этого какого-то типа
    |
	|Результат=Прокси.<<Имя функции>>(<<параметры функции>>);
	|";

	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(ТХТ);
	
КонецПроцедуры

Процедура ПанельПрограмматораWS_Подключение_pwd(Кнопка)
			
ТХТ="	
	|АдресWSDL=""????"";       //Например ""http://bebebe.com:8080/bebe_bubu/ws/buh_exchange.1cws?wsdl"";
	|TargetNamespace=""????""; //Например ""http://localhost/bebe_bubu"" из первой строки WSDL  targetNamespace=""http://localhost/bebe_bubu""
	|DefinitionsName=""????""; //Например ""buh_exchange"" из первой строки WSDL definitions name=""buh_exchange""
	|PortName=""????"";        //Например   ""buh_exchangeSoap12""  в конце WSDL port name=""buh_exchangeSoap12"" binding=""tns:buh_exchangeSoap12Binding"">
	|
	|// Если Web-сервис требует пароля:
	| Таймаут=0;
	| ИмяПользователя=""UserName"";
	| Пароль=""PassWord"";
	| Определение=Новый WSОпределения(СокрЛП(АдресWSDL),ИмяПользователя,Пароль,Таймаут);  // c паролем
	|
	|Прокси = Новый WSПрокси(Определение,
	|СокрЛП(TargetNamespace),//targetNamespace из WSDL
	|СокрЛП(DefinitionsName),//definitions name из  WSDL 
	|СокрЛП(PortName),       // port name из WSDL 
	|0);
	|
	|// Если Web-сервис требует пароля:
	| Прокси.ИмяПользователя=ИмяПользователя;
	| Прокси.Пароль=Пароль;
	|
	| WSТип=Прокси.ФабрикаXDTO.Тип(<<URIПространстваИмен>>, <<Имя>>) ; // какой-то тип данных веб-сервиса
	| WSЗначениеWSТипа=Прокси.ФабрикаXDTO.Создать(WSТип);              // Значение этого какого-то типа
	|
	|
	|Результат=Прокси.<<Имя функции>>(<<параметры функции>>);
	|";

	ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(ТХТ);

КонецПроцедуры

Процедура ОбновитьИндикациюВыполнения(Х,У,Й,Н,Я)
	// Х- текушая строка
	// У- всего строк
	// Й- датавремя старта
	// Н- обновлять через Н обработанных записей
	// Я- Комментарий выполняемой операции
	
	Х=Х+1;                                                                 //
	Если Х%Н=0 Тогда                                                      //
		ЭлементыФормы.Начало.Значение=Й;                                  //
	   	Осталось1=У-Х;                                                     //
	   	ПрошлоВремени=ТекущаяДата()-Й;                                 //
	   	ВремениНа1=ПрошлоВремени/Х;                                        //
	   	ЭлементыФормы.На1Элемент.Значение=ВремениНа1;                      //
	   	ОсталосьСек=ВремениНа1*Осталось1;                                  //
	   	ОсталосьДата=Дата(1,1,1)+ОсталосьСек;                              //
	   	ЭлементыФормы.ОсталосьВремени.Значение=ОсталосьДата;               //
	   	ОкончаниеПроц=ТекущаяДата()+ОсталосьСек;                           //
	   	ЭлементыФормы.ОкончаниеПроцесса.Значение=ОкончаниеПроц;            //
		ЭлементыФормы.КВо.Заголовок=СокрЛП(Я);
	КонецЕсли;                                                             //
Конецпроцедуры 	

Процедура КоманднаяПанель6ПрояснитьЗапросСоСложнымиПолями(Кнопка)
	
	ФТЗ="";
	
	ТЗ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Для Ы=1 по  СтрЧислоСтрок(ТЗ) Цикл
		
		ТекСтр=СтрПолучитьСтроку(ТЗ,Ы);
		ТекСтр=СокрП(ТекСтр);
		
		Если Найти(ТекСтр,"КОГДА")<>0 
				или Найти(ТекСтр,"ИНАЧЕ")<>0 
				или Найти(ТекСтр,"КОНЕЦ")<>0 
				или найти(ТекСтр,"ТОГДА")<>0
				или найти(ТекСтр,"УПОРЯДОЧИТЬ")<>0 
				или найти(ТекСтр,"ИТОГИ")<>0  
				или найти(ТекСтр,"СГРУППИРОВАТЬ")<>0  
				или найти(ТекСтр,"ИМЕЮЩИЕ")<>0 
				или найти(ТекСтр,"ОБЪЕДИНИТЬ")<>0 
				или найти(ТекСтр,"ОБЪЕДИНИТЬ")<>0 
				или найти(ТекСтр,"ИНДЕКСИРОВАТЬ")<>0 
				или найти(ТекСтр,"ПОМЕСТИТЬ")<>0 
				или найти(ТекСтр,"ЛЕВОЕ")<>0 
				или найти(ТекСтр,"ПРАВОЕ")<>0 
				или найти(ТекСтр,"ПОЛНОЕ")<>0 
				или найти(ТекСтр,"ВЫБРАТЬ")<>0 
				или найти(ТекСтр,"ИЗ	")<>0
				Тогда
					ТекСтр=""+Символы.ПС+ТекСтр;
		КонецЕсли;	
		
		Если Найти(ТекСтр,"И ")<>0 Тогда
					ТекСтр=" "+СокрЛП(ТекСтр);
				КонецЕсли;
				
		Если (ТекСтр)="ИЗ" Тогда
					ТекСтр=Символы.ПС+Символы.ПС+"//======================================================================================================================//"+Символы.ПС+СокрЛП(ТекСтр)+Символы.ПС;
		КонецЕсли;		
		
		ТекСтр=СтрЗаменить(ТекСтр,"ВЫБРАТЬ","ВЫБРАТЬ"+Символы.ПС);
		ТекСтр=СтрЗаменить(ТекСтр,"ГДЕ",Символы.ПС+"ГДЕ"+Символы.ПС);
		
		ФТЗ=ФТЗ+ТекСтр;
		
		Если Прав(ТекСтр,1)="," Тогда
			ФТЗ=ФТЗ+Символы.ПС+"//-------------------------------------------------------------//"+Символы.ПС;
		КонецЕсли;	
		
		
		
	КонецЦикла;	
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ФТЗ);
	
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель13СписокКолонокКакЗапросы(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		   
		   Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 Тогда
			  
			  
			  ТХТ.ДобавитьСтроку("// Таблица значений "+ЭлемФормы.Имя+"  Колонки:");
			  
			  Стр="SELECT "+Символы.ПС;
			  
			  
			  Попытка
				  Для Каждого Кол Из ЭлемФормы.Значение.КОлонки Цикл
					  Стр=Стр+"     "+ЭлемФормы.Имя+"."+Кол.Имя+" AS "+Кол.Имя+" ,"+Символы.ПС;
				  КонецЦикла;
				  Стр=Лев(Стр,СтрДлина(Стр)-2)+Символы.ПС;
				  Стр=Стр+" FROM &"+ЭлемФормы.Имя+" AS "+ ЭлемФормы.Имя+Символы.ПС+";"+Символы.ПС;
				  
				  ТХТ.ДобавитьСтроку(Стр);

				  
			  Исключение
				   ТХТ.ДобавитьСтроку("//Колонок нет");
			  КонецПопытки;
			  
			  
			  
			  
		   КонецЕсли;
	   КонецЦикла;

	   ТХТ.Показать();
	   
КонецПроцедуры

Процедура КоманднаяПанель6ИЗ_НУЛЛЬятор(Кнопка)
ТекстЗапроса=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();	
				  
КолвоСтрокТекста=СтрЧислоСтрок(ТекстЗапроса);
//Сообщить(КолвоСтрокТекста);

НовыйТекстЗапроса="";
ПоляЗакончились=Ложь;
Для Ы=1 по КолвоСтрокТекста Цикл
	ТекСтрока=СокрЛП(СтрПолучитьСтроку(ТекстЗапроса,Ы));

	Если ТекСтрока="ВЫБРАТЬ" тогда
		ПоляЗакончились=Ложь;
		НовыйТекстЗапроса=НовыйТекстЗапроса+ТекСтрока+Символы.Пс;
		Продолжить;
		
		
	ИначеЕсли ПоляЗакончились=Истина Тогда
		НовыйТекстЗапроса=НовыйТекстЗапроса+СтрПолучитьСтроку(ТекстЗапроса,Ы)+Символы.Пс;
		Продолжить;
	КонецЕсли;	

		
	Если Найти(ТекСтрока,"ПОМЕСТИТЬ ")<>0 или ТекСтрока="ИЗ" Тогда
		ПоляЗакончились=Истина;
		НовыйТекстЗапроса=НовыйТекстЗапроса+СтрПолучитьСтроку(ТекстЗапроса,Ы)+Символы.Пс;
		Продолжить;
	Конецесли;
	
	ТекСтрока=СокрЛП(ТекСтрока);
	//Сообщить(ТекСтрока);
	
	
	ПозЗПТ=1000000;
	
	ПозКаки=Найти(ТекСтрока," КАК ")-1;
	ПозКаки=?(ПозКаки=-1,1000000,ПозКаки);
	
	Если Прав(ТекСтрока,1)="," Тогда
		ПозЗПТ=СтрДлина(ТекСтрока)-1;
	КонецЕсли;
	//Сообщить(""+ПозКаки+"   "+ПозЗПТ);
	
	ТекстКаки="";
	
	Если ПозКаки=1000000 Тогда
		// Нужно добавить КАКу
		ЗаготовкаДляКаки=Лев(ТекСтрока,ПозЗПТ);
				ЗаготовкаДляКаки=СтрЗаменить(ЗаготовкаДляКаки,".",Символы.Пс);
		
        ПоследняяСтрока=СтрЧислоСтрок(ЗаготовкаДляКаки);
		ТекстКаки= " КАК "+СтрПолучитьСтроку(ЗаготовкаДляКаки,ПоследняяСтрока)+"  ";
		//Сообщить("ТекстКаки ="+ТекстКаки);
		
	КонецЕсли;	
		
	
	
	ИзНулльСтрока="IsNULL("+Лев(ТекСтрока,Мин(ПозКаки,ПозЗПТ))+" , 0 )"+ТекстКаки+Сред(ТекСтрока,Мин(ПозКаки,ПозЗПТ)+1,СтрДлина(ТекСтрока));
	
	НовыйТекстЗапроса=НовыйТекстЗапроса+  ИзНулльСтрока+Символы.Пс;
КонецЦикла;	

ТХТ=Новый ТекстовыйДокумент;
ТХТ.ДобавитьСтроку(НовыйТекстЗапроса);
ТХТ.Показать();

КонецПроцедуры

Процедура ПанельПрограмматораПолучить_ТЗ_Через_Universal_Query_Function__TZ_Result(Кнопка)
	
ТекстДляПрограмматора="//---------------------- Получаем данные из другой базы через WS -----------------------//
	                   |//                       Используется функция WS Universal_Query_Function__TZ_Result    //
					   |//--------------------------------------------------------------------------------------//
					   |
|	АдресWSDL=""http://10.250.205.11:8080/ave_skd/ws/buh_exchange.1cws?wsdl"";       
|	TargetNamespace=""http://localhost/ave_skd""; 
|	DefinitionsName=""buh_exchange""; 
|	PortName=""buh_exchangeSoap12"";    
|	
|	Определение=Новый WSОпределения(СокрЛП(АдресWSDL));  // без пароля
|	
|	Прокси = Новый WSПрокси(Определение,
|	СокрЛП(TargetNamespace),//targetNamespace из WSDL
|	СокрЛП(DefinitionsName),//definitions name из  WSDL 
|	СокрЛП(PortName),       // port name из WSDL 
|	0);
|	
|	ТекстЗапросаЧерезWS=  ""	ВЫБРАТЬ
||		Города.Наименование,
||		Города.Код
||	ИЗ
||		Справочник.Города КАК Города
||	ГДЕ
||		(Города.Наименование ПОДОБНО &Параметр1
||				ИЛИ Города.Наименование ПОДОБНО &Параметр2)
||""; // Сгенерировано в GtG's Консоль запросов. 13.07.2015 15:27:17
|	
|	Параметры=Новый Структура;
|	
|	Параметры.Вставить(""Запрос"",ТекстЗапросаЧерезWS);
|	
|	СтруктураПараметров=Новый Структура;
|	СтруктураПараметров.Вставить(""Параметр1"",""%ы%"");
|	
|	Параметры.Вставить(""ПараметрыЗапроса"",СтруктураПараметров);
|	
|	ХДТО_Параметры=СериализаторXDTO.ЗаписатьXDTO(Параметры);
|	
|	ХДТОРезТЗ=Прокси.Universal_Query_Function__TZ_Result(ХДТО_Параметры);
|	
|	ТЗ=СериализаторXDTO.ПрочитатьXDTO(ХДТОРезТЗ);
|	
|	Элементыформы.табзнач.значение=ТЗ;
|	Элементыформы.табзнач.СоздатьКолонки();
|";
	
ПолучитьЭлементФормыПрограммы().ДобавитьСтроку(ТекстДляПрограмматора);
	
	
КонецПроцедуры
	


ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Апельсин);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Асфальт);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.БезОформления);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Бирюза);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Бронза);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Весна);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Дерево);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Зима);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Интерфейс);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Камень);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Классика);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Классика2);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Классика3);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Лед);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Лето);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Медь);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Осень);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Песок);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Платина);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Серебро);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Текстиль);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Трава);

ЭлементыФормы.Оформление.Значение=СтандартноеОформление.Трава;


РасшифровкаЯчеек=Истина;

АвтоДобавлениепредставлений=Истина;



ВыводитьОбщиеИтоги=Истина;