Функция ПолучитьРоли(Юзер)
	//тз = Новый ТаблицаЗначений;
	//тз.Колонки.Добавить("Роль");
	//Если Юзер = Справочники.Сотрудники.ПустаяСсылка() тогда Возврат(ложь)	КонецЕсли;
	//Если ЕстьРеквизитОбъекта("ИдентификаторПользователяИБ", Пользователь_Образец.ПолучитьОбъект()) тогда
	//	ВыбПользовательИБ=ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь_Образец.ИдентификаторПользователяИБ);
	//Иначе
	//	ВыбПользовательИБ=ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь_Образец.Наименование);
	//КонецЕсли;
	//
	//ВыбПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь_Образец.ИмяПользователя);
	//
	//Для Каждого Роль из ВыбПользовательИБ.Роли цикл
	//	нс = тз.Добавить();
	//	нс.Роль = Роль;
	//КонецЦикла;
	//
	//Возврат(тз)	
КонецФункции

Функция  ПолучитьНастройки(Юзер)
//	Если Юзер = Справочники.Пользователи.ПустаяСсылка() тогда Возврат(ложь)	КонецЕсли;
//	Запрос = Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
////	             |	НастройкиПользователей.Пользователь,
//	             |	НастройкиПользователей.Настройка,
//	             |	НастройкиПользователей.Значение
//	             |ИЗ
//	             |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
//	             |ГДЕ
//	             |	НастройкиПользователей.Пользователь = &Пользователь";
//	Запрос.УстановитьПараметр("Пользователь", Юзер.Ссылка);
//	Результат = Запрос.Выполнить().Выгрузить();
//	Возврат(Результат);
КонецФункции

Функция  ПолучитьДополнительныеПрава(Юзер)
	//Если Юзер = Справочники.Пользователи.ПустаяСсылка() тогда Возврат(ложь)	КонецЕсли;
	//Запрос = Новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//             |	ЗначенияДополнительныхПравПользователя.Право,
	//             |	ЗначенияДополнительныхПравПользователя.Значение
	//             |ИЗ
	//             |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
	//             |ГДЕ
	//             |	ЗначенияДополнительныхПравПользователя.Пользователь = &Пользователь";
	//Запрос.УстановитьПараметр("Пользователь", Юзер.Ссылка);
	//Результат = Запрос.Выполнить().Выгрузить();
	//Возврат(Результат);
КонецФункции
      

Процедура ПолеВвода1ПриИзменении(Элемент)
	//Получаем РОЛИ пользователя - образца	
	//ТПРоли.Очистить();
	//ТПРоли = ПолучитьРоли(Пользователь_Образец);
	//Если НЕ ТПРоли=Ложь тогда ЭлементыФормы.ТПРоли.СоздатьКолонки(); КонецЕсли;
	//
	//
	////Определение интерфейса
	//Если ЕстьРеквизитОбъекта("ИдентификаторПользователяИБ", Пользователь_Образец.ПолучитьОбъект()) тогда
	//	ВыбПользовательИБ=ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь_Образец.ИдентификаторПользователяИБ);
	//Иначе
	//	ВыбПользовательИБ=ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь_Образец.Наименование);
	//КонецЕсли;	
	//ИнтерфейсОбразец = ВыбПользовательИБ.ОсновнойИнтерфейс;
	//ЭлементыФормы.ПВИнтерфейс.Значение = ИнтерфейсОбразец;	
	////Отображение в списке при авторизации
	//ПоказатьВСпискеВыбора_Образец = ВыбПользовательИБ.ПоказыватьВСпискеВыбора;
	//ПоказыватьВСпискеВыбора = ПоказатьВСпискеВыбора_Образец;
	//ЗапретСменыПароля_Образец = ВыбПользовательИБ.ЗапрещеноИзменятьПароль;
	//ЗапретСменыПароля = ЗапретСменыПароля_Образец
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПолей()
	
	ОК = истина;
	//Проверки на заполненость
	Если ПустаяСтрока(НовП) тогда 
		Предупреждение("Новый пользователь не заполнен");
		ОК = Ложь;
		Возврат ОК;
	КонецЕсли;
	Если ПустаяСтрока(НовПНаименование) тогда 
		Предупреждение("Полное наименование не заполнено");
		ОК = Ложь;
		Возврат ОК;
	КонецЕсли;
	
	Если ПустаяСтрока(НовППароль) тогда 
		Предупреждение("Пароль не указан");
		ОК = Ложь;
		Возврат ОК;
	КонецЕсли;
	
	Если ПустаяСтрока(ПВИнтерфейс) тогда 
		Предупреждение("Не выбран интерфейс");
		ОК = Ложь;
		Возврат ОК;
	КонецЕсли;
	
	
	Если флАутентификацияОС = Истина и ПустаяСтрока(ПользовательОС) тогда 
		Предупреждение("Пароль не указан пользователь ОС");
		ОК = Ложь;
		Возврат ОК;
	КонецЕсли;
	
	Возврат ОК;
	
КонецФункции

Процедура КПНижняяСоздатьПользователя(Кнопка)
	
	Если ПроверитьЗаполнениеПолей() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//Проверка на существование в ПользователиИнформационнойБазы записи с таким именем
	ПП = ПользователиИнформационнойБазы.НайтиПоИмени(НовП);
	Если Не ПП=Неопределено тогда
		Предупреждение("Пользователь с таким именем уже существует в ИБ");
		Возврат;
	КонецЕсли;
	
	СоздатьПользователя();	
	
	ОбновитьПользователейИРоли();
	
КонецПроцедуры

Процедура НовППриИзменении(Элемент)
	НовПНаименование = НовП
КонецПроцедуры

Процедура СоздатьПользователя()
	////Начало создания пользователя
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.Имя = НовП;
	ПользовательИБ.АутентификацияСтандартная = Истина;
	ПользовательИБ.Пароль = НовППароль;
	ПользовательИБ.ПолноеИмя =  НовПНаименование;
	ПользовательИБ.ПоказыватьВСпискеВыбора = ПоказыватьВСпискеВыбора;
	ПользовательИБ.ЗапрещеноИзменятьПароль = ЗапретСменыПароля;
	ПользовательИБ.ОсновнойИнтерфейс = ПВИнтерфейс;
	//Добавление ролей
	Для каждого Стр из СписокРоли Цикл
		Если стр.Пометка = Истина Тогда
			//Сообщить("Добавление роли: "+Стр.Роль);
			ПользовательИБ.Роли.Добавить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	ПользовательИБ.АутентификацияОС = флАутентификацияОС;
	ПользовательИБ.ПользовательОС = ПользовательОС;
	ПользовательИБ.Записать();	  
	//
	//// А потом создать запись в справочнике Пользователи
	СпрНПользователь = Справочники.Сотрудники.СоздатьЭлемент();
	//СпрНПользователь.Код = НовП;
	СпрНПользователь.Наименование = НовПНаименование;
	СпрНПользователь.ИмяПользователя = СокрЛП(НовП);
	СпрНПользователь.Записать();
	
	
	//формирование учетки для сервера и ФИО в транслите
	//ФИОФизЛица=ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Сотрудник.ФизЛицо,ТекущаяДата());
	//AccountSRV=О_ОбщегоНазначения.Транслит(ФИОФизЛица.Фамилия)+Врег(Лев(О_ОбщегоНазначения.Транслит(ФИОФизЛица.Имя),1))+Врег(Лев(О_ОбщегоНазначения.Транслит(ФИОФизЛица.Отчество),1));    
	//ФИОТранслит = О_ОбщегоНазначения.Транслит(ФИОФизЛица.Фамилия)+" "+О_ОбщегоНазначения.Транслит(ФИОФизЛица.Имя)+" "+О_ОбщегоНазначения.Транслит(ФИОФизЛица.Отчество);    
	
	Сообщить("----------------------------------------------------------------");	
	Сообщить("Создание пользователя "+ СпрНПользователь+" успешно завершено.");
	//Сообщить("Имя пользователя на сервере: "+ AccountSRV);
	//Сообщить("Транслит ФИО: "+ ФИОТранслит);
	Сообщить("Пароль:"+ НовППароль);
	Сообщить("----------------------------------------------------------------");
КонецПроцедуры

Процедура СоздатьПарольНажатие(Элемент)
	// Вставить содержимое обработчика.
	//О_СгенерироватьПароль(КоличествоЗнаков=8,Прописн=Истина,Строчн=Истина,Циф=истина)
	НовППароль=О_СгенерироватьПароль();     
КонецПроцедуры

Процедура ОбновитьПользователейИРоли()
	
	
	СписокПользователи.Очистить();
	СписокРоли.Очистить();
	
	Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	КартинкаПользователь = ЭлементыФормы.НадписьПользователи.Картинка;
	Для Каждого Пользователь Из Пользователи Цикл
		СписокПользователи.Добавить(Пользователь,Пользователь.ПолноеИмя,Истина,КартинкаПользователь);
	КонецЦикла;
	СписокПользователи.СортироватьПоПредставлению();
	КартинкаРоль = ЭлементыФормы.Панель1.Страницы.стрРоли.КартинкаЗаголовка;
	Для Каждого Роль Из Метаданные.Роли Цикл
		СписокРоли.Добавить(Роль,Роль.Представление(),Ложь,КартинкаРоль);
	КонецЦикла;
	СписокРоли.СортироватьПоПредставлению();	
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	// Проверка административных прав текущего пользователя
	Если ПравоДоступа("Администрирование",Метаданные) = Ложь Тогда
		Предупреждение("Для использования этой обработки нужны права администратора !!!");
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;	
	// Вставить содержимое обработчика.
	НовППароль=О_СгенерироватьПароль();
	
	ОбновитьПользователейИРоли();
	
	ЭлементыФормы.ТПДопПрава.НастройкаОтбора.Объект.Доступность = Ложь;
	ЭлементыФормы.ТПДопПрава.НастройкаОтбора.Пользователь.Доступность = Ложь;
	ЭлементыФормы.ТПДопПрава.НастройкаОтбора.Реквизит.Доступность = Ложь;

	
КонецПроцедуры


Процедура СписокПользователиВыбор(Элемент, ЭлементСписка)
	
	ТекПользователь =  ЭлементСписка.Значение;
	СписокРоли.ЗаполнитьПометки(Ложь);
	
	Для Каждого Роль из ТекПользователь.Роли цикл
		ЭлементСпискаРоль =  СписокРоли.НайтиПоЗначению(Роль);
		Если НЕ ЭлементСпискаРоль = Неопределено Тогда
			ЭлементСпискаРоль.Пометка = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	ПВИнтерфейс = ТекПользователь.ОсновнойИнтерфейс;
	НовП = ТекПользователь.Имя;
	НовПНаименование = ТекПользователь.ПолноеИмя; 
	ПоказыватьВСпискеВыбора = ТекПользователь.ПоказыватьВСпискеВыбора;
	ЗапретСменыПароля = ТекПользователь.ЗапрещеноИзменятьПароль;
	флАутентификацияОС = ТекПользователь.АутентификацияОС;
	

	ТПДопПрава.Отбор.Пользователь.Установить(Справочники.Сотрудники.НайтиПоНаименованию(НовП,Истина));
	
	
КонецПроцедуры

Процедура КПНижняякнУдалитьПользователя(Кнопка)
	
	ТекПользователь = ЭлементыФормы.СписокПользователи.ТекущаяСтрока.Значение;
	ИмяПользователя = ТекПользователь.ПолноеИмя;
	
	ТекИндекс =  СписокПользователи.Индекс(ЭлементыФормы.СписокПользователи.ТекущаяСтрока);
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Удалить пользователя : " + ИмяПользователя + " ?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		ТекПользователь.Удалить();	
		Предупреждение("Пользователь " + ИмяПользователя  + " удалён!");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ОбновитьПользователейИРоли();
	
	Если ТекИндекс > (СписокПользователи.Количество() - 1)  Тогда
		ТекИндекс  = СписокПользователи.Количество() - 1;
	КонецЕсли;
	
	ЭлементыФормы.СписокПользователи.ТекущаяСтрока = СписокПользователи[ТекИндекс];

	
КонецПроцедуры

Процедура КПНижняякнСохранитьТекущиеПараметры(Кнопка)
	
	Если ПроверитьЗаполнениеПолей() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	
	ПользовательИБ = ЭлементыФормы.СписокПользователи.ТекущаяСтрока.Значение;
	ИмяПользователя = ПользовательИБ.ПолноеИмя;
	ТекИндекс =  СписокПользователи.Индекс(ЭлементыФормы.СписокПользователи.ТекущаяСтрока);
	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Сохранить изменения для пользователя : " + ИмяПользователя + " ?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 	
	
	ПользовательИБ.Имя = НовП;
	ПользовательИБ.АутентификацияСтандартная = Истина;
	//ПользовательИБ.Пароль = НовППароль;
	ПользовательИБ.ПолноеИмя =  НовПНаименование;
	ПользовательИБ.ПоказыватьВСпискеВыбора = ПоказыватьВСпискеВыбора;
	ПользовательИБ.ЗапрещеноИзменятьПароль = ЗапретСменыПароля;
	ПользовательИБ.ОсновнойИнтерфейс = ПВИнтерфейс;
	ПользовательИБ.Роли.Очистить();
	//Добавление ролей
	Для каждого Стр из СписокРоли Цикл
		Если стр.Пометка = Истина Тогда
			ПользовательИБ.Роли.Добавить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	ПользовательИБ.АутентификацияОС = флАутентификацияОС;
	ПользовательИБ.ПользовательОС = ПользовательОС;
	ПользовательИБ.Записать();	  
	
	ОбновитьПользователейИРоли();
	
	Если ТекИндекс > (СписокПользователи.Количество() - 1)  Тогда
		ТекИндекс  = СписокПользователи.Количество() - 1;
	КонецЕсли;
	
	ЭлементыФормы.СписокПользователи.ТекущаяСтрока = СписокПользователи[ТекИндекс];

	
КонецПроцедуры

Процедура кнИзменитьПарольНажатие(Элемент)
	
	НовыйПароль = "";
	ВвестиСтроку(НовыйПароль,"Введите новый пароль");
	
	ПользовательИБ = ЭлементыФормы.СписокПользователи.ТекущаяСтрока.Значение;
	ПользовательИБ.Пароль = НовыйПароль;
	ПользовательИБ.Записать();
	
	Предупреждение("Пользователю присвоен новый пароль : " + НовыйПароль);
	
	
КонецПроцедуры



ОчиститьСообщения();
СписокИнтерфейсов = Новый СписокЗначений;
Для каждого Интерфейс из Метаданные.Интерфейсы цикл
	СписокИнтерфейсов.Добавить(Интерфейс);	
КонецЦикла;
ЭлементыФормы.ПВИнтерфейс.СписокВыбора = СписокИнтерфейсов;
