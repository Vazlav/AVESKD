Перем FTPСоединение Экспорт;
Перем КорневойКаталогФТП;
Перем КаталогВременныхФайловЦСВ;
Перем СоответствиеНДС;
Перем СоответствиеТиповСлужебныхЧеков;
Перем ТаблицаПартий;
Перем ТаблицаТОваров;
Перем ТаблицаНеизвестныхПартий;
Перем ТаблицаСотрудников;
Перем ТаблицаУслуг;
Перем ТипНОПТ_НДС;
Перем ЗапросПоискаНеизвестнойПартии;
Перем ЗапросРасчетаКоличестваЧековСмены;
Перем ВидПоступленияТовара_ПоУмолчанию;
Перем ТипНалогообложенияПоступленияТоваров_ПоУмолчанию;
Перем ИК;
Перем ВинКаталогФайлов;
Перем ККМ_ТипыСлужебныхЧеков__Z_Отчет;
Перем ЭталонТЗДляБух;
Перем СписокТиповЧекаДляФормированияРеализацииККМ;


//---------------<Работа с ФТП>---------------------------// GtG // 25.09.2013 16:44:53
процедура ПодключитьсяКФТП() Экспорт
	Сервер="192.168.10.1";
	Порт=2121;
	ИмяПользователя ="check";
	ПарольПользователя="Check_Upload";
	Прокси ="";
	ПассивноеСоединение=Истина;
	Таймаут=30;
	
	FTPСоединение=Новый  FTPСоединение(Сервер, Порт, ИмяПользователя, ПарольПользователя, Прокси, ПассивноеСоединение, Таймаут) ;
КонецПроцедуры	



Процедура ОтключитьсяОтФТП() Экспорт
	FTPСоединение=Неопределено;
КонецПроцедуры	


Функция ПолучитьФайлыСФТП(Тип)
	
	МассивФайловФТП=FTPСоединение.НайтиФайлы(КорневойКаталогФТП,""+Тип+"_*.csv",ложь);
	
	Возврат МассивФайловФТП;
	
КонецФункции


Процедура КлиентСостояние(Текст) Экспорт
    #Если Клиент ТОгда
        
      Состояние(Текст);  
        
        
        
    #КонецЕсли
КонецПроцедуры


Процедура  ПроверитьКодыАптекНаЗагрузкуПоЧекам(ДанныеДляЗагрузки) //ПО КОЛОНКЕ КодСклада
    
    
    
     ККС=ДанныеДляЗагрузки.Скопировать(,"КодСклада");
    
     ККС.Свернуть("КодСклада","");
     
     Для Каждого СтрКС Из ККС Цикл
         
         Если СписокКодовАптек.НайтиПоЗначению(СтрКС.КодСклада)=Неопределено Тогда
             Сообщить("Новая аптека на чеках! "+СтрКС.КодСклада );
             
             
             
             
             Апт=Справочники.МестаХранения.НайтиПоКоду(Число(СтрКС.КодСклада)).ПолучитьОбъект();
             
             Апт.СпособОбмена=Перечисления.СпособОбменаСАптекой.PostgreSQL;
             Апт.Записать();
             
             СписокКодовАптек.Добавить(СтрКС.КодСклада);
             ПутьКФайлуСписка=Константы.КаталогФТП.Получить()+"KKM_CHECKS_CSV\APT_LOAD_LIST.LST";
             МассивКодов=СписокКодовАптек.ВыгрузитьЗначения();
             //---------------<Свертка и сортировка>---------------------------// GtG // 07.01.2014 16:59:51
             ТЗСортировки=Новый ТаблицаЗначений();
             ТЗСортировки.Колонки.Добавить("Код");
             Для Каждого Стр Из МассивКодов Цикл
                 ТЗСортировки.Добавить().Код=Стр;
             КонецЦикла;
             ТЗСортировки.Свернуть("Код","");
             ТЗСортировки.Сортировать("Код");
             МассивКодов=ТЗСортировки.ВыгрузитьКолонку("Код");
             ЗначениеВФайл(ПутьКФайлуСписка,МассивКодов);
         Конецесли; 
         
     КонецЦикла;    
 
Конецпроцедуры    






Функция ПолучитьФайлыНаОбработку(Тип)
	
	МассивЛокальныхФайлов=НайтиФайлы(ВинКаталогФайлов,Тип+"_*.csv");
	
	//---------------<Ограничим количество файлов обрабатываемых за один заход>---------------------------// GtG // 11.12.2013 16:02:42 
	// Пусть это будет не более 5000 штук
	
	ОбрезанныйМассивЛокальныхФайлов=Новый Массив;
    
    // Чтобы роботы не халявили проходимся по всему массиву файлов и дергаем файлы из диапазона обр. кодов    // GtG  //  21.04.2014 14:11:44 
    ХОбр=0;
    Для Каждого ТекФайл Из МассивЛокальныхФайлов Цикл
        КодАптеки = Число(Сред(ТекФайл.Имя,6,5));
    	Если КодАптеки >= КодНачало и КодАптеки <= КодКонец Тогда
    		ОбрезанныйМассивЛокальныхФайлов.Добавить(ТекФайл);
            ХОбр=ХОбр+1;
            Если ХОбр>=МаксЗначение Тогда
                Прервать; // нахватали достаточное количество файлов.
            Конецесли;    
    	КонецЕсли;
    КонецЦикла;
    
    //---------------<Старый вариант, роботы халявят>---------------------------// GtG // 21.04.2014 14:13:54
    //РабочееМаксЗначение=МаксЗначение;//=5000; // берем из реквизита обработки
    //Если МассивЛокальныхФайлов.Количество()<РабочееМаксЗначение Тогда
    //	РабочееМаксЗначение=МассивЛокальныхФайлов.Количество();
    //КонецЕсли;
    //
    //Для Ы=0 По РабочееМаксЗначение-1 Цикл
    //	ТекФайл = МассивЛокальныхФайлов.Получить(Ы);
    //	
    //	КодАптеки = Число(Сред(ТекФайл.Имя,6,5));
    //	Если КодАптеки >= КодНачало и КодАптеки <= КодКонец Тогда
    //		ОбрезанныйМассивЛокальныхФайлов.Добавить(ТекФайл);
    //	КонецЕсли;
    //КонецЦикла;
    
    
    
    //---------------<Загребем данные с сервера PostgreSQL>---------------------------// GtG // 19.04.2014 1:22:16 
    // Нужно сымитировать нечто похожее по структуре на данные типа Файл
    // Извратимся и сляпаем структуру с полями имя и полноеимя и плюс еще все данные для постгрея
    Есть_Ошибка_ADO=Ложь;
    
    
    
    Попытка
        ПГТЗФайлов=ОМ_Postgres_серверный.ЧекиПолучитьДанные(нрег(Тип),МаксЗначение,КодНачало,КодКонец); // может быть ошибка? если захромало создание объекта ADODB.Connection
        Есть_Ошибка_ADO=Ложь;
    Исключение
        Есть_Ошибка_ADO=Истина;
        // пропускаем этот цикл обработки.
        МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("ODBC ERROR "+ОписаниеОшибки()+Символы.ПС+" Не удалось подключиться к серверу (диапазон кодов с "+КодНачало+" по "+КодКонец+")","ODBC_ERR");
    Конецпопытки;    
        
        
    Если Есть_Ошибка_ADO=Ложь Тогда    
        
        Если ПГТЗФайлов<>Неопределено ТОгда
            КлиентСообщить("Получено из PG "+" "+Тип+" : "+ПГТЗФайлов.Количество());
            Для каждого ПсевдоФайл Из ПГТЗФайлов Цикл
                СтруктураИмитации=Новый Структура;
                СтруктураИмитации.Вставить("Имя",ПсевдоФайл.file_name);
                СтруктураИмитации.Вставить("ПолноеИмя",ПсевдоФайл.file_name);  
                
                // запихнуть все данные из пг полученные в структуру имитации и далее обрабатывать её как файл
                //  
                СтруктураИмитации.Вставить("id",ПсевдоФайл.id);  //",ПсевдоФайл.  //Число(АДО_рекордСет.Fields(0).Value);
                СтруктураИмитации.Вставить("pack_type",ПсевдоФайл.pack_type);  //СокрЛП(АДО_рекордСет.Fields(1).Value);
                СтруктураИмитации.Вставить("id_dep",ПсевдоФайл.id_dep);  //Число(АДО_рекордСет.Fields(2).Value);
                СтруктураИмитации.Вставить("doc_dt",ПсевдоФайл.doc_dt);  //АДО_рекордСет.Fields(3).Value;
                СтруктураИмитации.Вставить("posnum",ПсевдоФайл.posnum);  //АДО_рекордСет.Fields(4).Value;
                СтруктураИмитации.Вставить("shiftnum",ПсевдоФайл.shiftnum);  //АДО_рекордСет.Fields(5).Value;
                СтруктураИмитации.Вставить("ncheck",ПсевдоФайл.ncheck);  //АДО_рекордСет.Fields(6).Value;
                СтруктураИмитации.Вставить("file_name",ПсевдоФайл.file_name);  //АДО_рекордСет.Fields(7).Value;
                СтруктураИмитации.Вставить("file_dt",ПсевдоФайл.File_dt);  //АДО_рекордСет.Fields(8).Value;
                СтруктураИмитации.Вставить("create_dt",ПсевдоФайл.create_dt);  //АДО_рекордСет.Fields(9).Value;
                СтруктураИмитации.Вставить("load_dt",ПсевдоФайл.load_dt);  //АДО_рекордСет.Fields(10).Value;
                СтруктураИмитации.Вставить("processed",ПсевдоФайл.processed);  //АДО_рекордСет.Fields(11).Value;
                СтруктураИмитации.Вставить("process_dt",ПсевдоФайл.process_dt);  //АДО_рекордСет.Fields(12).Value;
                СтруктураИмитации.Вставить("pack_data",ПсевдоФайл.pack_data); // собственно данные которые нужно загрузить  //АДО_рекордСет.Fields(13).Value;
                
                обрезанныймассивЛокальныхФайлов.Добавить(СтруктураИмитации); 
                
                
            КонецЦикла;
        Конецесли;
    КонецЕсли;
	КлиентСообщить("   "+ОбрезанныйМассивЛокальныхФайлов.Количество()+" файлов "+Тип+" на обработку");
		
	Возврат ОбрезанныйМассивЛокальныхФайлов;
КонецФункции	

Процедура УдалитьЛокальныеФайлы(МассивФайлов,ТипФайлов="")
    
    МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Удаляем файлы "+ТипФайлов+"  "+МассивФайлов.Количество()+" штук","Чеки");
    
    Для Каждого Файл Из МассивФайлов Цикл
        
        Если типзнч(Файл)=тип("Файл") тогда
            ФайлПолноеИмя=Файл.ПолноеИмя;
            
            Попытка
                ПереместитьФайл(ФайлПолноеИмя,Файл.Путь+"_adv_backup_\"+Файл.Имя);
            Исключение
                МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Не удалось удалить "+ТипФайлов+": "+ФайлПолноеИмя,"Чеки");
            КонецПопытки;
        ИначеЕсли ТипЗнч(Файл)=Тип("Структура") тогда
            // Это данные из постгрея
            ТипДанных=Файл.pack_type;
            МассивИз1ИД=Новый Массив;
            МассивИз1ИД.Добавить(Файл.id);
            ОМ_Postgres_серверный.ЧекиОтметитьЗагрузкуДанных(ТипДанных,МассивИз1ИД);
        КонецЕсли;
    КонецЦикла;
    
    
Конецпроцедуры








//---------------<Экспортные процедуры и функции>---------------------------// GtG // 25.09.2013 16:45:12

Процедура Загрузить() Экспорт
	
	//---------------<Выгребаем файлы с ФТП>---------------------------// GtG // 25.09.2013 17:44:10
	// Складываем их в КаталогВременныхФайловЦСВ и пишем инструкции в регистр сведений 
	// ОтложенныеОперацииСFTP. 
	// Обрабатываем файлы.
	// Выполняем отложенные операции с ФТП в качестве паузы между срабатываниями загрузчика, после вcех полезных действий
	// выполняем и подчищаем ОтложенныеОперацииСFTP.
    
    Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда // проверяем перед загрузкой любых типов чеков, 
                                                                   //т.к. процесс длительный и хочется его завалить как только так сразу, но аккуратно
          Возврат;
    КонецЕсли;    
        
    
    //---------------<Файлы открытия смен грузим первыми по-любому>---------------------------// GtG // 02.04.2014 17:01:05
    МассивЛокальныхФайлов=ПолучитьФайлыНаОбработку("opn2"); //массив файлов и структур псевдофайлов
    МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Обработано opn2: "+МассивЛокальныхФайлов.Количество(),"Чеки");
    
    ЗагрузитьОткрытиеСмен(МассивЛокальныхФайлов);
    УдалитьЛокальныеФайлы(МассивЛокальныхФайлов,"opn2");

    
    
    
    
    
    
    
	
    Если ГрузитьСлужебныеЧеки=Истина Тогда
        
        Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
            Возврат;
        КонецЕсли;    
        
		// первый чек в смене всегда служебный
		// загружая системные чеки первыми создадим смены
		МассивЛокальныхФайлов=ПолучитьФайлыНаОбработку("sys2");
		МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Обработано SYS2: "+МассивЛокальныхФайлов.Количество(),"Чеки");

		ЗагрузитьСлужебныеЧеки(МассивЛокальныхФайлов);
		УдалитьЛокальныеФайлы(МассивЛокальныхФайлов,"sys2");
		
				
    КонецЕсли;
    
    
    Если ГрузитьЗакрытиеСмен=Истина Тогда  // не создает новые смены
        // тут есть нюанс. Если идет перевынрузка кучи данных может получиться, что 
        // смена станет считаться идеально закрытой до загрузки HDR
        // данные по Z-отчету не попадут в документ смены и создается
        // зеленая реализация ккм, которая потом уже не обеляется.
        //-------------------------------------------------------------------------
        // Поэтому перенесено сюда, до начала лагрузки чеков заполним данные по зеткам, если есть Чо. GtG  //  08.05.2014 13:34:32
        Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
            Возврат;
        КонецЕсли;    
        
		МассивЛокальныхФайлов=ПолучитьФайлыНаОбработку("hdr2");
		МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Обработано HDR2: "+МассивЛокальныхФайлов.Количество(),"Чеки");
		
		ЗагрузитьЗакрытиеСмен(МассивЛокальныхФайлов);
		УдалитьЛокальныеФайлы(МассивЛокальныхФайлов,"hdr2");
		
		
    КонецЕсли;
    
    Если СоздаватьРеализацииККМ = Истина Тогда
        
        Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
            Возврат;
        КонецЕсли;    
        
        
		ТекДата=ТекущаяДата();
        
        //---------------<старый вариант>---------------------------// GtG // 15.04.2014 21:12:43
        //// Закрытие нормальных смен:
        ////-----0---1-----------21---23---0---1--------------21---23---0---1---------> t
        ////                     ***************              ***************
        //////Регламент_Создать_РеализацииККМ_По_Закрытым_Сменам(Ложь,ложь); // свежак и древние
        
        Если  Час(ТекДата)>=21 и Час(ТекДата)<=23 
        	Или
        	Час(ТекДата)>=0 и Час(ТекДата)<=3  Тогда    // с 21 часа до 01 часа ночи закрываются смены ккм , которые прошли нормально
        	
        	Регламент_Создать_РеализацииККМ_По_Закрытым_Сменам(Ложь,ложь); // свежак и древние
        	
        КонецЕсли;
        
        Если  Час(ТекДата)>=3 и Час(ТекДата)<=4 Тогда   // с 01 часа до 2:59:59 закрываются смены, которые как-то недозакрылись
        	
        	Регламент_Создать_РеализацииККМ_По_Закрытым_Сменам(Истина,ложь); // свежак, дефективные и древние
        	
        КонецЕсли;
        //
        //
        Если  Час(ТекДата)>=4 и Час(ТекДата)<=20 Тогда   // с 03 часа до 20:59:59 закрываются смены, которые как-то недозакрылись за прошлые даты
        	Сообщить("Закрываем древние смены");
        	Регламент_Создать_РеализацииККМ_По_Закрытым_Сменам(Ложь,Истина);  // хорошие древние
        	
        КонецЕсли;
        
        //---------------<новый вариант>---------------------------// GtG // 15.04.2014 21:12:57
        
        //Регламент_Создать_РеализацииККМ_По_Закрытым_Сменам(Ложь,Истина);
        
	КонецЕсли;

    

    
    
	
    Если ГрузитьЧеки=Истина Тогда
        Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
            Возврат;
        КонецЕсли;    
        
		// создадим смены если служебного чека вдруг не оказалось
		МассивЛокальныхФайлов=ПолучитьФайлыНаОбработку("str2");
		МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Обработано STR2: "+МассивЛокальныхФайлов.Количество(),"Чеки");
		
		Результат = Истина;
		ЗагрузитьЧеки(МассивЛокальныхФайлов,Результат);
		
		Если Результат = Истина Тогда
			УдалитьЛокальныеФайлы(МассивЛокальныхФайлов,"str2");
		КонецЕсли;
		

		

		МассивЛокальныхФайлов=ПолучитьФайлыНаОбработку("adv2");
		МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Обработано ADV2: "+МассивЛокальныхФайлов.Количество(),"Чеки");
		
		ЗагрузитьАвансы(МассивЛокальныхФайлов);
		УдалитьЛокальныеФайлы(МассивЛокальныхФайлов,"adv2");
		
		
	КонецЕсли;
	
    	
    	
	  
	  
	
Конецпроцедуры	



Процедура ЗафиксироватьЗагрузкуФайла(ОбСмена,ИмяЛокальногоФайла)
	Стр=ОбСмена.СписокФайлов.Добавить();
	Стр.Файл=ИмяЛокальногоФайла;
	Стр.ДатаЗагрузки=ТекущаяДата();
КонецПроцедуры



 
 //---------------<Загрузчики>---------------------------// GtG // 25.09.2013 20:48:31
 Процедура  ЗагрузитьЧеки(МассивЛокальныхФайлов,Результат=Истина)
	 
	
	 
	 
	 ТаблицаУслуг=ПолучитьТаблицуУслуг();
	 
	  ДанныеДляЗагрузки=РазобратьМассивФайлов(МассивЛокальныхФайлов,"str2"); //ТЗ
      
     
      
      
	   Если ДанныеДляЗагрузки.Количество()=0 Тогда
		   МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Нет чеков для загрузки","Чеки");
		   Возврат;
	   КонецЕсли;

	 	  
	  //---------------<Дозаполняем ТЗ и ищем смены по полученным данным>---------------------------// GtG // 25.09.2013 22:19:37
	  ТЗФильтра=Новый ТаблицаЗначений;
	  ТЗФильтра.Колонки.Добавить("КодСклада",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	  
	  ТЗФильтра.Колонки.Добавить("ИдСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
	  
	  ТЗФильтра.Колонки.Добавить("ЗаводскойНомерККМ",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(15,ДопустимаяДлина.Переменная)));
	  ТЗФильтра.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	  ТЗФильтра.Колонки.Добавить("ДатаОткрытияСмены",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
	  
	  ТЗФильтраТоваров=Новый ТаблицаЗначений;
	  ТЗФильтраТоваров.Колонки.Добавить("Код",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); 
	  
	  ТЗФильтраПартий=Новый ТаблицаЗначений;
	  ТЗФильтраПартий.Колонки.Добавить("Код",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); 
	  
	  
	  
	  КДЗ=ДанныеДляЗагрузки.Количество();
    КДЗх=0;
    
    Для Каждого Стр Из ДанныеДляЗагрузки Цикл
        
         КДЗх=КДЗх+1;
         КлиентСостояние("str2 ("+КДЗх+"/"+КДЗ+")");

		  // В чеках данные по смене складу и ккм сидят в каждой первой строке ТЗ разобранных файлов 
		  ПерваяСтрокаРазобранногоФайла=Стр.РазобранныйФайл.Получить(0);
		  Стр.КодСклада        = Число(ПерваяСтрокаРазобранногоФайла.Кол_1);
		  
		  Стр.ИдСмены= Число(ПерваяСтрокаРазобранногоФайла.Кол_16);
		  
		  Стр.ЗаводскойНомерККМ= ПерваяСтрокаРазобранногоФайла.Кол_3;
		  Стр.НомерСмены       = Число(ПерваяСтрокаРазобранногоФайла.Кол_4);
		  Стр.ДатаОткрытияСмены=Дата(ПерваяСтрокаРазобранногоФайла.Кол_5);
		  
		  СтрФильтра=ТЗФильтра.Добавить();
		  СтрФильтра.КодСклада =Стр.КодСклада;
		  
		  СтрФильтра.ИдСмены =Стр.ИдСмены;
		  
		  СтрФильтра.ЗаводскойНомерККМ=Стр.ЗаводскойНомерККМ;
		  СтрФильтра.НомерСмены=Стр.НомерСмены;
		  СтрФильтра.ДатаОткрытияСмены=Стр.ДатаОткрытияСмены;
		  
		  // Ну раз уж мы сюда влезли, то сформируем заодно и таблицы фильтров партий и товаров
		  // Потом по упомянутым кодам выгребем в ТЗ партии и товары и будем наслаждаться быстрой работой при заполнении таблиц документа
		  // пожертвовав при этом оперативной памятью
		  
		  ДанныеПоТОвару=Стр.РазобранныйФайл.НайтиСтроки(Новый Структура("Кол_0","2"));
		  Для Каждого СтрТовара Из ДанныеПоТОвару Цикл 
			 ТЗФильтраТоваров.Добавить().Код=Число(СтрТовара.Кол_2);//код товара 
			 Если СтрТовара.Кол_1 = "" Тогда
				 Сообщить(""+стр.ИмяЛокальногоФайла + "  есть пустая партия");
				 СтрТовара.Кол_1 = "0";
			 КонецЕсли;
		     ТЗФильтраПартий.Добавить().Код=Число(СтрТовара.Кол_1);//код партии
		  КонецЦикла;
		  
		  
      КонецЦикла; 
      
      
       ПроверитьКодыАптекНаЗагрузкуПоЧекам(ДанныеДляЗагрузки); //КодСклада
      
      
	  
	  ДанныеДляЗагрузки.Индексы.Добавить("КодСклада,ИДСмены");
	  
	  

	  
	  Если ТЗФильтра.Количество()=0 тогда
		  МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("ТЗФильтра.Количество()=0 -> Возврат","Чеки");
		  Возврат; // грузить нечего
	  КонецЕсли; 
	  
	  
	  

	  
	  ТЗФильтра.Свернуть("КодСклада,ИдСмены,ЗаводскойНомерККМ,НомерСмены,ДатаОткрытияСмены","");
	  ТЗФильтраТоваров.Свернуть("Код","");
	  ТЗФильтраПартий.Свернуть("Код","");
	  
	  // Ищем смены запросом, недостающие создаем.
	  // Т.к. параметров поиска 3 то загоним из во временную ТЗ и заджойним
	  Запрос=Новый Запрос("ВЫБРАТЬ
	                      |	ФильтрСмен.КодСклада КАК КодСклада,
	                      |	ФильтрСмен.ИдСмены КАК ИдСмены,
	                      |	ФильтрСмен.ЗаводскойНомерККМ КАК ЗаводскойНомерККМ,
	                      |	ФильтрСмен.НомерСмены КАК НомерСмены,
	                      |	ФильтрСмен.ДатаОткрытияСмены КАК ДатаОткрытияСмены
	                      |ПОМЕСТИТЬ FilterTable
	                      |ИЗ
	                      |	&ФильтрСмен КАК ФильтрСмен
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КодСклада,
	                      |	ИдСмены
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	FilterTable.КодСклада,
	                      |	FilterTable.ИдСмены,
	                      |	FilterTable.ЗаводскойНомерККМ,
	                      |	FilterTable.НомерСмены,
	                      |	FilterTable.ДатаОткрытияСмены,
	                      |	СменаККМ.Ссылка КАК СменаККМ,
	                      |	ВЫБОР
	                      |		КОГДА СменаККМ.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Создать,
	                      |	МестаХранения.Ссылка КАК Склад,
	                      |	МестаХранения.Фирма,
	                      |	ВЫБОР
	                      |		КОГДА FilterTable.ДатаОткрытияСмены <> СменаККМ.ДатаОткрытияСмены
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ИзменитьДатуОткрытия
	                      |ИЗ
	                      |	FilterTable КАК FilterTable
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменаККМ КАК СменаККМ
	                      |		ПО FilterTable.КодСклада = СменаККМ.КодСклада
	                      |			И FilterTable.ИдСмены = СменаККМ.ИдСмены
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	                      |		ПО FilterTable.КодСклада = МестаХранения.Код
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ FilterTable");
	  Запрос.УстановитьПараметр("ФильтрСмен",ТЗФильтра);
	  
	  РезПоискаСмен=Запрос.Выполнить().Выгрузить();
	  
	  
	  

	  
	  СоздатьНовыеСмены(РезПоискаСмен);
	  
	  

	  
	  //---------------<Выгребем таблицы товаров и партий упомянутых во входящих данных>---------------------------// GtG // 25.09.2013 23:09:32
	СтруктураДопреквизитов=Новый Структура; // Ключ - для как [ключ]  , Значение - собственно данные для выборки
	СтруктураДопреквизитов.Вставить("ВидПоступленияТовара","Isnull(НекийСправочник.ВидПоступленияТовара.ссылка,Значение(Перечисление.ВидыПоступленияТоваров.Покупка))");
	СтруктураДопреквизитов.Вставить("ТипНалогообложенияПоступленияТоваров","Isnull(НекийСправочник.ТипНалогообложенияПоступленияТоваров.ссылка, значение(Перечисление.ТипыНалогообложения.НДС))");
	СтруктураДопреквизитов.Вставить("Поставщик"," case when НекийСправочник.ВидПоступленияТовара = Значение(Перечисление.ВидыПоступленияТоваров.Комиссия) then НекийСправочник.Поставщик else null end ");
	СтруктураДопреквизитов.Вставить("ДокументПоступления"," case when НекийСправочник.ВидПоступленияТовара = Значение(Перечисление.ВидыПоступленияТоваров.Комиссия) then НекийСправочник.ДокументПоступления  else null end ");	
	СтруктураДопреквизитов.Вставить("ВхНомерНакл"," case when НекийСправочник.ВидПоступленияТовара = Значение(Перечисление.ВидыПоступленияТоваров.Комиссия) then cast(НекийСправочник.ДокументПоступления as Документ.ПоступлениеТовара).ВхНомерНакл  else null end ");
	СтруктураДопреквизитов.Вставить("ВхДатаНакл"," case when НекийСправочник.ВидПоступленияТовара = Значение(Перечисление.ВидыПоступленияТоваров.Комиссия) then  cast(НекийСправочник.ДокументПоступления as Документ.ПоступлениеТовара).ВхДатаНакл  else null end ");  
	СтруктураДопреквизитов.Вставить("СтавкаНДС"," ISNULL(НекийСправочник.СтавкаНДС,НекийСправочник.Владелец.ставкаНДС)"); 
	СтруктураДопреквизитов.Вставить("ЦенаЗакуп"," ISNULL(НекийСправочник.ЦенаЗакуп,0)"); 
	СтруктураДопреквизитов.Вставить("К"," ISNULL(НекийСправочник.К,1)");
	
	
	ТаблицаПартий=БыстраяИндексированнаяВыборкаЭлементовСправочникаПоКоду("Партии",Запрос,ТЗФильтраПартий.ВыгрузитьКолонку("Код"),Ложь,300,СтруктураДопреквизитов);  
	ТаблицаПартий.Индексы.Добавить("Код");
	
	ПроверкаПартий_ТипНОПТ();
	
	
	

	
	ТаблицаТОваров=БыстраяИндексированнаяВыборкаЭлементовСправочникаПоКоду("АССОРТИМЕНТНЫЙ_ПЛАН",Запрос,ТЗФильтраТоваров.ВыгрузитьКолонку("Код"),Ложь,400);  
	ТаблицаТОваров.Индексы.Добавить("Код");

	ТаблицаСотрудников=ПолучитьТаблицуСотрудников();// тк справочник не особенно длинный, но лазить в него каждый раз при загрузке очередного чека плохо
	ТаблицаСотрудников.индексы.добавить("Фирма,Табномер");

	ТаблицаНеизвестныхПартий=ПолучитьТаблицуНеизвестныхПартий(ТЗФильтраТоваров.ВыгрузитьКолонку("Код"));  
	  
	 
 
	  //---------------<Заталкиваем данные из чеков в документы смен>---------------------------// GtG // 25.09.2013 22:48:13
	  // Обрабатываем данные по таблице РезПоискаСмен. Сначала одну смену все чеки что пришли потом следующую
	  
	  Х=0;
	  К=РезПоискаСмен.Количество();
	  
	  Для Каждого Стр Из РезПоискаСмен Цикл
		  Х=Х+1;
		  Осталось=К-Х;
          
          //---------------<Странная конструкция>---------------------------// GtG // 06.05.2014 15:12:28
          //ПолучилиОбъект = Ложь;
          //Для й=0 По 3 Цикл
          //    Попытка
          //  	  ОбСмена=Стр.СменаККМ.ПолучитьОбъект();
          //  	  ПолучилиОбъект = Истина;
          //  	  Прервать;
          //    Исключение
          //  	  ОбщегоНазначения.Задержка(2);
          //    КонецПопытки;
          //КонецЦикла;
          //
          //Если ПолучилиОбъект = Ложь Тогда
          //    Результат = Ложь;
          //    Возврат;
          //КонецЕсли;
          
          ОбСмена=Стр.СменаККМ.ПолучитьОбъект();
          
          Попытка 
              ОбСмена.Заблокировать(); // чтоб никто не отобрал
          Исключение
              Продолжить;  // Пропускаем все по смене
          КонецПопытки;  
          
		  
		  
		  ДанныеДляСмены=ДанныеДляЗагрузки.НайтиСтроки(Новый Структура("КодСклада,ИДСмены",Стр.КодСклада,Стр.ИдСмены));
		  
		  Для Каждого СтрокаДанных Из ДанныеДляСмены Цикл
			  
			  Чек=СтрокаДанных.РазобранныйФайл;
			 
			  //---------------<Шапка>---------------------------// GtG // 25.09.2013 22:55:32
			  
			  //---------------<Товар,Мотивация (пп и контроль) ,бухгалтерия>---------------------------// GtG // 25.09.2013 22:55:41
			  ИДЧека=ДобавитьДанныеЧекаВСмену_Товар(ОбСмена,Чек);
			  ЗафиксироватьЗагрузкуФайла(ОбСмена,СтрокаДанных.ИмяЛокальногоФайла);
			  
		  КонецЦикла;  
		  
		  
		  ОбСмена.Записать(РежимЗаписиДокумента.Запись);

		  
		  ОбСмена.ЗагруженоЧеков=КоличествоЗагруженныхЧековСмены_ПоОбъекту(ОбСмена);
		  Попытка
			  
			  ОбСмена.Записать(РежимЗаписиДокумента.Проведение);
		  Исключение
			  МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("ЗагрузитьЧеки ДОСВИДОС!!! "+ОбСмена+" "+ОписаниеОшибки(),"Чеки");
          КонецПопытки;
          
          ОбСмена.Разблокировать();
          
          
		  
	  КонецЦикла;  
	  
	  

	  
	//---------------<Освобождаем память>---------------------------// GtG // 26.09.2013 14:17:05
	// Обнуляем все табличные переменные
	ТаблицаПартий=Неопределено;
	ТаблицаТОваров=Неопределено;
	РезПоискаСмен=Неопределено;  
	ТЗФильтра=Неопределено;
	ТЗФильтраТоваров=Неопределено;
	ТЗФильтраПартий=Неопределено;  
	ДанныеДляЗагрузки=Неопределено;
	ТаблицаСотрудников=Неопределено;
	Чек=Неопределено;  
	ДанныеДляСмены=Неопределено;  
	
Конецпроцедуры 

процедура ЗагрузитьАвансы(МассивЛокальныхФайлов)
	ДанныеДляЗагрузки=РазобратьМассивФайлов(МассивЛокальныхФайлов,"adv2"); //ТЗ
	
	 Если ДанныеДляЗагрузки.Количество()=0 Тогда
		   МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Нет чеков авансов для загрузки","Чеки");
		   Возврат;
	   КонецЕсли;

	  
	  
	  //---------------<Дозаполняем ТЗ и ищем смены по полученным данным>---------------------------// GtG // 25.09.2013 22:19:37
	  ТЗФильтра=Новый ТаблицаЗначений;
	  ТЗФильтра.Колонки.Добавить("КодСклада",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	  ТЗФильтра.Колонки.Добавить("ИДСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
	  
	  ТЗФильтра.Колонки.Добавить("ЗаводскойНомерККМ",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(15,ДопустимаяДлина.Переменная)));
	  ТЗФильтра.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	  ТЗФильтра.Колонки.Добавить("ДатаОткрытияСмены",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
	  
      
      КДЗ=ДанныеДляЗагрузки.Количество();
      КДЗх=0;
      
      Для Каждого Стр Из ДанныеДляЗагрузки Цикл
          
          КДЗх=КДЗх+1;
          КлиентСостояние("adv2 ("+КДЗх+"/"+КДЗ+")");
          
		  // В чеках данные по смене складу и ккм сидят в каждой первой строке ТЗ разобранных файлов 
		  ПерваяСтрокаРазобранногоФайла=Стр.РазобранныйФайл.Получить(0);
		  Стр.КодСклада        = Число(ПерваяСтрокаРазобранногоФайла.Кол_1);
		  
		  Стр.ИДСмены          =Число(ПерваяСтрокаРазобранногоФайла.Кол_19); //вер 2
		  
		  Стр.ЗаводскойНомерККМ= ПерваяСтрокаРазобранногоФайла.Кол_3;
		  Стр.НомерСмены       = Число(ПерваяСтрокаРазобранногоФайла.Кол_4);
		  Стр.ДатаОткрытияСмены=Дата(ПерваяСтрокаРазобранногоФайла.Кол_5);
		  
		  СтрФильтра=ТЗФильтра.Добавить();
		  СтрФильтра.КодСклада =Стр.КодСклада;
		  СтрФильтра.ИДСмены =Стр.ИДСмены;// вер 2
		  
		  СтрФильтра.ЗаводскойНомерККМ=Стр.ЗаводскойНомерККМ;
		  СтрФильтра.НомерСмены=Стр.НомерСмены;
		  СтрФильтра.ДатаОткрытияСмены=Стр.ДатаОткрытияСмены;
		  
	  КонецЦикла; 
      
      ПроверитьКодыАптекНаЗагрузкуПоЧекам(ДанныеДляЗагрузки); //КодСклада

      
	  ДанныеДляЗагрузки.Индексы.Добавить("КодСклада,ИДСмены");
	  
	  
	  
	  Если ТЗФильтра.Количество()=0 тогда
		  Возврат; // грузить нечего
	  КонецЕсли; 
	  
	  
	  ТЗФильтра.Свернуть("КодСклада,ИДСмены,ЗаводскойНомерККМ,НомерСмены,ДатаОткрытияСмены","");
	   
	  // Ищем смены запросом, недостающие создаем.
	  // Т.к. параметров поиска 3 то загоним из во временную ТЗ и заджойним
	  Запрос=Новый Запрос("ВЫБРАТЬ
	                      |	ФильтрСмен.КодСклада КАК КодСклада,
	                      |	ФильтрСмен.ИДСмены КАК ИДСмены,
	                      |	ФильтрСмен.ЗаводскойНомерККМ КАК ЗаводскойНомерККМ,
	                      |	ФильтрСмен.НомерСмены КАК НомерСмены,
	                      |	ФильтрСмен.ДатаОткрытияСмены КАК ДатаОткрытияСмены
	                      |ПОМЕСТИТЬ FilterTable
	                      |ИЗ
	                      |	&ФильтрСмен КАК ФильтрСмен
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КодСклада,
	                      |	ИДСмены
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	FilterTable.КодСклада,
	                      |	FilterTable.ИДСмены,
	                      |	FilterTable.ЗаводскойНомерККМ,
	                      |	FilterTable.НомерСмены,
	                      |	FilterTable.ДатаОткрытияСмены,
	                      |	СменаККМ.Ссылка КАК СменаККМ,
	                      |	ВЫБОР
	                      |		КОГДА СменаККМ.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Создать,
	                      |	МестаХранения.Ссылка КАК Склад,
	                      |	МестаХранения.Фирма,
	                      |	ВЫБОР
	                      |		КОГДА FilterTable.ДатаОткрытияСмены <> СменаККМ.ДатаОткрытияСмены
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ИзменитьДатуОткрытия
	                      |ИЗ
	                      |	FilterTable КАК FilterTable
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменаККМ КАК СменаККМ
	                      |		ПО FilterTable.КодСклада = СменаККМ.КодСклада
	                      |			И FilterTable.ИДСмены = СменаККМ.ИдСмены
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	                      |		ПО FilterTable.КодСклада = МестаХранения.Код
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ FilterTable");
	  Запрос.УстановитьПараметр("ФильтрСмен",ТЗФильтра);
	  
	  РезПоискаСмен=Запрос.Выполнить().Выгрузить();
	  
	  СоздатьНовыеСмены(РезПоискаСмен);
	  
	  //---------------<Заталкиваем данные из чеков в документы смен>---------------------------// GtG // 25.09.2013 22:48:13
	  // Обрабатываем данные по таблице РезПоискаСмен. Сначала одну смену все чеки что пришли потом следующую
	  Для Каждого Стр Из РезПоискаСмен Цикл
		  ОбСмена=Стр.СменаККМ.ПолучитьОбъект();
          
          Попытка 
              ОбСмена.Заблокировать(); // чтоб ни одна падла не помешала
          Исключение
              Продолжить; // пропустим
          КонецПопытки;    
              
          
          
          
		  ДанныеДляСмены=ДанныеДляЗагрузки.НайтиСтроки(Новый Структура("КодСклада,ИДСмены",Стр.КодСклада,Стр.ИДСмены));
		  
		  Для Каждого СтрокаДанных Из ДанныеДляСмены Цикл
			  
			  ЧекАванса=СтрокаДанных.РазобранныйФайл;
			  
			  //---------------<авансы получение/возврат>---------------------------// GtG // 25.09.2013 22:55:41
			 ИДЧека=ДобавитьДанныеЧекаАвансаВСмену(ОбСмена,ЧекАванса); // длинный номер документа
			 ЗафиксироватьЗагрузкуФайла(ОбСмена,СтрокаДанных.ИмяЛокальногоФайла);
			 
		 КонецЦикла;  
		  ОбСмена.ЗагруженоЧеков=КоличествоЗагруженныхЧековСмены_ПоОбъекту(ОбСмена);
		  
		  Попытка
			  ОбСмена.Записать(РежимЗаписиДокумента.Запись);
		  Исключение
			  // херня-с.
          КонецПопытки;
          
          ОбСмена.Разблокировать();
          
	  КонецЦикла;  
	  
	  
	//---------------<Освобождаем память>---------------------------// GtG // 26.09.2013 14:17:05
	// Обнуляем все табличные переменные
	РезПоискаСмен=Неопределено;  
	ТЗФильтра=Неопределено;
	ДанныеДляЗагрузки=Неопределено;
	ЧекАванса=Неопределено;  
	
Конецпроцедуры	

Процедура ЗагрузитьОткрытиеСмен(МассивЛокальныхФайлов)
    ДанныеДляЗагрузки=РазобратьМассивФайлов(МассивЛокальныхФайлов,"opn2"); //ТЗ
    
    Если ДанныеДляЗагрузки.Количество()=0 Тогда
        МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Нет открытий смен для загрузки","Чеки");
        Возврат;
    КонецЕсли;
    
    
    ТЗФильтра=Новый ТаблицаЗначений;
    ТЗФильтра.Колонки.Добавить("КодСклада",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
    
    ТЗФильтра.Колонки.Добавить("ИДСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
    
    ТЗФильтра.Колонки.Добавить("ЗаводскойНомерККМ",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(15,ДопустимаяДлина.Переменная)));
    ТЗФильтра.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
    ТЗФильтра.Колонки.Добавить("ДатаОткрытияСмены",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
    ТЗФильтра.Колонки.Добавить("ИмяЛокальногоФайла",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(500,ДопустимаяДлина.Переменная)));
    
    КДЗ=ДанныеДляЗагрузки.Количество();
    КДЗх=0;
    
    Для Каждого Стр Из ДанныеДляЗагрузки Цикл
        
         КДЗх=КДЗх+1;
         КлиентСостояние("opn2 ("+КДЗх+"/"+КДЗ+")");
        
        
        ПерваяСтрока=Стр.РазобранныйФайл.Получить(0);
        
        Стр.ДатаОткрытияСмены	= Дата(ПерваяСтрока.Кол_3);
        Стр.ЗаводскойНомерККМ	= Сокрлп(ПерваяСтрока.Кол_6);
        Стр.КодСклада =   число(ПерваяСтрока.Кол_4);
        Стр.ИдСмены=число(ПерваяСтрока.Кол_34);
        Стр.НомерСмены	= число(ПерваяСтрока.Кол_7);
        
        СтрФильтра=ТЗФильтра.Добавить();
        ЗаполнитьЗначенияСвойств(СтрФильтра,Стр);
        
    КонецЦикла;	
    
    
    ПроверитьКодыАптекНаЗагрузкуПоЧекам(ДанныеДляЗагрузки); //КодСклада
    
    
    
    
    ДанныеДляЗагрузки.Индексы.Добавить("КодСклада,ИдСмены");
    
    //---------------<---------------------------------------->---------------------------// GtG // 04.10.2013 13:58:26
    // Если opn2 пришел - значит смена в аптеке открыта.
    // файл обрабатываем и трем.
    // ------------------------------------------------------------------------------------
    
    //---------------<Ищем закрываемые смены>---------------------------// GtG // 04.10.2013 15:22:17
    
    Запрос=Новый Запрос("ВЫБРАТЬ
                        |   ФильтрСмен.КодСклада КАК КодСклада,
                        |   ФильтрСмен.ИдСмены КАК ИдСмены,
                        |   ФильтрСмен.ЗаводскойНомерККМ КАК ЗаводскойНомерККМ,
                        |   ФильтрСмен.НомерСмены КАК НомерСмены,
                        |   ФильтрСмен.ДатаОткрытияСмены КАК ДатаОткрытияСмены,
                        |   ФильтрСмен.ИмяЛокальногоФайла КАК ИмяЛокальногоФайла
                        |ПОМЕСТИТЬ FilterTable
                        |ИЗ
                        |   &ФильтрСмен КАК ФильтрСмен
                        |
                        |ИНДЕКСИРОВАТЬ ПО
                        |   КодСклада,
                        |   ЗаводскойНомерККМ,
                        |   НомерСмены,
                        |   ДатаОткрытияСмены
                        |;
                        |
                        |////////////////////////////////////////////////////////////////////////////////
                        |ВЫБРАТЬ
                        |   FilterTable.КодСклада,
                        |   FilterTable.ИдСмены,
                        |   FilterTable.ЗаводскойНомерККМ,
                        |   FilterTable.НомерСмены,
                        |   FilterTable.ДатаОткрытияСмены,
                        |   FilterTable.ИмяЛокальногоФайла,
                        |   ЕСТЬNULL(СменаККМ.Ссылка, &ПустаяСсылка) КАК СменаККМСсылка,
                        |   ЕСТЬNULL(СменаККМ.КоличествоЧеков, 0) КАК КоличествоЧеков_СМЕНЫ,
                        |   МестаХранения.Ссылка КАК Склад,
                        |   ВЫБОР
                        |       КОГДА СменаККМ.Ссылка ЕСТЬ NULL 
                        |           ТОГДА ИСТИНА
                        |       ИНАЧЕ ЛОЖЬ
                        |   КОНЕЦ КАК Создать,
                        |   МестаХранения.Фирма,
                        |   СменаККМ.Ссылка КАК СменаККМ,
                        |   ЛОЖЬ КАК ИзменитьДатуОткрытия
                        |ИЗ
                        |   FilterTable КАК FilterTable
                        |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменаККМ КАК СменаККМ
                        |       ПО FilterTable.КодСклада = СменаККМ.КодСклада
                        |           И FilterTable.ИдСмены = СменаККМ.ИдСмены
                        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
                        |       ПО FilterTable.КодСклада = МестаХранения.Код
                        |;
                        |
                        |////////////////////////////////////////////////////////////////////////////////
                        |УНИЧТОЖИТЬ FilterTable");
    Запрос.УстановитьПараметр("ФильтрСмен",ТЗФильтра);
    Запрос.УстановитьПараметр("ПустаяСсылка",Документы.СменаККМ.ПустаяСсылка());
    
    
    РезПоискаСмен=Запрос.Выполнить().Выгрузить();
    
    СоздатьНовыеСмены(РезПоискаСмен);
    
КонецПроцедуры	

 




Процедура ЗагрузитьСлужебныеЧеки(МассивЛокальныхФайлов)
	   ДанныеДляЗагрузки=РазобратьМассивФайлов(МассивЛокальныхФайлов,"sys2");  //ТЗ
	   
	   Если ДанныеДляЗагрузки.Количество()=0 Тогда
		   МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Нет служебных чеков для загрузки","Чеки");
		   Возврат;
	   КонецЕсли;
	   	   
	   //---------------<Дозаполняем ТЗ и ищем смены по полученным данным>---------------------------// GtG // 25.09.2013 22:19:37
	  ТЗФильтра=Новый ТаблицаЗначений;
	  ТЗФильтра.Колонки.Добавить("КодСклада",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	  ТЗФильтра.Колонки.Добавить("ИдСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
	  
	  ТЗФильтра.Колонки.Добавить("ЗаводскойНомерККМ",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(15,ДопустимаяДлина.Переменная)));
	  ТЗФильтра.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	  ТЗФильтра.Колонки.Добавить("ДатаОткрытияСмены",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
	  
	КДЗ=ДанныеДляЗагрузки.Количество();
    КДЗх=0;
    
    Для Каждого Стр Из ДанныеДляЗагрузки Цикл
        
         КДЗх=КДЗх+1;
         КлиентСостояние("sys2 ("+КДЗх+"/"+КДЗ+")");

		  // В чеках данные по смене складу и ккм сидят в каждой первой строке ТЗ разобранных файлов 
		  ПерваяСтрокаРазобранногоФайла=Стр.РазобранныйФайл.Получить(0);
		  Стр.КодСклада        = Число(ПерваяСтрокаРазобранногоФайла.Кол_1);
		  
		  Стр.ИдСмены        = Число(ПерваяСтрокаРазобранногоФайла.Кол_14); // формат вер2
		  
		  Стр.ЗаводскойНомерККМ= ПерваяСтрокаРазобранногоФайла.Кол_3;
		  Стр.НомерСмены       = Число(ПерваяСтрокаРазобранногоФайла.Кол_4);
		  Стр.ДатаОткрытияСмены=Дата(ПерваяСтрокаРазобранногоФайла.Кол_5);
		  
		  
		  СтрФильтра=ТЗФильтра.Добавить();
		  СтрФильтра.КодСклада	=	Стр.КодСклада;
		  
		  СтрФильтра.ИдСмены	=	Стр.ИдСмены;// формат вер2
		  
		  СтрФильтра.ЗаводскойНомерККМ=Стр.ЗаводскойНомерККМ;
		  СтрФильтра.НомерСмены=Стр.НомерСмены;
		  СтрФильтра.ДатаОткрытияСмены=Стр.ДатаОткрытияСмены;
		  //
      КонецЦикла; 
      
      
      ПроверитьКодыАптекНаЗагрузкуПоЧекам(ДанныеДляЗагрузки); //КодСклада

      
	  
	  Если ТЗФильтра.Количество()=0 тогда
		  Возврат; // грузить нечего
	  КонецЕсли; 
	  
	  
	  ТЗФильтра.Свернуть("КодСклада,ИдСмены,ЗаводскойНомерККМ,НомерСмены,ДатаОткрытияСмены","");
	  // Ищем смены запросом, недостающие создаем.
	  // Т.к. параметров поиска 2 то загоним их во временную ТЗ и заджойним
	  Запрос=Новый Запрос("ВЫБРАТЬ
	                      |	ФильтрСмен.КодСклада КАК КодСклада,
	                      |	ФильтрСмен.ИдСмены КАК ИдСмены,
	                      |	ФильтрСмен.ЗаводскойНомерККМ,
	                      |	ФильтрСмен.НомерСмены,
	                      |	ФильтрСмен.ДатаОткрытияСмены
	                      |ПОМЕСТИТЬ FilterTable
	                      |ИЗ
	                      |	&ФильтрСмен КАК ФильтрСмен
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КодСклада,
	                      |	ИдСмены
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	FilterTable.КодСклада,
	                      |	FilterTable.ИдСмены,
	                      |	FilterTable.ЗаводскойНомерККМ,
	                      |	FilterTable.НомерСмены,
	                      |	FilterTable.ДатаОткрытияСмены,
	                      |	СменаККМ.Ссылка КАК СменаККМ,
	                      |	ВЫБОР
	                      |		КОГДА СменаККМ.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Создать,
	                      |	МестаХранения.Ссылка КАК Склад,
	                      |	МестаХранения.Фирма,
	                      |	ВЫБОР
	                      |		КОГДА FilterTable.ДатаОткрытияСмены <> СменаККМ.ДатаОткрытияСмены
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ИзменитьДатуОткрытия
	                      |ИЗ
	                      |	FilterTable КАК FilterTable
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменаККМ КАК СменаККМ
	                      |		ПО FilterTable.КодСклада = СменаККМ.КодСклада
	                      |			И FilterTable.ИдСмены = СменаККМ.ИдСмены
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	                      |		ПО FilterTable.КодСклада = МестаХранения.Код
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ FilterTable");
	  Запрос.УстановитьПараметр("ФильтрСмен",ТЗФильтра);
	  
	  РезПоискаСмен=Запрос.Выполнить().Выгрузить();
	  
	  СоздатьНовыеСмены(РезПоискаСмен);

	  //---------------<Грузим системные чеки>---------------------------// GtG // 20.11.2013 12:31:57
	   //---------------<Заталкиваем данные из чеков в документы смен>---------------------------// GtG // 25.09.2013 22:48:13
	  // Обрабатываем данные по таблице РезПоискаСмен. Сначала одну смену все чеки что пришли потом следующую
	  Для Каждого Стр Из РезПоискаСмен Цикл
		  ОбСмена=Стр.СменаККМ.ПолучитьОбъект();
          
          Попытка 
              ОбСмена.Заблокировать(); // чтоб никто не отобрал
          Исключение
              Продолжить;  // Пропускаем все по смене
          КонецПопытки;    
          
          
          
		  ДанныеДляСмены=ДанныеДляЗагрузки.НайтиСтроки(Новый Структура("КодСклада,ИдСмены",Стр.КодСклада,Стр.ИдСмены));
		  
		  Для Каждого СтрокаДанных Из ДанныеДляСмены Цикл
			  
			  СистемныйЧек=СтрокаДанных.РазобранныйФайл;
			  
			  //---------------<Системные чеки, чтоб были>---------------------------// GtG // 25.09.2013 22:55:41
			  ИДЧека=ДобавитьДанныеСистемногоЧекаВСмену(ОбСмена,СистемныйЧек);
			  
			  ЗафиксироватьЗагрузкуФайла(ОбСмена,СтрокаДанных.ИмяЛокальногоФайла);
			  
		  КонецЦикла; 
		  
		  ОбСмена.ЗагруженоЧеков=КоличествоЗагруженныхЧековСмены_ПоОбъекту(ОбСмена);
		  ОбСмена.Записать(РежимЗаписиДокумента.Запись);
		  
		  Если НайтиВыпавшиеЧеки(ОбСмена)=Истина ТОгда
			  ОбСмена.Записать(РежимЗаписиДокумента.Запись); // а вдруг там был Z-отчет, а хдр-ка потеряется по дороге?
          КонецЕсли; 
          
          ОбСмена.Разблокировать();
          
		  
	  КонецЦикла;  
	  
	  
	//---------------<Освобождаем память>---------------------------// GtG // 26.09.2013 14:17:05
	// Обнуляем все табличные переменные
	РезПоискаСмен=Неопределено;  
	ТЗФильтра=Неопределено;
	ДанныеДляЗагрузки=Неопределено;
	СистемныйЧек=Неопределено;  
КонецПроцедуры


Функция СуммаПолученныхАвансов_ПоОбъекту(ОбДок)
    МассивСтрокПолученияАвансов=ОбДок.Авансы.НайтиСтроки(Новый Структура("ВидДвижения",Перечисления.ВидДвиженияАвансов.ПолучениеАванса));
    СуммаПолученныхАвансов=0;
    Для Каждого СтрМПА Из МассивСтрокПолученияАвансов Цикл
        СуммаПолученныхАвансов=СуммаПолученныхАвансов+СтрМПА.Сумма;
    КонецЦикла;  
    Возврат СуммаПолученныхАвансов;
КонецФункции    

Процедура ЗагрузитьЗакрытиеСмен(МассивЛокальныхФайлов)
    ДанныеДляЗагрузки=РазобратьМассивФайлов(МассивЛокальныхФайлов,"hdr2"); //ТЗ
    
    Если ДанныеДляЗагрузки.Количество()=0 Тогда
        МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Нет закрытий смен для загрузки","Чеки");
        Возврат;
    КонецЕсли;
    
    
    ТЗФильтра=Новый ТаблицаЗначений;
    ТЗФильтра.Колонки.Добавить("КодСклада",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
    
    ТЗФильтра.Колонки.Добавить("ИДСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
    
    ТЗФильтра.Колонки.Добавить("ЗаводскойНомерККМ",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(15,ДопустимаяДлина.Переменная)));
    ТЗФильтра.Колонки.Добавить("НомерСмены",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
    ТЗФильтра.Колонки.Добавить("ДатаОткрытияСмены",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
    ТЗФильтра.Колонки.Добавить("ИмяЛокальногоФайла",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(500,ДопустимаяДлина.Переменная)));
    
        
    
    Для Каждого Стр Из ДанныеДляЗагрузки Цикл
        
        ПерваяСтрока=Стр.РазобранныйФайл.Получить(0);
        
        КК=Стр.РазобранныйФайл.Колонки.Количество();
        Если КК<>35 тогда
            Сообщить("Нарушение формата! Должно быть 35 колонок! "+Стр.ИмяЛокальногоФайла+" пропускаем.");
            
        Иначе
            Стр.ДатаОткрытияСмены	= Дата(ПерваяСтрока.Кол_3);
            Стр.ЗаводскойНомерККМ	= Сокрлп(ПерваяСтрока.Кол_6);
            Стр.КодСклада =   число(ПерваяСтрока.Кол_4);
            Стр.ИдСмены=число(ПерваяСтрока.Кол_34);
            Стр.НомерСмены	= число(ПерваяСтрока.Кол_7);
            
            СтрФильтра=ТЗФильтра.Добавить();
            ЗаполнитьЗначенияСвойств(СтрФильтра,Стр);
        КонецЕсли;
        
    КонецЦикла;	
    
    ДанныеДляЗагрузки.Индексы.Добавить("КодСклада,ИдСмены");
    
    //---------------<---------------------------------------->---------------------------// GtG // 04.10.2013 13:58:26
    // Если hdr2 пришел - значит смена в аптеке закрыта.
    // файл обрабатываем и трем.
    // Но если не все чеки загружены (ибо FTP показывает только 2000 файлов), то файл нужно обработать при следующем заходе.
    // Для этого удаляем запись  о нем из Массива локальных файлов - и он зависнет в папке до следующего захода.
    // ------------------------------------------------------------------------------------
    
    //---------------<Ищем закрываемые смены>---------------------------// GtG // 04.10.2013 15:22:17
    
    Запрос=Новый Запрос("ВЫБРАТЬ
    |	ФильтрСмен.КодСклада КАК КодСклада,ФильтрСмен.ИдСмены КАК ИдСмены,
    
    |	ФильтрСмен.ЗаводскойНомерККМ КАК ЗаводскойНомерККМ,
    |	ФильтрСмен.НомерСмены КАК НомерСмены,
    |	ФильтрСмен.ДатаОткрытияСмены КАК ДатаОткрытияСмены,
    |	ФильтрСмен.ИмяЛокальногоФайла КАК ИмяЛокальногоФайла
    |ПОМЕСТИТЬ FilterTable
    |ИЗ
    |	&ФильтрСмен КАК ФильтрСмен
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	КодСклада,
    |	ЗаводскойНомерККМ,
    |	НомерСмены,
    |	ДатаОткрытияСмены
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	FilterTable.КодСклада,  FilterTable.ИдСмены,
    |	FilterTable.ЗаводскойНомерККМ,
    |	FilterTable.НомерСмены,
    |	FilterTable.ДатаОткрытияСмены,
    |	FilterTable.ИмяЛокальногоФайла,
    |	iSnULL(СменаККМ.Ссылка,&ПустаяСсылка) как СменаККМСсылка,
    |	isNull(СменаККМ.КоличествоЧеков,0) КАК КоличествоЧеков_СМЕНЫ
    |ИЗ
    |	FilterTable КАК FilterTable
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменаККМ КАК СменаККМ
    |		ПО FilterTable.КодСклада = СменаККМ.КодСклада
    |			И FilterTable.ИдСмены = СменаККМ.ИдСмены
    |			
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ FilterTable");
    Запрос.УстановитьПараметр("ФильтрСмен",ТЗФильтра);
    Запрос.УстановитьПараметр("ПустаяСсылка",Документы.СменаККМ.ПустаяСсылка());
    
    
    РезПоискаСмен=Запрос.Выполнить().Выгрузить();
    
    //---------------<>---------------------------// GtG // 04.10.2013 15:51:53
    
    КДЗ=РезПоискаСмен.Количество();
    КДЗх=0;

    
    
    Для Каждого Стр Из РезПоискаСмен Цикл
        
        КДЗх=КДЗх+1;
        КлиентСостояние("hdr2 ("+КДЗх+"/"+КДЗ+")");

        
        
        МожноЗачестьЗагрузку=Истина;
        
        ДокСмены=Стр.СменаККМСсылка;
        
        Если ДокСмены.Пустая()=Истина и Стр.ДатаОткрытияСмены>=ТекущаяДата()-(24*60*60)*3 Тогда
            // это значит что смена не полностью загружена и нужно оставить её до следующего захода.
            // возможно, при следующем заходе, подгрузятся файлы чеков и смена загрузится полностью.
            СтрокаДанныхДляЗагрузки=ДанныеДляЗагрузки.Найти(Стр.ИмяЛокальногоФайла,"ИмяЛокальногоФайла");
            
            ИмяЛокальногоФайла=Стр.ИмяЛокальногоФайла;
            
            
            ИндексМЛФ=МассивЛокальныхФайлов.Найти(СтрокаДанныхДляЗагрузки.ФайлОбъект); 
            Если ИндексМЛФ<>Неопределено ТОгда
                МожноЗачестьЗагрузку=Ложь;
                МассивЛокальныхФайлов.Удалить(ИндексМЛФ);
            КонецЕсли; 
            
            Продолжить;
        ИначеЕсли ДокСмены.Пустая()=Истина и Стр.ДатаОткрытияСмены<ТекущаяДата()-(24*60*60)*3 Тогда
            // Закрытые смены и файлы hdr недельной давности завалявшиеся по какой-то причине косим
            Продолжить; // заваляшка. нужно его почикать. смену закрывать по нему бессмысленно.
        КонецЕсли;	  
        
        
        СтрокаЗД=ДанныеДляЗагрузки.НайтиСтроки(Новый Структура("КодСклада,ИдСмены",Стр.КодСклада,Стр.ИдСмены));
        
        Если СтрокаЗД.Количество()=0 Тогда
            Продолжить;
        КонецЕсли;	
        
        ДанныеЗакрытияСмены=СтрокаЗД.Получить(0).РазобранныйФайл; //ТЗ из 1-й строки
        
        Если ДанныеЗакрытияСмены.Количество()=0 Тогда
            Продолжить;
        КонецЕсли;
        
        СтрЗС=ДанныеЗакрытияСмены.Получить(0); // строка с данными закрытия смены
        
        
        
        
        
        // 0 is_correct ---- Признак корректности  
        // 1 CASE WHEN is_posting THEN 1 ELSE 0 END ---- Отметка проведения  
        // 2 ndoc ---- Номер документа в аптеке  
        // 3 to_char(ddoc ''YYYYMMDDHH24MISS''::text) ---- Дата/время начала смены  
        // 4 id_dep[1] ---- Код аптеки  
        // 5 id_model ---- Модель ККМ  
        // 6 posnum ---- № ккм  
        // 7 shiftnum ---- № смены  
        // 8 nopen ---- № документа открывашки 
        // 9 nclose ---- № документа закрывашки 
        // 10 sale_count ---- Колво продаж по БД  
        // 11 return_count ---- Колво возвратов по БД  
        // 12 income_count ---- Колво внесений по БД  
        // 13 outcome_count ---- Колво выплат по БД  
        // 14 sum_sale_0 ---- Продаж нал по БД  
        // 15 sum_sale_3 ---- Продаж безнал по БД  
        // 16 sum_return_0 ---- Возвратов нал по БД  
        // 17 sum_return_3 ---- Возвратов безнал по БД  
        // 18 sum_income  ---- Внесений  
        // 19 sum_outcome ---- Выплат  
        // 20 CASE WHEN eklz_overflow THEN 1 ELSE 0 END ---- Капец ЭКЛЗ  
        //***** 21 ecr_sale_0 ---- Продаж нал по БД только по счетчикам ККМ 
        //***** 22 ecr_sale_3 ---- Продаж безнал по БД только по счетчикам ККМ 
        //***** 23 ecr_return_0 ---- Возвратов нал по БД только по счетчикам ККМ 
        //***** 24 ecr_return_3 ---- Возвратов безнал по БД только по счетчикам ККМ 
        // 25 ecr_income ---- Внесений только по счетчикам ККМ 
        // 26 ecr_outcome ---- Выплат только по счетчикам ККМ 
        // 27 ecr_summary ---- Выручка итого по счетчику ККМ  
        // 28 ecr_bzero ---- Необнуляемая на начало смены  
        //***** 29 ecr_ezero ---- Необнуляемая на конец смены  
        // 30 ecr_sale_count ---- Колво продаж по БД только по счетчикам ККМ 
        // 31 ecr_return_count ---- Колво возвратов по БД только по счетчикам ККМ 
        // 32 ecr_income_count ---- Колво внесений по БД только по счетчикам ККМ 
        // 33 ecr_outcome_count ---- Колво выплат по БД только по счетчикам ККМ 
        // 34 ИдСмены
        
        ОбДокСмены=ДокСмены.ПолучитьОбъект(); 
        
        Попытка
            ОбДокСмены.ЗагруженоЧеков=КоличествоЗагруженныхЧековСмены(ОбДокСмены);
        Исключение
            Продолжить; // это не смена, а неопределено наверно
        КонецПопытки;
        
        
        
        ОбДокСмены.НомерЧекаОткрытия = Число(СтрЗС.кол_8);
        ОбДокСмены.НомерЧекаЗакрытия = Число(СтрЗС.кол_9);
        
        ЗаполнитьСписокВыпавшихЧеков(ОбДокСмены);    // GtG  //  13.01.2014 19:36:47
        
        
        //---------------<Посчитаем сумму полученных авансов>---------------------------// GtG // 22.04.2014 16:50:00
        СуммаПолученныхАвансов=СуммаПолученныхАвансов_ПоОбъекту(ОбДокСмены);
        //---------------<>---------------------------// GtG // 22.04.2014 16:50:15
        
        
        
        ОбДокСмены.СуммыПоЗетОтчетам.Очистить(); // GtG // 25.12.2013 17:52:32
        
        СтрокаСуммПоЗеткам=ОбДокСмены.СуммыПоЗетОтчетам.Добавить();  
        
        ОбДокСмены.ДатаОткрытияСмены=Дата(СтрЗС.кол_3);
        
        СтрокаСуммПоЗеткам.СуммаПоЗетОтчетуНал      = Число(СтрЗС.кол_21);
        СтрокаСуммПоЗеткам.СуммаПоЗетОтчетуБезНал   = Число(СтрЗС.кол_22);
        СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуНал   = Число(СтрЗС.кол_23);
        СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуБезНал= Число(СтрЗС.кол_24);
        СтрокаСуммПоЗеткам.ИтогоПоЗетОтчету         = Число(СтрЗС.кол_27)+Число(СтрЗС.кол_23)+Число(СтрЗС.кол_24);//ЗагрузитьЗакрытиеСмен пишет в смену
        СтрокаСуммПоЗеткам.СуммаПоБазе              = ОбДокСмены.Бухгалтерия.Итог("СуммаСоСкидкой")+ОбДокСмены.АвансыПоУслугам.Итог("Сумма")+СуммаПолученныхАвансов ;
        СтрокаСуммПоЗеткам.НеобнуляемыйИтог         = Число(СтрЗС.кол_29);
        
        
        ОбДокСмены.ПризнакОкончанияЭКЛЗ=?(СтрЗС.кол_29="1",Истина,Ложь);
        
        
        ОбДокСмены.Комментарий="";
        КомментарийСходимостиСумм="";
        
        
        //.СуммаПоБазе = сумма товара со скидкой + все авансы
        //.ИтогоПоЗетОтчету = сумма полученная в кассу (все пробитое с плюсом, если был возврат - он идет отдельно),
        //.ВозвратыПоЗетОтчетуНал и безнал = сумма возвернутая из кассы ( итого по зет отчету нужно уменьшить на сумму возврата, и получится то, что прилипло на карман).
        
        ПроверкаСходимостиСумм= (СтрокаСуммПоЗеткам.ИтогоПоЗетОтчету-СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуНал- СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуБезНал)
                                -СтрокаСуммПоЗеткам.СуммаПоБазе ;
        
        Если ПроверкаСходимостиСумм=0 Тогда
            КолвоЧековПоДаннымАптеки=ОбДокСмены.ЗагруженоЧеков;
            КомментарийСходимостиСумм="Суммы по базе и Z-Отчету сходятся";
            
            Если ОбДокСмены.ZОтчетСнят=Ложь Тогда
                ОбДокСмены.ZОтчетСнят=Истина; // принудительно
                ОбДокСмены.Комментарий=ОбДокСмены.Комментарий+Символы.ПС+"Принудительно Считаем что Z-отчет снят, т.к. суммы сходятся ";
            КонецЕсли;	
            
            
            
        Иначе
            НомерОткрЧека=Число(СтрЗС.кол_8);
            НомерЗакрЧека=Число(СтрЗС.кол_9);
            КолвоЧековПоДаннымАптеки= НомерЗакрЧека-НомерОткрЧека;
            
            КомментарийСходимостиСумм="Суммы по базе и Z-Отчету не сходятся";
            
            //Оставим HDR-файл , чтобы подождать догрузки возможных чеков
            СтрокаДанныхДляЗагрузки=ДанныеДляЗагрузки.Найти(Стр.ИмяЛокальногоФайла,"ИмяЛокальногоФайла");
            
            ИндексМЛФ=МассивЛокальныхФайлов.Найти(СтрокаДанныхДляЗагрузки.ФайлОбъект); 
            Если ИндексМЛФ<>Неопределено ТОгда
                МожноЗачестьЗагрузку=Ложь;
                МассивЛокальныхФайлов.Удалить(ИндексМЛФ);
            КонецЕсли; 
            
            
        КонецЕсли;	
        
        
        ОбДокСмены.Комментарий=КомментарийСходимостиСумм ;
        
        ОбДокСмены.КоличествоЧеков =КолвоЧековПоДаннымАптеки; // с учетом всех технических чеков
        
        
        //---------------<Если Суммы сходятся, То считаем что z-ка снята, даже если и не снята на самом деле. (может не дойти если была проблема со снятием  Z-отчета>---------------------------// GtG // 04.01.2014 0:37:04 
        Если КолвоЧековПоДаннымАптеки=ОбДокСмены.ЗагруженоЧеков и ОбДокСмены.ZОтчетСнят=Ложь Тогда
            ОбДокСмены.ZОтчетСнят=Истина;
            ОбДокСмены.Комментарий=ОбДокСмены.Комментарий+Символы.ПС+"Считаем что Z-отчет снят, т.к. суммы сходятся";
        КонецЕсли;
        
        
        Если МожноЗачестьЗагрузку=Истина Тогда
            ЗафиксироватьЗагрузкуФайла(ОбДокСмены,Стр.ИмяЛокальногоФайла);// если учитывать все срабатывания, то документ смены засрется лишними данными.
        КонецЕсли;
        
        ОбДокСмены.ЕстьПроблемныеЧеки=Ложь; // а вдруг все хорошо?
        //Сообщить(""+ОбДокСмены.Склад+"	дата:  " + ОбДокСмены.Дата + "	" + ОбДокСмены.Номер);
        
        
        
        //---------------<Контроль выпавших чеков>---------------------------// GtG // 25.01.2014 20:37:42
        // Ищем выпавшие чеки, а так же непроведенные в аптеке. 
        // Если есть либо то, либо другое то  ЕстьПроблемныеЧеки станет истина.
        ЕстьВыпавшие=НайтиВыпавшиеЧеки(ОбДокСмены);
        
        ОбДокСмены.Записать(РежимЗаписиДокумента.Запись); // перепроводить не надо
        
        
        
         //---------------<Если По этой смене уже успели создать реализации ККМ то нужно прообновить суммы по зет отчетам и затычки по этим РККМ>---------------------------// GtG // 22.04.2014 15:55:12
         ЗапросЗет=Новый Запрос();
         ЗапросЗет.УстановитьПараметр("Ссылка",ДокСмены);
         ЗапросЗет.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
                         |  СменаККМСостояниеЧековВАптеке.Ссылка КАК Ссылка,
                         |  СменаККМСостояниеЧековВАптеке.РеализацияККМ
                         |ПОМЕСТИТЬ РККМСмены
                         |ИЗ
                         |  Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
                         |ГДЕ
                         |  СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка
                         |  И СменаККМСостояниеЧековВАптеке.РеализацияККМ.Ссылка ЕСТЬ НЕ NULL 
                         |
                         |ИНДЕКСИРОВАТЬ ПО
                         |  Ссылка
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |  СменаККМСуммыПоЗетОтчетам.СуммаПоЗетОтчетуНал,
                         |  СменаККМСуммыПоЗетОтчетам.СуммаПоЗетОтчетуБезНал,
                         |  СменаККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуНал,
                         |  СменаККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуБезНал,
                         |  СменаККМСуммыПоЗетОтчетам.ИтогоПоЗетОтчету,
                         |  СменаККМСуммыПоЗетОтчетам.СуммаПоБазе,
                         |  СменаККМСуммыПоЗетОтчетам.НеобнуляемыйИтог,
                         |  РККМСмены.РеализацияККМ КАК РККМ,
                         |  СменаККМСуммыПоЗетОтчетам.Ссылка.Касса КАК Касса,
                         |  СменаККМСуммыПоЗетОтчетам.Ссылка.НомерСмены КАК ЗетОчет,
                         |  СменаККМСуммыПоЗетОтчетам.Ссылка.ПризнакОкончанияЭКЛЗ КАК ПризнакОкончанияЭКЛЗ
                         |ИЗ
                         |  РККМСмены КАК РККМСмены
                         |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.СуммыПоЗетОтчетам КАК СменаККМСуммыПоЗетОтчетам
                         |      ПО РККМСмены.Ссылка = СменаККМСуммыПоЗетОтчетам.Ссылка
                         |ГДЕ
                         |  СменаККМСуммыПоЗетОтчетам.Ссылка = &Ссылка
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |УНИЧТОЖИТЬ РККМСмены";
         ЗетРез=ЗапросЗет.Выполнить();
         Если ЗетРез.Пустой()=Ложь ТОгда // Уже успели создать РККМ по этой смене
             // Обновим данные в таблице СуммыПоЗетОтчетам всех РККМ созданных по этой смене
             ЗетВыб=ЗетРез.Выбрать();
             Пока ЗетВыб.Следующий() Цикл
                 
                 ОбРККМ=ЗетВыб.РККМ.ПолучитьОбъект();
                 
                 Попытка 
                     ОбРККМ.Заблокировать();// чтоб ни одна падла не отняла
                 Исключение
                     Сообщить(""+ОбРККМ+" Уже заблокирован  кем-то другим. Пропускаем.");
                     Продолжить;
                 КонецПопытки;    
                 
                 
                 ОбРККМ.СуммыПоЗетОтчетам.Очистить();
                 СтрЗет=ОбРККМ.СуммыПоЗетОтчетам.Добавить();
                 СтрЗет.Касса=ЗетВыб.Касса;
                 СтрЗет.ЗетОчет=ЗетВыб.ЗетОчет;
                 СтрЗет.ПризнакОкончанияЭКЛЗ=ЗетВыб.ПризнакОкончанияЭКЛЗ;
                 СтрЗет.СуммаПоЗетОтчетуНал  =ЗетВыб.СуммаПоЗетОтчетуНал           ;
                 СтрЗет.СуммаПоЗетОтчетуБезНал =ЗетВыб.СуммаПоЗетОтчетуБезНал      ;
                 СтрЗет.ВозвратыПоЗетОтчетуНал =ЗетВыб.ВозвратыПоЗетОтчетуНал      ;
                 СтрЗет.ВозвратыПоЗетОтчетуБезНал=ЗетВыб.ВозвратыПоЗетОтчетуБезНал ;
                 СтрЗет.ИтогоПоЗетОтчету =ЗетВыб.ИтогоПоЗетОтчету                  ; //ЗагрузитьЗакрытиеСмен проставляет в рккмах
                 СтрЗет.СуммаПоБазе=ЗетВыб.СуммаПоБазе                           ;
                 СтрЗет.НеобнуляемыйИтог=ЗетВыб.НеобнуляемыйИтог                  ;
                 
                 
                 
                 СтрокаСуммПоЗеткам=ЗетВыб;
                 
                 //---------------<Проверим сходится ли сумма по зетке и сумма по базе>---------------------------// GtG // 16.04.2014 17:29:53 
                 ПроверкаСходимостиСумм= (СтрокаСуммПоЗеткам.ИтогоПоЗетОтчету-СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуНал- СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуБезНал)
                 -СтрокаСуммПоЗеткам.СуммаПоБазе;
                 
                 Если ПроверкаСходимостиСумм<>0 Тогда
                     ПричинаНекорректности=Перечисления.ПричиныНекорректнойВыручки.НеСходитсяСуммаПоБазеИZОтчету;
                     Затычка=Истина;
                 Иначе
                     ПричинаНекорректности="";
                     Затычка=Ложь;
                 КонецЕсли;  
                 ОбРККМ.Затычка=Затычка;
                 ОбРККМ.НаихудшаяПричинаНекорректности=ПричинаНекорректности;
                 ОбРККМ.Записать(РежимЗаписиДокумента.Запись);
                 
                 ОбРККМ.Разблокировать();
                 
             КонецЦикла;    
         КонецЕсли;    
         
        
        
            
    КонецЦикла;	  
    
КонецПроцедуры	

 


//---------------<Вспомогательные процедуры и функции>---------------------------// GtG // 25.09.2013 16:45:27

Процедура ЗаполнитьСписокВыпавшихЧеков(ОбДокСмены)
	
	
СписокНомеров=новый ТаблицаЗначений;
СписокНомеров.Колонки.Добавить("ДБНомер",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Любой)));

Если  ОбДокСмены.НомерЧекаЗакрытия -  ОбДокСмены.НомерЧекаОткрытия > 5000 Тогда
	Возврат;
КонецЕсли;

	Для Ы=ОбДокСмены.НомерЧекаОткрытия+1 По ОбДокСмены.НомерЧекаЗакрытия Цикл   // первый чек-открывашка не передается в офис
		СписокНомеров.Добавить().ДБНомер=Ы;
	КонецЦикла;	
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |  СменаККМСостояниеЧековВАптеке.НомерЧека КАК НомерЧека
                 |ПОМЕСТИТЬ УникальныеНомераЧековСмены
                 |ИЗ
                 |  Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
                 |ГДЕ
                 |  СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  НомерЧека
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  ЭталонныйСписокНомеровЧековСмены.ДБНомер КАК ДБНомер
                 |ПОМЕСТИТЬ ЭСНомеров
                 |ИЗ
                 |  &ЭталонныйСписокНомеровЧековСмены КАК ЭталонныйСписокНомеровЧековСмены
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  ДБНомер
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  ЕСТЬNULL(ЭСНомеров.ДБНомер, УникальныеНомераЧековСмены.НомерЧека) КАК НомерЧека,
                 |  ВЫБОР
                 |      КОГДА УникальныеНомераЧековСмены.НомерЧека ЕСТЬ NULL 
                 |          ТОГДА ""Не загружен в 1С. Либо выпал при загрузке, либо не выгрузился из аптеки.""
                 |      КОГДА ЭСНомеров.ДБНомер ЕСТЬ NULL 
                 |          ТОГДА ""Чека с таким номером не должно быть в 1С. Откуда взялся- непонятно.""
                 |  КОНЕЦ КАК Комментарий
                 |ИЗ
                 |  ЭСНомеров КАК ЭСНомеров
                 |      ПОЛНОЕ СОЕДИНЕНИЕ УникальныеНомераЧековСмены КАК УникальныеНомераЧековСмены
                 |      ПО ЭСНомеров.ДБНомер = УникальныеНомераЧековСмены.НомерЧека
                 |ГДЕ
                 |  (УникальныеНомераЧековСмены.НомерЧека ЕСТЬ NULL 
                 |          ИЛИ ЭСНомеров.ДБНомер ЕСТЬ NULL )";
	
	Запрос.УстановитьПараметр("Ссылка",ОбДокСмены.Ссылка);
	Запрос.УстановитьПараметр("ЭталонныйСписокНомеровЧековСмены",СписокНомеров);
	
	ОбДокСмены.ВыпавшиеЧеки.Загрузить(Запрос.Выполнить().Выгрузить());
Конецпроцедуры	


Процедура ПроверкаПартий_ТипНОПТ()
	
	СписокСтарыхПартий=ТаблицаПартий.НайтиСтроки(Новый Структура("ТипНалогообложенияПоступленияТоваров","")); // ищем партии с незаполненным реквизитом ТНОПТ
	
	Для Каждого Партия Из СписокСтарыхПартий Цикл
		Партия.ТипНалогообложенияПоступленияТоваров=ТипНОПТ_НДС; // на текущий цикл работы
		
		//---------------<заполняем незаполненный реквизит,чтобы  в будущем на нее не натыкаться>---------------------------// GtG // 27.09.2013 15:45:33
		П=Партия.ССылка.ПолучитьОбъект();
		П.ТипНалогообложенияПоступленияТоваров=ТипНОПТ_НДС;
        П.Записать();
	КонецЦикла;	
КонецПроцедуры	


Функция КорректноеЧисло(СтроковыеДанные)
	// пустая строка не преобразуется в 0, поэтому насильно преобразуем "" в "0"
	Если СтроковыеДанные="" ТОгда
		Возврат "0";
	Иначе
		Возврат СтроковыеДанные;
	КонецЕсли;	
КонецФункции	

Функция Получитьтовар(Код)
	// Затычка для тестовой базы
	// создает новый товар, которого в тестовой базе нет
	Стр=ТаблицаТОваров.Найти(Код,"Код");
	
	Если Стр=Неопределено ТОгда
		
		НовыйТовар=Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.СоздатьЭлемент();
		НовыйТовар.Код=Код;
		НовыйТовар.Наименование="Неизвестный товар с кодом "+Код;
		НовыйТовар.Записать();
		
		Стр=ТаблицаТОваров.Добавить();
		Стр.Код=Код;
		Стр.Ссылка=НовыйТовар.Ссылка;
		Возврат НовыйТовар.Ссылка;
	КонецЕсли;
	
	Возврат Стр.Ссылка;
	
КонецФункции	




Функция ПолучитьПартию(Код,Товар,СтавкаНДС)
	
	Стр=ТаблицаПартий.Найти(Код,"Код");
	
	
	
	Если Стр=Неопределено ТОгда
       МаксимальнаяСтавкаНДС=СоответствиеНДС.Получить("18");
		
 	   Рез=ТаблицаНеизвестныхПартий.Найти(Товар,"Товар");
		
		Если Рез=Неопределено тогда //         .Пустой() ТОгда // создаем запись о партии
			Партия=Справочники.Партии.СоздатьЭлемент();
			ПараметрыСеанса.Беспредел = Истина;
			Партия.Наименование="-НЕИЗВЕСТНАЯ-";
			
			Партия.ВидПоступленияТовара=ВидПоступленияТовара_ПоУмолчанию;
			Партия.ТипНалогообложенияПоступленияТоваров=ТипНалогообложенияПоступленияТоваров_ПоУмолчанию;
			Партия.СтавкаНДС=МаксимальнаяСтавкаНДС;
			Партия.СтавкаНДСРеализации=МаксимальнаяСтавкаНДС;
            пАРТИЯ.К=1;
			Партия.Владелец= Товар;
			
			ОбщегоНазначения.ЗаписьОбъекта(Партия,5,2);
			ПараметрыСеанса.Беспредел = Ложь;
			
			ПартияСсылка=Партия.Ссылка;
		Иначе
			
			ПартияСсылка=Рез.НеизвестнаяПартия;
			
		КонецЕсли;	
		
		
		
		//Вернем  пустую структуру , тогда обращение по именам полей сработает аналогично обращению к полям строки ТЗ
		ПустаяСтруктура=Новый Структура;
		
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			ПустаяСтруктура.Вставить(Кол.Имя,"");
		КонецЦикла;	
		
		ПустаяСтруктура.Вставить("Код",Код);
		ПустаяСтруктура.Вставить("ссылка",ПартияСсылка);
		ПустаяСтруктура.Вставить("ВидПоступленияТовара",ВидПоступленияТовара_ПоУмолчанию);
		ПустаяСтруктура.Вставить("ТипНалогообложенияПоступленияТоваров",ТипНалогообложенияПоступленияТоваров_ПоУмолчанию);
		ПустаяСтруктура.Вставить("Поставщик",Неопределено);
		ПустаяСтруктура.Вставить("ДокументПоступления",Неопределено);	
		ПустаяСтруктура.Вставить("ВхНомерНакл",Неопределено);	
		ПустаяСтруктура.Вставить("ВхДатаНакл",Неопределено);
		ПустаяСтруктура.Вставить("СтавкаНДС",МаксимальнаяСтавкаНДС);
		ПустаяСтруктура.Вставить("ЦенаЗакуп",0); 
		ПустаяСтруктура.Вставить("К",1);
		
		Возврат ПустаяСтруктура;
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции	


Функция ПолучитьТаблицуУслуг()
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	Услуги.Код,
	                    |	Услуги.Ссылка
	                    |ИЗ
	                    |	Справочник.Услуги КАК Услуги");
	ТЗ=Запрос.Выполнить().Выгрузить();					
	ТЗ.Индексы.Добавить("Код");
	Возврат ТЗ;
КонецФункции	


Функция ПолучитьТаблицуСотрудников()
	Запрос=новый Запрос("ВЫБРАТЬ
	                    |	СотрудникиДляМотивации.Владелец КАК Фирма,
	                    |	СотрудникиДляМотивации.ТабНомер КАК ТабНомер,
	                    |	СотрудникиДляМотивации.Ссылка
	                    |ИЗ
	                    |	Справочник.СотрудникиДляМотивации КАК СотрудникиДляМотивации
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Фирма,
	                    |	ТабНомер");
						
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции


Функция ПолучитьСотрудникаПоТабномеруИФирме(ТабНомер,Фирма)
	
	Рез=ТаблицаСотрудников.НайтиСтроки(Новый Структура("ТабНомер,Фирма",ТабНомер,Фирма));
	
	Если Рез.Количество()=0 Тогда
		// нет такого ксотрудника вачпе.
		// Это может быть либо новый из зупа либо левый подработчик не оформленный в фирме
		НовыйСотр=Справочники.СотрудникиДляМотивации.СоздатьЭлемент();
		
		НовыйСотр.Владелец=Фирма;
		НовыйСотр.ТабНомер=ТабНомер;
		НовыйСотр.Наименование="Подработчик?";
		НовыйСотр.Записать();
		
		// чтобы нашлось при загрузке следующего чека из пачки
		Стр=ТаблицаСотрудников.Добавить();
		Стр.ТабНомер=ТабНомер;
		Стр.Фирма=Фирма;
		Стр.Ссылка=НовыйСотр.Ссылка;
		
		возврат НовыйСотр.Ссылка;
	КонецЕсли;
	
	Возврат Рез.получить(0).ссылка;
	
КонецФункции


Функция ПолучитьТаблицыДисконта(ОбСмена,СсылкаПартия,КоличествоВозврата)
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000000000
	                    |	СменаККМДисконт.Карта,
	                    |	100 * СменаККМДисконт.СуммаСкидки / (СменаККМДисконт.СуммаСоСкидкой + СменаККМДисконт.СуммаСкидки) КАК ПроцентСкидки,
	                    |	СменаККМДисконт.Количество,
	                    |	СменаККМДисконт.НомерЧека,
	                    |	СменаККМДисконт.Партия
	                    |ПОМЕСТИТЬ ДисконтПоПартии
	                    |ИЗ
	                    |	Документ.СменаККМ.Дисконт КАК СменаККМДисконт
	                    |ГДЕ
	                    |	СменаККМДисконт.Ссылка = &Ссылка
	                    |	И СменаККМДисконт.Партия = &Партия
	                    |	И СменаККМДисконт.Количество >= &Количество
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	СменаККМДисконт.НомерЧека УБЫВ
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	ДисконтПоПартии.НомерЧека
	                    |ПОМЕСТИТЬ НомерПодходящегоЧека
	                    |ИЗ
	                    |	ДисконтПоПартии КАК ДисконтПоПартии
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ДисконтПоПартии.Карта,
	                    |	ДисконтПоПартии.ПроцентСкидки,
	                    |	ДисконтПоПартии.Партия
	                    |ПОМЕСТИТЬ ДисконтПоПодходящемуЧеку
	                    |ИЗ
	                    |	ДисконтПоПартии КАК ДисконтПоПартии
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомерПодходящегоЧека КАК НомерПодходящегоЧека
	                    |		ПО ДисконтПоПартии.НомерЧека = НомерПодходящегоЧека.НомерЧека
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	6 КАК кол_0,
	                    |	ДисконтПоПодходящемуЧеку.Партия.Код КАК кол_1,
	                    |	ДисконтПоПодходящемуЧеку.Партия.Владелец.Код КАК кол_2,
	                    |	РА_РекламнаяАкция.Номер КАК кол_3,
	                    |	РА_РекламнаяАкция.Дата КАК кол_4,
	                    |	0 КАК кол_5,
	                    |	0 КАК кол_6,
	                    |	ДисконтПоПодходящемуЧеку.Карта КАК ИДРА_Карта,
	                    |	ДисконтПоПодходящемуЧеку.ПроцентСкидки
	                    |ИЗ
	                    |	ДисконтПоПодходящемуЧеку КАК ДисконтПоПодходящемуЧеку
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РА_РекламнаяАкция КАК РА_РекламнаяАкция
	                    |		ПО ДисконтПоПодходящемуЧеку.Карта = РА_РекламнаяАкция.ИДРА
	                    |ГДЕ
	                    |	ДисконтПоПодходящемуЧеку.Карта ПОДОБНО ""РА-%""
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	5 КАК Кол_0,
	                    |	0 КАК кол_1,
	                    |	0 КАК кол_2,
	                    |	ДисконтПоПодходящемуЧеку.Карта КАК кол_3,
	                    |	ДисконтПоПодходящемуЧеку.ПроцентСкидки КАК кол_4,
	                    |	ДисконтПоПодходящемуЧеку.ПроцентСкидки КАК ПроцентЧислом
	                    |ПОМЕСТИТЬ ДисконтныеКарты
	                    |ИЗ
	                    |	ДисконтПоПодходящемуЧеку КАК ДисконтПоПодходящемуЧеку
	                    |ГДЕ
	                    |	НЕ ДисконтПоПодходящемуЧеку.Карта ПОДОБНО ""РА-%""
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ ДисконтПоПартии
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ НомерПодходящегоЧека
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ ДисконтПоПодходящемуЧеку
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	СУММА(ДисконтныеКарты.ПроцентЧислом) КАК ПроцентЧислом
	                    |ПОМЕСТИТЬ суммарныйПроцентДисконта
	                    |ИЗ
	                    |	ДисконтныеКарты КАК ДисконтныеКарты
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ДисконтныеКарты.Кол_0,
	                    |	ДисконтныеКарты.кол_1,
	                    |	ДисконтныеКарты.кол_2,
	                    |	ДисконтныеКарты.кол_3,
	                    |	ДисконтныеКарты.кол_4,
	                    |	ДисконтныеКарты.ПроцентЧислом КАК ПроцентЧислом,
	                    |	ДисконтныеКарты.ПроцентЧислом / суммарныйПроцентДисконта.ПроцентЧислом КАК ДоляВДисконте
	                    |ИЗ
	                    |	ДисконтныеКарты КАК ДисконтныеКарты,
	                    |	суммарныйПроцентДисконта КАК суммарныйПроцентДисконта
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ ДисконтныеКарты
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ суммарныйПроцентДисконта");
						
						Запрос.УстановитьПараметр("Ссылка",ОбСмена.Ссылка);
						Запрос.УстановитьПараметр("Партия",СсылкаПартия);
						Запрос.УстановитьПараметр("Количество",КоличествоВозврата);
						
	Рез=Запрос.ВыполнитьПакет();
	
	МассивВозврата=Новый Массив;
	
	МассивВозврата.Добавить(Рез.Получить(3).Выгрузить()); // таблица акций
	МассивВозврата.Добавить(Рез.Получить(9).Выгрузить()); // таблица ДК
	
	Возврат МассивВозврата;
КонецФункции	


Процедура ЗапомнитьСостояниеЧекаВАптеке(ОбСмена,НомерЧека,ДатаОткрытияЧека,ПроведенВаптеке,УдаленВАптеке,ТипЧека)
	// запоминаем или обновляем состояние чека в аптеке
	МассивСтр=ОбСмена.СостояниеЧековВАптеке.НайтиСтроки(Новый Структура("НомерЧека,ДатаОткрытияЧека",НомерЧека,ДатаОткрытияЧека));
	
	Если МассивСтр.Количество()=0 Тогда
		Стр=ОбСмена.СостояниеЧековВАптеке.Добавить();
		Стр.НомерЧека  =  НомерЧека ;
		Стр.ДатаОткрытияЧека    = ДатаОткрытияЧека ;
	Иначе
		Стр=МассивСтр.Получить(0);
	КонецЕсли;
	
	Стр.ПроведенВаптеке=ПроведенВаптеке ;
	Стр.УдаленВАптеке= УдаленВАптеке;
    Стр.ТипЧека=СокрЛП(ТипЧека);
Конецпроцедуры	



Процедура СвернутьТабличныеЧастиСмены(ОбСмена)
	// смена должна быть записана перед передачей сюда.
	// сворачиваются только те табличные части, которые не влияют на проводки смены
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМАвансыПоУслугам.НомерЧека,
	                    |	СменаККМАвансыПоУслугам.ДатаОткрытияЧека,
	                    |	СменаККМАвансыПоУслугам.ВидОперации,
	                    |	СменаККМАвансыПоУслугам.ТипОплаты,
	                    |	СменаККМАвансыПоУслугам.НомерЗаказа,
	                    |	СменаККМАвансыПоУслугам.ДатаЗаказа,
	                    |	СменаККМАвансыПоУслугам.Сумма,
	                    |	СменаККМАвансыПоУслугам.Касса,
	                    |	СменаККМАвансыПоУслугам.ЗетОчет,
	                    |	СменаККМАвансыПоУслугам.СтавкаНДС,
	                    |	СменаККМАвансыПоУслугам.СуммаНДС,
	                    |	СменаККМАвансыПоУслугам.Услуга,
	                    |	""АвансыПоУслугам"" КАК Имя_Табличной_Части
	                    |ИЗ
	                    |	Документ.СменаККМ.АвансыПоУслугам КАК СменаККМАвансыПоУслугам
	                    |ГДЕ
	                    |	СменаККМАвансыПоУслугам.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМПерсональныеПродажиТовар.НомерЧека,
	                    |	СменаККМПерсональныеПродажиТовар.ДатаОткрытияЧека,
	                    |	СменаККМПерсональныеПродажиТовар.Сотрудник,
	                    |	СменаККМПерсональныеПродажиТовар.Товар,
	                    |	СменаККМПерсональныеПродажиТовар.Количество,
	                    |	СменаККМПерсональныеПродажиТовар.СуммаРознФакт,
	                    |	СменаККМПерсональныеПродажиТовар.СуммаСкидки,
	                    |	СменаККМПерсональныеПродажиТовар.СуммаЗакуп,
	                    |	СменаККМПерсональныеПродажиТовар.Коэффициент,
	                    |	""ПерсональныеПродажиТовар"" КАК Имя_Табличной_Части
	                    |ИЗ
	                    |	Документ.СменаККМ.ПерсональныеПродажиТовар КАК СменаККМПерсональныеПродажиТовар
	                    |ГДЕ
	                    |	СменаККМПерсональныеПродажиТовар.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМПерсональныеПродажиКонтроль.НомерЧека,
	                    |	СменаККМПерсональныеПродажиКонтроль.ДатаОткрытияЧека,
	                    |	СменаККМПерсональныеПродажиКонтроль.Сотрудник,
	                    |	СменаККМПерсональныеПродажиКонтроль.КоличествоЧеков,
	                    |	СменаККМПерсональныеПродажиКонтроль.НачалоСмены,
	                    |	СменаККМПерсональныеПродажиКонтроль.КонецСмены,
	                    |	СменаККМПерсональныеПродажиКонтроль.СуммаРознФакт,
	                    |	СменаККМПерсональныеПродажиКонтроль.СуммаЗакуп,
	                    |	СменаККМПерсональныеПродажиКонтроль.СуммаСкидки,
	                    |	""ПерсональныеПродажиКонтроль"" КАК Имя_Табличной_Части
	                    |ИЗ
	                    |	Документ.СменаККМ.ПерсональныеПродажиКонтроль КАК СменаККМПерсональныеПродажиКонтроль
	                    |ГДЕ
	                    |	СменаККМПерсональныеПродажиКонтроль.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМПрограммыЛояльности.НомерЧека,
	                    |	СменаККМПрограммыЛояльности.ДатаОткрытияЧека,
	                    |	СменаККМПрограммыЛояльности.Товар,
	                    |	СменаККМПрограммыЛояльности.НомерКарты,
	                    |	СменаККМПрограммыЛояльности.НомерККМ,
	                    |	СменаККМПрограммыЛояльности.НомерСмены,
	                    |	СменаККМПрограммыЛояльности.БарКодТовара,
	                    |	СменаККМПрограммыЛояльности.Количество,
	                    |	СменаККМПрограммыЛояльности.СуммаСоСкидкой,
	                    |	СменаККМПрограммыЛояльности.СуммаСкидки,
	                    |	СменаККМПрограммыЛояльности.СуммаНДС,
	                    |	СменаККМПрограммыЛояльности.СуммаНДССкидки,
	                    |	СменаККМПрограммыЛояльности.Контрагент,
	                    |	СменаККМПрограммыЛояльности.Поставщик,
	                    |	""ПрограммыЛояльности"" КАК Имя_Табличной_Части
	                    |ИЗ
	                    |	Документ.СменаККМ.ПрограммыЛояльности КАК СменаККМПрограммыЛояльности
	                    |ГДЕ
	                    |	СменаККМПрограммыЛояльности.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМБухгалтерия.НомерЧека,
	                    |	СменаККМБухгалтерия.ДатаОткрытияЧека,
	                    |	СменаККМБухгалтерия.СтавкаНДС,
	                    |	СменаККМБухгалтерия.ТипОплаты,
	                    |	СменаККМБухгалтерия.СуммаБезСкидки,
	                    |	СменаККМБухгалтерия.СуммаСоСкидкой,
	                    |	СменаККМБухгалтерия.СуммаСкидки,
	                    |	СменаККМБухгалтерия.СуммаНДСБезСкидки,
	                    |	СменаККМБухгалтерия.СуммаНДДСоСкидкой,
	                    |	СменаККМБухгалтерия.ЗакупочнаяСНДС,
	                    |	СменаККМБухгалтерия.НДСЗакуп,
	                    |	СменаККМБухгалтерия.ТипНалогообложенияПТ,
	                    |	СменаККМБухгалтерия.ВидПоступленияТовара,
	                    |	СменаККМБухгалтерия.ВхНомерНакл,
	                    |	СменаККМБухгалтерия.ВхДатаНакл,
	                    |	СменаККМБухгалтерия.Поставщик,
	                    |	""Бухгалтерия"" КАК Имя_Табличной_Части
	                    |ИЗ
	                    |	Документ.СменаККМ.Бухгалтерия КАК СменаККМБухгалтерия
	                    |ГДЕ
	                    |	СменаККМБухгалтерия.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМДисконт.НомерЧека,
	                    |	СменаККМДисконт.ДатаОткрытияЧека,
	                    |	СменаККМДисконт.Карта,
	                    |	СменаККМДисконт.Товар,
	                    |	СменаККМДисконт.Еит,
	                    |	СменаККМДисконт.СуммаСоСкидкой,
	                    |	СменаККМДисконт.СуммаСкидки,
	                    |	СменаККМДисконт.К,
	                    |	СменаККМДисконт.Количество,
	                    |	СменаККМДисконт.Партия,
	                    |	""Дисконт"" КАК Имя_Табличной_Части
	                    |ИЗ
	                    |	Документ.СменаККМ.Дисконт КАК СменаККМДисконт
	                    |ГДЕ
	                    |	СменаККМДисконт.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СменаККМТовар.НомерЧека,
	                    |	СменаККМТовар.ДатаОткрытияЧека,
	                    |	СменаККМТовар.Товар,
	                    |	СменаККМТовар.ЕИТ,
	                    |	СменаККМТовар.К,
	                    |	СменаККМТовар.Количество,
	                    |	СменаККМТовар.Партия,
	                    |	СменаККМТовар.Сумма,
	                    |	СменаККМТовар.СтавкаНДС,
	                    |	СменаККМТовар.СуммаНДС,
	                    |	СменаККМТовар.СуммаЗакуп,
	                    |	СменаККМТовар.НДСЗакуп
	                    |ИЗ
	                    |	Документ.СменаККМ.Товар КАК СменаККМТовар
	                    |ГДЕ
	                    |	СменаККМТовар.Ссылка = &Ссылка");
						
	Запрос.УстановитьПараметр("Ссылка",ОбСмена.Ссылка);					
	
	Рез=Запрос.ВыполнитьПакет();
	
	Для Каждого ТЧ из Рез Цикл
		
		Если ТЧ.Пустой()=Истина Тогда
			Продолжить;
		КонецЕсли;
		
		
		ТабЧасть=ТЧ.Выгрузить();
		
		Если ТабЧасть.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТЧ=ТабЧасть.Получить(0).Имя_Табличной_Части;
		
		ОбСмена[ИмяТЧ].Загрузить(ТабЧасть);
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	


Функция КоличествоЗагруженныхЧековСмены(ОбСмена)
	// Пересчитывает все чеки в смене по номерам и датам чеков.
	ЗапросРасчетаКоличестваЧековСмены.УстановитьПараметр("Ссылка",ОбСмена.Ссылка);
	
	Рез=ЗапросРасчетаКоличестваЧековСмены.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выб=Рез.Выбрать();
	Выб.Следующий();
	
	Возврат Выб.КоличествоЧековСмены; // все чеки, включая служебные

КонецФункции


Функция КоличествоЗагруженныхЧековСмены_ПоОбъекту(ОбСмена)
	 // все чеки, включая служебные, по еще не записанному объекту
    // КолвоЧеков=ОбСмена.ПерсональныеПродажиКонтроль.Количество()+
    //            ОбСмена.СлужебныеЧеки.Количество();
    //			
    //АпоУс=ОбСмена.АвансыПоУслугам.Выгрузить(,"ДатаОткрытияЧека");
    //АпоУс.Свернуть("ДатаОткрытияЧека","");
    //
    //КолвоЧеков=КолвоЧеков+АпоУс.Количество();
    //
    //АВ=ОбСмена.Авансы.Выгрузить(,"ДатаОткрытияЧека");
    //АВ.Свернуть("ДатаОткрытияЧека","");

    //КолвоЧеков=КолвоЧеков+АВ.Количество();
    //
    //Серт=ОбСмена.Сертификаты.Выгрузить(,"ДатаОткрытияЧека");
    //Серт.Свернуть("ДатаОткрытияЧека","");

    //КолвоЧеков=КолвоЧеков+Серт.Количество();
    
    КолвоЧеков=ОбСмена.СостояниеЧековВАптеке.Количество();
    
	Возврат КолвоЧеков; 
	
	
КонецФункции	


Функция НайтиЧек_По_СистемномуИД_И_ТипуДокумента_По_КонтролюДанных(ОбСмена,ТипЧека,СистемныйИД)
    КД=ОбСмена.СостояниеЧековВАптеке;
    
    СтрокаКд=КД.Найти(СистемныйИД,"НомерЧека");
    
    Если СтрокаКд<>Неопределено Тогда
        Если  СтрокаКд.ТипЧека=ТипЧека Тогда
            Возврат Истина; // есть такой, это плохо, попытка повторной загрузки - нужно его пропустить
        Иначе
            // Косяк - один и тот же системный ид использован для разных типов документов. Типа грузим, насколько это правильно - будет когда-то разбираться техподдержка.
            Возврат Ложь;
        КонецЕсли;
    иНАЧЕ
        Возврат Ложь; // не найдено , и это хорошо - можно грузить смело.
        
    кОНЕЦеСЛИ;     
    
    
КонецФункции    




Функция ДобавитьДанныеЧекаВСмену_Товар(ОбСмена,Чек)
	// ОбСмена- ДокументОбъект СменаККМ
	// Чек - ТЗ одного разобранного файла str_*.csv
	//---------------<>---------------------------// GtG // 26.09.2013 14:20:34
    
    Фирма=ОбСмена.Фирма;
    
    
    
	ШапкаЧека=Чек.Получить(0);
	НомерЧека=Число(ШапкаЧека.Кол_6); //Длинный номер документа
    КороткийНомерЧека = Число(ШапкаЧека.Кол_9); //Короткий номер документа
	Если Число(ШапкаЧека.Кол_13)=0 Тогда
		// Это глючный чек, сумма по ККМ =0 его грузить не надо
		КлиентСообщить("Глючный чек, не грузим , т.к. сумма по ккм=0 "+ ОбСмена+"  Чек "+ Число(ШапкаЧека.Кол_6)); 
		МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Глючный чек, сумма по ккм=0 (Склад "+ОбСмена.КодСклада+" ККМ "+ОбСмена.ЗаводскойНомерККМ+" смена "+ОбСмена.НомерСмены+" чек "+НомерЧека+")","ГЛЮКИ");
		Возврат НомерЧека;
	Конецесли;	
	
	ТипОплаты= ШапкаЧека.Кол_11;
	Если ТипОплаты="0" Тогда
		ТипОплаты=Перечисления.ТипыОплаты.Наличными;
	ИначеЕсли 	ТипОплаты="3" Тогда
		ТипОплаты=Перечисления.ТипыОплаты.Кредиткой;
	КонецЕсли;	
	
	
	ТабНомер=сокрлп(ШапкаЧека.Кол_15);//строка
	
	Товар=ОбСмена.Товар;
	Услуги=ОбСмена.АвансыПоУслугам;
	ППТовар=ОбСмена.ПерсональныеПродажиТовар;
	ППКонтроль=ОбСмена.ПерсональныеПродажиКонтроль;
	Бухгалтерия=ОбСмена.Бухгалтерия;
	Дисконт=ОбСмена.Дисконт;
	Авансы=ОбСмена.Авансы;
    КД=ОбСмена.СостояниеЧековВАптеке;
	
	
	
	ПроведенВаптеке=?(ШапкаЧека.Кол_2="1",Истина,Ложь);

	Попытка
		УдаленВАптеке  =?(ШапкаЧека.Кол_18="1",Истина,Ложь);
	Исключение
		УдаленВАптеке=Ложь;
	КонецПопытки;
	
	ДатаОткрытияЧека=Дата(ШапкаЧека.Кол_7);
	попытка
		ДатаЗакрытияЧека=Дата(ШапкаЧека.Кол_8);
	исключение
		ДатаЗакрытияЧека=ДатаОткрытияЧека;
	КонецПопытки;
    
    
	//--------------------------------------------------------// GtG |>18.11.2013 20:54:07
	//              Блокировка повторной загрузки чека
	Если 1=2 тогда
		обсмена=Документы.СменаККМ.СоздатьДокумент();
	КонецЕсли;
	
    Если
        //КД.Найти(НомерЧека,"НомерЧека")<>Неопределено или // поиск по контролю данных  и типу документа
        НайтиЧек_По_СистемномуИД_И_ТипуДокумента_По_КонтролюДанных(ОбСмена,"STR2",НомерЧека)= истина 
        //или
        //Товар.Найти(НомерЧека,"НомерЧека")<>Неопределено или
        //Услуги.Найти(НомерЧека,"НомерЧека")<>Неопределено или
        //ППКонтроль.Найти(НомерЧека,"НомерЧека")<>Неопределено или
        //Дисконт.Найти(НомерЧека,"НомерЧека")<>Неопределено или
        //Авансы.Найти(НомерЧека,"НомерЧека")<>Неопределено 
        ТОгда
			//Сообщить("Этот чек уже загружен. Пропускаем. "+ОбСмена+"  Чек №"+НомерЧека);
		Возврат НомерЧека;
	КонецЕсли;
	//--------------------------------------------------------// GtG <|
		
	
	
	
	
	СтрокиТовараЧека=Чек.НайтиСтроки(Новый структура("Кол_0","2"));
	
	СтрокиУслугЧека=Чек.НайтиСтроки(Новый структура("Кол_0","3"));
	
	СтрокиЗачетаАвансовЧека=Чек.НайтиСтроки(Новый структура("Кол_0","4"));
	
	
	
	// Если строка попала под акцию, то в дисконт пойдет информация только по акции,
	// Дисконтные карты при этом игнорируются.
	ТаблицаДанныхРеклАкций=Чек.Скопировать(Новый структура("Кол_0","6"));
	
	//---------------<Данные по ДК>---------------------------// GtG // 29.10.2013 22:01:40
	// Будут использованы для размазывания скидки по всем картам
	// для строк, которые не попали под акции, но скидка по ним тем не менее была предоставлена
	ТаблицаДК=Чек.Скопировать(Новый структура("Кол_0","5"));
	ТаблицаДК.Колонки.Добавить("ПроцентЧислом");
	ТаблицаДК.Колонки.Добавить("ДоляВДисконте");
	
	КолвоЗаписейДК=ТаблицаДК.Количество();
	
	
	Для Каждого СтрДК Из ТаблицаДк Цикл
		Если СокрЛП(СтрДк.Кол_4) = "" Тогда
					Сообщить("Глючная акция ( удаленная скорей всего ) (Склад "+ОбСмена.КодСклада+" ККМ "+ОбСмена.ЗаводскойНомерККМ+" смена "+ОбСмена.НомерСмены+" чек в имени файла "+КороткийНомерЧека+")");
		КонецЕсли;	
		Попытка		
			СтрДК.ПроцентЧислом=Число(СтрДк.Кол_4); // типа  процент
		Исключение
			Сообщить(СтрДк.Кол_4);
			Сообщить("Глючная акция ( удаленная скорей всего ) (Склад "+ОбСмена.КодСклада+" ККМ "+ОбСмена.ЗаводскойНомерККМ+" смена "+ОбСмена.НомерСмены+" чек в имени файла "+КороткийНомерЧека+")");
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	СуммарныйПроцентПоДК=ТаблицаДК.Итог("ПроцентЧислом");
	
	Для Каждого СтрДК Из ТаблицаДк Цикл
		если СуммарныйПроцентПоДК<>0 тогда
		 	СтрДК.ДоляВДисконте=СтрДК.ПроцентЧислом/СуммарныйПроцентПоДК; // типа  процент
		Иначе	
			КлиентСообщить("Чек с нулевой скидкой "+ОбСмена+"   "+НомерЧека);
			
			СтрДК.ДоляВДисконте=0;
		КонецЕсли;	
	КонецЦикла;
	

	
	//--------------------------------------------------------// GtG |>29.10.2013 22:01:48
	
	ПКСуммаРознФакт=0;
	ПКСуммаСкидки=0;
	ПКСуммаЗакуп=0;
	
	ТзДляБух=ЭталонТЗДляБух.Скопировать();// Пустая ТЗ полученная единожды, при старте обработки.
	
	ТипЧека=ШапкаЧека.Кол_10;
	Если ТипЧека="1" тогда // продажа
		Множитель=1;
	Иначе
		Множитель=-1;       //возврат
	КонецЕсли;

	//Сообщить("----------------------------- ЧЕГ!--------------------------------------");
	
	
	СотрудникЧека=ПолучитьСотрудникаПоТабномеруИФирме(ТабНомер,Фирма);
	
	
	
	Для Каждого СтрЧека Из СтрокиТовараЧека Цикл
		//---------------<товар>---------------------------// GtG // 27.09.2013 12:14:38
		СуммаСкидки=Множитель* число(СтрЧека.Кол_8);
        
        Если число(КорректноеЧисло(СтрЧека.Кол_9))< Число(КорректноеЧисло(СтрЧека.Кол_11)) Тогда     // GtG  //  16.05.2014 19:07:27 
            ОтрицательнаяНаценка= Истина;
        Иначе
            ОтрицательнаяНаценка= Ложь;
        Конецесли;    // GtG  //  16.05.2014 19:07:35    
            
        
				
		Стр=Товар.Добавить();
		
		СтавкаНДС=СоответствиеНДС.Получить(СтрЧека.Кол_13);
        ТоварСсылка=ПолучитьТовар(Число(СтрЧека.Кол_2));
		
		ДанныеПартии=ПолучитьПартию(Число(СтрЧека.Кол_1),ТоварСсылка,СтавкаНДС); // строка тз партий

		Если ПроведенВаптеке=Ложь или СтавкаНДС=Неопределено Тогда  // нет данных о ставке ндс и сумме закупки
			// данные о закупке и ставке НДС берем из партии
			СтавкаНДС= ДанныеПартии.СтавкаНДС;
			СтрЧека.Кол_7=Формат( Число(КорректноеЧисло(СтрЧека.Кол_6)/118*18) ,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"); //Сумма НДС розничного   (по ставке 18%)
		КонецЕсли;	
		
		
		Стр.НомерЧека=НомерЧека;
		Стр.ДатаОткрытияЧека=ДатаОткрытияЧека;
		Стр.Товар=ТоварСсылка;
		Стр.ЕИТ=Неопределено;
		Стр.К=1;
		Стр.Количество=Множитель* Число(СтрЧека.Кол_3)*Число(СтрЧека.Кол_5); // коэфф разбора* количество
		Стр.Партия=ДанныеПартии.ссылка;
		Стр.Сумма=Множитель* Число(КорректноеЧисло(СтрЧека.Кол_6));
		Стр.СтавкаНДС=СтавкаНДС;
		Стр.СуммаНДС=Множитель* Число(КорректноеЧисло(СтрЧека.Кол_7));
		Стр.СуммаЗакуп=Множитель* Число(КорректноеЧисло(СтрЧека.Кол_11));
		Стр.НДСЗакуп=Множитель* Число(КорректноеЧисло(СтрЧека.Кол_12));
		Стр.Проведено=Ложь;
		
		//---------------<Персональные продажи по товару>---------------------------// GtG // 27.09.2013 12:14:27
		СтрПП= ППТовар.Добавить();
		
		СтрПП.НомерЧека  =НомерЧека;
		СтрПП.ДатаОткрытияЧека  =ДатаОткрытияЧека;
		СтрПП.Сотрудник  =СотрудникЧека;
		СтрПП.Товар   =Стр.Товар;
		СтрПП.Количество =Множитель* Число(СтрЧека.Кол_5);
		СтрПП.СуммаРознФакт =Множитель* число(СтрЧека.Кол_9);
		СтрПП.СуммаСкидки   =СуммаСкидки;
		СтрПП.СуммаЗакуп    = Стр.СуммаЗакуп;
		СтрПП.Коэффициент   =Число(СтрЧека.Кол_3);
		СтрПП.КодСотрудника=СокрЛП(ТабНомер);
        
        
        
        СуммаРознФакт_БезУчетаОтрицНац=СтрПП.СуммаРознФакт ;    // GtG  //  18.05.2014 23:33:14  Замаринуем данные по рознице
        СуммаЗакуп_БезУчетаОтрицНац=СтрПП.СуммаЗакуп;           // GtG  //  18.05.2014 23:33:25  Замаринуем данные по закупке
        
        Если ОтрицательнаяНаценка= Истина Тогда  // продажи по акциям и ниже себестоимости не учитываем       // GtG  //  16.05.2014 19:07:11 
            СтрПП.СуммаРознФакт =0;
            //СтрПП.СуммаСкидки   =0; // сумму скидки , возможно , будем предъявлять поставщикам/производителям    // GtG  //  16.05.2014 19:07:08 
            СтрПП.СуммаЗакуп    = 0;
        КонецЕсли;
        
        
        
		
		ПКСуммаРознФакт=ПКСуммаРознФакт+СтрПП.СуммаРознФакт;
		ПКСуммаСкидки=ПКСуммаСкидки+СтрПП.СуммаСкидки;
		ПКСуммаЗакуп=ПКСуммаЗакуп+СтрПП.СуммаЗакуп;
		
		//---------------<ДляБух>---------------------------// GtG // 27.09.2013 14:54:09
		СтрБух=ТзДляБух.Добавить();
		//
		СтрБух.НомерЧека =НомерЧека;
		СтрБух.ДатаОткрытияЧека  =ДатаОткрытияЧека;
		СтрБух.СтавкаНДС =Стр.СтавкаНДС;
		СтрБух.ТипОплаты = ТипОплаты ;
		СтрБух.СуммаБезСкидки = Стр.Сумма;
		СтрБух.СуммаСоСкидкой = СуммаРознФакт_БезУчетаОтрицНац;    // GtG  //  18.05.2014 23:35:38 полные данные
		СтрБух.СуммаСкидки =СуммаСкидки;
		СтрБух.СуммаНДСБезСкидки=  Стр.СуммаНДС;
		СтрБух.СуммаНДДСоСкидкой=Множитель*  число(СтрЧека.Кол_10);
		СтрБух.ЗакупочнаяСНДС =  СуммаЗакуп_БезУчетаОтрицНац;    // GtG  //  18.05.2014 23:35:54 полные данные
        СтрБух.НДСЗакуп   = Стр.НДСЗакуп;
		СтрБух.ТипНалогообложенияПТ =ДанныеПартии.ТипНалогообложенияПоступленияТоваров;
		СтрБух.ВидПоступленияТовара =ДанныеПартии.ВидПоступленияТовара;
		СтрБух.ВхНомерНакл         =ДанныеПартии.ВхНомерНакл;
		СтрБух.ВхДатаНакл          =ДанныеПартии.ВхДатаНакл;
		СтрБух.Поставщик           =ДанныеПартии.Поставщик;
		
		//---------------<Дисконт>---------------------------// GtG // 29.10.2013 19:51:54
		
		Если СуммаСкидки<>0 Тогда // имеет смысл возится с дисконтом
			
			Если ТипЧека<>"1" тогда // Это, таки, возврат
				//У возврата нет таблицы дисконтных карт и таблицы рекламных акций
				//Но, возврат проходит в тот же день, что и продажа
				// и никак не ранее продажи. Т.о. можно найти по партии данные в дисконте ОбСмены 
				// и по этим данным собрать таблицы ТаблицаДК и ТаблицаДанныхРеклАкций
				// и далее действовать по общей схеме.
				
				ОбСмена.Записать(РежимЗаписиДокумента.Запись); // документ должен быть замаринован в базе, чтобы можно было полазить в нем запросом
				
				РезПоискаПродажи=ПолучитьТаблицыДисконта(ОбСмена,Стр.Партия,Число(СтрЧека.Кол_5));
				
				ТаблицаДанныхРеклАкций=РезПоискаПродажи.Получить(0);
				ТаблицаДК=РезПоискаПродажи.Получить(1);
				
				//КлиентСообщить("АГА! Возврат! Строк РА="+ТаблицаДанныхРеклАкций.Количество()+"   Строк ДК="+ТаблицаДК.Количество());
				
			КонецЕсли;
			
			
			СуммаСкидки1=Число(СтрЧека.Кол_8);//без учета множителя
			ПроцентСкидки=Окр(100*СуммаСкидки1/Число(КорректноеЧисло(СтрЧека.Кол_6)),0);// типа целый процент, без учета множителя
			
			//Сообщить("% Скидки="+ПроцентСкидки);
			
			СтрокаРА=ТаблицаДанныхРеклАкций.Найти(СтрЧека.Кол_1,"Кол_1"); // ищем по партии в таблице ра, если там есть, то скидка по акции полюбому
			
			Если СтрокаРА=Неопределено Тогда
				// Скидка есть, но точно не по акции. Значит это дисконт по картам.
				//Сообщить("Нет РА для "+ СтрЧека.Кол_1+" а скидка тем не менее "+ число(СтрЧека.Кол_8));
				//---------------<Размажем всю скидку пропорционально всем картам с процентами>---------------------------// GtG // 29.10.2013 21:08:58
				ВсегоСкидки=СуммаСкидки;
				Для Каждого СтрТДК Из ТаблицаДК Цикл
					Если СтрТДК.ПроцентЧислом=0 Тогда
						//	Продолжить;
					КонецЕсли;
					
					СтрДисконта=Дисконт.Добавить();
					
					
					СтрДисконта.НомерЧека =НомерЧека;
					СтрДисконта.ДатаОткрытияЧека  =ДатаОткрытияЧека;
					СтрДисконта.Карта = СтрТДК.Кол_3;
					СтрДисконта.Товар=Стр.Товар;
					СтрДисконта.К=Стр.К;
					СтрДисконта.Количество=Стр.Количество;
					СтрДисконта.Партия=Стр.Партия;
					
					СуммаСкСтроки=Окр(СуммаСкидки*СтрТДК.ДоляВДисконте,2);
					
					СтрДисконта.СуммаСоСкидкой =Стр.Сумма-СуммаСкСтроки;
					СтрДисконта.СуммаСкидки=СуммаСкСтроки;
					
					ВсегоСкидки=ВсегоСкидки-СуммаСкСтроки;
					
				КонецЦикла;
				
				Если СтрДисконта=Неопределено Тогда
					СтрДисконта=Дисконт.Добавить();
					СтрДисконта.НомерЧека =НомерЧека;
					СтрДисконта.ДатаОткрытияЧека  =ДатаОткрытияЧека;
					СообщениеОГлюке="Глючный чек Апт код№"+обсмена.КодСклада+"  check#"+НомерЧека+"   "+СтрЧека.Кол_1+"     "+ОбСмена.Номер+"  "+обсмена.дата;
                    КлиентСообщить(СообщениеОГлюке);
					МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог(СообщениеОГлюке,"ГЛЮКИ");
				КонецЕсли;
				
				
				
				// Косяк в последней копейке (из-за округления) скидки лепим на последнюю строку дисконта
				СтрДисконта.СуммаСкидки=СтрДисконта.СуммаСкидки+ВсегоСкидки;
				СтрДисконта.СуммаСоСкидкой =Стр.Сумма-СтрДисконта.СуммаСкидки;
				
				
			Иначе
				// Скидка предоставилась по рекламной акции
				Если СокрЛП(СтрокаРА.Кол_4) = "" Тогда
					Сообщить("Глючная акция ( удаленная скорей всего ) (Склад "+ОбСмена.КодСклада+" ККМ "+ОбСмена.ЗаводскойНомерККМ+" смена "+ОбСмена.НомерСмены+" чек в имени файла "+КороткийНомерЧека+")");
					ИДРА="РА-Удалена";					
				ИНаче
					ИДРА="РА-"+СтрокаРА.Кол_3+"-"+Формат(Дата(СтрокаРА.Кол_4),"ДФ=dd.MM.yyyy");					
				КонецЕсли;
				СтрДисконта=Дисконт.Добавить();

				
				СтрДисконта.НомерЧека =НомерЧека;
				СтрДисконта.ДатаОткрытияЧека  =ДатаОткрытияЧека;
				СтрДисконта.Карта = ИДРА;
				СтрДисконта.Товар=Стр.Товар;
				СтрДисконта.К=Стр.К;
				СтрДисконта.Количество=Стр.Количество;
				СтрДисконта.Партия=Стр.Партия;
				
				СтрДисконта.СуммаСоСкидкой =Стр.Сумма-СуммаСкидки;
				СтрДисконта.СуммаСкидки=СуммаСкидки;
				
				
			КонецЕсли;
		Иначе // Сумма скидки =0 , но КолвоЗаписейДК<>0 
			Если КолвоЗаписейДК<>0 тогда
				Для Каждого СтрТДК Из ТаблицаДК Цикл
					КлиентСообщить("Нулевая скидка по карте "+СтрТДК.Кол_3);
					СтрДисконта=Дисконт.Добавить();
					
					
					СтрДисконта.НомерЧека =НомерЧека;
					СтрДисконта.ДатаОткрытияЧека  =ДатаОткрытияЧека;
					СтрДисконта.Карта = СтрТДК.Кол_3;
					СтрДисконта.Товар=Стр.Товар;
					СтрДисконта.К=Стр.К;
					СтрДисконта.Количество=Стр.Количество;
					СтрДисконта.Партия=Стр.Партия;
					
					СуммаСкСтроки=0;
					
					СтрДисконта.СуммаСоСкидкой =Стр.Сумма;
					СтрДисконта.СуммаСкидки=0;
				КонецЦикла;
				
				
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//---------------<Услуги>---------------------------// GtG // 05.11.2013 17:32:17
	
	ДЛя Каждого СтрУслуг Из СтрокиУслугЧека Цикл
		
		СтрТУ=ТаблицаУслуг.Найти(Число(СтрУслуг.Кол_1),"Код");
		Если СтрТУ<>Неопределено Тогда
			Услуга= СтрТУ.Ссылка ;
		Иначе
			НоваяУслуга=Справочники.Услуги.СоздатьЭлемент();
			НоваяУслуга.Наименование="Услуга (код "+Число(СтрУслуг.Кол_1)+")";
			НоваяУслуга.Код=Число(СтрУслуг.Кол_1);
			НоваяУслуга.Записать();
			
			ТаблицаУслуг=ПолучитьТаблицуУслуг(); // чтоб далее сработал поиск
			
			Услуга=НоваяУслуга.Ссылка; //для корректной обработки текущей строки
		КонецЕсли;	
		
		Стр=Услуги.Добавить();
		Стр.НомерЧека         =  НомерЧека;
		Стр.ДатаОткрытияЧека  =  ДатаОткрытияЧека;
		Стр.ВидОперации       =  Перечисления.ВидыОперацийСАвансамиПоУслугам.Реализация;
		Стр.ТипОплаты         =  ТипОплаты;
		Стр.НомерЗаказа       =  НомерЧека;
		Стр.ДатаЗаказа        =  НачалоДня(ДатаОткрытияЧека);
		Стр.Сумма             =  Число(СтрУслуг.Кол_6);
		//Стр.Касса             =  ;// не заполняется
		//Стр.ЗетОчет           =  ;// не заполняется
		Стр.СтавкаНДС         =  СоответствиеНДС.Получить(Число(СтрУслуг.Кол_8));
		Стр.СуммаНДС          =  Число(СтрУслуг.Кол_7);
		Стр.Услуга            =  Услуга;
		
	КонецЦикла;
	
	
	
	
	//---------------<Зачет авансов>---------------------------// GtG // 18.11.2013 20:16:44
	Для Каждого Стр из СтрокиЗачетаАвансовЧека Цикл
		СтрАВ=Авансы.Добавить();
		СтрАВ.НомерЧека         =  НомерЧека;
		СтрАВ.ДатаОткрытияЧека  =  ДатаОткрытияЧека;
		СтрАВ.ВидДвижения       =  Перечисления.ВидДвиженияАвансов.ЗачетАванса;
		СтрАВ.ТипАванса         =  Перечисления.ТипыАвансов.Аванс;
		СтрАВ.ИДАванса       =     СокрЛП(Стр.Кол_1)  ;
		СтрАВ.Сумма             =  Число(Стр.Кол_3);
		СтрАВ.СтавкаНДС         =  СоответствиеНДС.Получить(Стр.Кол_2);
		
	КонецЦикла;
	
	
	//-------------	--<ПерсональныеПродажиКонтроль>---------------------------// GtG // 27.09.2013 12:37:41
	СтрПК= ППКонтроль.Добавить();
	
	СтрПК.НомерЧека  =НомерЧека;
	СтрПК.ДатаОткрытияЧека  =ДатаОткрытияЧека;
	СтрПК.Сотрудник  =СотрудникЧека;
	СтрПК.КоличествоЧеков=1;
	СтрПК.СуммаРознФакт =ПКСуммаРознФакт;
	СтрПК.СуммаСкидки   =ПКСуммаСкидки;
	СтрПК.СуммаЗакуп    =ПКСуммаЗакуп;
	СтрПК.КодСотрудника=ТабНомер;
	
	СтрПК.НачалоСмены = ДатаОткрытияЧека;
	
	СтрПК.КонецСмены = ДатаЗакрытияЧека;
	
	
	
	ТзДляБух.Свернуть("НомерЧека,ДатаОткрытияЧека,СтавкаНДС,ТипОплаты,ТипНалогообложенияПТ,ВидПоступленияТовара,ВхНомерНакл,ВхДатаНакл,Поставщик",
	"СуммаСоСкидкой,СуммаБезСкидки,СуммаСкидки,СуммаНДСБезСкидки,СуммаНДДСоСкидкой,ЗакупочнаяСНДС,НДСЗакуп") ;
	
	Для Каждого Стр Из ТзДляБух Цикл
		ЗаполнитьЗначенияСвойств(Бухгалтерия.Добавить(),Стр);
	КонецЦикла;	
	
	
	
	//---------------<Пересчет итогов для сумм по з отчетам>---------------------------// GtG // 10.01.2014 13:16:53 
	Если ОбСмена.СуммыПоЗетОтчетам.Количество()<>0 Тогда
		СтрСЗО=ОбСмена.СуммыПоЗетОтчетам.Получить(0);
        СуммаПолученныхАвансов=СуммаПолученныхАвансов_ПоОбъекту(ОбСмена);
		СтрСЗО.СуммаПоБазе=ОбСмена.Бухгалтерия.Итог("СуммаСоСкидкой")+ОбСмена.АвансыПоУслугам.Итог("Сумма")+СуммаПолученныхАвансов;
	КонецЕсли;	

	
	
	
	
	ТзДляБух=Неопределено;// обнулим
	
	
	ЗапомнитьСостояниеЧекаВАптеке(ОбСмена,НомерЧека,ДатаОткрытияЧека,ПроведенВаптеке,УдаленВАптеке,"STR2");

	
	
	Возврат НомерЧека;
	
	
КонецФункции


Функция ДобавитьДанныеЧекаАвансаВСмену(ОбСмена,Чек)
	// ОбСмена- ДокументОбъект СменаККМ
	// Чек - ТЗ одного разобранного файла adv_*.csv
	//---------------<>---------------------------// GtG // 26.09.2013 14:20:34
	//сообщить("ДобавитьДанныеЧекаАвансаВСмену "+ОбСмена);
	//0  //''1''      f1     -- Шапка  
	//1  //f2     -- Код аптеки  
	//2  //f3     -- Отметка проведения  
	//3  //f4     -- № ккм  
	//4  //f5     -- № смены  
	//5  //f6     -- Дата открытия смены  
	//6  //f7     -- № документа  
	//7  //f8     -- Дата/время открытия  
	//8  //f9     -- Дата/время закрытия  
	//9  //f10     -- № чека   
	//10 //f11     -- Тип чека (9-получение, 10-возврат)  
	//11 //f12     -- Подтип чека (0-нал, 3-безнал)
	//12 //f13     -- Сумма к оплате по БД  
	//13 //f14   -- Сумма к оплате по ККМ  
	//14 //f15     -- Отметка проведения смены  
	//15 //f16     -- Табельный сотрудника  
	//16 //f17     -- ID аванса  
	//17 //f18     -- Вид аванса (1 - предоплата за инд заказ)  
	//18 //f19  -- Доп информация по выдаче 
 
	ШапкаЧека=Чек.Получить(0);
	
	ТипОплаты= ШапкаЧека.Кол_11;
	Если ТипОплаты="0" Тогда
		ТипОплаты=Перечисления.ТипыОплаты.Наличными;
	ИначеЕсли 	ТипОплаты="3" Тогда
		ТипОплаты=Перечисления.ТипыОплаты.Кредиткой;
	КонецЕсли;	
	
	ОперацияСАвансом=Неопределено;
	Если Число(ШапкаЧека.Кол_10)=9 Тогда
		ОперацияСАвансом=Перечисления.ВидДвиженияАвансов.ПолучениеАванса;
	ИначеЕсли Число(ШапкаЧека.Кол_10)=10 Тогда
        ОперацияСАвансом=Перечисления.ВидДвиженияАвансов.ВозвратАванса;
	КонецЕсли;
	
	ПроведенВаптеке=?(ШапкаЧека.Кол_2="1",Истина,Ложь);
	
	ТипАванса=Перечисления.ТипыАвансов.Аванс;
		
	
	Фирма=ОбСмена.Фирма;
		
	Авансы=ОбСмена.Авансы;
    КД=ОбСмена.СостояниеЧековВАптеке;

		
	НомерЧека=Число(ШапкаЧека.Кол_6); // длинный номер чека
	ДатаОткрытияЧека=Дата(ШапкаЧека.Кол_7);
	попытка
		ДатаЗакрытияЧека=Дата(ШапкаЧека.Кол_8);
	исключение
		ДатаЗакрытияЧека=ДатаОткрытияЧека;
	КонецПопытки;
	
	
		//--------------------------------------------------------// GtG |>18.11.2013 20:54:07
	//              Блокировка повторной загрузки чека
	
    Если  //КД.Найти(НомерЧека,"НомерЧека")<>Неопределено
        НайтиЧек_По_СистемномуИД_И_ТипуДокумента_По_КонтролюДанных(ОбСмена,"ADV2",НомерЧека)=Истина 
        //или
        //Авансы.Найти(НомерЧека,"НомерЧека")<>Неопределено 
        ТОгда
			//Сообщить("Этот чек аванса уже загружен. Пропускаем. "+ОбСмена+"  Чек №"+НомерЧека);
		Возврат НомерЧека;
	КонецЕсли;
	//--------------------------------------------------------// GtG <|
	
	
	СтрАванса=Авансы.Добавить();
	
	СтрАванса.НомерЧека       = НомерЧека;
	СтрАванса.ДатаОткрытияЧека= ДатаОткрытияЧека;
	СтрАванса.ВидДвижения     = ОперацияСАвансом;
	СтрАванса.ТипАванса       = ТипАванса;
	СтрАванса.ИДАванса        = ШапкаЧека.Кол_16;
	СтрАванса.Сумма           = Число(ШапкаЧека.Кол_13);
	СтрАванса.СтавкаНДС       = СоответствиеНДС.Получить("18"); 
	СтрАванса.ДопИнформацияОВыдаче=СокрЛП(ШапкаЧека.Кол_18);
	СтрАванса.Проведено       = ЛОжь;
			  
	ЗапомнитьСостояниеЧекаВАптеке(ОбСмена,НомерЧека,ДатаОткрытияЧека,ПроведенВаптеке,Ложь,"ADV2");
    
    
    
    //---------------<Отметим интернет заказ, впишем в него данные о полученном авансе>---------------------------// GtG // 14.04.2014 12:21:05
    Если ОперацияСАвансом=Перечисления.ВидДвиженияАвансов.ПолучениеАванса и ПустаяСтрока(СокрЛП(ШапкаЧека.Кол_18))=Ложь Тогда
        Запрос=новый Запрос;
        Запрос.Текст="ВЫБРАТЬ
                     |  ИнтернетЗаказ.Ссылка
                     |ИЗ
                     |  Документ.ИнтернетЗаказ КАК ИнтернетЗаказ
                     |ГДЕ
                     |  ИнтернетЗаказ.ИдентификаторЗаказа = &ИдентификаторЗаказа";
        Запрос.УстановитьПараметр("ИдентификаторЗаказа",СокрЛП(ШапкаЧека.Кол_18));
        
        Рез=Запрос.Выполнить();
        Выб=Рез.Выбрать();
        Пока Выб.Следующий() Цикл // там 1 строка или вачпе пусто, если аптека взяла аванс неотсканировав штрихкод заказа.
            
            ИнЗак=Выб.Ссылка.ПолучитьОбъект();
            ИнЗак.СуммаАванса = Число(ШапкаЧека.Кол_13);
            ИнЗак.Записать(РежимЗаписиДокумента.Запись);
            
        КонецЦикла;    
    КонецЕсли;
    //---------------<------------------------------------------------------------->---------------------------// GtG // 14.04.2014 12:25:32
	
	Возврат НомерЧека;
	
КонецФункции


Функция ДобавитьДанныеСистемногоЧекаВСмену(ОбСмена,СистемныйЧек)

	// ОбСмена- ДокументОбъект СменаККМ
	// СистемныйЧек - ТЗ одного разобранного файла sys_*.csv
	//---------------<>---------------------------// GtG // 26.09.2013 14:20:34
	//сообщить("ДобавитьДанныеЧекаАвансаВСмену "+ОбСмена);
	//	Номер блока/ описание /индекс поля 
	//1/ шапка/ 0 
	// /Код аптеки /1 
	// /Отметка проведения/ 2 
	// /№ ккм/ 3 
	// /№ смены/ 4 
	// /Дата открытия смены/ 5 
	// /№ документа/ 6 
	// /Дата/время открытия/ 7 
	// /Дата/время закрытия/ 8 
	// /№ чека/ 9 
	// /Тип чека /10 
	// /Подтип чека/ 11 
	// /Сумма к оплате по БД /12 
	//  Сумма к оплате по ККМ/ 13 
    //  ИД Смены 14 
    //  Номер чека открывшего смену 15 -- имеет смысл при загрузке z-отчета

 
	ШапкаЧека=СистемныйЧек.Получить(0);
	
	

		
	СлужебныеЧеки=ОбСмена.СлужебныеЧеки;
    КД=ОбСмена.СостояниеЧековВАптеке;
		
	НомерЧека=Число(ШапкаЧека.Кол_6); // длинный номер чека
	ДатаОткрытияЧека=Дата(ШапкаЧека.Кол_7);
	ТипСлужебногоЧека=СоответствиеТиповСлужебныхЧеков.Получить(ШапкаЧека.Кол_10);
	СуммаСлужебногоЧека=Число(ШапкаЧека.Кол_12);
	
	ОтметкаПроведенияВАптеке=?(ШапкаЧека.Кол_2="1",Истина,Ложь);
	
	Попытка
		НЧОС=Число(ШапкаЧека.Кол_15); //  Номер чека открывшего смену
	Исключение
		НЧОС=0;
	КонецПопытки;
	
		//--------------------------------------------------------// GtG |>18.11.2013 20:54:07
	//              Блокировка повторной загрузки чека
    
    
    Если  //КД.Найти(НомерЧека,"НомерЧека")<>Неопределено или
        НайтиЧек_По_СистемномуИД_И_ТипуДокумента_По_КонтролюДанных(ОбСмена,"SYS2",НомерЧека)= истина  
        //или
        //СлужебныеЧеки.Найти(НомерЧека,"НомерЧека")<>Неопределено 
        ТОгда
		Возврат НомерЧека;
	КонецЕсли;
	//--------------------------------------------------------// GtG <|
	
	
	СтрСлужебныеЧеки=СлужебныеЧеки.Добавить();
	
	СтрСлужебныеЧеки.НомерЧека       = НомерЧека;
	СтрСлужебныеЧеки.ДатаОткрытияЧека= ДатаОткрытияЧека;
	СтрСлужебныеЧеки.ТипЧека       = ТипСлужебногоЧека;
	СтрСлужебныеЧеки.Сумма           = СуммаСлужебногоЧека;
	
	Если ТипСлужебногоЧека=ККМ_ТипыСлужебныхЧеков__Z_Отчет Тогда
		
		ОбСмена.ZОтчетСнят =Истина;
		Если НЧОС<>0 Тогда
			ОбСмена.КоличествоЧеков=НомерЧека-НЧОС;
			ОбСмена.НомерЧекаОткрытия=НЧОС;
		КонецЕсли;
		ОбСмена.НомерЧекаЗакрытия =НомерЧека;
	КонецЕсли;
	
	ЗапомнитьСостояниеЧекаВАптеке(ОбСмена,НомерЧека,ДатаОткрытияЧека,ОтметкаПроведенияВАптеке,Ложь,"SYS2");
	
	Возврат НомерЧека;		  
КонецФункции


Функция БыстраяИндексированнаяВыборкаЭлементовСправочникаПоКоду(ВидСправочника,Запрос,МассивКодов,ИспользоватьВременныеТаблицы,ЛимитКодовНаОдинЗапрос=300,СтруктураДопреквизитов=неопределено)
	 // Функция расчитана на использование самодельного индекса по одной  колонке "код" справочника.
	 // Предполагается что: коды в справочнике уникальны
	 //                     МассивКодов желательно передавать без дублей
	 //                     На выходе ожидается список уникальных значений
	 //                     Индекс создан вручную в субд запросом типа : CREATE INDEX ids_ap_index_by_code ON _reference2  USING btree (_code);
	 // На входе получает:
	 //                   Имя вида справочника, 
	 //                   объект Запрос, 
	 //                   массив кодов для поиска,
	 //                   Указание использовать в запросе вывод во временную таблицу ( объекту запрос должен быть назначен менеджер временных таблиц) или нет. 
	 //                   ЛимитКодовНаОдинЗапрос для условия код в (массивкодов_х), по умолчанию не более 300 штук, при слишком большом значении индексированный поиск может не сработать
	 //                   Структуру доп реквизитов, где ключ - псевдоним колонки, значение текст для выборки данных вида  НекийСправочник.ВидПоступленияТовара 
	 //                                                        или более сложный вариант к примеру:  case when НекийСправочник.ВидПоступленияТовара = Значение(Перечисление.ВидыПоступленияТоваров.Комиссия) then НекийСправочник.Поставщик else null end  
	 // На выходе дает:
	 //                Если ИспользоватьВременныеТаблицы=ложь то таблицу значений   [код,Ссылка]
	 //                если ИспользоватьВременныеТаблицы=истина булево Результат запроса Пустой() , 
	 //                        а в менеджере временных таблиц создается временная таблица  ВидСправочника_БИВПК  [код,Ссылка], Индексированная по коду
	 //---------------<------------------------------------------------------------------------------->---------------------------// GtG // 26.09.2013 10:31:54
	 ДопРеквизиты="";

	 Если СтруктураДопреквизитов=Неопределено ТОгда
	 Иначе
		 // пришел массив с текстовкой допреквизитов
		 Для каждого стр из СтруктураДопреквизитов цикл
		 	ДопРеквизиты=ДопРеквизиты+стр.Значение+" как "+Стр.Ключ+","+Символы.ПС;
		 КонецЦикла;
	КонецЕсли;	 
	 
	 
	 
	 
	 ЗапросТекст="ВЫБРАТЬ
	              |	НекийСправочник.Код КАК Код,"+ДопРеквизиты+"
	              |	НекийСправочник.Ссылка
	              |ИЗ
	              |	Справочник."+ВидСправочника+" КАК НекийСправочник
	              |ГДЕ
	              |	НекийСправочник.Код В(&СписокКодовХ)";
	  
	  Х=0;  
	  СписокКодов=Новый Массив;
	  МассивСписковКодов=Новый Массив;
	  Для Каждого Стр Из МассивКодов Цикл
		  Х=Х+1;
		  СписокКодов.Добавить(Стр);
		  Если Х%ЛимитКодовНаОдинЗапрос=0 Тогда
			  МассивСписковКодов.Добавить(СписокКодов);
			  СписокКодов=Новый Массив;
		  КонецЕсли;  
	  КонецЦикла;	
	  Если СписокКодов.Количество()<>0 Тогда
		  МассивСписковКодов.Добавить(СписокКодов);
	  КонецЕсли;
	  
	  Х=0;
	  
	  Запрос.Текст="";
	  ДЛя Каждого СписокКодовПоиска Из МассивСписковКодов Цикл
		  Х=Х+1;
		  
		  Запрос.Текст=Запрос.Текст+Символы.ПС;
		  Запрос.Текст=Запрос.Текст+СтрЗаменить(ЗапросТекст,"&СписокКодовХ","&СписокКодов"+Формат(Х,"ЧГ="));
		  Запрос.Текст=Запрос.Текст+Символы.ПС;
		  Запрос.Текст=Запрос.Текст+?(Х=МассивСписковКодов.Количество(),"","Union All");
		  
		  Запрос.УстановитьПараметр("СписокКодов"+Формат(Х,"ЧГ="),СписокКодовПоиска);
	  КонецЦикла;	  
	  
	  Если ИспользоватьВременныеТаблицы=Истина ТОгда
		  ИмяВременнойТаблицы=" Into "+ВидСправочника+"_БИВПК";
		  СортировкаИндексирование=" INDEX ";
	  Иначе
		  ИмяВременнойТаблицы="";
		  СортировкаИндексирование=" ORDER ";
	  КонецЕсли;  
	  
	  
	  ДопРеквизиты="";
	  
	  Если СтруктураДопреквизитов=Неопределено ТОгда
	  Иначе
		  // пришла структура с текстовкой допреквизитов
		  Для каждого стр из СтруктураДопреквизитов цикл
			  ДопРеквизиты=ДопРеквизиты+Стр.Ключ+" как "+Стр.Ключ+","+Символы.ПС;
		  КонецЦикла;
	  КонецЕсли;
	  
	  
	  
	  Запрос.Текст="Select distinct Base.Код,"+ДопРеквизиты+" Base.Ссылка "+ ИмяВременнойТаблицы+" From ("+Символы.ПС+
	  				Запрос.Текст+ Символы.ПС+
					" ) as Base "+СортировкаИндексирование+" by Base.Код ";
	  	  
	Если ИспользоватьВременныеТаблицы=Истина ТОгда
		Запрос.Выполнить();		
	Иначе
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;	
КонецФункции	


Функция ПолучитьТаблицуНеизвестныхПартий(МассивКодовТоваров)
	
	ЗапросПоискаНеизвестнойПартии.УстановитьПараметр("МассивКодовТоваров",МассивКодовТоваров);
	ТаблицаНеизвестныхПартий=ЗапросПоискаНеизвестнойПартии.Выполнить().Выгрузить();
	ТаблицаНеизвестныхПартий.Индексы.Добавить("Товар");
	
	Возврат ТаблицаНеизвестныхПартий;
	
КонецФункции


Процедура СоздатьНовыеСмены(РезПоискаСмен)
	
	//проверка на новые склады
	НовыеСклады=РезПоискаСмен.НайтиСтроки(Новый Структура("Склад",NULL));
	Если НовыеСклады.Количество()<>0 Тогда
		Для Каждого НС Из НовыеСклады Цикл 
			КлиентСообщить(" Новый СКЛАД!!! "+НС.КодСклада);
		КонецЦикла;
	КонецЕсли;	
			
		
	
	
	
	
	
	НовыеСмены=РезПоискаСмен.НайтиСтроки(Новый Структура("Создать",Истина));
	
	Если НовыеСмены.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из НовыеСмены Цикл
		НоваяСмена=Документы.СменаККМ.СоздатьДокумент();
		
		НоваяСмена.Дата=Стр.ДатаОткрытияСмены;
		
		НоваяСмена.ДатаОткрытияСмены=Стр.ДатаОткрытияСмены;
		НоваяСмена.КодСклада=Стр.КодСклада;
		НоваяСмена.ИдСмены=Стр.ИдСмены;
		НоваяСмена.ЗаводскойНомерККМ=Стр.ЗаводскойНомерККМ; //1* ->
		НоваяСмена.НомерСмены=Стр.НомерСмены;
		НоваяСмена.Склад=Стр.Склад;
		НоваяСмена.Фирма=Стр.Фирма;
		
		НоваяСмена.Записать(); // -> 1* при записи документа произойдет перемещение ККМ по спраовчнику касс.
		
		Стр.СменаККМ=НоваяСмена.Ссылка;
	КонецЦикла;	
	
	
	//---------------<У круглосуточных аптек могут быть переползающие смены>---------------------------// GtG // 07.01.2014 15:38:55 
	ПереползающиеСмены=РезПоискаСмен.НайтиСтроки(Новый Структура("Создать,ИзменитьДатуОткрытия",Ложь,Истина));
	
	Для Каждого Стр Из ПереползающиеСмены Цикл
		ППСмена=Стр.СменаККМ.ПолучитьОбъект();
		
		ППСмена.Дата=Стр.ДатаОткрытияСмены;
		
		ППСмена.ДатаОткрытияСмены=Стр.ДатаОткрытияСмены;
		ППСмена.Записать(); 
	КонецЦикла;	
 	  
Конецпроцедуры	


процедура КлиентСообщить(Текст)
	#Если Клиент ТОгда
		Сообщить(Текст);
	#КонецЕсли	
КонецПроцедуры

Функция РазборЦСВ (Файл)
	ТХТ=Новый ТекстовыйДокумент;
	
    
    Если ТипЗнч(Файл)=Тип("Файл") Тогда
        ФайлПрочитан=Ложь;
        Ограничитель=0;
        
        Пока ФайлПрочитан=Ложь И Ограничитель<10 Цикл
            Ограничитель=Ограничитель+1;
            Попытка
                ТХТ.Прочитать(файл.полноеИмя);
                ФайлПрочитан=Истина;
            Исключение
                МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Заблокирован файл! Попытка №"+Ограничитель+" Файл: "+файл.полноеИмя,"Чеки");
                ОбщегоНазначения.Задержка(2);
            КонецПопытки;
        КонецЦикла;
        
    ИначеЕсли ТипЗнч(Файл)=Тип("Структура") Тогда
         ТХТ.УстановитьТекст(Файл.pack_data); //данные взяты из ПГ
         ФайлПрочитан=Истина; // Для унификации с файловым типом данных
    КонецЕсли;
	
	
	ТЗРазбора=Новый ТаблицаЗначений();
	
	Если ФайлПрочитан=Истина Тогда
		Для Ы=1 По ТХТ.КоличествоСтрок() Цикл
			
			Стр=ТХТ.ПолучитьСтроку(Ы);
			
			Стр=СтрЗаменить(Стр,";",Символы.ПС); // многострочная строка
			
			
			Если ТЗРазбора.Колонки.Количество()=0 Тогда
				// Создаем колонки ТЗ // пусть перваяколонка будет "Кол_0"
				для Й=1 по СтрЧислоСтрок(Стр) Цикл
					Ой=Й-1;
					ТЗРазбора.Колонки.Добавить("Кол_"+Ой);
				КонецЦикла;
			КонецЕсли;
			
			СтрокаРазбора=ТЗРазбора.Добавить();
			для Й=1 по СтрЧислоСтрок(Стр) Цикл
				Ой=Й-1;
				СтрокаРазбора["Кол_"+ОЙ]=СтрПолучитьСтроку(Стр,Й);
			КонецЦикла;
		КонеЦЦикла;
	Иначе
		// Файл прочитать так и не удалось
		// он будет считаться пустым
	КонецЕсли;
	
	Возврат ТЗРазбора; // файл CSV считанный в таблицу значений
КонецФункции	


Процедура АС_УдалитьФайлы(Файл)
    
    Если ТипЗнч(Файл)=Тип("Файл") Тогда
        УдалитьФайлы(Файл.ПолноеИмя);
    ИначеЕсли ТипЗнч(Файл)=Тип("Структура") Тогда // это постгрейный псевдофайл
        
        МассивИз1ИД=Новый Массив;
        МассивИз1ИД.Добавить(Файл.id);
        ОМ_Postgres_серверный.ЧекиОтметитьЗагрузкуДанных(Файл.pack_type,МассивИз1ИД); // данные остаются в ПГ но ставится галка и дата обработано
    КонецЕсли;
    
    
КонецПроцедуры



Функция РазобратьМассивФайлов(МассивФайлов,ТипФайлов="str2")
	
	
	
	//---------------<Загрузка по списку аптек>---------------------------// GtG // 10.12.2013 18:43:43
	// Если указаны коды аптек по которым надо выполнить загрузку - файлы по ни зарбираем, а по другим
	// выкашиваем из массива файлов, чтобы их не удалило
	//---------------<>---------------------------// GtG // 10.12.2013 18:43:56
    
    ОтключитьОграничениеПоСпискуКодов=Истина; // при отключенном ограничении аптека будет включаться в список на чеках и исключаться из обработки роботом по дбф-кам
    
    Если ОтключитьОграничениеПоСпискуКодов=Ложь ТОгда
        
        Если СписокКодовАптек.Количество()<>0 Тогда
            // Выбрасываем из массива файлы которые не подходят по коду аптеки
            // имя файла ХХХ_00000_*
            НовыйМассивФайлов=Новый Массив;
            МассивСлепогоУдаления=Новый Массив;
            
            Для Каждого Файл Из МассивФайлов Цикл
                ИмяФайла=Файл.Имя;                             //|---|
                КодАптекиФайла=Число(Сред(ИмяФайла,6,5)); //str2_00006_20140106164728_0000200316_0880_04280
                //1234567890
                Если СписокКодовАптек.НайтиПоЗначению(КодАптекиФайла)=Неопределено ТОгда
                    МассивСлепогоУдаления.Добавить(Файл);
                    продолжить;
                Иначе
                    НовыйМассивФайлов.Добавить(Файл);
                КонецЕсли;	
            КонецЦикла;
            
            МассивФайлов.Очистить();
            
            МассивФайлов=НовыйМассивФайлов;
            
            
            //---------------<Удаляем все файлы, которые вошли в массив слепого удаления>---------------------------// GtG // 16.12.2013 19:50:43
            КлиентСообщить("Удалено вслепую : "+МассивСлепогоУдаления.Количество()+" файлов по аптекам, невошедшим в список обработки.");
            Для каждого Файл из МассивСлепогоУдаления цикл
                Попытка
                    АС_УдалитьФайлы(Файл); // либо удалит файл, либо отметит загрузку в ПГ если это структура
                Исключение
                    КлиентСообщить("не удалось удалить файл: " + Файл.ПолноеИмя + " " + ОписаниеОшибки());
                КонецПопытки;
            КонецЦикла;
        КонецЕсли;   
        
    КонецЕсли;
    
	
	ТЗРазобранныхФайлов=Новый ТаблицаЗначений; //ТаблицаЗначений  таблиц значений	
	
	ТЗРазобранныхФайлов.Колонки.Добавить("РазобранныйФайл");
	ТЗРазобранныхФайлов.Колонки.Добавить("КодСклада");
	ТЗРазобранныхФайлов.Колонки.Добавить("ИдСмены");
	ТЗРазобранныхФайлов.Колонки.Добавить("ЗаводскойНомерККМ");
	ТЗРазобранныхФайлов.Колонки.Добавить("НомерСмены");
	ТЗРазобранныхФайлов.Колонки.Добавить("ДатаОткрытияСмены");
	ТЗРазобранныхФайлов.Колонки.Добавить("ИмяЛокальногоФайла");
	ТЗРазобранныхФайлов.Колонки.Добавить("ФайлОбъект");
	
                                                      
	
	
	НачалоРазбора= ТекущаяДата();
	
	Ый=0;
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	
		РазобранныйФайл=РазборЦСВ(Файл); //на входе либо файл либо структура на выходе Таблица значений	
		
        Если РазобранныйФайл.Количество()=0 Тогда
            
            
            
			КлиентСообщить("Пропускаем пустой файл! "+Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	
		
			
		Если ТипФайлов="str2" Тогда
			Попытка
				Если  Число(РазобранныйФайл.Получить(0).Кол_14)=1 и ГрузитьИсправленныеЧеки=Ложь Тогда 
					// это чек из закрытой смены, возникший из-за исправления техподдержкой
					// не грузим!
					Продолжить;
				КонецЕсли;
			Исключение
				МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Проблемный файл "+Файл.ПолноеИмя,"Чеки");
				СохранитьПроблемныйФайл(Файл);
				Продолжить;
			КонецПопытки;
		КонецЕсли;	
		
		СтрокаРФ=ТЗРазобранныхФайлов.Добавить();
		
		СтрокаРФ.РазобранныйФайл=РазобранныйФайл;//тз  из таблиц значений
		СтрокаРФ.ИмяЛокальногоФайла=Файл.ПолноеИмя;
		СтрокаРФ.ФайлОбъект=Файл;
		//Колонки:  КодСклада,ЗаводскойНомерККМ,НомерСмены,ДатаОткрытияСмены 
		//Заполняются в последующих процедурах по месту в зависимости от типа данных
		Ый=Ый+1;
		
	КонецЦикла;
	КонецРазбора=ТекущаяДата();
	
	ВремяРазбора=КонецРазбора-НачалоРазбора;
	
	КлиентСообщить("Разобрано: "+ТЗРазобранныхФайлов.Количество()+" время: "+ВремяРазбора+"   > "+ТипФайлов);
	// Данные в памяти.
	
	Возврат ТЗРазобранныхФайлов;

КонецФункции


Процедура СохранитьПроблемныйФайл(Файл)
    КлиентСообщить("Проблемный файл: "+Файл.ПолноеИмя);
    Если ТипЗнч(Файл)=Тип("Файл") Тогда
        ИмяФайла=СтрЗаменить(Файл.ПолноеИмя,"KKM_CHECKS_CSV","KKM_CHECKS_CSV\Empty_Files");
        ПереместитьФайл(Файл.ПолноеИмя ,ИмяФайла );
    ИначеЕсли ТипЗнч(Файл)=Тип("Структура") Тогда
       ОМ_Postgres_серверный.ЧекиОтметитьГлючныйЧек(Файл.id);  // изменит имя файла на GLUCK!!+исх имя
        МассивИз1ИД=Новый Массив;
        МассивИз1ИД.Добавить(Файл.ID);
       ОМ_Postgres_серверный.ЧекиОтметитьЗагрузкуДанных(Файл.pack_type,МассивИз1ИД);// отметит что файл загружался и не будет его больше брать в обработку
    КонецЕсли;
    
Конецпроцедуры	


Функция  НайтиВыпавшиеЧеки(ОбСмена)
	// Ищем выпавшие чеки. Сначала сформируем ленту чеков как она должна быть , исходя из первого и последнего
	// номеров чеков, а потом сравним с тем что имеем в документе.
	// Если в документе нет соответствующего номера чека- значит он выпал. Почему - ХЗ.
	
	
	Если ОбСмена.НомерЧекаОткрытия=0 Или ОбСмена.НомерЧекаЗакрытия=0 ТОгда
		Возврат ложь; // а откуда я узнаю что должно быть?
	КонецЕсли;
    
    
    Если  ОбСмена.НомерЧекаЗакрытия-ОбСмена.НомерЧекаОткрытия >5000 тогда
        // не верю , таких борзых аптек у нас нет, чтоб по 5тыс чеков за смену на одной кассе набивали.
        Возврат ложь;
    Конецесли;    
    
	//---------------<Формируем ленту чеков, которые должны быть>---------------------------// GtG // 25.01.2014 20:22:53
	ЛентаЧеков=Новый ТаблицаЗначений();
	ЛентаЧеков.Колонки.Добавить("НомерЧекаДолженБыть",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный)));
	
	Для Ы=ОбСмена.НомерЧекаОткрытия+1 по ОбСмена.НомерЧекаЗакрытия Цикл  // чека-открывашки не существует в системе, но номер им занят. поэтому +1
		ЛентаЧеков.Добавить().НомерЧекаДолженБыть=Ы;
	КонецЦикла;	
	
	Запрос=Новый Запрос();
	
	Запрос.Текст="ВЫБРАТЬ
                 |  ЛентаЧеков.НомерЧекаДолженБыть КАК НомерЧекаДолженБыть
                 |ПОМЕСТИТЬ Лента
                 |ИЗ
                 |  &ЛентаЧеков КАК ЛентаЧеков
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  НомерЧекаДолженБыть
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |  СменаККМСостояниеЧековВАптеке.НомерЧека КАК НомерЧека
                 |ПОМЕСТИТЬ НЧСмены
                 |ИЗ
                 |  Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
                 |ГДЕ
                 |  СменаККМСостояниеЧековВАптеке.Ссылка = &Смена
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  НомерЧека
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  Лента.НомерЧекаДолженБыть КАК НомерЧека,
                 |  """" КАК Комментарий
                 |ИЗ
                 |  Лента КАК Лента
                 |      ЛЕВОЕ СОЕДИНЕНИЕ НЧСмены КАК НЧСмены
                 |      ПО Лента.НомерЧекаДолженБыть = НЧСмены.НомерЧека
                 |ГДЕ
                 |  НЧСмены.НомерЧека ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Смена",ОбСмена.ссылка);
	Запрос.УстановитьПараметр("ЛентаЧеков",ЛентаЧеков);
	
	Рез=Запрос.Выполнить();
    
    
    
	
	Если рез.Пустой()=Истина Тогда
		ЕстьВыпавшие=Ложь;
    Иначе
        
        Выб=Рез.Выбрать();
        
        Если Выб.Количество()>100 Тогда
            // Не верю! 2-3-25 еще ладно, но больше - это наглая ложььь!!!
            Возврат Ложь;
        КонецЕсли;
        
        
		ОбСмена.ВыпавшиеЧеки.Загрузить(Рез.Выгрузить());
		ЕстьВыпавшие=Истина;
	Конецесли;
	
	
	//---------------<Сразу зашлем в аптеку требование на перевыгрузку потерянного чека>---------------------------// GtG // 25.01.2014 23:34:03
	//Если ОбСмена.ZОтчетСнят=Истина и ЕстьВыпавшие=Истина Тогда
	//	ОМ_ЗагрузкаЧеков.ОтправитьТребованиеНаПеревыгрузкуЧеков(ОбСмена,Рез.Выгрузить());
	//КонецЕсли; 
	
	
	
	
	
	
	//---------------<Ищем непроведенные в аптеке чеки>---------------------------// GtG // 25.01.2014 20:45:00
	Запрос.Текст="ВЫБРАТЬ
	             |	СменаККМСостояниеЧековВАптеке.НомерЧека
	             |ИЗ
	             |	Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
	             |ГДЕ
	             |	СменаККМСостояниеЧековВАптеке.Ссылка = &Смена
	             |	И (СменаККМСостояниеЧековВАптеке.УдаленВАптеке = ИСТИНА
	             |			ИЛИ СменаККМСостояниеЧековВАптеке.ПроведенВаптеке = ЛОЖЬ)";
	
	Рез=Запрос.Выполнить();
	
	ЕстьНепроведенные=( Не Рез.Пустой() );
	
	
	
	Если ЕстьВыпавшие=Ложь и ЕстьНепроведенные=Ложь Тогда
		Возврат Ложь;
	Иначе
		ОбСмена.СостояниеЧековВАптеке.Сортировать("ПроведенВаптеке убыв,НомерЧека");
		ОбСмена.ЕстьПроблемныеЧеки =Истина;// чтобы техподдержка видела снаружи документа что в нем косяк.
		Возврат Истина;
	КонецЕсли;
	
КонецФункции





//---------------<Регламентное задание>---------------------------// GtG // 25.11.2013 18:31:07
Процедура ПроверитьНаличиеРККМИПокосить(Дата,Склад)
	// GtG  //  15.04.2014 19:53:19  НЕ ТРОГАТЬ РККМ!!!
    
    
    
    //Запрос=Новый Запрос();
    //Запрос.Текст="ВЫБРАТЬ
    //             |	РеализацияККМ.Ссылка
    //             |ИЗ
    //             |	Документ.РеализацияККМ КАК РеализацияККМ
    //             |ГДЕ
    //             |	РеализацияККМ.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
    //             |	И РеализацияККМ.Склад = &Склад";
    //			 
    //Запрос.УстановитьПараметр("Дата",Дата);
    //Запрос.УстановитьПараметр("Склад",Склад);
    //
    //Рез=Запрос.Выполнить().Выгрузить();
    //
    //Для Каждого Стр Из Рез Цикл
    //	
    //	МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("УДАЛЯЕМ "+Стр.Ссылка,"Реализации ККМ2");
    //	Для н=0 по 4 Цикл
    //		Попытка
    //			Стр.Ссылка.ПолучитьОбъект().Удалить();
    //			Прервать;
    //		Исключение
    //			ОбщегоНазначения.Задержка(2);
    //		КонецПопытки;
    //	КонецЦикла;
    //	
    //КонецЦикла;
	
КонецПроцедуры


Процедура Регламент_Создать_РеализацииККМ_По_Закрытым_Сменам(ЗакрыватьДефективныеСмены=ложь,
                                                                    ЗакрытьДревниеСмены=Ложь,
                                                                    ДатаЗакрытия=Неопределено,
                                                                    ЗакрыватьПоОднойАптеке=Ложь,
                                                                    АптекаПоКоторойЗакрывать=Неопределено      ) Экспорт
	#Если   Клиент Тогда
		ОчиститьСообщения(); 
	#Конецесли 

    Запрос=Новый Запрос;
    Запрос.УстановитьПараметр("КодСклада1",КодНачало);
    Запрос.УстановитьПараметр("КодСклада2",КодКонец);
    //---------------<1) Сначала закрываем идеальные смены где:  >---------------------------// GtG // 15.04.2014 18:08:43 
    //     Сошлось количество чеков,
    //     Снят Z-Отчет,
    //     Смена проведена. 
      
    Запрос.Текст="ВЫБРАТЬ
                 |  СменаККМ.Ссылка
                 |ИЗ
                 |  Документ.СменаККМ КАК СменаККМ
                 |ГДЕ
                 |  СменаККМ.Проведен = ИСТИНА
                 |  И СменаККМ.ИдСмены <> 0
                 |  И СменаККМ.КоличествоЧеков <> 0
                 |  И СменаККМ.КоличествоЧеков = СменаККМ.ЗагруженоЧеков
                 |  И СменаККМ.ZОтчетСнят = ИСТИНА
                 |  И СменаККМ.КодСклада МЕЖДУ &КодСклада1 И &КодСклада2
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |  СменаККМ.КодСклада";
				 
	#Если   Клиент Тогда
    Сообщить("Закрываем идеальные смены ");
	#Конецесли 
    Выб=Запрос.Выполнить().Выбрать();
    ВыбК=Выб.Количество();
    ВыбХ=0;
    
    Пока Выб.Следующий() Цикл
        ВыбХ=ВыбХ+1;
       КлиентСостояние("Закр. идеальной смены ("+ВыбХ+"/"+ВыбК+") "+Выб.ссылка);

       КлиентСостояние("Закрытие идеальной смены "+Выб.ссылка);
       СТАНДАРТНОЕ_ЗАКРЫТИЕ_ОДНОЙ_СМЕНЫ(Выб.ссылка,Истина); 
   КонецЦикла;    
   // После закрытия идеальных смен они станут непроведенными
   
   //---------------<2) Теперь закрываем неидеальные смены>---------------------------// GtG // 15.04.2014 19:46:20 
   //       Смена проведена
   //       Чего-то нехватает, толи z-отчет не снят,
   //       То-ли не сходится количество чеков. Закрываем их в период с 1:00:00 по 6:59:59
   Запрос.Текст="ВЫБРАТЬ
                |   СменаККМ.Ссылка
                |ИЗ
                |   Документ.СменаККМ КАК СменаККМ
                |ГДЕ
                |   СменаККМ.Проведен = ИСТИНА
                |   И СменаККМ.ИдСмены <> 0
                |   И (СменаККМ.КоличествоЧеков <> СменаККМ.ЗагруженоЧеков
                |           ИЛИ СменаККМ.ZОтчетСнят <> ИСТИНА)
                |   И СменаККМ.КодСклада МЕЖДУ &КодСклада1 И &КодСклада2
                |   И ВЫБОР
                |           КОГДА &НеПроверятьВремяЗакрытия = ЛОЖЬ
                |               ТОГДА ВЫБОР
                |                       КОГДА ЧАС(&ТекущаяДата) < 1
                |                               ИЛИ ЧАС(&ТекущаяДата) > 2
                |                           ТОГДА ЛОЖЬ
                |                       КОГДА НАЧАЛОПЕРИОДА(СменаККМ.ДатаОткрытияСмены, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
                |                           ТОГДА ЛОЖЬ
                |                       КОГДА СменаККМ.ДатаПоследнегоСозданияРККМ = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
                |                               ИЛИ НАЧАЛОПЕРИОДА(СменаККМ.ДатаПоследнегоСозданияРККМ, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
                |                           ТОГДА ИСТИНА
                |                       ИНАЧЕ ЛОЖЬ
                |                   КОНЕЦ
                |           ИНАЧЕ ИСТИНА
                |       КОНЕЦ
                |
                |УПОРЯДОЧИТЬ ПО
                |   СменаККМ.КодСклада";
                
    Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
    Запрос.УстановитьПараметр("НеПроверятьВремяЗакрытия",Ложь);
	
	#Если   Клиент Тогда
    Сообщить("Закрываем кривоватые смены ");
#Конецесли 

    Выб=Запрос.Выполнить().Выбрать();
    
    ВыбК=Выб.Количество();
    ВыбХ=0;
    
    Пока Выб.Следующий() Цикл
        ВыбХ=ВыбХ+1;
       КлиентСостояние("Закр. НЕидеальной смены ("+ВыбХ+"/"+ВыбК+") "+Выб.ссылка);
       СТАНДАРТНОЕ_ЗАКРЫТИЕ_ОДНОЙ_СМЕНЫ(Выб.ссылка,ложь);// включена проверка периода закрытия (Закрываем их в период с 1:00:00 по 6:59:59 )
   КонецЦикла;    
   
КонецПроцедуры                                                             


Процедура ВыгрузитьФайлПодтвержденийВыручки(Склад)
	//Трофейная процедура из предыдущей версии загрузки выручки. // Загрузка выручки от аптек (вер. 5.3.0.0 от 22-03-2013).epf //
	Если Склад.Пустая() тогда
		Возврат;
	КонецЕсли;	
	
	Если ПустаяСтрока(Склад.КаталогОбмена)=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос=Новый Запрос();
	Запрос.Текст= "ВЫБРАТЬ
	              |	РеализацияККМСуммыПоЗетОтчетам.Ссылка.Дата КАК date,
	              |	РеализацияККМСуммыПоЗетОтчетам.Касса.ЗаводскойНомер КАК pnum,
	              |	РеализацияККМСуммыПоЗетОтчетам.ЗетОчет КАК snum,
	              |	РеализацияККМСуммыПоЗетОтчетам.СуммаПоБазе КАК ZBASE,
	              |	РеализацияККМСуммыПоЗетОтчетам.ИтогоПоЗетОтчету - РеализацияККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуНал - РеализацияККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуБезНал КАК ZSUM,
	              |	ЕСТЬNULL(РеализацияККМСуммыПоЗетОтчетам.Ссылка.НаихудшаяПричинаНекорректности.Порядок, -1) КАК wrnc,
	              |	РеализацияККМСуммыПоЗетОтчетам.Ссылка.Затычка КАК Tap,
	              |	РеализацияККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуНал + РеализацияККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуБезНал КАК Vozvrat
	              |ИЗ
	              |	Документ.РеализацияККМ.СуммыПоЗетОтчетам КАК РеализацияККМСуммыПоЗетОтчетам
	              |ГДЕ
	              |	РеализацияККМСуммыПоЗетОтчетам.Ссылка.Склад = &Склад
	              |	И НАЧАЛОПЕРИОДА(РеализацияККМСуммыПоЗетОтчетам.Ссылка.Дата, ДЕНЬ) МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), ДЕНЬ, -&ДнейВыручки) И НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	              |	И РеализацияККМСуммыПоЗетОтчетам.Ссылка.Проведен = ИСТИНА
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	date,
	              |	pnum,
	              |	snum"; // Сгенерировано в GtG's Консоль запросов. 10.06.2013 18:09:36
 Запрос.УстановитьПараметр("Склад",Склад);
 Запрос.УстановитьПараметр("ДнейВыручки",30); // за 30 последних дней
Запрос.УстановитьПараметр("Дата",ТекущаяДата());

Рез=Запрос.Выполнить();

  ФайлПодтверждения=Новый XBase;
  ФайлПодтверждения.поля.Добавить("date" ,"D" ,  , );
  ФайлПодтверждения.поля.Добавить("pnum" ,"S" ,10,);
  ФайлПодтверждения.поля.Добавить("snum" ,"N" ,11,0);
  ФайлПодтверждения.поля.Добавить("ZBASE","N" ,15,2);
  ФайлПодтверждения.поля.Добавить("ZSUM" ,"N" ,15,2);	
  ФайлПодтверждения.поля.Добавить("wrnc" ,"N" , 5,0);
  ФайлПодтверждения.поля.Добавить("Tap"  ,"n" , 1,0);
  ФайлПодтверждения.поля.Добавить("Vozvrat" ,"N" ,15,2);
  
  //ИмяФайлаПодтверждения=СтрЗаменить(СокрЛП(Склад.КаталогОбмена)+"kkm_conf.dbf","\\","\");     
  Каталог = СокрЛП(Склад.КаталогОбмена);
  ИмяФайлаПодтверждения=?(Прав(Каталог,1)="\",Каталог,Каталог+"\")+"kkm_conf.dbf";     
  
  ФайлПодтверждения.СоздатьФайл(ИмяФайлаПодтверждения);
  
  Выборка=Рез.Выбрать();
  Пока Выборка.Следующий() Цикл
	  ФайлПодтверждения.Добавить();
	  
	  ФайлПодтверждения.date =Выборка.date ;
	  ФайлПодтверждения.pnum =Выборка.pnum ;
	  ФайлПодтверждения.snum =Выборка.snum ;
	  ФайлПодтверждения.ZBASE=Выборка.ZBASE;
	  ФайлПодтверждения.ZSUM =Выборка.ZSUM ;
	  ФайлПодтверждения.wrnc =Выборка.wrnc ;
	  ФайлПодтверждения.Tap  =Выборка.Tap  ;
	  ФайлПодтверждения.Vozvrat  =Выборка.Vozvrat  ;
	  
      ФайлПодтверждения.Записать();
	  
	  
  КонецЦикла;
  
  ФайлПодтверждения.ЗакрытьФайл();
  Попытка
	  ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку(ИмяФайлаПодтверждения,СтрЗаменить(ИмяФайлаПодтверждения,".dbf",".zip"));
	  
	  УдалитьФайлы(ИмяФайлаПодтверждения);
  Исключение
  КонецПопытки;
  
КонецПроцедуры	



//---------------<СТАНДАРТНАЯ ПРОЦЕДУРА ЗАКРЫТИЯ СМЕНЫ>---------------------------// GtG // 13.04.2014 0:07:01 
ПРОЦЕДУРА СТАНДАРТНОЕ_ЗАКРЫТИЕ_ОДНОЙ_СМЕНЫ(СМЕНАСсылка,НеПроверятьВремяЗакрытия=Ложь) Экспорт
    // СМЕНА - Ссылка
    //---------------<Проверяем условия , при которых возмождно закрыть смену>---------------------------// GtG // 13.04.2014 0:11:26
    //если 1=2 тогда СМЕНА=документы.СменаККМ.СоздатьДокумент() конецесли;
    
    
    Если СМЕНАСсылка.ZОтчетСнят=Истина
        и
        СМЕНАСсылка.ИдСмены<>0
        и
        СМЕНАСсылка.Проведен=Истина
        и
        СМЕНАСсылка.КоличествоЧеков=СМЕНАСсылка.ЗагруженоЧеков
        и
        СМЕНАСсылка.КоличествоЧеков<>0
        и
        СМЕНАСсылка.ЗагруженоЧеков<>0
        ТОГДА
        
        ИдеальнаяСмена=Истина;// можно закрыть прям щас
        
    Иначе
        ИдеальнаяСмена=Ложь;  // нужно ждать до часа ночи и потом закрывать как получится.
    КОНЕЦЕСЛИ;
    
   //---------------<Проверка по текущему времени, пора ли закрывать?>---------------------------// GtG // 13.04.2014 1:12:35  
   Если НеПроверятьВремяЗакрытия=Ложь Тогда  
       Если ИдеальнаяСмена=Ложь Тогда
           Если Час(ТекущаяДата())<ЧасЗакрытияКривыхСмен или Час(ТекущаяДата())>ЧасЗакрытияКривыхСмен+1 тогда
               Возврат; // еще не время закрывать кривую  смену 
           КонецЕсли;
           
           // не закрываем кривые, начатые сегодня , в дату закрытия кривых
           Если НачалоДня(СМЕНАСсылка.ДатаОткрытияСмены)=НачалоДня(ТекущаяДата()) Тогда
               Возврат;
           КонецЕсли;    
           
           
           Если СМЕНАСсылка.ДатаПоследнегоСозданияРККМ=Дата("00010101") Или
                НачалоДня(СМЕНАСсылка.ДатаПоследнегоСозданияРККМ)<НачалоДня(ТекущаяДата()) Тогда
                // первый раз пытаемся закрыть, или закрывали её вчера.
                // Будем её закрывать
                //     *******
                //--0--1--2--3--------------------0--1--2--3--------------------->t
            Иначе
                Возврат; // не будем её закрывать, т.к. уже делали это сегодня
            Конецесли;
           
           
           Сообщить("       Закрываем дефективную смену "+СМЕНАСсылка);
       Иначе
           // Идеальная смена закрывается в момент идеализации , т.е. как только позеленеет.
               Сообщить("       Закрываем идеальную смену "+СМЕНАСсылка);
       КонецЕсли;
   Иначе
       //Проверка текущего времени отключена, Закрываем смену полюбому
   КонецЕсли;
   
   //---------------<Колбасим закрываемую смену>---------------------------// GtG // 13.04.2014 1:16:56
   СМЕНА=СМЕНАСсылка.ПолучитьОбъект();
   
   
   Запрос=Новый Запрос;  // Запрос для разборок со сменой
   Запрос.УстановитьПараметр("Ссылка",СМЕНАСсылка);
   
   МодульРегламентныхЗаданий.Регламент_ВыручкаCSV_ЗаписьВЛог("Создаем РККМ по смене "+СМЕНАСсылка,"ЗАКРЫТИЕ_СМЕН");
   
   
//---------------<1) Распроводим смену>---------------------------// GtG // 13.04.2014 1:24:07
    СМЕНА.Записать(Режимзаписидокумента.ОтменаПроведения);
    
//---------------<Определеим дату, куда отнести смену>---------------------------// GtG // 14.04.2014 1:02:03
Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
             |  база.Дата,
             |  база.КолвоЧеков КАК КолвоЧеков
             |ИЗ
             |  (ВЫБРАТЬ
             |      НАЧАЛОПЕРИОДА(СменаККМСостояниеЧековВАптеке.ДатаОткрытияЧека, ДЕНЬ) КАК Дата,
             |      КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СменаККМСостояниеЧековВАптеке.НомерЧека) КАК КолвоЧеков
             |  ИЗ
             |      Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
             |  ГДЕ
             |      СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка
             |  
             |  СГРУППИРОВАТЬ ПО
             |      НАЧАЛОПЕРИОДА(СменаККМСостояниеЧековВАптеке.ДатаОткрытияЧека, ДЕНЬ)) КАК база
             |
             |УПОРЯДОЧИТЬ ПО
             |  КолвоЧеков УБЫВ";
 Рез=Запрос.Выполнить();
 Выб=Рез.Выбрать();
 Выб.Следующий();
 ДатаСмены=Выб.Дата;
 
 СМЕНА.ДатаОткрытияСмены=ДатаСмены; // на эту дату будем создавать реализации ккм.
                                    // Если какая-то из нескольких рккм будет создана на другую дату, её нужно будет перенести на ДатаСмены.
                                    // Т.о. все РККМ должны оказаться в одной дате.
//---------------<2) Создаем РККМ>---------------------------// GtG // 13.04.2014 1:24:42 

РККМ= СоздатьРККМПоСмене(СМЕНА);// создает новую РККМ и заполняет её данными по смене.
                                // участвуют только те чеки, которые есть в таблице СостояниеЧековВАптеке и ссылка на реализацию ккм пустая
                                
 //---------------<3) Прописываем ссылку на РККМ в строки таблицы контроль данных, туда где пусто>---------------------------// GtG // 13.04.2014 1:25:46
 
 ПустыеСтроки=СМЕНА.СостояниеЧековВАптеке.НайтиСтроки(Новый Структура("РеализацияККМ",Документы.РеализацияККМ.ПустаяСсылка()));
 Для Каждого Стр Из ПустыеСтроки Цикл
     Стр.РеализацияККМ=РККМ; // ссылка
 КонецЦикла;    
 
 
 //---------------<Очищаем таблицы данных смены, кроме контроля данных>---------------------------// GtG // 13.04.2014 1:27:24

 СМЕНА.Товар.Очистить();
 СМЕНА.Дисконт.Очистить();
 СМЕНА.Сертификаты.Очистить();
 СМЕНА.ПрограммыЛояльности.Очистить();
 СМЕНА.ПерсональныеПродажиКонтроль.Очистить();
 СМЕНА.ПерсональныеПродажиТовар.Очистить();
 
 СМЕНА.Авансы.Свернуть("","сумма");
 СМЕНА.Бухгалтерия.Свернуть("","СуммаСоСкидкой"); // данные нужны для расчета суммыпобазе для таблицы суммыпозетотчетам
 СМЕНА.АвансыПоУслугам.Свернуть("","Сумма"); // данные нужны для расчета суммыпобазе для таблицы суммыпозетотчетам
 
 СМЕНА.ДатаПоследнегоСозданияРККМ=ТекущаяДата(); // нужно для блокирования закрытия дефективных смен мелкими порциями , 
                                                 // и для правильного закрытия смен круглосуточных аптек.
 
 СМЕНА.Записать(РежимЗаписиДокумента.Запись);
 
 
 //---------------<Собираем рккм на одну дату ( если было на разные)>---------------------------// GtG // 16.04.2014 1:29:24
 // характерно для круглосуточных аптек
 
 Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
              | СменаККМСостояниеЧековВАптеке.РеализацияККМ КАК РеализацияККМ,
              | КОНЕЦПЕРИОДА(СменаККМСостояниеЧековВАптеке.Ссылка.ДатаОткрытияСмены, ДЕНЬ) КАК ДатаСмены,
              | КОНЕЦПЕРИОДА(СменаККМСостояниеЧековВАптеке.РеализацияККМ.Дата, ДЕНЬ) КАК ДатаРККМ
              |ИЗ
              | Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
              |ГДЕ
              | СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка
              | И СменаККМСостояниеЧековВАптеке.РеализацияККМ.Ссылка ЕСТЬ НЕ NULL 
              | И КОНЕЦПЕРИОДА(СменаККМСостояниеЧековВАптеке.Ссылка.ДатаОткрытияСмены, ДЕНЬ) <> КОНЕЦПЕРИОДА(СменаККМСостояниеЧековВАптеке.РеализацияККМ.Дата, ДЕНЬ)";
 
  Рез=Запрос.Выполнить();
  
  Если Рез.Пустой()=Ложь Тогда
      Выб=Рез.Выбрать();
      Пока Выб.Следующий() Цикл
         РККМ=Выб.РеализацияККМ.ПолучитьОбъект();
         РККМ.Дата=Выб.ДатаСмены ;
         РККМ.Записать(РежимЗаписиДокумента.Проведение);
      КонецЦикла;
  КонецЕсли;
  
  
  //---------------<Контроль РККМ и установка/снятие затычек>---------------------------// GtG // 16.04.2014 16:32:35
  // Определим нормальная ли СМЕНА?
  ПричинаНекорректности="";
  Затычка=Ложь;
  
  Если СМЕНА.СуммыПоЗетОтчетам.Количество()=0 ТОгда
      //Нет вообще данных по Z-отчету.
      ПричинаНекорректности=Перечисления.ПричиныНекорректнойВыручки.НетСуммыПоZОтчету;
      Затычка=Истина;
  Иначе
      // Есть какие-то данные по Зет-отчетам.
      // Могут сходиться по базе и зетке - это хорошо
      // а могут и не сходиться  -  это затычка, однозначно.
      
      СтрокаСуммПоЗеткам=СМЕНА.СуммыПоЗетОтчетам.Получить(0);
     
      //---------------<Проверим сходится ли сумма по зетке и сумма по базе>---------------------------// GtG // 16.04.2014 17:29:53 
      ПроверкаСходимостиСумм= (СтрокаСуммПоЗеткам.ИтогоПоЗетОтчету-СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуНал- СтрокаСуммПоЗеткам.ВозвратыПоЗетОтчетуБезНал)
                               -СтрокаСуммПоЗеткам.СуммаПоБазе;
      
      Если ПроверкаСходимостиСумм<>0 Тогда
          ПричинаНекорректности=Перечисления.ПричиныНекорректнойВыручки.НеСходитсяСуммаПоБазеИZОтчету;
          Затычка=Истина;
      КонецЕсли;    
  КонецЕсли;    
  
  
  Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
               |    СменаККМСостояниеЧековВАптеке.РеализацияККМ КАК РеализацияККМ
               |ИЗ
               |    Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
               |ГДЕ
               |    СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка
               |    И СменаККМСостояниеЧековВАптеке.РеализацияККМ.Ссылка ЕСТЬ НЕ NULL ";
  
  Рез=Запрос.Выполнить();
  
  
  Запрос.Текст="ВЫБРАТЬ
               |    СменаККМСуммыПоЗетОтчетам.СуммаПоЗетОтчетуНал,
               |    СменаККМСуммыПоЗетОтчетам.СуммаПоЗетОтчетуБезНал,
               |    СменаККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуНал,
               |    СменаККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуБезНал,
               |    СменаККМСуммыПоЗетОтчетам.ИтогоПоЗетОтчету,
               |    СменаККМСуммыПоЗетОтчетам.СуммаПоБазе,
               |    СменаККМСуммыПоЗетОтчетам.НеобнуляемыйИтог,
               |    СменаККМСуммыПоЗетОтчетам.Ссылка.НомерСмены КАК ЗетОчет,
               |    СменаККМСуммыПоЗетОтчетам.Ссылка.Касса КАК Касса
               |ИЗ
               |    Документ.СменаККМ.СуммыПоЗетОтчетам КАК СменаККМСуммыПоЗетОтчетам
               |ГДЕ
               |    СменаККМСуммыПоЗетОтчетам.Ссылка = &Ссылка";
        
     ДанныеПоЗетОтчетам = Запрос.Выполнить().Выгрузить();
  
  
  
  
  Если Рез.Пустой()=Ложь Тогда  // по простому. наверно можно не записывать если ничего не меняется.
      Выб=Рез.Выбрать();
      Пока Выб.Следующий() Цикл
          РККМ=Выб.РеализацияККМ.ПолучитьОбъект();
          РККМ.Затычка=Затычка;      
          РККМ.НаихудшаяПричинаНекорректности=ПричинаНекорректности;
                    
          
          //---------------<Обновляем данные по Зет-отчетам>---------------------------// GtG // 17.04.2014 20:21:11 
           РККМ.СуммыПоЗетОтчетам.Загрузить(ДанныеПоЗетОтчетам);
          
           РККМ.Записать(РежимЗаписиДокумента.Запись);

          
          
      КонецЦикла;
  КонецЕсли;
  

  
  
  
  
  
  
  
  
  
  //---------------<Обнуляем переменные>---------------------------// GtG // 16.04.2014 1:30:45
  РККМ=Неопределено;
  СМЕНА=Неопределено;
  Запрос=Неопределено;
  
    
КОНЕЦПРОЦЕДУРЫ
           
Функция СоздатьРККМПоСмене(СМЕНА)
    // Все таблицы смены ККМ имеют пару полей НомерЧека+ДатаОткрытияЧека
    // По таблице Состояние чеков в аптеке по колонке РеализацияККМ          //ДОПИСАТЬ РККМ МОЖЕТ НЕ СОЗДАТЬСЯ ИЗ-ЗА ЗАПРЕТА РЕДАКТИРОВАНИЯ ПЕРИОДА !!!
   Запрос=Новый Запрос;                                
   
   МВТ=Новый МенеджерВременныхТаблиц;
   Запрос.МенеджерВременныхТаблиц=МВТ;
   Запрос.УстановитьПараметр("Ссылка",СМЕНА.ссылка);  // Временная таблица НЗЧ - номера закрываемых 
   Запрос.УстановитьПараметр("СписокТиповЧека",СписокТиповЧекаДляФормированияРеализацииККМ); // sys2, adv2
   Запрос.УстановитьПараметр("Склад",СМЕНА.Склад); 
   Запрос.УстановитьПараметр("Фирма",СМЕНА.Фирма); 
   Запрос.УстановитьПараметр("НомерZОтчета",СМЕНА.НомерСмены);
   
   
   //---------------<Сформируем список чеков, по которым нужно закрывать>---------------------------// GtG // 14.04.2014 17:55:28 
   // если в состоянии чеков нет ни одного чека продажи или аванса без ссылки на РККМ  - возврат Неопределено
   Запрос.Текст="ВЫБРАТЬ distinct
                |   СменаККМСостояниеЧековВАптеке.НомерЧека КАК НомерЧека,
                |   СменаККМСостояниеЧековВАптеке.ДатаОткрытияЧека КАК ДатаОткрытияЧека,
                |   СменаККМСостояниеЧековВАптеке.ТипЧека
                |ПОМЕСТИТЬ НЗЧ
                |ИЗ
                |   Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
                |ГДЕ
                |   СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка
                |   И СменаККМСостояниеЧековВАптеке.РеализацияККМ.Ссылка ЕСТЬ NULL 
                |   И СменаККМСостояниеЧековВАптеке.ТипЧека В(&СписокТиповЧека)
                |
                |ИНДЕКСИРОВАТЬ ПО
                |   НомерЧека,
                |   ДатаОткрытияЧека
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ ПЕРВЫЕ 1
                |   НЗЧ.НомерЧека
                |ИЗ
                |   НЗЧ КАК НЗЧ";
                
    Рез=Запрос.Выполнить();
    Если Рез.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;    
    
    //---------------<Получим количество чеков продаж>---------------------------// GtG // 15.04.2014 21:16:45
    Запрос.Текст="ВЫБРАТЬ
                 |  НЗЧ.ТипЧека,
                 |  КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НЗЧ.НомерЧека) КАК КоличествоЧековПродаж
                 |ИЗ
                 |  НЗЧ КАК НЗЧ
                 |ГДЕ
                 |  НЗЧ.ТипЧека = ""STR2""
                 |
                 |СГРУППИРОВАТЬ ПО
                 |  НЗЧ.ТипЧека";
                 
    Выб=Запрос.Выполнить().Выбрать();
    Выб.Следующий();
    КолвоЧековПродажСмены=Выб.КоличествоЧековПродаж;
    
    
    //---------------<Создаем Новую Реализацию ККМ>---------------------------// GtG // 14.04.2014 19:38:11
    
    УдалитьРучныеРККМ(СМЕНА.ДатаОткрытияСмены,СМЕНА.Склад);
    
    
    
    РККМ=Документы.РеализацияККМ.СоздатьДокумент();
    РККМ.Дата=КонецДня(СМЕНА.ДатаОткрытияСмены);
    РККМ.ЗаводскойНомерККМ=СМЕНА.ЗаводскойНомерККМ;
    РККМ.Фирма=СМЕНА.Фирма;
    РККМ.Склад=СМЕНА.Склад;
    РККМ.КодСклада=СМЕНА.КодСклада;
    РККМ.НомерСмены=СМЕНА.НомерСмены;
    РККМ.ИдСмены=СМЕНА.ИдСмены;
    РККМ.ZОтчетСнят=СМЕНА.ZОтчетСнят;
    РККМ.КоличествоЧеков=КолвоЧековПродажСмены;
    
    
    //---------------<Заполняем товар>---------------------------// GtG // 14.04.2014 19:38:22
    // 1) По списку чеков , которые еще не были использованы при закрытии реализаций ррки из вт НЗЧ
    //    выгребаеи строки товара в вт ДанныеПоТоваруСмены
    // 2) получаем по складу ОстаткиПоЗакупке
    // 3) Обединяем в одну таблицу Товар_и_Остатки  ДанныеПоТоваруСмены и ОстаткиПоЗакупке  
    // 4) Определяем закупочную сумму списания  и помещаем результат в вт Товар_для_Списания
    //    {если колво_остатка=колву_списываемому тогда если расхождение между суммой по регистру и суммой по документу в пределах +/- 10 копеек используем
    //     при списании сумму из регистра, если расхождение больше - списываем расчетную сумму по цене закупочной из партии. 
    //     Если количества остатка и списываемое не равны, то списываем расчетную сумму по закупке из партии. }
    // 5) Выбираем все из Товар_для_Списания и помещаем результат в таблицу Товар документа  РККМ.
    
    Запрос.Текст= "ВЫБРАТЬ
                  | СменаККМТовар.Товар,
                  | СменаККМТовар.Партия КАК Партия,
                  | СменаККМТовар.СтавкаНДС,
                  | СменаККМТовар.СтавкаНДС.Ставка,
                  | 1 КАК К,
                  | СУММА(СменаККМТовар.Количество * ВЫБОР
                  |         КОГДА СменаККМТовар.К = 0
                  |             ТОГДА 1
                  |         ИНАЧЕ СменаККМТовар.К
                  |     КОНЕЦ) КАК Количество,
                  | СУММА(СменаККМТовар.Сумма) КАК Сумма,
                  | СУММА(СменаККМТовар.СуммаНДС) КАК СуммаНДС,
                  | СменаККМТовар.Партия.ЦенаЗакуп / ВЫБОР
                  |     КОГДА СменаККМТовар.Партия.К = 0
                  |         ТОГДА 1
                  |     ИНАЧЕ СменаККМТовар.Партия.К
                  | КОНЕЦ КАК ЦенаЗакупИзПартии
                  |ПОМЕСТИТЬ ДанныеПоТоваруСмены
                  |ИЗ
                  | НЗЧ КАК НЗЧ
                  |     ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.Товар КАК СменаККМТовар
                  |     ПО НЗЧ.НомерЧека = СменаККМТовар.НомерЧека
                  |         И НЗЧ.ДатаОткрытияЧека = СменаККМТовар.ДатаОткрытияЧека
                  |         И (СменаККМТовар.Ссылка = &Ссылка)
                  |
                  |СГРУППИРОВАТЬ ПО
                  | СменаККМТовар.Товар,
                  | СменаККМТовар.Партия,
                  | СменаККМТовар.СтавкаНДС,
                  | СменаККМТовар.СтавкаНДС.Ставка,
                  | СменаККМТовар.Партия.ЦенаЗакуп / ВЫБОР
                  |     КОГДА СменаККМТовар.Партия.К = 0
                  |         ТОГДА 1
                  |     ИНАЧЕ СменаККМТовар.Партия.К
                  | КОНЕЦ
                  |
                  |ИНДЕКСИРОВАТЬ ПО
                  | Партия
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  | ПартииЖНВЛСОстатки.Партия КАК Партия,
                  | ПартииЖНВЛСОстатки.КолвоОстаток,
                  | ПартииЖНВЛСОстатки.СуммаЗакупСНДСОстаток,
                  | ПартииЖНВЛСОстатки.СуммаНДСЗакупОстаток
                  |ПОМЕСТИТЬ ОстаткиПоЗакупке
                  |ИЗ
                  | РегистрНакопления.ПартииЖНВЛС.Остатки(
                  |         ,
                  |         Партия В
                  |                 (ВЫБРАТЬ
                  |                     ДПТС.Партия
                  |                 ИЗ
                  |                     ДанныеПоТоваруСмены КАК ДПТС)
                  |             И Склад = &Склад
                  |             И Фирма = &Фирма) КАК ПартииЖНВЛСОстатки
                  |
                  |ИНДЕКСИРОВАТЬ ПО
                  | Партия
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  | ДанныеПоТоваруСмены.Товар,
                  | ДанныеПоТоваруСмены.Партия,
                  | ДанныеПоТоваруСмены.СтавкаНДС,
                  | ДанныеПоТоваруСмены.СтавкаНДССтавка,
                  | ДанныеПоТоваруСмены.К,
                  | ДанныеПоТоваруСмены.Количество,
                  | ДанныеПоТоваруСмены.Сумма,
                  | ДанныеПоТоваруСмены.СуммаНДС,
                  | ДанныеПоТоваруСмены.ЦенаЗакупИзПартии,
                  | ОстаткиПоЗакупке.КолвоОстаток,
                  | ОстаткиПоЗакупке.СуммаЗакупСНДСОстаток,
                  | ОстаткиПоЗакупке.СуммаНДСЗакупОстаток
                  |ПОМЕСТИТЬ Товар_и_Остатки
                  |ИЗ
                  | ДанныеПоТоваруСмены КАК ДанныеПоТоваруСмены
                  |     ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоЗакупке КАК ОстаткиПоЗакупке
                  |     ПО ДанныеПоТоваруСмены.Партия = ОстаткиПоЗакупке.Партия
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  | Товар_и_Остатки.Товар,
                  | Товар_и_Остатки.Партия,
                  | Товар_и_Остатки.СтавкаНДС,
                  | Товар_и_Остатки.СтавкаНДССтавка,
                  | Товар_и_Остатки.К,
                  | Товар_и_Остатки.Количество,
                  | Товар_и_Остатки.Сумма,
                  | Товар_и_Остатки.СуммаНДС,
                  | Товар_и_Остатки.ЦенаЗакупИзПартии,
                  | Товар_и_Остатки.КолвоОстаток,
                  | Товар_и_Остатки.СуммаЗакупСНДСОстаток,
                  | Товар_и_Остатки.СуммаНДСЗакупОстаток,
                  | ВЫБОР
                  |     КОГДА Товар_и_Остатки.Количество = Товар_и_Остатки.КолвоОстаток
                  |         ТОГДА ВЫБОР
                  |                 КОГДА Товар_и_Остатки.СуммаЗакупСНДСОстаток - Товар_и_Остатки.ЦенаЗакупИзПартии * Товар_и_Остатки.Количество МЕЖДУ -0.1 И 0.1
                  |                     ТОГДА Товар_и_Остатки.СуммаЗакупСНДСОстаток
                  |                 ИНАЧЕ Товар_и_Остатки.ЦенаЗакупИзПартии * Товар_и_Остатки.Количество
                  |             КОНЕЦ
                  |     ИНАЧЕ Товар_и_Остатки.ЦенаЗакупИзПартии * Товар_и_Остатки.Количество
                  | КОНЕЦ КАК СуммаЗакуп_Расч,
                  | ВЫБОР
                  |     КОГДА Товар_и_Остатки.Количество = Товар_и_Остатки.КолвоОстаток
                  |         ТОГДА ВЫБОР
                  |                 КОГДА Товар_и_Остатки.СуммаНДСЗакупОстаток - Товар_и_Остатки.ЦенаЗакупИзПартии * Товар_и_Остатки.Количество / (100 + Товар_и_Остатки.СтавкаНДССтавка) * Товар_и_Остатки.СтавкаНДССтавка МЕЖДУ -0.1 И 0.1
                  |                     ТОГДА Товар_и_Остатки.СуммаНДСЗакупОстаток
                  |                 ИНАЧЕ Товар_и_Остатки.ЦенаЗакупИзПартии * Товар_и_Остатки.Количество / (100 + Товар_и_Остатки.СтавкаНДССтавка) * Товар_и_Остатки.СтавкаНДССтавка
                  |             КОНЕЦ
                  |     ИНАЧЕ Товар_и_Остатки.ЦенаЗакупИзПартии * Товар_и_Остатки.Количество / (100 + Товар_и_Остатки.СтавкаНДССтавка) * Товар_и_Остатки.СтавкаНДССтавка
                  | КОНЕЦ КАК СуммаНДСЗакуп_Расч
                  |ПОМЕСТИТЬ Товар_для_Списания
                  |ИЗ
                  | Товар_и_Остатки КАК Товар_и_Остатки
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  | Товар_для_Списания.Товар,
                  | Товар_для_Списания.Партия,
                  | Товар_для_Списания.СтавкаНДС,
                  | Товар_для_Списания.СтавкаНДССтавка,
                  | Товар_для_Списания.К,
                  | Товар_для_Списания.Количество,
                  | Товар_для_Списания.Сумма,
                  | Товар_для_Списания.СуммаНДС,
                  | Товар_для_Списания.ЦенаЗакупИзПартии,
                  | Товар_для_Списания.КолвоОстаток,
                  | Товар_для_Списания.СуммаЗакупСНДСОстаток,
                  | Товар_для_Списания.СуммаНДСЗакупОстаток,
                  | Товар_для_Списания.СуммаЗакуп_Расч КАК СуммаЗакуп,
                  | Товар_для_Списания.СуммаНДСЗакуп_Расч КАК НДСЗакуп
                  |ИЗ
                  | Товар_для_Списания КАК Товар_для_Списания
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |УНИЧТОЖИТЬ Товар_и_Остатки
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |УНИЧТОЖИТЬ ОстаткиПоЗакупке
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |УНИЧТОЖИТЬ ДанныеПоТоваруСмены"; // Сгенерировано в GtG's Консоль запросов. 14.04.2014 19:34:45
    
    
    РККМ.Товар.Загрузить(Запрос.Выполнить().Выгрузить());
    
    //---------------<Заполняем таблицу для бухгалтерии>---------------------------// GtG // 14.04.2014 20:20:03
    // Берем данные из смены ККМ, но т.к. закупка могла скорректироваться нужно взять её из временной таблицы Товар_для_Списания
    // и распределить по строкам таблицы для бухгалтерии.
    // 1) Берем данные по закрываемым чекам из таблицы смены Бухгалтерия и помещаем в вт ДанныеПоБухСмены 
    // 2) ИЗ вт Товар_для_Списания берем итоговую сумму закупочную по ставке НДС и помещаем в вт ИтогоЗакуп_ПоТовару
    // 3) ИЗ  ДанныеПоБухСмены берем суммарно по ставке нДС сумму закупочную и помещаем в вт ИтогоЗакуп_ПоБух
    // 4) Объединяем по ставке ндс ИтогоЗакуп_ПоТовару и ИтогоЗакуп_ПоБух вычисляем расхождение и помещаем в вт РасхождениеВЗакупке
    // 5) Объединяем ДанныеПоБухСмены и РасхождениеВЗакупке по СтавкаНДС. В каждой строке будет соответствующая ставке сумма расхождения.
    //    Сортируем результат по сумме закупочной по убыванию.
    // 6) Далее с результатом запроса проделываем следующую махинацию. 
    //    Получаем список ставок НДС из результата и по каждой ставке НДС находим первую строку с ней и из закупки вычитаем сумму расхождения.
    // 7) Обработанный результат заталкиваем в таблицу  Бухгалтерия РККМ.
    
                 
                 
 
    Запрос.Текст="ВЫБРАТЬ
                 |  СменаККМБухгалтерия.СтавкаНДС,
                 |  СменаККМБухгалтерия.ТипОплаты,
                 |  СУММА(СменаККМБухгалтерия.СуммаБезСкидки) КАК СуммаБезСкидки,
                 |  СУММА(СменаККМБухгалтерия.СуммаСоСкидкой) КАК СуммаСоСкидкой,
                 |  СУММА(СменаККМБухгалтерия.СуммаСкидки) КАК СуммаСкидки,
                 |  СУММА(СменаККМБухгалтерия.СуммаНДСБезСкидки) КАК СуммаНДСБезСкидки,
                 |  СУММА(СменаККМБухгалтерия.СуммаНДДСоСкидкой) КАК СуммаНДДСоСкидкой,
                 |  СУММА(СменаККМБухгалтерия.ЗакупочнаяСНДС) КАК ЗакупочнаяСНДС,
                 |  СУММА(СменаККМБухгалтерия.НДСЗакуп) КАК НДСЗакуп,
                 |  СменаККМБухгалтерия.ТипНалогообложенияПТ,
                 |  СменаККМБухгалтерия.ВидПоступленияТовара,
                 |  СменаККМБухгалтерия.ВхНомерНакл,
                 |  СменаККМБухгалтерия.ВхДатаНакл,
                 |  СменаККМБухгалтерия.Поставщик,
				 |  СменаККМБухгалтерия.Ссылка.Касса как Касса,
				 |  СменаККМБухгалтерия.Ссылка.НомерСмены как ЗетОчет
                 |ПОМЕСТИТЬ ДанныеПоБухСмены
                 |ИЗ
                 |  НЗЧ КАК НЗЧ
                 |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.Бухгалтерия КАК СменаККМБухгалтерия
                 |      ПО НЗЧ.НомерЧека = СменаККМБухгалтерия.НомерЧека
                 |          И НЗЧ.ДатаОткрытияЧека = СменаККМБухгалтерия.ДатаОткрытияЧека
                 |          И (СменаККМБухгалтерия.Ссылка = &Ссылка)
                 |
                 |СГРУППИРОВАТЬ ПО
                 |  СменаККМБухгалтерия.СтавкаНДС,
                 |  СменаККМБухгалтерия.ТипОплаты,
                 |  СменаККМБухгалтерия.ТипНалогообложенияПТ,
                 |  СменаККМБухгалтерия.ВидПоступленияТовара,
                 |  СменаККМБухгалтерия.ВхНомерНакл,
                 |  СменаККМБухгалтерия.ВхДатаНакл,
                 |  СменаККМБухгалтерия.Поставщик,
				 |  СменаККМБухгалтерия.Ссылка.Касса,
				 |  СменаККМБухгалтерия.Ссылка.НомерСмены
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  Товар_для_Списания.СтавкаНДС КАК СтавкаНДС,
                 |  СУММА(Товар_для_Списания.СуммаЗакуп_Расч) КАК СуммаЗакуп_Расч,
                 |  СУММА(Товар_для_Списания.СуммаНДСЗакуп_Расч) КАК СуммаНДСЗакуп_Расч
                 |ПОМЕСТИТЬ ИтогоЗакуп_ПоТовару
                 |ИЗ
                 |  Товар_для_Списания КАК Товар_для_Списания
                 |
                 |СГРУППИРОВАТЬ ПО
                 |  Товар_для_Списания.СтавкаНДС
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  СтавкаНДС
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  ДанныеПоБухСмены.СтавкаНДС КАК СтавкаНДС,
                 |  СУММА(ДанныеПоБухСмены.ЗакупочнаяСНДС) КАК ЗакупочнаяСНДС,
                 |  СУММА(ДанныеПоБухСмены.НДСЗакуп) КАК НДСЗакуп
                 |ПОМЕСТИТЬ ИтогоЗакуп_ПоБух
                 |ИЗ
                 |  ДанныеПоБухСмены КАК ДанныеПоБухСмены
                 |
                 |СГРУППИРОВАТЬ ПО
                 |  ДанныеПоБухСмены.СтавкаНДС
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  СтавкаНДС
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  ИтогоЗакуп_ПоБух.СтавкаНДС,
                 |  ИтогоЗакуп_ПоБух.ЗакупочнаяСНДС - ИтогоЗакуп_ПоТовару.СуммаЗакуп_Расч КАК ДельтаЗакуп,
                 |  ИтогоЗакуп_ПоБух.НДСЗакуп - ИтогоЗакуп_ПоТовару.СуммаНДСЗакуп_Расч КАК ДельтаЗакупНДС
                 |ПОМЕСТИТЬ РасхождениеВЗакупке
                 |ИЗ
                 |  ИтогоЗакуп_ПоТовару КАК ИтогоЗакуп_ПоТовару
                 |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогоЗакуп_ПоБух КАК ИтогоЗакуп_ПоБух
                 |      ПО ИтогоЗакуп_ПоТовару.СтавкаНДС = ИтогоЗакуп_ПоБух.СтавкаНДС
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |  ДанныеПоБухСмены.СтавкаНДС КАК СтавкаНДС,
                 |  ДанныеПоБухСмены.ТипОплаты,
                 |  ДанныеПоБухСмены.СуммаБезСкидки,
                 |  ДанныеПоБухСмены.СуммаСоСкидкой,
                 |  ДанныеПоБухСмены.СуммаСкидки,
                 |  ДанныеПоБухСмены.СуммаНДСБезСкидки,
                 |  ДанныеПоБухСмены.СуммаНДДСоСкидкой,
                 |  ДанныеПоБухСмены.ЗакупочнаяСНДС КАК ЗакупочнаяСНДС,
                 |  ДанныеПоБухСмены.НДСЗакуп,
                 |  ДанныеПоБухСмены.ТипНалогообложенияПТ,
                 |  ДанныеПоБухСмены.ВидПоступленияТовара,
                 |  ДанныеПоБухСмены.ВхНомерНакл,
                 |  ДанныеПоБухСмены.ВхДатаНакл,
                 |  ДанныеПоБухСмены.Поставщик,
				 |  ДанныеПоБухСмены.Касса,
				 |  ДанныеПоБухСмены.ЗетОчет,
                 |  IsNull(РасхождениеВЗакупке.ДельтаЗакуп,0) as ДельтаЗакуп,
                 |  IsNull(РасхождениеВЗакупке.ДельтаЗакупНДС,0) as ДельтаЗакупНДС
                 |ИЗ
                 |  ДанныеПоБухСмены КАК ДанныеПоБухСмены
                 |      ЛЕВОЕ СОЕДИНЕНИЕ РасхождениеВЗакупке КАК РасхождениеВЗакупке
                 |      ПО ДанныеПоБухСмены.СтавкаНДС = РасхождениеВЗакупке.СтавкаНДС
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |  СтавкаНДС,
                 |  ЗакупочнаяСНДС УБЫВ
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |УНИЧТОЖИТЬ ДанныеПоБухСмены
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |УНИЧТОЖИТЬ ИтогоЗакуп_ПоТовару
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |УНИЧТОЖИТЬ ИтогоЗакуп_ПоБух
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |УНИЧТОЖИТЬ РасхождениеВЗакупке";
    
    Рез=Запрос.Выполнить().Выгрузить();
    
    СписокСтавокНДС=Рез.Скопировать(,"СтавкаНДС");
    СписокСтавокНДС.Свернуть("СтавкаНДС","");
    
    //Подгоняем сумму закупочную и ндс закупочный под товар
    //расхождение вешаем на первую строку со ставкой НДС и максимальной суммой закупки.
    Для Каждого СтрНДС Из СписокСтавокНДС Цикл
        СтрРез=Рез.Найти(СтрНДС.СтавкаНДС,"СтавкаНДС");
        СтрРез.ЗакупочнаяСНДС=СтрРез.ЗакупочнаяСНДС-СтрРез.ДельтаЗакуп;
        СтрРез.НДСЗакуп=СтрРез.НДСЗакуп-СтрРез.ДельтаЗакупНДС;
    КонецЦикла;    
    
    РККМ.Бухгалтерия.Загрузить(Рез);
    
    //---------------<Дисконт>---------------------------// GtG // 15.04.2014 11:27:36 
    Запрос.Текст="ВЫБРАТЬ
                 |  ВЫБОР
                 |      КОГДА СменаККМДисконт.Карта = """"
                 |          ТОГДА ""-""
                 |      ИНАЧЕ СменаККМДисконт.Карта
                 |  КОНЕЦ КАК Карта,
                 |  СменаККМДисконт.Товар,
                 |  СменаККМДисконт.Еит,
                 |  СУММА(СменаККМДисконт.СуммаСоСкидкой) КАК СуммаСоСкидкой,
                 |  СУММА(СменаККМДисконт.СуммаСкидки) КАК СуммаСкидки,
                 |  СменаККМДисконт.К,
                 |  СменаККМДисконт.Партия
                 |ИЗ
                 |  НЗЧ КАК НЗЧ
                 |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.Дисконт КАК СменаККМДисконт
                 |      ПО НЗЧ.НомерЧека = СменаККМДисконт.НомерЧека
                 |          И НЗЧ.ДатаОткрытияЧека = СменаККМДисконт.ДатаОткрытияЧека
                 |          И (СменаККМДисконт.Ссылка = &Ссылка)
                 |
                 |СГРУППИРОВАТЬ ПО
                 |  СменаККМДисконт.Карта,
                 |  СменаККМДисконт.Товар,
                 |  СменаККМДисконт.Еит,
                 |  СменаККМДисконт.К,
                 |  СменаККМДисконт.Партия";
    
    РККМ.Дисконт.Загрузить(Запрос.Выполнить().Выгрузить());
    
    //---------------<Сертификаты>---------------------------// GtG // 15.04.2014 11:31:00
        Запрос.Текст="ВЫБРАТЬ
                     |  СменаККМСертификаты.НомерСертификата,
                     |  СменаККМСертификаты.Номинал,
                     |  СменаККМСертификаты.ОперацияССертификатом,
                     |  СУММА(СменаККМСертификаты.Сумма) КАК Сумма,
                     |  СменаККМСертификаты.СтавкаНДС,
                     |  СУММА(СменаККМСертификаты.СуммаВнереализационныхДоходов) КАК СуммаВнереализационныхДоходов,
                     |  СменаККМСертификаты.ТипОплаты,
                     |  СменаККМСертификаты.Касса,
                     |  СменаККМСертификаты.ЗетОчет
                     |ИЗ
                     |  НЗЧ КАК НЗЧ
                     |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.Сертификаты КАК СменаККМСертификаты
                     |      ПО НЗЧ.НомерЧека = СменаККМСертификаты.НомерЧека
                     |          И НЗЧ.ДатаОткрытияЧека = СменаККМСертификаты.ДатаОткрытияЧека
                     |          И (СменаККМСертификаты.Ссылка = &Ссылка)
                     |
                     |СГРУППИРОВАТЬ ПО
                     |  СменаККМСертификаты.НомерСертификата,
                     |  СменаККМСертификаты.Номинал,
                     |  СменаККМСертификаты.ОперацияССертификатом,
                     |  СменаККМСертификаты.СтавкаНДС,
                     |  СменаККМСертификаты.ТипОплаты,
                     |  СменаККМСертификаты.Касса,
                     |  СменаККМСертификаты.ЗетОчет";

    РККМ.Сертификаты.Загрузить(Запрос.Выполнить().Выгрузить());
    
    
    //---------------<Суммы по Z-отчетам>---------------------------// GtG // 15.04.2014 11:33:08
    Запрос.Текст="ВЫБРАТЬ
                 |  СменаККМСуммыПоЗетОтчетам.СуммаПоЗетОтчетуНал,
                 |  СменаККМСуммыПоЗетОтчетам.СуммаПоЗетОтчетуБезНал,
                 |  СменаККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуНал,
                 |  СменаККМСуммыПоЗетОтчетам.ВозвратыПоЗетОтчетуБезНал,
                 |  СменаККМСуммыПоЗетОтчетам.ИтогоПоЗетОтчету,
                 |  СменаККМСуммыПоЗетОтчетам.СуммаПоБазе,
                 |  СменаККМСуммыПоЗетОтчетам.НеобнуляемыйИтог,
                 |  &НомерZОтчета КАК ЗетОчет,
                 |  СменаККМСуммыПоЗетОтчетам.Ссылка.Касса КАК Касса
                 |ИЗ
                 |  Документ.СменаККМ.СуммыПоЗетОтчетам КАК СменаККМСуммыПоЗетОтчетам
                 |ГДЕ
                 |  СменаККМСуммыПоЗетОтчетам.Ссылка = &Ссылка";
        
    РККМ.СуммыПоЗетОтчетам.Загрузить(Запрос.Выполнить().Выгрузить());
    
    //---------------<Программы Лояльности>---------------------------// GtG // 15.04.2014 11:36:54
    
    Запрос.Текст="ВЫБРАТЬ
                 |  СменаККМПрограммыЛояльности.Товар,
                 |  СменаККМПрограммыЛояльности.НомерКарты,
                 |  СменаККМПрограммыЛояльности.НомерККМ,
                 |  СменаККМПрограммыЛояльности.НомерСмены,
                 |  СменаККМПрограммыЛояльности.НомерЧека,
                 |  СменаККМПрограммыЛояльности.БарКодТовара,
                 |  СменаККМПрограммыЛояльности.Количество,
                 |  СменаККМПрограммыЛояльности.СуммаСоСкидкой,
                 |  СменаККМПрограммыЛояльности.СуммаСкидки,
                 |  СменаККМПрограммыЛояльности.СуммаНДС,
                 |  СменаККМПрограммыЛояльности.СуммаНДССкидки,
                 |  СменаККМПрограммыЛояльности.Контрагент,
                 |  СменаККМПрограммыЛояльности.Поставщик
                 |ИЗ
                 |  НЗЧ КАК НЗЧ
                 |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.ПрограммыЛояльности КАК СменаККМПрограммыЛояльности
                 |      ПО НЗЧ.НомерЧека = СменаККМПрограммыЛояльности.НомерЧека
                 |          И НЗЧ.ДатаОткрытияЧека = СменаККМПрограммыЛояльности.ДатаОткрытияЧека
                 |          И (СменаККМПрограммыЛояльности.Ссылка = &Ссылка)";
    
    РККМ.ПрограммыЛояльности.Загрузить(Запрос.Выполнить().Выгрузить());
    
    
    //---------------<Авансы по услугам>---------------------------// GtG // 15.04.2014 11:48:24
    Запрос.Текст="ВЫБРАТЬ
                 |  СменаККМАвансыПоУслугам.ВидОперации,
                 |  СменаККМАвансыПоУслугам.ТипОплаты,
                 |  СменаККМАвансыПоУслугам.НомерЗаказа,
                 |  СменаККМАвансыПоУслугам.ДатаЗаказа,
                 |  СУММА(СменаККМАвансыПоУслугам.Сумма) КАК Сумма,
                 |  СменаККМАвансыПоУслугам.Касса,
                 |  СменаККМАвансыПоУслугам.ЗетОчет,
                 |  СменаККМАвансыПоУслугам.СтавкаНДС,
                 |  СУММА(СменаККМАвансыПоУслугам.СуммаНДС) КАК СуммаНДС,
                 |  СменаККМАвансыПоУслугам.Услуга
                 |ИЗ
                 |  НЗЧ КАК НЗЧ
                 |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.АвансыПоУслугам КАК СменаККМАвансыПоУслугам
                 |      ПО НЗЧ.НомерЧека = СменаККМАвансыПоУслугам.НомерЧека
                 |          И НЗЧ.ДатаОткрытияЧека = СменаККМАвансыПоУслугам.ДатаОткрытияЧека
                 |          И (СменаККМАвансыПоУслугам.Ссылка = &Ссылка)
                 |
                 |СГРУППИРОВАТЬ ПО
                 |  СменаККМАвансыПоУслугам.ВидОперации,
                 |  СменаККМАвансыПоУслугам.ТипОплаты,
                 |  СменаККМАвансыПоУслугам.НомерЗаказа,
                 |  СменаККМАвансыПоУслугам.ДатаЗаказа,
                 |  СменаККМАвансыПоУслугам.Касса,
                 |  СменаККМАвансыПоУслугам.ЗетОчет,
                 |  СменаККМАвансыПоУслугам.СтавкаНДС,
                 |  СменаККМАвансыПоУслугам.Услуга";
    
    РККМ.АвансыПоУслугам.Загрузить(Запрос.Выполнить().Выгрузить());
    
    //---------------<ПП ТОвар>---------------------------// GtG // 15.04.2014 11:51:07 
      Запрос.Текст="ВЫБРАТЬ
                   |    СменаККМПерсональныеПродажиТовар.Сотрудник,
                   |    СменаККМПерсональныеПродажиТовар.Товар,
                   |    СУММА(СменаККМПерсональныеПродажиТовар.Количество) КАК Количество,
                   |    СУММА(СменаККМПерсональныеПродажиТовар.СуммаРознФакт) КАК СуммаРознФакт,
                   |    СУММА(СменаККМПерсональныеПродажиТовар.СуммаСкидки) КАК СуммаСкидки,
                   |    СУММА(СменаККМПерсональныеПродажиТовар.СуммаЗакуп) КАК СуммаЗакуп,
                   |    СменаККМПерсональныеПродажиТовар.Коэффициент,
                   |    СменаККМПерсональныеПродажиТовар.КодСотрудника
                   |ИЗ
                   |    НЗЧ КАК НЗЧ
                   |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.ПерсональныеПродажиТовар КАК СменаККМПерсональныеПродажиТовар
                   |        ПО НЗЧ.НомерЧека = СменаККМПерсональныеПродажиТовар.НомерЧека
                   |            И НЗЧ.ДатаОткрытияЧека = СменаККМПерсональныеПродажиТовар.ДатаОткрытияЧека
                   |            И (СменаККМПерсональныеПродажиТовар.Ссылка = &Ссылка)
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    СменаККМПерсональныеПродажиТовар.Сотрудник,
                   |    СменаККМПерсональныеПродажиТовар.Товар,
                   |    СменаККМПерсональныеПродажиТовар.Коэффициент,
                   |    СменаККМПерсональныеПродажиТовар.КодСотрудника";
                   
       РККМ.ПерсональныеПродажиТовар.Загрузить(Запрос.Выполнить().Выгрузить()); // без пересчета закупки!
       
       //---------------<ПП Контроль>---------------------------// GtG // 15.04.2014 12:32:14
       
       Запрос.Текст="ВЫБРАТЬ
                    |   СменаККМПерсональныеПродажиКонтроль.Сотрудник,
                    |   СУММА(СменаККМПерсональныеПродажиКонтроль.КоличествоЧеков) КАК КоличествоЧеков,
                    |   МИНИМУМ(СменаККМПерсональныеПродажиКонтроль.НачалоСмены) КАК НачалоСмены,
                    |   МАКСИМУМ(СменаККМПерсональныеПродажиКонтроль.КонецСмены) КАК КонецСмены,
                    |   СУММА(СменаККМПерсональныеПродажиКонтроль.СуммаРознФакт) КАК СуммаРознФакт,
                    |   СУММА(СменаККМПерсональныеПродажиКонтроль.СуммаЗакуп) КАК СуммаЗакуп,
                    |   СУММА(СменаККМПерсональныеПродажиКонтроль.СуммаСкидки) КАК СуммаСкидки,
                    |   СменаККМПерсональныеПродажиКонтроль.КодСотрудника
                    |ИЗ
                    |   НЗЧ КАК НЗЧ
                    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.ПерсональныеПродажиКонтроль КАК СменаККМПерсональныеПродажиКонтроль
                    |       ПО НЗЧ.НомерЧека = СменаККМПерсональныеПродажиКонтроль.НомерЧека
                    |           И НЗЧ.ДатаОткрытияЧека = СменаККМПерсональныеПродажиКонтроль.ДатаОткрытияЧека
                    |           И (СменаККМПерсональныеПродажиКонтроль.Ссылка = &Ссылка)
                    |
                    |СГРУППИРОВАТЬ ПО
                    |   СменаККМПерсональныеПродажиКонтроль.Сотрудник,
                    |   СменаККМПерсональныеПродажиКонтроль.КодСотрудника";

       
       РККМ.ПерсональныеПродажиКонтроль.Загрузить(Запрос.Выполнить().Выгрузить());// без пересчета закупки!!!
       
       //---------------<Авансы>---------------------------// GtG // 15.04.2014 12:34:12
       Запрос.Текст="ВЫБРАТЬ
                    |   СменаККМАвансы.НомерСтроки,
                    |   СменаККМАвансы.НомерЧека,
                    |   СменаККМАвансы.ДатаОткрытияЧека,
                    |   СменаККМАвансы.ВидДвижения,
                    |   СменаККМАвансы.ТипАванса,
                    |   СменаККМАвансы.ИДАванса,
                    |   СменаККМАвансы.Сумма,
                    |   СменаККМАвансы.СтавкаНДС,
                    |   СменаККМАвансы.Проведено,
                    |   СменаККМАвансы.ДопИнформацияОВыдаче
                    |ИЗ
                    |   НЗЧ КАК НЗЧ
                    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменаККМ.Авансы КАК СменаККМАвансы
                    |       ПО НЗЧ.НомерЧека = СменаККМАвансы.НомерЧека
                    |           И НЗЧ.ДатаОткрытияЧека = СменаККМАвансы.ДатаОткрытияЧека
                    |           И (СменаККМАвансы.Ссылка = &Ссылка)";

       РККМ.Авансы.Загрузить(Запрос.Выполнить().Выгрузить());
       
       
       //---------------<для истории>---------------------------// GtG // 22.04.2014 13:03:10 
       СтрИзм=РККМ.Изменения.Добавить();
       СтрИзм.Дата=ТекущаяДата();
       СтрИзм.КомментарийИзменения="#ZVer7# Создан по смене "+СМЕНА+" на "+ИмяКомпьютера();
       СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
       СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.Загрузка;
       //---------------<>---------------------------// GtG // 22.04.2014 13:03:14
       
       Попытка
           РККМ.Записать(РежимЗаписиДокумента.Запись);
       Исключение
           // а это случается при попытке писать в закрытый период.
           Возврат Неопределено;
       КонецПопытки;
       
       Пы=0;
       Успешно=Ложь;
       
       Пока  Пы<10 И Успешно=Ложь Цикл 
           Пы=Пы+1;
           Попытка
                 РККМ.Записать(РежимЗаписиДокумента.Проведение); // однако вероятна блокировка, сам видел, лично.
                 Успешно=Истина;
             Исключение
                 Успешно=Ложь;
             КонецПопытки;
        КонецЦикла;     
                 
                 
       
       Если РККМ.Проведен ТОгда
           Возврат РККМ.Ссылка;
       Иначе
           Возврат Неопределено;
       КонецЕсли;    
    
    Запрос.Текст="Уничтожить ДанныеПоТоваруСмены;  Уничтожить НЗЧ";
    Запрос.Выполнить();
    
    МВТ.Закрыть();
КонецФункции


Процедура УдалитьРучныеРККМ(ДатаОткрытияСмены,Склад)
    
    //---------------<Ищем введенный вручную документ по этой дате и складу>---------------------------// GtG // 16.04.2014 16:54:39 
    // В таких документах стоит затычка, и есть одна единственная строка с неизвестным товаром
    Запрос=новый Запрос(); 
    Запрос.УстановитьПараметр("ХЗТовар",Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоНаименованию("--- НЕИЗВЕСТНЫЙ ТОВАР. ПЕРЕОЦЕНКА ---"));
    Запрос.УстановитьПараметр("Дата1",НачалоДня(ДатаОткрытияСмены));
    Запрос.УстановитьПараметр("Дата2",КонецДня(ДатаОткрытияСмены));
    Запрос.УстановитьПараметр("Склад",Склад);
    
    Запрос.Текст= "	ВЫБРАТЬ
    |		РеализацияККМТовар.Ссылка,
    |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияККМТовар.НомерСтроки) КАК НомерСтроки,
    |		СУММА(ВЫБОР
    |				КОГДА РеализацияККМТовар.Товар = &ХЗТОвар
    |					ТОГДА 0
    |				ИНАЧЕ 1
    |			КОНЕЦ) КАК ХЗТовар
    |	ИЗ
    |		Документ.РеализацияККМ.Товар КАК РеализацияККМТовар
    |	ГДЕ
    |		РеализацияККМТовар.Ссылка.Склад = &Склад
    |		И РеализацияККМТовар.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
    |		И РеализацияККМТовар.Ссылка.Затычка = ИСТИНА
    |	
    |	СГРУППИРОВАТЬ ПО
    |		РеализацияККМТовар.Ссылка
    |	
    |	ИМЕЮЩИЕ
    |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияККМТовар.НомерСтроки) = 1 И
    |		СУММА(ВЫБОР
    |				КОГДА РеализацияККМТовар.Товар = &ХЗТОвар
    |					ТОГДА 0
    |				ИНАЧЕ 1
    |			КОНЕЦ) = 0
     |"; // Сгенерировано в GtG's Консоль запросов. 16.04.2014 16:53:51

    Выб=Запрос.Выполнить().Выбрать(); 
    Пока Выб.Следующий() Цикл
        Выб.ССылка.ПолучитьОбъект().Удалить();
    КонецЦикла;    
    
    
    
    
Конецпроцедуры    
   

  


//---------------<СТАНДАРТНАЯ ПРОЦЕДУРА ЗАКРЫТИЯ СМЕНЫ КОНЕЦ>---------------------------// GtG // 13.04.2014 0:07:01 

//---------------<модуль программы>---------------------------// GtG // 25.09.2013 17:33:24

//---------------<1) Создадим папку для загрузки файлов с ФТП на локальную машину>---------------------------// GtG // 25.09.2013 17:33:55
// т.к. выполняться может на разных серверах 1с создаем каждый раз, чтобы на каждом сервере папка была
КаталогВременныхФайловЦСВ=КаталогВременныхФайлов()+"KKM_CSV_FTP.TMP";
СоздатьКаталог(КаталогВременныхФайловЦСВ);

УдалитьФайлы(КаталогВременныхФайловЦСВ+"\*.*");

СоответствиеНДС=Новый Соответствие();

Запрос=Новый Запрос("ВЫБРАТЬ
                    |	СтавкиНДС.Ссылка,
                    |	СтавкиНДС.Ставка
                    |ИЗ
                    |	Справочник.СтавкиНДС КАК СтавкиНДС
                    |ГДЕ
                    |	СтавкиНДС.ПометкаУдаления = ЛОЖЬ");
РЕз=Запрос.Выполнить().Выгрузить();
Для Каждого Стр Из Рез Цикл
	СоответствиеНДС.Вставить(Строка(Стр.Ставка),Стр.Ссылка);
КонецЦикла;	



ТипНОПТ_НДС=Перечисления.ТипыНалогообложения.НДС;

ЗапросПоискаНеизвестнойПартии=Новый Запрос;
ЗапросПоискаНеизвестнойПартии.Текст= "ВЫБРАТЬ
                                     |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Ссылка
                                     |ПОМЕСТИТЬ Товары
                                     |ИЗ
                                     |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
                                     |ГДЕ
                                     |	АССОРТИМЕНТНЫЙ_ПЛАН.Код В(&МассивКодовТоваров)
                                     |
                                     |ИНДЕКСИРОВАТЬ ПО
                                     |	Ссылка
                                     |;
                                     |
                                     |////////////////////////////////////////////////////////////////////////////////
                                     |ВЫБРАТЬ
                                     |	Партии.Владелец КАК Товар,
                                     |	МИНИМУМ(Партии.Код) КАК Код
                                     |ПОМЕСТИТЬ ТоварМинКодПартии
                                     |ИЗ
                                     |	Справочник.Партии КАК Партии
                                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
                                     |		ПО Партии.Владелец = Товары.Ссылка
                                     |			И (Партии.Наименование = ""-НЕИЗВЕСТНАЯ-"")
                                     |
                                     |СГРУППИРОВАТЬ ПО
                                     |	Партии.Владелец
                                     |
                                     |ИНДЕКСИРОВАТЬ ПО
                                     |	Код
                                     |;
                                     |
                                     |////////////////////////////////////////////////////////////////////////////////
                                     |УНИЧТОЖИТЬ Товары
                                     |;
                                     |
                                     |////////////////////////////////////////////////////////////////////////////////
                                     |ВЫБРАТЬ
                                     |	ТоварМинКодПартии.Товар КАК Товар,
                                     |	Партии.Ссылка КАК НеизвестнаяПартия
                                     |ИЗ
                                     |	ТоварМинКодПартии КАК ТоварМинКодПартии
                                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партии КАК Партии
                                     |		ПО ТоварМинКодПартии.Код = Партии.Код
                                     |;
                                     |
                                     |////////////////////////////////////////////////////////////////////////////////
                                     |УНИЧТОЖИТЬ ТоварМинКодПартии"; // Сгенерировано в GtG's Консоль запросов. 11.12.2013 17:57:14

									
ВидПоступленияТовара_ПоУмолчанию=Перечисления.ВидыПоступленияТоваров.Покупка;
ТипНалогообложенияПоступленияТоваров_ПоУмолчанию=Перечисления.ТипыНалогообложения.НДС;

СоответствиеТиповСлужебныхЧеков =Новый Соответствие; // ключь- строковая значения
СоответствиеТиповСлужебныхЧеков.Вставить("0",Перечисления.ККМ_ТипыСлужебныхЧеков.Технологический); //Технологический
СоответствиеТиповСлужебныхЧеков.Вставить("3",Перечисления.ККМ_ТипыСлужебныхЧеков.ВнесениеДенег);//Внесение
СоответствиеТиповСлужебныхЧеков.Вставить("4",Перечисления.ККМ_ТипыСлужебныхЧеков.ВыплатаДенег); //Выплата
СоответствиеТиповСлужебныхЧеков.Вставить("5",Перечисления.ККМ_ТипыСлужебныхЧеков.X_Отчет);//X-отчет
СоответствиеТиповСлужебныхЧеков.Вставить("6",Перечисления.ККМ_ТипыСлужебныхЧеков.ОтчетПоСекциям);//Отчет по cекциям
СоответствиеТиповСлужебныхЧеков.Вставить("7",Перечисления.ККМ_ТипыСлужебныхЧеков.Z_Отчет); //Z-отчет
СоответствиеТиповСлужебныхЧеков.Вставить("8",Перечисления.ККМ_ТипыСлужебныхЧеков.ИтогиАктивизации);  //Итоги активизации
СоответствиеТиповСлужебныхЧеков.Вставить("9",Перечисления.ККМ_ТипыСлужебныхЧеков.Аванс);//Аванс
СоответствиеТиповСлужебныхЧеков.Вставить("10",Перечисления.ККМ_ТипыСлужебныхЧеков.ВозвратАванса);//Возврат аванса

ИК=ИмяКомпьютера();

ЗапросРасчетаКоличестваЧековСмены=Новый Запрос;
//ЗапросРасчетаКоличестваЧековСмены.Текст= "ВЫБРАТЬ
//                                         |	СУММА(1) КАК КоличествоЧековСмены
//                                         |ИЗ
//                                         |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
//                                         |		ДатаВремяОткрытияЧековСмены.ДатаОткрытияЧека КАК ДатаОткрытияЧека
//                                         |	ИЗ
//                                         |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
//                                         |			СменаККМТовар.ДатаОткрытияЧека КАК ДатаОткрытияЧека
//                                         |		ИЗ
//                                         |			Документ.СменаККМ.Товар КАК СменаККМТовар
//                                         |		ГДЕ
//                                         |			СменаККМТовар.Ссылка = &Ссылка
//                                         |		
//                                         |		СГРУППИРОВАТЬ ПО
//                                         |			СменаККМТовар.ДатаОткрытияЧека
//                                         |		
//                                         |		ОБЪЕДИНИТЬ ВСЕ
//                                         |		
//                                         |		ВЫБРАТЬ РАЗЛИЧНЫЕ
//                                         |			СменаККМСертификаты.ДатаОткрытияЧека
//                                         |		ИЗ
//                                         |			Документ.СменаККМ.Сертификаты КАК СменаККМСертификаты
//                                         |		ГДЕ
//                                         |			СменаККМСертификаты.Ссылка = &Ссылка
//                                         |		
//                                         |		СГРУППИРОВАТЬ ПО
//                                         |			СменаККМСертификаты.ДатаОткрытияЧека
//                                         |		
//                                         |		ОБЪЕДИНИТЬ ВСЕ
//                                         |		
//                                         |		ВЫБРАТЬ РАЗЛИЧНЫЕ
//                                         |			СменаККМАвансыПоУслугам.ДатаОткрытияЧека
//                                         |		ИЗ
//                                         |			Документ.СменаККМ.АвансыПоУслугам КАК СменаККМАвансыПоУслугам
//                                         |		ГДЕ
//                                         |			СменаККМАвансыПоУслугам.Ссылка = &Ссылка
//                                         |		
//                                         |		СГРУППИРОВАТЬ ПО
//                                         |			СменаККМАвансыПоУслугам.ДатаОткрытияЧека
//                                         |		
//                                         |		ОБЪЕДИНИТЬ ВСЕ
//                                         |		
//                                         |		ВЫБРАТЬ РАЗЛИЧНЫЕ
//                                         |			СменаККМАвансы.ДатаОткрытияЧека
//                                         |		ИЗ
//                                         |			Документ.СменаККМ.Авансы КАК СменаККМАвансы
//                                         |		ГДЕ
//                                         |			СменаККМАвансы.Ссылка = &Ссылка
//                                         |		
//                                         |		СГРУППИРОВАТЬ ПО
//                                         |			СменаККМАвансы.ДатаОткрытияЧека
//                                         |		
//                                         |		ОБЪЕДИНИТЬ ВСЕ
//                                         |		
//                                         |		ВЫБРАТЬ РАЗЛИЧНЫЕ
//                                         |			СменаККМСлужебныеЧеки.ДатаОткрытияЧека
//                                         |		ИЗ
//                                         |			Документ.СменаККМ.СлужебныеЧеки КАК СменаККМСлужебныеЧеки
//                                         |		ГДЕ
//                                         |			СменаККМСлужебныеЧеки.Ссылка = &Ссылка
//                                         |		
//                                         |		СГРУППИРОВАТЬ ПО
//                                         |			СменаККМСлужебныеЧеки.ДатаОткрытияЧека) КАК ДатаВремяОткрытияЧековСмены
//                                         |	
//                                         |	СГРУППИРОВАТЬ ПО
//                                         |		ДатаВремяОткрытияЧековСмены.ДатаОткрытияЧека) КАК УникальныеДатыВременаЧеков"; // Сгенерировано в GtG's Консоль запросов. 20.11.2013 14:20:08
										 
										 
  ЗапросРасчетаКоличестваЧековСмены.Текст= "ВЫБРАТЬ
                                           |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СменаККМСостояниеЧековВАптеке.ДатаОткрытияЧека) КАК КоличествоЧековСмены
                                           |ИЗ
                                           |	Документ.СменаККМ.СостояниеЧековВАптеке КАК СменаККМСостояниеЧековВАптеке
                                           |ГДЕ
                                           |	СменаККМСостояниеЧековВАптеке.Ссылка = &Ссылка";
 

ГУИД = Новый УникальныйИдентификатор("c8be0259-2d95-49d4-9054-bbc69f86c6e0");// чтобы фоновое задание на получение файлов не стартовало несколько раз подряд не успев закончиться

//---------------<Каталог файлов на виндовой шаре>---------------------------// GtG // 08.12.2013 18:44:36
ВинКаталогФайлов=СокрЛП(Константы.КаталогФТП.Получить());
Если Прав(ВинКаталогФайлов,1)<>"\" Тогда
	ВинКаталогФайлов=ВинКаталогФайлов+"\";
КонецЕсли;

ВинКаталогФайлов=ВинКаталогФайлов+"KKM_CHECKS_CSV";
СоздатьКаталог(ВинКаталогФайлов);

ВинКаталогФайловПустышек=ВинКаталогФайлов+"\Empty_Files";
СоздатьКаталог(ВинКаталогФайловПустышек);

ВинКаталогФайловОшибок=ВинКаталогФайлов+"\ERROR_Files";
СоздатьКаталог(ВинКаталогФайловОшибок);


//---------------<----------------------------------------------------------// GtG // 08.12.2013 18:44:42


СписокТиповЧекаДляФормированияРеализацииККМ=Новый Массив;
СписокТиповЧекаДляФормированияРеализацииККМ.Добавить("ADV2");
СписокТиповЧекаДляФормированияРеализацииККМ.Добавить("STR2");




ККМ_ТипыСлужебныхЧеков__Z_Отчет=Перечисления.ККМ_ТипыСлужебныхЧеков.Z_Отчет;

ЭталонТЗДляБух=Документы.СменаККМ.ПустаяСсылка().Бухгалтерия.Выгрузить();


//---------------<В базе данных нужен индекс >---------------------------// GtG // 11.12.2013 16:58:48
//CREATE INDEX "IDS_index_SmenaKKM_by_SkladCode_Idsmeny"
  //ON _document4573
  //USING btree
  //(_Fld4574, _fld5039);    -- по коду склада и идентификатору смены из аптечного модуля

//////





   // GtG  //  06.05.2014 15:15:58 - В процедурах  Загрузить[вид документа] добавлена блокировка смены ККм и реализации ккм 

