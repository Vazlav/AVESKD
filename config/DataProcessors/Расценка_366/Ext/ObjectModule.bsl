Перем ДокИзМодуляОбъекта Экспорт;
Перем АвтозапускРасценкиИзМодуляОбъекта Экспорт;
//Перем ИспольоватьЦеныКонкурентов Экспорт;


//Процедура МодОсновныеДействияФормыРасценить(Кнопка) Экспорт
//	Перем СокрСтр;
//	
//	
//	Если Типзнч(Документ)=Тип("ДокументСсылка.ПеремещениеТовара") ТОгда
//		Если Документ.Статус= Перечисления.СтатусПеремещения.ВыгруженНаАптеку Тогда
//			Предупреждение("Документ выгружен на аптеку, возможен расход ! Расценить невозможно!",10);
//			ЭтаФорма.Закрыть();
//			Возврат;
//		КонецЕсли;
//		
//		//---------------------- Перед расценкой в партии должен торчать поставщик ----------GtG--24.04.2009
//		// при автоматической расценке записи реквизитов в партии нет пока не проведется документ.
//	Иначе
//		Для каждого СтрДок Из Документ.Товар Цикл // на всякий случай запишем данные в партию до проведения документа
//			
//			ОМ1_ОбновитьДанныеПартии  (СтрДок, Документ.ПолучитьОбъект());
//			
//		КонецЦикла;
//	КонецЕсли;	
//	
//	
//	
//	
//		
//	
//	ЭтаФорма.Панель.ТекущаяСтраница= ЭтаФорма.Панель.Страницы.Найти("Страница1");
//	ЭтаФорма.Обновить();
//	
//	ЭлементыФормы.ХодРасценкиРегион.Видимость=Истина;
//	ЭлементыФормы.ХодРасценкиТОвар.Видимость=Истина;
//	ЭлементыФормы.Индикатор.Видимость=Истина;
//	ЭлементыФормы.ТОварИндюк.Видимость=Истина;
//	
//	КоличествоОшибокРАсценки=0;
//	
//	Таб= ЭлементыФормы.Таб;
//	Таб.Очистить();
//	
//	Таб.ОтображатьСетку= ЛОЖЬ;
//	Таб.АвтоМасштаб= ИСТИНА;
//	Таб.ОтображатьЗаголовки = Ложь;
//	Макет=ПолучитьОбщийМакет("РасценкаКомментарий");
//	
//	Секция=Макет.ПолучитьОбласть("Шапка"); // тип Табличный документ
//	Таб.Вывести(Секция); // аналог ВывестиСекцию v7.7
//	
//	ТП.Очистить();
//	
//	Если  ЭтаФорма.ВладелецФормы= Неопределено Тогда
//		 ЭВФ=Документ;
//	 Иначе
//		ЭВФ=ЭтаФорма.ВладелецФормы;//Документ.ПолучитьОбъект(); 
//	КонецЕсли;
//	
//	ДатаДок=ЭВФ.Дата;
//	
//	//------------------<СКЛАД для использования в алгоритмах завязанных на складе>-------------------GtG----21.11.2008
//	Если ТипЗнч(ЭВФ)=Тип("ДокументОбъект.ПеремещениеТовара") 
//		или ТипЗнч(ЭВФ)=Тип("ДокументСсылка.ПеремещениеТовара")
//		или ТипЗнч(ЭВФ.Ссылка)=Тип("ДокументСсылка.ПеремещениеТовара")
//		
//		тогда
//		СКЛАД=ЭВФ.СкладПолучатель;
//	Иначе
//		СКЛАД=ЭВФ.Склад;
//	КонецЕсли; 
//	//------------------------------------------------------------------------------------------------GtG----КОНЕЦ--21.11.2008
//	
//	
//	ДатаВыходаНаПМ=КонецМесяца(КонецМесяца(СКЛАД.ДатаПерехода)+1);// среднестатистический срок выхода на проектную мощность  через месяц после конца месяца открытия аптеки
//	
//	
//	//------------------<Сколько регионов?>-------------------GtG----09.01.2008
//	ТЗРег= Новый ТаблицаЗначений;
//	ТЗРег.Колонки.Добавить("Рег");
//	Для каждого Стр из ВыбРег Цикл
//		Если Стр.Пометка=Истина Тогда
//			СтрРег=ТЗРег.Добавить();
//			СтрРег.Рег=Стр.Значение;
//		КонецЕсли;	
//	КонецЦикла;	
//	//--------------------------------------------------------GtG----КОНЕЦ--09.01.2008
//		
//	
//	
//	
//	
//	КСТовара=ЭВФ.Товар.Количество();
//	
//	ИТОГОСтрокРез=КСТовара*ТЗРег.Количество(); // сколько должно получиться строчек на выходе
//	
//	
//	Если АвтоРасценка=Ложь Тогда
//		ЭлементыФормы.Индикатор.МаксимальноеЗначение=ИТОГОСтрокРез;
//		ЭлементыФормы.Индикатор.Значение=0;
//	Иначе
//		Комментировать=Ложь;
//	КонецЕсли;
//		
//	
//	Попытка
//		Курс=ПолучитьКурсВалюты(ЭВФ.Валюта, ЭВФ.Дата);
//	ИСключение
//		Курс=1;  // в документе нет реквизита валюта
//	КонецПопытки;
//	
//	ТЧТовар= ЭВФ.Товар.Выгрузить(); //ЭтаФорма.ВладелецФормы.Товар;
//	
//	
//	//==================<Определяем по закупочной цене какие товары будем расценять>===================GtG====21.11.2008
//	// товары которые не расценяются в расценку не попадут
//	ТЗКосяков=КонтрольПоЗакупке(ТЧТовар,СКЛАД.Регион);
//	//=================================================================================================GtG====21.11.2008
//	
//	СтрокаНулевыхЦен=ТЧТовар.Найти(0,"ЦенаЗакуп");
//	Если СтрокаНулевыхЦен<> Неопределено Тогда
//		Косяк=ТЗКосяков.Добавить();
//		Косяк.Партия="";
//		Косяк.ТОвар="";
//		Косяк.Косяк="В документе есть строки с нулевой закупочной ценой!";
//		ПРедупреждение("В документе есть строки с нулевой закупочной ценой!
//		|РАСЦЕНИТЬ НЕВОЗМОЖНО! ДОКУМЕНТ НЕ ГОТОВ!",2);
//		
//				
//		Попытка
//			ОП=ЭВФ.ОшибкиРасценки;
//			Если Константы.БеспределСЖНВЛС.Получить() = Истина Тогда
//				ПустаяПартия = Справочники.Партии.ПустаяСсылка();
//				
//				СписокУдаляемыхСтрок=новый СписокЗначений;
//				
//				Для каждого стр из ОП Цикл
//					Если стр.Партия = ПустаяПартия Тогда
//						продолжить;
//					КонецЕсли;
//					СписокУдаляемыхСтрок.Добавить(стр);
//				КонецЦикла;
//				Для Каждого ССУС из СписокУдаляемыхСтрок цикл
//					ОП.Удалить(ССУС.Значение);
//				КонецЦикла;	
//				
//				
//			Иначе
//				ОП.Очистить();// при каждой расценке перезаполняется. в идеале - пустая.
//			КонецЕсли;
//			
//			ТЗКосяков.Свернуть("Партия,Товар,Косяк,ЦенаПоРасценке","");
//			
//			
//			Для каждого Стр из ТЗКосяков Цикл
//				СтрОп=ОП.Добавить();
//				СтрОП.Товар 	= Стр.Товар;
//				СтрОП.Партия 	= Стр.Партия;
//				СтрОП.ОписаниеОшибки= Стр.Косяк;
//				СтрОП.ЦенаПоРасценке= Стр.ЦенаПоРасценке;
//			КонецЦикла;
//		Исключение	
//		КонецПопытки; 
//		
//		Попытка
//			ЭВФ.Состояние=Справочники.СостояниеДокумента.НайтиПоНаименованию("не готов");
//		Исключение
//		КонецПопытки;
//		ЭВФ.зАПИСАТЬ(РежимЗаписиДокумента.Запись);

//		
//		ЭтаФорма.Закрыть();
//		Возврат; // произойдет ошибка расценки. Не расцениваем недоделанный документ
//	КонецЕсли; 
//	
//	
//	СписокСтрокДокумента=ТЧТовар.ВыгрузитьКолонку("ТОвар");
//	
//	
//	
//	
//	ЭлементыФормы.ХодРасценкиТОвар.Заголовок="Поиск старых розничных цен...";
//	ТаблицаСтарыхРознЦен=ПолучитьТаблицуСтарыхРозничныхЦен(ЭВФ.Дата,СписокСтрокДокумента);
//	
//	
//	//----------------------------< Готовим Дерево Ошибок (ДО) >--------------------------------GtG---
//	ДО = Новый ДеревоЗначений;
//	КДО=ДО.Колонки.Добавить("Ошибки");
//	
//	ДО.Строки.Очистить();
//	
//	
//	Корень=ДО.Строки.Добавить();
//	
//	Корень.Ошибки="Расценка документа ";
//	
//	//----------------------------<  >--------------------------------GtG---	
//	
//	ЕстьОшибки=Ложь;
//	
//		
//	Если ТипЗнч(Документ)=Тип("ДокументСсылка.ПеремещениеТОвара") Тогда
//		ТЧТовар.Колонки.Добавить("ЦенаГосРегистрации");
//		ТЧТовар.Колонки.Добавить("ЦенаПроизводителя");
//		ТЧТовар.Колонки.Добавить("ЦенаЗакупБезНДС");
//		ТЧТовар.ЗаполнитьЗначения(0,"ЦенаГосРегистрации");
//		
//		Для каждого СтрТЧТовар из ТЧТовар Цикл
//			СтрТЧТовар.ЦенаЗакупБезНДС= СтрТЧТовар.ЦенаЗакуп - ОМ3_НДСИзСуммыПоСтавке (СтрТЧТовар.ЦенаЗакуп,СтрТЧТовар.СтавкаНДС);
//			СтрТЧТовар.ЦенаПроизводителя=СтрТЧТовар.Партия.ЦенаПроизводителяБезНДС;
//		КонецЦикла;	
//	КонецЕсли;
//	
//	ТЧ = ТЧТовар.сКОПИРОВАТЬ(); //ЭВФ.Товар.Выгрузить();

//	ТЧ.Свернуть("Товар,Партия,ЦенаПроизводителя,ЦенаЗакуп,ЦенаЗакупБезНДС,ЦенаГосРегистрации,СтавкаНДС","");
//	
//	
//	Если АвтоРасценка=Ложь Тогда
//		ЭлементыФормы.Индикатор.Значение=0;
//		ЭлементыФормы.Индикатор.МаксимальноеЗначение=ТЗРег.Количество();
//	КонецЕсли;
//	

//	ЗадержкаОтображенияНаИндикаторе=Истина;  // наращиваем индюк после обработки региона
//	
//	Для каждого СтрРег из ТЗРег цикл // ПО РЕГИОНАМ
//		
//		ЭлементыФормы.ХодРасценкиРегион.Заголовок=СтрРег.Рег;
//		
//		
//		Если ЗадержкаОтображенияНаИндикаторе=Ложь ТОгда
//			
//			Если АвтоРасценка=Ложь Тогда
//			ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;
//			КонецЕсли;
//			
//		Иначе 
//			ЗадержкаОтображенияНаИндикаторе=Ложь; // сначала нужно обработать ГТТ а потом вывести процент на индикатор
//		КонецЕсли; 	
//		
//		
//		
//				
//		ТекРегион=СтрРег.Рег;
//		
//		
//		Если ТекРегион.ПометкаУдаления=Истина ТОгда
//			ПРодолжить; // Удаленные регионы НЕ обрабатываем!
//		КонецЕсли; 
//		
//		
//		
//		
//		ВеткаРегион=Корень.Строки.Добавить();
//		ВеткаРегион.Ошибки="по Региону   "+ТекРегион;
//		
//		
//		
//		КомментаторРасчета  (Неопределено,Таб,Макет,"Регион",Новый Структура("Регион",ТекРегион));
//		
//		
//		
//		//------------------<Получим алогоритмы ценообразования из справочников>-------------------GtG----16.11.2007
//		//Регион
//		//	Алгоритмы ценообразования
//		//		УСЛОВИЯ ПРИМЕНЕНИЯ АЛГОРИТМОВ
//		// Выборку строим начиная с конца (УПА)
//		ТХТ="ВЫБРАТЬ
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ЛеваяЧасть,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ТипУсловия,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ПраваяЧасть,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ОбъединятьСоСледующим,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ПорядокФормированияУсловия КАК ПорядокФормированияУсловия,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.Приоритет КАК Приоритет,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.ДатаС,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.ДатаПо,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.МинПроцНаценки,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.МаксПроцНаценки,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.ФормулаРасчетаЦены,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.ФормулаРасчетаПроцентаНаценки,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.Ссылка КАК АлгоритмСсылка,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ОткрывающаяСкобка КАК ОСК,
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.ЗакрывающаяСкобка как ЗСК
//			|ИЗ
//			|	Справочник.АлгоритмыЦенообразованияРегионов.УсловияПрименения КАК АлгоритмыЦенообразованияРегионовУсловияПрименения
//			|ГДЕ
//			|	АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.Владелец = &Регион
//			|	И &ДатаДок МЕЖДУ АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.ДатаС И АлгоритмыЦенообразованияРегионовУсловияПрименения.Ссылка.ДатаПо
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	Приоритет,
//			|	ПорядокФормированияУсловия";
//		
//		Запрос=Новый Запрос;
//		Запрос.Текст=ТХТ;
//		Запрос.УстановитьПараметр("Регион",ТекРегион); 
//		Запрос.УстановитьПараметр("ДАТАДок",ДатаДок);
//		
//		ИсходнаяТЗПравил=Запрос.Выполнить().Выгрузить(); // сырые данные
//		ИсходнаяТЗПравил.Колонки.Добавить("УсловиеВыполнилось");
//		ИсходнаяТЗПРавил.Колонки.Добавить("ВырИтУсл");  // выаржение для вычисления иотгового результата условия примеенния
//		
//		
//		
//		Если ИсходнаяТЗПРавил.Количество()=0 ТОгда
//			ТекстОшибки=("   По региону  "+ТекРегион+" не задано ни одного алгоритма ценообразования! НЕ РАСЦЕНЕНО! (Задается через справочник регионов.)");
//			
//			ОшибкаРЕгион=ВеткаРегион.Строки.Добавить();
//			ОшибкаРегион.Ошибки=ТекстОшибки;
//			СсылкаРегион=ОшибкаРЕгион.Строки.Добавить();
//			СсылкаРегион.ошибки=ТекРегион;
//			
//			КомментаторРасчета  (Неопределено,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки,Расшифровка",ТекстОшибки,ТекРегион));
//			
//			КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//			
//			Продолжить; // по группам ТТ
//		КонецЕсли; 	
//		
//		ТЗХ=ИсходнаяТЗПРавил.Скопировать();
//		ТЗХ.Свернуть("Приоритет"); //,ПорядокФормированияУсловия");
//		КоличествоАлгоритмов=ТЗХ.Количество();
//		
//		
//		
//		//------------------<Собираем из кусочков сложные условия>-------------------GtG----16.11.2007
//		ВеткаТовары=ВеткаРегион.Строки.Добавить();
//		ВеткаТовары.Ошибки=" Ошибки при расценке товара по региону  ";
//		ЕстьОшибкиПоГТТ=Ложь;
//		
//		Если АвтоРасценка=Ложь ТОгда
//			ЭлементыФормы.ТОварИндюк.Значение=0;
//			ЭлементыФормы.ТОварИндюк.МаксимальноеЗначение=ТЧТовар.Количество();
//		КонецЕсли;
//		
//		НН=0;
//		
//		
//		Для каждого Стр из ТЧТовар Цикл // по строкам документа
//			
//			ПостОбработкаЦены=Ложь;
//			
//			НН=НН+1;
//			
//			//ТОвар=Стр.Товар.ПолучитьОбъект();
//			
//			//------------------<Ускорение расценки>-------------------GtG----27.11.2008 
//			// чтобы избежать многочисленных обращений к базе Товар - делаем как ТЗ из 1-й строки
//			// с колонками соответствующими всем реквизитам товара.
//			// при вычислении условий типа товар.ххх = уууу это даст ускорение вычисления
//			//-------------- ЗАПРОС GTG --------------------------НАЧАЛО
//			//Назначение: все реквизиты товара
//			//
//			ТХТ="ВЫБРАТЬ
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Предопределенный,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Родитель,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Поставщик,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Бренд,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.СВЛС,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Сезон,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.АптечныйОБ,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Артикул,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Валюта,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ВалютаГосРегистрации,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Возраст,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.Высота,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ВысотаЗаводскойУпаковки,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.Глубина,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ГлубинаЗаводскойУпаковки,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаАП,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаФТГ,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ДатаВводаВАП,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Дисконт,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ДлинаЗаводскойУпаковки,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Дозировка,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ДополнительноеОборудование,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Доходность,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЕдиницаПоУмолчанию,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦена,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ЗонаВыкладки,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Категория,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.КолвоАптекMedlux,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.КолвоВУпаковке,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЛекФорма,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МаксНаценка,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МаксЦенаMedlux,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.Маржа,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МаржаЧистая,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.МассаЗаводскойУпаковки,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.МассаУпаковки,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МеждународноеНазвание,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МинМаржа,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МинНаценка,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.МинЦенаMedlux,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Назначение,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Наценка,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ОбобщеннаяГруппа,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ОсновнаяГруппа,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Подкатегория,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Приоритет,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Причина,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ПроцентДисконта,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Реализация,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.РозничнаяЦена,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Сезонный,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.СпецПроект,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.СпецРознЦена,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.СтавкаНДС,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Страна,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипКожи,
//			   // |	АССОРТИМЕНТНЫЙ_ПЛАН.ТипКонструкции,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипШтрихкода,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.УТК,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Фасовка,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ФормаВыпуска,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЦенаГосРегистрации,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.ЧастьТела,
//				//|	АССОРТИМЕНТНЫЙ_ПЛАН.Ширина,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Примечание,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЕдиницаОтгрузки,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.КолвоМин,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.КолвоМакс,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ТорговоеНаименование,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Концентрация,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Дополнение,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ПисатьТире,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.НаименованиеПоГенератору,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Топ100,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Топ1000,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Новинка,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Разбивается,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЕдиницаМин,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.ЗаказНаСкладе,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.КодОКП,
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Представление
//				|ИЗ
//				|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
//				|ГДЕ
//				|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка = &ВыбТовар";
//			
//			Запрос=Новый Запрос;
//			Запрос.Текст=ТХТ;
//			Запрос.УстановитьПараметр("ВыбТовар",Стр.Товар);
//			
//			ТОВАР=Запрос.Выполнить().Выгрузить().Получить(0);// строка ТЗ
//			
//			
//			//-------------- ЗАПРОС GTG --------------------------КОНЕЦ
//			
//			//--------------------------------------------------------GtG----КОНЕЦ--27.11.2008
//			
//			
//			СтрТОвар=ТОВар.Ссылка;
//			СтрТОварКод=Товар.Код;
//			
//			ЭлементыФормы.ХодРасценкиТОвар.Заголовок=Товар.Наименование;
//			
//			КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Товар",Новый Структура("ТОВар,Расшифровка,ТОВарКод",СтрТОвар,СтрТОвар,СтрТОварКод));
//			
//			Если АвтоРасценка=Ложь ТОгда
//				ЭлементыФормы.ТОварИндюк.Значение=ЭлементыФормы.ТОварИндюк.Значение+1;
//			КонецЕсли;	
//			
//			ВеткаТовар= Неопределено;
//			
//			Если Стр.КоличествоФакт=0 тогда
//				ТекстОшибки="Расценим, НО Фактическое количество товара равно нулю! ("+СтрТоварКод+")  "+СтрТовар+"    Не РАСЦЕНЕН!";
//				
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки,Расшифровка",ТекстОшибки,""));
//				
//				ЕстьОшибкиПоГТТ=Истина;
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				//Продолжить;
//			КонецЕсли; 
//			
//			
//			
//			ТЗПРавил=ИсходнаяТЗПРавил.Скопировать();
//			РознЦена=0;
//			
//			//------------------<1) нужны значения всех возможных переменных из алгоритма условий>-------------------GtG----17.11.2007
//			//---------------- Товар-------
//			//			ТОвар=Стр.Товар;
//			//------------------Регион------
//			Регион=ТекРегион;
//			
//			//------------- ГТТ------
//			//ГТТ=ВыбГТТ.Ссылка;
//			
//			//------------------<строка документа>-------------------GtG----17.11.2007 
//			Док=Стр;
//			
//			//------------------<Единица измерения>-------------------GtG----28.11.2007
//			Если Док.Еит.Пустая()=Истина ТОгда
//				ТекстОшибки="В документе у товара не указана единица измерения! ("+СтрТоварКод+")  "+СтрТОвар+"    Не РАСЦЕНЕН!";
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТОвар);
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				ЕстьОшибкиПоГТТ=Истина;
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки,Расшифровка",ТекстОшибки,""));
//				
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				
//				Продолжить; // по таблице товаров
//			Иначе
//				ДокЕитК=Док.Коэфф;  // коэффициент единицы измерения из документа
//				ДокЕИТ=Док.Еит;
//			КонецЕсли; 
//			
//			
//			
//			
//			
//			
//			
//			
//			//------------------<Рассчитываем условия по каждой строке условий применения алгоритма>-------------------GtG----17.11.2007 
//			// Если условие составное это даст для каждой части ИСТИНА или ЛОЖЬ потом их можно
//			// загнать в одно выражение и получить результат
//			
//			ТЗПравил.Колонки.Добавить("РасшифровкаОшибки");
//			
//			Для каждого СтрП из ТЗПравил Цикл  // по таблице правил
//				
//				Если СтрП.ЗСК=Истина или СтрП.ОСК=Истина Тогда // это скобка "(" или ")"
//					СтрП.УсловиеВыполнилось=Истина; // скобки всегда считаем истинными
//				Иначе// собственно это условие	 
//					ЗначениеПРавойЧасти=СтрП.ПраваяЧасть;
//					
//					Если ТипЗнч(ЗначениеПРавойЧасти)=Тип("Строка") Тогда // значит это формула и ее нужно вычислить
//						ЗначениеПРавойЧасти =Вычислить( ЗначениеПРавойЧасти );
//					КонецЕсли;	
//					
//					ТХТВычислить=""+СтрП.ЛеваяЧасть+" "+СтрП.ТипУсловия+" ЗначениеПРавойЧасти";
//					
//					
//					Если  СтрП.ТипУсловия="СодЗнач" Тогда // вычисляет сидит ли значение Лева в таблице значений Права
//						ТХТВычислить=""+Условие_СодЗнач(Вычислить(СтрП.ЛеваяЧасть),ЗначениеПРавойЧасти)+"";
//						
//						// ТХТВычислить будет как "Истина" или "Ложь"
//					КонецЕсли;
//					
//					
//					

//					Попытка
//							СтрП.УсловиеВыполнилось=Вычислить(ТХТВычислить);		
//					Исключение  //ибо могут накосячить при написании условий
//						ТекстОшибкиВычисления=ОписаниеОшибки()+"
//									|Ошибка вычисления выражения. 
//									|Алгоритм  "+СтрП.АлгоритмСсылка+"
//									|"+СтрП.ЛеваяЧасть+" Условие сравнения "+СтрП.ТипУсловия+" Значение в правой части "+ЗначениеПРавойЧасти; 
//						ВызватьИсключение ТекстОшибкиВычисления; // точно! - накосячили.
//					КонецПопытки ;
//					
//					
//					
//					Если СтрП.УсловиеВыполнилось=Ложь Тогда
//						СтрП.РасшифровкаОшибки="Не выполнилось условие "+ТХТВычислить;// СтрЗаменить(ТХТВычислить,"ЗначениеПРавойЧасти",ЗначениеПРавойЧасти);//+", а по товару "+Вычислить(СтрП.ЛеваяЧасть);
//					КонецЕсли; 
//				КонецЕсли; 
//			КонецЦикла;	// по таблице правил
//			
//			
//			Приоритет=0;
//			ВырИтУсл="";
//			
//			Для каждого СтрП из ТЗПравил Цикл  // по таблице правил 2 заход
//				
//				Если Приоритет<>СтрП.Приоритет Тогда // новое правило расчета
//					ВырИтУсл="";
//					
//					Приоритет=СтрП.Приоритет; // запомним какой был последним
//					
//				КонецЕсли;	
//				
//				
//				Если СтрП.ЗСК=Истина Тогда // это скобка ")"
//					СтрПУсловиеВыполнилось=")"
//				ИначеЕсли СтрП.ОСК=Истина Тогда // это скобка "("
//					СтрПУсловиеВыполнилось="("
//				Иначе  // Это условие
//					СтрПУсловиеВыполнилось =СтрП.УсловиеВыполнилось;
//				КонецЕсли; 	
//					
//					
//					

//				
//				
//				
//				СтрП.ВырИтУсл=ВырИтУсл+" "+СтрПУсловиеВыполнилось+" "+СтрП.ОбъединятьСоСледующим;
//				ВырИтУсл= СтрП.ВырИтУсл;// в последней строке сложного условия оно соберется все целиком
//				// эта строка будет имет ьмакс порядок формирования
//				
//				
//			КонецЦикла; // по таблице правил 2 заход
//			
//			//------------------<Свернет таблицу правил>-------------------GtG----20.11.2007
//			
//			
//			ТЗПРавил.Сортировать("ПорядокФормированияУсловия Desc");
//			ТЗПРавил.Сортировать("Приоритет Asc");

//			
//			
//			
//			
//						
//			ТЗПравил.Колонки.Удалить("ЛеваяЧасть");
//			ТЗПравил.Колонки.Удалить("ТипУсловия");
//			ТЗПравил.Колонки.Удалить("ПраваяЧасть");
//			ТЗПравил.Колонки.Удалить("ОбъединятьСоСледующим");
//			ТЗПравил.Колонки.Удалить("УсловиеВыполнилось");
//			
//			ППР=0; // правилоПриоритет
//			ППФУ=0;  // правило, порядок формирования условия
//			Удаляемыестроки=Новый СписокЗначений;
//			
//			СписокНевыполнившихсяУсловий=Новый СписокЗначений; // для человеческой расшифровки ошибки если
//			// ни один алгоритм не подойдет	
//			
//			
//			// АХТУНГ ДАНГЕР!
//			
//						
//			//ПРи большом кол-ве условий неправильный порядок условий
//			
//			
//			
//			Для каждого СтрП из ТЗПравил Цикл
//				Если ППР<СтрП.Приоритет Тогда
//					ППР=СтрП.Приоритет ;    // правило приоритет
//					ППФУ=СтрП.ПорядокФормированияУсловия; //правило, порядок формирования условия)
//				КонецЕсли;	
//				
//				
//									
//				Если СтрП.ПорядокФормированияУсловия < ППФУ Тогда
//					// это огрызок недоделанного сложного условия
//					// его надо убрать чтоб дальше не мешался
//					СписокНевыполнившихсяУсловий.Добавить(СтрП.РасшифровкаОшибки);
//					Удаляемыестроки.Добавить(СтрП);
//				КонецЕсли; 
//				
//				//======================= Самый медленный кусок ======================
//				Если прав( СтрП.ВырИтУсл,2)=" И" Или  прав( СтрП.ВырИтУсл,4)=" ИЛИ" Тогда
//					СписокНевыполнившихсяУсловий.Добавить(СтрП.РасшифровкаОшибки);
//					Удаляемыестроки.Добавить(СтрП); // оно все-равно не выполнилось
//				Иначе
//					Попытка
//						Если Вычислить(СтрП.ВырИтУсл)=Ложь Тогда
//							//------------------<Еще подуменьшим количество условий>-------------------GtG----20.11.2007 
//							// Отбросим ложные строки
//							СписокНевыполнившихсяУсловий.Добавить(СтрП.РасшифровкаОшибки);
//							Удаляемыестроки.Добавить(СтрП); // оно все-равно не выполнилось
//						КонецЕсли; 
//					Исключение
//						//------------------<Точно это огрызок сложного условия и он не посчитается>-------------------GtG----29.12.2007
//						// Отбросим ложные строки
//						СписокНевыполнившихсяУсловий.Добавить(СтрП.РасшифровкаОшибки);
//						Удаляемыестроки.Добавить(СтрП); // оно все-равно не выполнилось
//					КонецПопытки; 
//				КонецЕсли; 
//				//====================================================

//			КонецЦикла;	
//			
//			
//			
//			//------------------<Удаляем неподходящие алгоритмы>-------------------GtG----23.11.2007
//			Для каждого СтрУС из Удаляемыестроки Цикл
//				Попытка
//					ТЗПРавил.Удалить(СтРУС.Значение);// удаляем лишние строки условий 
//				ИСключение
//					// значит уже прибили нах
//				КонецПопытки; 
//			КонецЦикла;	
//			
//			//------------------<Должны остаться только подходящие>-------------------GtG----23.11.2007
//			// если ничего не подошло - расценка невозможна 
//			// выведем список невыполнившихся условий и перейдем к расценке следующего товара
//			Если ТЗПравил.Количество()=0 Тогда
//				
//				Если ВыводитьНеРасцененные=Истина  Тогда  
//					//==================<Выводим строку НЕ расцененного товара >===================GtG====20.11.2007
//					
//					ДокПартияЦенаЗакуп=Док.Партия.ЦенаЗакуп; // 1 раз лезем в базу
//					
//					Цена_Розничная=0;
//					СтрТП=Тп.Добавить();
//					СтрТП.ТОвар=СтрТОвар; //ссылка
//					СтрТП.Партия=Док.Партия;
//					СтрТП.ЕИТ=Док.Еит;
//					СтрТП.КоэффЕит=ДокЕитК;
//					СтрТП.ЦенаПрБезНДС=Док.Партия.ЦенаПроизводителяБезНДС;
//					СтрТП.ЦенаГосРег=Товар.ЦенаГосРегистрации;
//					СтрТП.ЦенаЗакуп =ДокПартияЦенаЗакуп;
//					СтрТП.ЦенаРозн = Цена_Розничная;// рассчитанная
//					
//					СтрТП.Топ100=Товар.Топ100;
//					СтрТП.Топ1000=ТОвар.Топ1000;
//					
//					СтрТП.НаценкаОтЗакупки =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаЗакуп,Цена_Розничная);
//					СтрТП.НаценкаОтЦГР =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаГосРег,Цена_Розничная);
//					СтрТП.Регион  =ТекРегион;
//					СтрТП.НаценкаОтЗакупБезНДС= ОМ6_НаценкаОтЧегоЛибо (ДокПартияЦенаЗакуп-ОМ3_НДСИзСуммыПоСтавке(ДокПартияЦенаЗакуп,Док.Партия.СтавкаНДС,2),Цена_Розничная);
//					
//					СтрТП.НаценкаОтЦПРБНДС=ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаПроизводителяБезНДС,Цена_Розничная);
//					СтрТП.НН=НН;
//					СтрТП.ПредыдущаяРознЦена=ПолучитьПрошлуюЦену(ТОВар.Ссылка,ТекРегион,ТаблицаСтарыхРознЦен);
//				КонецЕсли; 
//				
//				Попытка
//					Косяк=ТЗКосяков.Добавить();
//					Косяк.Партия=СтрТП.Партия;
//					Косяк.ТОвар=СтрТП.ТОвар;
//					Косяк.Косяк="Товар не расценился т.к. не прошел ни по одному условию ценообразования по региону!";
//				Исключение
//					Попытка
//						Косяк=ТЗКосяков.Добавить();
//						Косяк.Партия="Партия неизвестна";
//						Косяк.ТОвар=СтрТП.ТОвар;
//						Косяк.Косяк="Товар не расценился т.к. не прошел ни по одному условию ценообразования по региону!";
//					Исключение
//						Косяк=ТЗКосяков.Добавить();
//						Косяк.Партия="Партия неизвестна";
//						Косяк.ТОвар="Товар неизвестен!";
//						Косяк.Косяк="Товар не расценился т.к. не прошел ни по одному условию ценообразования по региону!";
//					КонецПопытки;
//				КонецПопытки; 
//				
//				

//				
//				
//				
//				
//				ТекстОшибки=" Товар не расценился т.к. не прошел ни по одному условию ценообразования по региону!";
//				
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				ВеткаТОварОшСсы=ВеткаТОварОш.Строки.Добавить();
//				ВеткаТОварОшСсы.Ошибки=СтрТОвар; // ссылка на товар
//				ВеткаТОварОшСсы=ВеткаТОварОш.Строки.Добавить();
//				ВеткаТОварОшСсы.Ошибки=ТекРегион; // ссылка на регион
//				
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки,Расшифровка",ТекстОшибки,ТекРегион));
//				
//				
//				//------------------<Список невыполнившихся условий>-------------------GtG----23.11.2007
//				Для каждого ЧПО из СписокНевыполнившихсяУсловий Цикл
//					Если СокрЛП(ЧПО.Значение)="" ТОгда
//						Продолжить;
//					КонецЕсли; 
//					
//					ВеткаЧПО=ВеткаТОварОшСсы.Строки.Добавить();
//					ВеткаЧПО.Ошибки=ЧПО.Значение;
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки,Расшифровка",ЧПО.Значение,ТекРегион));
//					КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//					
//				КонецЦикла;	
//				
//				
//				
//				ЕстьОшибкиПоГТТ=Истина;
//				Продолжить;  // не расценилось
//			КонецЕсли; 	
//			
//			
//			
//			
//			
//			//==================<а вот теперь можно начинать считать цену розничную>===================GtG====20.11.2007 
//			// Должен сработать алгоритм расценки с наибольшим приоритетом
//			// Поэтому с меньшим даже и смотреть не стоит
//			
//			
//			
//			~ПостобработкаЦены:  // безусловный переход сюда, если есть алгоритмы с отрицательным приоритетом.
//			// сюда прыгаем после расчета цены по основным алгоритмам с положительным приоритетом	
//			Если ПостОбработкаЦены=Ложь Тогда
//				ТЗПравил.Сортировать("Приоритет desc");
//				// в ТЗ рпавил первыми пойдут условия с максимальным проядком формирования
//				//  т.е. самые доделанные. остальные будут недоделанными огрызками и от них надо избавиться
//			Иначе
//				ТЗПРавил.Сортировать("Приоритет Asc");
//				//Для постобработки розничной цены с помощью алгоритмов с отрицательным приоритетом
//			КонецЕсли;
//			
//			
//			
//			
//			
//			
//			
//			
//			
//			
//			
//			РабочийАлгоритм=ТЗПравил.Получить(0); // первая строка сверху по таблице правил расчета
//			
//			КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Алг",Новый Структура("Алг,Расшифровка",РабочийАлгоритм.АлгоритмСсылка,РабочийАлгоритм.АлгоритмСсылка));
//			
//			//==================<перед тем, как вычислять цены >===================GtG====22.11.2007
//			// нужно проверить все ли условия на ноебходимые данные 
//			// по выбранному алгоритму выполняются , НО это еще не гарантирует что он сработает
//			
//			// ..запросом собарть условия в тз
//			// построить условия, вычислить их и получить бульрезультат по всем условиям 
//			// через И если в итоге ПРАВДА тогда все ОК иначе алгоритм не сработает
//			
//			ТХТ="ВЫБРАТЬ
//			|	АлгоритмыЦенообразованияРегионовНеобходимыеРеквизиты.Реквизит,
//			|	АлгоритмыЦенообразованияРегионовНеобходимыеРеквизиты.ДолженБыть,
//			|	АлгоритмыЦенообразованияРегионовНеобходимыеРеквизиты.Чему,
//			|	АлгоритмыЦенообразованияРегионовНеобходимыеРеквизиты.Ссылка
//			|ИЗ
//			|	Справочник.АлгоритмыЦенообразованияРегионов.НеобходимыеРеквизиты КАК АлгоритмыЦенообразованияРегионовНеобходимыеРеквизиты
//			|ГДЕ
//			|	АлгоритмыЦенообразованияРегионовНеобходимыеРеквизиты.Ссылка = &ВыбАлгоритм";
//			
//			
//			Запрос=Новый Запрос;
//			Запрос.Текст=ТХТ;
//			Запрос.УстановитьПараметр("ВыбАлгоритм",РабочийАлгоритм.АлгоритмСсылка);
//			
//			НеобхРекв=Запрос.Выполнить().Выгрузить();
//			НеобхРекв.Колонки.Добавить("УсловиеВыполнилось");
//			
//			Для каждого СтрНРекв из НеобхРекв Цикл
//				
//				Если СтрНРекв.ДолженБыть = "СодЗнач" Тогда
//					ВызватьИсключение "Нельзя использовать тип сравнения СодЗнач в необходимых реквизитах алгоритма ценообразования!";
//				КонецЕсли;	
//				
//				ТекстУсловия=""+СтрНРекв.Реквизит+" "+ СтрНРекв.ДолженБыть+" "+СтрНРекв.Чему;
//				СтрНРекв.УсловиеВыполнилось=Вычислить(ТекстУсловия);
//			КонецЦикла;	
//			
//			//------------------<Если какое-либо условие не выполнилось то нихрена не расчитается>-------------------GtG----22.11.2007
//			ЕстьОшибкиПоУПА=Ложь;
//			Для каждого СтрНРекв из НеобхРекв Цикл
//				Если СтрНРекв.УсловиеВыполнилось=Ложь Тогда
//					ТекстОшибки=""+СтрНРекв.Реквизит+" "+ СтрНРекв.ДолженБыть+" "+СтрНРекв.Чему+" Условие не выполнилось!";
//					ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//					ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//					ВеткаТОварОш.Ошибки=ТекстОшибки;
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки,Расшифровка",ТекстОшибки,""));
//					
//					
//					ЕстьОшибкиПоУПА=Истина;
//				КонецЕсли; 
//			КонецЦикла;	
//			Если  ЕстьОшибкиПоУПА=Истина Тогда
//				//товар не расценился
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				Продолжить;
//			КонецЕсли; 	
//			//--------------------------------------------------------GtG----КОНЕЦ--22.11.2007
//			
//			
//			
//			
//			
//			
//			
//			Попытка 
//				
//				
//				//------------------<МОМЕНТ с ценами из АП>--------------------------------GtG----28.11.2007
//				// Расчет цены на 1 минимальную единицу
//				// Цены если из основного ап считаем заданными на единицу по умолчанию (делим на еёйный К)
//				// Если цена задана из АПГТТ то там должна быть ЕИТ на которую задана цена (делим на еёйный К), 
//				//
//				// Получившуюся Розн цену * на К по документу
//				//
//				// В РЕГИСТРЕ ЦЕН ХРАНИМ ЦЕНУ В РАСЧЕТЕ НА К=1 ! ДАЛЕЕ ВЕЗДЕ ЕЕ МНОЖИМ НА К ЕДИНИЦЫ
//				//
//				//------------------<--------------------->--------------------------------GtG----28.11.2007
//				
//				ФормулаДляРасчетаЦены= РабочийАлгоритм.ФормулаРасчетаЦены;
//				ФормулаДляРасчетаПроцНац=РабочийАлгоритм.ФормулаРасчетаПроцентаНаценки;
//				
//				
//				ФормулаДляРасчетаЦены=ПравильнаяФормулаРасчета(ФормулаДляРасчетаЦены);
//				ФормулаДляРасчетаПроцНац=ПравильнаяФормулаРасчета(ФормулаДляРасчетаПроцНац);
//				
//				
//				
//				
//				
//				
//				//------------------------------------------------------------GtG----28.11.2007
//				
//				Цена_Розничная=Вычислить(ФормулаДляРасчетаЦены); // на идеальную сферическую единицу в вакууме
//				
//				
//				//--- Округляем в БОЛЬШУЮ сторону до 10 копеек
//				
//				Цена_Розничная=ОМ3_ОтброситьДо10Коп(Цена_Розничная);
//				//--- потом при расчете границ наценки обкорнается в меньшую сторону
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ФРЦ",Новый Структура("ФРЦ,Расшифровка,Цена_Розничная",ФормулаДляРасчетаЦены,РабочийАлгоритм.АлгоритмСсылка,Цена_Розничная));
//				
//				
//				
//				
//			Исключение
//				
//				ТекстОшибки="Ошибка при расчете розничной цены:";
//				ООШ=ОписаниеОшибки();
//				
//				
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);	
//				
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				
//				ВеткаТОварОшФ=ВеткаТОварОш.Строки.Добавить();
//				ВеткаТОварОшФ.Ошибки=ФормулаДляРасчетаЦены; // формула, расчет которой дал ошибку
//				
//				ВеткаТОварОписОш=ВеткаТОварОшФ.Строки.Добавить();
//				ВеткаТОварОписОш.Ошибки=ООШ; // описание ошибки
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки",ФормулаДляРасчетаЦены));
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки",ООШ));
//				
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				
//				ЕстьОшибкиПоГТТ=Истина;
//				
//				Продолжить;								
//			КонецПопытки;
//			
//			Попытка 
//				пРОЦЕНТ_Наценки=Окр(Вычислить(ФормулаДляРасчетаПроцНац),4,РежимОкругления.Окр15как20); // В большую СТОРОНУ!  
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ФРП",Новый Структура("ФРП,пРОЦЕНТ_Наценки",ФормулаДляРасчетаПроцНац,пРОЦЕНТ_Наценки));
//				
//				
//			Исключение
//				
//				ТекстОшибки="Ошибка при расчете процента наценки:";
//				ООШ=ОписаниеОшибки();
//				
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//				
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				
//				ВеткаТОварОшФ=ВеткаТОварОш.Строки.Добавить();
//				ВеткаТОварОшФ.Ошибки=ФормулаДляРасчетаПроцНац; // формула, расчет которой дал ошибку
//				
//				ВеткаТОварОписОш=ВеткаТОварОшФ.Строки.Добавить();
//				ВеткаТОварОписОш.Ошибки=ООШ; // описание ошибки
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки",ФормулаДляРасчетаПроцНац));
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки",ООШ));
//				
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				
//				
//				ЕстьОшибкиПоГТТ = Истина;
//				
//				Продолжить;								
//			КонецПопытки;
//			
//			МинПроцНаценки=Вычислить(РабочийАлгоритм.МинПроцНаценки);
//			
//			МаксПроцНаценки=Вычислить(РабочийАлгоритм.МаксПроцНаценки);
//			
//			//КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ПроцНац",Новый Структура("МинПроцНаценки,МаксПроцНаценки",МинПроцНаценки,МаксПроцНаценки));
//			
//			
//			Если МинПроцНаценки=0 Тогда
//				МинПроцНаценки=Константы.МинимальноДопустимаяНаценка.Получить();
//				
//				Ахтунг_Дангер=""+ТекРегион+"  "+ТОВар.Наименование+" Не удалось вычислить минимальный процент наценки по формуле "+РабочийАлгоритм.МинПроцНаценки+"
//				| принимаем = "+МинПроцНаценки+" %";
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Ахтунг",Новый Структура("Ахтунг_Дангер",Ахтунг_Дангер));		
//				
//			КонецЕсли; 	
//			
//			Если МаксПроцНаценки=0 Тогда
//				МаксПроцНаценки=70;
//				Ахтунг_Дангер=(""+ТекРегион+"  "+ТОВар.Наименование+" Не удалось вычислить максимальный процент наценки по формуле "+РабочийАлгоритм.МаксПроцНаценки+"
//				| принимаем = "+МаксПроцНаценки+" %");
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Ахтунг",Новый Структура("Ахтунг_Дангер",Ахтунг_Дангер));		
//				
//				
//			КонецЕсли; 	
//			
//			// прокомментируем новые границы процента наценки
//			КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ПроцНац",Новый Структура("МинПроцНаценки,МаксПроцНаценки",МинПроцНаценки,МаксПроцНаценки));
//			
//			
//			//==================<зарубим лишнее / добавим если процент наценки вылез за границы максимально-минимального диапазона>===================GtG====20.11.2007
//			
//			Если  пРОЦЕНТ_Наценки>МаксПроцНаценки тогда
//				//Зарубим
//				
//				Ахтунг_Дангер=("Превышение максимального процента наценки! Уменьшаем наценку..."+пРОЦЕНТ_Наценки+">"+МаксПроцНаценки);
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Ахтунг",Новый Структура("Ахтунг_Дангер",Ахтунг_Дангер));
//				
//				ФормулаКорректировкиЦР="ОМ3_ОтброситьДо10Коп(  Цена_Розничная * (100+МаксПроцНаценки) / (100+Окр(пРОЦЕНТ_Наценки,1)) )";// в меньшую сторону
//				 // чем больше бы лпроцент наценки тем меньше будет цена( про копейки)
//				
//				Попытка
//					
//					
//					Цена_Розничная=Вычислить(ФормулаКорректировкиЦР);// в меньшую сторону (актуально для ЖНВЛС)
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ФРЦ",Новый Структура("ФРЦ,Расшифровка,Цена_Розничная",ФормулаКорректировкиЦР,РабочийАлгоритм.АлгоритмСсылка,Цена_Розничная));
//					
//					
//					
//					
//				Исключение
//					ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//					ТекстОшибки="Ошибка при расчете уточненной цены";
//					ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//					ВеткаТОварОш.Ошибки=ТекстОшибки;
//					
//					ВеткаТОварОшФ=ВеткаТОварОш.Строки.Добавить();
//					ВеткаТОварОшФ.Ошибки=ФормулаДляРасчетаЦены; // формула, расчет которой дал ошибку
//					
//					ВеткаТОварОписОш=ВеткаТОварОшФ.Строки.Добавить();
//					ВеткаТОварОписОш.Ошибки=ООШ; // описание ошибки
//					
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки",ФормулаКорректировкиЦР));
//					КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//					
//					
//				КонецПопытки;
//				
//				Попытка
//					//----------------------------< пересчитаем процент наценки по скорректированной Розничной цене >--------------------------------GtG--- 
//					пРОЦЕНТ_Наценки=Окр(Вычислить(ФормулаДляРасчетаПроцНац),3,РежимОкругления.Окр15как20);// пересчет процента наценки по алгоритму
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ФРП",Новый Структура("ФРП,пРОЦЕНТ_Наценки",ФормулаДляРасчетаПроцНац,пРОЦЕНТ_Наценки));
//					
//					
//					
//				Исключение
//					ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//					ТекстОшибки="Ошибка при расчете уточненного процента наценки";
//					ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//					ВеткаТОварОш.Ошибки=ТекстОшибки;
//					
//					ВеткаТОварОшФ=ВеткаТОварОш.Строки.Добавить();
//					ВеткаТОварОшФ.Ошибки=ФормулаДляРасчетаПроцНац; // формула, расчет которой дал ошибку
//					
//					ВеткаТОварОписОш=ВеткаТОварОшФ.Строки.Добавить();
//					ВеткаТОварОписОш.Ошибки=ООШ; // описание ошибки
//					
//					КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//					
//				КонецПопытки;
//				
//			ИначеЕсли пРОЦЕНТ_Наценки<МинПроцНаценки Тогда
//				
//				ЕстьКосякТопа=Ложь;
//				
//				Если ТОвар.Топ100=Ложь ТОгда
//					ПодтягиватьКПроценту= "МинПроцНаценки"; // было  "МаксПроцНаценки";
//				Иначе   // Если заниженный процент по ТОП 100 то это - косяк и товар надо возвращать или пересматривать цену на товар в АП
//					ПодтягиватьКПроценту="МинПроцНаценки";
//					
//					Косяк=ТЗКосяков.Добавить();
//					Косяк.Партия=Стр.Партия;
//					Косяк.ТОвар=Стр.Товар;
//					Косяк.Косяк="ТОП 100! Заниженный процент наценки! Слишком высокая закупка! Вернуть или пересмотреть цену в АП!";
//					
//					ЕстьКосякТопа=Истина;
//				КонецЕсли;
//				
//				
//				//Подтянем
//				Ахтунг_Дангер=("Заниженный процент наценки! Рассчитываем по "+ПодтягиватьКПроценту+" ..."+пРОЦЕНТ_Наценки+"<"+МинПроцНаценки);
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Ахтунг",Новый Структура("Ахтунг_Дангер",Ахтунг_Дангер));
//				
//				ФормулаКорректировкиЦР="ОМ3_ОтброситьДо10Коп(  Цена_Розничная * (100+"+ПодтягиватьКПроценту+") / (100+пРОЦЕНТ_Наценки) )";// в меньшую сторону  топ 100, в большую остальные 
//				
//				Попытка
//					Цена_Розничная=Вычислить(ФормулаКорректировкиЦР);
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ФРЦ",Новый Структура("ФРЦ,Расшифровка,Цена_Розничная",ФормулаКорректировкиЦР,РабочийАлгоритм.АлгоритмСсылка,Цена_Розничная));
//				Исключение
//					ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//					ТекстОшибки="Ошибка при расчете уточненной цены";
//					ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//					ВеткаТОварОш.Ошибки=ТекстОшибки;
//					
//					ВеткаТОварОшФ=ВеткаТОварОш.Строки.Добавить();
//					ВеткаТОварОшФ.Ошибки=ФормулаДляРасчетаЦены; // формула, расчет которой дал ошибку
//					
//					ВеткаТОварОписОш=ВеткаТОварОшФ.Строки.Добавить();
//					ВеткаТОварОписОш.Ошибки=ООШ; // описание ошибки
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ2",Новый Структура("ТекстОшибки",ФормулаКорректировкиЦР));
//					
//					КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//					
//				КонецПопытки;
//				
//				
//				Попытка
//					пРОЦЕНТ_Наценки=Окр(Вычислить(ФормулаДляРасчетаПроцНац),6,режимОкругления.Окр15как20);// пересчет процента наценки по алгоритму
//					
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ФРП",Новый Структура("ФРП,пРОЦЕНТ_Наценки",ФормулаДляРасчетаПроцНац,пРОЦЕНТ_Наценки));
//					
//				Исключение
//					ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//					ТекстОшибки="Ошибка при расчете уточненного процента наценки";
//					ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//					ВеткаТОварОш.Ошибки=ТекстОшибки;
//					
//					ВеткаТОварОшФ=ВеткаТОварОш.Строки.Добавить();
//					ВеткаТОварОшФ.Ошибки=ФормулаДляРасчетаПроцНац; // формула, расчет которой дал ошибку
//					
//					ВеткаТОварОписОш=ВеткаТОварОшФ.Строки.Добавить();
//					ВеткаТОварОписОш.Ошибки=ООШ; // описание ошибки
//					
//					КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				КонецПопытки;
//				
//				
//				Если ЕстьКосякТопа=Истина ТОгда
//					Косяк.ЦенаПоРасценке=Цена_Розничная*ДокЕитК;
//				КонецЕсли; 
//				
//			КонецЕсли;
//			
//			
//			
//			
//			ЦенаЕд=Цена_Розничная; // для комментатора
//			
//			
//			//==================<Реальная несферическая единица не в вакууме>===================GtG====28.11.2007
//			Цена_Розничная=Цена_Розничная*ДокЕитК;
//			
//			//------------------<еще проверочку на превыешние закупочной цены розничной рассчитанной чтобы в минус не ушло>-------------------GtG----21.11.2007
//						
//			
//			Если Цена_Розничная<=Док.ЦенаЗакуп  Тогда   //БезНДС+Док.НДСЗакуп/Док.КоличествоФакт тогда
//				Если ВыводитьНеРасцененные=Истина  Тогда  
//					//==================<Выводим строку НЕ расцененного товара >===================GtG====20.11.2007
//					Цена_Розничная=0;
//					СтрТП=Тп.Добавить();
//					СтрТП.ТОвар=СтрТОвар;
//					СтрТП.Партия=Док.Партия;
//					СтрТП.ЕИТ=Док.Еит;
//					СтрТП.КоэффЕит=ДокЕитК;
//					СтрТП.ЦенаПрБезНДС=Док.Партия.ЦенаПроизводителяБезНДС;
//					СтрТП.ЦенаГосРег=Товар.ЦенаГосРегистрации;
//					СтрТП.ЦенаЗакуп =Док.Партия.ЦенаЗакуп;
//					СтрТП.ЦенаРозн = Цена_Розничная;// рассчитанная
//					СтрТП.НаценкаОтЗакупки =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаЗакуп,Цена_Розничная);
//					СтрТП.НаценкаОтЦГР =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаГосРег,Цена_Розничная);
//					СтрТП.НаценкаОтЗакупБезНДС= ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаЗакуп-ОМ3_НДСИзСуммыПоСтавке(Док.Партия.ЦенаЗакуп,Док.Партия.СтавкаНДС,2),Цена_Розничная);
//					
//					СтрТП.Топ100=Товар.Топ100;
//					СтрТП.Топ1000=ТОвар.Топ1000;
//					
//					СтрТП.НаценкаОтЦПРБНДС=ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаПроизводителяБезНДС,Цена_Розничная);
//					
//					СтрТП.Регион=ТекРегион;
//					СтрТП.НН=НН;
//					
//					СтрТП.ПредыдущаяРознЦена=ПолучитьПрошлуюЦену(Товар.Ссылка,ТекРегион,ТаблицаСтарыхРознЦен);
//					
//				КонецЕсли; 
//				
//				
//				
//				
//				
//				ТекстОшибки="Розничная цена оказалась меньше закупочной!    ("+Товар.Код+")  "+Товар.Наименование+"    Не РАСЦЕНЕН!";
//				
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//				
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				
//				ЕстьОшибкиПоГТТ=Истина;
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//				
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				
//				
//				
//				Косяк=ТЗКосяков.Добавить();
//				Косяк.Партия=Стр.Партия;
//				Косяк.ТОвар=Стр.Товар;
//				Косяк.Косяк="Розничная цена оказалась меньше закупочной! НЕ РАСЦЕНЕН!";
//				Косяк.ЦенаПоРасценке=Цена_Розничная;
//					
//				Продолжить;
//			КонецЕсли;
//			
//			
//			//==================<Не ТОПОВЫЕ позиции наценка от закупки с ндс НЕ МЕНЕЕ 10% полюбому>===================GtG====21.01.2008
//			Если (ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаЗакуп,Цена_Розничная)<МинимальныйПроцентНаценкиКромеТопов)
//				И (Товар.Топ100=Ложь и ТОвар.Топ1000=Ложь)
//				Тогда   //БезНДС+Док.НДСЗакуп/Док.КоличествоФакт тогда
//				Если ВыводитьНеРасцененные=Истина  Тогда  
//					//==================<Выводим строку НЕ расцененного товара >===================GtG====20.11.2007
//					Цена_Розничная=0;
//					СтрТП=Тп.Добавить();
//					СтрТП.ТОвар=СтрТОвар;
//					СтрТП.Партия=Док.Партия;
//					СтрТП.ЕИТ=Док.Еит;
//					СтрТП.КоэффЕит=ДокЕитК;
//					СтрТП.ЦенаПрБезНДС=Док.Партия.ЦенаПроизводителяБезНДС;
//					СтрТП.ЦенаГосРег=Товар.ЦенаГосРегистрации;
//					СтрТП.ЦенаЗакуп =Док.Партия.ЦенаЗакуп;
//					СтрТП.ЦенаРозн = Цена_Розничная;// рассчитанная
//					СтрТП.НаценкаОтЗакупки =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаЗакуп,Цена_Розничная);
//					СтрТП.НаценкаОтЦГР =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаГосРег,Цена_Розничная);
//					СтрТП.НаценкаОтЗакупБезНДС= ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаЗакуп-ОМ3_НДСИзСуммыПоСтавке(Док.Партия.ЦенаЗакуп,Док.Партия.СтавкаНДС,2),Цена_Розничная);
//					
//					СтрТП.Топ100=Товар.Топ100;
//					СтрТП.Топ1000=ТОвар.Топ1000;
//					
//					СтрТП.НаценкаОтЦПРБНДС=ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаПроизводителяБезНДС,Цена_Розничная);
//					
//					СтрТП.Регион=ТекРегион;
//					СтрТП.НН=НН;
//					
//					СтрТП.ПредыдущаяРознЦена=ПолучитьПрошлуюЦену(Товар.Ссылка,ТекРегион,ТаблицаСтарыхРознЦен);
//					
//				КонецЕсли; 
//				
//				ТекстОшибки="НЕ ТОПОВЫЙ товар, наценка от закупки с НДС меньше "+МинимальныйПроцентНаценкиКромеТопов+"% ("+Товар.Код+")  "+Товар+"    Не РАСЦЕНЕН!";
//				
//				ВеткаТОвар=ВеткаОшибокТОвара (ВеткаТОвар,ВеткаТовары,СтрТовар);
//				
//				ВеткаТОварОш=ВеткаТОвар.Строки.Добавить();
//				ВеткаТОварОш.Ошибки=ТекстОшибки;
//				
//				ЕстьОшибкиПоГТТ=Истина;
//				
//				КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//				
//				КоличествоОшибокРАсценки=КоличествоОшибокРАсценки+1;
//				
//				Продолжить;
//			КонецЕсли;
////================================================GtG====КОНЕЦ==21.01.2008
//			
//						
//			//----------------------------< комментарий окончательного результата по товару >--------------------------------GtG--- 
//			КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"Рез",Новый Структура("ЦенаЕд,Цена_Розничная,ДокЕит,ДокЕитК,пРОЦЕНТ_Наценки",ЦенаЕд,Цена_Розничная,ДокЕит,ДокЕитК,пРОЦЕНТ_Наценки));
//			
//			
//			ПредыдущаяРознЦена=ПолучитьПрошлуюЦену(Товар.Ссылка,ТекРегион,ТаблицаСтарыхРознЦен);

//			
//			
//			Если  ТекРегион.ИспользоватьПредыдущуюРозничнуюЦенуПриРасценке=Истина тогда
//				//------------------<Подгоняем новую розничную под старую>-------------------GtG----27.11.2008
//				// Считаем процент наценки по алг расчета процента исходя из старой цены Nold
//				// Считаем процент наценки по алг расчета процента исходя из новой цены  Nnew
//				// если Nold-Nnew >10% тогда  берем цену по расценке (как более правильную)
//				//  <10% берем старую цену , ибо нормально
//				
//								
//				Если 	ТОвар.ЖНВЛС=Ложь 		и 
//					Товар.СВЛС=Ложь 		и 
//					Товар.Топ100=Ложь 		и 
//					Товар.Топ1000=ложь 		и 
//					ОМ6_ЕстьСпецЦена(Товар.Ссылка,Склад,ДатаДок)=ложь и
//					ПредыдущаяРознЦена>0 	и
//					ПредыдущаяРознЦена>Цена_Розничная/ДокЕитК 
//					Тогда
//					
//					ФормулаДляРасчетаПроцНац_от_Nold= СтрЗаменить(ФормулаДляРасчетаПроцНац,"Цена_Розничная","ПредыдущаяРознЦена");
//					ФормулаДляРасчетаПроцНац_от_Nnew= СтрЗаменить(ФормулаДляРасчетаПроцНац,"Цена_Розничная","Цена_Розничная/ДокЕитК");
//					
//					
//					
//					Nold=Окр(Вычислить(ФормулаДляРасчетаПроцНац_от_Nold),4,режимОкругления.Окр15как20);
//					
//					Nnew=Окр(Вычислить(ФормулаДляРасчетаПроцНац_от_Nnew),4,режимОкругления.Окр15как20);
//					
//					ДельтаПроцентовНаценки=Nold-Nnew;
//					
//					// --Новая----------предыд-------------->
//					
//					Если ДельтаПроцентовНаценки<=Константы.МинимальнаяРазницаПроцентовНаценкиПриКоторойПРименятьСтаруюРознЦену.Получить() Тогда //берем старую цену , ибо нормально
//						Цена_Розничная=ПредыдущаяРознЦена*ДокЕитК;
//						КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"РезПред",Новый Структура("ЦенаЕд,Цена_Розничная,ДокЕит,ДокЕитК,пРОЦЕНТ_Наценки",Цена_Розничная/ДокЕитК,Цена_Розничная,ДокЕит,ДокЕитК,Nold));
//					Иначе
//						//берем цену по расценке (как более правильную)
//					КонецЕсли;
//				КонецЕсли;
//				
//			КонецЕсли; // регион использует расценку с подтягиванием предыдущей розничной цены
//			
//			//==================<Проверяем отклонение новой розничной цены от старой, не более чем в 2 раза>===================GtG====28.11.2008
//			Если ПредыдущаяРознЦена>0 Тогда
//				КонтрольноеОтклонение=ПредыдущаяРознЦена/(Цена_Розничная/ДокЕитК);
//				
//				Если КонтрольноеОтклонение<=0.5 или КонтрольноеОтклонение>=2 тогда
//					// это косяк. цена отличается более чем в 2 раза от предыдущей
//					ТекстОшибки="Розничная цена отличается более чем в 2 раза от предыдущей розничной!";
//					КомментаторРасчета  (ТОВар.Ссылка,Таб,Макет,"ОшибкаУ1",Новый Структура("ТекстОшибки",ТекстОшибки));
//					
//					Косяк=ТЗКосяков.Добавить();
//					Косяк.Партия=Стр.Партия;
//					Косяк.ТОвар=Стр.Товар;
//					Косяк.Косяк="Розничная цена отличается более чем в 2 раза от предыдущей розничной!";
//					// попадет в тч ошибок расценки и документ не проведется
//					
//				КонецЕсли;
//			КонецЕсли; 
//			//================================================GtG====КОНЕЦ==28.11.2008
//			
//			
//			
//			///// ========== ЕСЛИ в регионе есть алгоритмы с отрицательным приоритетом, то прогоним еще раз по ним
//			
//			ТЗПРавил.Сортировать("Приоритет Asc");

//			Если ИсходнаяТЗПравил.Получить(0).Приоритет < 0 и 
//				 	ПостОбработкаЦены=Ложь и 
//				 	ОМ6_ЕстьСпецЦена(Товар.Ссылка,Склад,ДатаДок)=истина   тогда
//					
//					ПостОбработкаЦены=Истина;
//					Перейти ~ПостобработкаЦены; // 1 дополнительный проход по товару
//				
//			КонецЕсли;
//			
//			
//			
//			
//			
//			//==================<Выводим строку расцененного товара >===================GtG====20.11.2007
//			СтрТП=Тп.Добавить();
//			СтрТП.ТОвар=СтрТОвар;
//			СтрТП.Партия=Док.Партия;
//			СтрТП.ЕИТ=Док.Еит;
//			СтрТП.КоэффЕит=ДокЕитК;
//			СтрТП.ЦенаПРБезНДС=Док.Партия.ЦенаПроизводителяБезНДС;
//			СтрТП.ЦенаГосРег=Товар.ЦенаГосРегистрации;
//			СтрТП.ЦенаЗакуп =Док.Партия.ЦенаЗакуп;
//			СтрТП.ЦенаРозн = Цена_Розничная;// рассчитанная
//			
//			СтрТП.Регион=ТекРегион;
//			
//			СтрТП.Топ100=Товар.Топ100;
//			СтрТП.Топ1000=ТОвар.Топ1000;
//			
//			СтрТП.НаценкаОтЗакупки =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаЗакуп,Цена_Розничная);
//			СтрТП.НаценкаОтЦГР =ОМ6_НаценкаОтЧегоЛибо (СтрТП.ЦенаГосРег,Цена_Розничная);
//			СтрТП.НаценкаОтЗакупБезНДС= ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаЗакуп-ОМ3_НДСИзСуммыПоСтавке(Док.Партия.ЦенаЗакуп,Док.Партия.СтавкаНДС,2),Цена_Розничная);
//			СтрТП.НаценкаОтЦПРБНДС=ОМ6_НаценкаОтЧегоЛибо (Док.Партия.ЦенаПроизводителяБезНДС,Цена_Розничная);			
//			СтрТП.НН=НН;
//			
//			СтрТП.ПредыдущаяРознЦена=ПредыдущаяРознЦена;
//		КонецЦикла;	// по строкам документа
//		
//		
//		
//		Если ЕстьОшибкиПоГТТ=Ложь тогда
//			ВеткаТОварОш=ВеткаРегион.Строки.Добавить();
//			ВеткаТОварОш.Ошибки="ОК. Ошибок нет";
//		КонецЕсли;
//		
//		
//		Если Цена_Розничная=0 ТОгда
//			Косяк=ТЗКосяков.Добавить();
//			Косяк.Партия=Стр.Партия;
//			Косяк.ТОвар=Стр.Товар;
//			Косяк.Косяк="Товар не расценился.";
//		КонецЕсли;	
//		
//		
//	КонецЦикла; // по Регионам
//	
//	
//	Если АвтоРасценка=Ложь Тогда
//		ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;// обработан последний регион
//	КонецЕсли;
//	
//	ЭлементыФормы .ДеревоОшибок.Значение=ДО;
//	ЭлементыФормы.ДеревоОшибок.СоздатьКолонки();
//	
//	Попытка
//		Таб.ЗакончитьГруппуСтрок();
//	Исключение
//	КонецПопытки;
//	Таб.ТолькоПросмотр=Истина;
//	Таб.ПоказатьУровеньГруппировокСтрок(Таб.КоличествоУровнейГруппировокСтрок()-1);
//	Таб.Показать(); // вывод на экран
//	
//	ЭлементыФормы.Индикатор.Видимость=Ложь;
//	ЭлементыФормы.ТОварИндюк.Видимость=Ложь;
//	
//	ЭлементыФормы.ХодРасценкиРегион.Видимость=Ложь;
//	ЭлементыФормы.ХодРасценкиТОвар.Видимость=Ложь;
//	
//	ЭлементыФормы.ТП.ФиксацияСлева=3;
//	ЭлементыФормы.ТП.Колонки.Топ100.Формат="БЛ=' '; БИ=V";
//	ЭлементыФормы.ТП.Колонки.Топ1000.Формат="БЛ=' '; БИ=V";
//	
//	
//	
//	
//		
//КонецПроцедуры






//ИспользоватьЦеныКонкурентов = ЭтотОбъект.ИспользоватьЦеныКонкурентов;
ДокИзМодуляОбъекта=ЭтотОбъект.Док;
АвтозапускРасценкиИзМодуляОбъекта= ЭтотОбъект.АвтозапускРасценки; 