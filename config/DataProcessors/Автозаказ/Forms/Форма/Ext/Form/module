Перем ТекДата;
Перем ID;
Перем мИнтервалАвтосохранения;
Перем мВремяСледующегоСохранения;
Перем ЦветаТаблицыРезультата;
Перем КоличествоНедостоверныхПозиций;
Перем ПредКоличествоЗаказа;

Функция Лог(Знач пар_1=Неопределено)
	
	Возврат -1;  // Делаем возврат , ибо надо доработать, на случай , если доступа к папке нет
	пл_ТД = ТекущаяДата();
	пл_ИмяФайла = "\\z130\common\Чернов\1C_A5.dbf";
	
	Попытка
		Если пар_1=-1 Тогда
			Возврат -1;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	о_Файл = Новый Файл(пл_ИмяФайла);
	Если НЕ о_Файл.Существует() Тогда
		о_XBase = Новый XBase;
		о_XBase.поля.Добавить("computer", "S", 25);
		о_XBase.поля.Добавить("user"		, "S", 25);
		о_XBase.поля.Добавить("process"	, "S", 200);
		о_XBase.поля.Добавить("d_start"	, "D");
		о_XBase.поля.Добавить("t_start"	, "S", 8);
		о_XBase.поля.Добавить("t_end"		, "S", 8);
		о_XBase.поля.Добавить("work_sec", "N", 4);
		о_XBase.СоздатьФайл(пл_ИмяФайла);
		Если НЕ о_XBase.Открыта() Тогда
			Возврат -1;
		КонецЕсли;
		о_XBase.ЗакрытьФайл();
	КонецЕсли;

	о_XBase = Новый XBase;
	Пока ИСТИНА Цикл
		Попытка
			о_XBase.ОткрытьФайл(пл_ИмяФайла,,Ложь);
			Если о_XBase.Открыта() Тогда
				Прервать;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Состояние("Ожидание разблокировки файла: "+пл_ИмяФайла+" ...");
		Если (ТекущаяДата()-пл_ТД)>5 Тогда
			Возврат -1; // Если пытаемся открыть файл более 5 сек, то прерываем это занятие ...
		КонецЕсли;
	КонецЦикла;
	
	Состояние("");
	о_XBase.Кодировка = КодировкаXBase.ANSI;
	Если ТипЗнч(пар_1)<>ТипЗнч(0) Тогда
		о_XBase.Добавить();
		о_XBase.computer= ИмяКомпьютера();
		о_XBase.user		= ИмяПользователя();
		о_XBase.process	= пар_1;
		
		пл_ТД = ТекущаяДата();
		о_XBase.d_start	= пл_ТД;
		о_XBase.t_start	= Формат(пл_ТД, "ДЛФ=T");
		о_XBase.Записать();
		
		пл_Возврат = о_XBase.НомерЗаписи();
		о_XBase.ЗакрытьФайл();
		Возврат пл_Возврат;
	Иначе
		о_XBase.Перейти(пар_1);
		
		пл_Начало		= о_XBase.t_start;
		пл_Конец 		= Формат(пл_ТД, "ДЛФ=T");;
		о_XBase.t_end = пл_Конец;
		
		пл_Начало = Число(Лев(пл_Начало, 2))*60*60 + Число(Сред(пл_Начало, 4, 2))*60 + Число(Прав(пл_Начало, 2));
		пл_Конец	= Число(Лев(пл_Конец , 2))*60*60 + Число(Сред(пл_Конец , 4, 2))*60 + Число(Прав(пл_Конец , 2));
		
		Если пл_Конец>=пл_Начало Тогда
			о_XBase.work_sec = пл_Конец-пл_Начало;
		Иначе
			о_XBase.work_sec = 24*60*60-пл_Начало+пл_Конец;
		КонецЕсли;
		
		о_XBase.Записать();
		о_XBase.ЗакрытьФайл();
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ОкруглениеВБольшую(число)
	Целое = Цел(число);
	Если Целое = число Тогда
		Возврат число;
	Иначе
		Возврат Целое + 1;
	КонецЕсли;
КонецФункции

Функция СоздатьИЗаполнитьСоответствие()

	
	СоответствиеСкоростей = Новый Соответствие;
	СоответствиеСкоростей.Вставить("V1",0);
	СоответствиеСкоростей.Вставить("V2",0);
	СоответствиеСкоростей.Вставить("V3",0);
	СоответствиеСкоростей.Вставить("V4",0);
	СоответствиеСкоростей.Вставить("K1",0.3);
	СоответствиеСкоростей.Вставить("K2",0.25);
	СоответствиеСкоростей.Вставить("K3",0.2);
	СоответствиеСкоростей.Вставить("K4",0.15);
	
	Возврат СоответствиеСкоростей;
	
КонецФункции

Процедура СоздатьФайлЗаказа(Аптека,ТЗ)
	
	Если ТЧ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	      |	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
	      |	ЗаявкаНаТовар.Дата КАК Дата
	      |ИЗ
	      |	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
	      |ГДЕ
	      |	ЗаявкаНаТовар.Склад = &Склад
	      |	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата УБЫВ,
	      |	НомерЗаявкиАптеки УБЫВ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Аптека);
	Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказОфиса);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
		НовыйНомер = "АЗ-0000001";
	Иначе
		Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) Тогда //Зачем два автозаказа в один день
			Возврат;
		КонецЕсли;
		ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
		НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
		НовыйНомер = Лев("АЗ-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
	КонецЕсли;
	
	ИмяФайла = "dem" + ВыбАптека.Код + "_" + НовыйНомер + "_"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ВремФайл = Константы.КаталогФТП.Получить() + "Out\demtemp.dbf";
	ВыгружаемыйФайл = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".dbf" ;
	ВыгружаемыйАрхив = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".zip" ;
	ДатаЗаказа = ТекущаяДата();
	
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("NDOC","S",20);
	ДБФ.поля.Добавить("DDOC","D",,);
	ДБФ.поля.Добавить("IDGOOD","N",10,0);
	ДБФ.поля.Добавить("QNT","N",10,0);
	ДБФ.поля.Добавить("IDTYPE","N",10,0);
	ДБФ.СоздатьФайл(ВремФайл);
	
	Для Каждого стр из ТЗ ЦИкл
		Если стр.Заказать > 0 Тогда	
			ДБФ.Добавить();
			ДБФ.NDOC=НовыйНомер;
			ДБФ.DDOC=ДатаЗаказа;
			ДБФ.IDGOOD=стр.Код;
			ДБФ.QNT=стр.Заказать;
			ДБФ.IDTYPE= 5;
			ДБФ.Записать();
		КонецЕсли;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	
	ПереместитьФайл(ВремФайл,ВыгружаемыйФайл);
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ВыгружаемыйФайл,ВыгружаемыйАрхив);
	УдалитьФайлы(ВыгружаемыйФайл);
	
КонецПроцедуры


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	
	//Если ПустаяСтрока(Аптека) = Истина Тогда
	//	Предупреждение("Не выбрана аптека!");
	//	Возврат;
	//КонецЕсли;
	//

	//КоличествоДней = ДеньГода(КонПериода) - ДеньГода(НачПериода) + 1;
	//Дата1 = НачалоДня(НачПериода);
	//
	//ТЗ=Новый ТаблицаЗначений();

	//ТЗ.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	//
	//
	//Для к = 1 по КоличествоДней Цикл
	//	стр = ТЗ.Добавить();
	//	стр.Дата = Дата1;
	//	Дата1 = Дата1 + 24*60*60;
	//КонецЦикла;
	//
	//НомерСтроки = 0;
	//КоличествоСтрок = ТЗ.Количество();
	//ТХТ = "ВЫБРАТЬ
	//|	Матрица.Владелец.Товар.ЕдиницаПоУмолчанию.Код как ЕИТ,
	//|	Матрица.Владелец.Товар.Код КАК Код,
	//|	Матрица.Владелец.Товар.Наименование КАК Товар,
	//|";
	//
	////ТХТ = ТХТ + "
	////|_2009_11_01.Остаток как _2009_11_01";
	//
	//Для каждого стр из ТЗ Цикл
	//	НомерСтроки = НомерСтроки + 1;
	//	ТХТ = ТХТ + "
	//	| _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + ".Остаток как _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + ?(КоличествоСтрок = НомерСтроки,"",",") + "";		
	//	
	//КонецЦикла;
	//
	//ТХТ = ТХТ + "
	//|ИЗ
	//|	Справочник.Матрица КАК Матрица
	//|";
	//
	//НомерДня = 0;
	//Для каждого стр из ТЗ Цикл
	//НомерДня = НомерДня + 1;
	//	
	//ТХТ = ТХТ + "	
	//| ЛЕВОЕ СОЕДИНЕНИЕ 
	//| (ВЫБРАТЬ
	//|	
	//|	ПартииЖНВЛСОстатки.Товар.Код как Код,
	//|	Сумма(ПартииЖНВЛСОстатки.КолвоОстаток/ПартииЖНВЛСОстатки.Партия.ЕИТЗакупки.К) КАК Остаток
	//|
	//|
	//|ИЗ
	//|	РегистрНакопления.ПартииЖНВЛС.Остатки(
	//|			&ДатаОстатка" + НомерДня + ",
	//|			Склад = &Аптека
	//|				) КАК ПартииЖНВЛСОстатки
	//|СГРУППИРОВАТЬ ПО
	//|ПартииЖНВЛСОстатки.Товар.Код ) как _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + " ПО Матрица.Код = _" + Формат(стр.Дата,"ДФ=yyyy_MM_dd") + ".Код
	//|";
	//КонецЦикла;
	//ТХТ = ТХТ + "
	//|ГДЕ
	//|	Матрица.Аптека = &Аптека	
	//|";
	//
	//Сообщить(ТХТ);
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("Аптека",Аптека);
	//НомерДня = 0;
	//Для каждого стр из ТЗ Цикл
	//	НомерДня = НомерДня + 1;
	//	Запрос.УстановитьПараметр("ДатаОстатка"+НомерДня,КонецДня(стр.Дата));
	//КонецЦикла;
	//ТЗЗапроса = Запрос.Выполнить().Выгрузить();	
	//ЭлементыФормы.ТЗ.Значение = ТЗЗапроса;
	//ЭлементыФормы.ТЗ.СоздатьКолонки();
	
КонецПроцедуры

Процедура ИзменитьЗначениеВМатрицеЛок(МенеджерЗаписи,ИмяРегистра,МассивИзмерений,МассивИзменений, Знач пар_ДобавлятьПриНеобходимости=Ложь)
	
	//МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МассивИзмерений);
	
	// прочитаем эту запись (внимание, эта команда обязательна, иначе можно ненароком очистить весь регистр!)
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
		// сообщаем, что именно и на какое значение нужно изменить в регистре
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МассивИзменений);
		// записываем изменения в регистре
		Для н=1 по 3 Цикл
			попытка
				МенеджерЗаписи.Записать();
				Прервать;
			Исключение
				ОбщегоНазначения.Задержка(2);
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли пар_ДобавлятьПриНеобходимости Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МассивИзмерений);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МассивИзменений);
		Для н=1 по 3 Цикл
			попытка
				МенеджерЗаписи.Записать();
				Прервать;
			Исключение
				ОбщегоНазначения.Задержка(2);
			КонецПопытки;
		КонецЦикла;
	Иначе // спозиционироваться не удалось, можно выходить
		#Если Клиент Тогда
			Сообщить("Возникла проблема определения аптеки и товара в регистре через менеджер записи ");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция ФильтрацияВсплесков(ТЗ,Скорость,Период,Код,КоличествоДнейПродаж);  //Фильтруем всплески
	
	БылВсплеск = Ложь;
	Если Скорость >= 10 Тогда
		Отклонение = 200;
	ИначеЕсли Скорость >=5 и Скорость <10 Тогда
		Отклонение = 400;
	ИначеЕсли Скорость > 1 и Скорость <5 Тогда
		Отклонение = 500;
	ИначеЕсли Скорость <=1 Тогда
		Отклонение = 800;
	КонецЕсли;
		
		
	Отбор = Новый Структура;
	Отбор.Вставить("Код",Код);
	Отбор.Вставить("Периоды",Период);
	НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
	
	Для каждого стр из НайденныеСтроки Цикл
		Если стр.Продажи > 4 Тогда
			РасчетноеОтклонение = (стр.Продажи - Скорость)*100/Скорость;
			РасчетноеОтклонение = ?(РасчетноеОтклонение < 0,(-1)*РасчетноеОтклонение,РасчетноеОтклонение);
			Если РасчетноеОтклонение > Отклонение Тогда
				 БылВсплеск = Истина;
				 стр.Продажи = стр.Продажи/(1+(РасчетноеОтклонение - Отклонение)/100);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если БылВсплеск = Истина Тогда
		НовыеПродажи = 0;
		Для каждого стр из НайденныеСтроки Цикл
			НовыеПродажи = НовыеПродажи + стр.Продажи;	
		КонецЦикла;
		Скорость = Окр(НовыеПродажи/КоличествоДнейПродаж,3);
	КонецЕсли;
	
	Возврат Скорость;
	
КонецФункции

Функция РасчитатьXYZ(Dx,ТЗ,Код,ДнейПродаж,КоличествоПродаж)
	
	ГруппаXYZ = "";
	Если (ДнейПродаж = 0) или (ДнейПродаж = 1) Тогда
		Возврат ГруппаXYZ;
	КонецЕсли;
	
	СредняяПродажа = КоличествоПродаж/ДнейПродаж;
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("Код",Код);
	НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
	//расчитаем Сумму (Xi-СредняяПродажа)^2
	Сумма = 0;
	Для каждого стр из НайденныеСтроки Цикл
		Если стр.ЕдиницаДляСвертки = 0 Тогда
			Продолжить;
		КонецЕсли;
		Сумма = Сумма + Pow((стр.Продажи - СредняяПродажа),2);
	КонецЦикла;

	Отклонение = Окр(Sqrt(Сумма/(ДнейПродаж-1)),2);
	Dx = Отклонение;
	Если Отклонение > 0 и Отклонение <=0.3 Тогда
	    ГруппаXYZ = "X";
	ИначеЕсли Отклонение > 0.3 и Отклонение <= 1.3 Тогда
	    ГруппаXYZ = "Y";		
	ИначеЕсли Отклонение > 1.3 и Отклонение <=4 Тогда
		ГруппаXYZ = "Z";
	ИначеЕсли Отклонение > 4 Тогда
		ГруппаXYZ = "W";
	КонецЕсли;
	
	Возврат ГруппаXYZ;
		
	
	
КонецФункции

Процедура РасчетABC()
	
	Если НачПериода = ОМ3_ПустаяДата() или КонПериода = ОМ3_ПустаяДата() Тогда
		Предупреждение("Неправильно выбран период");
		Возврат;
	КонецЕсли;
	
	Если ПроцентА = 0 Тогда
		Предупреждение("Не задан процент А");
		Возврат;
	КонецЕсли;
	
	Если ПроцентБ = 0 Тогда
		Предупреждение("Не задан процент В");
		Возврат;
	КонецЕсли;	
	
	АптекиДляРасчета = Новый Массив;
	Для Каждого ЭлементСписка Из СписокАптек Цикл
		Если ЭлементСписка.Пометка Тогда
			АптекиДляРасчета.Добавить(ЭлементСписка.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	
	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.ЛогОбработки;
	ЭлементыФормы.Лог.ДобавитьСтроку("Начало расчета ABC: " + ТекущаяДата());
	
	Автозаказ.РасчетABC(АптекиДляРасчета, Новый Структура("НачПериода, КонПериода, ПроцентА, ПроцентБ", НачПериода, КонПериода, ПроцентА, ПроцентБ));
	
	ЭлементыФормы.Лог.ДобавитьСтроку("Конец расчета ABC: " + ТекущаяДата());

КонецПроцедуры

Процедура РасчетQminQmax(ТЗЗапроса,Аптека)
	
		//Дальше идет расчет Qmin  и Qmax
		
			ТХТ = "ВЫБРАТЬ
			      |	Т.Код,
				  |	Т.ТоварСсылка,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.Цена КАК Цена,
			      |	Т.Периоды как Периоды,
				  | Т.ГруппаXYZ
			      |ПОМЕСТИТЬ ВТ1
			      |ИЗ
			      |	&Таб КАК Т
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Т.Код,
                  | Т.ТоварСсылка.Наименование как Товар,
				  |	Т.ТоварСсылка,
			      |	Матрица.КуМин как МатрицаКуМин,
			      |	Матрица.КуМакс как МатрицаКуМакс,
			      |	Матрица.НЗ как МатрицаНЗ,
			      |	Матрица.ГруппаАПИтог как ГруппаАП,
			      |	Т.Цена,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
				  | Т.ГруппаXYZ,
		      	  |	ВЫБОР КОГДА Т.ТоварСсылка.Поставщик = &ПустойПоставщик
		      	  |			ТОГДА 1
			  	  |		  ИНАЧЕ 0 
			  	  | КОНЕЦ КАК ПустойПоставщик,				  
				  | 0 как КуМинРасчет,
				  | 0 как КуМаксРасчет
			      |ИЗ
			      |	ВТ1 КАК Т
			      |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица как Матрица по Матрица.Аптека = &Аптека и Матрица.Товар = Т.ТоварСсылка
                  |ГДЕ Периоды = 4
			      |;
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ1
			      |";
			
	    //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Таб",ТЗЗапроса);
		Запрос.УстановитьПараметр("ПустойПоставщик",Справочники.Поставщики.ПустаяСсылка());
		ТЗЗапроса = Неопределено ;
		ТЗ = Запрос.Выполнить().Выгрузить();			
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
		КоличествоСтрок = ТЗ.Количество();
		ЭлементыФормы.Инд.МаксимальноеЗначение = КоличествоСтрок ;
		ЭлементыФормы.Инд.Значение = 0;
		ЭлементыФормы.текстПроцесса.Заголовок = "Расчет Qmin и Qmax...";
		
		Для каждого стр из ТЗ Цикл
			ЭлементыФормы.Инд.Значение = ЭлементыФормы.Инд.Значение + 1;
			//Если стр.Периоды < 4 Тогда
			//	Продолжить;
			//КонецЕсли;
			СредняяСкорость = стр.СредняяСкорость;
			Цена = стр.Цена;
			ГруппаАП = стр.ГруппаАП;
			//Получим коэффициенты нормативов
			Если Цена < 30 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 6; p = 5;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 8; p = 5;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 4; p = 5;				
				КонецЕсли;
			ИначеЕсли Цена >= 30 и Цена < 300 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 6; p = 5;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 7; p = 5;				
				КонецЕсли;
			ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 6; p = 5;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 7; p = 5;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 7; p = 5;				
				КонецЕсли;
			ИначеЕсли Цена > 1500 Тогда
				Если СредняяСкорость < 5 Тогда
					s = 4; p = 4;
				ИначеЕсли СредняяСкорость >=5 и СредняяСкорость < 20 Тогда
					s = 5; p = 4;
				ИначеЕсли СредняяСкорость >=20 и СредняяСкорость <= 80 Тогда
					s = 6; p = 4;
				ИначеЕсли СредняяСкорость > 80 Тогда
					s = 6; p = 4;				
				КонецЕсли;
			КонецЕсли;
			
			Если стр.ПустойПоставщик = 0 Тогда
				p = p*КоэффициентПоставщика;
			КонецЕсли;
			
			Если стр.ГруппаXYZ = "X" Тогда
				Kxyz = 0.8;
			ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
				Kxyz = 1;				
			ИначеЕсли стр.ГруппаXYZ = "Z" Тогда
				Kxyz = 1.3;				
			ИначеЕсли стр.ГруппаXYZ = "W" Тогда
				Kxyz = 1.5;								
			Иначе
				Kxyz = 1;
			КонецЕсли;
				
			//Расчет непосредственный 
			Если (СредняяСкорость > МинимальныйПорогСреднейСкорости) и  (СредняяСкорость < ПорогСреднейСкорости) Тогда
				//Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "C" или ГруппаАП = "D" Тогда
					//-------- Группа A -------------------------------------
					Если ГруппаАП = "A" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 3;
								стр.КуМаксРасчет = 6;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 4;
								стр.КуМаксРасчет = 8;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 3;
								стр.КуМаксРасчет = 6;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							КонецЕсли;						
						КонецЕсли;
					
					//-------- Группа B -------------------------------------
					ИначеЕсли ГруппаАП = "B" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 4;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 3;
								стр.КуМаксРасчет = 5;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;						
						КонецЕсли;
					
					
					//-------- Группа C -------------------------------------
					ИначеЕсли ГруппаАП = "C" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;						
						КонецЕсли;
					
                    //------ Группа D ----------------------------------------------
					ИначеЕсли ГруппаАП = "D" Тогда
						Если стр.ГруппаXYZ = "X" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;
						ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 2;
								стр.КуМаксРасчет = 3;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 1;
							КонецЕсли;	
						ИначеЕсли стр.ГруппаXYZ = "Z" или стр.ГруппаXYZ = "W" Тогда
							Если Цена < 30 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 30 и Цена < 300 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							ИначеЕсли Цена > 1500 Тогда
								стр.КуМинРасчет = 1;
								стр.КуМаксРасчет = 2;
							КонецЕсли;						
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;
			ИначеЕсли СредняяСкорость >= ПорогСреднейСкорости Тогда //Если скорость достоверна
				Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "G" Тогда
					стр.КуМинРасчет = СредняяСкорость*(1+(s*Ксз)*Kxyz);
					стр.КуМаксРасчет = СредняяСкорость*(1+(s*Ксз)*Kxyz+((p+КоэффициентУвеличенияПотребности)*Ксз));
					Если стр.КуМинРасчет < 1 Тогда
						стр.КуМинРасчет = ОкруглениеВБольшую(стр.КуМинРасчет);
						стр.КуМаксРасчет = ОкруглениеВБольшую(стр.КуМаксРасчет);
					Иначе
						стр.КуМинРасчет = Окр(стр.КуМинРасчет,0);
						стр.КуМаксРасчет = Окр(стр.КуМаксРасчет,0);
					КонецЕсли;						
				ИначеЕсли ГруппаАП = "C" Тогда
					Если Цена < 30 Тогда
						стр.КуМинРасчет = 2;
						стр.КуМаксРасчет = 3;
					ИначеЕсли Цена >= 30 и Цена < 300 Тогда
						стр.КуМинРасчет = 2;
						стр.КуМаксРасчет = 3;
					ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
						стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 2;
					ИначеЕсли Цена > 1500 Тогда
						стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 1;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СредняяСкорость <= МинимальныйПорогСреднейСкорости Тогда  //было СредняяСкорость > 0 и СредняяСкорость <= МинимальныйПорогСреднейСкорости
				 		стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 1;
			КонецЕсли;
			Если УчитыватьНЗ = Истина Тогда					
				//Корректируем Кумин и Кумакс с учетом незжимаемого запаса аптеки
				Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "C" или ГруппаАП = "D" Тогда
					Если стр.КуМинРасчет <= стр.МатрицаНЗ Тогда
						стр.КуМинРасчет = стр.МатрицаНЗ;
						Если стр.КуМаксРасчет < стр.МатрицаНЗ Тогда
							стр.КуМаксРасчет = стр.МатрицаНЗ;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//Иначе //Если скорость недостоверна
			//	Если ГруппаАП = "A" Тогда
			//		Если Цена < 30 Тогда
			//			стр.КуМинРасчет = 4;
			//			стр.КуМаксРасчет = 8;
			//		ИначеЕсли Цена >= 30 и Цена < 300 Тогда
			//			стр.КуМинРасчет = 3;
			//			стр.КуМаксРасчет = 6;
			//		ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 2;
			//		ИначеЕсли Цена > 1500 Тогда
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 2;
			//		КонецЕсли;
			//	ИначеЕсли  ГруппаАП = "B" или ГруппаАП = "G" Тогда
			//		Если Цена < 30 Тогда
			//			стр.КуМинРасчет = 3;
			//			стр.КуМаксРасчет = 5;
			//		ИначеЕсли Цена >= 30 и Цена < 300 Тогда
			//			стр.КуМинРасчет = 2;
			//			стр.КуМаксРасчет = 3;
			//		ИначеЕсли Цена >= 300 и Цена <= 1500 Тогда					
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 2;
			//		ИначеЕсли Цена > 1500 Тогда
			//			стр.КуМинРасчет = 1;
			//			стр.КуМаксРасчет = 1;
			//		КонецЕсли;				
			//	КонецЕсли;
			//Конецесли;
			
		КонецЦикла;
		
		ЭлементыФормы.Инд.МаксимальноеЗначение = КоличествоСтрок;
		ЭлементыФормы.Инд.Значение = 0;
		ЭлементыФормы.текстПроцесса.Заголовок = "Обновление Qmin и Qmax в базе данных...";
		
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",Аптека);
		
		МассивИзменений = Новый Структура;
		ТекСотрудник = ПараметрыСеанса.ТекущийСотр;
		ДатаИзменения = ТекущаяДата();
		
		Для каждого стр из ТЗ Цикл
			ЭлементыФормы.Инд.Значение = ЭлементыФормы.Инд.Значение + 1;
			
			Если (стр.МатрицаКумин <> стр.КуМинРасчет) или (стр.МатрицаКуМакс <> стр.КуМаксРасчет) Тогда
				//измерения
				МассивИзмерений.Вставить("Товар",стр.ТоварСсылка); 
				//измеНения
				МассивИзменений.Вставить("КуМин",стр.КуМинРасчет); 
				МассивИзменений.Вставить("КуМакс",стр.КуМаксРасчет);
				МассивИзменений.Вставить("КтоВнесВМатрицу",ТекСотрудник);
				МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ДатаИзменения);
				//Записываем изменения
				ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);
			КонецЕсли;
			
		КонецЦикла;	
	
КонецПроцедуры
	
Процедура РасчетАвтозаказа(ТЗЗапроса,Аптека)	
		
	       
			//ТХТ = "ВЫБРАТЬ
			//	  |	Т.Код,
			//	  |	Т.МатрицаКуМин,
			//	  |	Т.МатрицаКуМакс,
			//	  |	Т.СредняяСкорость
			//	  |ПОМЕСТИТЬ ВТ
			//	  |ИЗ
			//	  |	&Таб КАК Т
			//	  |ГДЕ
			//	  |	Т.Периоды = 4
			//	  |;
			//	  |
			//	  |////////////////////////////////////////////////////////////////////////////////
			//	  |ВЫБРАТЬ
			//	  |	Выборка.Код,
			//	  |	Выборка.КуМин,
			//	  |	Выборка.КуМакс,
			//	  |	Выборка.Остаток,
			//	  |	Выборка.СредняяСкорость,
			//	  |	ВЫБОР
			//	  |		КОГДА Выборка.Остаток > Выборка.СредняяСкорость
			//	  |			ТОГДА ВЫРАЗИТЬ(Выборка.КуМакс - (Выборка.Остаток - Выборка.СредняяСкорость) как ЧИСЛО(10,0))
			//	  |		ИНАЧЕ Выборка.КуМакс
			//	  |	КОНЕЦ КАК Заказать
			//	  |ИЗ
			//	  |	(ВЫБРАТЬ
			//	  |		ВТ.Код КАК Код,
			//	  |		ВТ.МатрицаКуМин КАК КуМин,
			//	  |		ВТ.МатрицаКуМакс КАК КуМакс,
			//	  |		ОстатокНаНачало.Остаток КАК Остаток,
			//	  |		ВТ.СредняяСкорость КАК СредняяСкорость
			//	  |	ИЗ
			//	  |		ВТ КАК ВТ
			//	  |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			//	  |				ПартииЖНВЛСОстатки.Товар.Код КАК Код,
			//	  |				СУММА(ПартииЖНВЛСОстатки.КолвоОстаток / ПартииЖНВЛСОстатки.Партия.ЕИТЗакупки.К) КАК Остаток
			//	  |			ИЗ
			//	  |				РегистрНакопления.ПартииЖНВЛС.Остатки(&ДатаОстатка, Склад = &Аптека) КАК ПартииЖНВЛСОстатки
			//	  |			
			//	  |			СГРУППИРОВАТЬ ПО
			//	  |				ПартииЖНВЛСОстатки.Товар.Код) КАК ОстатокНаНачало
			//	  |			ПО (ОстатокНаНачало.Код = ВТ.Код)) КАК Выборка
			//	  |ГДЕ
			//	  |	Выборка.Остаток <= Выборка.КуМин
			//	  |;
			//	  |
			//	  |////////////////////////////////////////////////////////////////////////////////
			//	  |УНИЧТОЖИТЬ ВТ";
			Состояние("Закрытие товаров в пути...");
			ЭлементыФормы.Лог.ДобавитьСтроку("		- Начало закрытия товаров в пути: " + ТекущаяДата());
			ОМ21_ЗаказыПоставщикам.ОМ21_ЗакрытьТоварыВПути(Аптека,ТекущаяДата());
			ЭлементыФормы.Лог.ДобавитьСтроку("		- Конец  закрытия товаров в пути: " + ТекущаяДата());
			Состояние("Расчет количества заказа...");
			
			ТХТ = "ВЫБРАТЬ
			      |	Т.Код,
			      //|	Т.Товар,
				  |	Т.ТоварСсылка,
			      //|	Т.МатрицаКуМин,
			      //|	Т.МатрицаКуМакс,
			      //|	Т.МатрицаНЗ,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.Продажи КАК Продажи,
			      |	Т.ЕдиницаДляСвертки КАК ДнейПродаж,
			      //|	Т.ГруппаАП КАК ГруппаАП,
			      |	Т.Цена КАК Цена,
			      //|	Т.ПризнакРекламнойАкции,
			      //|	Т.СрокДействияРекламнойАкции,
				  |	Т.Активный
			      |ПОМЕСТИТЬ ВТ1
			      |ИЗ
			      |	&Таб КАК Т
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Т.Код,
			      //|	Т.Товар,
				  |	Т.ТоварСсылка,
			      //|	Т.МатрицаКуМин,
			      //|	Т.МатрицаКуМакс,
			      //|	Т.МатрицаНЗ,
			      //|	Т.ГруппаАП,
			      |	Т.Цена,
			      //|	Т.ПризнакРекламнойАкции,
			      //|	Т.СрокДействияРекламнойАкции,
				  |	Т.Активный,
			      |	СУММА(Т.СредняяСкорость) КАК СредняяСкорость,
			      |	СУММА(Т.Продажи) КАК Продажи,
			      |	СУММА(Т.ДнейПродаж) КАК ДнейПродаж
			      |ПОМЕСТИТЬ ВТ
			      |ИЗ
			      |	ВТ1 КАК Т
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Т.Код,
			      //|	Т.Товар,
				  |	Т.ТоварСсылка,
			      //|	Т.ГруппаАП,
			      //|	Т.МатрицаНЗ,
			      //|	Т.МатрицаКуМин,
			      //|	Т.МатрицаКуМакс,
			      |	Т.Цена,
			      //|	Т.ПризнакРекламнойАкции,
			      //|	Т.СрокДействияРекламнойАкции,
				  |	Т.Активный
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Выборка.Код,
			      |	Выборка.ТоварСсылка.Наименование как Товар,
				  |	Выборка.ТоварСсылка,
			      |	Выборка.ГруппаАП,
			      |	Выборка.КуМин,
			      |	Выборка.КуМакс,
			      |	Выборка.НЗ,
			      |	Выборка.Продажи,
			      |	Выборка.Остаток,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток <= Выборка.КуМин
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""  и Выборка.Активный = Истина
			      |			ТОГДА ВЫБОР
			      |					КОГДА Выборка.Остаток > Выборка.СредняяСкорость
			      |						ТОГДА ВЫРАЗИТЬ(Выборка.КуМакс - (Выборка.Остаток - Выборка.СредняяСкорость) КАК ЧИСЛО(10, 0))
			      |					ИНАЧЕ Выборка.КуМакс
			      |				КОНЕЦ
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Заказать,
			      |	Выборка.ДнейПродаж,
			      |	Выборка.СредняяСкорость,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток = 0
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |			ТОГДА 1
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Дефектура,
			      |	Выборка.Цена,
			      |	0 КАК Сумма,
			      |	Выборка.ПризнакРекламнойАкции,
			      |	Выборка.СрокДействияРекламнойАкции,
				  | Выборка.Активный
			      |ПОМЕСТИТЬ ИтоговыйЗаказ
			      |ИЗ
			      |	(ВЫБРАТЬ
			      |		ВТ.Код КАК Код,
			      //|		ВТ.ТоварСсылка.Наименование КАК Товар,
				  |		ВТ.ТоварСсылка КАК ТоварСсылка,
			      |		Матрица.ГруппаАПИтог КАК ГруппаАП,
			      |		ВТ.Продажи КАК Продажи,
			      |		ВТ.ДнейПродаж КАК ДнейПродаж,
			      |		ЕСТЬNULL(Матрица.КуМин,0) КАК КуМин,
			      |		ЕСТЬNULL(Матрица.КуМакс,0) КАК КуМакс,
			      |		ЕСТЬNULL(Матрица.НЗ,0) КАК НЗ,
			      |		ВТ.Цена КАК Цена,
			      |		ЕСТЬNULL(ОстатокНаНачало.Остаток, 0) КАК Остаток,
			      |		ЕСТЬNULL(ВТ.СредняяСкорость, 0) КАК СредняяСкорость,
			      |		Матрица.РекламнаяАкция КАК ПризнакРекламнойАкции,
			      |		Матрица.СрокДействияРекламы КАК СрокДействияРекламнойАкции,
				  |		ВТ.Активный
			      |	ИЗ
			      |		ВТ КАК ВТ
			      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
			      |				ПартииЖНВЛСОстатки.Товар КАК ТоварСсылка,
			      |				СУММА(ПартииЖНВЛСОстатки.КолвоОстаток / ПартииЖНВЛСОстатки.Партия.К) КАК Остаток
			      |			ИЗ
			      |				РегистрНакопления.ПартииЖНВЛС.Остатки(, Склад = &Аптека) КАК ПартииЖНВЛСОстатки
			      |			ГДЕ
			      |				ПартииЖНВЛСОстатки.КолвоОстаток > 0
			      |			
			      |			СГРУППИРОВАТЬ ПО
			      |				ПартииЖНВЛСОстатки.Товар) КАК ОстатокНаНачало
			      |			ПО (ОстатокНаНачало.ТоварСсылка = ВТ.ТоварСсылка)  
				  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица как Матрица по Матрица.Аптека = &Аптека и Матрица.Товар = ВТ.ТоварСсылка
				  |) КАК Выборка
				  |			
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	ИТОГОВЫЙЗАКАЗ.Код,
			      |	ИТОГОВЫЙЗАКАЗ.Товар,
			      |	ИТОГОВЫЙЗАКАЗ.ГруппаАП,
			      |	ИТОГОВЫЙЗАКАЗ.КуМин,
			      |	ИТОГОВЫЙЗАКАЗ.КуМакс,
			      |	ИТОГОВЫЙЗАКАЗ.НЗ,
			      |	ИТОГОВЫЙЗАКАЗ.Продажи,
			      |	ЕСТЬNULL(ТоварыВПути.ВПути, 0) КАК ВПути,
			      |	ИТОГОВЫЙЗАКАЗ.Остаток,
			      |	ВЫБОР
			      |		КОГДА ЕСТЬNULL(ТоварыВПути.ВПути, 0) > 0
			      |			ТОГДА 0
			      |		ИНАЧЕ ИТОГОВЫЙЗАКАЗ.Заказать
			      |	КОНЕЦ КАК Заказать,
			      |	0 КАК Резерв,
			      |	ИТОГОВЫЙЗАКАЗ.ДнейПродаж,
			      |	ИТОГОВЫЙЗАКАЗ.СредняяСкорость,
			      |	ИТОГОВЫЙЗАКАЗ.Дефектура,
			      |	ИТОГОВЫЙЗАКАЗ.Цена,
			      |	ИТОГОВЫЙЗАКАЗ.Сумма,
			      |	ИТОГОВЫЙЗАКАЗ.ПризнакРекламнойАкции,
			      |	ИТОГОВЫЙЗАКАЗ.СрокДействияРекламнойАкции,
				  | ИТОГОВЫЙЗАКАЗ.Активный
			      |ИЗ
			      |	ИтоговыйЗаказ КАК ИТОГОВЫЙЗАКАЗ
			      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			      |			ЗаказПоставщикуОстатки.Товар КАК ТоварСсылка,
			      |			ЗаказПоставщикуОстатки.КоличествоОстаток КАК ВПути
			      |		ИЗ
			      |			РегистрНакопления.ЗаказПоставщику.Остатки(&ДатаОстатка, Склад = &Аптека) КАК ЗаказПоставщикуОстатки) КАК ТоварыВПути
			      |		ПО (ТоварыВПути.ТоварСсылка = ИТОГОВЫЙЗАКАЗ.ТоварСсылка)
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ1
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ИтоговыйЗаказ
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ";
			
	    //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДатаОстатка",ТекущаяДата());
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Таб",ТЗЗапроса);
		ТЗ = Запрос.Выполнить().Выгрузить();	
		
		Если КоэффициентЗаказаA = 1 и КоэффициентЗаказаB = 1 и КоэффициентЗаказаC = 1 и КоэффициентЗаказаD = 1 Тогда
		Иначе
			Для Каждого стр из ТЗ Цикл
				Если стр.ГруппаАП = "A" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаA,0);
				ИначеЕсли стр.ГруппаАП = "B" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаB,0);
				ИначеЕсли стр.ГруппаАП = "C" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаC,0);
				ИначеЕсли стр.ГруппаАП = "D" Тогда
					стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаD,0);					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Если ОграничениеДляНовыхАптек = Истина Тогда
		//	Для каждого стр из ТЗ Цикл
		//		Если стр.Продажи = 0 Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		УдвоенныеПродажи = (стр.Продажи*Поле_Коэфф);  // Исправил 2 на Поле_Коэфф по просьбе Санакоева 02/03/2010
		//		Если (стр.Заказать > УдвоенныеПродажи) и (стр.НЗ < УдвоенныеПродажи) Тогда
		//			стр.Заказать = УдвоенныеПродажи;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
		
		спр_АП = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
		Для каждого стр из ТЗ Цикл
			
		
			Если ОграничениеДляНовыхАптек = Истина Тогда
				Если стр.Продажи <> 0 Тогда
					УдвоенныеПродажи = (стр.Продажи*Поле_Коэфф);  // Исправил 2 на Поле_Коэфф по просьбе Санакоева 02/03/2010
					Если (стр.Заказать > УдвоенныеПродажи) и (стр.НЗ < УдвоенныеПродажи) Тогда
						стр.Заказать = УдвоенныеПродажи;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			Если Флаг_УчестьРеквизитМинимальныйЗаказ Тогда
				Попытка
					Если (стр.Заказать>0) Тогда
						// Если есть заказ
						пер_МЗ = спр_АП.НайтиПоКоду(стр.Код).МинимальныйЗаказ;
						Если стр.Заказать<пер_МЗ Тогда
							// Если Заказ>0 но меньше минимального заказа
							стр.Заказать = пер_МЗ;
						Иначе
							Если УчитыватьКратностьЗаказа = Истина Тогда
								Если пер_МЗ > 0 Тогда
									стр.Заказать = Окр(стр.Заказать/пер_МЗ,0)*пер_МЗ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					Сообщить("Это сообщение только для ИТ! Ничего страшного :) "+ОписаниеОшибки());
					Прервать;
				КонецПопытки;
			КонецЕсли;
			
			Если ПрименятьКоэффПоНЗ = Истина Тогда
				Если стр.Заказать > 0 и стр.НЗ > 0 Тогда
					КоличествоСНЗ = Окр(стр.НЗ/КоэффПоНЗ,0);
					КоличествоСНЗ = ?(КоличествоСНЗ=0,1,КоличествоСНЗ);
					стр.Заказать = Макс(стр.Заказать,КоличествоСНЗ);	
				КонецЕсли;
			КонецЕсли;
			
			стр.Сумма = стр.Заказать*стр.Цена;
			
		КонецЦикла;
		
		//СоздатьФайлЗаказа(Аптека,ТЗРез);
		//ЭлементыФормы.ТЗ.Значение = ТЗРез;
		//ТЗ.Колонки["Код"].Ширина = 10;
		//ТЗ.Колонки["Товар"].Ширина = 100;
		//ТЗ.Колонки["ГруппаАП"].Ширина = 5;
		//ТЗ.Колонки["КуМин"].Ширина = 10;
		//ТЗ.Колонки["КуМакс"].Ширина = 10;
		//ТЗ.Колонки["Продажи"].Ширина = 10;
		//ТЗ.Колонки["ВПути"].Ширина = 10;
		//ТЗ.Колонки["Остаток"].Ширина = 10;		
		//ТЗ.Колонки["Заказать"].Ширина = 10;
		//ТЗ.Колонки["Резерв"].Ширина = 10;
		//ТЗ.Колонки["ДнейПродаж"].Ширина = 10;		
		//ТЗ.Колонки["СредняяСкорость"].Ширина = 10;		
		//ТЗ.Колонки["НЗ"].Ширина = 10;
		//ТЗ.Колонки["Цена"].Ширина = 10;
		//ТЗ.Колонки["Дефектура"].Ширина = 10;		
		//ТЗ.Колонки["Сумма"].Ширина = 10;
		//
		//ЭлементыФормы.ТЗ.СоздатьКолонки();
		//ЭлементыФормы.ТЗ.Колонки["Сумма"].ОтображатьИтогиВПодвале = Истина;
		
		ВыбАптека = Аптека;
		
		
		Если РассчитыватьДефектуру = Истина Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Остаток",0);
			Строки = ТЗ.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				ТЗДефектуры = Новый ТаблицаЗначений;
				ТЗДефектуры.Колонки.Добавить("ГруппаABC");
				ТЗДефектуры.Колонки.Добавить("ДефектураПозиций");
				ТЗДефектуры.Колонки.Добавить("ДефектураРуб");
				
				Для каждого стр из Строки Цикл
					ТекСтрока = ТЗДефектуры.Добавить();
					ТекСтрока.ГруппаABC = стр.ГруппаАП;
					ТекСтрока.ДефектураПозиций = 1;
					ТекСтрока.ДефектураРуб = Окр((28-стр.ДнейПродаж)*стр.СредняяСкорость*стр.Цена,2);
				КонецЦикла;
				
				ТЗДефектуры.Свернуть("ГруппаABC","ДефектураПозиций,ДефектураРуб");
				ТЗДефектуры.Сортировать("ГруппаABC");
				
				ТабДок = Новый ТабличныйДокумент;
				Макет = ПолучитьМакет("Дефектура");
				ОбластьТитул = Макет.ПолучитьОбласть("Титул");
				ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				
				ОбластьТитул.Параметры.Аптека = ВыбАптека;
				ТабДок.Вывести(ОбластьТитул);
				ТабДок.Вывести(ОбластьШапки);
				
				Для каждого стр из ТЗДефектуры Цикл
					ОбластьСтрока.Параметры.ГруппаABC = стр.ГруппаABC;
					ОбластьСтрока.Параметры.ДефектураПозиций = стр.ДефектураПозиций;
					ОбластьСтрока.Параметры.ДефектураРуб = стр.ДефектураРуб;
					ТабДок.Вывести(ОбластьСтрока);
				КонецЦикла;
				ТабДок.ТолькоПросмотр = Истина;
				ТабДок.ОтображатьСетку = Ложь;
				ТабДок.Показать();				
				
			КонецЕсли;
		КонецЕсли;
		ЭлементыФормы.Лог.ДобавитьСтроку("		- Конец расчета автозаказа: " + ТекущаяДата());
	
КонецПроцедуры
	
	
Процедура РасчетАвтозаказаПоРекламнымАкциям()
	
	
	//ТХТнеправильный  = "ВЫБРАТЬ
	//	  |	ВЫборка.Склад КАК Склад,
	//	  |	ВЫборка.Товар.Код КАК Код,
	//	  |	ВЫборка.Товар,
	//	  |	ВЫборка.КолвоОстаток,
	//	  |	ВЫборка.НЗ,
	//	  |	ВЫборка.МинЗак,
	//	  |	ВЫборка.Заказать
	//	  |ИЗ
	//	  |	(ВЫБРАТЬ
	//	  |		ПартииЖНВЛСОстатки.Склад КАК Склад,
	//	  |		ПартииЖНВЛСОстатки.Товар КАК Товар,
	//	  |		ПартииЖНВЛСОстатки.КолвоОстаток КАК КолвоОстаток,
	//	  |		Матрица.НЗ КАК НЗ,
	//	  |		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
	//	  |		ВЫБОР
	//	  |			КОГДА ПартииЖНВЛСОстатки.КолвоОстаток < Матрица.НЗ
	//	  |				ТОГДА ВЫБОР
	//	  |						КОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ > 0
	//	  |							ТОГДА ВЫБОР
	//	  |									КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//	  |										ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//	  |									ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток
	//	  |								КОНЕЦ
	//	  |						ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.КолвоОстаток
	//	  |					КОНЕЦ
	//	  |			ИНАЧЕ 0
	//	  |		КОНЕЦ КАК Заказать
	//	  |	ИЗ
	//	  |		РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК ПартииЖНВЛСОстатки
	//	  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Матрица КАК Матрица
	//	  |			ПО ПартииЖНВЛСОстатки.Склад = Матрица.Аптека
	//	  |				И ПартииЖНВЛСОстатки.Товар = Матрица.Владелец.Товар
	//	  |				И (Матрица.РекламнаяАкция = ИСТИНА)
	//	  |				И (Матрица.НЗ > 0)
	//	  |	ГДЕ
	//	  |		ПартииЖНВЛСОстатки.КолвоОстаток > 0) КАК ВЫборка
	//	  |ГДЕ
	//	  |	ВЫборка.Заказать > 0
	//	  |
	//	  |УПОРЯДОЧИТЬ ПО
	//	  |	Склад,
	//	  |	ВЫборка.Товар.Наименование";
	
	//Построитель.Текст = "ВЫБРАТЬ
	//					|	ТЗПродаж.Склад,
	//					|	ТЗПродаж.Товар,
	//					|	ВЫРАЗИТЬ(ТЗПродаж.КоличествоРасход / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж КАК ЧИСЛО(12, 0)) КАК КоличествоРасход	                    
	//					|ПОМЕСТИТЬ ВыборкаПродаж
	//					|ИЗ
	//					|	(ВЫБРАТЬ
	//					|		СУММА(ПартииЖНВЛСОбороты.КолвоРасход / ПартииЖНВЛСОбороты.Партия.ЕИТЗакупки.К) КАК КоличествоРасход,
	//					|		ПартииЖНВЛСОбороты.Товар КАК Товар,
	//					|		ПартииЖНВЛСОбороты.Склад КАК Склад
	//					|	ИЗ
	//					|		РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Склад В (&СписокСкладов) {(Товар).*}) КАК ПартииЖНВЛСОбороты
	//					|	ГДЕ
	//					|		ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	//					|	
	//					|	СГРУППИРОВАТЬ ПО
	//					|		ПартииЖНВЛСОбороты.Товар,
	//					|		ПартииЖНВЛСОбороты.Склад) КАК ТЗПродаж
	//					|ИНДЕКСИРОВАТЬ ПО ТЗПродаж.Склад,ТЗПродаж.Товар 
	//					|;
	//					|
	//					|////////////////////////////////////////////////////////////////////////////////
	//					|ВЫБРАТЬ
	//					|	ВЫборка.Склад КАК Склад,
	//					|	ВЫборка.Товар.Код КАК Код,
	//					|	ВЫборка.Товар,
	//					|	ВЫборка.КолвоОстаток,
	//					|	ВЫборка.НЗ,
	//					|	ВЫборка.МинЗак,
	//					|	ВЫборка.Заказать,
	//					|	ВЫборка.КоличествоРасход КАК Продажи
	//					|ИЗ
	//					|	(ВЫБРАТЬ
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|				ТОГДА Матрица.Аптека
	//					|			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
	//					|		КОНЕЦ КАК Склад,
	//					|		ВЫБОР
	//					|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|				ТОГДА Матрица.Владелец.Товар
	//					|			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
	//					|		КОНЕЦ КАК Товар,
	//					|		ПартииЖНВЛСОстатки.колвоостаток КАК КолвоОстаток,
	//					|		Матрица.НЗ КАК НЗ,
	//					|		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
	//					|		ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) КАК КоличествоРасход,
	//					|		ВЫБОР
	//					|			КОГДА ВыборкаПродаж.КоличествоРасход <= Матрица.НЗ
	//					|					ИЛИ ВыборкаПродаж.КоличествоРасход ЕСТЬ NULL 
	//					|				ТОГДА ВЫБОР
	//					|						КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|							ТОГДА Матрица.НЗ
	//					|						ИНАЧЕ ВЫБОР
	//					|								КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < Матрица.НЗ
	//					|									ТОГДА ВЫБОР
	//					|											КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	//					|												ТОГДА ВЫБОР
	//					|														КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|															ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|														ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток
	//					|													КОНЕЦ
	//					|											ИНАЧЕ Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	//					|										КОНЕЦ
	//					|								ИНАЧЕ 0
	//					|							КОНЕЦ
	//					|					КОНЕЦ
	//					|			ИНАЧЕ ВЫБОР
	//					|					КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	//					|						ТОГДА ВыборкаПродаж.КоличествоРасход
	//					|					ИНАЧЕ ВЫБОР
	//					|							КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < ВыборкаПродаж.КоличествоРасход
	//					|								ТОГДА ВЫБОР
	//					|										КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
	//					|											ТОГДА ВЫБОР
	//					|													КОГДА ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|														ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
	//					|													ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток
	//					|												КОНЕЦ
	//					|										ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	//					|									КОНЕЦ
	//					|							ИНАЧЕ 0
	//					|						КОНЕЦ
	//					|				КОНЕЦ
	//					|		КОНЕЦ КАК Заказать
	//					|	ИЗ
	//					|		РегистрСведений.Матрица КАК Матрица
	//					|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//					|				Остатки.Склад КАК Склад,
	//					|				Остатки.Товар КАК Товар,
	//					|				СУММА(ВЫРАЗИТЬ(Остатки.КолвоОстаток / Остатки.Партия.ЕИТЗакупки.К как Число(12,0))) КАК колвоостаток
	//					|			ИЗ
	//					|				РегистрНакопления.ПартииЖНВЛС.Остатки(&Дата, склад В (&СписокСкладов) {(Товар).*}) КАК Остатки
	//					|			ГДЕ
	//					|				Остатки.КолвоОстаток > 0
	//					|			
	//					|			СГРУППИРОВАТЬ ПО
	//					|				Остатки.Товар,
	//					|				Остатки.Склад) КАК ПартииЖНВЛСОстатки
	//					|			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
	//					|				И (ПартииЖНВЛСОстатки.Товар = Матрица.Товар)
	//					//|				И (ПартииЖНВЛСОстатки.колвоостаток > 0)
	//					|			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПродаж КАК ВыборкаПродаж
	//					|			ПО Матрица.Аптека = ВыборкаПродаж.Склад
	//					|				И Матрица.Товар = ВыборкаПродаж.Товар
	//					|	ГДЕ
	//					|		Матрица.РекламнаяАкция = ИСТИНА
	//					|		И Матрица.НЗ > 0
	//					|		И Матрица.Аптека В(&СписокСкладов)
	//					|	{ГДЕ
	//					|		Матрица.Товар.* КАК Товар}) КАК ВЫборка
	//					|ГДЕ
	//					|	ВЫборка.Заказать > 0
	//					|
	//					|УПОРЯДОЧИТЬ ПО
	//					|	Склад,
	//					|	ВЫборка.Товар.Наименование
	//					|;
	//					|
	//					|////////////////////////////////////////////////////////////////////////////////
	//					|УНИЧТОЖИТЬ ВыборкаПродаж";						

						
						
						
						
						
	Построитель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ВЫРАЗИТЬ(ТЗПродаж.КоличествоРасход / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж КАК ЧИСЛО(12, 0)) КАК КоличествоРасход,
	                    |	ТЗПродаж.Товар,
	                    |	ТЗПродаж.Склад
	                    |ПОМЕСТИТЬ ВыборкаПродаж
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		СУММА(ПартииЖНВЛСОбороты.КолвоРасход / ПартииЖНВЛСОбороты.Партия.К) КАК КоличествоРасход,
	                    |		ПартииЖНВЛСОбороты.Товар КАК Товар,
	                    |		ПартииЖНВЛСОбороты.Склад КАК Склад
	                    |	ИЗ
	                    |		РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Склад В (&СписокСкладов) {(Товар).*}) КАК ПартииЖНВЛСОбороты
	                    |	ГДЕ
	                    |		ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
	                    |	
	                    |	СГРУППИРОВАТЬ ПО
	                    |		ПартииЖНВЛСОбороты.Товар,
	                    |		ПартииЖНВЛСОбороты.Склад) КАК ТЗПродаж
	                    |
	                    |ИНДЕКСИРОВАТЬ ПО
	                    |	ТЗПродаж.Склад,
	                    |	ТЗПродаж.Товар
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	Выборка.Аптека,
	                    |	Выборка.Товар,
	                    |	ВЫБОР
	                    |		КОГДА СУММА(Выборка.НЗ_2) > 0
	                    |			ТОГДА СУММА(Выборка.НЗ_2)
	                    |		ИНАЧЕ СУММА(Выборка.НЗ_1)
	                    |	КОНЕЦ КАК НЗ
	                    |ПОМЕСТИТЬ ВыборкаМатрица
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		МатрицаНЗ.Аптека КАК Аптека,
	                    |		МатрицаНЗ.Товар КАК Товар,
	                    |		МатрицаНЗ.НЗ КАК НЗ_1,
	                    |		0 КАК НЗ_2
	                    |	ИЗ
	                    |		РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
	                    |	ГДЕ
	                    |		МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1)
	                    |		И МатрицаНЗ.РекламнаяАкция = ИСТИНА
	                    |		И МатрицаНЗ.НЗ > 0
	                    |		И МатрицаНЗ.Аптека В(&СписокСкладов)
	                    |		И &ТекущаяДата МЕЖДУ МатрицаНЗ.ДатаНачалаАкции И МатрицаНЗ.СрокДействияРекламы
	                    |	{ГДЕ
	                    |		МатрицаНЗ.Товар.* КАК Товар}
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ
	                    |		МатрицаНЗ.Аптека,
	                    |		МатрицаНЗ.Товар,
	                    |		0,
	                    |		МатрицаНЗ.НЗ
	                    |	ИЗ
	                    |		РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
	                    |	ГДЕ
	                    |		МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2)
	                    |		И МатрицаНЗ.РекламнаяАкция = ИСТИНА
	                    |		И МатрицаНЗ.НЗ > 0
	                    |		И МатрицаНЗ.Аптека В(&СписокСкладов)
						|		И &ТекущаяДата МЕЖДУ МатрицаНЗ.ДатаНачалаАкции И МатрицаНЗ.СрокДействияРекламы
	                    |	{ГДЕ
	                    |		МатрицаНЗ.Товар.* КАК Товар}) КАК Выборка
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Выборка.Аптека,
	                    |	Выборка.Товар
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Выборка.Склад КАК Склад,
	                    |	Выборка.Товар.Код КАК Код,
	                    |	Выборка.Товар,
	                    |	Выборка.КолвоОстаток,
	                    |	Выборка.НЗ,
	                    |	Выборка.МинЗак,
	                    |	Выборка.ЗаказатьРасчетное,
	                    |	0 КАК Заказать,
	                    |	Выборка.КоличествоРасход КАК Продажи
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		ВЫБОР
	                    |			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	                    |				ТОГДА Матрица.Аптека
	                    |			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
	                    |		КОНЕЦ КАК Склад,
	                    |		ВЫБОР
	                    |			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
	                    |				ТОГДА Матрица.Товар
	                    |			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
	                    |		КОНЕЦ КАК Товар,
	                    |		ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) КАК КолвоОстаток,
	                    |		Матрица.НЗ КАК НЗ,
	                    |		Матрица.Товар.МинимальныйЗаказ КАК МинЗак,
	                    |		ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) КАК КоличествоРасход,
	                    |		ВЫБОР
	                    |			КОГДА ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) = 0
	                    |					И ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < Матрица.НЗ
	                    |				ТОГДА Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	                    |			ИНАЧЕ ВЫБОР
	                    |					КОГДА ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж < Матрица.НЗ
	                    |						ТОГДА Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	                    |					ИНАЧЕ ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
	                    |				КОНЕЦ
	                    |		КОНЕЦ КАК ЗаказатьРасчетное
	                    |	ИЗ
	                    |		ВыборкаМатрица КАК Матрица
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                    |				Остатки.Склад КАК Склад,
	                    |				Остатки.Товар КАК Товар,
	                    |				СУММА(ВЫРАЗИТЬ(Остатки.КолвоОстаток / Остатки.Партия.К КАК ЧИСЛО(12, 0))) КАК колвоостаток
	                    |			ИЗ
	                    |				РегистрНакопления.ПартииЖНВЛС.Остатки(, склад В (&СписокСкладов) {(Товар).*}) КАК Остатки
	                    |			ГДЕ
	                    |				Остатки.КолвоОстаток > 0
	                    |			
	                    |			СГРУППИРОВАТЬ ПО
	                    |				Остатки.Товар,
	                    |				Остатки.Склад) КАК ПартииЖНВЛСОстатки
	                    |			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
	                    |				И (ПартииЖНВЛСОстатки.Товар = Матрица.Товар)
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПродаж КАК ВыборкаПродаж
	                    |			ПО Матрица.Аптека = ВыборкаПродаж.Склад
	                    |				И Матрица.Товар = ВыборкаПродаж.Товар) КАК Выборка
	                    |ГДЕ
	                    |	Выборка.ЗаказатьРасчетное > 0
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Склад,
	                    |	Выборка.Товар.Наименование
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ ВыборкаПродаж
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ ВыборкаМатрица";						
						
						
						
						
						
						
						
						
						
		СписокСкладов = Новый СписокЗначений;  
		Для каждого стр из СписокАптек Цикл
			Если (стр.Пометка = Истина) Тогда
				Если УчитыватьТолькоНезакрепленныеЗаСотрудникомАптеки = Истина Тогда
					Если НЕ стр.Значение.Менеджер.Пустая() Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				СписокСкладов.Добавить(стр.Значение);
			КонецЕсли;				
		КонецЦикла;
	Построитель.Параметры.Вставить("СписокСкладов",СписокСкладов);	
	Построитель.Параметры.Вставить("Дата",ТекущаяДата());
	Построитель.Параметры.Вставить("ТекущаяДата",ТекущаяДата());
	Построитель.Параметры.Вставить("КоличествоДнейПродаж",КоличествоДнейПродаж);
	Построитель.Параметры.Вставить("КоэффициентСкоростиПродаж",КоэффициентСреднейСкоростиПродаж);
	Построитель.Параметры.Вставить("НачПериода",НачалоДня(ТекущаяДата())-КоличествоДнейПродаж*24*60*60);
	Построитель.Параметры.Вставить("КонПериода",НачалоДня(ТекущаяДата())-1);
	//Сообщить(Строка(НачалоДня(ТекущаяДата())-КоличествоДнейПродаж*24*60*60));
	//Сообщить(НачалоДня(ТекущаяДата())-1);
	Сообщить("начало выполнения запроса" + ТекущаяДата());
	Построитель.Выполнить();
	
	Результат = Построитель.Результат;
	ТЗРез = Результат.Выгрузить();
	Сообщить("конец выполнения запроса" + ТекущаяДата());
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("СписокСкладов",СписокСкладов);
	//Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	//ТЗРез = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.ТЗПромежуточная.Значение = ТЗРез;
	ЭлементыФормы.ТЗПромежуточная.СоздатьКолонки();
	
	Если ТЗРез.Количество() = 0 Тогда
		Предупреждение("Данных для выгрузки нет!");
		Возврат;
	КонецЕсли;
	
	Для каждого стр из ТЗРез ЦИкл
//		Попытка
			стр.Заказать = Макс(стр.ЗаказатьРасчетное,стр.МинЗак,Окр(стр.Продажи/28*КоличествоДнейПотребности,0));	
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			Сообщить("."+ стр.ЗаказатьРасчетное + ".");
//			Сообщить("."+ стр.МинЗак + ".");
//			Сообщить("."+ Окр(стр.Продажи/28*КоличествоДнейПотребности,0) + ".");
//		КонецПопытки;
	КонецЦикла;
	
	
	Если АвтоматическиВыгружатьАвтозаказ = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//Возврат;
	
	ТЗРез.Индексы.Добавить("Склад");
	
	Для каждого стр из СписокАптек Цикл
		Если стр.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("Склад",стр.Значение);	
		НайденныйСтроки = ТЗРез.НайтиСтроки(Отбор);
		Если НайденныйСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
		|	ЗаявкаНаТовар.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
		|ГДЕ
		|	ЗаявкаНаТовар.Склад = &Склад
		|	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки
		|	И ЗаявкаНаТовар.НомерЗаявкиАптеки ПОДОБНО ""АР-%""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	НомерЗаявкиАптеки УБЫВ";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Склад",стр.Значение);
		Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказПоРекламе);
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
			НовыйНомер = "АР-0000001";
		Иначе
			//Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) Тогда //Зачем два автозаказа в один день
			//	Возврат;
			//КонецЕсли;
			ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
			НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
			НовыйНомер = Лев("АР-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
		КонецЕсли;
		
		ИмяФайла = "dem" + стр.Значение.Код + "_" + НовыйНомер + "_"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		ВремФайл = Константы.КаталогФТП.Получить() + "Out\demrekl.dbf";
		ВыгружаемыйФайл = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".dbf" ;
		ВыгружаемыйАрхив = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".zip" ;
		ДатаЗаказа = ТекущаяДата();
		
		ДБФ = Новый XBASE;
		ДБФ.поля.Добавить("NDOC","S",20);
		ДБФ.поля.Добавить("DDOC","D",,);
		ДБФ.поля.Добавить("IDGOOD","N",10,0);
		ДБФ.поля.Добавить("QNT","N",10,0);
		ДБФ.поля.Добавить("IDTYPE","N",10,0);
		ДБФ.СоздатьФайл(ВремФайл);
		
		Для Каждого ТекСтр из НайденныйСтроки ЦИкл
			Если ТекСтр.Заказать > 0 Тогда	
				ДБФ.Добавить();
				ДБФ.NDOC=НовыйНомер;
				ДБФ.DDOC=ДатаЗаказа;
				ДБФ.IDGOOD=ТекСтр.Товар.Код;
				ДБФ.QNT=ТекСтр.Заказать;
				ДБФ.IDTYPE= 6;
				ДБФ.Записать();
			КонецЕсли;
		КонецЦикла;
		ДБФ.ЗакрытьФайл();
		
		ПереместитьФайл(ВремФайл,ВыгружаемыйФайл);
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ВыгружаемыйФайл,ВыгружаемыйАрхив);
		УдалитьФайлы(ВыгружаемыйФайл);
	КонецЦикла;
	
	
	
	
	
	
КонецПроцедуры

//----------------------------------- Начало функций и процедур общего модуля ------------------------------
Функция СоздатьИЗаполнитьСоответствиеСкоростейЛок()

	
	//СоответствиеСкоростей = Новый Соответствие;
	//СоответствиеСкоростей.Вставить("V1",0);
	//СоответствиеСкоростей.Вставить("V2",0);
	//СоответствиеСкоростей.Вставить("V3",0);
	//СоответствиеСкоростей.Вставить("V4",0);
	//СоответствиеСкоростей.Вставить("K1",0.5);
	//СоответствиеСкоростей.Вставить("K2",0.3);
	//СоответствиеСкоростей.Вставить("K3",0.15);
	//СоответствиеСкоростей.Вставить("K4",0.05);
	
	СоответствиеСкоростей = Новый Соответствие;
	СоответствиеСкоростей.Вставить("V1",0);
	СоответствиеСкоростей.Вставить("V2",0);
	СоответствиеСкоростей.Вставить("V3",0);
	СоответствиеСкоростей.Вставить("V4",0);
	СоответствиеСкоростей.Вставить("K1",0.3);
	СоответствиеСкоростей.Вставить("K2",0.25);
	СоответствиеСкоростей.Вставить("K3",0.2);
	СоответствиеСкоростей.Вставить("K4",0.15);	
	
	Возврат СоответствиеСкоростей;
	
КонецФункции

Процедура РасчетABCЛок(СписокАптек = Неопределено, ПараметрыРасчета = Неопределено) 
	
	Если ПараметрыРасчета = Неопределено Тогда
		НачПериода = НачалоДня(ТекущаяДата() - 45 * 86400);
		КонПериода = КонецДня(ТекущаяДата());
		ПроцентА = 70;
		ПроцентБ = 20;
	Иначе
		НачПериода = ПараметрыРасчета.НачПериода;
		КонПериода = ПараметрыРасчета.КонПериода;
		ПроцентА = ПараметрыРасчета.ПроцентА;
		ПроцентБ = ПараметрыРасчета.ПроцентБ;
	КонецЕсли;	
	
	
	
	Для Каждого Аптека Из СписокАптек Цикл
		
		
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МатрицаАптеки.ГруппаАПВМатрице КАК ГруппаАПВМатрице,
		|	МатрицаАптеки.АПаптеки,
		|	МатрицаАптеки.АПТовар,
		|	ЕСТЬNULL(Продажи.Товар.Наименование, МатрицаАптеки.АПТовар.Наименование) КАК Товар,
		|	ВЫБОР
		|		КОГДА Продажи.Товар.Наименование ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА МатрицаАптеки.ГруппаАПВМатрице ПОДОБНО ""[ABCD]""
		|						ТОГДА ""D""
		|					КОГДА МатрицаАптеки.ГруппаАПВМатрице ПОДОБНО ""[ISXF]""
		|						ТОГДА МатрицаАптеки.ГруппаАПВМатрице
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА МатрицаАптеки.ГруппаАПВМатрице ПОДОБНО ""[ISXF]""
		|					ТОГДА МатрицаАптеки.ГруппаАПВМатрице
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ГруппаИтог,
		|	Продажи.Количество,
		|	Продажи.СуммаВыручка,
		|	Продажи.СуммаВаловая
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияККМТовар.Товар КАК Товар,
		|		СУММА(РеализацияККМТовар.Количество * РеализацияККМТовар.К / РеализацияККМТовар.Товар.ЕдиницаПоУмолчанию.К) КАК Количество,
		|		СУММА(РеализацияККМТовар.Сумма) КАК СуммаВыручка,
		|		СУММА(РеализацияККМТовар.Сумма - РеализацияККМТовар.СуммаЗакуп) КАК СуммаВаловая
		|	ИЗ
		|		Документ.РеализацияККМ.Товар КАК РеализацияККМТовар
		|	ГДЕ
		|		РеализацияККМТовар.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|		И РеализацияККМТовар.Ссылка.Склад = &Аптека
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияККМТовар.Товар) КАК Продажи
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			1 КАК АПаптеки,
		|			Выборка.Товар КАК АПТовар,
		|			Выборка.ГруппаАПИтог КАК ГруппаАПВМатрице
		|		ИЗ
		|			РегистрСведений.Матрица КАК Выборка
		|		ГДЕ
		|			Выборка.Аптека = &Аптека) КАК МатрицаАптеки
		|		ПО Продажи.Товар = МатрицаАптеки.АПТовар";
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Дата1",НачПериода);
		Запрос.УстановитьПараметр("Дата2",КонПериода);
		
		
		ТЗЗапроса = Запрос.Выполнить().Выгрузить();
		////--------------------------------	
		//Посчитаем общие суммы и количества
		КоличествоИтог	= ТЗЗапроса.Итог("Количество");
		СуммаВыручкаИтог = ТЗЗапроса.Итог("СуммаВыручка");
		СуммаВаловаяИтог = ТЗЗапроса.Итог("СуммаВаловая");
		
		//Посчитаем проценты
		Процентов80 = Окр(КоличествоИтог*ПроцентА/100,2);
		Процентов95 = Окр(КоличествоИтог*(ПроцентА + ПроцентБ)/100,2);
		
		ТЗЗапроса.Колонки.Добавить("ГруппаУпак");
		ТЗЗапроса.Колонки.Добавить("ГруппаВал");
		ТЗЗапроса.Колонки.Добавить("ГруппаВыр");
		//ТЗЗапроса.Колонки.Добавить("ГруппаИтог");
		
		//Считаем ABC по количеству
		ТЗЗапроса.Сортировать("Количество Убыв");
		
		//Состояние("Расчет ABC по количеству упаковок....");
		НакопительнаяСумма = 0;
		Для Каждого стр из ТЗЗапроса Цикл
			Если стр.Количество = NULL Тогда
				Если стр.ГруппаИтог = "" 
					или стр.ГруппаИтог = "A" 
					или стр.ГруппаИтог = "B" 
					или стр.ГруппаИтог = "C" Тогда
					стр.ГруппаИтог = "D";
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			НакопительнаяСумма = НакопительнаяСумма + стр.Количество;
			Если НакопительнаяСумма <=Процентов80 Тогда
				стр.ГруппаУпак = "A";
			ИначеЕсли (НакопительнаяСумма > Процентов80) и (НакопительнаяСумма <= Процентов95) Тогда
				стр.ГруппаУпак = "B";
			Иначе
				стр.ГруппаУпак = "C";
			КонецЕсли;
		КонецЦикла;
		
		//Считаем ABC по выручке
		Процентов80 = Окр(СуммаВыручкаИтог*ПроцентА/100,2);
		Процентов95 = Окр(СуммаВыручкаИтог*(ПроцентА + ПроцентБ)/100,2);	
		ТЗЗапроса.Сортировать("СуммаВыручка Убыв");
		
		//Состояние("Расчет ABC по сумме выручки....");
		//ЭлементыФормы.Индикатор.Значение = 0;
		НакопительнаяСумма = 0;
		Для Каждого стр из ТЗЗапроса Цикл
			Если стр.Количество = NULL Тогда
				Продолжить;
			КонецЕсли;
			НакопительнаяСумма = НакопительнаяСумма + стр.СуммаВыручка;
			Если НакопительнаяСумма <=Процентов80 Тогда
				стр.ГруппаВыр = "A";
			ИначеЕсли (НакопительнаяСумма > Процентов80) и (НакопительнаяСумма <= Процентов95) Тогда
				стр.ГруппаВыр = "B";
			Иначе
				стр.ГруппаВыр = "C";
			КонецЕсли;
		КонецЦикла;	
		
		
		//Считаем ABC по валовой прибыли
		Процентов80 = Окр(СуммаВаловаяИтог*ПроцентА/100,2);
		Процентов95 = Окр(СуммаВаловаяИтог*(ПроцентА + ПроцентБ)/100,2);	
		ТЗЗапроса.Сортировать("СуммаВаловая Убыв");
		
		//Состояние("Расчет ABC по сумме валовой прибыли....");
		
		НакопительнаяСумма = 0;
		Для Каждого стр из ТЗЗапроса Цикл
			
			Если стр.Количество = NULL Тогда
				Продолжить;
			КонецЕсли;	
			
			НакопительнаяСумма = НакопительнаяСумма + стр.СуммаВаловая;
			Если НакопительнаяСумма <=Процентов80 Тогда
				стр.ГруппаВал = "A";
			ИначеЕсли (НакопительнаяСумма > Процентов80) и (НакопительнаяСумма <= Процентов95) Тогда
				стр.ГруппаВал = "B";
			Иначе
				стр.ГруппаВал = "C";
			КонецЕсли;
		КонецЦикла;
		
		//Теперь пройдемся по ТЗ и определим итоговую группу АП
		МатрицаABC = Новый Структура;
		Выборка = Справочники.МатрицаABC.Выбрать();
		Пока Выборка.Следующий() Цикл
			МатрицаABC.Вставить(Выборка.ГруппаУпак + ""+Выборка.ГруппаПрибыль + "" + Выборка.ГруппаВыручка,Выборка.ГруппаИтог);
		КонецЦикла;
		
		//Состояние("Определение окончательной группы АП на основе матрицы ABC....");
		Для каждого стр из ТЗЗапроса Цикл
			
			Если стр.Количество = NULL Тогда
				Продолжить;
			КонецЕсли;
			Если стр.ГруппаИтог <> "" Тогда
				Продолжить;
			КонецЕсли;
			стр.ГруппаИтог = МатрицаABC[стр.ГруппаУпак + "" + стр.ГруппаВал + "" + стр.ГруппаВыр]; 
			
		КонецЦикла;
		
		//А теперь обновим в матрице то, что мы тут расчитали
		НачатьТранзакцию();
		номер = 0;
		//Состояние("Обновление групп АП в матрице аптеки....");
		
		//Блокировка = Новый БлокировкаДанных;
		//БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
		//БлокировкаМатрицы.УстановитьЗначение("Аптека",Аптека);
		//Блокировка.Заблокировать();	
	
		
		
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",Аптека);	
		
		МассивИзменений = Новый Структура;
		МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
		
		Для каждого стр из ТЗЗапроса Цикл
			номер = номер + 1;
			
			
			Если стр.АПаптеки <> 1 Тогда
				Продолжить;
			КонецЕсли;
			Если стр.ГруппаИтог = стр.ГруппаАПВМатрице Тогда
				Продолжить;
			КонецЕсли;
			
			Если стр.ГруппаАПВМатрице = "I" или
				стр.ГруппаАПВМатрице = "S" или 
				стр.ГруппаАПВМатрице = "X" или
				стр.ГруппаАПВМатрице = "F" Тогда
				Продолжить;
			КонецЕсли;
			
			Если номер%100 = 0 Тогда
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецЕсли;
			
			МассивИзмерений.Вставить("Товар",стр.АПТовар);
			
			МассивИзменений.Вставить("ГруппаАПИтог",стр.ГруппаИтог);
			МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
			//Записываем изменения
			ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);		
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();	
		
		ОбновитьДатуРасчетаКоэффициентаЛок(Аптека, "ABC");
		
	КонецЦикла;
	
	
	
КонецПроцедуры


Функция РассчитатьQminQmaxДляАптекиЛок(ТЗЗапроса,Аптека,ПараметрыРасчета)
	

	КоэффициентПоставщика			= ПараметрыРасчета.КоэффициентПоставщика;
	МинимальныйПорогСреднейСкорости = ПараметрыРасчета.МинимальныйПорогСреднейСкорости;
	ПорогСреднейСкорости			= ПараметрыРасчета.ПорогСреднейСкорости;

	Ксз								= ПараметрыРасчета.Ксз;
	Куп								= ПараметрыРасчета.Куп;
	УчитыватьНЗ						= Истина;
	ТаблицаПравил					= ПараметрыРасчета.ТаблицаПравил;
	ТаблицаЗапасов					= ПараметрыРасчета.ТаблицаЗапасов;
	
	МинСкорость0					= ПараметрыРасчета.МинСкорость0;
	МаксСкорость0					= ПараметрыРасчета.МаксСкорость0;	
	ТаблицаПравилНаОченьПлохойСкорости = ПараметрыРасчета.ТаблицаПравилНаОченьПлохойСкорости;
	
	ВозвращатьПромежуточныеТаблицы = ПараметрыРасчета.ВозвращатьПромежуточныеТаблицы;
	
	
	
		//Дальше идет расчет Qmin  и Qmax
		
			ТХТ = "ВЫБРАТЬ
			      |	Т.Код,
			      |	Т.СредняяСкорость,
			      |	Т.Цена КАК Цена,
			      |	Т.ЕдиницаДляСвертки КАК ДнейПродаж,
			      |	ПОДСТРОКА(Т.ГруппаXYZ, 1, 1) КАК ГруппаXYZ
			      |ПОМЕСТИТЬ ВТ_0
			      |ИЗ
			      |	&Таб КАК Т
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	ВТ_0.Код,
			      |	СУММА(ВТ_0.СредняяСкорость) КАК СредняяСкорость,
			      |	ВТ_0.Цена КАК Цена,
			      |	СУММА(ВТ_0.ДнейПродаж) КАК ДнейПродаж,
			      |	МАКСИМУМ(ВТ_0.ГруппаXYZ) КАК ГруппаXYZ
			      |ПОМЕСТИТЬ ВТ_1
			      |ИЗ
			      |	ВТ_0 КАК ВТ_0
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	ВТ_0.Код,
			      |	ВТ_0.Цена
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	МатрицаНЗ.Товар.Код КАК КодТовара,
			      |	МАКСИМУМ(МатрицаНЗ.НЗ) КАК НЗ
			      |ПОМЕСТИТЬ ВыборкаНЗ
			      |ИЗ
			      |	РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			      |ГДЕ
			      |	МатрицаНЗ.Аптека = &Аптека
				  |	И НЕ МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_6)
				  //|	И НЕ МатрицаНЗ.ВидНЗ в (&ВидыНЗ) 
			      |	И &ТекущаяДата МЕЖДУ МатрицаНЗ.ДатаНачалаАкции И МатрицаНЗ.СрокДействияРекламы
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	МатрицаНЗ.Товар.Код
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	КодТовара
			      |;
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Т.Код,
			      |	АП.Наименование КАК Товар,
			      |	АП.Ссылка КАК ТоварСсылка,
			      |	Матрица.КуМин КАК МатрицаКуМин,
			      |	Матрица.КуМакс КАК МатрицаКуМакс,
			      |	ЕСТЬNULL(ВыборкаНЗ.НЗ, 0) КАК МатрицаНЗ,
			      |	Матрица.ГруппаАПИтог КАК ГруппаАП,
			      |	ВЫБОР
			      |		КОГДА Т.Цена = 0
			      |			ТОГДА 500
			      |		ИНАЧЕ Т.Цена
			      |	КОНЕЦ КАК Цена,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.ГруппаXYZ,
			      |	ВЫБОР
			      |		КОГДА АП.Поставщик = &ПустойПоставщик
			      |			ТОГДА 1
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК ПустойПоставщик,
			      |	0 КАК КуМинРасчет,
			      |	0 КАК КуМаксРасчет,
			      |	Т.ДнейПродаж,
			      |	ЕСТЬNULL(ПерестокАптек.Пересток, 0) КАК Пересток,
			      |	АП.Сезон
				  |ПОМЕСТИТЬ Выборка
			      |ИЗ
			      |	ВТ_1 КАК Т
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
			      |		ПО (Матрица.Аптека = &Аптека)
			      |			И (Матрица.Товар.Код = Т.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = Т.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерестокАптек КАК ПерестокАптек
			      |		ПО (ПерестокАптек.Аптека = &Аптека)
			      |			И (ПерестокАптек.Товар.Код = Т.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаНЗ КАК ВыборкаНЗ
			      |		ПО Т.Код = ВыборкаНЗ.КодТовара
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Выборка.Код,
			      |	Выборка.Товар,
			      |	Выборка.ТоварСсылка,
			      |	Выборка.МатрицаКуМин,
			      |	Выборка.МатрицаКуМакс,
			      |	Выборка.МатрицаНЗ,
			      |	Выборка.ГруппаАП,
			      |	Выборка.Цена,
			      |	Выборка.СредняяСкорость,
			      |	Выборка.ГруппаXYZ,
			      |	Выборка.ПустойПоставщик,
			      |	Выборка.КуМинРасчет,
			      |	Выборка.КуМаксРасчет,
			      |	Выборка.ДнейПродаж,
			      |	Выборка.Пересток,
			      |	ЕСТЬNULL(МатрицаСезоны.К" + Месяц(ТекущаяДата()) + ", 1) КАК КоэффСезон,
				  | Ложь как Изменение
			      |ИЗ
			      |	Выборка КАК Выборка
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сезоны.Коэффициенты КАК МатрицаСезоны
			      |		ПО (МатрицаСезоны.Ссылка = Выборка.Сезон)
			      |			И (МатрицаСезоны.ГруппаАП = Выборка.ГруппаАП)
			      |			И (Выборка.Цена МЕЖДУ МатрицаСезоны.ЦенаМин И МатрицаСезоны.ЦенаМакс)
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ_0
			      |;
				  |УНИЧТОЖИТЬ ВыборкаНЗ
			      |;
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВЫБОРКА
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ_1";

			
	    //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Таб",ТЗЗапроса);
		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());

		Запрос.УстановитьПараметр("ПустойПоставщик",Справочники.Поставщики.ПустаяСсылка());
		ВидыНЗ = Новый СписокЗначений;
		ВидыНЗ.Добавить(Перечисления.ВидыНЗ.НЗ_4);
		Запрос.УстановитьПараметр("ВидыНЗ",ВидыНЗ);		
		//ТЗЗапроса = Неопределено ;
		ТЗ = Запрос.Выполнить().Выгрузить();			
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
		КоличествоСтрок = ТЗ.Количество();
		
		Для каждого стр из ТЗ Цикл
			//Если стр.Периоды < 4 Тогда
			//	Продолжить;
			//КонецЕсли;
			СредняяСкорость = стр.СредняяСкорость;
			Цена = ?(стр.Цена=0,500,стр.Цена);
			ГруппаАП = стр.ГруппаАП;
			
			s=7; p=7; //Значения по умолчанию, на случай, если ни одно правило не выполнится

			//Получим коэффициенты нормативов
			Для каждого строкаТЗ из ТаблицаЗапасов Цикл
				Если Цена >= СтрокаТЗ.ЦенаМин и Цена < СтрокаТЗ.ЦенаМакс Тогда
					Если  СредняяСкорость >= СтрокаТЗ.СкоростьМин и СредняяСкорость < СтрокаТЗ.СкоростьМакс Тогда
						s = СтрокаТЗ.СтраховойЗапас;
						p = СтрокаТЗ.Потребность;
						Прервать;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
			
			
			Если стр.ПустойПоставщик = 0 Тогда
				Попытка
					p = p*КоэффициентПоставщика;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если стр.ГруппаXYZ = "X" Тогда
				Kxyz = 0.8;
			ИначеЕсли стр.ГруппаXYZ = "Y" Тогда
				Kxyz = 1;				
			ИначеЕсли стр.ГруппаXYZ = "Z" Тогда
				Kxyz = 1.3;				
			//ИначеЕсли стр.ГруппаXYZ = "W" Тогда
			//	Kxyz = 1.5;								
			Иначе
				Kxyz = 1;
			КонецЕсли;
				
			s = s * стр.КоэффСезон;
			p = p * стр.КоэффСезон;
			
			//Расчет непосредственный 
			Если ((СредняяСкорость >= МинимальныйПорогСреднейСкорости) и  (СредняяСкорость < ПорогСреднейСкорости)) или (СредняяСкорость <1 и стр.ДнейПродаж<7) Тогда  //Если Скорость недостоверна
				
				Отбор = Новый Структура();
				Отбор.Вставить("ГруппаАП",ГруппаАП);
				Отбор.Вставить("ГруппаXYZ",стр.ГруппаXYZ);
				Строки = ТаблицаПравил.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					Для каждого СтрокаТЗ из Строки Цикл
						Если Цена >= СтрокаТЗ.ЦенаМин и Цена < СтрокаТЗ.ЦенаМакс Тогда
							стр.КуМинРасчет = Окр(СтрокаТЗ.Qmin + (СтрокаТЗ.Qmin*стр.Пересток/10));
							стр.КуМаксРасчет = Окр(СтрокаТЗ.Qmax+ (СтрокаТЗ.Qmin*стр.Пересток/10));
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
			ИначеЕсли СредняяСкорость >=МинСкорость0 и СредняяСкорость < МаксСкорость0 Тогда   //Если очень плохая скорость, но еще не 0
				
				Отбор = Новый Структура();
				Отбор.Вставить("ГруппаАП",ГруппаАП);
				Строки = ТаблицаПравилНаОченьПлохойСкорости.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					Для каждого СтрокаТЗ из Строки Цикл
						Если Цена >= СтрокаТЗ.ЦенаМин и Цена < СтрокаТЗ.ЦенаМакс Тогда
							стр.КуМинРасчет = СтрокаТЗ.Qmin;
							стр.КуМаксРасчет = СтрокаТЗ.Qmax;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
				
			ИначеЕсли СредняяСкорость >= ПорогСреднейСкорости Тогда //Если скорость достоверна ( хорошая)
				
				Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "C" Тогда
					стр.КуМинРасчет = СредняяСкорость*(1+(s*Ксз+стр.Пересток));
					стр.КуМаксРасчет = СредняяСкорость*(1+(s*Ксз + стр.Пересток)+((p+Куп)*Ксз));
					Если стр.КуМинРасчет < 1 Тогда
						стр.КуМинРасчет = ОкруглениеВБольшую(стр.КуМинРасчет);
						стр.КуМаксРасчет = ОкруглениеВБольшую(стр.КуМаксРасчет);
					Иначе
						стр.КуМинРасчет = Окр(стр.КуМинРасчет,0);
						стр.КуМаксРасчет = Окр(стр.КуМаксРасчет,0);
					КонецЕсли;						
				КонецЕсли;
				
			ИначеЕсли СредняяСкорость < МинСкорость0 Тогда  //было СредняяСкорость > 0 и СредняяСкорость <= МинимальныйПорогСреднейСкорости
				 		стр.КуМинРасчет = 1;
						стр.КуМаксРасчет = 1;
			КонецЕсли;
					
			стр.КуМинРасчет = ?(стр.КуМинРасчет=0,1,стр.КуМинРасчет);
			стр.КуМаксРасчет = ?(стр.КуМаксРасчет=0,1,стр.КуМаксРасчет);
					
			
			// Рассчитали Qmin Qmax  
			// Далее корректируем , если это необходимо
			
			
			Если УчитыватьНЗ = Истина Тогда					
				//Корректируем Кумин и Кумакс с учетом незжимаемого запаса аптеки
				Если ГруппаАП = "A" или ГруппаАП = "B" или ГруппаАП = "C" или ГруппаАП = "D" Тогда
					Если стр.КуМинРасчет <= стр.МатрицаНЗ Тогда
						стр.КуМинРасчет = стр.МатрицаНЗ;
						Если стр.КуМаксРасчет < стр.МатрицаНЗ Тогда
							стр.КуМаксРасчет = стр.МатрицаНЗ;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (стр.МатрицаКумин <> стр.КуМинРасчет) или (стр.МатрицаКуМакс <> стр.КуМаксРасчет)  Тогда
				стр.Изменение = Истина;	
			КонецЕсли;
			
			
		КонецЦикла;
		
		Отбор = Новый структура();
		Отбор.Вставить("Изменение",Истина);
		
		ТЗИзменений = ТЗ.Скопировать(Отбор);
		
		
		ТекСотрудник = ПараметрыСеанса.ТекущийСотр;
		ДатаИзменения = ТекущаяДата();
		
		РезультатЗаписи = Ложь;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			// Блокировка данных
			текБлокировка = Новый БлокировкаДанных;
			БлокРегистра = текБлокировка.Добавить("РегистрСведений.Матрица");
			БлокРегистра.Режим = РежимБлокировкиДанных.Исключительный;
			БлокРегистра.УстановитьЗначение("Аптека",Аптека);
			БлокРегистра.ИсточникДанных = ТЗИзменений;
			БлокРегистра.ИспользоватьИзИсточникаДанных("Товар", "ТоварСсылка");
			
			// Заблокировать
			текБлокировка.Заблокировать();
			
			текЗапись = РегистрыСведений.Матрица.СоздатьМенеджерЗаписи();
			текЗапись.Аптека = Аптека;
			
			Для каждого стр из ТЗИзменений цикл
				
				текЗапись.Товар = стр.ТоварСсылка;
				текЗапись.Прочитать();
				
				Если ТекЗапись.Выбран() Тогда
					текЗапись.КуМин = стр.КуМинРасчет;
					текЗапись.КуМакс = стр.КуМаксРасчет;
					текЗапись.КтоВнесВМатрицу = ТекСотрудник;
					текЗапись.ДатаИзменения = ДатаИзменения;
					ТекЗапись.Записать();
				КонецЕсли;
			КонецЦикла;	
			ЗафиксироватьТранзакцию();
			РезультатЗаписи = Истина;
		Исключение
			ОтменитьТранзакцию();
			МЗ = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
			МЗ.Объект = "Автозаказ";
			МЗ.ДатаОшибки = ТекущаяДата();
			МЗ.КодАптеки = Аптека.Код;
			МЗ.ОписаниеОшибки = ОписаниеОшибки();
			МЗ.МестоВозникновения = "РасчетКмн:1179";
			МЗ.Записать();			
			#Если Клиент Тогда
				Сообщить("не удалось изменить записи в Матрице. Ошибка:  " + ОписаниеОшибки() );	
			#КонецЕсли
		КонецПопытки;
		
	
	//	ТХТ = "ВЫБРАТЬ
	//		  |	Матрица.Аптека,
	//		  |	Матрица.Товар,
	//		  |	Матрица.ГруппаXYZ,
	//		  |	Матрица.ГруппаАПИтог,
	//		  |	Матрица.КуМин,
	//		  |	Матрица.КуМакс,
	//		  |	Матрица.КтоВнесВМатрицу,
	//		  |	Матрица.ДатаВнесенияВМатрицу,
	//		  |	Матрица.ДатаИзменения,
	//		  |	Матрица.Товар.Код как КодТовара
	//		  |ИЗ
	//		  |	РегистрСведений.Матрица КАК Матрица
	//		  |ГДЕ
	//		  |	Матрица.Аптека = &Аптека";
	//	ЗапросМ = Новый Запрос;
	//	ЗапросМ.Текст = ТХТ;
	//	ЗапросМ.УстановитьПараметр("Аптека",Аптека);
	//	ТЗМатрица = ЗапросМ.Выполнить().Выгрузить();
	//	ТЗМатрица.Индексы.Добавить("КодТовара");
	//	
	//	МассивИзмерений = Новый Структура;
	//	МассивИзмерений.Вставить("Аптека",Аптека);
	//	
	//	МассивИзменений = Новый Структура;
	//	ТекСотрудник = ПараметрыСеанса.ТекущийСотр;
	//	ДатаИзменения = ТекущаяДата();
	//	//МенеджерЗаписи = РегистрыСведений.Матрица.СоздатьМенеджерЗаписи();
	//	Для каждого стр из ТЗ Цикл

	//		Если (стр.МатрицаКумин <> стр.КуМинРасчет) или (стр.МатрицаКуМакс <> стр.КуМаксРасчет) Тогда
	//			
	//			найденнаяСтрока = ТЗМатрица.Найти(Стр.Код,"КодТовара");
	//			Если найденнаяСтрока = Неопределено Тогда
	//				 Продолжить;
	//			 КонецЕсли;
	//			найденнаяСтрока.КуМин = стр.КуМинРасчет;
	//			найденнаяСтрока.КуМакс = стр.КуМаксРасчет;
	//			найденнаяСтрока.КтоВнесВМатрицу = ТекСотрудник;
	//		  	найденнаяСтрока.ДатаВнесенияВМатрицу = ДатаИзменения;
	//
	//		КонецЕсли;
	//		
	//	КонецЦикла;	
	//	
	//	Блокировка = Новый БлокировкаДанных;
	//	БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
	//	БлокировкаМатрицы.УстановитьЗначение("Аптека",Аптека);
	//	Блокировка.Заблокировать();	

	//	
	//	Набор = РегистрыСведений.Матрица.СоздатьНаборЗаписей();
	//	Набор.Отбор.Аптека.Установить(Аптека);	
	//	Набор.Загрузить(ТЗМатрица);
	//	Набор.Записать();
		
		ОбновитьДатуРасчетаКоэффициентаЛок(Аптека, "QminQmax");
		
		Если ВозвращатьПромежуточныеТаблицы = Истина Тогда
			Возврат ТЗ;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	
КонецФункции


Функция РасчетАвтозаказаОкончательныйЛок(ТЗЗапроса,Аптека,ПараметрыРасчета)	
		


	//КоэффициентЗаказаA	= ПараметрыРасчета.КоэффициентЗаказаA;
	//КоэффициентЗаказаB	= ПараметрыРасчета.КоэффициентЗаказаB;
	//КоэффициентЗаказаC	= ПараметрыРасчета.КоэффициентЗаказаC;
	//КоэффициентЗаказаD	= ПараметрыРасчета.КоэффициентЗаказаD;
	ОграничениеДляНовыхАптек = ПараметрыРасчета.ОграничениеДляНовыхАптек;
	Поле_Коэфф			= 2;
	Флаг_УчестьРеквизитминимальныйЗаказ = ПараметрыРасчета.Флаг_УчестьРеквизитминимальныйЗаказ;
	УчитыватьКратностьЗаказа = ПараметрыРасчета.УчитыватьКратностьЗаказа;
	ПрименятьКоэффПоНЗ	= Ложь;
	КоэффПоНЗ			= 0;
	//ТекДата				= ПараметрыРасчета.ТекДата;
	УчитыватьНЗ			= ПараметрыРасчета.УчитыватьНЗ;
	ПорогСреднейСкорости			= ПараметрыРасчета.ПорогСреднейСкорости;


	
	
	ОМ21_ЗаказыПоставщикам.ОМ21_ЗакрытьТоварыВПути(Аптека,ТекущаяДата());
			
			ТХТ = "ВЫБРАТЬ
			      |	Т.Код,
			      |	Т.СредняяСкорость КАК СредняяСкорость,
			      |	Т.Продажи КАК Продажи,
			      |	Т.ЕдиницаДляСвертки КАК ДнейПродаж,
			      |	Т.Dx КАК Dx,
			      |	Т.Цена КАК Цена,
			      |	Т.Активный,
			      |	Т.ДеньРеализации
			      |ПОМЕСТИТЬ ВТ1
			      |ИЗ
			      |	&Таб КАК Т
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Т.Код,
			      |	Т.Цена,
			      |	Т.Активный,
			      |	СУММА(Т.СредняяСкорость) КАК СредняяСкорость,
			      |	СУММА(Т.Продажи) КАК Продажи,
			      |	СУММА(Т.ДнейПродаж) КАК ДнейПродаж,
			      |	СУММА(Т.ДеньРеализации) КАК ДнейРеализации,
			      |	СУММА(Т.Dx) КАК Dx
			      |ПОМЕСТИТЬ ВТ
			      |ИЗ
			      |	ВТ1 КАК Т
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Т.Код,
			      |	Т.Цена,
			      |	Т.Активный
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	МатрицаНЗ.Товар.Код КАК КодТовара,
			      |	МАКСИМУМ(МатрицаНЗ.НЗ) КАК НЗ,
			      |	МАКСИМУМ(МатрицаНЗ.РекламнаяАкция) КАК РекламнаяАкция,
			      |	МАКСИМУМ(МатрицаНЗ.СрокДействияРекламы) КАК СрокДействияРекламы
			      |ПОМЕСТИТЬ ВыборкаНЗ
			      |ИЗ
			      |	РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			      |ГДЕ
			      |	МатрицаНЗ.Аптека = &Аптека
			      |	И НЕ МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_6)
			      |	И &ТекущаяДата МЕЖДУ МатрицаНЗ.ДатаНачалаАкции И МатрицаНЗ.СрокДействияРекламы
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	МатрицаНЗ.Товар.Код
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	КодТовара
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	МатрицаНЗ.Товар.Код КАК КодТовара,
			      |	МАКСИМУМ(МатрицаНЗ.НЗ) КАК НЗ,
			      |	МАКСИМУМ(МатрицаНЗ.РекламнаяАкция) КАК РекламнаяАкция,
			      |	МАКСИМУМ(МатрицаНЗ.СрокДействияРекламы) КАК СрокДействияРекламы
			      |ПОМЕСТИТЬ ВыборкаНЗ_4_5
			      |ИЗ
			      |	РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			      |ГДЕ
			      |	МатрицаНЗ.Аптека = &Аптека
			      |	И МатрицаНЗ.ВидНЗ В(&ВидыНЗ)
			      |	И &ТекущаяДата МЕЖДУ МатрицаНЗ.ДатаНачалаАкции И МатрицаНЗ.СрокДействияРекламы
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	МатрицаНЗ.Товар.Код
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	КодТовара
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	ВЫБОР
			      |		КОГДА АП.КодОП > 0
			      |			ТОГДА АП.КодОП
			      |		ИНАЧЕ ПартииОстатки.ТоварКод
			      |	КОНЕЦ КАК КодТовара,
			      |	МАКСИМУМ(Партии.ДатаПоступления) КАК МаксДатаПрихода,
			      |	СУММА(ПартииОстатки.КоличествоОстаток / Партии.К) КАК Остаток				  
			      |ПОМЕСТИТЬ ОстатокНаНачало
			      |ИЗ
			      |	РегистрНакопления.УЗ_Партии.Остатки(, СкладКод = &АптекаКод) КАК ПартииОстатки
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |		ПО (Партии.Код = ПартииОстатки.ПартияКод)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = ПартииОстатки.ТоварКод)				  
			      |ГДЕ
			      |	ПартииОстатки.КоличествоОстаток > 0
			      |	И Партии.К > 0
				  | И НЕ Партии.ТипПартии = ""I""
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	ВЫБОР
			      |		КОГДА АП.КодОП > 0
			      |			ТОГДА АП.КодОП
			      |		ИНАЧЕ ПартииОстатки.ТоварКод
			      |	КОНЕЦ
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	КодТовара
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Выборка.Код,
			      |	Выборка.ГруппаАП,
			      |	Выборка.КуМин,
			      |	Выборка.КуМакс,
			      |	Выборка.НЗ,
			      |	Выборка.Продажи,
			      |	Выборка.Остаток,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток <= Выборка.КуМин
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |				И (Выборка.Активный = ИСТИНА
			      |					ИЛИ Выборка.ТоварРазрешен)
			      |			ТОГДА ВЫБОР
			      |					КОГДА Выборка.Остаток > Выборка.СредняяСкорость
			      |						ТОГДА ВЫРАЗИТЬ(Выборка.КуМакс - (Выборка.Остаток - Выборка.СредняяСкорость) КАК ЧИСЛО(10, 0))
			      |					ИНАЧЕ Выборка.КуМакс
			      |				КОНЕЦ
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Заказать,
			      |	Выборка.ДнейПродаж,
			      |	Выборка.СредняяСкорость,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток = 0
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |			ТОГДА 1
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Дефектура,
			      |	Выборка.Цена,
			      |	0 КАК Сумма,
			      |	Выборка.ПризнакРекламнойАкции,
			      |	Выборка.СрокДействияРекламнойАкции,
			      |	Выборка.Активный,
			      |	Выборка.Dx,
			      |	Выборка.Днейреализации
			      |ПОМЕСТИТЬ ИтоговыйЗаказ
			      |ИЗ
			      |	(ВЫБРАТЬ
			      |		ВТ.Код КАК Код,
			      |		Матрица.ГруппаАПИтог КАК ГруппаАП,
			      |		ВТ.Продажи КАК Продажи,
			      |		ВТ.ДнейПродаж КАК ДнейПродаж,
			      |		ВТ.ДнейРеализации КАК Днейреализации,
			      |		ЕСТЬNULL(Матрица.КуМин, 0) КАК КуМин,
			      |		ЕСТЬNULL(Матрица.КуМакс, 0) КАК КуМакс,
			      |		ЕСТЬNULL(ВыборкаНЗ.НЗ, 0) КАК НЗ,
			      |		ВТ.Цена КАК Цена,
			      |		ЕСТЬNULL(ОстатокНаНачало.Остаток, 0) КАК Остаток,
			      |		ЕСТЬNULL(ВТ.СредняяСкорость, 0) КАК СредняяСкорость,
			      |		ЕСТЬNULL(ВыборкаНЗ.РекламнаяАкция, ЛОЖЬ) КАК ПризнакРекламнойАкции,
			      |		ЕСТЬNULL(ВыборкаНЗ.СрокДействияРекламы, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокДействияРекламнойАкции,
			      |		ВТ.Активный КАК Активный,
			      |		ВТ.Dx КАК Dx,
			      |		ВЫБОР
			      |			КОГДА РТ.Товар ЕСТЬ NULL 
			      |				ТОГДА ЛОЖЬ
			      |			ИНАЧЕ ИСТИНА
			      |		КОНЕЦ КАК ТоварРазрешен
			      |	ИЗ
			      |		ВТ КАК ВТ
			      |			ЛЕВОЕ СОЕДИНЕНИЕ ОстатокНаНачало КАК ОстатокНаНачало
			      |			ПО (ОстатокНаНачало.КодТовара = ВТ.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
			      |			ПО (Матрица.Аптека = &Аптека)
			      |				И (Матрица.Товар.Код = ВТ.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаНЗ КАК ВыборкаНЗ
			      |			ПО ВТ.Код = ВыборкаНЗ.КодТовара
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенныеТовары КАК РТ
			      |			ПО (РТ.Аптека = &Аптека)
			      |				И (РТ.Товар.Код = ВТ.Код)) КАК Выборка
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗЛИЧНЫЕ
			      |	ИсключенияАвтозаказа.Товар.Код КАК КодТовара
			      |ПОМЕСТИТЬ Исключения
			      |ИЗ
			      |	РегистрСведений.ИсключенияАвтозаказа КАК ИсключенияАвтозаказа
			      |ГДЕ
			      |	ИсключенияАвтозаказа.Склад = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
			      |	И &ТекущаяДата МЕЖДУ ИсключенияАвтозаказа.ДатаНачала И ИсключенияАвтозаказа.ДатаОкончания
			      |
			      |ОБЪЕДИНИТЬ
			      |
			      |ВЫБРАТЬ
			      |	ИсключенияАвтозаказа.Товар.Код
			      |ИЗ
			      |	РегистрСведений.ИсключенияАвтозаказа КАК ИсключенияАвтозаказа
			      |ГДЕ
			      |	ИсключенияАвтозаказа.Склад = &Аптека
			      |	И &ТекущаяДата МЕЖДУ ИсключенияАвтозаказа.ДатаНачала И ИсключенияАвтозаказа.ДатаОкончания
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	ВыборкаВПути.Код КАК Код,
			      |	СУММА(ВыборкаВПути.ВПути) КАК ВПути
			      |ПОМЕСТИТЬ ВТВПути
			      |ИЗ
			      |	(ВЫБРАТЬ
			      |		ВЫБОР
			      |			КОГДА ЗаказПоставщикуОстатки.Товар.КодОП > 0
			      |				ТОГДА ЗаказПоставщикуОстатки.Товар.КодОП
			      |			ИНАЧЕ ЗаказПоставщикуОстатки.Товар.Код
			      |		КОНЕЦ КАК Код,
			      |		ЗаказПоставщикуОстатки.КоличествоОстаток КАК ВПути
			      |	ИЗ
			      |		РегистрНакопления.ЗаказПоставщику.Остатки(, Склад = &Аптека) КАК ЗаказПоставщикуОстатки
			      |	ГДЕ
			      |		ЗаказПоставщикуОстатки.КоличествоОстаток > 0
			      |	
			      |	ОБЪЕДИНИТЬ ВСЕ
			      |	
			      |	ВЫБРАТЬ
			      |		УЗ_ПеремещенияВПутиОстатки.ТоварКод,
			      |		-1 * УЗ_ПеремещенияВПутиОстатки.КоличествоОстаток как ВПути
			      |	ИЗ
			      |		РегистрНакопления.УЗ_ПеремещенияВПути.Остатки(, СкладПолучательКод = &АптекаКод) КАК УЗ_ПеремещенияВПутиОстатки
			      |
			      |	ОБЪЕДИНИТЬ ВСЕ
			      |	
			      |	ВЫБРАТЬ
			      |		ВЫБОР
			      |			КОГДА АП.КодОП > 0
			      |				ТОГДА АП.КодОП
			      |			ИНАЧЕ ТоварНаПриемке.ТоварКод
			      |		КОНЕЦ,
			      |		ТоварНаПриемке.Количество / ТоварНаПриемке.К
			      |	ИЗ
			      |		РегистрСведений.ТоварНаПриемке КАК ТоварНаПриемке
			      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |			ПО (Партии.Код = ТоварНаПриемке.ПартияКод)	
			      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |			ПО (АП.Код = ТоварНаПриемке.ТоварКод)
			      |	ГДЕ
			      |		ТоварНаПриемке.СкладКод = &АптекаКод И НЕ Партии.ТипПартии = ""I"") КАК ВыборкаВПути
				  |
			      |СГРУППИРОВАТЬ ПО
			      |	ВыборкаВПути.Код
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	ИТОГОВЫЙЗАКАЗ.Код как КодТовара,
			      |	АП.Наименование КАК Товар,
			      |	АП.МинимальныйЗаказ КАК МинимальныйЗаказ,
			      |	ИТОГОВЫЙЗАКАЗ.ГруппаАП,
			      |	ИТОГОВЫЙЗАКАЗ.КуМин,
			      |	ИТОГОВЫЙЗАКАЗ.КуМакс,
			      |	ИТОГОВЫЙЗАКАЗ.НЗ,
			      |	ИТОГОВЫЙЗАКАЗ.Продажи,
			      |	ЕСТЬNULL(ТоварыВПути.ВПути, 0) КАК ВПути,
			      |	ИТОГОВЫЙЗАКАЗ.Остаток,
			      |	ВЫБОР
			      |		КОГДА ЕСТЬNULL(ТоварыВПути.ВПути, 0) > 0
			      |				ИЛИ ЕСТЬNULL(неликвиды.КодТовара, 0) > 0
			      |			ТОГДА 0
			      |		ИНАЧЕ ИТОГОВЫЙЗАКАЗ.Заказать
			      |	КОНЕЦ КАК Заказать,
			      |	0 КАК Резерв,
			      |	ИТОГОВЫЙЗАКАЗ.ДнейПродаж,
			      |	ИТОГОВЫЙЗАКАЗ.Днейреализации,
			      |	ИТОГОВЫЙЗАКАЗ.СредняяСкорость,
			      |	ИТОГОВЫЙЗАКАЗ.Дефектура,
			      |	ИТОГОВЫЙЗАКАЗ.Цена,
			      |	ИТОГОВЫЙЗАКАЗ.Сумма,
			      |	ЕСТЬNULL(ИТОГОВЫЙЗАКАЗ.ПризнакРекламнойАкции, ЛОЖЬ) КАК ПризнакРекламнойАкции,
			      |	ЕСТЬNULL(ИТОГОВЫЙЗАКАЗ.СрокДействияРекламнойАкции, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокДействияРекламнойАкции,
			      |	ИТОГОВЫЙЗАКАЗ.Активный,
			      |	ЕСТЬNULL(ПерестокАптек.Пересток, 0) КАК Пересток,
			      |	ИТОГОВЫЙЗАКАЗ.Dx,
			      |	ЛОЖЬ КАК НедостовернаяПозиция,
			      |	ВЫБОР
			      |		КОГДА Исключения.КодТовара ЕСТЬ NULL 
			      |			ТОГДА 0
			      |		ИНАЧЕ 1
			      |	КОНЕЦ КАК Исключение,
			      |	АП.Подкатегория КАК Подкатегория,
			      |	ВЫБОР
			      |		КОГДА неликвиды.КодТовара ЕСТЬ NULL 
			      |			ТОГДА ЛОЖЬ
			      |		ИНАЧЕ ИСТИНА
			      |	КОНЕЦ КАК неликвид,
			      |	АП.ТипДляЦО КАК ТипДляЦО,
			      |	ВЫБОР
			      |		КОГДА ВыборкаНЗ_4_5.НЗ ЕСТЬ NULL 
			      |			ТОГДА ЛОЖЬ
			      |		ИНАЧЕ ИСТИНА
			      |	КОНЕЦ КАК ЕстьНЗ_4_5,
			      |	ЕСТЬNULL(ВыборкаНЗ_4_5.НЗ, 0) КАК НЗ_4_5, 0 как ЗаказатьДоПривидения
			      |ИЗ
			      |	ИтоговыйЗаказ КАК ИТОГОВЫЙЗАКАЗ
			      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВПути КАК ТоварыВПути
			      |		ПО (ТоварыВПути.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерестокАптек КАК ПерестокАптек
			      |		ПО (ПерестокАптек.Аптека = &Аптека)
			      |			И (ПерестокАптек.Товар.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Исключения КАК Исключения
			      |		ПО (Исключения.КодТовара = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Неликвиды КАК неликвиды
			      |		ПО (неликвиды.Аптека = &Аптека)
			      |			И (неликвиды.КодТовара = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаНЗ_4_5 КАК ВыборкаНЗ_4_5
			      |		ПО ИТОГОВЫЙЗАКАЗ.Код = ВыборкаНЗ_4_5.КодТовара
			      |
			      |УПОРЯДОЧИТЬ ПО
			      |	АП.Наименование
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВыборкаНЗ
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВыборкаНЗ_4_5
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ1
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ИтоговыйЗаказ
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТВПути
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ОстатокНаНачало
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ Исключения
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТ";
			
	    //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
		ВидыНЗ = Новый СписокЗначений;
		ВидыНЗ.Добавить(Перечисления.ВидыНЗ.НЗ_4);
		ВидыНЗ.Добавить(Перечисления.ВидыНЗ.НЗ_5);
		
		ТекДата = ТекущаяДата();
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДатаОстатка",КонецДня(ТекДата));
		Запрос.УстановитьПараметр("ТекущаяДата",ТекДата);
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("АптекаКод",Аптека.Код);
		Запрос.УстановитьПараметр("Таб",ТЗЗапроса);
		Запрос.УстановитьПараметр("ВидыНЗ",ВидыНЗ);
		ТЗ = Запрос.Выполнить().Выгрузить();	
		
		ИспользоватьМатрицуНедостоверных = Константы.ИспользоватьМатрицуНедостоверных.Получить(); 
		Если ИспользоватьМатрицуНедостоверных Тогда
			МТ = Новый МенеджерВременныхТаблиц;
			ТХТ = "ВЫБРАТЬ
			      |	МатрицаНедостоверных.ЦенаОт КАК ЦенаОт,
			      |	МатрицаНедостоверных.ЦенаДо,
			      |	МатрицаНедостоверных.ПродажиОт КАК ПродажиОт,
			      |	МатрицаНедостоверных.ПродажиДо,
			      |	МатрицаНедостоверных.ОстатокОт КАК ОстатокОт,
			      |	МатрицаНедостоверных.ОстатокДо,
			      |	МатрицаНедостоверных.ДнейПродажОт КАК ДнейПродажОт,
			      |	МатрицаНедостоверных.ДнейПродажДо,
			      |	МатрицаНедостоверных.Заказать
			      |ПОМЕСТИТЬ МН
			      |ИЗ
			      |	РегистрСведений.МатрицаНедостоверных КАК МатрицаНедостоверных
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ ПЕРВЫЕ 1
			      |	МН.ЦенаОт
			      |ИЗ
			      |	МН КАК МН
			      |;
			      |";

			Запрос.Текст = ТХТ;
			Запрос.МенеджерВременныхТаблиц = МТ;
			Рез = Запрос.Выполнить();
			Если Рез.Пустой() Тогда
				ИспользоватьМатрицуНедостоверных = Ложь;
				Запрос.Текст = "УНИЧТОЖИТЬ МН;";
				Запрос.Выполнить();
				МТ.Закрыть();
			Иначе
				ТХТ = "ВЫБРАТЬ
				|	МН.Заказать
				|ИЗ
				|	МН КАК МН
				|ГДЕ
				|	&Цена >= МН.ЦенаОт И &Цена < МН.ЦенаДо
				|	И &Продажа >= МН.ПродажиОт И &Продажа < МН.ПродажиДо
				|	И &Остаток >= МН.ОстатокОт И &Остаток < МН.ОстатокДо
				|	И &ДнейПродаж >= МН.ДнейПродажОт И &ДнейПродаж < МН.ДнейПродажДо";
				Запрос.Текст = ТХТ;
			КонецЕсли;
		КонецЕсли;

		
		
		спр_АП = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
		Госпитальные = спр_АП.НайтиПоКоду(17);
		
		Для каждого стр из ТЗ Цикл
			
		
			Если ОграничениеДляНовыхАптек = Истина Тогда
				Если стр.ДнейПродаж < 7 и стр.dx < 1 Тогда
				//Если стр.Продажи <> 0 Тогда
					УдвоенныеПродажи = (стр.Продажи*Поле_Коэфф);  // Исправил 2 на Поле_Коэфф по просьбе Санакоева 02/03/2010
					Если (стр.Заказать > УдвоенныеПродажи) и (стр.НЗ < УдвоенныеПродажи) Тогда
						стр.Заказать = УдвоенныеПродажи;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			Если Флаг_УчестьРеквизитМинимальныйЗаказ Тогда
				Попытка
					Если (стр.Заказать>0) Тогда
						// Если есть заказ
						//пер_МЗ = спр_АП.НайтиПоКоду(стр.Код).МинимальныйЗаказ;
						Если стр.Заказать<стр.МинимальныйЗаказ Тогда
							// Если Заказ>0 но меньше минимального заказа
							стр.Заказать = стр.МинимальныйЗаказ;
						Иначе
							Если УчитыватьКратностьЗаказа = Истина Тогда
								Если стр.МинимальныйЗаказ > 0 Тогда
									стр.Заказать = Окр(стр.Заказать/стр.МинимальныйЗаказ,0)*стр.МинимальныйЗаказ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					//Сообщить("Это сообщение только для ИТ! Ничего страшного :) "+ОписаниеОшибки());
					Прервать;
				КонецПопытки;
			КонецЕсли;
			
			Если ПрименятьКоэффПоНЗ = Истина Тогда
				Если стр.Заказать > 0 и стр.НЗ > 0 Тогда
					КоличествоСНЗ = Окр(стр.НЗ/КоэффПоНЗ,0);
					КоличествоСНЗ = ?(КоличествоСНЗ=0,1,КоличествоСНЗ);
					стр.Заказать = Макс(стр.Заказать,КоличествоСНЗ);	
				КонецЕсли;
			КонецЕсли;
			
			
			//Определяем недостоверные позиции 
			Если стр.Заказать > 0 и стр.ЕстьНЗ_4_5 = ЛОЖЬ Тогда
				Если стр.ГруппаАП = "A"  или  стр.ГруппаАП = "B" или стр.ГруппаАП = "C" Тогда
					
					Если стр.Кумакс > стр.Продажи*2.5  и стр.Кумакс <> стр.НЗ Тогда
						стр.Недостовернаяпозиция = Истина;
					КонецЕсли;
					
					Если стр.Кумакс >= стр.Продажи*2 и стр.Кумин >= 4 и стр.ДнейПродаж <=20 Тогда
						стр.Недостовернаяпозиция = Истина;
					КонецЕсли;
					
					Если стр.ДнейПродаж < 15 Тогда
						стр.Недостовернаяпозиция = Истина;
					КонецЕсли;
					
					Если стр.Продажи > 0 и стр.Заказать > 0 и стр.ПризнакРекламнойАкции = Ложь Тогда
						Отношение = стр.Заказать/стр.Продажи;
						Если Отношение > 2 или Отношение < 0.18 Тогда
							стр.Недостовернаяпозиция = Истина;	
						КонецЕсли;
					КонецЕсли;
					
					
					Если стр.Продажи = 1 и стр.НЗ = 0 и  стр.МинимальныйЗаказ = 0 Тогда
						Если  стр.ДнейПродаж > 4 и стр.Заказать > 2 Тогда
							стр.Заказать = 2;
						ИначеЕсли стр.ДнейПродаж < 4 и стр.Заказать > 3 Тогда
							стр.Заказать = 2;
						КонецЕсли;
						
					КонецЕсли;
					
					Если (стр.Остаток+стр.Заказать)/2 > стр.Продажи и стр.ПризнакРекламнойАкции = Ложь  и стр.НЗ = 0
						и (стр.Остаток+стр.Заказать) > 4 Тогда
						стр.Недостовернаяпозиция = Истина;	
					КонецЕсли;
					
					
				КонецЕсли;      
				
				Если стр.НЗ > 4 и стр.НЗ = стр.КуМин  и Стр.НЗ = стр.КуМакс и стр.Заказать = 1 Тогда
					стр.Заказать = Мин(Окр(стр.НЗ/2),2);	
				КонецЕсли;
				
				Если стр.НЗ = стр.КуМин и стр.Заказать < 3 Тогда
				    Если стр.НЗ > 8 и стр.НЗ <= 19 Тогда
						стр.Заказать = Мин(Окр(стр.НЗ/2),2);
					ИначеЕсли стр.НЗ > 19  Тогда
						стр.Заказать = 0;
					КонецЕсли;
				КонецЕсли;
				
				Если стр.Подкатегория = Госпитальные Тогда
					стр.НедостовернаяПозиция = Истина;
				КонецЕсли;
				
				//Если стр.СредняяСкорость <= ПорогСреднейСкорости Тогда
				//	стр.НедостовернаяПозиция = Истина;
				//КонецЕсли;
				
				Если стр.НедостовернаяПозиция = Истина и стр.НЗ > 0 и стр.Цена > 0 и стр.НЗ >= стр.Заказать Тогда //доп.тз Санакоева 03.06.2014
					Если ( стр.ПризнакРекламнойАкции = Ложь )  
						или ( стр.СрокДействияРекламнойАкции >= ТекДата и стр.ПризнакРекламнойАкции = Истина ) Тогда
						стр.НедостовернаяПозиция = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				
				Если стр.НедостовернаяПозиция = Истина Тогда
					Если ИспользоватьМатрицуНедостоверных Тогда
						Запрос.УстановитьПараметр("Цена",стр.Цена);
						Запрос.УстановитьПараметр("Продажа",стр.Продажи);
						Запрос.УстановитьПараметр("Остаток",стр.Остаток);
						Запрос.УстановитьПараметр("ДнейПродаж",стр.ДнейПродаж);
						Рез = Запрос.Выполнить();
						Если НЕ Рез.Пустой() Тогда
							Выборка = Рез.Выбрать();
							Выборка.Следующий();
							Если Выборка.Заказать > 0 и Выборка.Заказать < стр.МинимальныйЗаказ Тогда
								стр.Заказать = стр.МинимальныйЗаказ;
							Иначе
								стр.Заказать = Выборка.Заказать;
							КонецЕсли;
							стр.НедостовернаяПозиция = Ложь; //По последнему ТЗ Санакоева снимаем недостоверность,
							//если хотя бы по одному условию матрицы недостоверности позиция прошла
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;   				

				Если РасчетПоПродажам = Истина и стр.Продажи = 0 и стр.Заказать > 0 Тогда
					стр.Заказать = 0;
				КонецЕсли;


				стр.Сумма = стр.Заказать*стр.Цена;
				
			КонецЕсли;
			
			
		
		КонецЦикла;
		
		Если ИспользоватьМатрицуНедостоверных Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ МН;";
			Запрос.Выполнить();
			МТ.Закрыть();
		КонецЕсли;		
		
		ТЗ.Колонки.Удалить("МинимальныйЗаказ");

		//Добавим исключений из заказа, если пользователь на форме их указал
		ВыполнятьЗапрос = Ложь;
		Для каждого строкаОтбора из Построитель.Отбор Цикл
			Если строкаОтбора.Использование	= Истина Тогда
				ВыполнятьЗапрос = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыполнятьЗапрос Тогда
			Построитель.Выполнить();
			Рез = Построитель.Результат;
			Если НЕ Рез.Пустой() Тогда
				Выборка  = Рез.Выбрать();
				Пока Выборка.Следующий() Цикл
					НайденнаяСтрока = ТЗ.Найти(Выборка.КодТовара,"Код");
					Если НЕ НайденнаяСтрока = Неопределено Тогда
						НайденнаяСтрока.Исключение = Истина;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		
		Возврат ТЗ;

	
КонецФункции


Функция РасчетАвтозаказаОкончательныйЛокБезПересчетаСкоростей(Аптека,ПараметрыРасчета)	
		

	ПараметрыРасчета = ПолучитьПараметрыРасчетаАвтозаказаПоАптекеЛок(Аптека);
	//КоэффициентЗаказаA	= ПараметрыРасчета.КоэффициентЗаказаA;
	//КоэффициентЗаказаB	= ПараметрыРасчета.КоэффициентЗаказаB;
	//КоэффициентЗаказаC	= ПараметрыРасчета.КоэффициентЗаказаC;
	//КоэффициентЗаказаD	= ПараметрыРасчета.КоэффициентЗаказаD;
	ОграничениеДляНовыхАптек = ПараметрыРасчета.ОграничениеДляНовыхАптек;
	Поле_Коэфф			= 2;
	Флаг_УчестьРеквизитминимальныйЗаказ = ПараметрыРасчета.Флаг_УчестьРеквизитминимальныйЗаказ;
	УчитыватьКратностьЗаказа = ПараметрыРасчета.УчитыватьКратностьЗаказа;
	ПрименятьКоэффПоНЗ	= Ложь;
	КоэффПоНЗ			= 0;
	//ТекДата				= ПараметрыРасчета.ТекДата;
	УчитыватьНЗ			= ПараметрыРасчета.УчитыватьНЗ;


	
	Если фл_ЗакрыватьТоварВПути Тогда
		ОМ21_ЗаказыПоставщикам.ОМ21_ЗакрытьТоварыВПути(Аптека,ТекущаяДата());
	КонецЕсли;
			
	
	
			
			ТХТ = "ВЫБРАТЬ
			      |	ПродажиСменККМ.ТоварКод КАК КодТовара,
			      |	ВЫРАЗИТЬ(СУММА(ПродажиСменККМ.Количество / Партии.К) КАК ЧИСЛО(12, 0)) КАК Продажи,
			      |	СУММА(ПродажиСменККМ.СуммаЗакупБезНДС) КАК СуммаЗакуп
			      |ПОМЕСТИТЬ ПродажиСмен
			      |ИЗ
			      |	РегистрНакопления.УЗ_ПродажиСменККМ КАК ПродажиСменККМ
			      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |		ПО (Партии.Код = ПродажиСменККМ.ПартияКод)
			      |ГДЕ
			      |	ПродажиСменККМ.Период >= &НачПериода
			      |	И ПродажиСменККМ.СкладКод = &АптекаКод
				  |	И НЕ Партии.ТипПартии = ""I""
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	ПродажиСменККМ.ТоварКод
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	КодТовара
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	РеализацияККМ.ТоварКод КАК КодТовара,
			      |	ВЫРАЗИТЬ(СУММА(РеализацияККМ.КоличествоОборот / Партии.К) КАК ЧИСЛО(12, 0)) КАК Продажи,
			      |	СУММА(РеализацияККМ.СуммаЗакупСНДСОборот) КАК СуммаЗакуп
			      |ПОМЕСТИТЬ УЗ_Реализации
			      |ИЗ
			      |	РегистрНакопления.УЗ_РеализацииККМ.Обороты(&НачПериода, , , СкладКод = &АптекаКод) КАК РеализацияККМ
			      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |		ПО (Партии.Код = РеализацияККМ.ПартияКод)
				  |ГДЕ НЕ Партии.ТипПартии = ""I""
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	РеализацияККМ.ТоварКод
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	КодТовара
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Выбор когда АП.КодОП > 0 Тогда АП.КодОП ИНАЧЕ Выборка.Код КОНЕЦ КАК Код,
			      |	СУММА(Выборка.Продажа) КАК Продажа,
			      |	СУММА(Выборка.СуммаЗакуп) КАК СуммаЗакуп
			      |ПОМЕСТИТЬ ВТПРодажи
			      |ИЗ
			      |	(		
			      |	ВЫБРАТЬ
			      |		ПродажиСмен.КодТовара как Код,
			      |		ПродажиСмен.Продажи как Продажа,
			      |		ПродажиСмен.СуммаЗакуп
			      |	ИЗ
			      |		ПродажиСмен КАК ПродажиСмен
			      |	
			      |	ОБЪЕДИНИТЬ ВСЕ
			      |	
			      |	ВЫБРАТЬ
			      |		УЗ_Реализации.КодТовара,
			      |		УЗ_Реализации.Продажи,
			      |		УЗ_Реализации.СуммаЗакуп
			      |	ИЗ
			      |		УЗ_Реализации КАК УЗ_Реализации) КАК Выборка
			      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |			ПО (АП.Код = Выборка.Код)				  
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Выбор когда АП.КодОП > 0 Тогда АП.КодОП ИНАЧЕ Выборка.Код КОНЕЦ
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	Код
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Матрица.Товар.Код КАК Код,
			      |	Матрица.ГруппаАПИтог,
			      |	Матрица.КуМин,
			      |	Матрица.КуМакс,
			      |	Матрица.Товар.УчаствуетВАП КАК Активный
			      |ПОМЕСТИТЬ ВТМатрица
			      |ИЗ
			      |	РегистрСведений.Матрица КАК Матрица
			      |ГДЕ
			      |	Матрица.Аптека = &Аптека
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	Матрица.Товар.Код
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Связки.ТоварФирмы.Код КАК Код,
			      |	МИНИМУМ(Прайсы.Цена) КАК Цена
			      |ПОМЕСТИТЬ ВТЦены
			      |ИЗ
			      |	Справочник.СвязкиТовараСПоставщиком КАК Связки
			      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайсы
			      |		ПО Связки.Поставщик = Прайсы.Поставщик
			      |			И Связки.КодТовараПоставщика = Прайсы.Код
			      |ГДЕ
			      |	Связки.Поставщик.ОсуществляетПрямыеПоставки = ИСТИНА
			      |	И Связки.Блокировка = ЛОЖЬ
			      |	И ВЫБОР
			      |			КОГДА Прайсы.Цена > 0
			      |					И Прайсы.Цена < 50
			      |					И Прайсы.Количество > 1000
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 50
			      |					И Прайсы.Цена < 150
			      |					И Прайсы.Количество > 500
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 150
			      |					И Прайсы.Цена < 1000
			      |					И Прайсы.Количество > 100
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 1000
			      |					И Прайсы.Цена < 5000
			      |					И Прайсы.Количество > 20
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 5000
			      |					И Прайсы.Цена < 10000
			      |					И Прайсы.Количество > 10
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 10000
			      |					И Прайсы.Количество > 5
			      |				ТОГДА ИСТИНА
			      |			ИНАЧЕ ЛОЖЬ
			      |		КОНЕЦ = ИСТИНА
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Связки.ТоварФирмы.Код
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	Код
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	ВЫБОР
			      |		КОГДА АП.КодОП > 0
			      |			ТОГДА АП.КодОП
			      |		ИНАЧЕ ПартииОстатки.ТоварКод
			      |	КОНЕЦ КАК Код,
			      |	СУММА(ПартииОстатки.КоличествоОстаток / Партии.К) КАК Остаток
			      |ПОМЕСТИТЬ ОстатокНаНачало
			      |ИЗ
			      |	РегистрНакопления.УЗ_Партии.Остатки(, СкладКод = &АптекаКод) КАК ПартииОстатки
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |		ПО (Партии.Код = ПартииОстатки.ПартияКод)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = ПартииОстатки.ТоварКод)				  
			      |ГДЕ
			      |	ПартииОстатки.КоличествоОстаток > 0
			      |	И Партии.К > 0
				  | И НЕ Партии.ТипПартии = ""I""
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	ВЫБОР
			      |		КОГДА АП.КодОП > 0
			      |			ТОГДА АП.КодОП
			      |		ИНАЧЕ ПартииОстатки.ТоварКод
			      |	КОНЕЦ
			      |
			      |ИНДЕКСИРОВАТЬ ПО
			      |	Код
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	Выборка.Код,
			      |	Выборка.ГруппаАП,
			      |	Выборка.КуМин,
			      |	Выборка.КуМакс,
			      |	Выборка.НЗ,
			      |	Выборка.Продажи,
			      |	Выборка.Остаток,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток <= Выборка.КуМин
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |				И (Выборка.Активный = ИСТИНА
			      |					ИЛИ Выборка.ТоварРазрешен)
			      |			ТОГДА ВЫБОР
			      |					КОГДА Выборка.Остаток > Выборка.СредняяСкорость
			      |						ТОГДА ВЫРАЗИТЬ(Выборка.КуМакс - (Выборка.Остаток - Выборка.СредняяСкорость) КАК ЧИСЛО(10, 0))
			      |					ИНАЧЕ Выборка.КуМакс
			      |				КОНЕЦ
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Заказать,
			      |	Выборка.ДнейПродаж,
			      |	Выборка.СредняяСкорость,
			      |	ВЫБОР
			      |		КОГДА Выборка.Остаток = 0
			      |				И Выборка.ГруппаАП ПОДОБНО ""[ABCD]""
			      |			ТОГДА 1
			      |		ИНАЧЕ 0
			      |	КОНЕЦ КАК Дефектура,
			      |	Выборка.Цена,
			      |	0 КАК Сумма,
			      |	Выборка.ПризнакРекламнойАкции,
			      |	Выборка.СрокДействияРекламнойАкции,
			      |	Выборка.Активный,
			      |	Выборка.Dx,
			      |	Выборка.ТоварРазрешен
			      |ПОМЕСТИТЬ ИтоговыйЗаказ
			      |ИЗ
			      |	(ВЫБРАТЬ
			      |		ВТМатрица.Код КАК Код,
			      |		ВТМатрица.ГруппаАПИтог КАК ГруппаАП,
			      |		ВТПродажи.Продажа КАК Продажи,
			      |		0 КАК ДнейПродаж,
			      |		ЕСТЬNULL(ВТМатрица.КуМин, 0) КАК КуМин,
			      |		ЕСТЬNULL(ВТМатрица.КуМакс, 0) КАК КуМакс,
			      |		ВЫБОР
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_1.НЗ, 0) >= ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0)
			      |					И ЕСТЬNULL(МатрицаНЗ_1.НЗ, 0) >= ЕСТЬNULL(МатрицаНЗ_3.НЗ, 0)
			      |				ТОГДА ЕСТЬNULL(МатрицаНЗ_1.НЗ, 0)
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0) >= ЕСТЬNULL(МатрицаНЗ_1.НЗ, 0)
			      |					И ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0) >= ЕСТЬNULL(МатрицаНЗ_3.НЗ, 0)
			      |				ТОГДА ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0)
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_3.НЗ, 0) >= ЕСТЬNULL(МатрицаНЗ_1.НЗ, 0)
			      |					И ЕСТЬNULL(МатрицаНЗ_3.НЗ, 0) >= ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0)
			      |				ТОГДА ЕСТЬNULL(МатрицаНЗ_3.НЗ, 0)
			      |		КОНЕЦ КАК НЗ,
			      |		ЕСТЬNULL(ВТЦены.Цена, 0) КАК Цена,
			      |		ЕСТЬNULL(ОстатокНаНачало.Остаток, 0) КАК Остаток,
			      |		0 КАК СредняяСкорость,
			      |		ВЫБОР
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0) > 0
			      |				ТОГДА МатрицаНЗ_2.РекламнаяАкция
			      |			ИНАЧЕ МатрицаНЗ_1.РекламнаяАкция
			      |		КОНЕЦ КАК ПризнакРекламнойАкции,
			      |		ВЫБОР
			      |			КОГДА ЕСТЬNULL(МатрицаНЗ_2.НЗ, 0) > 0
			      |				ТОГДА МатрицаНЗ_2.СрокДействияРекламы
			      |			ИНАЧЕ МатрицаНЗ_1.СрокДействияРекламы
			      |		КОНЕЦ КАК СрокДействияРекламнойАкции,
			      |		ВТМатрица.Активный КАК Активный,
			      |		0 КАК Dx,
			      |		ВЫБОР
			      |			КОГДА РТ.Товар ЕСТЬ NULL 
			      |				ТОГДА ЛОЖЬ
			      |			ИНАЧЕ ИСТИНА
			      |		КОНЕЦ КАК ТоварРазрешен
			      |	ИЗ
			      |		ВТМатрица КАК ВТМатрица
			      |			ЛЕВОЕ СОЕДИНЕНИЕ ОстатокНаНачало КАК ОстатокНаНачало
			      |			ПО (ОстатокНаНачало.Код = ВТМатрица.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ ВТПРодажи КАК ВТПродажи
			      |			ПО (ВТПродажи.Код = ВТМатрица.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
			      |			ПО (ВТЦены.Код = ВТМатрица.Код)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_1
			      |			ПО (МатрицаНЗ_1.Аптека = &Аптека)
			      |				И ВТМатрица.Код = МатрицаНЗ_1.Товар.Код
			      |				И (МатрицаНЗ_1.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1))
			      |				И (&ТекущаяДата МЕЖДУ МатрицаНЗ_1.ДатаНачалаАкции И МатрицаНЗ_1.СрокДействияРекламы)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_2
			      |			ПО (МатрицаНЗ_2.Аптека = &Аптека)
			      |				И ВТМатрица.Код = МатрицаНЗ_2.Товар.Код
			      |				И (МатрицаНЗ_2.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2))
			      |				И (&ТекущаяДата МЕЖДУ МатрицаНЗ_2.ДатаНачалаАкции И МатрицаНЗ_2.СрокДействияРекламы)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаНЗ КАК МатрицаНЗ_3
			      |			ПО (МатрицаНЗ_3.Аптека = &Аптека)
			      |				И ВТМатрица.Код = МатрицаНЗ_3.Товар.Код
			      |				И (МатрицаНЗ_3.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_3))
			      |				И (&ТекущаяДата МЕЖДУ МатрицаНЗ_3.ДатаНачалаАкции И МатрицаНЗ_3.СрокДействияРекламы)
			      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенныеТовары КАК РТ
			      |			ПО (РТ.Аптека = &Аптека)
			      |				И (РТ.Товар.Код = ВТМатрица.Код)) КАК Выборка
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗЛИЧНЫЕ
			      |	ИсключенияАвтозаказа.Товар.Код КАК КодТовара
			      |ПОМЕСТИТЬ Исключения
			      |ИЗ
			      |	РегистрСведений.ИсключенияАвтозаказа КАК ИсключенияАвтозаказа
			      |ГДЕ
			      |	ИсключенияАвтозаказа.Склад = ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
			      |	И &ТекущаяДата МЕЖДУ ИсключенияАвтозаказа.ДатаНачала И ИсключенияАвтозаказа.ДатаОкончания
			      |
			      |ОБЪЕДИНИТЬ
			      |
			      |ВЫБРАТЬ
			      |	ИсключенияАвтозаказа.Товар.Код
			      |ИЗ
			      |	РегистрСведений.ИсключенияАвтозаказа КАК ИсключенияАвтозаказа
			      |ГДЕ
			      |	ИсключенияАвтозаказа.Склад = &Аптека
			      |	И &ТекущаяДата МЕЖДУ ИсключенияАвтозаказа.ДатаНачала И ИсключенияАвтозаказа.ДатаОкончания
			      |;
			      |
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Выбор когда АП.КодОП > 0 Тогда АП.КодОП Иначе ВыборкаВПути.Код КОНЕЦ КАК Код,
			      |	СУММА(ВыборкаВПути.ВПути) КАК ВПути
			      |ПОМЕСТИТЬ ВТВПути
			      |ИЗ
			      |	(ВЫБРАТЬ
			      |		ЗаказПоставщикуОстатки.Товар.Код КАК Код,
			      |		ЗаказПоставщикуОстатки.КоличествоОстаток КАК ВПути
			      |	ИЗ
			      |		РегистрНакопления.ЗаказПоставщику.Остатки(, Склад = &Аптека) КАК ЗаказПоставщикуОстатки
			      |	ГДЕ
			      |		ЗаказПоставщикуОстатки.КоличествоОстаток > 0
			      |	
			      |	ОБЪЕДИНИТЬ ВСЕ
			      |	
			      |	ВЫБРАТЬ
			      |		УЗ_ПеремещенияВПутиОстатки.ТоварКод,
			      |		-1 * УЗ_ПеремещенияВПутиОстатки.КоличествоОстаток как ВПути
			      |	ИЗ
			      |		РегистрНакопления.УЗ_ПеремещенияВПути.Остатки(, СкладПолучательКод = &АптекаКод) КАК УЗ_ПеремещенияВПутиОстатки
			      |
			      |	ОБЪЕДИНИТЬ ВСЕ
			      |	
			      |	ВЫБРАТЬ
			      |		ТоварНаПриемке.ТоварКод,
			      |		ТоварНаПриемке.Количество / ТоварНаПриемке.К
			      |	ИЗ
			      |		РегистрСведений.ТоварНаПриемке КАК ТоварНаПриемке
			      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			      |			ПО (Партии.Код = ТоварНаПриемке.ПартияКод)				  
			      |	ГДЕ
			      |		ТоварНаПриемке.СкладКод = &АптекаКод И НЕ Партии.ТипПартии = ""I"") КАК ВыборкаВПути
  			      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |			ПО (АП.Код = ВыборкаВПути.Код)
				  |
			      |СГРУППИРОВАТЬ ПО
			      |	Выбор когда АП.КодОП > 0 Тогда АП.КодОП Иначе ВыборкаВПути.Код КОНЕЦ
			      |;
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			      |	ИТОГОВЫЙЗАКАЗ.Код как КодТовара,
			      |	АП.Наименование КАК Товар,
			      |	АП.МинимальныйЗаказ КАК МинимальныйЗаказ,
			      |	ИТОГОВЫЙЗАКАЗ.ГруппаАП,
			      |	ИТОГОВЫЙЗАКАЗ.КуМин,
			      |	ИТОГОВЫЙЗАКАЗ.КуМакс,
			      |	ИТОГОВЫЙЗАКАЗ.НЗ,
			      |	ЕСТЬNULL(ИТОГОВЫЙЗАКАЗ.Продажи, 0) КАК Продажи,
			      |	ЕСТЬNULL(ТоварыВПути.ВПути, 0) КАК ВПути,
			      |	ИТОГОВЫЙЗАКАЗ.Остаток,
			      |	ВЫБОР
			      |		КОГДА ЕСТЬNULL(неликвиды.КодТовара, 0) > 0 " + ?(флЗаказыватьСТоваромВПути, ""," или ЕСТЬNULL(ТоварыВПути.ВПути, 0) > 0 ") + "
			      |			ТОГДА 0
			      |		ИНАЧЕ ЕСТЬNULL(ИТОГОВЫЙЗАКАЗ.Заказать, 0)  
				  | " + ?(флЗаказыватьСТоваромВПути, " -  ЕСТЬNULL(ТоварыВПути.ВПути, 0) " , "") + "
			      |	КОНЕЦ КАК Заказать,
			      |	0 КАК Резерв,
			      |	ИТОГОВЫЙЗАКАЗ.ДнейПродаж,
			      |	ИТОГОВЫЙЗАКАЗ.СредняяСкорость,
			      |	ИТОГОВЫЙЗАКАЗ.Дефектура,
			      |	ИТОГОВЫЙЗАКАЗ.Цена,
			      |	ИТОГОВЫЙЗАКАЗ.Сумма,
			      |	ИТОГОВЫЙЗАКАЗ.ПризнакРекламнойАкции,
			      |	ИТОГОВЫЙЗАКАЗ.СрокДействияРекламнойАкции,
			      |	ИТОГОВЫЙЗАКАЗ.Активный,
			      |	ЕСТЬNULL(ПерестокАптек.Пересток, 0) КАК Пересток,
			      |	ИТОГОВЫЙЗАКАЗ.Dx,
			      |	ЛОЖЬ КАК НедостовернаяПозиция,
			      |	ЕСТЬNULL(Исключения.КодТовара, 0) КАК Исключение,
			      |	АП.Подкатегория КАК Подкатегория,
			      |	ВЫБОР
			      |		КОГДА неликвиды.КодТовара ЕСТЬ NULL 
			      |			ТОГДА ЛОЖЬ
			      |		ИНАЧЕ ИСТИНА
			      |	КОНЕЦ КАК неликвид,
			      |	АП.ТипДляЦО КАК ТипДляЦО , 0 как ЗаказатьДоПривидения
			      |ИЗ
			      |	ИтоговыйЗаказ КАК ИТОГОВЫЙЗАКАЗ
			      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВПути КАК ТоварыВПути
			      |		ПО (ТоварыВПути.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерестокАптек КАК ПерестокАптек
			      |		ПО (ПерестокАптек.Аптека = &Аптека)
			      |			И (ПерестокАптек.Товар.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |		ПО (АП.Код = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Исключения КАК Исключения
			      |		ПО (Исключения.КодТовара = ИТОГОВЫЙЗАКАЗ.Код)
			      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Неликвиды КАК неликвиды
			      |		ПО (неликвиды.Аптека = &Аптека)
			      |			И (неликвиды.КодТовара = ИТОГОВЫЙЗАКАЗ.Код)
			      |
			      |УПОРЯДОЧИТЬ ПО
			      |	АП.Наименование
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТМатрица
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТЦены
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТПродажи
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ УЗ_Реализации
			      |;
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ИтоговыйЗаказ
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ОстатокНаНачало
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ Исключения";
			
				  
	  
				  //|		КОГДА (Выборка.Остаток <= Выборка.КуМин) и (Выборка.ГруппаАП <> ""I"")  
	 	Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДатаОстатка",КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("АптекаКод",Аптека.Код);
		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
		Запрос.УстановитьПараметр("НачПериода",ТекущаяДата()-24*60*60*28);
		Запрос.УстановитьПараметр("КонПериода",КонецДня(ТекущаяДата()));
		
		ТЗ = Запрос.Выполнить().Выгрузить();	
		
			
		
		//Если КоэффициентЗаказаA = 1 и КоэффициентЗаказаB = 1 и КоэффициентЗаказаC = 1 и КоэффициентЗаказаD = 1 Тогда
		//Иначе
		//	Для Каждого стр из ТЗ Цикл
		//		Если стр.ГруппаАП = "A" Тогда
		//			стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаA,0);
		//		ИначеЕсли стр.ГруппаАП = "B" Тогда
		//			стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаB,0);
		//		ИначеЕсли стр.ГруппаАП = "C" Тогда
		//			стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаC,0);
		//		ИначеЕсли стр.ГруппаАП = "D" Тогда
		//			стр.Заказать = Окр(стр.Заказать*КоэффициентЗаказаD,0);					
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		
		
		
		спр_АП = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН;
		Госпитальные = спр_АП.НайтиПоКоду(17);
		Для каждого стр из ТЗ Цикл
			
		    стр.Заказать = Макс(0,стр.Заказать);
			Если Флаг_УчестьРеквизитМинимальныйЗаказ Тогда
				Попытка
					Если (стр.Заказать>0) Тогда
						// Если есть заказ
						//пер_МЗ = спр_АП.НайтиПоКоду(стр.Код).МинимальныйЗаказ;
						Если стр.Заказать<стр.МинимальныйЗаказ Тогда
							// Если Заказ>0 но меньше минимального заказа
							стр.Заказать = стр.МинимальныйЗаказ;
						Иначе
							Если УчитыватьКратностьЗаказа = Истина Тогда
								Если стр.МинимальныйЗаказ > 0 Тогда
									стр.Заказать = Окр(стр.Заказать/стр.МинимальныйЗаказ,0)*стр.МинимальныйЗаказ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					//Сообщить("Это сообщение только для ИТ! Ничего страшного :) "+ОписаниеОшибки());
					Прервать;
				КонецПопытки;
			КонецЕсли;
			
			Если ПрименятьКоэффПоНЗ = Истина Тогда
				Если стр.Заказать > 0 и стр.НЗ > 0 Тогда
					КоличествоСНЗ = Окр(стр.НЗ/КоэффПоНЗ,0);
					КоличествоСНЗ = ?(КоличествоСНЗ=0,1,КоличествоСНЗ);
					стр.Заказать = Макс(стр.Заказать,КоличествоСНЗ);	
				КонецЕсли;
			КонецЕсли;
			
			//Определяем недостоверные позиции 
			Если стр.Заказать > 0 Тогда
				
				
				Если стр.НЗ > 4 и стр.НЗ = стр.КуМин  и Стр.НЗ = стр.КуМакс и стр.Заказать = 1 Тогда
					стр.Заказать = Мин(Окр(стр.НЗ/2),2);	
				КонецЕсли;
				
				Если стр.НЗ = стр.КуМин и стр.Заказать < 3 Тогда
				    Если стр.НЗ > 8 и стр.НЗ <= 19 Тогда
						стр.Заказать = Мин(Окр(стр.НЗ/2),2);
					ИначеЕсли стр.НЗ > 19  Тогда
						стр.Заказать = 0;
					КонецЕсли;
				КонецЕсли;

				
				Если стр.Подкатегория = Госпитальные Тогда
					стр.НедостовернаяПозиция = Истина;
				КонецЕсли;
				
				Если РасчетПоПродажам = Истина и стр.Продажи = 0 и стр.Заказать > 0 Тогда
					стр.Заказать = 0;
				КонецЕсли;
				
				стр.Сумма = стр.Заказать*стр.Цена;

			КонецЕсли;
			
 						
		КонецЦикла;
		
	
		ТЗ.Колонки.Удалить("Подкатегория");
		ТЗ.Колонки.Удалить("МинимальныйЗаказ");

		Возврат ТЗ;


	
КонецФункции
	
Функция ФильтрацияВсплесковЛок(ТЗ,Скорость,ОбщаяСредняяПродажа,Период,Код,КоличествоДнейПродаж,ОпределениеНаличияВсплеска);  //Фильтруем всплески
	
	
	БылВсплеск = Ложь;
	Если Скорость >= 10 Тогда
		Отклонение = 200;
	ИначеЕсли Скорость >=5 и Скорость <10 Тогда
		Отклонение = 400;
	ИначеЕсли Скорость > 1 и Скорость <5 Тогда
		Отклонение = 500;
	ИначеЕсли Скорость <=1 Тогда
		Отклонение = 800;
	КонецЕсли;
		
		
	Отбор = Новый Структура;
	Отбор.Вставить("Код",Код);
	Отбор.Вставить("Периоды",Период);
	НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
	
	Для каждого стр из НайденныеСтроки Цикл
		Если стр.Продажи > ОпределениеНаличияВсплеска Тогда
			
			РасчетноеОтклонение = (стр.Продажи - Скорость)*100/Скорость;
			//РасчетноеОтклонение = (стр.Продажи - ОбщаяСредняяПродажа)*100/ОбщаяСредняяПродажа;
			РасчетноеОтклонение = ?(РасчетноеОтклонение < 0,(-1)*РасчетноеОтклонение,РасчетноеОтклонение);
			Если РасчетноеОтклонение > Отклонение Тогда
				 БылВсплеск = Истина;
				 стр.Продажи = стр.Продажи/(1+(РасчетноеОтклонение - Отклонение)/100);
				 //стр.Продажи = Окр(ОбщаяСредняяПродажа * Отклонение/100);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если БылВсплеск = Истина Тогда
		НовыеПродажи = 0;
		Для каждого стр из НайденныеСтроки Цикл
			НовыеПродажи = НовыеПродажи + стр.Продажи;	
		КонецЦикла;
		Скорость = Окр(НовыеПродажи/КоличествоДнейПродаж,3);
	КонецЕсли;
	
	Возврат Скорость;
	
КонецФункции

Функция ПолучитьПараметрыРасчетаАвтозаказаПоАптекеЛок(Аптека) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ш.ШаблонМатрицы,
	|	Ш.ШаблонМатрицы.ШаблонИндивидуальный как ШаблонИндивидуальный
	|ИЗ
	|	РегистрСведений.ПараметрыРасчетаАвтозаказаДляАптек КАК Ш
	|ГДЕ
	|	Ш.Аптека = &Аптека";
	
	Запрос.УстановитьПараметр("Аптека",Аптека);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ШаблонМатрицы = Справочники.ШаблоныМатриц.НайтиПоРеквизиту("ШаблонПоУмолчанию",Истина);
	Иначе
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ШаблонИндивидуальный = Истина Тогда
			ШаблонМатрицы = Выборка.ШаблонМатрицы;
		Иначе
			ШаблонДляВсехАптек = Справочники.ШаблоныМатриц.НайтиПоРеквизиту("ШаблонДляВсехАптек",Истина);
			Если ШаблонДляВсехАптек.Пустая() Тогда
				ШаблонМатрицы = Выборка.ШаблонМатрицы;
			Иначе
				ШаблонМатрицы = ШаблонДляВсехАптек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ТаблицаПравил = ШаблонМатрицы.ТаблицаПравил.Выгрузить();
	ТаблицаПравилНаОченьПлохойСкорости = ШаблонМатрицы.ТаблицаПравилНаОченьПлохойСкорости.Выгрузить();
	ТаблицаЗапасов = ШаблонМатрицы.ТаблицаЗапасов.Выгрузить();
	
	
	ПараметрыАвтозаказа = Новый Структура;
	ПараметрыАвтозаказа.Вставить("Ксз",ШаблонМатрицы.Ксз);
	ПараметрыАвтозаказа.Вставить("Куп",ШаблонМатрицы.Куп);
	ПараметрыАвтозаказа.Вставить("МинимальныйПорогСреднейСкорости",ШаблонМатрицы.МинимальныйПорогСреднейСкорости);
	ПараметрыАвтозаказа.Вставить("ПорогСреднейСкорости",ШаблонМатрицы.ПорогСреднейСкорости);
	
	ПараметрыАвтозаказа.Вставить("МинСкорость0",ШаблонМатрицы.МинСкорость0);
	ПараметрыАвтозаказа.Вставить("МаксСкорость0",ШаблонМатрицы.МаксСкорость0);
	
	ПараметрыАвтозаказа.Вставить("КоэффициентПоставщика",ШаблонМатрицы.КоэффициентПоставщика);
    ПараметрыАвтозаказа.Вставить("ОпределениеНаличияВсплеска",ШаблонМатрицы.ОпределениеНаличияВсплеска);
	
	
	ПараметрыАвтозаказа.Вставить("ОграничениеДляНовыхАптек",Истина);
	ПараметрыАвтозаказа.Вставить("Флаг_УчестьРеквизитминимальныйЗаказ",Истина);
	ПараметрыАвтозаказа.Вставить("УчитыватьКратностьЗаказа",Истина);
	ПараметрыАвтозаказа.Вставить("УчитыватьНЗ",Истина);

	
	
	ПараметрыАвтозаказа.Вставить("ТаблицаПравил",ТаблицаПравил);
	ПараметрыАвтозаказа.Вставить("ТаблицаПравилНаОченьПлохойСкорости",ТаблицаПравилНаОченьПлохойСкорости);
	ПараметрыАвтозаказа.Вставить("ТаблицаЗапасов",ТаблицаЗапасов);

	
	Возврат ПараметрыАвтозаказа;
	
КонецФункции



Функция ПолучитьТаблицуРасчетаСкоростейПродажЛок(Аптека, ТаблицаДат,ПараметрыРасчета, ЗначенияПериодов,ДополнительноеУсловие = "") 
	
	НачалоПервыйПериод = ЗначенияПериодов.НачалоПервыйПериод;
	НачалоВторойПериод = ЗначенияПериодов.НачалоВторойПериод;
	НачалоТретийПериод = ЗначенияПериодов.НачалоТретийПериод;
	НачалоЧетвертыйПериод = ЗначенияПериодов.НачалоЧетвертыйПериод;
	КонецЧетвертыйПериод = ЗначенияПериодов.КонецЧетвертыйПериод;
	ОпределениеНаличияВсплеска  = ПараметрыРасчета.ОпределениеНаличияВсплеска;


		ТХТ = "ВЫБРАТЬ
		      |	Т.Дата,
		      |	0 КАК Товар
		      |ПОМЕСТИТЬ ВТДаты
		      |ИЗ
		      |	&ТабДат КАК Т
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		      |	Матрица.Товар.Код КАК КодТовара,
		      |	Матрица.Товар.УчаствуетВАП КАК Активный,
		      |	Даты.Дата КАК Дата
		      |ПОМЕСТИТЬ Пустой_Шаблон
		      |ИЗ
		      |	РегистрСведений.Матрица КАК Матрица
		      |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		      |			ВТДаты.Дата КАК Дата,
		      |			ВТДаты.Товар КАК Товар
		      |		ИЗ
		      |			ВТДаты КАК ВТДаты) КАК Даты
		      |		ПО (Даты.Товар <> Матрица.Товар)
		      |ГДЕ
		      |	Матрица.Аптека = &Аптека
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	Пустой_Шаблон.КодТовара
		      |ПОМЕСТИТЬ ТАБЛИЦАКОДОВ
		      |ИЗ
		      |	Пустой_Шаблон КАК Пустой_Шаблон
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	НАЧАЛОПЕРИОДА(&НачПериода, ДЕНЬ) КАК Дата,
		      |	ПартииОстатки.ТоварКод КАК КодТовара,
		      |	СУММА(ПартииОстатки.КоличествоОстаток / Партии.К) КАК Остаток
		      |ПОМЕСТИТЬ ТЕМПОстатокНаНачало
		      |ИЗ
		      |	РегистрНакопления.УЗ_Партии.Остатки(&НачПериода, СкладКод = &АптекаКод) КАК ПартииОстатки
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = ПартииОстатки.ПартияКод)
		      |ГДЕ
		      |	ПартииОстатки.КоличествоОстаток > 0
		      |	И Партии.К > 0
			  |	И НЕ Партии.ТипПартии = ""I""
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	ПартииОстатки.ТоварКод
		      |
		      |ИНДЕКСИРОВАТЬ ПО
		      |	КодТовара
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ОстаткиОбороты.ПартияКод КАК ПартияКод,
		      |	СУММА(ОстаткиОбороты.КоличествоОборот) КАК Оборот
		      |ПОМЕСТИТЬ ВТПартии
		      |ИЗ
		      |	РегистрНакопления.УЗ_Партии.ОстаткиИОбороты(&НачПериода, &КонПериода,Регистратор , , СкладКод = &АптекаКод) КАК ОстаткиОбороты
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	ОстаткиОбороты.ПартияКод
		      |
		      |ИНДЕКСИРОВАТЬ ПО
		      |	ОстаткиОбороты.ПартияКод
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ВТПартии.ПартияКод КАК ПартияКод
		      |ПОМЕСТИТЬ ИнтернетПартии
		      |ИЗ
		      |	ВТПартии КАК ВТПартии
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК УЗ_Партии
		      |		ПО ВТПартии.ПартияКод = УЗ_Партии.Код
		      |ГДЕ
		      |	УЗ_Партии.ТипПартии = ""I""
		      |;			  
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	НАЧАЛОПЕРИОДА(УЗ_Партии.Период, ДЕНЬ) КАК Период,
		      |	УЗ_Партии.ТоварКод КАК КодТовара,
		      |	СУММА(ВЫБОР
		      |			КОГДА УЗ_Партии.Регистратор ССЫЛКА Документ.УЗ_РеализацияККМ
		      |				ТОГДА УЗ_Партии.КоличествоРасход / Партии.К
		      |			ИНАЧЕ 0
		      |		КОНЕЦ) КАК Продажа,
		      |	СУММА(ВЫБОР
		      |			КОГДА УЗ_Партии.Регистратор ССЫЛКА Документ.УЗ_РеализацияККМ
		      |				ТОГДА УЗ_Партии.СуммаЗакупБезНДСРасход / Партии.К
		      |			ИНАЧЕ 0
		      |		КОНЕЦ) КАК СуммаЗакуп,
		      |	СУММА(ВЫБОР
		      |			КОГДА УЗ_Партии.Регистратор ССЫЛКА Документ.ИзменениеУчетнойПолитики
		      |				ТОГДА 0
		      |			ИНАЧЕ УЗ_Партии.КоличествоОборот / Партии.К
		      |		КОНЕЦ) КАК Оборот
		      |ПОМЕСТИТЬ ТЕМППРОДАЖИОБОРОТЫ
		      |ИЗ
		      |	РегистрНакопления.УЗ_Партии.Обороты(&НачПериода, &КонПериода, Регистратор, СкладКод = &АптекаКод
		      |				И НЕ ПартияКод В
		      |						(ВЫБРАТЬ
		      |							интернетПартии.ПартияКод
		      |						ИЗ
		      |							интернетПартии)) КАК УЗ_Партии
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО УЗ_Партии.ПартияКод = Партии.Код
		      |ГДЕ
		      |	Партии.К > 0
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	НАЧАЛОПЕРИОДА(УЗ_Партии.Период, ДЕНЬ),
		      |	УЗ_Партии.ТоварКод
		      |
		      |ИНДЕКСИРОВАТЬ ПО
		      |	УЗ_Партии.ТоварКод,
		      |	НАЧАЛОПЕРИОДА(УЗ_Партии.Период, ДЕНЬ)
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	Связки.ТоварФирмы.Код КАК КодТовара,
		      |	МИНИМУМ(Прайсы.Цена) КАК Цена
		      |ПОМЕСТИТЬ ТемпЦены
		      |ИЗ
		      |	Справочник.СвязкиТовараСПоставщиком КАК Связки
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайсы
		      |		ПО Связки.Поставщик = Прайсы.Поставщик
		      |			И Связки.КодТовараПоставщика = Прайсы.Код
		      |ГДЕ
		      |	Связки.Поставщик.ОсуществляетПрямыеПоставки = ИСТИНА
		      |	И Связки.Блокировка = ЛОЖЬ
		      |	И ВЫБОР
		      |			КОГДА Прайсы.Цена > 0
		      |					И Прайсы.Цена < 50
		      |					И Прайсы.Количество > 1000
		      |				ТОГДА ИСТИНА
		      |			КОГДА Прайсы.Цена >= 50
		      |					И Прайсы.Цена < 150
		      |					И Прайсы.Количество > 500
		      |				ТОГДА ИСТИНА
		      |			КОГДА Прайсы.Цена >= 150
		      |					И Прайсы.Цена < 1000
		      |					И Прайсы.Количество > 100
		      |				ТОГДА ИСТИНА
		      |			КОГДА Прайсы.Цена >= 1000
		      |					И Прайсы.Цена < 5000
		      |					И Прайсы.Количество > 20
		      |				ТОГДА ИСТИНА
		      |			КОГДА Прайсы.Цена >= 5000
		      |					И Прайсы.Цена < 10000
		      |					И Прайсы.Количество > 10
		      |				ТОГДА ИСТИНА
		      |			КОГДА Прайсы.Цена >= 10000
		      |					И Прайсы.Количество > 5
		      |				ТОГДА ИСТИНА
		      |			ИНАЧЕ ЛОЖЬ
		      |		КОНЕЦ = ИСТИНА
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	Связки.ТоварФирмы.Код
		      |
		      |ИНДЕКСИРОВАТЬ ПО
		      |	КодТовара
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	Пустой_Шаблон.КодТовара КАК Код,
		      |	Пустой_Шаблон.Дата КАК Дата,
		      |	ЕСТЬNULL(ТЕМПЦЕНЫ.Цена, 0) КАК Цена,
		      |	ЕСТЬNULL(ТЕМПОстатокНаНачало.Остаток, 0) КАК Остаток,
		      |	ЕСТЬNULL(ТЕМППРОДАЖИОбороты.Оборот, 0) КАК Оборот,
		      |	ЕСТЬNULL(ТЕМППРОДАЖИОбороты.Продажа, 0) КАК Продажи,
		      |	ВЫБОР
		      |		КОГДА Пустой_Шаблон.Дата >= &НачалоВторойПериод
		      |				И Пустой_Шаблон.Дата <= &НачалоПервыйПериод
		      |			ТОГДА 1
		      |		КОГДА Пустой_Шаблон.Дата >= &НачалоТретийПериод
		      |				И Пустой_Шаблон.Дата < &НачалоВторойПериод
		      |			ТОГДА 2
		      |		КОГДА Пустой_Шаблон.Дата >= &НачалоЧетвертыйПериод
		      |				И Пустой_Шаблон.Дата < &НачалоТретийПериод
		      |			ТОГДА 3
		      |		КОГДА Пустой_Шаблон.Дата >= &КонецЧетвертыйПериод
		      |				И Пустой_Шаблон.Дата <= &НачалоТретийПериод
		      |			ТОГДА 4
		      |	КОНЕЦ КАК Периоды,
		      |	1 КАК ЕдиницаДляСвертки,
		      |	Пустой_Шаблон.Активный,
		      |	ВЫБОР
		      |		КОГДА ЕСТЬNULL(ТЕМППРОДАЖИОбороты.Продажа, 0) > 0
		      |			ТОГДА 1
		      |		ИНАЧЕ 0
		      |	КОНЕЦ КАК ДеньРеализации
		      |ИЗ
		      |	Пустой_Шаблон КАК Пустой_Шаблон
		      |		ЛЕВОЕ СОЕДИНЕНИЕ ТЕМПОстатокНаНачало КАК ТЕМПОстатокНаНачало
		      |		ПО (ТЕМПОстатокНаНачало.КодТовара = Пустой_Шаблон.КодТовара)
		      |			И (ТЕМПОстатокНаНачало.Дата = Пустой_Шаблон.Дата)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ ТЕМППРОДАЖИОБОРОТЫ КАК ТЕМППРОДАЖИОбороты
		      |		ПО (ТЕМППРОДАЖИОбороты.Период = Пустой_Шаблон.Дата)
		      |			И (ТЕМППРОДАЖИОбороты.КодТовара = Пустой_Шаблон.КодТовара)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ ТемпЦены КАК ТЕМПЦЕНЫ
		      |		ПО (ТЕМПЦЕНЫ.КодТовара = Пустой_Шаблон.КодТовара)
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Пустой_Шаблон.КодТовара,
		      |	Дата
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ВТДаты
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМПОстатокНаНачало
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ВТПартии
		      |;
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ИнтернетПартии
		      |;			  
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМППРОДАЖИОбороты
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТЕМПЦЕНЫ
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ТАБЛИЦАКОДОВ
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ Пустой_Шаблон";			  
		//Сообщить(ТХТ);
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Дата",ТекущаяДата());
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("АптекаКод",Аптека.Код);
		Запрос.УстановитьПараметр("Регион",Аптека.Регион);
		Запрос.УстановитьПараметр("НачПериода",КонецЧетвертыйПериод);
		Запрос.УстановитьПараметр("КонПериода",КонецДня(НачалоПервыйПериод));
		Запрос.УстановитьПараметр("НачалоПервыйПериод",НачалоПервыйПериод);
		Запрос.УстановитьПараметр("НачалоВторойПериод",НачалоВторойПериод);
		Запрос.УстановитьПараметр("НачалоТретийПериод",НачалоТретийПериод);
		Запрос.УстановитьПараметр("НачалоЧетвертыйПериод",НачалоЧетвертыйПериод);
		Запрос.УстановитьПараметр("КонецЧетвертыйПериод",КонецЧетвертыйПериод);
		Запрос.УстановитьПараметр("ПустойПоставщик",Справочники.Поставщики.ПустаяСсылка());
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТабДат",ТаблицаДат);
		ТЗЗапроса = Запрос.Выполнить().Выгрузить();	
		ТЗЗапроса.Колонки.Добавить("ОстатокНаКонец");
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		//ЭлементыФормы.Инд.Значение = 0;
		//ЭлементыФормы.Инд.МаксимальноеЗначение = ТЗЗапроса.Количество();
		Вхождение = Истина;
		СтарыйТовар = 0;
		////Сообщить("Расчет остатка: " + ТекущаяДата());
		Для Каждого стр из ТЗЗапроса Цикл
			//ЭлементыФормы.Инд.Значение = ЭлементыФормы.Инд.Значение + 1;
			Если СтарыйТовар <> стр.Код Тогда
				ПредыдущийОстаток = стр.Остаток;//?(стр.Остаток = NULL,0, стр.Остаток);
				СтарыйТовар = стр.Код;
			КонецЕсли;
			
			стр.ОстатокНаКонец = ПредыдущийОстаток + стр.Оборот;//?(стр.Оборот = NULL,0,стр.Оборот);
			Если стр.Продажи = 0 и стр.ОстатокНаКонец = 0 Тогда  //Очищаем дни дефектура ( там где остаток = 0 и продаж не было)
				стр.ЕдиницаДляСвертки = 0;
			КонецЕсли;
			ПредыдущийОстаток = стр.ОстатокНаКонец;
			
		КонецЦикла;
		////Сообщить("Конец = " + ТекущаяДата());
		//		ЭлементыФормы.ТЗ.Значение = ТЗЗапроса;
		//	ЭлементыФормы.ТЗ.СоздатьКолонки();
		//возврат;
		
		ТЗЗапроса.Сортировать("Код, Дата Убыв");
		
		ТЗЗапросаПоДатам = ТЗЗапроса.Скопировать();
		
		ТЗЗапросаПоДатам.Индексы.Добавить("Код,Периоды"); //Убрали
		
		//-------Свернем таблицу, чтобы посчитать дни продажи и количество продаж по периодам
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!! 			ВНИМАНИЕ			!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!! Если добавлять или удалять колонки, то ниже при расчете XYZ !!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!! надо изменить номера колонок ГруппаXYZ и  Отклонение  !!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//ТЗЗапроса.Свернуть("Код,Товар,ТоварСсылка,Периоды,Цена,МатрицаКуМин,МатрицаКуМакс,МатрицаНЗ,ПустойПоставщик,ПризнакРекламнойАкции,СрокДействияРекламнойАкции,ГруппаАП,Активный","Продажи,ЕдиницаДляСвертки");
		ТЗЗапроса.Свернуть("Код,Периоды,Цена,Активный","Продажи,ЕдиницаДляСвертки,ДеньРеализации");
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//Скопируем и свернем ТЗ для Расчета XYZ
		ТЗЗапросаОбщиеИтоги = ТЗЗапроса.Скопировать(,"Код,Продажи,ЕдиницаДляСвертки");
		ТЗЗапросаОбщиеИтоги.Свернуть("Код","Продажи,ЕдиницаДляСвертки");
		ТЗЗапросаОбщиеИтоги.Колонки.Добавить("ОбщаяСредняяПродажа");
		ТЗЗапросаОбщиеИтоги.Индексы.Добавить("Код");
		
		// А теперь добавим необходимые колонки 
		ТЗЗапроса.Колонки.Добавить("СредняяСкорость",Новый ОписаниеТипов("Число"));
		ТЗЗапроса.Колонки.Добавить("ГруппаXYZ",Новый ОписаниеТипов("Строка"));
		ТЗЗапроса.Колонки.Добавить("Dx",Новый ОписаниеТипов("Число"));  // Отклонение
		
		//Расчитаем Группу XYZ
		Номер = 0;
        Сумма = 0;
		ГруппаXYZ = "";
		//Сообщить(ТЗЗапроса.Количество());
		СтрокаИтогов = ТЗЗапросаОбщиеИтоги.Получить(0);
		Если (СтрокаИтогов.ЕдиницаДляСвертки = 0) или  (СтрокаИтогов.ЕдиницаДляСвертки = 1)  Тогда
			СредняяПродажа = 0;
			ПропуститьРасчетПоЭтомуТовару = Истина;
		Иначе
			СредняяПродажа = СтрокаИтогов.Продажи/СтрокаИтогов.ЕдиницаДляСвертки;
			ПропуститьРасчетПоЭтомуТовару = Ложь;
		КонецЕсли;
		СтрокаИтогов.ОбщаяСредняяПродажа = СредняяПродажа;
		
		Для каждого стр из ТЗЗапросаПоДатам Цикл
			Номер = Номер + 1;
			
			Если ПропуститьРасчетПоЭтомуТовару = Истина  Тогда
			Иначе		
				Если стр.ЕдиницаДляСвертки = 0 Тогда
				Иначе
					Сумма = Сумма + Pow((стр.Продажи - СредняяПродажа),2);
				КонецЕсли;
			КонецЕсли;
				
			
			Если Номер%28 = 0 Тогда
				Если ПропуститьРасчетПоЭтомуТовару = Ложь  Тогда
					Отклонение = Окр(Sqrt(Сумма/(СтрокаИтогов.ЕдиницаДляСвертки-1)),2);
					Dx = Отклонение;
					Если Отклонение > 0 и Отклонение <=0.3 Тогда
						ГруппаXYZ = "X";
					ИначеЕсли Отклонение > 0.3 и Отклонение <= 1.3 Тогда
						ГруппаXYZ = "Y";		
					ИначеЕсли Отклонение > 1.3 Тогда //и Отклонение <=4 Тогда
						ГруппаXYZ = "Z";
					//ИначеЕсли Отклонение > 4 Тогда
					//	ГруппаXYZ = "W";
					КонецЕсли;		
					Если ГруппаXYZ = "" Тогда					
					Иначе
						//Сообщить(""+Отклонение + "  -- " + Номер + " ---- " + ГруппаXYZ);
						ТЗЗапроса.Получить(Номер/7-1).Установить(8,ГруппаXYZ);    //13
						ТЗЗапроса.Получить(Номер/7-1).Установить(9,Отклонение);   //14
					КонецЕсли;
				КонецЕсли;
				Попытка
					СтрокаИтогов = ТЗЗапросаОбщиеИтоги.Получить(Номер/28);
				Исключение
					////Сообщить("Последний номер" + Номер);
					Продолжить;
				КонецПопытки;
				Если (СтрокаИтогов.ЕдиницаДляСвертки = 0) или  (СтрокаИтогов.ЕдиницаДляСвертки = 1)  Тогда
					СредняяПродажа = 0;
					ПропуститьРасчетПоЭтомуТовару = Истина;
				Иначе
					СредняяПродажа = СтрокаИтогов.Продажи/СтрокаИтогов.ЕдиницаДляСвертки;
					ПропуститьРасчетПоЭтомуТовару = Ложь;
				КонецЕсли;
				СтрокаИтогов.ОбщаяСредняяПродажа = СредняяПродажа;
				Сумма = 0 ;
				ГруппаXYZ = "";
			КонецЕсли;
			
		КонецЦикла;
		
		
		
				
		//Посчитаем скорости  по каждому периоду
		СоответствиеСкоростей = СоздатьИЗаполнитьСоответствиеСкоростейЛок();
		КоличествоНедостоверныхПериодов = 0;
		
		ДнейПродаж = 0;
		КоличествоПродаж = 0;
		НовыйКод = Истина;
		ОбщаяСредняяПродажа = 0;
		Для каждого стр из ТЗЗапроса Цикл
			ОбработкаПрерыванияПользователя();
			ДнейПродаж = ДнейПродаж + стр.ЕдиницаДляСвертки;
			КоличествоПродаж = КоличествоПродаж + стр.Продажи;
			Если НовыйКод = Истина Тогда
				НайденнаяСтрока = ТЗЗапросаОбщиеИтоги.Найти(стр.Код,"Код");
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					ОбщаяСредняяПродажа =  НайденнаяСтрока.ОбщаяСредняяПродажа;
				КонецЕсли;
				НовыйКод = Ложь;
			КонецЕсли;
			Если стр.Периоды = 4 Тогда
				//стр.ГруппаXYZ = РасчитатьXYZ(стр.Dx,ТЗЗапросаПоДатам,стр.Код,ДнейПродаж,КоличествоПродаж);
				ДнейПродаж = 0;
				КоличествоПродаж = 0;				
				//Здесь считаем общую скорость за все периоды
				Если стр.ЕдиницаДляСвертки <=2 Тогда
					КоличествоНедостоверныхПериодов = КоличествоНедостоверныхПериодов + 1;
					Если КоличествоНедостоверныхПериодов = 4 Тогда
						КоличествоНедостоверныхПериодов = 0;
						стр.СредняяСкорость = 0;
						СоответствиеСкоростей.Очистить();
						СоответствиеСкоростей = СоздатьИЗаполнитьСоответствиеСкоростейЛок();					
						ОбщаяСредняяПродажа = 0;
						НовыйКод = Истина;
						Продолжить;
					КонецЕсли;
					затычка = 0;
					к=1;
					Пока затычка = 0 Цикл
						Если СоответствиеСкоростей["K"+(стр.Периоды-к)] = 0 Тогда
							к=к+1;
							Продолжить;
						Иначе
							//Сообщить(стр.Код);
							СоответствиеСкоростей["K"+(стр.Периоды-к)] = СоответствиеСкоростей["K"+стр.Периоды] + СоответствиеСкоростей["K"+(стр.Периоды-к)];
							СоответствиеСкоростей["K"+стр.Периоды] = 0;
							затычка=1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					СкоростьЗаТекущийПериод = Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
					СкоростьЗаТекущийПериод = ФильтрацияВсплесковЛок(ТЗЗапросаПоДатам,СкоростьЗаТекущийПериод,ОбщаяСредняяПродажа,стр.Периоды,стр.Код,стр.ЕдиницаДляСвертки,ОпределениеНаличияВсплеска);  //Фильтруем всплески
					СоответствиеСкоростей["V"+стр.Периоды] = СкоростьЗаТекущийПериод;//Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
				КонецЕсли;
				//В конце всех периодов посчитаем средневзвешенную скорость
				СредняяСкорость = 0;
				Для к = 1 по 4 цикл
					СредняяСкорость = СредняяСкорость + СоответствиеСкоростей["K"+к]*СоответствиеСкоростей["V"+к];
				КонецЦикла;
				
				стр.СредняяСкорость = Окр(СредняяСкорость,3);
				СоответствиеСкоростей.Очистить();
				СоответствиеСкоростей = СоздатьИЗаполнитьСоответствиеСкоростейЛок();
				КоличествоНедостоверныхПериодов = 0;
				ОбщаяСредняяПродажа = 0;
				НовыйКод = Истина;

			ИНаче
				Если стр.ЕдиницаДляСвертки <=2 Тогда
					КоличествоНедостоверныхПериодов = КоличествоНедостоверныхПериодов + 1;
					СоответствиеСкоростей["K"+(стр.Периоды+1)] = СоответствиеСкоростей["K"+стр.Периоды] + СоответствиеСкоростей["K"+(стр.Периоды+1)];
					СоответствиеСкоростей["K"+стр.Периоды] = 0;
				Иначе
					СкоростьЗаТекущийПериод = Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
					СкоростьЗаТекущийПериод = ФильтрацияВсплесковЛок(ТЗЗапросаПоДатам,СкоростьЗаТекущийПериод,ОбщаяСредняяПродажа,стр.Периоды,стр.Код,стр.ЕдиницаДляСвертки,ОпределениеНаличияВсплеска); //Фильтруем всплески
					СоответствиеСкоростей["V"+стр.Периоды] = СкоростьЗаТекущийПериод;//Окр(стр.Продажи/стр.ЕдиницаДляСвертки,3);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		////Сообщить(ТекущаяДата());
		ТЗЗапросаОбщиеИтоги = Неопределено;
		ТЗЗапросаПоДатам = Неопределено; //Освобождаем таблицу, ибо жрет много памяти	
	
		Возврат ТЗЗапроса;
		
КонецФункции

Функция РасчетАвтозаказаСерверЛок(Параметры) 
	
	ДатаТочкиОтсчета					= Параметры.ДатаТочкиОтсчета;
    ВыборРасчета						= Параметры.ВыборРасчета;
	Аптека								= Параметры.Аптека;
	ВозвращатьПромежуточныеТаблицы		= Параметры.ВозвращатьПромежуточныеТаблицы;
	ДополнительноеУсловие				= Параметры.ДополнительноеУсловие;
	
	ТаблицаДатРасчета = Новый ТаблицаЗначений();
	ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	к = 28;
	НомерПериода = 5;
	Пока к > 0 Цикл	
		Если к%7 = 0 Тогда
			НомерПериода = НомерПериода - 1;
			Если НомерПериода = 4 Тогда
				КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
			ИначеЕсли НомерПериода = 3 Тогда
				НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			ИначеЕсли НомерПериода = 2 Тогда
				НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			ИначеЕсли НомерПериода = 1 Тогда
				НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			КонецЕсли;			
		КонецЕсли;
		стр = ТаблицаДатРасчета.Добавить();
		стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
		к = к - 1;
	КонецЦикла;	
	НачалоПервыйПериод = стр.Дата;
	
	ПараметрыРасчета = ПолучитьПараметрыРасчетаАвтозаказаПоАптекеЛок(Аптека);
	ПараметрыРасчета.Вставить("ВозвращатьПромежуточныеТаблицы",ВозвращатьПромежуточныеТаблицы);
	ПараметрыРасчета.Вставить("ДополнительноеУсловие",ДополнительноеУсловие);
		
	//ТаблицаРасчетаСкорости = ПолучитьТаблицуРасчетаСкоростейПродажЛок(Аптека,ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод),ДополнительноеУсловие);
	ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажВремянка(Аптека,ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод),ДополнительноеУсловие);
	Если ТаблицаРасчетаСкорости.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////
	ТЗКуминКумаксРасчетная = Неопределено;
	ТаблицаАвтозаказа = Неопределено;
	//Рассчитаем Qmin-Qmax
	Если ВыборРасчета = 1 или ВыборРасчета = 3 Тогда
		ТЗКуминКумаксРасчетная = РассчитатьQminQmaxДляАптекиЛок(ТаблицаРасчетаСкорости, Аптека, ПараметрыРасчета);
	КонецЕсли;
	
	
	//////////////////////////////////////////////////////////////////////////////////
	//Рассчитаем Автозаказ
	Если ВыборРасчета = 2 или ВыборРасчета = 3 Тогда
		ТаблицаАвтозаказа = РасчетАвтозаказаОкончательныйЛок(ТаблицаРасчетаСкорости, Аптека,ПараметрыРасчета);
		ОбновитьДатуРасчетаКоэффициентаЛок(Аптека, "Автозаказ");
	КонецЕсли;	
	
	Возврат Новый Структура("ТЗКуминКумаксРасчетная,ТаблицаАвтозаказа",ТЗКуминКумаксРасчетная,ТаблицаАвтозаказа);
	
	
	
КонецФункции


Процедура ОбновитьДатуРасчетаКоэффициентаЛок(Аптека, Реквизит)  
	
	НаборЗаписей = РегистрыСведений.ДатыРасчетаКоэффициентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Склад.Установить(Аптека);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Склад = Аптека;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если Реквизит = "ABC" Тогда
		Запись.ДатаРасчетаABC = ТекущаяДата();
	ИначеЕсли Реквизит = "Автозаказ" Тогда
		Запись.ДатаРасчетаАвтозаказа = ТекущаяДата();
	Иначе
		Запись.ДатаРасчетаСкорости = ТекущаяДата();
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьСтруктуруДатРасчетовКоэффициентовЛок(Аптека) 
	
	СтруктураВозврата = Новый Структура("ДатаРасчетаABC, ДатаРасчетаСкорости, ДатаРасчетаАвтозаказа", '00010101', '00010101', '00010101');
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыРасчетаКоэффициентов.ДатаРасчетаABC,
	|	ДатыРасчетаКоэффициентов.ДатаРасчетаСкорости,
	|	ДатыРасчетаКоэффициентов.ДатаРасчетаАвтозаказа
	|ИЗ
	|	РегистрСведений.ДатыРасчетаКоэффициентов КАК ДатыРасчетаКоэффициентов
	|ГДЕ
	|	ДатыРасчетаКоэффициентов.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Аптека);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураВозврата;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0];
	КонецЕсли;	
	
КонецФункции
//----------------------------------- конец функций и процедур общего модуля ------------------------------


Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	ЭлементыФормы.Лог.ДобавитьСтроку("Начало обработки: " + ТекущаяДата());

	Если ВыборРасчета = 0 Тогда
		РасчетABC();
		Возврат;
	КонецЕсли;

	Если РасчетПоВсем = Ложь Тогда
		ID = Лог("Автозаказ - расчет рекламы");
		РасчетАвтозаказаПоРекламнымАкциям();
		Лог(id);
		Возврат;
	КонецЕсли;
	
	
	Помечено = 0;
	ТекАптека = Неопределено;
	Если (ВыборРасчета = 3 или ВыборРасчета = 2 или ВыборРасчета = 1 ) И РасчетПоВсем Тогда 
		
		Для Каждого ЭлементСписка Из СписокАптек Цикл
			Если ЭлементСписка.Пометка Тогда
				ТекАптека = ЭлементСписка.Значение;
				Помечено = Помечено + 1;
			КонецЕсли; 
		КонецЦикла;
		Если Помечено > 1 Тогда 
			Предупреждение("Для расчета Автозаказа и Qmin/Qmax можно выбрать только одну аптеку!");
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если Помечено = 0 Тогда
		Предупреждение("Не выбрана аптека для расчета!");	
		Возврат;
	КонецЕсли;
	//
	ВыбАптека = ТекАптека;
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Аптека",ТекАптека);
	ПараметрыРасчета.Вставить("ДатаТочкиОтсчета",ВыбДата);
	ПараметрыРасчета.Вставить("ВыборРасчета",ВыборРасчета);
	ПараметрыРасчета.Вставить("ВозвращатьПромежуточныеТаблицы",ВозвращатьПромежуточныеТаблицы);
	ПараметрыРасчета.Вставить("ДополнительноеУсловие",ДополнительноеУсловие);
	////для расчета Кумин Кумакс
	//ПараметрыРасчета.Вставить("КоэффициентПоставщика", КоэффициентПоставщика);
	//ПараметрыРасчета.Вставить("МинимальныйПорогСреднейСкорости", МинимальныйПорогСреднейСкорости);
	//ПараметрыРасчета.Вставить("ПорогСреднейСкорости", ПорогСреднейСкорости);
	//ПараметрыРасчета.Вставить("Ксз", Ксз);
	//ПараметрыРасчета.Вставить("КоэффициентУвеличенияПотребности", КоэффициентУвеличенияПотребности);
	//ПараметрыРасчета.Вставить("УчитыватьНЗ", УчитыватьНЗ);
			
	
	//СтруктураВозврата = Автозаказ.РасчетАвтозаказаСервер(ПараметрыРасчета);
	Если ТекАптека.РасчетАвтозаказаБезПересчетаСкоростей = Истина Тогда
		ТаблицаАвтозаказа = РасчетАвтозаказаОкончательныйЛокБезПересчетаСкоростей(ТекАптека,ПараметрыРасчета);
		ТЧ.Загрузить(ТаблицаАвтозаказа);
		ЭлементыФормы.НадписьДопИнформация.ЦветТекста = Новый Цвет(0,0,0);
		ЭлементыФормы.НадписьДопИнформация.Заголовок = " Рассчитан новый автозаказ за " + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		ЭлементыФормы.НадписьКоличествоНедостоверных.Заголовок = "Количество недостоверных для данной аптеки не расчитывается";
		МассивНедостоверных = ТЧ.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
		КоличествоНедостоверныхПозиций = МассивНедостоверных.Количество();		
	Иначе
		СтруктураВозврата = РасчетАвтозаказаСерверЛок(ПараметрыРасчета);
		
		
		ТЗКуминКумаксРасчетная = СтруктураВозврата.ТЗКуминКумаксРасчетная;
		ТаблицаАвтозаказа = СтруктураВозврата.ТаблицаАвтозаказа;
		Если НЕ СтруктураВозврата.ТЗКуминКумаксРасчетная = Неопределено Тогда
			ТЗКуминКумаксРасчетная.Колонки.Удалить("ТоварСсылка");
			ЭлементыФормы.ТЗРезультатКуМинКуМакс.Значение = ТЗКуминКумаксРасчетная;
			ЭлементыФормы.ТЗРезультатКуМинКуМакс.СоздатьКолонки();
			
		КонецЕсли;
		
		Если НЕ СтруктураВозврата.ТаблицаАвтозаказа = Неопределено Тогда
			ТЗ = ТаблицаАвтозаказа;	
			ТЧ.Загрузить(ТаблицаАвтозаказа);
			ЭлементыФормы.НадписьДопИнформация.ЦветТекста = Новый Цвет(0,0,0);
			ЭлементыФормы.НадписьДопИнформация.Заголовок = " Рассчитан новый автозаказ за " + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
			
			МассивНедостоверных = ТЧ.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
			КоличествоНедостоверныхПозиций = МассивНедостоверных.Количество();
			ЭлементыФормы.НадписьКоличествоНедостоверных.Заголовок = "Количество недостоверных = " + КоличествоНедостоверныхПозиций ;
			ОбновитьДатуРасчетаКоэффициентаЛок(ТекАптека, "Автозаказ");

		КонецЕсли;
	КонецЕсли;
	
	МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
	СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
	
	ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
	ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
	СуммаЛекарств = 0;
	СуммаПарафарм = 0;
	Для каждого стр из ТЗТипыДляЦО Цикл
		Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
			СуммаЛекарств = стр.Сумма;
		ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
			СуммаПарафарм = стр.Сумма;
		КонецЕсли;
	КонецЦикла;

	
	//ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(ТекАптека);			
	
	ТекДата   = ТекущаяДата();
	Сотрудник = ПараметрыСеанса.ТекущийСотр;
	
	Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи();
	//НаборЗаписей.Отбор.Период.Установить(ТекДата);
	//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
	//НаборЗаписей.Отбор.Склад.Установить(ТекАптека);
	
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() = 0 Тогда
	//	Запись = НаборЗаписей.Добавить();
	Запись.Период       = ТекДата;
	Запись.Пользователь = Сотрудник;
	Запись.Склад        = ТекАптека;
	//Иначе
	//	Запись = НаборЗаписей[0];
	//КонецЕсли;
	
	Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
	Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
	Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
	Запись.СуммаЗаказа				= СуммаЗаказа;
	Запись.СуммаВыручки				= 0;//ДопДанные.СуммаВыручки;
	Запись.ДнейБезЗаказа			= 0;//ДопДанные.ДнейЗаказа;
	Запись.ДатаСозданияЗаписи		= ТекущаяДата();
	Запись.ИдентификаторЗаписи 		= Новый УникальныйИдентификатор();
	Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
	Запись.НомерТаймСлота			= 1;
	Запись.СуммаЗаказаЛС			= СуммаЛекарств;
	Запись.СуммаЗаказаПФ			= СуммаПарафарм;
	ДанныеSAS = SAS_Обмен.ПолучитьШапкуРасчетаПотребности(ТекАптека.Код,НачалоДня(ТекущаяДата()));
	Запись.КоличествоКЗаказуSAS = ДанныеSAS.КоличествоКЗаказуSAS;
	Запись.СуммаЗаказаSAS = ДанныеSAS.СуммаЗаказаSAS;

	
	СуммаВыручки = 0;//ДопДанные.СуммаВыручки;
	ДнейБезЗаказа = 0;//ДопДанные.ДнейЗаказа;
	ИдентификаторЗаписи = Запись.ИдентификаторЗаписи;
	РодительЗаписи = Запись.ИдентификаторЗаписи;
	
	
	Попытка
		Запись.Записать();
	Исключение
		
	КонецПопытки;
	
	
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьНулевыеДаты(Кнопка)
	
	//Индекс = ТЗ.Количество() - 1; 
	//Пока Индекс >= 0 Цикл 
	//	стр = ТЗ.Получить(Индекс);
	//	
	//	Если стр.Продажи = 0 и стр.ОстатокНаКонец = 0 Тогда
	//		ТЗ.Удалить(Индекс); 
	//	КонецЕсли;
	//	
	//	Индекс = Индекс - 1; 
	//	
	//КонецЦикла;
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПериоды(Кнопка)
	
	к = 21;
	Пока к > 0 Цикл	
		Если к%7 = 0 Тогда
			Сообщить("---- граница ----");
		КонецЕсли;
		Сообщить(НачалоДня(ТекущаяДата()) - к*24*60*60);
		к=к-1;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодобратьАптеки()
	
	Обработка = Обработки.ОтборПоФильтру.Создать();
	Обработка.ТекстЗапроса = "ВЫБРАТЬ
	                         |	МестаХранения.Ссылка
	                         |ИЗ
	                         |	Справочник.МестаХранения КАК МестаХранения
	                         |ГДЕ
	                         |	МестаХранения.ПометкаУдаления = ЛОЖЬ
	                         |	И МестаХранения.АссортиментноеПланирование = ИСТИНА
	                         |	И МестаХранения.АвтозаказНаОфисе = ИСТИНА
	                         |{ГДЕ
	                         |	МестаХранения.Ссылка.* КАК Аптека}";
	
	ФормаПодбора=Обработка.ПолучитьФорму("Форма");
	
	РезультатСписок = ФормаПодбора.ОткрытьМодально();
	Если РезультатСписок= Неопределено Тогда
		ПРедупреждение("Ничего не выбрано!");
		Возврат;
	КонецЕсли;	
	
	СписокАптек.ЗагрузитьЗначения(РезультатСписок.ВыгрузитьЗначения());
	СписокАптек.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

Процедура ПолучитьСписокАптек()
	
	СписокАптек.Очистить();
	
	Если СписокВыбораАптек = 0 Тогда
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХранения.Ссылка КАК Аптека,
		|	МестаХранения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.АссортиментноеПланирование = ИСТИНА
		|	И МестаХранения.АвтозаказНаОфисе = ИСТИНА
		//|	И МестаХранения.БрендыДляАвтозаказа." + ДеньНедели + " = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	ИначеЕсли СписокВыбораАптек = 1 Тогда

		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХранения.Ссылка КАК Аптека,
		|	МестаХранения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.АвтозаказРекламныхАкций = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	ИначеЕсли СписокВыбораАптек = 2 Тогда
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХранения.Ссылка КАК Аптека,
		|	МестаХранения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыРасчетаКоэффициентов КАК Даты
		|		ПО (Даты.Склад = МестаХранения.Ссылка)
		|			И (Даты.ДатаРасчетаАвтозаказа > &ТекДата)
		|ГДЕ
		|	МестаХранения.АссортиментноеПланирование = ИСТИНА
		|	И МестаХранения.АвтозаказНаОфисе = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	ИначеЕсли СписокВыбораАптек = 3 Тогда
		
		ПодобратьАптеки();
		Возврат;
		
	КонецЕсли;
		  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	Запрос.Текст = ТХТ;
		
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр Из Рез Цикл
	
		СписокАптек.Добавить(стр.Аптека,стр.Наименование,Ложь);
	
	КонецЦикла;
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	ДеньНедели = Формат(ТекущаяДата(),"ДФ=дддд");

	ПолучитьСписокАптек();
	
	ВыборРасчета = 0;
	ВыборРасчетаПриИзменении(ЭлементыФормы.ВыборРасчета);
	//РасчетПоВсемПриИзменении(ЭлементыФормы.РасчетПоВсем);
	ПорогСреднейСкорости = 0.25;
	МинимальныйПорогСреднейСкорости = 0.1;
	КоэффициентПоставщика = 1.5;
	// Старый рабочий запрос без учета продаж за период
				
    //ТЧ.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанель2Действие(Кнопка)
	СписокАптек.ЗаполнитьПометки(Истина);
КонецПроцедуры

Процедура КоманднаяПанель2Действие1(Кнопка)
	СписокАптек.ЗаполнитьПометки(Ложь);
КонецПроцедуры

Процедура УстановитьТекстЗапросаПостроителя()

		Если РасчетПоВсем = Ложь Тогда
		
			Построитель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫРАЗИТЬ(ТЗПродаж.КоличествоРасход / &КоличествоДнейПродаж * &КоэффициентСкоростиПродаж КАК ЧИСЛО(12, 0)) КАК КоличествоРасход,
			|	ТЗПродаж.Товар,
			|	ТЗПродаж.Склад
			|ПОМЕСТИТЬ ВыборкаПродаж
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(ПартииЖНВЛСОбороты.КолвоРасход / ПартииЖНВЛСОбороты.Партия.К) КАК КоличествоРасход,
			|		ПартииЖНВЛСОбороты.Товар КАК Товар,
			|		ПартииЖНВЛСОбороты.Склад КАК Склад
			|	ИЗ
			|		РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Регистратор, Склад В (&СписокСкладов)) КАК ПартииЖНВЛСОбороты
			|	ГДЕ
			|		ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.РеализацияККМ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ПартииЖНВЛСОбороты.Товар,
			|		ПартииЖНВЛСОбороты.Склад) КАК ТЗПродаж
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Выборка.Аптека,
			|	Выборка.Товар,
			|	ВЫБОР
			|		КОГДА СУММА(Выборка.НЗ_2) > 0
			|			ТОГДА СУММА(Выборка.НЗ_2)
			|		ИНАЧЕ СУММА(Выборка.НЗ_1)
			|	КОНЕЦ КАК НЗ
			|ПОМЕСТИТЬ ВыборкаМатрица
			|ИЗ
			|	(ВЫБРАТЬ
			|		МатрицаНЗ.Аптека КАК Аптека,
			|		МатрицаНЗ.Товар КАК Товар,
			|		МатрицаНЗ.НЗ КАК НЗ_1,
			|		0 КАК НЗ_2
			|	ИЗ
			|		РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			|	ГДЕ
			|		МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_1)
			|		И МатрицаНЗ.РекламнаяАкция = ИСТИНА
			|		И МатрицаНЗ.НЗ > 0
			|		И МатрицаНЗ.Аптека В(&СписокСкладов)
			|	{ГДЕ
			|		МатрицаНЗ.Товар.* КАК Товар}
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		МатрицаНЗ.Аптека,
			|		МатрицаНЗ.Товар,
			|		0,
			|		МатрицаНЗ.НЗ
			|	ИЗ
			|		РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			|	ГДЕ
			|		МатрицаНЗ.ВидНЗ = ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2)
			|		И МатрицаНЗ.РекламнаяАкция = ИСТИНА
			|		И МатрицаНЗ.НЗ > 0
			|		И МатрицаНЗ.Аптека В(&СписокСкладов)
			|	{ГДЕ
			|		МатрицаНЗ.Товар.* КАК Товар}) КАК Выборка
			|
			|СГРУППИРОВАТЬ ПО
			|	Выборка.Аптека,
			|	Выборка.Товар
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫборка.Склад КАК Склад,
			|	ВЫборка.Товар.Код КАК КодТовара,
			|	ВЫборка.Товар,
			|	ВЫборка.КолвоОстаток,
			|	ВЫборка.НЗ,
			|	ВЫборка.МинЗак,
			|	ВЫборка.Заказать,
			|	ВЫборка.КоличествоРасход КАК Продажи
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
			|				ТОГДА Матрица.Аптека
			|			ИНАЧЕ ПартииЖНВЛСОстатки.Склад
			|		КОНЕЦ КАК Склад,
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
			|				ТОГДА Матрица.Товар
			|			ИНАЧЕ ПартииЖНВЛСОстатки.Товар
			|		КОНЕЦ КАК Товар,
			|		ПартииЖНВЛСОстатки.колвоостаток КАК КолвоОстаток,
			|		Матрица.НЗ КАК НЗ,
			|		ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ КАК МинЗак,
			|		ЕСТЬNULL(ВыборкаПродаж.КоличествоРасход, 0) КАК КоличествоРасход,
			|		ВЫБОР
			|			КОГДА ВыборкаПродаж.КоличествоРасход <= Матрица.НЗ
			|					ИЛИ ВыборкаПродаж.КоличествоРасход ЕСТЬ NULL 
			|				ТОГДА ВЫБОР
			|						КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
			|							ТОГДА Матрица.НЗ
			|						ИНАЧЕ ВЫБОР
			|								КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < Матрица.НЗ
			|									ТОГДА ВЫБОР
			|											КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
			|												ТОГДА ВЫБОР
			|														КОГДА Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
			|															ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
			|														ИНАЧЕ Матрица.НЗ - ПартииЖНВЛСОстатки.колвоостаток
			|													КОНЕЦ
			|											ИНАЧЕ Матрица.НЗ - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
			|										КОНЕЦ
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					КОНЕЦ
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) = 0
			|						ТОГДА ВыборкаПродаж.КоличествоРасход
			|					ИНАЧЕ ВЫБОР
			|							КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0) < ВыборкаПродаж.КоличествоРасход
			|								ТОГДА ВЫБОР
			|										КОГДА ЕСТЬNULL(ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ, 0) > 0
			|											ТОГДА ВЫБОР
			|													КОГДА ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток < ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
			|														ТОГДА ПартииЖНВЛСОстатки.Товар.МинимальныйЗаказ
			|													ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ПартииЖНВЛСОстатки.колвоостаток
			|												КОНЕЦ
			|										ИНАЧЕ ВыборкаПродаж.КоличествоРасход - ЕСТЬNULL(ПартииЖНВЛСОстатки.колвоостаток, 0)
			|									КОНЕЦ
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				КОНЕЦ
			|		КОНЕЦ КАК Заказать
			|	ИЗ
			|		ВыборкаМатрица КАК Матрица
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				Остатки.Склад КАК Склад,
			|				Остатки.Товар КАК Товар,
			|				СУММА(Остатки.КолвоОстаток / Остатки.Партия.К) КАК колвоостаток
			|			ИЗ
			|				РегистрНакопления.ПартииЖНВЛС.Остатки(, склад В (&СписокСкладов) {(Товар).*}) КАК Остатки
			|			ГДЕ
			|				Остатки.КолвоОстаток > 0
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Остатки.Товар,
			|				Остатки.Склад) КАК ПартииЖНВЛСОстатки
			|			ПО (ПартииЖНВЛСОстатки.Склад = Матрица.Аптека)
			|				И (ПартииЖНВЛСОстатки.Товар = Матрица.Товар)
			//|				И (ПартииЖНВЛСОстатки.колвоостаток > 0)
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПродаж КАК ВыборкаПродаж
			|			ПО Матрица.Аптека = ВыборкаПродаж.Склад
			|				И Матрица.Товар = ВыборкаПродаж.Товар
			|) КАК ВЫборка
			|ГДЕ
			|	ВЫборка.Заказать > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Склад,
			|	ВЫборка.Товар.Наименование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаПродаж ;УНИЧТОЖИТЬ ВыборкаМатрица";
		ИНАЧЕ
			Построитель.Текст = "ВЫБРАТЬ
			|	АП.Ссылка.Код КАК КодТовара
			|
			|ИЗ
			|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			|{ГДЕ
			|	АП.Ссылка.* КАК Товар}";
		КонецЕсли;
		
		Построитель.ЗаполнитьНастройки();
	
КонецПроцедуры

Процедура ВыборРасчетаПриИзменении(Элемент)
	
	ЭлементыФормы.ОтборПостроителя.Видимость = Ложь;
	Если Элемент.Значение = 0 Тогда
		ЭлементыФормы.ТекстОбработки.Заголовок = "РАСЧЕТ ABC";
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.НастройкиABC;
	ИначеЕсли Элемент.Значение = 1 Тогда
		ЭлементыФормы.ТекстОбработки.Заголовок = "РАСЧЕТ Qmin - Qmax";
	Иначе
		ЭлементыФормы.ТекстОбработки.Заголовок = "РАСЧЕТ АВТОЗАКАЗА";
		Если РасчетПоВсем = Ложь Тогда
			ЭлементыФормы.ОтборПостроителя.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекстЗапросаПостроителя();
	
	РасчетПоВсемПриИзменении(ЭлементыФормы.РасчетПоВсем);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПримерОтбора(Кнопка)
	
	ТЗВРем = Новый ТаблицаЗначений;
	ТЗВРем.Колонки.Добавить("Период");
	ТЗВРем.Колонки.Добавить("Остаток");
	
	стр = ТЗВРем.Добавить();
	стр.Период = 1;
	стр.Остаток = 10;
	
	стр = ТЗВРем.Добавить();
	стр.Период = 2;
	стр.Остаток = 5;	
	
	стр = ТЗВРем.Добавить();
	стр.Период = 3;
	стр.Остаток = 3;	
	
	стр = ТЗВРем.Добавить();
	стр.Период = 4;
	стр.Остаток = 1;
	
	ТЗВРем.Колонки.Добавить("Хкол");
	Хкол=тзврем.ВыгрузитьКолонку("период");
	тзврем.ЗагрузитьКолонку(Хкол,"Хкол");
	
	
	
	Отбор = Новый Структура;
	//СписокПериодов = Новый СписокЗначений;
	//СписокПериодов.Добавить("Период",4);
	//СписокПериодов.Добавить("Хкол",1);
	//Отбор.Вставить("Период",СписокПериодов);
	Отбор.Вставить("Период",1);
	Отбор.Вставить("Хкол",4);
	Нашли = ТЗВРем.НайтиСтроки(Отбор);
	Сообщить(Нашли.Количество());
	
	
КонецПроцедуры

Процедура СоздатьФайлЗаказаНажатие(Элемент)
	
	СохранитьРасчетЗаказа();
	
	Если ТЧ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Приоритет = 5;
	//ВвестиЧисло(Приоритет,"Задайте приоритет распределения",3,0);	
	
	Приоритет = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДопРеквизитыМестХранений.ПриоритетПриРаспределенииЗаказа
	               |ИЗ
	               |	Справочник.ДопРеквизитыМестХранений КАК ДопРеквизитыМестХранений
	               |ГДЕ
	               |	ДопРеквизитыМестХранений.Аптека = &Аптека";
	Запрос.УстановитьПараметр("Аптека",ВыбАптека);
	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		Приоритет = Выборка.ПриоритетПриРаспределенииЗаказа;
	КонецЕсли;	
	
	НомерТаймСлота = 1;
	ВвестиЧисло(НомерТаймСлота,"Задайте номер тайм-слота",3,0);		
	
	Параметры = Новый Структура;
	Параметры.Вставить("Период",НачалоДня(ТекущаяДата()));
	Параметры.Вставить("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Параметры.Вставить("ИдентификаторЗаписи",Новый УникальныйИдентификатор(ИдентификаторЗаписи));
	Параметры.Вставить("Склад",ВыбАптека);
	Параметры.Вставить("Приоритет",Приоритет);
	Параметры.Вставить("Результат",Ложь);
	Параметры.Вставить("НомерТаймСлота",НомерТаймСлота);
	
	РаботаСЗаказамиСервер.СоздатьЗаявкуНаТовар(Параметры);
	
	//Если Параметры.Результат = Ложь Тогда
	Для каждого стр из Параметры.Сообщения Цикл
		Сообщить(стр.Значение);	
	КонецЦикла;
	
	
	//ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	  |	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
	//	  |	ЗаявкаНаТовар.Дата КАК Дата
	//	  |ИЗ
	//	  |	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
	//	  |ГДЕ
	//	  |	ЗаявкаНаТовар.Склад = &Склад
	//	  |	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки
	//	  |
	//	  |УПОРЯДОЧИТЬ ПО
	//	  |	Дата УБЫВ,
	//	  |	НомерЗаявкиАптеки УБЫВ";
	//	  
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("Склад",ВыбАптека);
	//Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказОфиса);
	//Рез = Запрос.Выполнить().Выгрузить();
	//
	//Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
	//	НовыйНомер = "АЗ-0000001";
	//Иначе
	//	Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) Тогда //Зачем два автозаказа в один день
	//		Возврат;
	//	КонецЕсли;
	//	ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
	//	НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
	//	НовыйНомер = Лев("АЗ-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
	//КонецЕсли;
	//
	//ИмяФайла = "dem" + Формат(ВыбАптека.Код,"ЧГ=0") + "_" + НовыйНомер + "_"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	//ВремФайл = Константы.КаталогФТП.Получить() + "Out\demtemp.dbf";
	//ВыгружаемыйФайл = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".dbf" ;
	//ВыгружаемыйАрхив = Константы.КаталогФТП.Получить() + "Out\" + ИмяФайла + ".zip" ;
	//ДатаЗаказа = ТекущаяДата();
	//ОтветственныйКод = ПараметрыСеанса.ТекущийСотр.Код;
	//
	//ДБФ = Новый XBASE;
	//ДБФ.поля.Добавить("NDOC","S",20);
	//ДБФ.поля.Добавить("DDOC","D",,);
	//ДБФ.поля.Добавить("IDGOOD","N",10,0);
	//ДБФ.поля.Добавить("QNT","N",10,0);
	//ДБФ.поля.Добавить("IDTYPE","N",10,0);
	//ДБФ.поля.Добавить("SOTR","N",5,0);
	//ДБФ.СоздатьФайл(ВремФайл);
	//
	//Для Каждого стр из ТЧ ЦИкл
	//	Если стр.Заказать > 0 и стр.Исключение = Ложь Тогда	
	//		ДБФ.Добавить();
	//		ДБФ.NDOC=НовыйНомер;
	//		ДБФ.DDOC=ДатаЗаказа;
	//		ДБФ.IDGOOD=стр.Код;
	//		ДБФ.QNT=стр.Заказать;
	//		ДБФ.IDTYPE= 5;
	//		ДБФ.SOTR = ОтветственныйКод;
	//		ДБФ.Записать();
	//	КонецЕсли;
	//КонецЦикла;
	//ДБФ.ЗакрытьФайл();
	//
	//ПереместитьФайл(ВремФайл,ВыгружаемыйФайл);
	//ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ВыгружаемыйФайл,ВыгружаемыйАрхив);
	//УдалитьФайлы(ВыгружаемыйФайл);
	//Предупреждение("Заказ выгружен в файл: " + ВыгружаемыйАрхив);
	
	
КонецПроцедуры

Функция ЗадатьВопрос(ТекстВопроса)
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(ТекстВопроса, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;	
		КонецЕсли;
	
	
КонецФункции

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	КОЛИЧЕСТВО(*) КАК Количество
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад";
		  
		              
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Запрос.УстановитьПараметр("Склад",ВыбАптека);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Получить(0).Количество > 0 Тогда
		Отказ = ЗадатьВопрос("Остался невыгруженный точечный заказ. Вы действительно хотите закрыть обработку?");
	Иначе
		Отказ = ЗадатьВопрос("Закрыть обработку?");
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасчетПоВсемПриИзменении(Элемент)
	
	Если ВыборРасчета = 2 Тогда
		Если Элемент.Значение = Ложь Тогда
			ЭлементыФормы.ТекстОбработкиПродолжение.Заголовок = "( по рекламам )";
			ЭлементыФормы.ОтборПостроителя.Видимость = Истина;
			ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаАвтозаказПоРекламе;
		Иначе
			ЭлементыФормы.ТекстОбработкиПродолжение.Заголовок = "( по всем позициям )";
			ЭлементыФормы.ОтборПостроителя.Видимость = Ложь;
			ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаОбщийАвтозаказ;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ТекстОбработкиПродолжение.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДанныеВМатрицеНажатие(Элемент)
	      
	ФормаИзменения = ЭтотОбъект.ПолучитьФорму("РедактированиеМатрицы");
	ФормаИзменения.ВладелецФормы = ЭтаФорма;
	ФормаИзменения.ВыбАптека = ВыбАптека;
	ФормаИзменения.КуМин = ЭлементыФормы.ТЧ.ТекущаяСтрока.КуМин;
	ФормаИзменения.КуМакс = ЭлементыФормы.ТЧ.ТекущаяСтрока.КуМакс;
	ФормаИзменения.НЗ = ЭлементыФормы.ТЧ.ТекущаяСтрока.НЗ;
	ФормаИзменения.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара);
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("A","A");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("B","B");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("C","C");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("D","D");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("I","I");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("G","G");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("S","S");
	ФормаИзменения.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("X","X");
	ФормаИзменения.ГруппаАП = ЭлементыФормы.ТЧ.ТекущаяСтрока.ГруппаАП;
	ФормаИзменения.ОткрытьМодально();
	ЭлементыФормы.ТЧ.ТекущаяСтрока.НЗ = ФормаИзменения.НЗ;
	ЭлементыФормы.ТЧ.ТекущаяСтрока.КуМин = ФормаИзменения.КуМин;
	ЭлементыФормы.ТЧ.ТекущаяСтрока.КуМакс = ФормаИзменения.КуМакс ;
	ЭлементыФормы.ТЧ.ТекущаяСтрока.ГруппаАП = ФормаИзменения.ГруппаАП;
	ФормаИзменения = Неопределено;
	ТекущийЭлемент = ЭлементыФормы.ТЧ;
	

КонецПроцедуры

Процедура ТЗПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Попытка
		Если (ДанныеСтроки.ГруппаАП="I") Тогда
			ОформлениеСтроки.ЦветФона = ЦветаТаблицыРезультата.ЦветГруппыI;
		ИначеЕсли (ДанныеСтроки.Остаток=0) и (ДанныеСтроки.Заказать>0) Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255, 200, 200);
		ИначеЕсли ТекДата < ДанныеСтроки.СрокДействияРекламнойАкции 
			и ДанныеСтроки.ПризнакРекламнойАкции = Истина 
			и ДанныеСтроки.НЗ > 0 Тогда
			ОформлениеСтроки.Ячейки.Товар.ЦветФона = ЦветаТаблицыРезультата.РекламнаяАкция;
		КонецЕсли;
		
		
		Если ДанныеСтроки.Остаток = 0 и ДанныеСтроки.ДнейПродаж < 15 Тогда
			Если ДанныеСтроки.ГруппаАП = "A" или ДанныеСтроки.ГруппаАП = "B" или ДанныеСтроки.ГруппаАП = "C" Тогда
		    	ОформлениеСтроки.Ячейки.Остаток.ЦветФона = Новый Цвет(255, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки.Исключение = Истина Тогда
			ОформлениеСтроки.Ячейки.Заказать.ЦветФона = ЦветаТаблицыРезультата.Исключение;
		КонецЕсли;
		
		Если ДанныеСтроки.НедостовернаяПозиция = Истина Тогда
			ОформлениеСтроки.ЦветФона = ЦветаТаблицыРезультата.Недостоверный;
		КонецЕсли;
		
		Если ДанныеСтроки.Активный = Истина тогда
			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		 	ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки  =1;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки  =0;
		КонецЕсли;		
		
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ОбнулитьЗаказИИзменитьГруппу(Группа)
	
	    ТекТовар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара);
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ВыбАптека);
		МассивИзмерений.Вставить("Товар",ТекТовар);
		
		МассивИзменений = Новый Структура;
		МассивИзменений.Вставить("ГруппаАПИтог",Группа);
		МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
		МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
		//Записываем изменения
		
		//Блокировка = Новый БлокировкаДанных;
		//БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
		//БлокировкаМатрицы.УстановитьЗначение("Аптека",ВыбАптека);
		//БлокировкаМатрицы.УстановитьЗначение("Товар",ТекТовар);
		//Блокировка.Заблокировать();	
	
	
		
		ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);		
		ЭлементыФормы.ТЧ.ТекущаяСтрока.Заказать = 0;
		ЭлементыФормы.ТЧ.ТекущаяСтрока.Сумма = 0 ;
		ЭлементыФормы.ТЧ.ТекущаяСтрока.ГруппаАП = Группа ;		
		
КонецПроцедуры

Процедура ГорячаяКнопкаДляСанакоеваНажатие(Элемент)
	
  	ОбнулитьЗаказИИзменитьГруппу("I");
	
	
КонецПроцедуры

Процедура ИзменитьГруппуНаDНажатие(Элемент)
	
	ОбнулитьЗаказИИзменитьГруппу("D");
	
КонецПроцедуры


Процедура ПанельНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если (РасчетПоВсем = Ложь) и (ТекущаяСтраница = 0) Тогда
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаАвтозаказПоРекламе;
	ИначеЕсли (РасчетПоВсем = Истина)  и (ТекущаяСтраница = 1) Тогда
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы.СтраницаОбщийАвтозаказ;
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

Процедура ТЗПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	 ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
	 Если (ИмяТекКол="Заказать") Тогда
		 
		 
		ТекСтр = ЭлементыФормы.ТЧ.ТекущаяСтрока;
		Если ТекСтр.Заказать*ТекСтр.Цена > ТекСтр.Продажи*ТекСтр.Цена*3 и ТекСтр.Заказать*ТекСтр.Цена >=5000  Тогда
			Если Вопрос("Слишком большой заказ. Продолжить?",РежимДиалогаВопрос.ДаНет,0) = КодВозвратаДиалога.Нет Тогда
				ТекСтр.Заказать = ПредКоличествоЗаказа;
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		 
		
		Если ТекСтр.Активный = Ложь Тогда
			ТекСтр.Заказать = 0;
		КонецЕсли;
		ТекСтр.Сумма = ТекСтр.Заказать*ТекСтр.Цена;
		
		Если ТекСтр.Заказать > 0 или ТекСтр.ЧистаяПотребностьSAS > 0 Тогда
			ТекСтр.ФильтрСравнениеПотребностей = Истина;
		Иначе
			ТекСтр.ФильтрСравнениеПотребностей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
		
		//ТХТ = "ВЫБРАТЬ
		//|	0 КАК Код,
		//|	ВЫРАЗИТЬ("" "" КАК СТРОКА(150)) КАК Товар,
		//|	"""" КАК ГруппаАП,
		//|	0 КАК КуМин,
		//|	0 КАК КуМакс,
		//|	0 КАК НЗ,
		//|	0 КАК Продажи,
		//|	0 КАК ВПути,
		//|	0 КАК Остаток,
		//|	0 КАК Заказать,
		//|	0 КАК ДнейПродаж,
		//|	0 КАК СредняяСкорость,
		//|	0 КАК Дефектура,
		//|	0 КАК Цена,
		//|	0 КАК Сумма";
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = ТХТ;
		//ТЗ = Запрос.Выполнить().Выгрузить();
		//ТЗ.Колонки["Код"].Ширина = 10;
		//ТЗ.Колонки["Товар"].Ширина = 100;
		//ТЗ.Колонки["ГруппаАП"].Ширина = 5;
		//ТЗ.Колонки["КуМин"].Ширина = 10;
		//ТЗ.Колонки["КуМакс"].Ширина = 10;
		//ТЗ.Колонки["Продажи"].Ширина = 10;
		//ТЗ.Колонки["ВПути"].Ширина = 10;
		//ТЗ.Колонки["Остаток"].Ширина = 10;		
		//ТЗ.Колонки["Заказать"].Ширина = 10;
		//ТЗ.Колонки["ДнейПродаж"].Ширина = 10;		
		//ТЗ.Колонки["СредняяСкорость"].Ширина = 10;		
		//ТЗ.Колонки["НЗ"].Ширина = 10;
		//ТЗ.Колонки["Цена"].Ширина = 10;
		//ТЗ.Колонки["Дефектура"].Ширина = 10;		
		//ТЗ.Колонки["Сумма"].Ширина = 10;	
		//
		//ЭлементыФормы.ТЗ.СоздатьКолонки();
		//ЭлементыФормы.ТЗ.Колонки["Сумма"].ОтображатьИтогиВПодвале = Истина;	
	
КонецПроцедуры

Процедура ТочечныйЗаказНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	//Если ТекСтрока.Активный = Ложь Тогда
	//	Предупреждение("Позиций неактивна. Точечный заказ невозможен.");
	//	Возврат;
	//КонецЕсли;
	ФормаИзменения = ЭтотОбъект.ПолучитьФорму("ТочечныйЗаказ");
	ФормаИзменения.ВладелецФормы = ЭтаФорма;
	ФормаИзменения.Аптека = ВыбАптека;
	ФормаИзменения.РаботаЧерезКонвертер = ВыбАптека.РаботаЧерезКонвертер;
	ФормаИзменения.КодФирмы366 = ВыбАптека.Фирма.Код366;
	ФормаИзменения.ИндексТекСтроки = ТЧ.Индекс(ТекСтрока);
	ФормаИзменения.ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.КодТовара);
	ФормаИзменения.ОткрытьМодально();
	
	ТекущийЭлемент = ЭлементыФормы.ТЧ;

КонецПроцедуры

Процедура ОтформатироватьОбласть(Макет,Текст,Ширина,НовыйТекст,ФорматнаяСтрока=Неопределено);
	
	Область=Макет.НайтиТекст(Текст,,Макет.Область("ШапкаТаблицы"));
	Если Область<>Неопределено тогда
		Область.Текст=СтрЗаменить(Область.Текст,Текст,НовыйТекст);
		Область.ШиринаКолонки=Ширина;
		Если ФорматнаяСтрока<>Неопределено тогда
			Макет.Область("R"+Область.Верх+"C"+Область.Лево+
			":R"+Макет.ВысотаТаблицы+"C"+Область.Лево).Формат=ФорматнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЗаказНажатие(Элемент)
	
		
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	УточненныйЗаказ.Поставщик.Наименование КАК Поставщик,
	      |	УточненныйЗаказ.Товар.Наименование КАК Товар,
	      |	УточненныйЗаказ.Цена,
	      |	УточненныйЗаказ.СрокГодности,
	      |	УточненныйЗаказ.Количество,
	      |	УточненныйЗаказ.Количество * УточненныйЗаказ.Цена КАК Сумма
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Поставщик,
	      |	Товар
	      |ИТОГИ
	      |	СУММА(Сумма)
	      |ПО
	      |	ОБЩИЕ,
	      |	Поставщик";
		  
		              
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТХТ;
	Построитель.Параметры.Вставить("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Построитель.Параметры.Вставить("Склад",ВыбАптека);
	
	Построитель.Выполнить();
	Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	Построитель.ОформитьМакет();
	Макет=Построитель.Макет;
	ОтформатироватьОбласть(Макет,"Поставщик",20,"Поставщик",Неопределено);
	ОтформатироватьОбласть(Макет,"Товар",50,"Товар",Неопределено);
	ОтформатироватьОбласть(Макет,"СрокГодности",10,"Срок годности","ДФ=dd.MM.yyyy");
	ОтформатироватьОбласть(Макет,"Цена",7,"Цена","ЧЦ=10; ЧДЦ=2");
	ОтформатироватьОбласть(Макет,"Количество",7,"Кол-во","ЧЦ=10; ЧДЦ=0");
	ОтформатироватьОбласть(Макет,"Сумма",10,"Сумма","ЧЦ=10; ЧДЦ=2");
	Макет.Область("ШапкаТаблицы").РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Макет.Область("ШапкаТаблицы").ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
	Макет.Область("ШапкаТаблицы").ВертикальноеПоложение=ВертикальноеПоложение.Центр;
	Макет.АвтоМасштаб = Истина;
	
	Построитель.Макет=Макет;
	Построитель.Вывести();
		

КонецПроцедуры

Процедура F5Нажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Предупреждение("Строка неопределена!");	
		Возврат;
	КонецЕсли;
	ТекБренд = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.КодТовара).Бренд;
	Если ТекБренд.Пустая() Тогда
		Предупреждение("Нельзя менять группу по позициям с пустым брендом.");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите перевести в группу «I» все позиции с брендом " + СокрЛП(ТекБренд.Наименование)+ " ?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	

	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	Матрица.Товар.Код как КодТовара,
	      |	Матрица.Товар КАК Товар
	      |ИЗ
	      |	РегистрСведений.Матрица КАК Матрица
	      |ГДЕ
	      |	Матрица.Аптека = &Аптека и Матрица.Товар.Бренд = &Бренд
	      |";

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Бренд",ТекБренд);
	Запрос.УстановитьПараметр("Аптека",ВыбАптека);
	ТаблицаКодов = Запрос.Выполнить().Выгрузить();
	н=0;
	
	//Блокировка = Новый БлокировкаДанных;
	//БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
	//БлокировкаМатрицы.УстановитьЗначение("Аптека",ВыбАптека);
	//Блокировка.Заблокировать();		
	
	Для каждого стр из ТаблицаКодов Цикл
		н=н+1;
		
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ВыбАптека);
		МассивИзмерений.Вставить("Товар",стр.Товар);
		
		МассивИзменений = Новый Структура;
		МассивИзменений.Вставить("ГруппаАПИтог","I");
		МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
		МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
		//Записываем изменения
		ОМ16_ИзменитьЗначениеВМатрице("Матрица",МассивИзмерений,МассивИзменений);			
		
		
		
		НайденнаяСтрока = ТЧ.Найти(стр.КодТовара,"КодТовара");
		Если НайденнаяСтрока = Неопределено Тогда
		Иначе
			НайденнаяСтрока.ГруппаАП = "I";
			НайденнаяСтрока.Заказать = 0;
			НайденнаяСтрока.Сумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ТЗПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если РольДоступна("УдаленныйЗаказ")=Истина Тогда 
		Предупреждение("Данной роли добавление позиций запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ФормаДобавления = ЭтотОбъект.ПолучитьФорму("ДобавлениеПозицииВЗаказ");
	ФормаДобавления.РежимВыбора = Истина;
	ФормаДобавления.ВладелецФормы = ЭтаФорма;
	ФормаДобавления.ВыбАптека = ВыбАптека;
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("A","A");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("B","B");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("C","C");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("D","D");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("I","I");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("G","G");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("S","S");
	ФормаДобавления.ЭлементыФормы.ГруппаАП.СписокВыбора.Добавить("X","X");
	ФормаДобавления.ГруппаАП = "D";
	ФормаДобавления.ОткрытьМодально();
    Отказ = Истина;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	//ЗначениеВыбора = Новый Структура;
	Если ТипЗнч(ЗначениеВыбора) = Тип("РегистрСведенийКлючЗаписи.СохраненныеРасчетыЗаказов") Тогда
		ВосстановитьРасчетЗаказа(ЗначениеВыбора);
	Иначе
		//ФормаОбработчик = неопределено;
		//ЕстьФормаОбработчик = ЗначениеВыбора.Свойство("ФормаОбработчик",ФормаОбработчик);
		//Если ЕстьФормаОбработчик = Истина Тогда
		//	Если ФормаОбработчик = "ФормаРедактированияМатрицы" Тогда
		//		НайденнаяСтрока = ТЧ.Найти(ЗначениеВыбора["Код"],"Код");
		//		Если НЕ НайденнаяСтрока = Неопределено Тогда 
		//			НайденнаяСтрока.НЗ = ЗначениеВыбора["НЗ"];	
		//			НайденнаяСтрока.ГруппаАП = ЗначениеВыбора["ГруппаАПИтог"];					
		//			НайденнаяСтрока.КуМин = ЗначениеВыбора["КуМин"];
		//			НайденнаяСтрока.КуМакс = ЗначениеВыбора["КуМакс"];
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//Иначе
			НайденнаяСтрока = ТЧ.Найти(ЗначениеВыбора["КодТовара"],"КодТовара");
			Если НайденнаяСтрока = Неопределено Тогда
				ТекСтрока = ТЧ.Добавить();
				ТекСтрока.КодТовара = ЗначениеВыбора["КодТовара"];
				ТекСтрока.Товар = ЗначениеВыбора["Товар"];
				ТекСтрока.НЗ = ЗначениеВыбора["НЗ"];
				ТекСтрока.Заказать = ЗначениеВыбора["Заказать"];
				ТекСтрока.ГруппаАП = ЗначениеВыбора["ГруппаАП"];
				ТекСтрока.ТоварСсылка = ЗначениеВыбора["ТоварСсылка"];
			Иначе
				Предупреждение("Данная позиция уже имеется в таблице заказа");
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьКодСчетчикаДозаказов()
	
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Счетчики");
			БлокировкаМатрицы.УстановитьЗначение("Счетчик","Дозаказ");
			БлокировкаМатрицы.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();	

			МЗ = РегистрыСведений.Счетчики.СоздатьМенеджерЗаписи();
			МЗ.Счетчик = "Дозаказ";
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.Значение = МЗ.Значение + 1;	
			Иначе
				МЗ.Счетчик = "Дозаказ";
				МЗ.Значение = 1;
			КонецЕсли;
			МЗ.Записать();
			ЗафиксироватьТранзакцию();
			Возврат МЗ.Значение;
		Исключение
			ОтменитьТранзакцию();
			Возврат -1;
		КонецПопытки;
		
	
	
КонецФункции


Процедура ЗаполнитьШапкуДокументаЗаказа(Док,Поставщик)
	

	Док.Поставщик=Поставщик;
	Док.Склад = ВыбАптека;
	Док.Статус=Перечисления.СтатусЗаказаПоставщику.Создан;
	Док.Дата=ТекущаяДата();
		
	СтрИзм=Док.Изменения.Добавить();
	СтрИзм.Дата=ТекущаяДата();
	СтрИзм.КомментарийИзменения="Точечный заказ из автозаказа";
	СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
	СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.ВводНового;
	
КонецПроцедуры

Функция ПроверитьПривязкуАптекиКПоставщику(Поставщик,Аптека)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрактыИАптеки.Аптека,
	               |	КонтрактыИАптеки.КодАптекиВнешн
	               |ИЗ
	               |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	               |ГДЕ
	               |	КонтрактыИАптеки.Аптека = &Аптека
	               |	И КонтрактыИАптеки.Владелец.Владелец = &Поставщик";
	
	Запрос.УстановитьПараметр("Аптека",Аптека);			   
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		Если ПустаяСтрока(Выборка.КодАптекиВнешн) или СокрЛП(Выборка.КодАптекиВнешн) = "0" Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецФункции


Процедура ВыгрузитьЗаказПоставщику(Док)
		//Нашли = Справочники.КодыАптек.НайтиПоРеквизиту("Аптека",Док.Склад,,Док.Поставщик);
		//Если Нашли = Справочники.КодыАптек.ПустаяСсылка() Тогда
		//	//Предупреждение("На эту аптеку нет кода поставщика! Документ не выгружен!");
		//	Возврат;
		//КонецЕсли;
		Если ПроверитьПривязкуАптекиКПоставщику(Док.Поставщик,Док.Склад) = Ложь Тогда
			ЭлементыФормы.Лог.ДобавитьСтроку("---> На эту аптеку нет кода поставщика! Документ не выгружен!");
			//Предупреждение("На эту аптеку нет кода поставщика! Документ не выгружен!");
			Возврат;
		КонецЕсли;
			
		
		
		//Если (Док.Поставщик.АвтоматическаяВыгрузкаЗаказов = Истина) Тогда
			Если Док.ВыгрузитьПоставщику() = Истина Тогда
				Док.Записать(РежимЗаписиДокумента.Проведение);
				ЭлементыФормы.Лог.ДобавитьСтроку("---> ОК! Выгружен");
				//ОМ21_ЗаказыПоставщикам.ОМ21_УменьшитьКоличестваВПрайсе(Док);
			Иначе
				ЭлементыФормы.Лог.ДобавитьСтроку("---> НЕ выгружен.");
			КонецЕсли;
		//Иначе
		//	ЭлементыФормы.Лог.ДобавитьСтроку("---> НЕ выгружен (не включена автовыгрузка)");
		//КонецЕсли;
		
КонецПроцедуры

Процедура ОчиститьРегистрТочечногоЗаказа()
	
	НаборЗаписей = РегистрыСведений.УточненныйЗаказ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр); 
	НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
	Для к=1 по 4 Цикл
		Попытка
			НаборЗаписей.Записать();
			ОчиститьСообщения();
			Прервать;
		Исключение
			Сообщить("Не удалось очистить регистр точечного заказа",СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Предупреждение("Попытка очистки №" + к,3);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьРегистрТочечногоЗаказаПоПоставщику(Поставщик)
	
	НаборЗаписей = РегистрыСведений.УточненныйЗаказ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр); 
	НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
	НаборЗаписей.Отбор.Поставщик.Установить(Поставщик);

	Для к=1 по 4 Цикл
		Попытка
			НаборЗаписей.Записать();
			ОчиститьСообщения();
			Прервать;
		Исключение
			Сообщить("Не удалось очистить регистр точечного заказа по поставщику: " + Поставщик,СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Предупреждение("Попытка очистки №" + к,3);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыЗаказа(СтрокиЗаказа,Поставщик)
	
	Док=Документы.Заказ.СоздатьДокумент();
	ЗаполнитьШапкуДокументаЗаказа(Док,Поставщик);
	
	Для каждого стр из СтрокиЗаказа Цикл
		НоваяСтрока = Док.Товар.Добавить();
		НоваяСтрока.Товар = стр.Товар;
		НоваяСтрока.Количество = стр.Количество;
		НоваяСтрока.Цена = стр.Цена;
		НоваяСтрока.Сумма = стр.Сумма;
		НоваяСтрока.КодТовараПоставщика = стр.КодТовараПоставщика;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.НаименованиеТовараПоставщика;
		НоваяСтрока.СрокГодности = стр.СрокГодности;
	КонецЦикла;
	
	Док.СуммаДок = Док.Товар.Итог("Сумма");
	Док.Записать(РежимЗАписиДокумента.Запись);
	ЭлементыФормы.Лог.ДобавитьСтроку("Создан: " + Док  + " "  + Поставщик);
	
	ОчиститьРегистрТочечногоЗаказаПоПоставщику(Поставщик);
	
	ВыгрузитьЗаказПоставщику(Док);
	
	
	
КонецПроцедуры

Процедура СоздатьОтложенныеЗаказы(СтрокиЗаказа,Поставщик)
	
	
	Для каждого Поз из СтрокиЗаказа Цикл
		КодСчетчика = ПолучитьКодСчетчикаДозаказов();
		Если КодСчетчика = - 1 тогда 
			Продолжить;
		КонецЕсли;
		
		
		Запись = РегистрыСведений.Дозаказы.СоздатьМенеджерЗаписи();
		Запись.КодПозиции = КодСчетчика;
		Запись.Аптека = ВыбАптека;
		Запись.Поставщик = Поставщик;
		Запись.ДатаСоздания = ТекущаяДата();
		Запись.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Запись.Товар	= Поз.Товар;
		Запись.КодТовараПоставщика = Поз.КодТовараПоставщика;
		Запись.НаименованиеТовараПоставщика = Поз.НаименованиеТовараПоставщика;
		Запись.Количество = Поз.Количество;
		Запись.Цена = Поз.Цена;
		
		Записали = Истина;
		Попытка
			Запись.Записать();
		Исключение
			Записали = Ложь;
		КонецПопытки;
		
		Если Записали Тогда  //Очищаем точечный заказ
			
			НаборЗаписей = РегистрыСведений.УточненныйЗаказ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр); 
			НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
			НаборЗаписей.Отбор.Поставщик.Установить(Поставщик);
			НаборЗаписей.Отбор.Товар.Установить(Поз.Товар);
			НаборЗаписей.Отбор.КодТовараПоставщика.Установить(Поз.КодТовараПоставщика);
			НаборЗаписей.Отбор.Цена.Установить(Поз.Цена);
			НаборЗаписей.Отбор.СрокГодности.Установить(Поз.СрокГодности);
			
			Для к=1 по 4 Цикл
				Попытка
					НаборЗаписей.Записать();
					ОчиститьСообщения();
					Прервать;
				Исключение
					Сообщить("Не удалось очистить регистр точечного заказа по поставщику: " + Поставщик,СтатусСообщения.Важное);
					Сообщить(ОписаниеОшибки());
					Предупреждение("Попытка очистки №" + к,3);
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;

КонецПроцедуры


Процедура КоманднаяПанельРезультатаВыгрузить(Кнопка)
	
	Отказ = ЗадатьВопрос("Вы действительно хотите выгрузить заказы поставщикам?");
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
		ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	КонтрактыИАптеки.Владелец.Владелец КАК Поставщик,
		      |	КонтрактыИНастройки.НастройкаОбмена.СуммаМинимальногоЗаказа КАК СуммаМинимальногоЗаказа,
		      |	КонтрактыИНастройки.НастройкаОбмена.АвтоВыгрузкаЗаказов как АвтоВыгрузкаЗаказов
		      |ИЗ
		      |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
		      |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
		      |ГДЕ
		      |	КонтрактыИАптеки.Активность = ИСТИНА
		      |	И КонтрактыИАптеки.Аптека = &Склад
		      |	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
		      |	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",ВыбАптека);
	ТЗСумм = Запрос.Выполнить().Выгрузить();
	
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	УточненныйЗаказ.Поставщик КАК Поставщик,
	      |	УточненныйЗаказ.Товар.Код КАК КодТовара,
	      |	УточненныйЗаказ.Товар КАК Товар,
	      |	УточненныйЗаказ.КодТовараПоставщика КАК КодТовараПоставщика,
	      |	УточненныйЗаказ.Цена,
	      |	УточненныйЗаказ.Количество,
	      |	УточненныйЗаказ.Количество * УточненныйЗаказ.Цена КАК Сумма,
		  |	УточненныйЗаказ.СрокГодности,
	      |	ЕСТЬNULL(Прайс.Товар, """") КАК НаименованиеТовараПоставщика
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайс
	      |		ПО (Прайс.Поставщик = УточненныйЗаказ.Поставщик)
	      |			И (Прайс.Код = УточненныйЗаказ.КодТовараПоставщика)
	      |			И (УточненныйЗаказ.Цена = Прайс.Цена)
	      |			И (УточненныйЗаказ.СрокГодности = Прайс.СрокГодности)
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	УточненныйЗаказ.Поставщик.Наименование,
	      |	Товар";
		  
		              
	//Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Запрос.УстановитьПараметр("Склад",ВыбАптека);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗСуммЗаказа = Рез.Скопировать(,"Поставщик,Сумма");
	ТЗСуммЗаказа.Свернуть("Поставщик","Сумма");	
	
	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.ЛогОбработки;
	ЭлементыФормы.Лог.Очистить();
	ЭлементыФормы.Лог.ДобавитьСтроку("Создание и выгрузка заказов поставщикам:");
	Рез.Сортировать("Поставщик");
	
	
	Для каждого стр из ТЗСуммЗаказа Цикл
		НайденнаяСтрока = ТЗСумм.Найти(стр.Поставщик,"Поставщик");	
		Если НайденнаяСтрока = Неопределено Тогда //Такого не должно быть, но  вдруг уже аптеку отключили от поставщика
			ЭлементыФормы.Лог.ДобавитьСтроку("по данной аптеке не найдена привязка к поставщику : " + стр.Поставщик + ". Заказ не будет создан");
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Поставщик",стр.Поставщик);
		СтрокиЗаказа = Рез.НайтиСтроки(Отбор);
		
		Если стр.Сумма >= НайденнаяСтрока.СуммаМинимальногоЗаказа Тогда
			СоздатьДокументыЗаказа(СтрокиЗаказа,стр.Поставщик);
		Иначе
			СоздатьОтложенныеЗаказы(СтрокиЗаказа,стр.Поставщик);
			ЭлементыФормы.Лог.ДобавитьСтроку("по поставщику : " + стр.Поставщик + " создан отложенный заказ.");
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	//
	//Док=Документы.Заказ.СоздатьДокумент();
	//ВремПоставщик = Справочники.Поставщики.ПустаяСсылка(); 
	//Для каждого стр из Рез Цикл
	//	
	//	Поставщик=стр.Поставщик;
	//	КодТовара = стр.КодТовара;
	//	Товар = стр.Товар;
	//	Количество = стр.Количество;
	//	Цена = стр.Цена;
	//	Сумма = стр.Сумма;
	//	КодТовараПоставщика = стр.КодТовараПоставщика;
	//	ТоварПоставщика = стр.НаименованиеТовараПоставщика;
	//	
	//	Если (ВремПоставщик <> Поставщик)  Тогда
	//		Если НЕ ВремПоставщик.Пустая() Тогда
	//			Записан = Ложь;
	//			Пока Записан = Ложь Цикл
	//				Попытка
	//					Док.СуммаДок = Док.Товар.Итог("Сумма");
	//					Док.Записать(РежимЗАписиДокумента.Запись);
	//					ЭлементыФормы.Лог.ДобавитьСтроку("Создан: " + Док  + " "  + ВремПоставщик);
	//					Записан = Истина;
	//				Исключение
	//					Записан = Ложь;
	//				КонецПопытки; 
	//			КонецЦикла;				
	//			ВыгрузитьЗаказПоставщику(Док);
	//			Док=Документы.Заказ.СоздатьДокумент();
	//		КонецЕсли;
	//		ЗаполнитьШапкуДокументаЗаказа(Док,Поставщик);
	//		ВремПоставщик = Поставщик;
	//	КонецЕсли;
	//	
	//		//------- Заполняем табл. часть документа		
	//		Стр = Док.Товар.Добавить();
	//		Стр.Товар=Товар;
	//		Стр.Количество=Количество;
	//		Стр.Цена = Цена;
	//		Стр.Сумма = Сумма;
	//		Стр.КодТовараПоставщика = КодТовараПоставщика;
	//		Стр.НаименованиеТовараПоставщика = ТоварПоставщика;

	//КонецЦикла;
	//
	//Записан = Ложь;
	//Пока Записан = Ложь Цикл
	//	Попытка
	//		Док.СуммаДок = Док.Товар.Итог("Сумма");
	//		Док.Записать(РежимЗАписиДокумента.Запись);
	//		ЭлементыФормы.Лог.ДобавитьСтроку("Создан: " + Док + " "  + ВремПоставщик);
	//		Записан = Истина;
	//	Исключение
	//		Записан = Ложь;
	//	КонецПопытки; 
	//КонецЦикла;				
	//ВыгрузитьЗаказПоставщику(Док);
	//
	//ОчиститьРегистрТочечногоЗаказа();
	
	
КонецПроцедуры

Процедура УдалитьБрендИзМатрицыНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Предупреждение("Строка неопределена!");	
		Возврат;
	КонецЕсли;
	ТекТовар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.КодТовара);
	ТекБренд = ТекТовар.Бренд;
	Если ТекБренд.Пустая() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Удалить текущую позицию из матрицы?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			//Блокировка = Новый БлокировкаДанных;
			//БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
			//БлокировкаМатрицы.УстановитьЗначение("Аптека",ВыбАптека);
			//БлокировкаМатрицы.УстановитьЗначение("Товар",ТекТовар);
			//Блокировка.Заблокировать();	
			
			МассивИзмерений = Новый Структура;
			МассивИзмерений.Вставить("Аптека",ВыбАптека);
			МассивИзмерений.Вставить("Товар",ТекТовар);
			ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
			ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);
			ТЧ.Удалить(ТекСтрока);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите удалить ВЕСЬ бренд " + СокрЛП(ТекБренд.Наименование)+ " из матрицы ?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Матрица.Товар.Код как КодТовара,
	|	Матрица.Товар КАК Товар
	|ИЗ
	|	РегистрСведений.Матрица КАК Матрица
	|ГДЕ
	|	Матрица.Аптека = &Аптека и Матрица.Товар.Бренд = &Бренд
	|";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Бренд",ТекБренд);
	Запрос.УстановитьПараметр("Аптека",ВыбАптека);
	ТаблицаКодов = Запрос.Выполнить().Выгрузить();
	
	
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	н=0;
	
	//Блокировка = Новый БлокировкаДанных;
	//БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
	//БлокировкаМатрицы.УстановитьЗначение("Аптека",ВыбАптека);
	//Блокировка.Заблокировать();	
	
	Для каждого стр из ТаблицаКодов Цикл
		н=н+1;
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ВыбАптека);
		МассивИзмерений.Вставить("Товар",стр.Товар);
		ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
		ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);
		
		НайденнаяСтрока = ТЧ.Найти(стр.КодТовара,"КодТовара");
		Если НайденнаяСтрока = Неопределено Тогда
		Иначе
			СписокУдаляемыхСтрок.Добавить(НайденнаяСтрока);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Для Каждого ССУС из СписокУдаляемыхСтрок цикл
		ТЧ.Удалить(ССУС.Значение);
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьМатрицыВыбранныхАптек(Кнопка)

	    Отказ = ЗадатьВопрос("Вы действительно хотите очистить матрицы аптек?");
		Если Отказ = Истина Тогда
			Возврат;
		КонецЕсли;
	
	
		ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		      |	Матрица.Товар КАК Товар
		      |ПОМЕСТИТЬ МАТРИЦАДЛЯОЧИСТКИ
		      |ИЗ
		      |	РегистрСведений.Матрица КАК Матрица
		      |ГДЕ
		      |	Матрица.Товар.УчаствуетВАП = ЛОЖЬ
		      |	И Матрица.Аптека = &Аптека
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			  |	МАТРИЦАДЛЯОЧИСТКИ.Товар,
		      |	ЕСТЬNULL(Остатки.Товар, 1) КАК Поле1
		      |ИЗ
		      |	МАТРИЦАДЛЯОЧИСТКИ КАК МАТРИЦАДЛЯОЧИСТКИ
		      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		      |			ПартииЖНВЛСОстатки.Товар КАК Товар
		      |		ИЗ
		      |			РегистрНакопления.ПартииЖНВЛС.Остатки(
		      |					,
		      |					Склад = &Аптека
		      |						И товар В
		      |							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |								МАТРИЦАДЛЯОЧИСТКИ.Товар
		      |							ИЗ
		      |								МАТРИЦАДЛЯОЧИСТКИ)) КАК ПартииЖНВЛСОстатки
		      |		ГДЕ
		      |			ПартииЖНВЛСОстатки.КолвоОстаток > 0) КАК Остатки
		      |		ПО (Остатки.Товар = МАТРИЦАДЛЯОЧИСТКИ.Товар)
		      |ГДЕ
		      |	ЕСТЬNULL(Остатки.Товар, 1) = 1
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ МАТРИЦАДЛЯОЧИСТКИ";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	
	Для Каждого ЭлементСписка Из СписокАптек Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ЭлементСписка.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
    	//Запрос.Параметры.Очистить();
		Запрос.УстановитьПараметр("ДатаОстатка",КонецГода(ТекущаяДата()));
		Запрос.УстановитьПараметр("Аптека",ЭлементСписка.Значение);
		Рез = Запрос.Выполнить().Выгрузить();	  
		Состояние("Очистка матрицы " + ЭлементСписка.Представление);
		н=0;
		МассивИзмерений = Новый Структура;
		МассивИзмерений.Вставить("Аптека",ЭлементСписка.Значение);

		//Блокировка = Новый БлокировкаДанных;
		//БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Матрица");
		//БлокировкаМатрицы.УстановитьЗначение("Аптека",ЭлементСписка.Значение);
		//Блокировка.Заблокировать();			
		
		//НачатьТранзакцию();
		Для каждого стр из Рез Цикл
			МассивИзмерений.Вставить("Товар",стр.Товар);
			ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
			ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);			
			н=н+1;
		КонецЦикла;
		//ЗафиксироватьТранзакцию();	  
		
	КонецЦикла;
	Состояние("");
	Предупреждение("Очистка матриц произведена!",5);
	
КонецПроцедуры

Процедура АптекаМатрицыQminQmaxПриИзменении(Элемент)
	
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	МатрицаQminQmax.Аптека,
	      |	МатрицаQminQmax.ГруппаАП КАК ГруппаАП,
	      |	МатрицаQminQmax.ГруппаXYZ КАК ГруппаXYZ,
	      |	МатрицаQminQmax.ЦенаМин КАК ЦенаМин,
	      |	МатрицаQminQmax.ЦенаМакс,
	      |	МатрицаQminQmax.Qmin,
	      |	МатрицаQminQmax.Qmax
	      |ИЗ
	      |	Справочник.МатрицаQminQmax КАК МатрицаQminQmax
	      |ГДЕ
	      |	МатрицаQminQmax.Аптека = &Аптека
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ГруппаАП,
	      |	ЦенаМин,
	      |	ГруппаXYZ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",АптекаМатрицыQminQmax);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.ПустаяСсылка());
		РезЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ТЗМатрицаQminQmax = РезЗапроса.Выгрузить();
	ЭлементыФормы.ТЗМатрицаQminQmax.СоздатьКолонки();
	
КонецПроцедуры

Процедура СписокВыбораАптекПриИзменении(Элемент)
	ПолучитьСписокАптек();
КонецПроцедуры

Процедура ОсновныеДействияФормыОчиститьУстаревшиеРекламныеАкции(Кнопка)
	
	Отказ = ЗадатьВопрос("Вы действительно хотите очистить устаревшую рекламу?");
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      |	Матрица.Аптека КАК Аптека,
	      |	Матрица.Товар КАК Товар,
	      |	Матрица.ВидНЗ КАК ВидНЗ
	      |ИЗ
	      |	РегистрСведений.МатрицаНЗ КАК Матрица
	      |ГДЕ
	      |	Матрица.НЗ > 0
	      |	И Матрица.РекламнаяАкция = ИСТИНА
	      |	И Матрица.СрокДействияРекламы < &ТекДата
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Аптека";
	
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Рез = Запрос.Выполнить().Выгрузить();
	КолСтрок = Рез.Количество();
	Если КолСтрок = 0 Тогда
		Предупреждение("Нет данных для очистки");
		Возврат;
	КонецЕсли;
	н=0;
	НачатьТранзакцию();
	МассивИзмерений = Новый Структура;
	//МассивИзменений = Новый Структура;
	//МассивИзменений.Вставить("НЗ",0);
	//МассивИзменений.Вставить("КтоВнесВМатрицу",ПараметрыСеанса.ТекущийСотр);
	//МассивИзменений.Вставить("ДатаВнесенияВМатрицу",ТекущаяДата());
	
	Для каждого стр из Рез Цикл
		н=н+1;
		Если н%100 = 0 Тогда
			ЗафиксироватьТранзакцию();
			Состояние("Очищено " + н + " из " + КолСтрок );
			НачатьТранзакцию();
		КонецЕсли;
		
		МассивИзмерений.Вставить("Аптека",стр.Аптека);
		МассивИзмерений.Вставить("Товар",стр.Товар);
		МассивИзмерений.Вставить("ВидНЗ",стр.ВидНЗ);
        ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Предупреждение("Выполнено.");
	
	
КонецПроцедуры

Процедура ВосстановитьРасчетЗаказа(КлючЗаписи)
	
	ТЧ.Очистить();
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(КлючЗаписи.Период);
	
	Для Каждого Измерение Из Метаданные.РегистрыСведений.СохраненныеРасчетыЗаказов.Измерения Цикл
		НаборЗаписей.Отбор[Измерение.Имя].Установить(КлючЗаписи[Измерение.Имя]);
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		Запись = НаборЗаписей[0];
		
		ДнейБезЗаказа = Запись.ДнейБезЗаказа;
		СуммаВыручки = Запись.СуммаВыручки;
		РодительЗаписи = Запись.РодительЗаписи;
		СтатусЗаказа = Запись.СтатусРасчета;

		//Если ПараметрыСеанса.ТекущийСотр <> Запись.Пользователь или НачалоДня(ТекущаяДата()) <> Запись.Период Тогда
		//	ИдентификаторЗаписи = Новый УникальныйИдентификатор();
		//Иначе
			ИдентификаторЗаписи = Запись.ИдентификаторЗаписи;
		//КонецЕсли;
		ПримененРасчетSAS = Запись.ПримененРасчетSAS;
		
		
		СохраненныйЗаказ = Запись.РасчетЗаказа.Получить();
		//Если СохраненныйЗаказ.Колонки.Количество() <> ЭлементыФормы.ТЧ.Колонки.Количество() Тогда
		//	Предупреждение("ВНИМАНИЕ! Формат сохраненного заказа отличается от текущего! Возможна некорректная загрузка");
//			Возврат;
		//КонецЕсли;
		Если СохраненныйЗаказ.Колонки.Найти("КодТовара") = Неопределено Тогда
			ТЧ.Очистить();
			Для каждого стрЗак из СохраненныйЗаказ Цикл
				НС = ТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НС,стрЗак);
				НС.КодТовара = стрЗак.Код;
			КонецЦикла;
		Иначе
			ТЧ.Загрузить(СохраненныйЗаказ);
		КонецЕсли;
		
		ВыбАптека = Запись.Склад;
		
		УправлениеДоступностью();
		
		Если КлючЗаписи.Период < НачалоДня(ТекущаяДата()) Тогда
			ЭлементыФормы.НадписьДопИнформация.ЦветТекста = Новый Цвет(255,0,0);
			ЭлементыФормы.НадписьДопИнформация.Заголовок = " ВНИМАНИЕ !!! ВОССТАНОВЛЕН СТАРЫЙ РАСЧЕТ АВТОЗАКАЗА ( " + Формат(КлючЗаписи.Период,"ДФ=dd.MM.yyyy") +" )";
		Иначе
			ЭлементыФормы.НадписьДопИнформация.ЦветТекста = Новый Цвет(0,0,0);
			ЭлементыФормы.НадписьДопИнформация.Заголовок = " Восстановлен заказ за  " + Формат(КлючЗаписи.Период,"ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		МассивНедостоверных = ТЧ.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
		КоличествоНедостоверныхПозиций = МассивНедостоверных.Количество();
		ЭлементыФормы.НадписьКоличествоНедостоверных.Заголовок = "Количество недостоверных = " + КоличествоНедостоверныхПозиций;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АССОРТИМЕНТНЫЙ_ПЛАН.Код как КодТовара, ЗакупочнаяЦена
		               |ИЗ
		               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		               |ГДЕ
		               |	АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦена > 0";
		ЦеныАП = Запрос.Выполнить().Выгрузить();
		ЦеныАП.Индексы.Добавить("КодТовара");
		Для каждого стр из ТЧ Цикл
			Если стр.Заказать > 0 Тогда
				НайденнаяСтрока = ЦеныАП.Найти(стр.КодТовара,"КодТовара")	;
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					стр.ЦенаАП = НайденнаяСтрока.ЗакупочнаяЦена;
					стр.СуммаАП = стр.ЦенаАП * стр.Заказать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВыбАптека.ИнтернетАптека = Истина Тогда 
			
			Если КлючЗаписи.Период = НачалоДня(ТекущаяДата()) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Выборка2.КодТовара КАК КодТовара,
				               |	МАКСИМУМ(Выборка2.ЧистаяПотребностьSAS) КАК ЧистаяПотребностьSAS,
				               |	МАКСИМУМ(Выборка2.МаксимальныйЗапасSAS) КАК МаксимальныйЗапасSAS,
				               |	МАКСИМУМ(Выборка2.СтраховойЗапасSAS) КАК СтраховойЗапасSAS,
				               |	МАКСИМУМ(Выборка2.ТочкаЗаказаSAS) КАК ТочкаЗаказаSAS,
				               |	Выборка2.Активный КАК Активный,
				               |	Выборка2.Товар КАК Товар,
				               |	МАКСИМУМ(Выборка2.ГруппаАПSAS) КАК ГруппаАПSAS
				               |ИЗ
				               |	(ВЫБРАТЬ
				               |		SAS_ПотребностьАптек.ТоварКод КАК КодТовара,
				               |		SAS_ПотребностьАптек.ЧистаяПотребность КАК ЧистаяПотребностьSAS,
				               |		SAS_ПотребностьАптек.МаксимальныйЗапас КАК МаксимальныйЗапасSAS,
				               |		SAS_ПотребностьАптек.СтраховойЗапас КАК СтраховойЗапасSAS,
				               |		SAS_ПотребностьАптек.ТочкаЗаказа КАК ТочкаЗаказаSAS,
				               |		АП.УчаствуетВАП КАК Активный,
				               |		АП.Наименование КАК Товар,
				               |		"""" КАК ГруппаАПSAS
				               |	ИЗ
				               |		РегистрСведений.SAS_ПотребностьАптек КАК SAS_ПотребностьАптек
				               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
				               |			ПО SAS_ПотребностьАптек.ТоварКод = АП.Код
				               |	ГДЕ
				               |		SAS_ПотребностьАптек.СкладКод = &СкладКод
				               |		И SAS_ПотребностьАптек.ДатаРасчета В
				               |				(ВЫБРАТЬ
				               |					МАКСИМУМ(Даты.Дата) КАК МаксДата
				               |				ИЗ
				               |					РегистрСведений.SAS_ДатыРасчетаПотребности КАК Даты
				               |				ГДЕ
				               |					НАЧАЛОПЕРИОДА(Даты.Дата, ДЕНЬ) = &Дата
				               |					И Даты.КодАптеки = &СкладКод)
				               |	
				               |	ОБЪЕДИНИТЬ ВСЕ
				               |	
				               |	ВЫБРАТЬ
				               |		SAS_ABCРасчет.ТоварКод,
				               |		0,
				               |		0,
				               |		0,
				               |		0,
				               |		АП.УчаствуетВАП,
				               |		АП.Наименование,
				               |		SAS_ABCРасчет.Группа
				               |	ИЗ
				               |		РегистрСведений.SAS_ABCРасчет КАК SAS_ABCРасчет
				               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
				               |			ПО SAS_ABCРасчет.ТоварКод = АП.Код
				               |	ГДЕ
				               |		SAS_ABCРасчет.СкладКод = &СкладКод
				               |		И SAS_ABCРасчет.Дата В
				               |				(ВЫБРАТЬ
				               |					МАКСИМУМ(РегистрСведений.SAS_ABCРасчет.Дата)
				               |				ИЗ
				               |					РегистрСведений.SAS_ABCРасчет)) КАК Выборка2
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	Выборка2.КодТовара,
				               |	Выборка2.Активный,
				               |	Выборка2.Товар
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	Выборка2.КодТовара";
				Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
				Запрос.УстановитьПараметр("СкладКод",ВыбАптека.Код);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Выборка2.КодТовара КАК КодТовара,
				               |	СУММА(Выборка2.ЧистаяПотребностьSAS) КАК ЧистаяПотребностьSAS,
				               |	СУММА(Выборка2.МаксимальныйЗапасSAS) КАК МаксимальныйЗапасSAS,
				               |	СУММА(Выборка2.СтраховойЗапасSAS) КАК СтраховойЗапасSAS,
				               |	СУММА(Выборка2.ТочкаЗаказаSAS) КАК ТочкаЗаказаSAS,
				               |	Выборка2.Активный КАК Активный,
				               |	Выборка2.Товар КАК Товар,
				               |	МАКСИМУМ(Выборка2.ГруппаАПSAS) КАК ГруппаАПSAS
				               |ИЗ
				               |	(ВЫБРАТЬ
				               |		SAS_ПотребностьАптек.ТоварКод КАК КодТовара,
				               |		SAS_ПотребностьАптек.ЧистаяПотребность КАК ЧистаяПотребностьSAS,
				               |		SAS_ПотребностьАптек.МаксимальныйЗапас КАК МаксимальныйЗапасSAS,
				               |		SAS_ПотребностьАптек.СтраховойЗапас КАК СтраховойЗапасSAS,
				               |		SAS_ПотребностьАптек.ТочкаЗаказа КАК ТочкаЗаказаSAS,
				               |		АП.УчаствуетВАП КАК Активный,
				               |		АП.Наименование КАК Товар,
				               |		"""" КАК ГруппаАПSAS
				               |	ИЗ
				               |		РегистрСведений.SAS_ПотребностьАптекАрхив КАК SAS_ПотребностьАптек
				               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
				               |			ПО SAS_ПотребностьАптек.ТоварКод = АП.Код
				               |	ГДЕ
				               |		SAS_ПотребностьАптек.Дата В
				               |				(ВЫБРАТЬ
				               |					МАКСИМУМ(Выборка.Дата)
				               |				ИЗ
				               |					РегистрСведений.SAS_ДатыРасчетаПотребности КАК Выборка
				               |				ГДЕ
				               |					Выборка.Дата МЕЖДУ &Дата1 И &Дата2)
				               |		И SAS_ПотребностьАптек.СкладКод = &СкладКод
				               |	
				               |	ОБЪЕДИНИТЬ ВСЕ
				               |	
				               |	ВЫБРАТЬ
				               |		SAS_ABCРасчет.ТоварКод,
				               |		0,
				               |		0,
				               |		0,
				               |		0,
				               |		АП.УчаствуетВАП,
				               |		АП.Наименование,
				               |		SAS_ABCРасчет.Группа
				               |	ИЗ
				               |		РегистрСведений.SAS_ABCРасчет КАК SAS_ABCРасчет
				               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
				               |			ПО SAS_ABCРасчет.ТоварКод = АП.Код
				               |	ГДЕ
				               |		SAS_ABCРасчет.СкладКод = &СкладКод
				               |		И SAS_ABCРасчет.Дата В
				               |				(ВЫБРАТЬ
				               |					МАКСИМУМ(РегистрСведений.SAS_ABCРасчет.Дата)
				               |				ИЗ
				               |					РегистрСведений.SAS_ABCРасчет)) КАК Выборка2
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	Выборка2.КодТовара,
				               |	Выборка2.Активный,
				               |	Выборка2.Товар
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	КодТовара";
				Запрос.УстановитьПараметр("СкладКод",ВыбАптека.Код);
				Запрос.УстановитьПараметр("Дата1",НачалоДня(КлючЗаписи.Период));
				Запрос.УстановитьПараметр("Дата2",КонецДня(КлючЗаписи.Период));
			КонецЕсли;
			
			Рез = Запрос.Выполнить();
			Если НЕ Рез.Пустой() Тогда
				Выборка = Рез.Выбрать();
				Пока Выборка.Следующий() Цикл
					НайденнаяСтрока = ТЧ.Найти(Выборка.КодТовара,"КодТовара");
					Если НайденнаяСтрока = Неопределено Тогда
						НС = ТЧ.Добавить();
						ЗаполнитьЗначенияСвойств(НС,Выборка);
					Иначе
						ЗаполнитьЗначенияСвойств(НайденнаяСтрока,Выборка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ТЧ.Сортировать("Товар");
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура СохранитьРасчетЗаказа()
	
	Если ТЧ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Новый УникальныйИдентификатор(ИдентификаторЗаписи));
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр);
	НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НовыйИдентификатор = Новый УникальныйИдентификатор();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(НовыйИдентификатор);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекДата;
		Запись.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Запись.Склад = ВыбАптека;
		Запись.ИдентификаторЗаписи	= НовыйИдентификатор;
		Запись.РодительЗаписи	= НовыйИдентификатор;
		Запись.СуммаВыручки = СуммаВыручки;
		Запись.СуммаПоступленийЗаПериод = СуммаПоступленийЗаПериод;
		Запись.СуммаПродажЗаПериод = СуммаПродажЗаПериод;		
		Запись.ДнейБезЗаказа = ДнейБезЗаказа;
		Запись.СтатусРасчета = СтатусЗаказа;
		Запись.ДатаСозданияЗаписи = ТекущаяДата();
		Запись.РасчетПотребностиSAS = ВыбАптека.РасчетПотребностиSAS;
		ДанныеSAS = SAS_Обмен.ПолучитьШапкуРасчетаПотребности(ВыбАптека.Код,НачалоДня(ТекущаяДата()));
		Запись.КоличествоКЗаказуSAS = ДанныеSAS.КоличествоКЗаказуSAS;
		Запись.СуммаЗаказаSAS = ДанныеSAS.СуммаЗаказаSAS;
		Запись.ПримененРасчетSAS = ПримененРасчетSAS;
		
		ИдентификаторЗаписи = Запись.ИдентификаторЗаписи;
		
	Иначе
		Запись = НаборЗаписей[0];
		Запись.ДатаИзменения = ТекущаяДата();
	КонецЕсли;
	
	МассивКЗаказуНоль	= ТЧ.НайтиСтроки(Новый Структура("Заказать",0));

	Запись.СуммаЗаказа = ТЧ.Итог("Сумма");
	Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТЧ.Выгрузить(), Новый СжатиеДанных(3));
	Запись.КоличествоНедостоверных = КоличествоНедостоверныхПозиций;
	Запись.ОбщееКоличествоКЗаказу	= ТЧ.Количество()-МассивКЗаказуНоль.Количество();
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Не удалось сохранить расчет заказа: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	мВремяСледующегоСохранения = ТекДата + мИнтервалАвтосохранения;
	
КонецПроцедуры

Процедура ТЗПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И ТекущаяДата() >= мВремяСледующегоСохранения Тогда
		СохранитьРасчетЗаказа();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВосстановитьРасчетЗаказаНажатие(Элемент)
	
	Если ТЧ.Количество() <> 0 Тогда
		Если Вопрос("Текущий расчет заказа будет заменен из архива. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаСписка = РегистрыСведений.СохраненныеРасчетыЗаказов.ПолучитьФормуСписка(, ЭтаФорма);
	ФормаСписка.РежимВыбора = Истина;
	ФормаСписка.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр);
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ПолучитьПравилаНажатие(Элемент)
	
	ТХТ = "ВЫБРАТЬ
	      |	МатрицаQminQmax.Аптека,
	      |	МатрицаQminQmax.ГруппаАП КАК ГруппаАП,
	      |	МатрицаQminQmax.ГруппаXYZ КАК ГруппаXYZ,
	      |	МатрицаQminQmax.ЦенаМин КАК ЦенаМин,
	      |	МатрицаQminQmax.ЦенаМакс,
	      |	МатрицаQminQmax.Qmin,
	      |	МатрицаQminQmax.Qmax
	      |ИЗ
	      |	Справочник.МатрицаQminQmax КАК МатрицаQminQmax
	      |ГДЕ
	      |	МатрицаQminQmax.Аптека = &Аптека
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ГруппаАП,
	      |	ЦенаМин,
	      |	ГруппаXYZ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",АптекаМатрицыQminQmax);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.ПустаяСсылка());
		РезЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ТЗМатрицаQminQmax = РезЗапроса.Выгрузить();
	ЭлементыФормы.ТЗМатрицаQminQmax.СоздатьКолонки();	
	
	
КонецПроцедуры

Процедура СохранитьДляВыбраннойАптекиНажатие(Элемент)
	
	НачатьТранзакцию();
	
	ТХТ = "ВЫБРАТЬ
	| МатрицаQminQmax.Ссылка
	|ИЗ
	|	Справочник.МатрицаQminQmax КАК МатрицаQminQmax
	|ГДЕ
	|	МатрицаQminQmax.Аптека = &Аптека
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",АптекаМатрицыQminQmax);
	Выборка = Запрос.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		РезЗапроса = Выборка.Выгрузить();
		Для каждого стр из РезЗапроса Цикл
			Объект = стр.ссылка.ПолучитьОбъект();
			Объект.Удалить();
		КонецЦикла;
	КонецЕсли;	 
	СпрМатрицаQminQmax = Справочники.МатрицаQminQmax;
	Для каждого стр из ТЗМатрицаQminQmax Цикл
		НовыйЭлемент = СпрМатрицаQminQmax.СоздатьЭлемент();
		НовыйЭлемент.Аптека = АптекаМатрицыQminQmax;
		НовыйЭлемент.ГруппаАП = стр.ГруппаАП;
		НовыйЭлемент.ГруппаXYZ = стр.ГруппаXYZ;
		НовыйЭлемент.ЦенаМин = стр.ЦенаМин;
		НовыйЭлемент.ЦенаМакс = стр.ЦенаМакс;
		НовыйЭлемент.Qmin = стр.Qmin;
		НовыйЭлемент.Qmax = стр.Qmax;
		НовыйЭлемент.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ПолучитьПравилаНажатие("");
	
	
	
КонецПроцедуры

Процедура кнСоздатьПерестокНажатие(Элемент)
	
	ЗначениеПерестока = 5;
	Если ВвестиЧисло(ЗначениеПерестока,"Введите значение перестока",1,0) Тогда
		Если ЗначениеПерестока = 0 Тогда
			
			НаборЗаписей = РегистрыСведений.ПерестокАптек.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Аптека.Установить(ВыбАптека);
			НаборЗаписей.Отбор.Товар.Установить(Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара));
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();			
			
		Иначе
			МенеджерЗаписи = РегистрыСведений.ПерестокАптек.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Аптека = ВыбАптека;
			МенеджерЗаписи.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пересток = ЗначениеПерестока;
				МенеджерЗаписи.Записать();
			Иначе
				МенеджерЗаписи.Аптека = ВыбАптека;
				МенеджерЗаписи.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара);
				МенеджерЗаписи.Пересток = ЗначениеПерестока;
				МенеджерЗаписи.Записать();	
			КонецЕсли;
		КонецЕсли;
		ЭлементыФормы.ТЧ.ТекущаяСтрока.Пересток = ЗначениеПерестока;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура кнРасшифровкаПоДнямНажатие(Элемент)
	КодТовара = ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара;
	ТекПозиция = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(КодТовара);
	
	НачПериода = НачалоДня(ВыбДата) - 28*24*60*60;
	КонПериода = КонецДня(ВыбДата) - 1*24*60*60;
	ТабДок = Новый ТабличныйДокумент;
	Если Год(НачПериода) = 2015 Тогда
		ТХТ = "ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Период,
		|	ВЫБОР
		|			КОГДА Обороты.Регистратор ССЫЛКА Документ.РеализацияККМ
		|				ТОГДА Выразить(Обороты.КолвоРасход/Обороты.Партия.К как Число(12,2))
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Расход,
		|	Обороты.КолвоКонечныйОстаток/Обороты.Партия.К КАК Остаток
		|ИЗ
		|	РегистрНакопления.ПартииЖНВЛС.ОстаткиИОбороты(
		|			&НачПериода,
		|			&КонПериода,
		|			регистратор,
		|			ДвиженияИГраницыПериода,
		|			Склад = &Склад
		|				И Товар = &Товар) КАК Обороты
		|ИТОГИ
		|	СУММА(Расход),
		|	СУММА(Остаток)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &НачПериода, &КонПериода)";
		
		
		
		Запрос = Новый ПостроительОтчета;
		Запрос.Текст = ТХТ;
		Запрос.Параметры.Вставить("НачПериода",НачПериода);
		Запрос.Параметры.Вставить("КонПериода",КонецГода(НачПериода));
		Запрос.Параметры.Вставить("Склад",ВыбАптека);
		Запрос.Параметры.Вставить("Товар",ТекПозиция);
		
		Запрос.Выполнить();
		
		
		
		Макет = Запрос.Макет;
		
		Запрос.Макет = Неопределено;
		ТекущаяОбласть = Неопределено;
		Пока Истина Цикл 
			// Осуществим поиск ячейки, в которой находится параметр - Количество 
			ТекущаяОбласть = Макет.НайтиТекст("Период", ТекущаяОбласть, Макет.Область(), 
			Истина, Истина, Истина, Ложь); 
			Если ТекущаяОбласть <> Неопределено Тогда 
				Если ТекущаяОбласть.Параметр = "Период" Тогда 
					// Установим формат значения - два знака после запятой 
					ТекущаяОбласть.Формат = "ДФ=dd.MM.yyyy"; 
				КонецЕсли; 
			Иначе 
				Прервать; 
			КонецЕсли; 
		КонецЦикла;	
		Запрос.Макет = Макет;	
		Запрос.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Трава);
		Запрос.ТекстЗаголовка = "Расшифровка по дням : " + Символы.ПС 
		+ " Код = " + ЭлементыФормы.ТЧ.ТекущаяСтрока.Код + Символы.ПС
		+ " Наименование = " + ТекПозиция ; 
		
		Запрос.ВыводитьЗаголовокОтчета = Истина;
		
		Запрос.ОформитьМакет();
		
		Запрос.Вывести(ТабДок);
		
		НачПериода = КонецГода(НачПериода)+1;
		
	КонецЕсли;
	
		ТХТ = "ВЫБРАТЬ
		      |	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Период,
		      |	ВЫБОР
		      |		КОГДА Обороты.Регистратор ССЫЛКА Документ.УЗ_РеализацияККМ
		      |			ТОГДА ВЫРАЗИТЬ(Обороты.КоличествоРасход / Партии.К КАК ЧИСЛО(12, 2))
		      |		ИНАЧЕ 0
		      |	КОНЕЦ КАК Расход,
		      |	Обороты.КоличествоКонечныйОстаток / Партии.К КАК Остаток
		      |ИЗ
		      |	РегистрНакопления.УЗ_Партии.ОстаткиИОбороты(
		      |			&НачПериода,
		      |			&КонПериода,
		      |			регистратор,
		      |			ДвиженияИГраницыПериода,
		      |			СкладКод = &СкладКод
		      |				И ТоварКод = &ТоварКод) КАК Обороты
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = Обороты.ПартияКод)
		      |ИТОГИ
		      |	СУММА(Расход),
		      |	СУММА(Остаток)
		      |ПО
		      |	Период ПЕРИОДАМИ(ДЕНЬ, &НачПериода, &КонПериода)";
		
		
		//Сообщить(""+НачПериода + " - " + КонПериода );
		Запрос = Новый ПостроительОтчета;
		Запрос.Текст = ТХТ;
		Запрос.Параметры.Вставить("НачПериода",НачПериода);
		Запрос.Параметры.Вставить("КонПериода",КонецДня(КонПериода));
		Запрос.Параметры.Вставить("СкладКод",ВыбАптека.Код);
		Запрос.Параметры.Вставить("ТоварКод",КодТовара);
		
		Запрос.Выполнить();
		
		Макет = Запрос.Макет;
		
		Запрос.Макет = Неопределено;
		ТекущаяОбласть = Неопределено;
		Пока Истина Цикл 
			// Осуществим поиск ячейки, в которой находится параметр - Количество 
			ТекущаяОбласть = Макет.НайтиТекст("Период", ТекущаяОбласть, Макет.Область(), 
			Истина, Истина, Истина, Ложь); 
			Если ТекущаяОбласть <> Неопределено Тогда 
				Если ТекущаяОбласть.Параметр = "Период" Тогда 
					// Установим формат значения - два знака после запятой 
					ТекущаяОбласть.Формат = "ДФ=dd.MM.yyyy"; 
				КонецЕсли; 
			Иначе 
				Прервать; 
			КонецЕсли; 
		КонецЦикла;	
		Запрос.Макет = Макет;	
		Запрос.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Трава);
		Запрос.ТекстЗаголовка = "Расшифровка по дням : " + Символы.ПС 
		+ " Код = " + ЭлементыФормы.ТЧ.ТекущаяСтрока.КодТовара + Символы.ПС
		+ " Наименование = " + ТекПозиция ; 
		
		Запрос.ВыводитьЗаголовокОтчета = Истина;
		
		Запрос.ОформитьМакет();
		
		Запрос.Вывести(ТабДок);	
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.Показать();
		
	 ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТЧ;

	
КонецПроцедуры

Процедура СписокАптекПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Аптека = Элемент.ТекущаяСтрока.Значение;
	УстановитьПривилегированныйРежим(Истина);
	ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭлементыФормы.НадписьДатаРасчетаABC.Заголовок = ?(ЗначениеЗаполнено(ДатыРасчетов.ДатаРасчетаABC), "ABC рассчитан: " + ДатыРасчетов.ДатаРасчетаABC, "ABC не рассчитан!");
	Если НачалоДня(ДатыРасчетов.ДатаРасчетаABC) < НачалоДня(ТекущаяДата()) Тогда
		ЭлементыФормы.НадписьДатаРасчетаABC.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ЭлементыФормы.НадписьДатаРасчетаABC.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	ЭлементыФормы.НадписьДатаРасчетаСкорости.Заголовок = ?(ЗначениеЗаполнено(ДатыРасчетов.ДатаРасчетаСкорости), "Qmin-Qmax рассчитан: " + ДатыРасчетов.ДатаРасчетаСкорости, "Qmin-Qmax не рассчитан!");
	Если НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости) < НачалоДня(ТекущаяДата()) Тогда
		ЭлементыФормы.НадписьДатаРасчетаСкорости.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ЭлементыФормы.НадписьДатаРасчетаСкорости.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	ЭлементыФормы.НадписьДатаРасчетаАвтозаказа.Заголовок = ?(ЗначениеЗаполнено(ДатыРасчетов.ДатаРасчетаАвтозаказа), "Автозаказ рассчитан: " + ДатыРасчетов.ДатаРасчетаАвтозаказа, "Автозаказ не рассчитан!");
	Если НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа) < НачалоДня(ТекущаяДата()) Тогда
		ЭлементыФормы.НадписьДатаРасчетаАвтозаказа.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ЭлементыФормы.НадписьДатаРасчетаАвтозаказа.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура кнОтобратьНедостоверныеНажатие(Элемент)
	
	
   ЭлементыФормы.ТЧ.ОтборСтрок.НедостовернаяПозиция.ВидСравнения = ВидСравнения.Равно;
   ЭлементыФормы.ТЧ.ОтборСтрок.НедостовернаяПозиция.Значение = Истина;
   ЭлементыФормы.ТЧ.ОтборСтрок.НедостовернаяПозиция.Использование = Истина;
	
	
КонецПроцедуры

Процедура кнПоказатьПредлагаемыеКЗаказуНажатие(Элемент)
	
   ЭлементыФормы.ТЧ.ОтборСтрок.Заказать.ВидСравнения = ВидСравнения.Больше;
   ЭлементыФормы.ТЧ.ОтборСтрок.Заказать.Значение = 0;
   ЭлементыФормы.ТЧ.ОтборСтрок.Заказать.Использование = Истина;
	
	
КонецПроцедуры

Процедура кнСброситьФильтрыНажатие(Элемент)
	
	ЭлементыФормы.ТЧ.ОтборСтрок.Сбросить();	
	
КонецПроцедуры

Процедура ТЧПередНачаломИзменения(Элемент, Отказ)


	Если (Элемент.ТекущаяКолонка.Имя="Заказать") Тогда
		
		ТекСтр = ЭлементыФормы.ТЧ.ТекущаяСтрока;
		ПредКоличествоЗаказа = ТекСтр.Заказать;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнДобавитьнеликвидНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Предупреждение("Строка неопределена!");	
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.Неликвиды.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Аптека = ВыбАптека;
	МенеджерЗаписи.КодТовара = ТекСтрока.КодТовара;
	
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Аптека = ВыбАптека;
		МенеджерЗаписи.КодТовара = ТекСтрока.КодТовара;
		МенеджерЗаписи.Количество = текСтрока.Остаток;
		Попытка
			МенеджерЗаписи.Записать();
			Предупреждение("Неликвид добавлен.",1);
		Исключение
			Предупреждение("Ошибка добавления неликвида" + Символы.ПС + ОписаниеОшибки(),3);
		КонецПопытки;	
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТЧ;

	

	
КонецПроцедуры

Процедура КВыгрузкеНажатие(Элемент)
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Новый УникальныйИдентификатор(ИдентификаторЗаписи));
	НаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийСотр);
	НаборЗаписей.Отбор.Склад.Установить(ВыбАптека);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Сообщить("по текущему заказу не найдена запись в регистре сохраненных заказов. "+ Символы.ПС+ "Период: "+ НачалоДня(ТекущаяДата()) + Символы.ПС+ "Пользователь: " + ПараметрыСеанса.ТекущийСотр + Символы.ПС+ "Аптека: " + ВыбАптека);	
		Возврат;
	Иначе
		Запись = НаборЗаписей[0];
		Запись.СтатусРасчета = Перечисления.СтатусыРасчетовАвтозаказа.КВыгрузке;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
		Предупреждение("Текущий автозаказ помечен к выгрузке!",10);
	Исключение
		Сообщить("Не удалось установить статус  расчета """+ Перечисления.СтатусыРасчетовАвтозаказа.КВыгрузке +""" заказа: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	
КонецПроцедуры

Процедура КоманднаяПанельРезультатакнОбновитьЦены(Кнопка)
	
	
	Если ВыбАптека.Пустая() Тогда
		Предупреждение("Не выбрана аптека. Обновление цен не может быть продолжено");	
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			      |	КаталогПрайсЛистов.КодПрайсЛиста,
			      |	ВЫБОР
			      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
			      |			ТОГДА 1
			      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
			      |	КОНЕЦ КАК БазовыйКоэфф
			      |ПОМЕСТИТЬ Параметры
			      |ИЗ
			      |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
			      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
			      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
			      |			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
			      |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
			      |ГДЕ
			      |	КонтрактыИАптеки.Активность = ИСТИНА
			      |	И КонтрактыИАптеки.Аптека = &Аптека
			      |	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
			      |	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	МИНИМУМ(Прайсы.Цена * Параметры.БазовыйКоэфф) КАК Цена,
			      |	Связки.ТоварФирмы.Код КАК КодТовара
			      |
				  |ИЗ
			      |	РегистрСведений.ПрайсЛисты КАК Прайсы
			      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
			      |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
			      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
			      |		ПО (Связки.Поставщик = Прайсы.ПоставщикСвязки)
			      |			И (Связки.КодТовараПоставщика = Прайсы.Код)
			      |ГДЕ
			      |	ВЫБОР
			      |			КОГДА Прайсы.Цена > 0
			      |					И Прайсы.Цена < 50
			      |					И Прайсы.Количество > 800
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 50
			      |					И Прайсы.Цена < 150
			      |					И Прайсы.Количество > 300
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 150
			      |					И Прайсы.Цена < 1000
			      |					И Прайсы.Количество > 50
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 1000
			      |					И Прайсы.Цена < 5000
			      |					И Прайсы.Количество > 10
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 5000
			      |					И Прайсы.Цена < 10000
			      |					И Прайсы.Количество > 5
			      |				ТОГДА ИСТИНА
			      |			КОГДА Прайсы.Цена >= 10000
			      |					И Прайсы.Количество > 3
			      |				ТОГДА ИСТИНА
			      |			ИНАЧЕ ЛОЖЬ
			      |		КОНЕЦ = ИСТИНА
			      |
			      |СГРУППИРОВАТЬ ПО
			      |	Связки.ТоварФирмы.Код
			      |
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ Параметры
			      |;";
				  
		Запрос.УстановитьПараметр("Аптека",ВыбАптека);
		Рез = Запрос.Выполнить().Выгрузить();
		Рез.Индексы.Добавить("КодТовара");
		
		Для каждого стр из ТЧ Цикл
			НайденнаяСтрока = Рез.Найти(стр.КодТовара,"КодТовара");
			Если НайденнаяСтрока = Неопределено Тогда
				стр.Цена = 0 ;
				стр.Сумма = 0;
			Иначе
				стр.Цена = НайденнаяСтрока.Цена;
				стр.Сумма = стр.Цена*стр.Заказать;
			КонецЕсли;
		КонецЦикла;
		
		Предупреждение("Обновление цен в результате расчета завершено!");
		
	
КонецПроцедуры

Процедура КоманднаяПанельРезультатаПоказатьУсловиеЗаказаНД(Кнопка)
	
	ТС = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	
	ТХТ = "ВЫБРАТЬ
	|	МН.ЦенаОт КАК ЦенаОт,
	|	МН.ЦенаДо,
	|	МН.ПродажиОт КАК ПродажиОт,
	|	МН.ПродажиДо,
	|	МН.ОстатокОт КАК ОстатокОт,
	|	МН.ОстатокДо,
	|	МН.ДнейПродажОт КАК ДнейПродажОт,
	|	МН.ДнейПродажДо,
	|	МН.Заказать
	|ИЗ
	|	РегистрСведений.МатрицаНедостоверных КАК МН
	|ГДЕ
	|	МН.ЦенаОт <= &Цена
	|	И МН.ЦенаДо > &Цена
	|	И МН.ПродажиОт <= &Продажа
	|	И МН.ПродажиДо > &Продажа
	|	И МН.ОстатокОт <= &Остаток
	|	И МН.ОстатокДо > &Остаток
	|	И МН.ДнейПродажОт <= &ДнейПродаж
	|	И МН.ДнейПродажДо > &ДнейПродаж";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Цена",ТС.Цена);
	Запрос.УстановитьПараметр("Продажа",ТС.Продажи);
	Запрос.УстановитьПараметр("Остаток",ТС.Остаток);
	Запрос.УстановитьПараметр("ДнейПродаж",ТС.ДнейПродаж);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Предупреждение("в МД нет ни одной записи, подходящей под данные текущей строки");
		Возврат;
	КонецЕсли;
	
	Сообщить(""+ТС.Товар + "	цена= " + ТС.Цена + "	продажа= " + ТС.Продажи + "	остаток= "+ ТС.Остаток + "	дней продаж= " + ТС.ДнейПродаж);
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сообщить("Цена			от "+ Выборка.ЦенаОт + " до " + выборка.ЦенаДо + "");	
		Сообщить("Продажи		от "+ Выборка.ПродажиОт + " до " + выборка.ПродажиДо + "");	
		Сообщить("Остаток		от "+ Выборка.ОстатокОт + " до " + выборка.ОстатокДо + "");	
		Сообщить("Дней продаж	от "+ Выборка.ДнейПродажОт + " до " + выборка.ДнейПродажДо + "");	
		Сообщить("Заказать	" + Выборка.Заказать);
		Сообщить("=================================================================================");
	КонецЦикла;
	
	
	
	
КонецПроцедуры

Процедура кнВыгрузитьЛСНажатие(Элемент)
	
	
	СохранитьРасчетЗаказа();
	
	Если ТЧ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Приоритет = 5;
	ВвестиЧисло(Приоритет,"Задайте приоритет распределения",3,0);	
	
	НомерТаймСлота = 1;
	ВвестиЧисло(НомерТаймСлота,"Задайте номер тайм-слота",3,0);		
	
	Параметры = Новый Структура;
	Параметры.Вставить("Период",НачалоДня(ТекущаяДата()));
	Параметры.Вставить("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Параметры.Вставить("ИдентификаторЗаписи",Новый УникальныйИдентификатор(ИдентификаторЗаписи));
	Параметры.Вставить("Склад",ВыбАптека);
	Параметры.Вставить("Приоритет",Приоритет);
	Параметры.Вставить("Результат",Ложь);
	Параметры.Вставить("НомерТаймСлота",НомерТаймСлота);
	
	лок_СоздатьЗаявкуНаТовар(Параметры);
	
	//Если Параметры.Результат = Ложь Тогда
	Для каждого стр из Параметры.Сообщения Цикл
		Сообщить(стр.Значение);	
	КонецЦикла;
	
	
КонецПроцедуры


Процедура лок_СоздатьЗаявкунаТовар(Параметры) Экспорт
	
	Сообщения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентныеЗаданияПараметры.Параметр,
	|	РегламентныеЗаданияПараметры.Значение
	|ИЗ
	|	Справочник.РегламентныеЗадания.Параметры КАК РегламентныеЗаданияПараметры
	|ГДЕ
	|	РегламентныеЗаданияПараметры.Ссылка = &Ссылка и РегламентныеЗаданияПараметры.Параметр = &ИмяПараметра";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа"));
	Запрос.УстановитьПараметр("ИмяПараметра","ОдинРасчетВДень");
	
	Рез =  Запрос.Выполнить();
	Если Рез.Пустой() Тогда 
		ОдинЗаказВДень = Истина;
	Иначе
		ВыборкаПараметров = Рез.Выбрать();	
		ВыборкаПараметров.Следующий();
		ОдинЗаказВДень = ВыборкаПараметров.Значение;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Параметры.ИдентификаторЗаписи);
	НаборЗаписей.Отбор.Период.Установить(Параметры.Период);
	//НаборЗаписей.Отбор.Пользователь.Установить(Параметры.Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Параметры.Склад);
	
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Сообщения.Вставить("Сообщение1","по текущей позиции не найдена запись в регистре заказов. "+ Символы.ПС+ "Период: "+ Параметры.Период + Символы.ПС+ "Пользователь: " + Параметры.Пользователь + Символы.ПС+ "Аптека: " + Параметры.Склад);	
		Сообщения.Вставить("Сообщение2","Автозаказ не выгружен!");
		Параметры.Вставить("Сообщения",Сообщения);
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей[0];
	
	Если Запись.СтатусРасчета = Перечисления.СтатусыРасчетовАвтозаказа.Выгрузить Тогда
		//Вопрос
	КонецЕсли;
	
	СохраненныйЗаказ = Запись.РасчетЗаказа.Получить();
	
	
	
	Если СохраненныйЗаказ.Количество() = 0 Тогда
		//Сообщить("В текущем автозаказе отсутствуют строки. Заказ не будет сформирован!",СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура();
	Отбор.Вставить("ТипДляЦО",Перечисления.ТипыДляЦО.Лексредства);
	КопияЗаказа = СохраненныйЗаказ.Скопировать(Отбор,"КодТовара,Заказать,Товар,Исключение");
	СохраненныйЗаказ = неопределено;
	
	ТХТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	      |	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
	      |	ЗаявкаНаТовар.Дата КАК Дата
	      |ИЗ
	      |	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
	      |ГДЕ
		  | ЗаявкаНаТовар.Дата > &НачПериода
	      |	И ЗаявкаНаТовар.Склад = &Склад
	      |	И ЗаявкаНаТовар.ТипЗаявки = &ТипЗаявки и ЗаявкаНаТовар.НомерТаймСлота = &НомерТаймСлота
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата УБЫВ,
	      |	НомерЗаявкиАптеки УБЫВ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	Запрос.УстановитьПараметр("НачПериода",Макс(НачалоГода(ТекущаяДата()),НачалоДня(ТекущаяДата())-24*60*60*60));
	Запрос.УстановитьПараметр("Склад",Параметры.Склад);
	Запрос.УстановитьПараметр("ТипЗаявки",Перечисления.ТипЗаявки.АвтозаказОфиса);
	Запрос.УстановитьПараметр("НомерТаймСлота",Параметры.НомерТаймСлота);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
		НовыйНомер = "АЗ-0000001";
	Иначе
		Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) и ОдинЗаказВДень = Истина Тогда //Зачем два автозаказа в один день
			Сообщения.Вставить("Сообщение2","За текущей день уже имеется выгруженный автозаказ. Заказ не будет сформирован."+ Символы.ПС+ "Аптека: " + Параметры.Склад + ""+ Символы.ПС+ "------------------------");
			Параметры.Вставить("Сообщения",Сообщения);
			Возврат;
		КонецЕсли;
		ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
		НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
		НовыйНомер = Лев("АЗ-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
	КонецЕсли;
	
	НачатьТранзакцию();
	Док = Документы.ЗаявкаНаТовар.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.Склад = Параметры.Склад;
	Док.ТипЗаявки = Перечисления.ТипЗаявки.АвтозаказОфиса;
	Если Параметры.Склад.НаПрямыхПоставках = Ложь Тогда
		Док.Статус = Перечисления.СтатусЗаказаПоставщику.Создан;
		Док.Комментарий = "Аптека исключена из автоматического распределения";
	Иначе
		Док.Статус = Перечисления.СтатусЗаказаПоставщику.ОжидаетРаспределения;
	КонецЕсли;
	Док.НомерЗаявкиАптеки = НовыйНомер;
	Док.Менеджер = Параметры.Пользователь;
	Док.Приоритет = Параметры.Приоритет;
	Док.ИдентификаторРасчета = Параметры.ИдентификаторЗаписи;
	Док.НомерТаймСлота = Параметры.НомерТаймСлота;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	Т.КодТовара,
	      |	Т.Заказать КАК Количество,
	      |	Т.Товар КАК ТоварНаименование
	      |ПОМЕСТИТЬ ВТКоды
	      |ИЗ
	      |	&Таб КАК Т
	      |ГДЕ
	      |	Т.Заказать > 0  и (Т.Исключение = 0 или Т.Исключение = ЛОЖЬ)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВтКоды.КодТовара,
	      |	ВтКоды.Количество,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.ЕдиницаПоУмолчанию КАК ЕИТ
	      |ИЗ
	      |	ВТКоды КАК ВтКоды
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	      |		ПО ВтКоды.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ВтКоды.ТоварНаименование
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТКоды";
		  
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Таб",КопияЗаказа);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщения.Вставить("Сообщение3","По аптеке: " + Параметры.Склад + " таблица расчета не имеет записей."+ Символы.ПС+ "------------------------");
		Параметры.Вставить("Сообщения",Сообщения);		
		Возврат;
	КонецЕсли;
	
	Док.Товар.Загрузить(Рез.Выгрузить());
	Док.Записать(РежимЗаписиДокумента.Запись);
	ЗафиксироватьТранзакцию();
	
	Сообщения.Вставить("Сообщение4","Заказ по " + Параметры.Склад + " создан");
	Параметры.Вставить("Сообщения",Сообщения);
	Параметры.Результат = Истина;
	
	
	
	
КонецПроцедуры

Процедура кнУдалитьПозициюИзМатрицыНажатие(Элемент)
	
	//ТекСтрока = ЭлементыФормы.ТЧ.ТекущиеДанные;
	//Если ТекСтрока = Неопределено Тогда
	//	Предупреждение("Строка неопределена!");	
	//	Возврат;
	//КонецЕсли;
	//ТекТовар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
	//
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Ответ = Вопрос("Удалить текущую позицию из матрицы?", Режим, 0);
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//Иначе
	//	МассивИзмерений = Новый Структура;
	//	МассивИзмерений.Вставить("Аптека",ВыбАптека);
	//	МассивИзмерений.Вставить("Товар",ТекТовар);
	//	ОМ16_УдалитьТоварИзМатрицы("Матрица",МассивИзмерений);
	//	ОМ16_УдалитьТоварИзМатрицы("МатрицаНЗ",МассивИзмерений);
	//	ТЧ.Удалить(ТекСтрока);
	//КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанельРезультатаТест(Кнопка)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НедостовернаяПозиция",Истина);
	ВремТЗ = ТЧ.Выгрузить(Отбор);
	ДЛя каждого стр из ВремТЗ Цикл
		
			МЗ = РегистрыСведений.РасчетыНедостоверныхПозиций.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ,стр);
			МЗ.ДатаЗаписи = ТекущаяДата();
			МЗ.Аптека = ВыбАптека;
			МЗ.Записать();

	КонецЦикла;
	
	
КонецПроцедуры

Процедура кнКЗаказуSASНажатие(Элемент)
	
   ЭлементыФормы.ТЧ.ОтборСтрок.ЧистаяПотребностьSAS.ВидСравнения = ВидСравнения.Больше;
   ЭлементыФормы.ТЧ.ОтборСтрок.ЧистаяПотребностьSAS.Значение = 0;
   ЭлементыФормы.ТЧ.ОтборСтрок.ЧистаяПотребностьSAS.Использование = Истина;	
	
КонецПроцедуры

Процедура кнСравнитьРасчетыНажатие(Элемент)
	
   ПодготовитьКолонкуДляФильтра();
   ЭлементыФормы.ТЧ.ОтборСтрок.ФильтрСравнениеПотребностей.ВидСравнения = ВидСравнения.Равно;
   ЭлементыФормы.ТЧ.ОтборСтрок.ФильтрСравнениеПотребностей.Значение = Истина;
   ЭлементыФормы.ТЧ.ОтборСтрок.ФильтрСравнениеПотребностей.Использование = Истина;	
	
КонецПроцедуры

Процедура ПодготовитьКолонкуДляФильтра()
	Для каждого стр из ТЧ Цикл
		Если стр.Заказать > 0 или стр.ЧистаяПотребностьSAS > 0 Тогда
			стр.ФильтрСравнениеПотребностей = Истина;
		Иначе
			стр.ФильтрСравнениеПотребностей = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура кнПрименитьРасчетSASНажатие(Элемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АП.Код как КодТовара,
	               |	АП.МинимальныйЗаказ
	               |ИЗ
	               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	               |ГДЕ
	               |	АП.Код В(&Коды)
	               |	И АП.МинимальныйЗаказ > 0";
	Запрос.УстановитьПараметр("Коды",ТЧ.ВыгрузитьКолонку("КодТовара"));
	ТЗКоды = Запрос.Выполнить().Выгрузить();
	
	ПримененРасчетSAS = Истина;
	Для каждого стр из ТЧ Цикл
		стр.ЗаказатьДоПривидения = стр.Заказать;
		стр.Заказать = стр.ЧистаяПотребностьSAS;
		Если стр.Заказать > 0 Тогда
			НайденнаяСтрока = ТЗКоды.Найти(стр.КодТовара,"КодТовара");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				стр.Заказать = Макс(стр.Заказать , НайденнаяСтрока.МинимальныйЗаказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура УправлениеДоступностью()
	
	Если ПримененРасчетSAS Тогда
		ЭлементыФормы.ТЧ.Колонки.Заказать.ТолькоПросмотр = Истина;
		ЭлементыФормы.кнПрименитьРасчетSAS.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ТЧ.Колонки.Заказать.ТолькоПросмотр = Ложь;
		ЭлементыФормы.кнПрименитьРасчетSAS.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнПрименитьSAS_с_НЗНажатие(Элемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АП.Код как КодТовара,
	               |	АП.МинимальныйЗаказ
	               |ИЗ
	               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	               |ГДЕ
	               |	АП.Код В(&Коды)
	               |	И АП.МинимальныйЗаказ > 0";
	Запрос.УстановитьПараметр("Коды",ТЧ.ВыгрузитьКолонку("КодТовара"));
	ТЗКоды = Запрос.Выполнить().Выгрузить();
	
	ПримененРасчетSAS = Истина;
	Для каждого стр из ТЧ Цикл
		стр.ЗаказатьДоПривидения = стр.Заказать;
		стр.Заказать = стр.ЧистаяПотребностьSAS;
		Если стр.Заказать > 0 Тогда
			НайденнаяСтрока = ТЗКоды.Найти(стр.КодТовара,"КодТовара");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				стр.Заказать = Макс(стр.Заказать , НайденнаяСтрока.МинимальныйЗаказ);
			КонецЕсли;
		Иначе
			
			стр.Заказать = 0;
			Если стр.НЗ > 0 Тогда
				Если стр.Остаток = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
					стр.Заказать = стр.НЗ;	
				КонецЕсли;
			Иначе
				Если стр.Остаток = 0  и стр.ДнейПродаж = 0 и стр.Продажи = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
					стр.Заказать = стр.КуМакс;	
				//ИначеЕсли стр.Остаток = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
				//	стр.Заказать = 1;
				КонецЕсли;
			КонецЕсли;

			
		КонецЕсли;
	КонецЦикла;
	
	УправлениеДоступностью();
	
	
КонецПроцедуры

Процедура КоманднаяПанельРезультатакнРассчитатьЗаказПоИсторииSAS(Кнопка)
	
	ДатаПотребности = НачалоДня(НачалоДня(ТекущаяДата())-1); 
	
	Если Вопрос("Потребность будет пересчитана по данным SAS за " + Формат(ДатаПотребности,"ДФ=dd.MM.yyyy") + ". Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АП.Код как КодТовара,
	               |	АП.МинимальныйЗаказ
	               |ИЗ
	               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	               |ГДЕ
	               |	АП.Код В(&Коды)
	               |	И АП.МинимальныйЗаказ > 0";
	Запрос.УстановитьПараметр("Коды",ТЧ.ВыгрузитьКолонку("КодТовара"));
	ТЗКоды = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	SAS_ПотребностьАптекАрхив.ТоварКод как КодТовара,
	               |	SAS_ПотребностьАптекАрхив.МаксимальныйЗапас как МаксимальныйЗапасSAS,
	               |	SAS_ПотребностьАптекАрхив.ТочкаЗаказа как  ТочкаЗаказаSAS
	               |ИЗ
	               |	РегистрСведений.SAS_ПотребностьАптекАрхив КАК SAS_ПотребностьАптекАрхив
	               |ГДЕ
	               |	SAS_ПотребностьАптекАрхив.Дата между &НачДата   и &КонДата

	               |	И SAS_ПотребностьАптекАрхив.СкладКод = &СкладКод";
	
	Запрос.УстановитьПараметр("НачДата", ДатаПотребности);
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаПотребности));
	Запрос.УстановитьПараметр("СкладКод", ВыбАптека.Код);
	ТЗПотребностьSAS = Запрос.Выполнить().Выгрузить();
	Если ТЗПотребностьSAS.Количество() = 0 Тогда
		Предупреждение("Потребность SAS за " + Формат(ДатаПотребности,"ДФ=dd.MM.yyyy") + " не найдена");
		Возврат;
	КонецЕсли;
	
	
	ПримененРасчетSAS = Истина;
	Для каждого стр из ТЧ Цикл
		
		стр.ЗаказатьДоПривидения = стр.Заказать;
		
		стрПотр = ТЗПотребностьSAS.Найти(стр.КодТовара,"КодТовара");
		Если стрПотр = Неопределено Тогда
			стр.Заказать = 0;
		Иначе
			стр.ТочкаЗаказаSAS = стрПотр.ТочкаЗаказаSAS;
			стр.МаксимальныйЗапасSAS = стрПотр.МаксимальныйЗапасSAS;
			
			Если стр.Остаток < стр.ТочкаЗаказаSAS или (стр.Остаток = 0 и  стр.ТочкаЗаказаSAS = 0) Тогда
				стр.Заказать = Макс(стр.МаксимальныйЗапасSAS - стр.ВПути - стр.Остаток , 0 );	
			Иначе
				стр.Заказать = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если стр.Заказать > 0 Тогда
			НайденнаяСтрока = ТЗКоды.Найти(стр.КодТовара,"КодТовара");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				стр.Заказать = Макс(стр.Заказать , НайденнаяСтрока.МинимальныйЗаказ);
			КонецЕсли;
		Иначе
			
			стр.Заказать = 0;
			Если стр.НЗ > 0 Тогда
				Если стр.Остаток = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
					стр.Заказать = стр.НЗ;	
				КонецЕсли;
			Иначе
				Если стр.Остаток = 0  и стр.ДнейПродаж = 0 и стр.Продажи = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
					стр.Заказать = стр.КуМакс;	
				//ИначеЕсли стр.Остаток = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
				//	стр.Заказать = 1;
				КонецЕсли;
			КонецЕсли;

			
		КонецЕсли;
	КонецЦикла;
	
	УправлениеДоступностью();
	
	
КонецПроцедуры

 
 УчитыватьТолькоНезакрепленныеЗаСотрудникомАптеки = Истина;
 ВыбДата = ТекущаяДата();
 НачПериода = НачалоДня(ТекущаяДата() - 45 * 86400);
 КонПериода = КонецДня(ТекущаяДата());

 //Для расчета ABC
 ПроцентА = 70;
 ПроцентБ = 20;
 
 ЦветаТаблицыРезультата = Новый Структура;
 ЦветаТаблицыРезультата.Вставить("Исключение",Новый Цвет(100,149,237));
 ЦветаТаблицыРезультата.Вставить("Недостоверный",Новый Цвет(255, 137, 137));
 ЦветаТаблицыРезультата.Вставить("ЦветГруппыI",Новый Цвет(192, 192, 192));
 ЦветаТаблицыРезультата.Вставить("РекламнаяАкция",Новый Цвет(182, 255,176));
 
 
 //Для расчета автозаказа
 ВозвращатьПромежуточныеТаблицы = ЛОЖЬ;
 КоэффициентЗаказаA = 1;
 КоэффициентЗаказаB = 1;
 КоэффициентЗаказаC = 1;
 КоэффициентЗаказаD = 1;
 Поле_Коэфф					= 2;
 КоэффПоНЗ = 2;
 КоличествоДнейПродаж = 28;
 КоличествоДнейПотребности = 7;
 КоэффициентСреднейСкоростиПродаж = 10;
 УчитыватьНЗ = Истина;
 Флаг_УчестьРеквизитминимальныйЗаказ = Истина;
 ЭлементыФормы.РасчетПоВсем.СписокВыбора.Добавить(Истина,"Расчет по всем");
 ЭлементыФормы.РасчетПоВсем.СписокВыбора.Добавить(Ложь,"Расчет по рекламе");
 ЭлементыФормы.СписокВыбораАптек.СписокВыбора.Добавить(0,"Аптеки на автозаказе");
 ЭлементыФормы.СписокВыбораАптек.СписокВыбора.Добавить(1,"Аптеки на рекламе");
 ЭлементыФормы.СписокВыбораАптек.СписокВыбора.Добавить(2,"Аптеки рассчитанные сегодня");
 ЭлементыФормы.СписокВыбораАптек.СписокВыбора.Добавить(3,"Аптеки (подбор)");
 РасчетПоВсем = Истина;
 СписокВыбораАптек = 0;
 ОграничениеДляНовыхАптек = Истина;
 УчитыватьКратностьЗаказа = Истина;
 ЭлементыФормы.ОтборПостроителя.Видимость = Ложь;
Ксз = 1;
КоэффициентУвеличенияПотребности = 0;
ТекДата = НачалоДня(ТекущаяДата());

мИнтервалАвтосохранения = 120;
мВремяСледующегоСохранения = ТекущаяДата();
фл_ЗакрыватьТоварВПути = Истина;
