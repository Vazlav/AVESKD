Перем КоличествоСтрокТЧ;
Перем СтрокаПереходов;

Процедура ЗаполнитьДанныеФормы(ТекСтрокаВладельца)
	
	//Владелец = ЭтаФорма.ВладелецФормы;
	//ТекСтрока = Владелец.ТЗ[ИндексТекСтроки];
	ВладелецФормы.ЭлементыФормы.ТЧ.ТекущаяСтрока = ТекСтрокаВладельца;
	КолонкиТабЧасти = ВладелецФормы.ЭлементыФормы.ТЧ.Колонки;	
	КоличествоКолонок = КолонкиТабЧасти.Количество();
	
	Для н= 0 по КоличествоКолонок-1 Цикл
		ИмяКолонки = КолонкиТабЧасти.Получить(н).Имя;
		Если ИмяКолонки = "КодТовара" Тогда
			ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрокаВладельца[ИмяКолонки]);		
		КонецЕсли;
		Элемент = ЭлементыФормы.Найти(ИмяКолонки);
		Если Элемент = Неопределено Тогда
			Продолжить;
		Иначе
			Элемент.Значение = ТекСтрокаВладельца[ИмяКолонки];
		КонецЕсли;
 	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСтрокуПереходов()
	
	СтрокаПереходов = "";
	Если ПереходA = Истина Тогда
		СтрокаПереходов = СтрокаПереходов + "A";
	КонецЕсли;
	Если ПереходB = Истина Тогда
		СтрокаПереходов = СтрокаПереходов + "B";
	КонецЕсли;
	Если ПереходC = Истина Тогда
		СтрокаПереходов = СтрокаПереходов + "C";
	КонецЕсли;
	Если ПереходD = Истина Тогда
		СтрокаПереходов = СтрокаПереходов + "D";
	КонецЕсли;
	Если ПереходДефектура = Истина Тогда
		СтрокаПереходов = СтрокаПереходов + "Дефектура";
	КонецЕсли;
	Если ПереходЗаказать = Истина Тогда
		СтрокаПереходов = СтрокаПереходов + "Заказать";
	КонецЕсли;	
	//Проверим, на пустую строку. Нельзя , чтоб были сняты все галочки с переходов
	Если (ПустаяСтрока(СтрокаПереходов) = Истина) и ПереходВсе = Ложь Тогда
		ПереходДефектура = Истина;	
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ПоказатьИсториюЗаказов()
	
	
	Если фл_ПоказатьПодробнуюИнформацию = Истина Тогда
		Запрос = Новый Запрос;
		//ТХТ = "ВЫБРАТЬ ПЕРВЫЕ 20
		//|	ЗаказПоставщикуОбороты.Регистратор КАК Документ,
		//|	ЗаказПоставщикуОбороты.Период КАК Период,
		//|	ЗаказПоставщикуОбороты.Поставщик,
		//|	ВЫБОР
		//|		КОГДА ПриходТовар.Товар ЕСТЬ NULL 
		//|			ТОГДА ЗаказТовар.Цена
		//|		ИНАЧЕ ПриходТовар.ЦенаЗакуп
		//|	КОНЕЦ КАК Цена,
		//|	ВЫБОР
		//|		КОГДА ПриходТовар.Товар ЕСТЬ NULL 
		//|			ТОГДА 0
		//|		ИНАЧЕ ПриходТовар.ЦенаРозн
		//|	КОНЕЦ КАК ЦенаРозн,
		//|	ВЫБОР
		//|		КОГДА ЗаказТовар.Товар ЕСТЬ NULL 
		//|			ТОГДА ПриходТовар.Количество
		//|		ИНАЧЕ ЗаказПоставщикуОбороты.КоличествоОборот
		//|	КОНЕЦ КАК Количество,
		//|	ВЫБОР
		//|		КОГДА ЗаказТовар.Товар ЕСТЬ NULL 
		//|			ТОГДА 0
		//|		ИНАЧЕ 1
		//|	КОНЕЦ КАК ПриходРасход
		//|ИЗ
		//|	РегистрНакопления.ЗаказПоставщику.Обороты(
		//|			&НачДата,
		//|			,
		//|			Регистратор,
		//|			Товар = &Товар
		//|				И Склад = &Аптека) КАК ЗаказПоставщикуОбороты
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТовара.Товар КАК ПриходТовар
		//|		ПО (ПриходТовар.Ссылка = (ВЫРАЗИТЬ(ЗаказПоставщикуОбороты.Регистратор КАК Документ.ПоступлениеТовара)))
		//|			И (ПриходТовар.Товар = &Товар)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ.Товар КАК ЗаказТовар
		//|		ПО (ЗаказТовар.Ссылка = (ВЫРАЗИТЬ(ЗаказПоставщикуОбороты.Регистратор КАК Документ.Заказ)))
		//|			И (ЗаказТовар.Товар = &Товар)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Период УБЫВ";	
	ТХТ = "ВЫБРАТЬ
	      |	ЗаказПоставщику.Период,
	      |	ЗаказПоставщику.Регистратор КАК Документ,
	      |	ЗаказПоставщику.Поставщик,
	      |	ЗаказПоставщику.ЦенаЗакуп КАК Цена,
	      |	ЗаказПоставщику.ЦенаРозн,
	      |	ЗаказПоставщику.Количество,
	      |	ВЫБОР
	      |		КОГДА ЗаказПоставщику.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	      |			ТОГДА 1
	      |		ИНАЧЕ 0
	      |	КОНЕЦ КАК ПриходРасход
	      |ИЗ
	      |	РегистрНакопления.ЗаказПоставщику КАК ЗаказПоставщику
	      |ГДЕ
	      |	ЗаказПоставщику.Период >= &НачДата
	      |	И ЗаказПоставщику.Склад = &Аптека
	      |	И ЗаказПоставщику.Товар = &Товар
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЗаказПоставщику.Период УБЫВ";		
		
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("НачДата",(НачалоДня(ТекущаяДата())- 60*60*24*30));
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Запрос.УстановитьПараметр("Товар",ТоварСсылка);
		ПараметрыСеанса.ИспользоватьШаблоныОграничения = Ложь;
		ТЗЗаказПоступление = Запрос.Выполнить().Выгрузить();
		ПараметрыСеанса.ИспользоватьШаблоныОграничения = Истина;
	КонецЕсли;
	
	
КонецПроцедуры


Процедура СформироватьСводныйПрайс366()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбслуживаемыеАптеки.Владелец.Код366 КАК КодПоставщика
	               |ИЗ
	               |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	               |ГДЕ
	               |	ОбслуживаемыеАптеки.Аптека = &Аптека
	               |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА";
				   
	Запрос.УстановитьПараметр("Аптека",Аптека);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить("У Аптеки нет привязки к поставщикам!",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	МассивПоставщиков = Новый Массив;
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПоставщиков.Добавить(Выборка.КодПоставщика);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КаталогПрайсЛистов366.КодПрайсЛиста
	               |ИЗ
	               |	РегистрСведений.КаталогПрайсЛистов366 КАК КаталогПрайсЛистов366
	               |ГДЕ
	               |	КаталогПрайсЛистов366.КодПоставщика в (&МассивПоставщиков)
	               |	И КаталогПрайсЛистов366.КодФирмы = &КодФирмы366";
				   
	Запрос.УстановитьПараметр("МассивПоставщиков",МассивПоставщиков);
	Запрос.УстановитьПараметр("КодФирмы366",КодФирмы366);

	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщить("Нет прайлистов для этой аптеки",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	МассивПрайсов = Новый Массив;
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПрайсов.Добавить(Выборка.КодПрайсЛиста);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбслуживаемыеАптеки.Владелец КАК Поставщик,
	               |	ОбслуживаемыеАптеки.Владелец.Код366 КАК КодПоставщика
	               |ПОМЕСТИТЬ ТЗПоставщиков
	               |ИЗ
	               |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	               |ГДЕ
	               |	ОбслуживаемыеАптеки.Аптека = &Аптека
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПрайсЛисты366.КодИндивидуальный КАК Код,
	               |	ПрайсЛисты366.Наименование КАК Наименование,
	               |	ПрайсЛисты366.Цена КАК Цена,
	               |	ПрайсЛисты366.Остаток КАК Количество,
	               |	ТЗПоставщиков.Поставщик,
	               |	ПрайсЛисты366.СрокГодности КАК СрокГодности,
	               |	1 КАК Кратность,
	               |	ЛОЖЬ КАК Блокировка,
	               |	"""" КАК Производитель
	               |ПОМЕСТИТЬ СводныйПрайс
	               |ИЗ
	               |	РегистрСведений.ПрайсЛисты366 КАК ПрайсЛисты366
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Связки366 КАК Связки366
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	               |			ПО Связки366.КодАП = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	               |				И (АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка = &Товар)
	               |		ПО ПрайсЛисты366.КодИндивидуальный = Связки366.КодИндивидуальный
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов366 КАК КаталогПрайсЛистов366
	               |		ПО (КаталогПрайсЛистов366.КодПрайсЛиста = ПрайсЛисты366.КодПрайсЛиста)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗПоставщиков КАК ТЗПоставщиков
	               |		ПО (ТЗПоставщиков.КодПоставщика = КаталогПрайсЛистов366.КодПоставщика)
	               |			И (КаталогПрайсЛистов366.КодФирмы = &КодФирмы366)
	               |ГДЕ
	               |	ПрайсЛисты366.КодПрайсЛиста В(&КодыПрайсов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СводныйПрайс.Код,
	               |	СводныйПрайс.Наименование,
	               |	СводныйПрайс.Цена,
	               |	СводныйПрайс.Количество,
	               |	ЕСТЬNULL(УточненныйЗаказ.Количество, 0) КАК Заказать,
	               |	СводныйПрайс.Поставщик,
	               |	СводныйПрайс.СрокГодности,
	               |	СводныйПрайс.Кратность,
	               |	СводныйПрайс.Блокировка,
	               |	СводныйПрайс.Производитель
	               |ИЗ
	               |	СводныйПрайс КАК СводныйПрайс
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	               |		ПО СводныйПрайс.Поставщик = УточненныйЗаказ.Поставщик
	               |			И (УточненныйЗаказ.Пользователь = &Пользователь)
	               |			И (УточненныйЗаказ.Склад = &Аптека)
	               |			И СводныйПрайс.Код = УточненныйЗаказ.КодТовараПоставщика
	               |			И СводныйПрайс.Цена = УточненныйЗаказ.Цена
	               |			И СводныйПрайс.СрокГодности = УточненныйЗаказ.СрокГодности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СводныйПрайс
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТЗПоставщиков";
	

	Запрос.УстановитьПараметр("КодыПрайсов",МассивПрайсов);
	Запрос.УстановитьПараметр("Аптека",Аптека);
	Запрос.УстановитьПараметр("Товар",ТоварСсылка);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	ТЗ = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.СводныйПрайс.Значение=ТЗ;
	//ЭлементыФормы.СводныйПрайс.СоздатьКолонки();
	//ЭлементыФормы.СводныйПрайс.Колонки.Код.Ширина = 6;
	//ЭлементыФормы.СводныйПрайс.Колонки.Наименование.Ширина = 50;
	//ЭлементыФормы.СводныйПрайс.Колонки.Ж.Ширина = 4;
	//ЭлементыФормы.СводныйПрайс.Колонки.Поставщик.Ширина = 30;
	//ЭлементыФормы.СводныйПрайс.Колонки.Заказать.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Цена.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Количество.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Производитель.Ширина = 30;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	Партии.ДатаПоступления КАК Дата,
	      |	Партии.ЦенаЗакупБезНДСРасчет КАК Цена,
	      |	ПартииЖНВЛСОстатки.КоличествоОстаток КАК Остаток,
	      |	ЕСТЬNULL(Пост.Наименование, """") КАК Поставщик
	      |ИЗ
	      |	РегистрНакопления.УЗ_Партии.Остатки(
	      |			,
	      |			ТоварКод = &ТоварКод
	      |				И СкладКод = &АптекаКод) КАК ПартииЖНВЛСОстатки
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	      |		ПО (Партии.Код = ПартииЖНВЛСОстатки.ПартияКод)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики КАК Пост
	      |		ПО (Пост.Код = Партии.Поставщик)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата";
		  
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",Аптека.Код);
	Запрос.УстановитьПараметр("Товар",ТоварСсылка.Код);
	ТЗОстатокПоПартиям = Запрос.Выполнить().Выгрузить();
	//ЭлементыФормы.ТЗОстатокПоПартиям.СоздатьКолонки();
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Дата.Ширина = 6;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Цена.Ширина = 10;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Остаток.Ширина = 10;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Поставщик.Ширина = 20;
	ПоказатьИсториюЗаказов();	  
	
КонецПроцедуры

 
Процедура СформироватьСводныйПрайсСтарый()
	
	ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ОбслуживаемыеАптеки.Владелец КАК Поставщик
	      |ПОМЕСТИТЬ ТЗПоставщиков
	      |ИЗ
	      |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	      |ГДЕ
	      |	ОбслуживаемыеАптеки.Аптека = &Аптека
	      |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Прайсы.Код,
	      |	Прайсы.Товар КАК Наименование,
	      |	Прайсы.Количество,
	      |	Прайсы.Цена КАК Цена,
	      |	Прайсы.Производитель,
	      |	Прайсы.Поставщик,
	      |	ЕСТЬNULL(УточненныйЗаказ.Количество, 0) КАК Заказать,
	      |	Прайсы.СрокГодности,
	      |	ЕСТЬNULL(Связки.Блокировка, ЛОЖЬ) КАК Блокировка,
	      |	Прайсы.Кратность
	      |ИЗ
	      |	РегистрСведений.Прайсы КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	      |		ПО Прайсы.Поставщик = Связки.Поставщик
	      |			И Прайсы.Код = Связки.КодТовараПоставщика
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗПоставщиков КАК ТЗПоставщиков
	      |		ПО (ТЗПоставщиков.Поставщик = Прайсы.Поставщик)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |		ПО Прайсы.Поставщик = УточненныйЗаказ.Поставщик
	      |			И (УточненныйЗаказ.Пользователь = &Пользователь)
	      |			И (УточненныйЗаказ.Склад = &Аптека)
	      |			И Прайсы.Код = УточненныйЗаказ.КодТовараПоставщика
	      |			И Прайсы.Цена = УточненныйЗаказ.Цена
	      |			И Прайсы.СрокГодности = УточненныйЗаказ.СрокГодности
	      |ГДЕ
	      |	Связки.ТоварФирмы = &Товар
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Цена";
			  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",Аптека);
	Запрос.УстановитьПараметр("Товар",ТоварСсылка);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	ТЗ = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.СводныйПрайс.Значение=ТЗ;
	//ЭлементыФормы.СводныйПрайс.СоздатьКолонки();
	//ЭлементыФормы.СводныйПрайс.Колонки.Код.Ширина = 6;
	//ЭлементыФормы.СводныйПрайс.Колонки.Наименование.Ширина = 50;
	//ЭлементыФормы.СводныйПрайс.Колонки.Ж.Ширина = 4;
	//ЭлементыФормы.СводныйПрайс.Колонки.Поставщик.Ширина = 30;
	//ЭлементыФормы.СводныйПрайс.Колонки.Заказать.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Цена.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Количество.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Производитель.Ширина = 30;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	ПартииЖНВЛСОстатки.Партия.ДокументПоступления.Дата КАК Дата,
	      |	ПартииЖНВЛСОстатки.Партия.ЦенаЗакуп КАК Цена,
	      |	ПартииЖНВЛСОстатки.КолвоОстаток КАК Остаток,
	      |	ПартииЖНВЛСОстатки.Партия.Поставщик.Наименование КАК Поставщик
	      |ИЗ
	      |	РегистрНакопления.ПартииЖНВЛС.Остатки(
	      |			,
	      |			Товар = &Товар
	      |				И Склад = &Аптека) КАК ПартииЖНВЛСОстатки
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата";
		  
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",Аптека);
	Запрос.УстановитьПараметр("Товар",ТоварСсылка);
	ТЗОстатокПоПартиям = Запрос.Выполнить().Выгрузить();
	//ЭлементыФормы.ТЗОстатокПоПартиям.СоздатьКолонки();
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Дата.Ширина = 6;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Цена.Ширина = 10;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Остаток.Ширина = 10;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Поставщик.Ширина = 20;
	ПоказатьИсториюЗаказов();	  
	
КонецПроцедуры

 
Процедура СформироватьСводныйПрайс()
	
	ТХТ = "ВЫБРАТЬ
	      |	КаталогПрайсЛистов.Настройка.Владелец КАК Поставщик,
	      |	КаталогПрайсЛистов.Настройка КАК Настройка,
	      |	КаталогПрайсЛистов.КодПрайсЛиста,
	      |	ВЫБОР
	      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	      |			ТОГДА 1
	      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	      |	КОНЕЦ КАК БазовыйКоэфф,
	      |	ВЫБОР
	      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены = 0
	      |			ТОГДА 1
	      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены
	      |	КОНЕЦ КАК КоэффПриведения
	      |ПОМЕСТИТЬ Параметры
	      |ИЗ
	      |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	      |			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	      |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	      |ГДЕ
	      |	КонтрактыИАптеки.Активность = ИСТИНА
	      |	И КонтрактыИАптеки.Аптека = &Аптека
	      |	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	      |	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Прайсы.Код КАК Код,
	      |	Прайсы.Товар КАК Наименование,
	      |	Прайсы.Количество КАК Количество,
	      |	ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2)) КАК Цена,
	      |	Прайсы.Производитель,
	      |	Параметры.Поставщик КАК Поставщик,
	      |	ЕСТЬNULL(УточненныйЗаказ.Количество, 0) КАК Заказать,
	      |	Прайсы.СрокГодности КАК СрокГодности,
	      |	ЕСТЬNULL(Связки.Блокировка, ЛОЖЬ) КАК Блокировка,
	      |	Прайсы.Кратность КАК Кратность,
	      |	Параметры.Настройка КАК Настройка,
	      |	Прайсы.КодПрайсЛиста КАК КодПрайсЛиста,
	      |	Прайсы.НомерЗаписи КАК НомерЗаписи
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	      |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	      |		ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	      |			И (Связки.ТоварФирмы = &Товар)
	      |			И Прайсы.Код = Связки.КодТовараПоставщика
	      |			И (Связки.Блокировка = ЛОЖЬ)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |		ПО (УточненныйЗаказ.Пользователь = &Пользователь)
	      |			И (УточненныйЗаказ.Склад = &Аптека)
	      |			И Прайсы.Код = УточненныйЗаказ.КодТовараПоставщика
	      |			И Прайсы.Цена = УточненныйЗаказ.Цена
	      |			И Прайсы.СрокГодности = УточненныйЗаказ.СрокГодности
	      |ГДЕ
	      |	Связки.ТоварФирмы = &Товар
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2))
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Параметры";
			  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Аптека",Аптека);
	Запрос.УстановитьПараметр("Товар",ТоварСсылка);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийСотр);
	ТЗ = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.СводныйПрайс.Значение=ТЗ;
	//ЭлементыФормы.СводныйПрайс.СоздатьКолонки();
	//ЭлементыФормы.СводныйПрайс.Колонки.Код.Ширина = 6;
	//ЭлементыФормы.СводныйПрайс.Колонки.Наименование.Ширина = 50;
	//ЭлементыФормы.СводныйПрайс.Колонки.Ж.Ширина = 4;
	//ЭлементыФормы.СводныйПрайс.Колонки.Поставщик.Ширина = 30;
	//ЭлементыФормы.СводныйПрайс.Колонки.Заказать.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Цена.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Количество.Ширина = 10;
	//ЭлементыФормы.СводныйПрайс.Колонки.Производитель.Ширина = 30;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	Партии.ДатаПоступления КАК Дата,
	      |	Партии.ЦенаЗакупБезНДСРасчет КАК Цена,
	      |	ПартииЖНВЛСОстатки.КоличествоОстаток КАК Остаток,
	      |	ЕСТЬNULL(Пост.Наименование, """") КАК Поставщик
	      |ИЗ
	      |	РегистрНакопления.УЗ_Партии.Остатки(
	      |			,
	      |			ТоварКод = &ТоварКод
	      |				И СкладКод = &АптекаКод) КАК ПартииЖНВЛСОстатки
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	      |		ПО (Партии.Код = ПартииЖНВЛСОстатки.ПартияКод)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики КАК Пост
	      |		ПО (Пост.Код = Партии.Поставщик)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата";
		  
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("АптекаКод",Аптека.Код);
	Запрос.УстановитьПараметр("ТоварКод",ТоварСсылка.Код);

	ТЗОстатокПоПартиям = Запрос.Выполнить().Выгрузить();
	//ЭлементыФормы.ТЗОстатокПоПартиям.СоздатьКолонки();
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Дата.Ширина = 6;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Цена.Ширина = 10;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Остаток.Ширина = 10;
	//ЭлементыФормы.ТЗОстатокПоПартиям.Колонки.Поставщик.Ширина = 20;
	ПоказатьИсториюЗаказов();	  
	
КонецПроцедуры


Процедура ОтформатироватьОбласть(Макет,Текст,Ширина,НовыйТекст,ФорматнаяСтрока=Неопределено);
	
	Область=Макет.НайтиТекст(Текст,,Макет.Область("ШапкаТаблицы"));
	Если Область<>Неопределено тогда
		Область.Текст=СтрЗаменить(Область.Текст,Текст,НовыйТекст);
		Область.ШиринаКолонки=Ширина;
		Если ФорматнаяСтрока<>Неопределено тогда
			Макет.Область("R"+Область.Верх+"C"+Область.Лево+
			":R"+Макет.ВысотаТаблицы+"C"+Область.Лево).Формат=ФорматнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
		
	ТХТ = "ВЫБРАТЬ
	      |	УточненныйЗаказ.Поставщик.Наименование КАК Поставщик,
	      |	УточненныйЗаказ.Товар.Наименование КАК Товар,
	      |	УточненныйЗаказ.Цена,
	      |	УточненныйЗаказ.СрокГодности,
	      |	УточненныйЗаказ.Количество,
	      |	УточненныйЗаказ.Количество * УточненныйЗаказ.Цена КАК Сумма
	      |ИЗ
	      |	РегистрСведений.УточненныйЗаказ КАК УточненныйЗаказ
	      |ГДЕ
	      |	УточненныйЗаказ.Пользователь = &Пользователь
	      |	И УточненныйЗаказ.Склад = &Склад
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Поставщик,
	      |	Товар
	      |ИТОГИ
	      |	СУММА(Сумма)
	      |ПО
	      |	ОБЩИЕ,
	      |	Поставщик";
		  
		              
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТХТ;
	Построитель.Параметры.Вставить("Пользователь",ПараметрыСеанса.ТекущийСотр);
	Построитель.Параметры.Вставить("Склад",Аптека);
	
	Построитель.Выполнить();
	Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	Построитель.ОформитьМакет();
	Макет=Построитель.Макет;
	ОтформатироватьОбласть(Макет,"Поставщик",20,"Поставщик",Неопределено);
	ОтформатироватьОбласть(Макет,"Товар",50,"Товар",Неопределено);
	ОтформатироватьОбласть(Макет,"СрокГодности",10,"Срок годности","ДФ=dd.MM.yyyy");
	ОтформатироватьОбласть(Макет,"Цена",7,"Цена","ЧЦ=10; ЧДЦ=2");
	ОтформатироватьОбласть(Макет,"Количество",7,"Кол-во","ЧЦ=10; ЧДЦ=0");
	ОтформатироватьОбласть(Макет,"Сумма",10,"Сумма","ЧЦ=10; ЧДЦ=2");
	Макет.Область("ШапкаТаблицы").РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Макет.Область("ШапкаТаблицы").ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;
	Макет.Область("ШапкаТаблицы").ВертикальноеПоложение=ВертикальноеПоложение.Центр;
	Макет.АвтоМасштаб = Истина;
	
	Построитель.Макет=Макет;
	Построитель.Вывести();
		

КонецПроцедуры

Процедура ПриОткрытии()
	КоличествоСтрокТЧ = ВладелецФормы.ТЧ.Количество();
	ПолучитьСтрокуПереходов();
	ЗаполнитьДанныеФормы(ВладелецФормы.ТЧ[ИндексТекСтроки]);
	//Если РаботаЧерезКонвертер = Истина Тогда
	//	СформироватьСводныйПрайс366();
	//Иначе
		СформироватьСводныйПрайс();
	//КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.СводныйПрайс;
	ЭлементыФормы.СводныйПрайс.ТекущаяКолонка = ЭлементыФормы.СводныйПрайс.Колонки.Заказать;
	
КонецПроцедуры

Процедура ПолучитьСледующуюСтрокуТЗВладельца(ТекСтрокаВладельца,Инкремент)
	
	ОбработкаПрерыванияПользователя();
	
	ТекСтрока = ВладелецФормы.ТЧ[ИндексТекСтроки];
	
	Если ПереходВсе = Истина Тогда
		ТекСтрокаВладельца = ТекСтрока;
		Возврат;
	КонецЕсли;
	
	ГруппаАПВладельца = ТекСтрока.ГруппаАП;
	Если Найти(СтрокаПереходов,ГруппаАПВладельца)>0 Тогда
		ТекСтрокаВладельца = ТекСтрока;
		Возврат;
	КонецЕсли;
	
	Если ПереходДефектура = Истина Тогда
		Если ТекСтрока.Дефектура = 1 Тогда
			ТекСтрокаВладельца = ТекСтрока;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПереходЗаказать = Истина Тогда
		Если ТекСтрока.Заказать > 0 Тогда
			ТекСтрокаВладельца = ТекСтрока;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	//Проверка на первую и последнюю строку	таблицы
	Если (ИндексТекСтроки = КоличествоСтрокТЧ - 1) или (ИндексТекСтроки = 0) Тогда
		Предупреждение("Обход закончен.");
		Возврат;
	КонецЕсли;

	ИндексТекСтроки = ИндексТекСтроки + Инкремент;
	ПолучитьСледующуюСтрокуТЗВладельца(ТекСтрокаВладельца,Инкремент);
КонецПроцедуры

Процедура ВызватьПолучениеСледующейИлиПредыдущейСтроки(Инкремент)
	
 	
	ТекСтрокаВладельца=Неопределено;
	
	ИндексТекСтроки = ИндексТекСтроки + Инкремент;
	
	ПолучитьСледующуюСтрокуТЗВладельца(ТекСтрокаВладельца,Инкремент);
	Если ТекСтрокаВладельца = Неопределено Тогда
		Возврат;
	Иначе
		ЗаполнитьДанныеФормы(ТекСтрокаВладельца);
		Если РаботаЧерезКонвертер = Истина Тогда
			СформироватьСводныйПрайс366();
		Иначе
			СформироватьСводныйПрайс();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСледующая(Кнопка)
	
	Если ИндексТекСтроки = КоличествоСтрокТЧ - 1 Тогда
		Предупреждение("Обход закончен.");
		Возврат;
	КонецЕсли;
	ВызватьПолучениеСледующейИлиПредыдущейСтроки(1);
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.СводныйПрайс;
	ЭлементыФормы.СводныйПрайс.ТекущаяКолонка = ЭлементыФормы.СводныйПрайс.Колонки.Заказать;
	
КонецПроцедуры

Процедура ПереходВсеПриИзменении(Элемент)
	ПолучитьСтрокуПереходов();
КонецПроцедуры

Процедура СводныйПрайсЗаказатьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СводныйПрайс.ТекущиеДанные;
	
	
	МенеджерЗаписи = РегистрыСведений.УточненныйЗаказ.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийСотр;
	МенеджерЗаписи.Склад = Аптека;
	МенеджерЗаписи.Поставщик = ТекущиеДанные.Поставщик;
	МенеджерЗаписи.Товар = ТоварСсылка;
	МенеджерЗаписи.КодТовараПоставщика = ТекущиеДанные.Код;
	МенеджерЗаписи.Цена = ТекущиеДанные.Цена;
	МенеджерЗаписи.СрокГодности = ТекущиеДанные.СрокГодности;
	
	Если Элемент.Значение > 0 Тогда  //Если больше ноля, тогда записываем 
		МенеджерЗаписи.Количество = Элемент.Значение;
		МенеджерЗаписи.Записать();
		//Обнуляем заказ в общей обработке автозаказа
		ТекСтрокаВладельца = ВладелецФормы.ТЧ[ИндексТекСтроки];
		ТекСтрокаВладельца.Заказать = 0;
		ТекСтрокаВладельца.Резерв = СводныйПрайс.Итог("Заказать");
		
	Иначе   //Если 0 , тогда надо удалить эту строку заказа
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
		ТекСтрокаВладельца = ВладелецФормы.ТЧ[ИндексТекСтроки];
		ТекСтрокаВладельца.Резерв = СводныйПрайс.Итог("Заказать");		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПредыдущая(Кнопка)
	
	Если ИндексТекСтроки = 0 Тогда
		Предупреждение("Обход закончен.");
		Возврат;
	КонецЕсли;
	ВызватьПолучениеСледующейИлиПредыдущейСтроки(-1);
	
КонецПроцедуры

Процедура ЗаказатьПриИзменении(Элемент)
	
	ТекСтрокаВладельца = ВладелецФормы.ТЧ[ИндексТекСтроки];
	ТекСтрокаВладельца.Заказать = Заказать;
	ТекСтрокаВладельца.Сумма = Заказать*ТекСтрокаВладельца.Цена;
	
КонецПроцедуры

Процедура СводныйПрайсПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Блокировка = Истина Тогда
		ОформлениеСтроки.ЦветФона=Новый Цвет(255,155,240);	
	КонецЕсли;

	
КонецПроцедуры

Процедура ВидимостьТаблицыИсторииЗаказов()
	 ЭлементыФормы.ТЗЗаказПоступление.Видимость = фл_ПоказатьПодробнуюИнформацию;
КонецПроцедуры

Процедура фл_ПоказатьПодробнуюИнформациюПриИзменении(Элемент)
	
	ВидимостьТаблицыИсторииЗаказов();
	ПоказатьИсториюЗаказов();
	
КонецПроцедуры

ПереходВсе = Истина;
КоличествоСтрокТЧ = 0;
фл_ПоказатьПодробнуюИнформацию = Ложь;
ВидимостьТаблицыИсторииЗаказов();
