Перем КаталогХраненияНастроек;
Перем Аптека;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура кнЗаполнитьНажатие(Элемент)
	
	Построитель.Текст	= ТекстЗапросаПостроителя();
	СрокГодности		= НачалоДня(ТекущаяДата()) + 24*60*60*120;
	ПустойСрок			= ОМ3_ПустаяДата();
	Построитель.Параметры.Вставить("СрокГодности", СрокГодности);
	Построитель.Параметры.Вставить("ПустойСрок", ПустойСрок);
	Построитель.Параметры.Вставить("Аптека", Аптека);
	Построитель.Параметры.Вставить("ВидФиксЦены", ВидФиксЦены.Код);
	Построитель.Параметры.Вставить("ВидФиксЦеныЭталон", ВидФиксЦеныЭталон.Код);
	Построитель.Параметры.Вставить("ПоставщикСвязокСослана",Справочники.Поставщики.НайтиПоКоду(2830));
	Построитель.Параметры.Вставить("ТекДата", ТекущаяДата());
	Построитель.Выполнить();
	ТЗВрем				= Построитель.Результат.Выгрузить();
	
	Для Каждого стр Из ТЗВрем Цикл 
		Если стр.СВЦена > 0 Тогда 
			Если стр.СВЦена > 0 И стр.СВЦена <= 10 Тогда 
				стр.СВЦена = Округлить(стр.СВЦена, Перечисления.СпособыОкруглений.До10коп, Перечисления.МетодыОкругления.Математически);
			ИначеЕсли стр.СВЦена > 10 И стр.СВЦена <= 50 Тогда 
				стр.СВЦена = Округлить(стр.СВЦена, Перечисления.СпособыОкруглений.До50коп, Перечисления.МетодыОкругления.Математически);
			ИначеЕсли стр.СВЦена > 50 Тогда 
				стр.СВЦена = Округлить(стр.СВЦена, Перечисления.СпособыОкруглений.ДоРуб, Перечисления.МетодыОкругления.Математически);
			КонецЕсли;
		КонецЕсли;
		
		Если стр.ГруппаНаценки > 0 И стр.ЦенаАП > 0 И стр.ЛучшаяЦена > 0 Тогда 
			Если стр.ПроцентНаценки <= стр.МинНаценка Тогда 
				стр.ФильтрПревышений = 1;
			ИначеЕсли стр.ПроцентНаценки >= стр.МаксНаценка Тогда 
				стр.ФильтрПревышений = 2;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ТЧ.Загрузить(ТЗВрем);
	ТЗВрем	= Неопределено;
	
	фл_ПоказыватьНеактивныеПриИзменении("");
	
КонецПроцедуры
		
Процедура ПересчитатьПроцентНаценки(ТекСТрока)
	
	Если ТекСтрока.ЦенаАП > 0 и ТекСтрока.ЛучшаяЦена > 0 Тогда
		ТекСтрока.ПроцентНаценки = Окр(((ТекСтрока.ЦенаАП-ТекСтрока.ЛучшаяЦена)/ТекСтрока.ЛучшаяЦена)*100,2);
		Если ТекСтрока.ГруппаНаценки > 0  Тогда
			Если ТекСтрока.ПроцентНаценки <= ТекСтрока.МинНаценка Тогда
				ТекСтрока.ФильтрПревышений = 1;
			ИначеЕсли ТекСтрока.ПроцентНаценки >= ТекСтрока.МаксНаценка Тогда
				ТекСтрока.ФильтрПревышений = 2;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекСтрока.ПроцентНаценки = 0;
		ТекСтрока.ФильтрПревышений = 0;
	КонецЕсли;
	
	Если ТекСтрока.ИнтернетЦена > 0 и ТекСтрока.ЛучшаяЦена > 0 Тогда
		ТекСтрока.ПроцентНаценкиИЦ = Окр(((ТекСтрока.ИнтернетЦена-ТекСтрока.ЛучшаяЦена)/ТекСтрока.ЛучшаяЦена)*100,2);
	Иначе
		ТекСтрока.ПроцентНаценкиИЦ = 0;
	КонецЕсли;	
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТЧ;
	
КонецПроцедуры

Процедура УстановитьФиксЦену(КодТовара, Товар, ФиксЦена)
	
	Док = Документы.УстановкаФиксированныхЦен.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.КодТовара = КодТовара;
	Док.Товар = Товар;
	Док.Заявитель = ПараметрыСеанса.ТекущийСотр;
	Док.ВидФиксЦены = ВидФиксЦены;
	Док.Согласован = Истина;
	Док.СогласованКем = Док.Заявитель;
	Док.ФиксЦена = ФиксЦена;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура МинЦенаНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.МинЦена > 0 Тогда
		
		ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		//МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
		
		УстановитьФиксЦену(ТекСтрока.Код,ТоварСсылка,ТекСтрока.МинЦена);
		
		//// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.Товар = ТоварСсылка ;
		//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//МенеджерЗаписи.Прочитать();
		//
		//Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Цена = ТекСтрока.МинЦена;
		//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		//	МенеджерЗаписи.Записать();
		//	
		//Иначе // спозиционироваться не удалось, можно выходить
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Товар = ТоварСсылка ;
		//	МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//	МенеджерЗаписи.Цена = ТекСтрока.МинЦена;
		//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		//	МенеджерЗаписи.Записать();			
		//КонецЕсли;		
		
		ТекСтрока.ЦенаАП = ТекСтрока.МинЦена;
		ПересчитатьПроцентНаценки(ТекСТрока);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СВЦенаНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.СВЦена > 0 Тогда
		
		ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		//МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
		
		УстановитьФиксЦену(ТекСтрока.Код,ТоварСсылка,ТекСтрока.СВЦена);
		
		//// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.Товар = ТоварСсылка ;
		//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//МенеджерЗаписи.Прочитать();
		//
		//Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Цена = ТекСтрока.СВЦена;
		//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		//	МенеджерЗаписи.Записать();
		//	
		//Иначе // спозиционироваться не удалось, можно выходить
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Товар = ТоварСсылка ;
		//	МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//	МенеджерЗаписи.Цена = ТекСтрока.СВЦена;
		//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		//	МенеджерЗаписи.Записать();			
		//КонецЕсли;		
		
		ТекСтрока.ЦенаАП = ТекСтрока.СВЦена;
		ПересчитатьПроцентНаценки(ТекСТрока);
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьЦенуАПНажатие(Элемент)

	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
	
	УстановитьФиксЦену(ТекСтрока.Код,ТоварСсылка,0);	
	//// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
	//МенеджерЗаписи.Период = ТекущаяДата();
	//МенеджерЗаписи.Товар = ТоварСсылка ;
	//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
	//МенеджерЗаписи.Прочитать();
	//
	//Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
	//	МенеджерЗаписи.Период = ТекущаяДата();
	//	МенеджерЗаписи.Цена = 0;
	//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
	//	МенеджерЗаписи.Записать();
	//	
	//Иначе // спозиционироваться не удалось, можно выходить
	//	МенеджерЗаписи.Период = ТекущаяДата();
	//	МенеджерЗаписи.Товар = ТоварСсылка ;
	//	МенеджерЗаписи.СубъектРФ = СубъектРФ ;
	//	МенеджерЗаписи.Цена = 0;
	//	МенеджерЗаписи.Записать();			
	//КонецЕсли;
	
	ТекСтрока.ЦенаАП = 0;
	ПересчитатьПроцентНаценки(ТекСТрока);
	
КонецПроцедуры

Процедура ВвестиНовуюЦенуНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цена = 0;
	Если ВвестиЧисло(Цена, "Введите цену", 10, 2) Тогда
		Если Цена > 0 Тогда
			
			ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
			//МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
			
			УстановитьФиксЦену(ТекСтрока.Код,ТоварСсылка,Цена);
			
			//// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
			//МенеджерЗаписи.Период = ТекущаяДата();
			//МенеджерЗаписи.Товар = ТоварСсылка ;
			//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
			//МенеджерЗаписи.Прочитать();
			//
			//Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
			//	МенеджерЗаписи.Период = ТекущаяДата();
			//	МенеджерЗаписи.Цена = Цена;
			//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
			//	МенеджерЗаписи.Записать();
			//	
			//Иначе // спозиционироваться не удалось, можно выходить
			//	МенеджерЗаписи.Период = ТекущаяДата();
			//	МенеджерЗаписи.Товар = ТоварСсылка ;
			//	МенеджерЗаписи.СубъектРФ = СубъектРФ ;
			//	МенеджерЗаписи.Цена = Цена;
			//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
			//	МенеджерЗаписи.Записать();			
			//КонецЕсли;		
			
			ТекСтрока.ЦенаАП = Цена;
			
			ПересчитатьПроцентНаценки(ТекСтрока);
			
			//Если СокрЛП(СубъектРФ.КодКлассификатора) = "77" Тогда  //Для московской области дублируем фикс цены москвы
			//	
			//	СубъектРФМО = Справочники.СубъектыРФ.НайтиПоНаименованию("Московская область",Истина);
			//	Если НЕ СубъектРФМО.Пустая() Тогда
			//		МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
			//		
			//		// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
			//		МенеджерЗаписи.Товар = ТоварСсылка ;
			//		МенеджерЗаписи.СубъектРФ = СубъектРФМО ;
			//		МенеджерЗаписи.Прочитать();
			//		
			//		Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
			//			
			//			МенеджерЗаписи.Цена = Цена;
			//			МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
			//			МенеджерЗаписи.Записать();
			//			
			//		Иначе // спозиционироваться не удалось, можно выходить
			//			МенеджерЗаписи.Товар = ТоварСсылка ;
			//			МенеджерЗаписи.СубъектРФ = СубъектРФМО ;
			//			МенеджерЗаписи.Цена = Цена;
			//			МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
			//			МенеджерЗаписи.Записать();			
			//		КонецЕсли;				
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура кнЗаполнить1Нажатие(Элемент)
	
	кнЗаполнитьНажатие("");
	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Основная;
	
КонецПроцедуры

Процедура ТЧЦенаАППриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Цена = Элемент.Значение;	
	Если Цена > 0 Тогда
		
		ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		//МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
		УстановитьФиксЦену(ТекСтрока.Код,ТоварСсылка,Цена);
		// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.Товар = ТоварСсылка ;
		//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//МенеджерЗаписи.Прочитать();
		//
		//Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Цена = Цена;
		//	МенеджерЗаписи.Записать();
		//	
		//Иначе // спозиционироваться не удалось, можно выходить
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Товар = ТоварСсылка ;
		//	МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//	МенеджерЗаписи.Цена = Цена;
		//	МенеджерЗаписи.Записать();			
		//КонецЕсли;		
		
		ТекСтрока.ЦенаАП = Цена;
		
		ПересчитатьПроцентНаценки(ТекСтрока);
	ИначеЕсли Цена = 0 Тогда
		УдалитьЦенуАПНажатие("");
	КонецЕсли;
	
	
КонецПроцедуры

Процедура кнПоказатьВсеЦеныНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ  ПустаяСтрока(ТекСтрока.Конкурент) Тогда
		Форма = ПолучитьФорму("ФормаВсеЦены");
		Форма.Код = ТекСтрока.Код;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТЧПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ПроцентНаценки <> 0 и ДанныеСтроки.ГруппаНаценки > 0 Тогда
		Если ДанныеСтроки.ПроцентНаценки <= ДанныеСтроки.МинНаценка Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255, 179, 172);
		ИначеЕсли ДанныеСтроки.ПроцентНаценки >= ДанныеСтроки.МаксНаценка Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(192, 220, 192);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.ЖНВЛС = Истина Тогда   
		ОформлениеСтроки.Ячейки.жв.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.жв.ИндексКартинки = 0;
		//ОформлениеСтроки.Ячейки.жв.значение = ДанныеСтроки.ЖНВЛС;
	Иначе
		ОформлениеСтроки.Ячейки.жв.ОтображатьКартинку = Ложь;
	КонецЕсли;
	
	Если ДанныеСтроки.Активная = Ложь Тогда
		ОформлениеСтроки.ЦветТекста=Новый Цвет(160,160,160);	
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Фильтр;
	
КонецПроцедуры

Процедура ФильтрПриИзменении(Элемент)
	
	ЭлементыФормы.ТЧ.ОтборСтрок.Товар.ВидСравнения	= ВидСравнения.Содержит;
	ЭлементыФормы.ТЧ.ОтборСтрок.Товар.Значение		= СокрЛП(Фильтр);
	ЭлементыФормы.ТЧ.ОтборСтрок.Товар.Использование	= НЕ ПустаяСтрока(Фильтр);
	
КонецПроцедуры

Процедура СохранитьНастройку(КаталогХраненияНастроек)
	
	
	ПарамСохр=Новый СписокЗначений;
	
	НастройкиПостроителяСтр= ЗначениеВСтрокуВнутр(Построитель.ПолучитьНастройки());
	
	ПарамСохр.Добавить(НастройкиПостроителяСтр);
	
	
	СодержимоеФайлаНстроек= ЗначениеВСтрокуВнутр(ПарамСохр);
	
	ТХТ=Новый ТекстовыйДокумент;
	
	ТХТ.ДобавитьСтроку( СодержимоеФайлаНстроек);
	
		
	
	
	ИмяНастройки="";
	ВвестиСтроку(ИмяНастройки,"Имя настройки",100,Ложь);
	
	Если НЕ ПустаяСтрока(ИмяНастройки) Тогда
		
		Ф=Новый Файл(КаталогХраненияНастроек+"\"+ИмяНастройки+".mpr");
		Если Ф.Существует()=Истина Тогда
			Предупреждение("Настройка с таким именем уже существует!");
			Возврат;
		КонецЕсли; 	
		
		ТХТ.Записать(КаталогХраненияНастроек+"\"+ИмяНастройки+".mpr");
		
	КонецЕсли;

	КомПанельНастроеккнОбновитьСписокНастроек("");

КонецПроцедуры

Процедура КомПанельНастроеккнСохранитьНастройку(Кнопка)
	
	СохранитьНастройку(КаталогХраненияНастроек);
	
КонецПроцедуры

Процедура КомПанельНастроеккнОбновитьСписокНастроек(Кнопка)
	
	МассивФайлов=НайтиФайлы(КаталогХраненияНастроек,"*.mpr");
	
	ТЗНастроек.Очистить();
	
	Для каждого  Ф Из МассивФайлов Цикл
		Стр=ТЗНастроек.Добавить();
		Стр.Настройка=Ф.ИмяБезРасширения;
	КонецЦикла;	
	
КонецПроцедуры

Процедура КомПанельНастроеккнЗагрузитьНастройку(Кнопка)
	
	ИмяНастройки=(ЭлементыФормы.ТЗНастроек.ТекущаяСтрока.Настройка);
	
	//Если Найти(ИмяНастройки,"(RDP) ")<>0 Тогда
	//	КХН=ПолучитьПутьНастроекТерминала();
	//Иначе
		КХН=КаталогХраненияНастроек;
	//КонецЕсли;	

	
	ТХТ=Новый ТекстовыйДокумент;
	ТХТ.прочитать(КХН+"\"+ИмяНастройки+".mpr");
	
	
	СписокЗначенийНастроек=ЗначениеИзСтрокиВнутр(ТХТ.ПолучитьТекст());
	
	
	//ВидыДвижений=ЗначениеИзСтрокиВнутр(СписокЗначенийНастроек.Получить(0).Значение);//
	//ВидыДокументов=ЗначениеИзСтрокиВнутр(СписокЗначенийНастроек.Получить(1).Значение);//ЗначениеВСтрокуВнутр(ВидыДокументов);
	
	Построитель.УстановитьНастройки(ЗначениеИзСтрокиВнутр(СписокЗначенийНастроек.Получить(0).Значение));
	
	
КонецПроцедуры

Процедура КомПанельНастроеккнУдалитьНастройку(Кнопка)
	
	ИмяНастройки=(ЭлементыФормы.ТЗНастроек.ТекущаяСтрока.Настройка);
	
	//Если Найти(ИмяНастройки,"(RDP) ")<>0 Тогда
	//	КХН=ПолучитьПутьНастроекТерминала();
	//Иначе
		КХН=КаталогХраненияНастроек;
	//КонецЕсли;	


	
	
	Если Вопрос("Удалить выбранную настройку?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"Удалить настройку?")=КодВозвратаДиалога.Да ТОгда
		попытка
			УдалитьФайлы(КХН+"\"+ИмяНастройки+".mpr");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли; 
	
	КомПанельНастроеккнОбновитьСписокНастроек("");
	
	
КонецПроцедуры

Процедура кнПоказатьВсеЦеныПоставщиковНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ЛучшаяЦена > 0 Тогда
		Форма = ПолучитьФорму("ФормаВсеЦеныПоПоставщику");
		Форма.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		Форма.Аптека = Аптека;
		Форма.Открыть();
	КонецЕсли;
	
	
	
	
КонецПроцедуры

Процедура ТЧПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	 ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
	 
	 
	 Если (ИмяТекКол="Избранное") Тогда
		 Предупреждение("Данная функция отключена!");
		 //ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
		 //Если ТекСтрока.ЦенаАП > 0 Тогда
		 //    
		 //    ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		 //    МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
		 //    
		 //    // указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
		 //    МенеджерЗаписи.Период = ТекущаяДата();
		 //    МенеджерЗаписи.Товар = ТоварСсылка ;
		 //    МенеджерЗаписи.Прочитать();
		 //    
		 //    Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
		 //   	 МенеджерЗаписи.Период = ТекущаяДата();
		 //   	 МенеджерЗаписи.Цена = ТекСтрока.ЦенаАП;
		 //   	 МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		 //   	 МенеджерЗаписи.Записать();
		 //    КонецЕсли;		  
		 //    
		 //КонецЕсли;
	 КонецЕсли;
	
КонецПроцедуры


Процедура ТЧПередНачаломИзменения(Элемент, Отказ)
	
	 ИмяТекКол=Элемент.ТекущаяКолонка.Имя;
	 
	 
	 Если (ИмяТекКол="Избранное") Тогда
		 ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
		 Если ТекСтрока.ЦенаАП = 0 Тогда
			Отказ = истина;
		 КонецЕсли;
	 КонецЕсли;
	 
КонецПроцедуры

Процедура ПриОткрытии()
	
	КомПанельНастроеккнОбновитьСписокНастроек("") ;
	
	
КонецПроцедуры

Функция ЛокОкруглитьДо50коп(Цена)
	
			Если Цена-Цел(Цена)<0.3 Тогда
				Возврат Цел(Цена);
			ИначеЕсли Цена-Цел(Цена)<0.8 Тогда
				Возврат Цел(Цена)+0.5;
			Иначе
				Возврат Цел(Цена)+1;
			КонецЕсли;
	
КонецФункции

Процедура Кнопка2Нажатие(Элемент)
	
	ТХТ = "ВЫБРАТЬ
	      |	ЦеныКонкурентов.КодТовараСправочной КАК КодТовара,
	      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЦеныКонкурентов.Цена) КАК Кол,
	      |	МИНИМУМ(ЦеныКонкурентов.Цена) КАК Цена
	      |ПОМЕСТИТЬ МинЦены
	      |ИЗ
	      |	РегистрСведений.ЦеныКонкурентов КАК ЦеныКонкурентов
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонкурентыЕГК КАК Конкуренты
	      |		ПО (Конкуренты.Код = ЦеныКонкурентов.КодКонкурента)
	      |			И (Конкуренты.Вес > 0)
	      |			И (Конкуренты.ЗагружатьДанные = ИСТИНА)
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	ЦеныКонкурентов.КодТовараСправочной
	      |
	      |ИНДЕКСИРОВАТЬ ПО
	      |	КодТовара,
	      |	Цена
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ЦеныКонкурентов.КодТовараСправочной КАК КодТовара,
	      |	ЦеныКонкурентов.Цена КАК Цена
	      |ПОМЕСТИТЬ ВсеЦены
	      |ИЗ
	      |	РегистрСведений.ЦеныКонкурентов КАК ЦеныКонкурентов
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонкурентыЕГК КАК Конкуренты
	      |		ПО (Конкуренты.Код = ЦеныКонкурентов.КодКонкурента)
	      |			И (Конкуренты.Вес > 0)
	      |			И (Конкуренты.ЗагружатьДанные = ИСТИНА)
	      |
	      |ИНДЕКСИРОВАТЬ ПО
	      |	КодТовара
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВсеЦены.КодТовара,
	      |	ВсеЦены.Цена,
	      |	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаНаценки.РейтингПозиции, 0) КАК Рейтинг
	      |ПОМЕСТИТЬ Итог
	      |ИЗ
	      |	ВсеЦены КАК ВсеЦены
	      |		ЛЕВОЕ СОЕДИНЕНИЕ МинЦены КАК МинЦены
	      |		ПО ВсеЦены.КодТовара = МинЦены.КодТовара
	      |			И ВсеЦены.Цена = МинЦены.Цена
	      |			И (МинЦены.Кол > 1)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	      |		ПО ВсеЦены.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	      |ГДЕ
	      |	МинЦены.КодТовара ЕСТЬ NULL 
	      |	И НЕ АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаНаценки.РейтингПозиции ЕСТЬ NULL 
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Итог.КодТовара,
	      |	Итог.Цена КАК Цена
	      |ИЗ
	      |	Итог КАК Итог
	      |ГДЕ
	      |	Итог.Рейтинг > 0
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Итог.КодТовара,
	      |	Итог.Цена
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Итог.КодТовара,
	      |	ВЫРАЗИТЬ(КОЛИЧЕСТВО(Итог.Цена) * Итог.Рейтинг КАК ЧИСЛО(10, 0)) КАК НомерПозиции,
	      |	0 КАК НоваяЦена
	      |ИЗ
	      |	Итог КАК Итог
	      |ГДЕ
	      |	Итог.Рейтинг > 0
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Итог.КодТовара,
	      |	Итог.Рейтинг
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Итог
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВсеЦены
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ МинЦены";
		  
	Запрос = Новый запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Рейтинг",Рейтинг);
	МассивЗапросов = Запрос.ВыполнитьПакет();
	ТЗВсеЦены = МассивЗапросов[3].Выгрузить();
	ТЗПозиций = МассивЗапросов[4].Выгрузить();
	ТЗВсеЦены.Индексы.Добавить("КодТовара");	
	
	Отбор = Новый Структура();
	КоличествоПозиций = ТЗПозиций.Количество();
	н=0;
	Для каждого стр из ТЗПозиций Цикл
		ОбработкаПрерыванияПользователя();
		н=н+1;
		состояние(""+н+ " из " + КоличествоПозиций);
		Отбор.Очистить();
		Отбор.Вставить("КодТовара",стр.КодТовара);		
		Строки = ТЗВсеЦены.НайтиСтроки(Отбор);	
		ИндексПозиции = ?(стр.НомерПозиции=0,стр.НомерПозиции,стр.НомерПозиции-1);
		НоваяЦена = Строки[ИндексПозиции].Цена*0.995;
		Если НоваяЦена <= 3 Тогда
			НоваяЦена = Окр(НоваяЦена,1);
		ИначеЕсли НоваяЦена > 3 и НоваяЦена <= 100 Тогда
			НоваяЦена = ЛокОкруглитьДо50коп(НоваяЦена);
		Иначе
			НоваяЦена = Окр(НоваяЦена,0);
		КонецЕсли;
		стр.НоваяЦена = НоваяЦена;
		
	КонецЦикла;
	
	ТЗпозиций.Индексы.Добавить("КодТовара");
	Для каждого стр из ТЧ Цикл
		НайденнаяСтрока = ТЗпозиций.Найти(стр.Код,"КодТовара");	
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		стр.НоваяЦена = НайденнаяСтрока.НоваяЦена;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура КнОбновитьРейтинговыеЦеныНажатие(Элемент)
	
	ПарольПроверка = "нельзя";
	Пароль = "";
	Если ВвестиСтроку(Пароль,"Введите пароль",0,Ложь) Тогда
		Если Пароль <> ПарольПроверка Тогда
			Предупреждение("Неверный пароль!",3);
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	
	ТЗ = ТЧ.Выгрузить(,"Код,НоваяЦена");
	ТХТ = "ВЫБРАТЬ
	      |	Т.Код,
	      |	Т.НоваяЦена КАК Цена
	      |ПОМЕСТИТЬ ВТДаты
	      |ИЗ
	      |	&Таб КАК Т
	      |ГДЕ
	      |	Т.НоваяЦена > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
	      |	ВТДаты.Цена
	      |ИЗ
	      |	ВТДаты КАК ВТДаты
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	      |		ПО ВТДаты.Код = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТДаты";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Таб",ТЗ);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		Набор = РегистрыСведений.ЦеныМониторинга.СоздатьНаборЗаписей();
		Набор.Загрузить(ТЗ);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура фл_ПоказыватьНеактивныеПриИзменении(Элемент)
	
   ЭлементыФормы.ТЧ.ОтборСтрок.Активная.ВидСравнения = ВидСравнения.Равно;
   ЭлементыФормы.ТЧ.ОтборСтрок.Активная.Значение =Истина ;
   ЭлементыФормы.ТЧ.ОтборСтрок.Активная.Использование = НЕ фл_ПоказыватьНеактивные;
	
	
КонецПроцедуры

Процедура СубъектРФПриИзменении(Элемент)
	
	кнЗаполнитьНажатие("");
	
КонецПроцедуры

Процедура ЦенаЭталонНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.МинЦена > 0 Тогда
		
		ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		
		УстановитьФиксЦену(ТекСтрока.Код,ТоварСсылка,ТекСтрока.ЦенаАПЭталон);
		//МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
		//
		//// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.Товар = ТоварСсылка ;
		//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//МенеджерЗаписи.Прочитать();
		//
		//Если МенеджерЗаписи.Выбран() Тогда // убедились, что спозиционироваться удалось
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Цена = ТекСтрока.ЦенаАПЭталон;
		//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		//	МенеджерЗаписи.Записать();
		//	
		//Иначе // спозиционироваться не удалось, можно выходить
		//	МенеджерЗаписи.Период = ТекущаяДата();
		//	МенеджерЗаписи.Товар = ТоварСсылка ;
		//	МенеджерЗаписи.СубъектРФ = СубъектРФ ;
		//	МенеджерЗаписи.Цена = ТекСтрока.ЦенаАПЭталон;
		//	МенеджерЗаписи.Избранное = ТекСтрока.Избранное;
		//	МенеджерЗаписи.Записать();			
		//КонецЕсли;		
		
		ТекСтрока.ЦенаАП = ТекСтрока.ЦенаАПЭталон;
		ПересчитатьПроцентНаценки(ТекСТрока);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура кнИнтернетЦенаНажатие(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цена = ТекСтрока.ИнтернетЦена;
	Если ВвестиЧисло(Цена, "Введите интернет цену", 10, 2) Тогда
		Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код).ПолучитьОбъект();
		Товар.МинЦенаMedlux = Цена;
		Товар.Записать();
		
		ТекСтрока.ИнтернетЦена = Цена;
		ПересчитатьПроцентНаценки(ТекСтрока);
	КонецЕсли; 	
	
КонецПроцедуры

Процедура КнЗагрузитьИзФайлаНажатие(Элемент)
	
	// выберем CSV файл
	ДиалогВыбора			= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок	= "Выберите файл";
	ДиалогВыбора.Фильтр		= "Текст с разделителями (*.csv)|*.csv";
	
	Если ДиалогВыбора.Выбрать() Тогда 
		ИмяФайла			= ДиалогВыбора.ПолноеИмяФайла;
	Иначе 
		Возврат;
	КонецЕсли;
	
	//Обработка данных из CSV
	// очищаем информацию в таблице и находим файл на диске, а потом считываем его:
	
	//очищаем таблицу и удаляем колонки
	ТаблицаКодов			= Новый ТаблицаЗначений;
	ТаблицаКодов.Очистить();
	ТаблицаКодов.Колонки.Очистить();
	
	// чтение файла
	ЗагружаемыйФайл			= Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла);
	
	//После того как мы получили все данные из файла, мы считываем 1 строку файла
	// и формируем колонки на форме с наименованиями из файла
	
	Разделитель	= ";";
	//генерируем колонки
	ТаблицаКодов.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКодов.Колонки.Добавить("ИнтернетЦена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	
	// После того, как шапка сформирована можно приступать к обработке самих данных
	Для НомерСтроки = 2 По ЗагружаемыйФайл.КоличествоСтрок() Цикл 
		
		ОбработкаПрерыванияПользователя(); //указав данный оператор, цикл можно прервать в любой момент нажатие ctrl+break
		
		// получить строку файла с указанным номером и преобразуем её в массив
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКолонок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка,Разделитель); // процедура из типовой конфигурации, разбивает строку в массив по разделителям
		НоваяСтрока = ТаблицаКодов.Добавить();
		
		Если МассивКолонок.Количество() <> ТаблицаКодов.Колонки.Количество() Тогда 
			Сообщить("Ошибка со строкой " + Строка);
			Продолжить; // скорее всего в тексте содержит разделитель
		КонецЕсли;
		
		Для НомерКолонки = 1 По МассивКолонок.Количество() Цикл 
			//заполняем строку значениями
			ТекущееЗначение			= МассивКолонок[НомерКолонки-1];
			ИмяКолонки				= ТаблицаКодов.Колонки[НомерКолонки-1].Имя;
			НоваяСтрока[ИмяКолонки]	= ТекущееЗначение;
		КонецЦикла;
		
	КонецЦикла;
	
	СписокКодов		= ТаблицаКодов.ВыгрузитьКолонку("КодТовара");
	
	ТекстСТаблицей	= "ВЫБРАТЬ
                 	  |	ТаблицаКодов.КодТовара КАК КодТовара,
                 	  |	ТаблицаКодов.ИнтернетЦена КАК ИнтернетЦена
                 	  |ПОМЕСТИТЬ ВТТаблицаКодов
                 	  |ИЗ
                 	  |	&ТаблицаКодов КАК ТаблицаКодов
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
					  |";
	
	ПолеИзТаблицы	= "
                 	  |	ВТТаблицаКодов.ИнтернетЦена КАК НоваяИнтернетЦена,
					  |";
	
	ФильтрПоТаблице	= "
					  |ГДЕ
					  |	АССОРТИМЕНТНЫЙ_ПЛАН.Код В(&СписокКодов)
					//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаКодов КАК ВТТаблицаКодов
					//|		ПО (ВТТаблицаКодов.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код)
					  |";
	
	ТекстЗапроса	= Построитель.Текст;
	//ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "//ТекстСТаблицей", ТекстСТаблицей);
	//ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "//ПолеИзТаблицы", ПолеИзТаблицы);
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "//ФильтрПоТаблице", ФильтрПоТаблице);
	
	//ОписаниеИсточникаДанных		= Новый ОписаниеИсточникаДанных(ТаблицаКодов);
	//ОписаниеИсточникаДанных.Колонки.КодТовара.Измерение		= Истина;
	//ОписаниеИсточникаДанных.Колонки.ИнтернетЦена.Измерение	= Ложь;
	//Построитель.ИсточникДанных	= ОписаниеИсточникаДанных; 
	
	//Для Каждого ЭлМассива Из СписокКодов Цикл 
	//	Сообщить(ЭлМассива);
	//КонецЦикла;
	//Сообщить(ТекстЗапроса);
	
	Построитель.Текст	= ТекстЗапроса;
	
	СрокГодности	= НачалоДня(ТекущаяДата()) + 24*60*60*120;
	ПустойСрок		= ОМ3_ПустаяДата();
	Построитель.Параметры.Вставить("СрокГодности", СрокГодности);
	Построитель.Параметры.Вставить("ПустойСрок", ПустойСрок);
	Построитель.Параметры.Вставить("Аптека", Аптека);
	Построитель.Параметры.Вставить("ВидФиксЦены", ВидФиксЦены.Код);
	Построитель.Параметры.Вставить("ВидФиксЦеныЭталон", ВидФиксЦеныЭталон.Код);
	//Построитель.Параметры.Вставить("ТаблицаКодов", ТаблицаКодов);
	Построитель.Параметры.Вставить("СписокКодов", СписокКодов);
	
	Построитель.Выполнить();
	ТЗВрем			= Построитель.Результат.Выгрузить();
	
	Для Каждого стр Из ТЗВрем Цикл 
		Если стр.СВЦена > 0 Тогда 
			Если стр.СВЦена > 0 И стр.СВЦена <= 10 Тогда 
				стр.СВЦена = Округлить(стр.СВЦена, Перечисления.СпособыОкруглений.До10коп, Перечисления.МетодыОкругления.Математически);
			ИначеЕсли стр.СВЦена > 10 И стр.СВЦена <= 50 Тогда 
				стр.СВЦена = Округлить(стр.СВЦена, Перечисления.СпособыОкруглений.До50коп, Перечисления.МетодыОкругления.Математически);
			ИначеЕсли стр.СВЦена > 50 Тогда 
				стр.СВЦена = Округлить(стр.СВЦена, Перечисления.СпособыОкруглений.ДоРуб, Перечисления.МетодыОкругления.Математически);
			КонецЕсли;
		КонецЕсли;
		
		Если стр.ГруппаНаценки > 0 И стр.ЦенаАП > 0 И стр.ЛучшаяЦена > 0 Тогда 
			Если стр.ПроцентНаценки <= стр.МинНаценка Тогда 
				стр.ФильтрПревышений = 1;
			ИначеЕсли стр.ПроцентНаценки >= стр.МаксНаценка Тогда 
				стр.ФильтрПревышений = 2;
			КонецЕсли;
		КонецЕсли;
		
		НайденнаяСтрока			= ТаблицаКодов.Найти(стр.Код, "КодТовара");
		Если Не НайденнаяСтрока = Неопределено Тогда 
			стр.ИнтернетЦена	= НайденнаяСтрока.ИнтернетЦена;
		КонецЕсли;
		
	КонецЦикла;
	ТЧ.Загрузить(ТЗВрем);
	ТЗВрем	= Неопределено;
	
	фл_ПоказыватьНеактивныеПриИзменении("");
	
КонецПроцедуры

Процедура КнИзменитьЦеныНажатие(Элемент)
	
	Для Каждого ТекСтрока Из ТЧ Цикл 
		
		Цена					= ТекСтрока.ИнтернетЦена;
		Товар					= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код).ПолучитьОбъект();
		Товар.МинЦенаMedlux		= Цена;
		Товар.Записать();
		
		//ТекСтрока.ИнтернетЦена	= Цена;
		ПересчитатьПроцентНаценки(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПостроителя()
	
	ТекстЗапроса	= "
                 	  |//ТекстСТаблицей
                 	  |ВЫБРАТЬ
                 	  |	КаталогПрайсЛистов.Настройка.Владелец КАК Поставщик,
                 	  |	КаталогПрайсЛистов.Настройка КАК Настройка,
                 	  |	КаталогПрайсЛистов.КодПрайсЛиста,
                 	  |	ВЫБОР
                 	  |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
                 	  |			ТОГДА 1
                 	  |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
                 	  |	КОНЕЦ КАК БазовыйКоэфф,
                 	  |	ВЫБОР
                 	  |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены = 0
                 	  |			ТОГДА 1
                 	  |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены
                 	  |	КОНЕЦ КАК КоэффПриведения
                 	  |ПОМЕСТИТЬ Параметры
                 	  |ИЗ
                 	  |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
                 	  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
                 	  |			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
                 	  |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
                 	  |ГДЕ
                 	  |	КонтрактыИАптеки.Активность = ИСТИНА
                 	  |	И КонтрактыИАптеки.Аптека = &Аптека
                 	  |	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
                 	  |	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |ВЫБРАТЬ
                 	  |	Связки.ТоварФирмы.Код КАК КодТовара,
                 	  |	МИНИМУМ(ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2))) КАК Цена
                 	  |ПОМЕСТИТЬ ТЗЛучшихЦенБезПоставщика
                 	  |ИЗ
                 	  |	РегистрСведений.ПрайсЛисты КАК Прайсы
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
                 	  |		ПО (Связки.Поставщик = Прайсы.ПоставщикСвязки)
                 	  |			И (Связки.КодТовараПоставщика = Прайсы.Код)
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
                 	  |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
                 	  |ГДЕ
                 	  //|	Связки.Поставщик.ОсуществляетПрямыеПоставки = ИСТИНА
                 	  |	 Связки.Блокировка = ЛОЖЬ
                 	  |	И ВЫБОР
                 	  |			КОГДА Прайсы.Цена > 0
                 	  |					И Прайсы.Цена < 50
                 	  |					И Прайсы.Количество > 200
                 	  |				ТОГДА ИСТИНА
                 	  |			КОГДА Прайсы.Цена >= 50
                 	  |					И Прайсы.Цена < 5000
                 	  |					И Прайсы.Количество > 10
                 	  |				ТОГДА ИСТИНА
                 	  |			КОГДА Прайсы.Цена >= 5000
                 	  |				ТОГДА ИСТИНА
                 	  |			ИНАЧЕ ЛОЖЬ
                 	  |		КОНЕЦ = ИСТИНА
                 	  |	И (Прайсы.СрокГодности > &СрокГодности
                 	  |			ИЛИ Прайсы.СрокГодности = &ПустойСрок)
                 	  |{ГДЕ
                 	  |	Связки.ТоварФирмы.* КАК Товар}
                 	  |
                 	  |СГРУППИРОВАТЬ ПО
                 	  |	Связки.ТоварФирмы.Код
                 	  |
                 	  |ИНДЕКСИРОВАТЬ ПО
                 	  |	КодТовара
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |ВЫБРАТЬ
                 	  |	ТЗЛучшихЦенБезПоставщика.КодТовара КАК КодТовара,
                 	  |	МИНИМУМ(Связки.Поставщик.Наименование) КАК Поставщик,
                 	  |	МИНИМУМ(ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2))) КАК Цена
                 	  |ПОМЕСТИТЬ ТЗЛучшихЦен
                 	  |ИЗ
                 	  |	РегистрСведений.ПрайсЛисты КАК Прайсы
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
                 	  |		ПО (Связки.Поставщик = Прайсы.ПоставщикСвязки)
                 	  |			И (Связки.КодТовараПоставщика = Прайсы.Код)
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
                 	  |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗЛучшихЦенБезПоставщика КАК ТЗЛучшихЦенБезПоставщика
                 	  |		ПО (ТЗЛучшихЦенБезПоставщика.КодТовара = Связки.ТоварФирмы.Код)
                 	  |			И (ТЗЛучшихЦенБезПоставщика.Цена = (ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2))))
                 	  |ГДЕ
                 	  |	Связки.Блокировка = ЛОЖЬ
                 	  //|	И Связки.Поставщик.ОсуществляетПрямыеПоставки = ИСТИНА
                 	  |{ГДЕ
                 	  |	Связки.ТоварФирмы.* КАК Товар}
                 	  |
                 	  |СГРУППИРОВАТЬ ПО
                 	  |	ТЗЛучшихЦенБезПоставщика.КодТовара
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |ВЫБРАТЬ
                 	  |	МАКСИМУМ(ЦеныКонкурентов.КодКонкурента) КАК КодКонкурента,
                 	  |	ЦеныКонкурентов.КодТовараСправочной,
                 	  |	ЛучшаяЦенаПоТовару.МинЦена
                 	  |ПОМЕСТИТЬ МинЦеныКонкурента
                 	  |ИЗ
                 	  |	РегистрСведений.ЦеныКонкурентов КАК ЦеныКонкурентов
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонкурентыЕГК КАК Конкуренты1
                 	  |		ПО (Конкуренты1.Код = ЦеныКонкурентов.КодКонкурента)
                 	  |			И (Конкуренты1.Вес > 0)
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                 	  |			ЦеныКонкурентов.КодТовараСправочной КАК КодТовараСправочной,
                 	  |			МИНИМУМ(ЦеныКонкурентов.Цена) КАК МинЦена
                 	  |		ИЗ
                 	  |			РегистрСведений.ЦеныКонкурентов КАК ЦеныКонкурентов
                 	  |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонкурентыЕГК КАК Конкуренты
                 	  |				ПО (Конкуренты.Код = ЦеныКонкурентов.КодКонкурента)
                 	  |					И (Конкуренты.Вес > 0)
                 	  |		ГДЕ
                 	  |			Конкуренты.Вес > 0
                 	  |			И Конкуренты.ЗагружатьДанные = ИСТИНА
                 	  |		
                 	  |		СГРУППИРОВАТЬ ПО
                 	  |			ЦеныКонкурентов.КодТовараСправочной) КАК ЛучшаяЦенаПоТовару
                 	  |		ПО ЦеныКонкурентов.КодТовараСправочной = ЛучшаяЦенаПоТовару.КодТовараСправочной
                 	  |			И ЦеныКонкурентов.Цена = ЛучшаяЦенаПоТовару.МинЦена
                 	  |
                 	  |СГРУППИРОВАТЬ ПО
                 	  |	ЦеныКонкурентов.КодТовараСправочной,
                 	  |	ЛучшаяЦенаПоТовару.МинЦена
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |ВЫБРАТЬ
                 	  |	СУММА(ЦеныКонкурентов.Цена * Конкуренты.Вес) / СУММА(Конкуренты.Вес) КАК СВЦена,
                 	  |	ЦеныКонкурентов.КодТовараСправочной,
                 	  |	МинЦеныКонкурента.КодКонкурента,
                 	  |	МинЦеныКонкурента.МинЦена
                 	  |ПОМЕСТИТЬ ВыборкаПоКонкуренту
                 	  |ИЗ
                 	  |	РегистрСведений.ЦеныКонкурентов КАК ЦеныКонкурентов
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонкурентыЕГК КАК Конкуренты
                 	  |		ПО (Конкуренты.Код = ЦеныКонкурентов.КодКонкурента)
                 	  |			И (Конкуренты.Вес > 0)
                 	  |			И (Конкуренты.ЗагружатьДанные = ИСТИНА)
                 	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинЦеныКонкурента КАК МинЦеныКонкурента
                 	  |		ПО (МинЦеныКонкурента.КодТовараСправочной = ЦеныКонкурентов.КодТовараСправочной)
                 	  |
                 	  |СГРУППИРОВАТЬ ПО
                 	  |	ЦеныКонкурентов.КодТовараСправочной,
                 	  |	МинЦеныКонкурента.КодКонкурента,
                 	  |	МинЦеныКонкурента.МинЦена
					  |
					  |ИНДЕКСИРОВАТЬ ПО
					  |	ЦеныКонкурентов.КодТовараСправочной
					  |;
					  |ВЫБРАТЬ
					  |	Связки.ТоварФирмы КАК Товар,
					  |МИНИМУМ(ПрайсЛистыСторонние.Цена) КАК ЦЕна
					  |ПОМЕСТИТЬ ВыборкаСтороннихЦен
					  |ИЗ
					  |РегистрСведений.ПрайсЛистыСторонние КАК ПрайсЛистыСторонние
					  |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
					  |ПО ПрайсЛистыСторонние.Код = Связки.КодТовараПоставщика
					  |И (Связки.Поставщик = &ПоставщикСвязокСослана)
                 	  |{ГДЕ
                 	  |	Связки.ТоварФирмы.* КАК Товар}					  
					  |
					  |СГРУППИРОВАТЬ ПО
					  |Связки.ТоварФирмы               
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	КонтрактыПроизводителейТовар.Товар,
					  |	МАКСИМУМ(Выразить(КонтрактыПроизводителейТовар.ЦенаЗакупБезНДС * КонтрактыПроизводителейТовар.БонусОптовый/100 КАК Число(12,2))) КАК СуммаБонуса
					  |ПОМЕСТИТЬ втОптовыеБонусы
					  |ИЗ
					  |	Документ.КонтрактыПроизводителей.Товар КАК КонтрактыПроизводителейТовар
					  |
					  |ГДЕ
					  |	КонтрактыПроизводителейТовар.Отменена = ЛОЖЬ
					  |	И КонтрактыПроизводителейТовар.Ссылка.Согласован
					  | И &ТекДата Между КонтрактыПроизводителейТовар.Ссылка.НачалоПериода И КонтрактыПроизводителейТовар.Ссылка.КонецПериода
					  | И КонтрактыПроизводителейТовар.ЦенаЗакупБезНДС > 0
					  | И КонтрактыПроизводителейТовар.БонусОптовый > 0
					  |
					  |{ГДЕ
                 	  |	КонтрактыПроизводителейТовар.Товар.* КАК Товар}
                 	  |
					  |СГРУППИРОВАТЬ ПО
					  |	КонтрактыПроизводителейТовар.Товар
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	МаркетинговыеКонтрактыТовар.Товар,
					  |	МАКСИМУМ(МаркетинговыеКонтрактыТовар.СуммаУсловногоБонусаЗаУпаковку + Выбор Когда МаркетинговыеКонтрактыТовар.ОтменаБУБ Тогда 0 Иначе МаркетинговыеКонтрактыТовар.СуммаБезусловногоБонусаЗаУпаковку Конец) КАК СуммаБонуса
					  |ПОМЕСТИТЬ втМаркетинговыеБонусы
					  |ИЗ
					  |	Документ.МаркетинговыеКонтракты.Товар КАК МаркетинговыеКонтрактыТовар
					  |
					  |ГДЕ
					  |	МаркетинговыеКонтрактыТовар.Отменена = ЛОЖЬ
					  |	И МаркетинговыеКонтрактыТовар.Ссылка.Согласован
					  | И &ТекДата Между МаркетинговыеКонтрактыТовар.Ссылка.НачалоПериода И МаркетинговыеКонтрактыТовар.Ссылка.КонецПериода
					  |
					  |{ГДЕ
                 	  |	МаркетинговыеКонтрактыТовар.Товар.* КАК Товар}
                 	  |
					  |СГРУППИРОВАТЬ ПО
					  |	МаркетинговыеКонтрактыТовар.Товар
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП КАК Активная,
					  |	ВЫБОР
					  |		КОГДА АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС = ИСТИНА
                 	  |			ТОГДА 1
                 	  |		ИНАЧЕ 0
                 	  |	КОНЕЦ КАК ЖНВЛС,
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Товар,
                 	  |	ЕСТЬNULL(ФиксЦены.Цена, 0) КАК ЦенаАП,
                 	  |	ЕСТЬNULL(ФиксЦеныЭталон.Цена, 0) КАК ЦенаАПЭталон,
                 	  |	ЕСТЬNULL(АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаНаценки.Наценка, 0) КАК ГруппаНаценки,
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаНаценки.МинНаценка КАК МинНаценка,
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.ГруппаНаценки.МаксНаценка КАК МаксНаценка,
                 	  |	ЕСТЬNULL(ВыборкаПоКонкуренту.СВЦена, 0) КАК СВЦена,
                 	  |	ВыборкаПоКонкуренту.МинЦена,
                 	  |	Конкуренты.Наименование КАК Конкурент,
                 	  |	ЕСТЬNULL(ТЗЛучшихЦен.Цена, 0) КАК ЛучшаяЦена,
                 	  |	ЕСТЬNULL(ТЗЛучшихЦен.Поставщик, """") КАК Поставщик,
                 	  //|	ЕСТЬNULL(ФиксЦены.Избранное, ЛОЖЬ) КАК Избранное,
					  |	ЛОЖЬ КАК Избранное,
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.СпецПроект.Наименование КАК СпецПроект,
                 	  |	ВЫБОР
                 	  |		КОГДА ТЗЛучшихЦен.Цена > 0
                 	  |				И ФиксЦены.Цена > 0
                 	  |			ТОГДА ВЫРАЗИТЬ((ФиксЦены.Цена - ТЗЛучшихЦен.Цена) / ТЗЛучшихЦен.Цена * 100 КАК ЧИСЛО(10, 2))
                 	  |		ИНАЧЕ 0
                 	  |	КОНЕЦ КАК ПроцентНаценки,
                 	  |	ВЫБОР
                 	  |		КОГДА ТЗЛучшихЦен.Цена > 0
                 	  |				И АССОРТИМЕНТНЫЙ_ПЛАН.МинЦенаMedlux > 0
                 	  |			ТОГДА ВЫРАЗИТЬ((АССОРТИМЕНТНЫЙ_ПЛАН.МинЦенаMedlux - ТЗЛучшихЦен.Цена) / ТЗЛучшихЦен.Цена * 100 КАК ЧИСЛО(10, 2))
                 	  |		ИНАЧЕ 0
                 	  |	КОНЕЦ КАК ПроцентНаценкиИЦ,
                 	  |	ЕСТЬNULL(ЦеныМониторинга.Цена, 0) КАК НоваяЦена,
                 	  |	0 КАК ФильтрПревышений,
                 	  |//ПолеИзТаблицы
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.МинЦенаMedlux КАК ИнтернетЦена,
					  |	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Наименование КАК Производитель,
					  |	АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦена КАК ЦенаЗакупАП,
					  | ЕСТЬNULL(ВыборкаСтороннихЦен.Цена,0) как СторонняяЦена,
					  | ЕСТЬNULL(втОптовыеБонусы.СуммаБонуса,0) как ОптовыйБонус,
					  | ЕСТЬNULL(втМаркетинговыеБонусы.СуммаБонуса,0) как МаркетинговыйБонус, АССОРТИМЕНТНЫЙ_ПЛАН.Маркер,
					  | АССОРТИМЕНТНЫЙ_ПЛАН.Локомотив,
					  | АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.Ссылка КАК Бренд,
					  | АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО.Ссылка КАК ТипДляЦО
                 	  |ИЗ
                 	  |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
					  //|//ФильтрПоТаблице
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаПоКонкуренту КАК ВыборкаПоКонкуренту
                 	  |		ПО (ВыборкаПоКонкуренту.КодТовараСправочной = АССОРТИМЕНТНЫЙ_ПЛАН.Код)
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗЛучшихЦен КАК ТЗЛучшихЦен
                 	  |		ПО (ТЗЛучшихЦен.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код)
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонкурентыЕГК КАК Конкуренты
                 	  |		ПО (ВыборкаПоКонкуренту.КодКонкурента = Конкуренты.Код)
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксЦены.СрезПоследних(,ВидФиксЦены = &ВидФиксЦены) КАК ФиксЦены
                 	  |		ПО (ФиксЦены.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код)
                 	  //|			И (ФиксЦены.СубъектРФ = &СубъектРФ)
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксЦены.СрезПоследних(,ВидФиксЦены = &ВидФиксЦены) КАК ФиксЦеныЭталон
                 	  |		ПО (ФиксЦеныЭталон.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код)
                 	  //|			И (ФиксЦеныЭталон.СубъектРФ = &СубъектРФЭталон)
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныМониторинга КАК ЦеныМониторинга
                 	  |		ПО (ЦеныМониторинга.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка)
                 	  |		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаСтороннихЦен КАК ВыборкаСтороннихЦен
                 	  |		ПО (ВыборкаСтороннихЦен.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка)
					  |		ЛЕВОЕ СОЕДИНЕНИЕ втОптовыеБонусы КАК втОптовыеБонусы
                 	  |		ПО (втОптовыеБонусы.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка)
					  |		ЛЕВОЕ СОЕДИНЕНИЕ втМаркетинговыеБонусы КАК втМаркетинговыеБонусы
                 	  |		ПО (втМаркетинговыеБонусы.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка)
					  |//ФильтрПоТаблице
                 	  |{ГДЕ
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка.* КАК Товар}
                 	  |
                 	  |УПОРЯДОЧИТЬ ПО
                 	  |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |УНИЧТОЖИТЬ ТЗЛучшихЦен
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |УНИЧТОЖИТЬ Параметры
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |УНИЧТОЖИТЬ МинЦеныКонкурента
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |УНИЧТОЖИТЬ ТЗЛучшихЦенБезПоставщика
                 	  |;
                 	  |
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |УНИЧТОЖИТЬ ВыборкаСтороннихЦен
                 	  |;					  
                 	  |////////////////////////////////////////////////////////////////////////////////
                 	  |УНИЧТОЖИТЬ ВыборкаПоКонкуренту";
					  
	Возврат ТекстЗапроса;
КонецФункции

Процедура СинхронизацияЦенПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	
	Если ЭлементыФормы.СинхронизацияЦен.ТекущаяСтраница = ЭлементыФормы.СинхронизацияЦен.Страницы.ИсторияИзмененияФЦ Тогда
		ИсторияИзмененийФЦ.Очистить();
		ТекСтрока = ЭлементыФормы.ТЧ.ТекущаяСтрока;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;		
		ТоварСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(ТекСтрока.Код);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФиксированныеЦены.Период КАК Период,
		               |	ФиксированныеЦены.Товар,
		               |	ФиксированныеЦены.Цена,
		               |	ФиксированныеЦены.Избранное,
		               |	ФиксированныеЦены.Пользователь
		               |ИЗ
		               |	РегистрСведений.ФиксированныеЦены КАК ФиксированныеЦены
		               |ГДЕ
		               |	ФиксированныеЦены.Товар = &Товар
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период";
		Запрос.УстановитьПараметр("Товар",ТоварСсылка);
		ИсторияИзмененийФЦ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура кнЗагрузитьФиксЦеныНажатие(Элемент)
	
	
	XLS=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	XLS.ПолноеИмяФайла = "";
	XLS.МножественныйВыбор = Ложь;
	XLS.Заголовок = "Выберите файл формата Excel";
	XLS.Фильтр="*.xls|*.xls";
	Если XLS.Выбрать() Тогда
		ФайлЭксель=XLS.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;	
	
	Если ПустаяСтрока(СокрЛП(ФайлЭксель)) = Истина Тогда
		Предупреждение("Не выбран файл для загрузки");
		Возврат;
	КонецЕсли;
	
	Excel = Новый COMОбъект("Excel.Application");
	Попытка
		Книга = Excel.WorkBooks.Open(СокрЛП(ФайлЭксель));
	Исключение
		Сообщить("Файл: " + ФайлЭксель + " либо уже открыт, либо поврежден! Пропускаем его... ");	
		Возврат;
	КонецПопытки;
	
	Лист = Книга.WorkSheets(1);	
	ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	


	
	
	ТХТ = "ВЫБРАТЬ
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка
	      |ИЗ
	      |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН";
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		ТЗТоваров = Запрос.Выполнить().Выгрузить();
		ТЗтоваров.Индексы.Добавить("Код");
	
	
	
	
	АППустаяСсылка = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.ПустаяСсылка();
	
	Для Строка = 2 По ВсегоСтрок Цикл
		
		Если Строка%10 = 0 Тогда
			Состояние("прочитано кодов: " + Строка + " из " + ВсегоСтрок);
		КонецЕсли;


		ОбработкаПрерыванияПользователя();
		Попытка
			КодТовара		= Число(Лист.Cells(Строка,1).Value);
			Цена			= Число(Лист.Cells(Строка,2).Value);
		Исключение
			Продолжить;
		КонецПопытки;
	
		НайденнаяСтрока = ТЗТоваров.Найти(КодТовара,"Код");
		Если НЕ НайденнаяСтрока = Неопределено  Тогда
			ТекТовар = НайденнаяСтрока.Ссылка;
			ТекДата = ТекущаяДата();
			
			УстановитьФиксЦену(КодТовара,ТекТовар,Цена);
			//МенеджерЗаписи = РегистрыСведений.ФиксированныеЦены.СоздатьМенеджерЗаписи();
			//
			//// указываем параметр, по которому определяем, где будем позиционираваться (если одно измерение)
			//МенеджерЗаписи.Период = ТекДата;
			//МенеджерЗаписи.Товар = ТекТовар ;
			//МенеджерЗаписи.СубъектРФ = СубъектРФ ;
			//МенеджерЗаписи.Цена = Цена;
			//МенеджерЗаписи.Записать();
			
			
			
		КонецЕсли;
		
					
	КонецЦикла;
	
	Excel.Quit();
	
	
	
	
КонецПроцедуры


//**********************************

Построитель.Текст		= ТекстЗапросаПостроителя();

КаталогХраненияНастроек	= "\\id-app-01\1C_exchange\EPF_TUNES\УОПТ_v2";
Аптека					= Справочники.МестаХранения.НайтиПоКоду(243);
Рейтинг					= 0.3;
ВидФиксЦены				= Справочники.ВидыФиксированныхЦен.НайтиПоКоду(1);
ВидФиксЦеныЭталон		= ВидФиксЦены;
