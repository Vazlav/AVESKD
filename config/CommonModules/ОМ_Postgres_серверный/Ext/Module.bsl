Функция ПолучитьПодключение(ИмяПодключения)
   //АДО=Новый COMОбъект("ADOdb.Connection");
   
    Попытка 
        АДО=Новый COMОбъект("ADOdb.Connection");
    Исключение
        Возврат неопределено;
    Конецпопытки;   
   

   Настройка=Справочники.НастройкаПодключенияКPGСерверамОбмена.НайтиПоНаименованию(СокрЛП(ИмяПодключения));
   
   Если Настройка.Пустая() Тогда
       ЗаписьЖурналаРегистрации("PG", ,,,"Не нашел настройку "+СокрЛП(ИмяПодключения)) ;
       Возврат Неопределено;
   КонецЕсли;    
   
   Драйвер=СокрЛП(Настройка.Драйвер);//"PostgreSQL UNICODE(x64)";
   Сервер=СокрЛП(Настройка.Сервер);//"10.8.10.196";
   Порт=Формат(Настройка.Порт,"ЧГ=");//"5432";
   База=СокрЛП(Настройка.База);//"ids$apteka$repl";
   Пользователь=СокрЛП(Настройка.Пользователь);//"postgres";
   Пароль=СокрЛП(Настройка.Пароль);//"138963";
   
   Попытка
       АДО.Open("Driver={"+Драйвер+"};Server="+Сервер+";Port="+Порт+";Database="+База+";Uid="+Пользователь+";Pwd="+Пароль+";");
       Возврат АДО;
   Исключение
       Возврат Неопределено;
   КонецПопытки;
    
КонецФункции    
	
Функция ЧекиПолучитьДанные(ТипДанных,ОграничениеВыборки=5000,КодаптекиС=0,КодАптекиПо=0) Экспорт
    
    Если КодаптекиС=0 и КодАптекиПо=0 Тогда
        УсловиеПоКодуАптеки="1=1";
    Иначе
        //УсловиеПоКодуАптеки="cast(id_dep as integer) between "+Формат(КодаптекиС,"ЧГ=0")+" and "+Формат(КодАптекиПо,"ЧГ=0");
		УсловиеПоКодуАптеки="id_dep between '"+Формат(КодаптекиС,"ЧЦ=5; ЧВН=; ЧГ=0")+"' and '"+Формат(КодАптекиПо,"ЧЦ=5; ЧВН=; ЧГ=0") + "'";
    КонецЕсли;
    
    АдоКонн= ПолучитьПодключение("Чеки");  
    
	Если СокрЛП(ТипДанных)="hdr2" Тогда
		// гасим глючные смены. Получаются при выгрузке текущей смены по запросу.
		ТекстЗапроса="UPDATE repl.store_packs
		|Set 
		|	file_name='IGNORED# '||file_name,
		|	processed=True,
		|	process_dt=Now()
		|where 
		|	pack_type = 'hdr2' and
		|	"+УсловиеПоКодуАптеки+"
		|	and 
		|	processed=false
		|	and 
		|	left(encode(pack_data,'escape'),4)='0;0;'
		|";
		
		Попытка
			АдоКонн.Execute(ТекстЗапроса);
		Исключение
		КонецПопытки;
		
		
		
	КонецЕсли;
    
    
    
    
    
    
	//ТекстЗапроса="SELECT 
	//				|id, 
	//				|pack_type, 
	//				|id_dep, 
	//				|doc_dt, 
	//				|posnum, 
	//				|shiftnum, 
	//				|ncheck, 
	//				|file_name, 
	//				|file_dt, 
	//				|create_dt, 
	//				|load_dt, 
	//				|processed, 
	//				|process_dt, 
	//				|encode(pack_data,'escape') as pack_data
	//				|  FROM repl.store_packs
	//				|where 
	//				|   pack_type='"+СокрЛП(ТипДанных)+"'
	//				|   and
	//				|   "+УсловиеПоКодуАптеки+"
	//				|   and
	//				|   processed=false
	//				|Order by id desc 
	//				|LIMIT  "+ФОРМАТ(ОграничениеВыборки,"ЧГ=0");
	//Если СокрЛП(ТипДанных)<>"hdr2" Тогда
	//			
	//	ТекстЗапроса="SELECT 
	//	|id, 
	//	|pack_type, 
	//	|id_dep, 
	//	|doc_dt, 
	//	|posnum, 
	//	|shiftnum, 
	//	|ncheck, 
	//	|file_name, 
	//	|file_dt, 
	//	|create_dt, 
	//	|load_dt, 
	//	|processed, 
	//	|process_dt, 
	//	|encode(pack_data,'escape') as pack_data
	//	|  FROM repl.store_packs
	//	|where  
	//	|   doc_dt < '01.01.2016 00:00:00' 
	//	|   and pack_type='"+СокрЛП(ТипДанных)+"'
	//	|   and
	//	|   "+УсловиеПоКодуАптеки+"
	//	|   and
	//	|   processed=false
	//	|Order by id desc 
	//	|LIMIT  "+ФОРМАТ(ОграничениеВыборки,"ЧГ=0");
	//	
	//Иначе
    ТекстЗапроса="SELECT 
                    |id, 
                    |pack_type, 
                    |id_dep, 
                    |doc_dt, 
                    |posnum, 
                    |shiftnum, 
                    |ncheck, 
                    |file_name, 
                    |file_dt, 
                    |create_dt, 
                    |load_dt, 
                    |processed, 
                    |process_dt, 
                    |encode(pack_data,'escape') as pack_data
                    |  FROM repl.store_packs
                    |where  
					//|   create_dt >= (now() - interval '2 day')
                    |   pack_type='"+СокрЛП(ТипДанных)+"'
                    |   and
                    |   "+УсловиеПоКодуАптеки+"
                    |   and
                    |   processed=false
                    |Order by id desc 
                    |LIMIT  "+ФОРМАТ(ОграничениеВыборки,"ЧГ=0");

	//КонецЕсли;
                 
     
    Если АдоКонн=Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;    
    
    Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
    Попытка 
        АДО_рекордСет.Open(ТекстЗапроса,АдоКонн,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        Возврат Неопределено;
    КонецПопытки;
    
    Попытка
        АДО_рекордСет.MoveFirst();
    Исключение
        Возврат Неопределено;
    КонецПопытки;    
    
    
    ТаблицаВозврата=Новый ТаблицаЗначений;
    ТаблицаВозврата.Колонки.Добавить("id");	//	0
    ТаблицаВозврата.Колонки.Добавить("pack_type");	//	1
    ТаблицаВозврата.Колонки.Добавить("id_dep");	//	2
    ТаблицаВозврата.Колонки.Добавить("doc_dt");	//	3
    ТаблицаВозврата.Колонки.Добавить("posnum");	//	4
    ТаблицаВозврата.Колонки.Добавить("shiftnum");	//	5
    ТаблицаВозврата.Колонки.Добавить("ncheck");	//	6
    ТаблицаВозврата.Колонки.Добавить("file_name");	//	7
    ТаблицаВозврата.Колонки.Добавить("file_dt");	//	8
    ТаблицаВозврата.Колонки.Добавить("create_dt");	//	9
    ТаблицаВозврата.Колонки.Добавить("load_dt");	//	10
    ТаблицаВозврата.Колонки.Добавить("processed");	//	11
    ТаблицаВозврата.Колонки.Добавить("process_dt");	//	12
    ТаблицаВозврата.Колонки.Добавить("pack_data");	//	13

    
    Пока Адо_РекордСет.EOF()=0 Цикл
        
        Стр=ТаблицаВозврата.Добавить();
        
        Стр.id=Число(АДО_рекордСет.Fields(0).Value);
        Стр.pack_type=СокрЛП(АДО_рекордСет.Fields(1).Value);
        Стр.id_dep=Число(АДО_рекордСет.Fields(2).Value);
        Стр.doc_dt=АДО_рекордСет.Fields(3).Value;
        Стр.posnum=АДО_рекордСет.Fields(4).Value;
        Стр.shiftnum=АДО_рекордСет.Fields(5).Value;
        Стр.ncheck=АДО_рекордСет.Fields(6).Value;
        Стр.file_name=АДО_рекордСет.Fields(7).Value;
        Стр.file_dt=АДО_рекордСет.Fields(8).Value;
        Стр.create_dt=АДО_рекордСет.Fields(9).Value;
        Стр.load_dt=АДО_рекордСет.Fields(10).Value;
        Стр.processed=АДО_рекордСет.Fields(11).Value;
        Стр.process_dt=АДО_рекордСет.Fields(12).Value;
        Стр.pack_data=АДО_рекордСет.Fields(13).Value;
        
        Адо_РекордСет.MoveNext();
    КонецЦикла;    
    
    АдоКонн.Close();
    
    Возврат ТаблицаВозврата;
     
 КонецФункции


Функция ЧекиОтметитьЗагрузкуДанных(ТипДанных,МассивID) Экспорт
    
    АдоКонн= ПолучитьПодключение("Чеки");
    
    Если АдоКонн=Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;    
    
	//ТекстЗапроса="UPDATE repl.store_packs  SET  processed=true, process_dt=now()
	//				|WHERE  pack_type='ttt'
	//				|       and
	//				|       processed=false
	//				|       and
	//				|       id in (zzz)";
	
	//ТекстЗапроса = "select repl.arc_store_pack(zzz)";
                    
    //ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ttt",СокрЛП(ТипДанных));
    
    //Х=0;
    
    //СписокКодов="";
    
	Для Каждого ИД Из МассивID Цикл
		
			Попытка
				АдоКонн.Execute("select repl.arc_store_pack("+Формат(ИД,"ЧГ=0")+")");
			Исключение
			КонецПопытки;
		
		
		//Х=Х+1;
		//СписокКодов=СписокКодов+" "+Формат(ИД,"ЧГ=0");
		//
		//Если Х%250=0 Тогда
		//	ТекстЗапросаКВыполнению=СтрЗаменить(ТекстЗапроса,"zzz",СписокКодов);
		//	Попытка
		//		АдоКонн.Execute(ТекстЗапросаКВыполнению);
		//	Исключение
		//	КонецПопытки;
		//	СписокКодов="";
		//Иначе
		//	СписокКодов=СписокКодов+",";
		//КонецЕсли;
       
    КонецЦикла;    
    
	//Если СтрДлина(СписокКодов)<>1 Тогда
	//	Если Прав(СписокКодов,1)="," Тогда // режем запятую в конце
	//		СписокКодов=Лев(СписокКодов,СтрДлина(СписокКодов)-1);
	//	Конецесли; 
	//	
	//	ТекстЗапросаКВыполнению=СтрЗаменить(ТекстЗапроса,"zzz",СписокКодов);
	//	Попытка
	//		АдоКонн.Execute(ТекстЗапросаКВыполнению);
	//	Исключение
	//	КонецПопытки;
	//КонецЕсли;
    
    АдоКонн.Close();
    
    Возврат Истина;
    
    
КонецФункции    


Функция ЧекиОтметитьГлючныйЧек(IDPG) Экспорт
    
    АдоКонн= ПолучитьПодключение("Чеки");
    
    Если АдоКонн=Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;    
    
    //ТекстЗапроса="UPDATE repl.store_packs  SET  file_name='GLUCK! '||file_name
    //|WHERE  id = "+Формат(IDPG,"ЧГ=0");
    
    
    Попытка
        АдоКонн.Execute("select repl.arc_store_pack(" + Формат(IDPG,"ЧГ=0") + ")");
    Исключение
    КонецПопытки;
    
    АдоКонн.Close();
    
    Возврат Истина;
    
    
КонецФункции   


//---------------<чеки, сервисные функции>---------------------------// GtG // 19.04.2014 23:42:35 
Функция ЧекиПолучитьСписокАптек() Экспорт
    АдоКонн= ПолучитьПодключение("Чеки");               
    
    Если АдоКонн=Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;    
    
    Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
    ПГТекст="SELECT
    | id_dep::integer ,
    | Min(doc_dt) as mindate,
    | max(doc_dt) as maxdate
    |FROM repl.store_packs
    |group by id_dep";
    
    Попытка 
        АДО_рекордСет.Open( ПГТекст,АдоКонн,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        Возврат Неопределено;
    КонецПопытки;
    
    Попытка
        АДО_рекордСет.MoveFirst();
    Исключение
        Возврат Неопределено;
    КонецПопытки;    
    
    
    ТаблицаВозврата=Новый ТаблицаЗначений;
    ТаблицаВозврата.Колонки.Добавить("id_dep",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));	//	2
    ТаблицаВозврата.Колонки.Добавить("mindate",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(частидаты.ДатаВремя)));	//	2
    ТаблицаВозврата.Колонки.Добавить("maxdate",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(частидаты.ДатаВремя)));	//	2
    Пока Адо_РекордСет.EOF()=0 Цикл
        
        Стр=ТаблицаВозврата.Добавить();
        
        
        
        Стр.id_dep=Число(АДО_рекордСет.Fields(0).Value);
        Стр.mindate=Число(АДО_рекордСет.Fields(1).Value);
        Стр.maxdate=Число(АДО_рекордСет.Fields(2).Value);
        
        Адо_РекордСет.MoveNext();
    КонецЦикла;    
    
    АдоКонн.Close();
    
    Запрос=Новый Запрос();
    Запрос.Текст= "ВЫБРАТЬ
                  | PGData.id_dep КАК id_dep,
                  | PGData.mindate,
                  | PGData.maxdate
                  |ПОМЕСТИТЬ ПГКодыАптек
                  |ИЗ
                  | &PGData КАК PGData
                  |
                  |ИНДЕКСИРОВАТЬ ПО
                  | id_dep
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  | МестаХранения.Код,
                  | МестаХранения.Ссылка КАК Аптека,
                  | МестаХранения.НомерАптеки,
                  | ПГКодыАптек.mindate КАК НачДата,
                  | ПГКодыАптек.maxdate КАК КонДата
                  |ИЗ
                  | ПГКодыАптек КАК ПГКодыАптек
                  |     ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
                  |     ПО ПГКодыАптек.id_dep = МестаХранения.Код
                  |
                  |УПОРЯДОЧИТЬ ПО
                  | Аптека
                  |АВТОУПОРЯДОЧИВАНИЕ
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |УНИЧТОЖИТЬ ПГКодыАптек" ;
    Запрос.УстановитьПараметр("PGData",ТаблицаВозврата);
    
    Возврат Запрос.Выполнить().Выгрузить(); 
    
    
    
КонецФункции


Функция ЧекиПроверитьАптекаНаПГ(КодАптеки) Экспорт
    
    ТекстЗапроса="
    |Select sum(cid) from (
    |select cid from(
    |SELECT count(id) as cid
    |FROM repl.store_packs rsp
    |Where pack_type='str2' and id_dep='"+Формат(КодАптеки,"ЧЦ=5; ЧВН=; ЧГ=0")+"'
    |group by rsp.file_dt
    |order by rsp.file_dt desc 
    |limit 1) as a
    |
    |union 
    |
    |select 0) base ";
    
    
    АдоКонн= ПолучитьПодключение("Чеки");               
    
    Если АдоКонн=Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;    
    
    Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
        
    Попытка 
        АДО_рекордСет.Open( ТекстЗапроса,АдоКонн,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        Возврат Неопределено;
    КонецПопытки;
    
    Попытка
        АДО_рекордСет.MoveFirst();
    Исключение
        Возврат Неопределено;
    КонецПопытки;    
    
    Если Число(АДО_рекордСет.Fields(0).Value)=1 Тогда
        АдоКонн.Close();
        Возврат Истина;
    Иначе
        АдоКонн.Close();
        Возврат Ложь;
    КонецЕсли;    
    
     
КонецФункции    



//---------------<Список сотрудников всех зарплатных баз>---------------------------// GtG // 19.04.2014 23:41:35 

Функция ПолучитьСправочникСотрудниковИзPostgres(МаксЗ,ТекЗ) Экспорт
    Адо=ПолучитьПодключение("Сотрудники для УЦ");
    
    Если Адо=Неопределено Тогда
        Возврат "Неудалось подключиться к серверу сотрудников! (Подключение [Сотрудники для УЦ])";
    КонецЕсли;
    
    Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
    ТекстЗапроса="SELECT inn, tabnum, pin, name, family, name1, name2, basename, 
	|coalesce(dolzhnost,'') as dolzhnost, 
    |   coalesce(caomr,0) as caomr
    |FROM users;";
    
    Попытка 
        АДО_рекордСет.Open(ТекстЗапроса,Адо,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        Возврат "Не удалось выполнить запрос на сервер сотрудников!";
    КонецПопытки;

     Попытка
        АДО_рекордСет.MoveFirst();
    Исключение
        Возврат "Пустой результат запроса на сервер сотрудников!";
    КонецПопытки;   
    
      

    
    
   

     ТЗ=Новый ТаблицаЗначений;
     ТЗ.Колонки.Добавить("inn",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(12,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("tabnum",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(12,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("pin",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(4,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("name",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(50,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("family",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(50,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("name1",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(25,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("name2",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(25,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("basename",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(25,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("dolzhnost",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная)));
     ТЗ.Колонки.Добавить("caomr",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12,0,ДопустимыйЗнак.Любой)));				
     
     
    Пока Адо_РекордСет.EOF()=0 Цикл
        
        Стр=ТЗ.Добавить();
        
        Стр.inn=сокрлп(АДО_рекордСет.Fields(0).Value);
        Стр.tabnum=СокрЛП(АДО_рекордСет.Fields(1).Value);
        Стр.pin=СокрЛП(АДО_рекордСет.Fields(2).Value);
        Стр.name=СокрЛП(АДО_рекордСет.Fields(3).Value);
        Стр.family=СокрЛП(АДО_рекордСет.Fields(4).Value);
        Стр.name1=СокрЛП(АДО_рекордСет.Fields(5).Value);
        Стр.name2=СокрЛП(АДО_рекордСет.Fields(6).Value);
        Стр.basename=СокрЛП(АДО_рекордСет.Fields(7).Value);
        Стр.dolzhnost=СокрЛП(АДО_рекордСет.Fields(8).Value);
        Стр.caomr=Число(АДО_рекордСет.Fields(9).Value);
               
        Адо_РекордСет.MoveNext();
    КонецЦикла;    
    
    Адо.Close();
    МВТ=Новый МенеджерВременныхТаблиц;
    
    Запрос=Новый Запрос();
    Запрос.МенеджерВременныхТаблиц=МВТ;
    Запрос.УстановитьПараметр("ТЗ",ТЗ);

    
    
    Запрос.Текст="ВЫБРАТЬ
                 |  ТЗ.inn,
                 |  ТЗ.tabnum,
                 |  ТЗ.pin,
                 |  ТЗ.name,
                 |  ТЗ.family,
                 |  ТЗ.name1,
                 |  ТЗ.name2,
                 |  ТЗ.basename,
                 |  ТЗ.dolzhnost,
                 |  ТЗ.caomr КАК caomr
                 |ПОМЕСТИТЬ пг
                 |ИЗ
                 |  &ТЗ КАК ТЗ
                 |
                 |ИНДЕКСИРОВАТЬ ПО
                 |  caomr
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |  пг.dolzhnost
                 |ИЗ
                 |  пг КАК пг
                 |      ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
                 |      ПО пг.dolzhnost = Должности.Наименование
                 |ГДЕ
                 |  Должности.Ссылка ЕСТЬ NULL 
                 |;
                 |";
                 
        РезД=Запрос.Выполнить();
        
        Если РезД.Пустой()=Ложь ТОгда
            ВыбД=РезД.Выбрать();
            Пока ВыбД.Следующий() Цикл
                СпрД=Справочники.Должности.СоздатьЭлемент();
                СпрД.Наименование=СокрЛП(ВыбД.dolzhnost);
                СпрД.Записать();
            КонецЦикла;    
        КонецЕсли;    
                 
                 
                 
               Запрос.Текст="ВЫБРАТЬ
                            |   пг.inn,
                            |   пг.tabnum КАК tabnum,
                            |   пг.pin,
                            |   пг.name,
                            |   пг.family,
                            |   пг.name1,
                            |   пг.name2,
                            |   пг.basename,
                            |   пг.dolzhnost,
                            |   МестаХранения.Ссылка
                            |ПОМЕСТИТЬ пгмх
                            |ИЗ
                            |   пг КАК пг
                            |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
                            |       ПО пг.caomr = МестаХранения.Код
                            |
                            |ИНДЕКСИРОВАТЬ ПО
                            |   tabnum
                            |;
                            |
                            |////////////////////////////////////////////////////////////////////////////////
                            |ВЫБРАТЬ
                            |   пгмх.inn,
                            |   пгмх.tabnum КАК ТабельныйНомер,
                            |   пгмх.pin,
                            |   пгмх.name,
                            |   пгмх.family КАК Фамилия,
                            |   пгмх.name1 КАК Имя,
                            |   пгмх.name2 КАК Отчество,
                            |   пгмх.basename,
                            |   пгмх.dolzhnost КАК Должность,
                            |   пгмх.Ссылка КАК Аптека,
                            |   СотрудникиАптек.Ссылка КАК СотрудникАптеки,
                            |   ВЫБОР
                            |       КОГДА СотрудникиАптек.Ссылка ЕСТЬ NULL 
                            |           ТОГДА ИСТИНА
                            |       ИНАЧЕ ЛОЖЬ
                            |   КОНЕЦ КАК Создать
                            |ПОМЕСТИТЬ пгмхсотр
                            |ИЗ
                            |   пгмх КАК пгмх
                            |       ПОЛНОЕ СОЕДИНЕНИЕ Справочник.СотрудникиАптек КАК СотрудникиАптек
                            |       ПО пгмх.tabnum = СотрудникиАптек.ТабельныйНомер
                            |           И (СотрудникиАптек.ПометкаУдаления = ЛОЖЬ)
                            |
                            |ИНДЕКСИРОВАТЬ ПО
                            |   Должность
                            |;
                            |
                            |////////////////////////////////////////////////////////////////////////////////
                            |ВЫБРАТЬ
                            |   пгмхсотр.inn,
                            |   пгмхсотр.ТабельныйНомер,
                            |   пгмхсотр.pin,
                            |   пгмхсотр.name,
                            |   пгмхсотр.Фамилия,
                            |   пгмхсотр.Имя,
                            |   пгмхсотр.Отчество,
                            |   пгмхсотр.basename,
                            |   пгмхсотр.Должность,
                            |   ЕСТЬNULL(пгмхсотр.Аптека, &ПустаяАптека) КАК Аптека,
                            |   пгмхсотр.СотрудникАптеки,
                            |   пгмхсотр.Создать,
                            |   Должности.Ссылка КАК ДолжностьСсылка,
                            |   ВЫБОР
                            |       КОГДА пгмхсотр.name ЕСТЬ NULL 
                            |           ТОГДА ИСТИНА
                            |       ИНАЧЕ ЛОЖЬ
                            |   КОНЕЦ КАК УволенИлиСовместитель,
                            |   пгмхсотр.СотрудникАптеки.Должность КАК ДолжностьИзСотрудника
                            |ИЗ
                            |   пгмхсотр КАК пгмхсотр
                            |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
                            |       ПО пгмхсотр.Должность = Должности.Наименование
                            |;
                            |
                            |////////////////////////////////////////////////////////////////////////////////
                            |УНИЧТОЖИТЬ пгмхсотр
                            |;
                            |
                            |////////////////////////////////////////////////////////////////////////////////
                            |УНИЧТОЖИТЬ пгмх
                            |;
                            |
                            |////////////////////////////////////////////////////////////////////////////////
                            |УНИЧТОЖИТЬ пг";
                            
       Запрос.УстановитьПараметр("ПустаяАптека", Справочники.МестаХранения.ПустаяСсылка());
              
       Рез=Запрос.Выполнить();
       
       Если Рез.Пустой() Тогда
           Возврат "Нечего добавлять!";
       КонецЕсли;
       
       Выб=Рез.Выбрать();
       
       МаксЗ=Выб.Количество();
       ТекЗ=0;
       
       
       Офис=Справочники.МестаХранения.НайтиПоНаименованию("Офис А.в.е Москва, ул. Магистральный тупик, д.10 к.1");
       
       
       
       Пока Выб.Следующий() Цикл 
           
           Если Выб.Должность<>Выб.ДолжностьИзСотрудника ТОгда
               Сообщить("-------------- Изменена должность ----------------  "+Выб.СотрудникАптеки +"  "+Выб.Должность+"  Было "+Выб.ДолжностьИзСотрудника);
           КонецЕсли;    
           
           ТекЗ=ТекЗ+1;
           
           Если Выб.УволенИлиСовместитель=Истина Тогда
              Сообщить("Обнаружен уволенный (или внутренний совместитель) "+Выб.СотрудникАптеки+" - помечен на удаление ");
              Выб.СотрудникАптеки.ПолучитьОбъект().УстановитьПометкуУдаления(Истина); 
              Продолжить;
           КонецЕсли;   
           
           
                      
           Если Выб.Создать=Истина Тогда
               Спр=Справочники.СотрудникиАптек.СоздатьЭлемент();
               Сообщить("Создан "+""+Выб.Фамилия+" "+Выб.Имя+" "+Выб.Отчество);
           Иначе
               Спр=Выб.СотрудникАптеки.ПолучитьОбъект();
           КонецЕсли;    
           
           Спр.Наименование=""+Выб.Фамилия+" "+Выб.Имя+" "+Выб.Отчество;
           Спр.Должность=Выб.ДолжностьСсылка;
           Спр.ТабельныйНомер=Выб.ТабельныйНомер;
           
           МХ=Выб.Аптека;
           Если Мх.Пустая() Тогда
               МХ=Офис;
           КонецЕсли;    
           
           Спр.Владелец=МХ;
		   СПР.АдресЭлектроннойПочты=Выб.pin;
           Спр.Записать();
       КонецЦикла;
       
       
      Возврат "Готово!";
КонецФункции    


   
//---------------<Контроль Онлайна аптек>---------------------------// GtG // 19.05.2014 13:30:56
Функция ПолучитьСостояниеОнлайнаАптек() Экспорт
    // Исходим из того, что аптека посылает пинг ( апдейтит табличку) 1 раз в минуту.
    // пинги могут пропадать , поэтому за оффлайн нужно считать пропажу не менее ...хз...-их пингов.
    // sec_qty - время в секундах, прошедшее с момента последнего дошедшего до офиса пинга.
    //---------------------------------------------------------------------------------------------------
    
    ТекстЗапроса=" -- Состояние онлайна аптек --
    |SELECT 
	|    cast(replace( replace(	replace(id_dep,'{',''),	'}',''),  ',0','')     as integer) as id_dep,
	|    floor(extract (epoch from (now()-modifydatetime)))::integer sec_qty
    |FROM 
    |    repl.loc_info 
    |ORDER BY 
    |    apt_code"; 
    
    АдоКонн=ПолучитьПодключение("Чеки");
    
    Если АдоКонн=Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;  
    
    
    Адо_РекордСет=Новый ComОбъект("ADODB.recordset");
    
        
    Попытка 
        АДО_рекордСет.Open( ТекстЗапроса,АдоКонн,0,3,1);   //  (Source, ActiveConnection, CursorType, LockType, Options)
    Исключение
        Возврат Неопределено;
    КонецПопытки;
    
    Попытка
        АДО_рекордСет.MoveFirst();
    Исключение
        Возврат Неопределено;
    КонецПопытки;    
    
    
    ТаблицаВозврата=Новый ТаблицаЗначений;
    ТаблицаВозврата.Колонки.Добавить("id_dep",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));	//	0
    ТаблицаВозврата.Колонки.Добавить("sec_qty",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));	//	1
    
    Пока Адо_РекордСет.EOF()=0 Цикл
        Стр=ТаблицаВозврата.Добавить();
        Стр.id_dep=Число(АДО_рекордСет.Fields(0).Value);
        Стр.sec_qty=Число(АДО_рекордСет.Fields(1).Value);
        Адо_РекордСет.MoveNext();
    КонецЦикла;    
    
    АдоКонн.Close();
    
    Возврат ТаблицаВозврата;

    
    
    
КонецФункции    


Функция СоздатьКаталогЧерезЛинукс() Экспорт
	//СоздатьКаталог("/home/usr1cv8/ftp_net/vir_test");	
	 АДО = Новый COMОбъект("ADOdb.Connection");
	 АДО = Неопределено;
КонецФункции