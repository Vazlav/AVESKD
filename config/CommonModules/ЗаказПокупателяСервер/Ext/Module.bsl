Функция ПолучитьПараметрыHTMLТаблицы()
	
	

    рПараметры=Новый Структура;

    рПараметры.Вставить("ШиринаРамки",2);

    рПараметры.Вставить("ТипРамки","box");

    рПараметры.Вставить("ЦветРамки","#99cc00");

    рПараметры.Вставить("ЦветРамкиЯркий","#00ff00");

    рПараметры.Вставить("ЦветРамкиТемный","#339966");

    рПараметры.Вставить("МеждуЯчейками",0);

    рПараметры.Вставить("ОтступДоЯчейки",1);

    рПараметры.Вставить("Ширина","100%");

    рПараметры.Вставить("Высота",1);

    рПараметры.Вставить("ЦветФона","#fffacd");
	
	рПараметры.Вставить("ЦветФонаЗаголовка","#ecebbd");


    рПараметры.Вставить("Выравнивание","center"); // всей таблицы

    рПараметры.Вставить("ВыравниваниеГоризонтальное","middle"); // текста в ячейках

    рПараметры.Вставить("ВыравниваниеВертикальное","center"); // текста в ячейках
	
	Возврат рПараметры;
	
КонецФункции

Функция ПолучитьHTMLизТаблицыЗначений(рТаблица,Знач рПараметры="",докВладелец=Неопределено) Экспорт

    // распознаем параметры

    Если ТипЗнч(рПараметры)<>Тип("Структура") Тогда рПараметры=Новый Структура КонецЕсли;

    //рКодировка=?(рПараметры.Свойство("Кодировка"),рПараметры.Кодировка,"UTF-8");

    рШиринаРамки=?(рПараметры.Свойство("ШиринаРамки"),рПараметры.ШиринаРамки,0); // в пикселях

    Если рШиринаРамки<>0 Тогда // имеет смысл

        рЦветРамки=?(рПараметры.Свойство("ЦветРамки"),рПараметры.ЦветРамки,"");

        рЦветРамкиЯркий=?(рПараметры.Свойство("ЦветРамкиЯркий"),рПараметры.ЦветРамкиЯркий,"");

        рЦветРамкиТёмный=?(рПараметры.Свойство("ЦветРамкиТемный"),рПараметры.ЦветРамкиТемный,"");

        рТипРамки=?(рПараметры.Свойство("ТипРамки"),рПараметры.ТипРамки,"hsides");

        рЛинии=?(рПараметры.Свойство("Линии"),рПараметры.Линии,"all");

    КонецЕсли;

    рМеждуЯчейками=?(рПараметры.Свойство("МеждуЯчейками"),рПараметры.МеждуЯчейками,0);

    рОтступДоЯчейки=?(рПараметры.Свойство("ОтступДоЯчейки"),рПараметры.ОтступДоЯчейки,1);

    рШирина=?(рПараметры.Свойство("Ширина"),рПараметры.Ширина,100); // макс.ширина, пиксели или проценты

    рВысота=?(рПараметры.Свойство("Высота"),рПараметры.Высота,1);

    рЦветФона=?(рПараметры.Свойство("ЦветФона"),рПараметры.ЦветФона,"");
	рЦветФонаЗаголовка=?(рПараметры.Свойство("ЦветФонаЗаголовка"),рПараметры.ЦветФонаЗаголовка,"");

    рВыравнивание=?(рПараметры.Свойство("Выравнивание"),рПараметры.Выравнивание,"center");

    рВыравниваниеГор=?(рПараметры.Свойство("ВыравниваниеГоризонтальное"),рПараметры.ВыравниваниеГоризонтальное,"middle");

    рВыравниваниеВерт=?(рПараметры.Свойство("ВыравниваниеВертикальное"),рПараметры.ВыравниваниеВертикальное,"center");



    // определимся с документом

    Если докВладелец=Неопределено Тогда

        док=Новый ДокументHTML("");

        телдок=док.СоздатьЭлемент("BODY");

        док.Тело=телдок;

    Иначе

        док=докВладелец;

        телдок=док.Тело;

    КонецЕсли;



    // собственно делаем таблицу

    таб=док.СоздатьЭлемент("TABLE");



    // ставим параметры таблицы в целом, имеющие свойства в объектной модели 1С

    таб.Выравнивание=рВыравнивание; // align

    таб.Рамка=СокрЛП(рШиринаРамки); // border

    таб.ОтступДоЯчейки=СокрЛП(рОтступДоЯчейки); // cellPadding

    таб.РасстояниеМеждуЯчейками=СокрЛП(рМеждуЯчейками); // cellSpacing

    таб.ЦветФона=СокрЛП(рЦветФона); // bgColor

    таб.Ширина=СокрЛП(рШирина); // width

    Если рШиринаРамки<>0 Тогда // имеет смысл

        таб.Линии=СокрЛП(рЛинии); // rules (допустимо: all, groups, cols, none, rows)

    КонецЕсли;



    // ставим параметры таблицы в целом, НЕ имеющие свойств в объектной модели 1С

    // ставим их в атрибуты именно к таб, а не ко всему Телу документа, и не к Телу таблицы

    атр=док.СоздатьАтрибут("height");

    атр.Значение=СокрЛП(рВысота);

    таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

    //

    атр=док.СоздатьАтрибут("cols"); // общее объявление

    атр.Значение=СокрЛП(рТаблица.Колонки.Количество());

    таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

    //

    атр=док.СоздатьАтрибут("nowrap"); // запрет переносов текста (кому понадобится, раскомментите)

    атр.Значение="true";

    таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

    // аналогичным образом можно устанавливать прочие свойства таблицы в целом, её строк и ячеек



    Если рШиринаРамки<>0 Тогда // имеет смысл

        атр=док.СоздатьАтрибут("borderColor");

        атр.Значение=СокрЛП(рЦветРамки);

        таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

        атр=док.СоздатьАтрибут("borderColorLight");

        атр.Значение=СокрЛП(рЦветРамкиЯркий);

        таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

        атр=док.СоздатьАтрибут("borderColorDark");

        атр.Значение=СокрЛП(рЦветРамкиТёмный);

        таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

        // доступные типы рамок: void, above, below, lhs, rhs, hsides, vsides, box

        атр=док.СоздатьАтрибут("frame");

        атр.Значение=СокрЛП(рТипРамки);

        таб.Атрибуты.УстановитьИменованныйЭлемент(атр);

    КонецЕсли;



    // добавляем таблицу и её тело

    телдок.ДобавитьДочерний(таб);

    телтаб=док.СоздатьЭлемент("TBODY");

    таб.ДобавитьДочерний(телтаб);


// делаем заголовок
    стро=таб.ВставитьСтроку(1);
    стро.ВертикальноеПоложение=рВыравниваниеВерт;
    стро.Выравнивание=рВыравниваниеГор;
    стро.ЦветФона=рЦветФонаЗаголовка;
    //
    телтаб.ДобавитьДочерний(стро);
    Для каждого кол Из рТаблица.Колонки Цикл
        яч=док.СоздатьЭлемент("TD");
        яч.ТекстовоеСодержимое=СокрЛП(?(ПустаяСтрока(кол.Заголовок),кол.Имя,кол.Заголовок));
        стро.ДобавитьДочерний(яч);
    КонецЦикла;	
	

    // заполняем таблицу

    Для каждого рСтрока Из рТаблица Цикл

        #Если Клиент Тогда

            ОбработкаПрерыванияПользователя();

        #КонецЕсли

        стро=таб.ВставитьСтроку(1); // вопреки документации, Индекс это обязательный параметр

        // хотя, строку можно добавлять и так: стро=док.СоздатьЭлемент("TR"), но ИндексСтроки поменять будет нельзя!

        стро.ВертикальноеПоложение=рВыравниваниеВерт;

        стро.Выравнивание=рВыравниваниеГор;

        стро.ЦветФона=рЦветФона;

        телтаб.ДобавитьДочерний(стро);

        // коллекция Ячейки - для чтения, а нам надо добавлять

        Для каждого кол Из рТаблица.Колонки Цикл

            #Если Клиент Тогда

                ОбработкаПрерыванияПользователя();

            #КонецЕсли

            //яч=стро.ВставитьЯчейку(1); // а вот это почему-то вообще не заработало ни при каких...

            яч=док.СоздатьЭлемент("TD");    // поэтому делаем так

            рЗначение=рСтрока[кол.Имя];

            Если ТипЗнч(рЗначение)=Тип("ТаблицаЗначений") Тогда

                яч.ДобавитьДочерний(ПолучитьHTMLизТаблицыЗначений(рЗначение,рПараметры,док));

            ИначеЕсли ТипЗнч(рЗначение)=Тип("Массив") Тогда

                Для каждого знч Из рЗначение Цикл

                    #Если Клиент Тогда

                        ОбработкаПрерыванияПользователя();

                    #КонецЕсли

                    Если ТипЗнч(знч)=Тип("ТаблицаЗначений") Тогда

                        яч.ДобавитьДочерний(ПолучитьHTMLизТаблицыЗначений(знч,рПараметры,док));

                    Иначе // вложенные массивы поддерживать не будем, но при желании можно сделать

                        тек=док.СоздатьЭлемент("P"); // можно, например, так

                        тек.ТекстовоеСодержимое=СокрЛП(Строка(знч));

                        яч.ДобавитьДочерний(тек);

                    КонецЕсли;

                КонецЦикла;

            Иначе // записываем строковое представление

                яч.ТекстовоеСодержимое=СокрЛП(Строка(рЗначение));

            КонецЕсли;

            стро.ДобавитьДочерний(яч);

        КонецЦикла;

    КонецЦикла;



    Если докВладелец<>Неопределено Тогда

        Возврат таб; // нужна таблица как ЭлементHTML

    Иначе

        // нужен полноценный текст результата, записываем получившееся

        зап1=Новый ЗаписьHTML;

        зап1.УстановитьСтроку(); // вопреки документации, параметр Кодировка не допускается

        зап2=Новый ЗаписьDOM; // обойдёмся без явного указания конфигурации записи DOM

        зап2.Записать(док,зап1);

        Возврат зап1.Закрыть();

    КонецЕсли;

КонецФункции

Процедура РассылкаУведомленийПоБронированию()  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Дата КАК Дата,
	               |	ЗаказПокупателя.Телефон КАК Телефон,
	               |	ЗаказПокупателя.НомерИнтернетЗаказа КАК НомерЗаказа,
	               |	ЗаказПокупателя.Склад КАК Склад,
	               |	ЗаказПокупателя.СтатусЗаказаЛокальный КАК СтатусЗаказа,
	               |	ЗаказПокупателя.КлиентИнтернетЗаказа КАК Клиент,
	               |	ЕСТЬNULL(УА.АдресЭлектроннойПочты, """") КАК АдресУА,
	               |	ЗаказПокупателя.Склад.Мэйл КАК СкладМэйл,
	               |	СРР.РежимРаботы КАК РежимРаботы,
	               |	ПРЕДСТАВЛЕНИЕ(СРР.РежимРаботы) КАК РежимРаботыПредставление,
	               |	РР.ВремяНачала КАК ВремяНачала,
	               |	РР.ВремяОкончания КАК ВремяОкончания,
	               |	РР.Выходной КАК Выходной
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК УА
	               |		ПО (УА.Ссылка = ЗаказПокупателя.Склад)
	               |			И (УА.Должность = &Должность)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РежимыРаботыАптек.СрезПоследних КАК СРР
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РежимыРаботыАптек.Состав КАК РР
	               |			ПО СРР.РежимРаботы = РР.Ссылка
	               |				И (РР.ДеньНедели = ДЕНЬНЕДЕЛИ(&ТекДата))
	               |		ПО ЗаказПокупателя.Склад = СРР.Аптека
	               |ГДЕ
	               |	ЗаказПокупателя.СтатусЗаказаЛокальный = &СтатусЗаказаЛокальный
	               |	И ЗаказПокупателя.ДатаИзменения <= &ДатаИзменения
	               |	И ЗаказПокупателя.ТипЗаказа = &ТипЗаказа
	               |	И ЗаказПокупателя.Склад.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказПокупателя.СтатусДокАптеки = &СтатусДокАптеки
	               |	И ЧАС(&ТекДата) * 60 + МИНУТА(&ТекДата) > ЧАС(РР.ВремяНачала) * 60 + МИНУТА(РР.ВремяНачала)
	               |	И ЧАС(&ТекДата) * 60 + МИНУТА(&ТекДата) < ЧАС(РР.ВремяОкончания) * 60 + МИНУТА(РР.ВремяОкончания)
	               |	И РР.Выходной = ЛОЖЬ
	               |ИТОГИ ПО
	               |	Склад";
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказПокупателя.Дата КАК Дата,
	//               |	ЗаказПокупателя.Телефон КАК Телефон,
	//               |	ЗаказПокупателя.НомерИнтернетЗаказа КАК НомерЗаказа,
	//               |	ЗаказПокупателя.Склад КАК Склад,
	//               |	ЗаказПокупателя.СтатусЗаказаЛокальный КАК СтатусЗаказа,
	//               |	ЗаказПокупателя.КлиентИнтернетЗаказа КАК Клиент,
	//               |	ЕСТЬNULL(УА.АдресЭлектроннойПочты, """") КАК АдресУА,
	//               |	ЗаказПокупателя.Склад.Мэйл КАК СкладМэйл
	//               |ИЗ
	//               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК УА
	//               |		ПО (УА.Ссылка = ЗаказПокупателя.Склад)
	//               |			И (УА.Должность = &Должность)
	//               |ГДЕ
	//               |	ЗаказПокупателя.СтатусЗаказаЛокальный = &СтатусЗаказаЛокальный
	//               |	И ЗаказПокупателя.ДатаИзменения <= &ДатаИзменения
	//               |	И ЗаказПокупателя.ТипЗаказа = &ТипЗаказа
	//               |	И ЗаказПокупателя.СтатусДокАптеки = &СтатусДокАптеки
	//               |ИТОГИ ПО
	//               |	Склад";
	Запрос.УстановитьПараметр("СтатусЗаказаЛокальный",Справочники.СтатусыЗаказаПокупателяЛокальные.НайтиПоКоду("CREATED"));
	Запрос.УстановитьПараметр("СтатусДокАптеки",Перечисления.СтатусДокАптеки.Создан);
	Запрос.УстановитьПараметр("ДатаИзменения",ТекущаяДата() - 30*60);
	Запрос.УстановитьПараметр("ТипЗаказа",Перечисления.ИЗ_Типы.Бронирование);
	Запрос.УстановитьПараметр("Должность",Перечисления.ДолжностиРуководителейАптек.УправляющийАптекой);
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Рез.Выгрузить(ОбходРезультатаЗапроса.Прямой);	
	
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТемаПисьма = "ВАЖНО! Неподтвержденные брони";
	
	Пока Выборка.Следующий() Цикл
		
		Получатели = Новый СписокЗначений;
		Получатели.Добавить(Выборка.СкладМэйл);
		
		Выборка2 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Первый = Истина;
		Номера = "";
		Пока Выборка2.Следующий() Цикл
			Если Первый = Истина и НЕ Выборка2.АдресУА = "" Тогда
				Получатели.Добавить(Выборка2.АдресУА);
			КонецЕсли;
			Первый = Ложь;
		КонецЦикла;
		
		ОтборПоСкладу = Новый Структура;
		ОтборПоСкладу.Вставить("Склад",Выборка.Склад);
		ТЗСклада = ТЗ.Скопировать(ОтборПоСкладу,"Дата,Телефон,НомерЗаказа,Склад,СтатусЗаказа,Клиент");
		ТЗСклада.Удалить(0);
		
		
		Получатели.Добавить("burakova.m.s@366.ru");
		
		ТекстПисьма = "Коллеги, добрый день!<BR />"
		+ "Необходимо срочно подтвердить все брони, которые оформлены на Ваши аптеки.<BR />"
		+ "Напоминаю, время подтверждения брони 30 минут с момента первого оповещения.<BR />"
		+ "Номера неподтвержденных заказов:<BR /> "
		+ "<b>" + ПолучитьHTMLизТаблицыЗначений(ТЗСклада,ПолучитьПараметрыHTMLТаблицы()) + "</b><BR />"
		+ "<BR />"
		+ "Инструкцию по работе с интернет-бронированием размещена по ссылке:<BR /> "
		+ "http://edu.ave-apteka.ru/pluginfile.php/37581/mod_resource/content/1/Инструкция%20Интернет-бронирование%2013.12.17.pdf <BR />"
		+ "<BR />"
		+ "С Уважением,<BR />"
		+ "Мария Буракова<BR />"
		+ "Начальник отдела торговых операций<BR />"
		+ "Департамента интернет-проектов<BR />"
		+ "Раб.: +7(495)797-86-86, доб. 1277<BR />"
		+ "E-mail:burakova.m.s@366.ru";
		
		
		ОМ_ТСО.ОтправитьПисьмо(Получатели, ТемаПисьма, "", ТекстПисьма);
	КонецЦикла;

	
КонецПроцедуры