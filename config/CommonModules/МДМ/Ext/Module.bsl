Функция ПолучитьПроксиМДМ()
	
	АдресWSDL="http://10.250.205.90:8082/mdm_work/ws/mdm.1cws?wsdl";//"http://dev-srv02.a5.local:8089/mdm_work/ws/mdm.1cws?wsdl";    сервер накрылся
	TargetNamespace="http://mdmnative.tunesoft.ru";
	DefinitionsName="MDMNative";
	PortName="MDMNativeSoap12";
	
	
	Определение=Новый WSОпределения(СокрЛП(АдресWSDL));  // без пароля
	
	Прокси = Неопределено;
	Прокси = Новый WSПрокси(Определение,
	СокрЛП(TargetNamespace),//targetNamespace из WSDL
	СокрЛП(DefinitionsName),//definitions name из  WSDL
	СокрЛП(PortName),       // port name из WSDL
	Неопределено,15);
	
	
	Возврат Прокси;
	
КонецФункции	

Функция createUpdateSklad(Прокси, пИдентификаторСистемы,  СтруктураДанныхСклада) Экспорт
	
	лСтруктураВозврата=Новый Структура("ЕстьОшибки, ГуидМДМ, ТекстОшибки");
	
	Попытка	
		лТЗ=Новый ТаблицаЗначений();
		лТЗ.Колонки.Добавить("Наименование");
		лТЗ.Колонки.Добавить("Организация");
		лТЗ.Колонки.Добавить("НомерАптеки");
		лТЗ.Колонки.Добавить("ГуидСклада");
		лТЗ.Колонки.Добавить("КодТорговлиАВЕ");
		лТЗ.Колонки.Добавить("ДатаОткрытия");
		лТЗ.Колонки.Добавить("ДатаЗакрытия");
		лТЗ.Колонки.Добавить("НаименованиеДляБухгалтерии");
		лТЗ.Колонки.Добавить("НаименованиеДляЗУП");
		лТЗ.Колонки.Добавить("ПометкаУдаления");    // GtG  //  21.06.2016 16:04:15 
			
		//Добавлено Васильченко А.Г. по заявке 118950
		лТЗ.Колонки.Добавить("ОрганизацияКомитент");
		лТЗ.Колонки.Добавить("Город");
		лТЗ.Колонки.Добавить("Регион");
		лТЗ.Колонки.Добавить("Бренд");
		//Добавлено Васильченко А.Г. по заявке 1633  05.09.2017
		лТЗ.Колонки.Добавить("НомерСумки");
		лТЗ.Колонки.Добавить("ОбщаяПлощадь");
		лТЗ.Колонки.Добавить("ПлощадьТорговогоЗала");
		лТЗ.Колонки.Добавить("МестоРасположения");
		лТЗ.Колонки.Добавить("КодФинОтдела");

		 
		 
		нСтр=лТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, СтруктураДанныхСклада);
		лМассивТаблиц=Новый Массив();
		лМассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, ДанныеТаблицы","ПодразделенияОрганизаций",лТЗ));
		
		лТЗ=Новый ТаблицаЗначений();
		лТЗ.Колонки.Добавить("ГуидСклада");
		лТЗ.Колонки.Добавить("Наименование");
		лТЗ.Колонки.Добавить("НомерАптеки");
		лТЗ.Колонки.Добавить("КодТорговлиАВЕ");
		лТЗ.Колонки.Добавить("Организация");
		лТЗ.Колонки.Добавить("ПометкаУдаления");    // GtG  //  21.06.2016 16:04:15 
		
		//Добавлено Васильченко А.Г. по Тикету 118950
		лТЗ.Колонки.Добавить("ОрганизацияКомитент");
		лТЗ.Колонки.Добавить("Город");
		лТЗ.Колонки.Добавить("Регион");
		лТЗ.Колонки.Добавить("Бренд");
		//Добавлено Васильченко А.Г. по заявке 1633  05.09.2017
		лТЗ.Колонки.Добавить("НомерСумки");
		лТЗ.Колонки.Добавить("ОбщаяПлощадь");
		лТЗ.Колонки.Добавить("ПлощадьТорговогоЗала");
		лТЗ.Колонки.Добавить("МестоРасположения");
		лТЗ.Колонки.Добавить("КодФинОтдела");

		
		нСтр=лТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, СтруктураДанныхСклада);
		лМассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, ДанныеТаблицы","Склады",лТЗ));
		
		лРезультат=Прокси.putData(пИдентификаторСистемы, СериализаторXDTO.ЗаписатьXDTO(лМассивТаблиц));
		
		лРезультат=СериализаторXDTO.ПрочитатьXDTO(лРезультат);        	
		
		Если лРезультат.ЕстьОшибки Тогда
			лСтруктураВозврата.ЕстьОшибки=Истина;
			лСтруктураВозврата.ТекстОшибки=лРезультат.Сообщение;
		Иначе
			
			Для Каждого лСтруктураТаблицы Из лРезультат.ЗагруженныеЭлементы Цикл
				Если лСтруктураТаблицы.ИмяТаблицы="Склады" И лСтруктураТаблицы.ДанныеТаблицы<>Неопределено И лСтруктураТаблицы.Количество()>0 Тогда
					лСтруктураВозврата.ГуидМДМ=лСтруктураТаблицы.ДанныеТаблицы[0]._GUID_MDM_;
					лСтруктураВозврата.ЕстьОшибки=Ложь;
					лСтруктураВозврата.ТекстОшибки="";
				Иначе
					лСтруктураВозврата.ЕстьОшибки=Истина;
					лСтруктураВозврата.ТекстОшибки="Склад не создан в МДМ! "+СтруктураДанныхСклада.КодТорговлиАВЕ;
				КонецЕсли;	
			КонецЦикла;	
				
		КонецЕсли;
	Исключение
		лСтруктураВозврата.ЕстьОшибки=Истина;
		лСтруктураВозврата.ТекстОшибки=ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(лСтруктураВозврата.ТекстОшибки); 
		#КонецЕсли
	КонецПопытки;
	Возврат лСтруктураВозврата;
	
КонецФункции	

Процедура ЭкспортСкладаВМДМ(СкладСсылка) Экспорт
	
	//Возврат;
	
	Прокси=ПолучитьПроксиМДМ();
	Если Прокси = Неопределено Тогда
		#Если клиент тогда
			Сообщить("Не удалось создать подключение к МДМ. Обратитесь к администратору МДМ");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	пИдентификаторСистемы="AVE_SKD";
	
	СтруктураДанныхСклада=Новый Структура;
	СтруктураДанныхСклада.Вставить("ПометкаУдаления",СкладСсылка.ПометкаУдаления);
	СтруктураДанныхСклада.Вставить("Наименование",СкладСсылка.Наименование);
	СтруктураДанныхСклада.Вставить("Организация",СкладСсылка.Фирма.uuid_mdm);
	СтруктураДанныхСклада.Вставить("НомерАптеки",СкладСсылка.НомерАптеки);
	СтруктураДанныхСклада.Вставить("ГуидСклада",Строка(СкладСсылка.УникальныйИдентификатор()));
	СтруктураДанныхСклада.Вставить("КодТорговлиАВЕ",СкладСсылка.Код);
	СтруктураДанныхСклада.Вставить("ДатаОткрытия",СкладСсылка.ДатаПерехода);
	СтруктураДанныхСклада.Вставить("ДатаЗакрытия",СкладСсылка.ДатаЗакрытия);
	
	СтруктураДанныхСклада.Вставить("НаименованиеДляБухгалтерии",?(пустаястрока(СкладСсылка.НаименованиеДляБухгалтерии),СкладСсылка.Наименование,СкладСсылка.НаименованиеДляБухгалтерии));
	СтруктураДанныхСклада.Вставить("НаименованиеДляЗУП",?(пустаястрока(СкладСсылка.НаименованиеДляЗУП),СкладСсылка.Наименование,СкладСсылка.НаименованиеДляЗУП) );

	Если ЗначениеЗаполнено(СкладСсылка.ФирмаКомитент) Тогда
		СтруктураДанныхСклада.Вставить("ОрганизацияКомитент",СкладСсылка.ФирмаКомитент.uuid_mdm);
	Иначе
		СтруктураДанныхСклада.Вставить("ОрганизацияКомитент","");
	КонецЕсли;
	СтруктураДанныхСклада.Вставить("Город",СкладСсылка.Город.Наименование);
	СтруктураДанныхСклада.Вставить("Регион",СкладСсылка.СубъектРФ.Наименование);
	СтруктураДанныхСклада.Вставить("Бренд",СкладСсылка.Бренд.Наименование);
	СтруктураДанныхСклада.Вставить("КодФинОтдела",СкладСсылка.КодФинОтдела);
	
	Результат=createUpdateSklad(Прокси, пИдентификаторСистемы,  СтруктураДанныхСклада);
	
	
	#Если клиент тогда
		Сообщить("Успешно выгружено в МДМ :"+Формат(Не Результат.ЕстьОшибки,"БЛ=Нет; БИ=Да") );
		
		Если Результат.ЕстьОшибки Тогда
			Сообщить("  ОШИБКА: "+Результат.ТекстОшибки);
		КонецЕсли;	
		
	#КонецЕсли	
	
	

	
	
	
КонецПроцедуры	

Процедура МДМ_ПриЗаписиСправочника_МестаХраненияПриЗаписи(Источник, Отказ) Экспорт
	
	ЭкспортСкладаВМДМ(Источник.Ссылка);	
	
КонецПроцедуры

Процедура МДМ_ПриЗаписиСправочника_МестаХраненияПриЗаписи_Фоновое(Источник, Отказ) Экспорт
	
	// выгрузка в фоновом режиме	
	
	МассивПараметров=Новый Массив;
	МассивПараметров.Добавить(Источник.Ссылка);
	
	
	Фз=ФоновыеЗадания.Выполнить("МДМ.ЭкспортСкладаВМДМ",МассивПараметров,Источник.Код,"Выгрузка склада "+Источник.Код+" в МДМ");
	
	
	
	
	
КонецПроцедуры

// Ниже новые функции для обмена с МДМ


Процедура МДМ_ЗагрузкаДанных() Экспорт
	
	Если Константы.АС_Синхронизация_с_МДМ.Получить()=Ложь Тогда
		ЛогОшибки("-ЛОГ-","-=ЛОГ=-",ТекущаяДата(),"Обмен с МДМ выключен");
		Возврат;
	КонецЕсли; 	
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	МДМ_ЗагружаемыеСправочники.Справочник
	             |ИЗ
	             |	РегистрСведений.МДМ_ЗагружаемыеСправочники КАК МДМ_ЗагружаемыеСправочники
	             |ГДЕ
	             |	МДМ_ЗагружаемыеСправочники.Загружать = ИСТИНА";
				 
	МСпр=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Справочник");			 
	
	
	
	ОбменМДМНоваяВерсияНаСервере(Константы.АС_ИДБазы_в_МДМ.Получить(),МСпр);
	
КонецПроцедуры

Процедура ОбменМДМНоваяВерсияНаСервере(ИмяБазы,МТаблицы)  Экспорт
		
	Обратка = Новый ТаблицаЗначений;
	Обратка.Колонки.Добавить("Гуид");
	Обратка.Колонки.Добавить("ДатаИзменения");
	Обратка.Колонки.Добавить("ВнешнийКод");
	
	
	Прокси=ПолучитьПроксиМДМ();
	
	
	Если  Прокси=Неопределено ТОгда
		ЛогОшибки("-ЛОГ-","-=ЛОГ=-",ТекущаяДата(),"Не удалось получить данные от МДМ за 600 секунд. Отключение по таймауту.");
		Возврат;
	Конецесли;
	
	
	УдалитьОшибку("-=ЛОГ=-");
	СтрЛога="Дата загрузки: "+ТекущаяДата()+"
	|Имя базы: "+ИмяБазы+"
	|Загружаемые справочники:"+Символы.ПС;
	Для  Каждого ВС из МТАблицы Цикл
		СтрЛога=""+СтрЛога+"     "+ВС+ ":";//Символы.ПС;
		
		ТекТаблица=Новый Массив;
		ТекТаблица.Добавить(ВС);
		
		МГуиды = новый массив;
		// МГуиды.Добавить("");
		Результат = Прокси.getData(ИмяБазы,СериализаторXDTO.ЗаписатьXDTO(ТекТаблица),,100,ложь,ложь,) ; // Данные
		ТЗ=СериализаторXDTO.ПрочитатьXDTO(Результат);
		
		Если ТЗ.Сообщение = "Выгрузка прошла успешно" Тогда
			extData = Новый массив; // Для ответа
			СписокТаблиц = ТЗ.Данные;
			
			Для каждого Таблица Из СписокТаблиц Цикл
				
				СтрЛога=""+СтрЛога+Таблица.ИмяТаблицы+"  "+Таблица.Данные.Количество()+" строк"+Символы.ПС;
				
				Если Таблица.Данные.Количество() = 0 Тогда 
					Продолжить 
				КонецЕсли;
				
				ИмяТаблицы = Таблица.ИмяТаблицы;
				Обратка.Очистить();
				
				Попытка
					
					Выполнить("ЗагрузитьСправочник"+ИмяТаблицы+"(Таблица.Данные,Обратка)");
					
				Исключение
					
					СтрЛога=""+СтрЛога+"   ОШИБКА: "+Таблица.ИмяТаблицы+" >> "+ОписаниеОшибки()+Символы.ПС;
					Продолжить;
				КонецПопытки;
				
				
				
				extDataСтруктура = Новый структура;
				extDataСтруктура.Вставить("ИмяВнешнейТаблицы",ИмяТаблицы);
				extDataСтруктура.Вставить("ДанныеВнешнейСистемы",Обратка);
				extData.Добавить(extDataСтруктура);
				
				// Отправка результатов обмена. Можно вынести за цикл 
				Результат = Прокси.confirmReceipt(ИмяБазы,СериализаторXDTO.ЗаписатьXDTO(extData)) ; // Ответка 
				ТЗ=СериализаторXDTO.ПрочитатьXDTO(Результат);
				
				//ХЗЧо="";
				//Для Каждого Хз из ТЗ Цикл
				//	ХЗЧо=ХЗЧо+ХЗ.Ключ+"   "+ХЗ.Значение;
				//КонецЦикла;	
				
				
			КонецЦикла;
			
		Иначе
			СтрЛога=""+СтрЛога+" "+(ТЗ.Сообщение)+символы.ПС;
		КонецЕсли;
		
		
		
	КонецЦикла;
	СтрЛога=""+СтрЛога+символы.ПС+
	"-------------------------------------------------------"+Символы.ПС;
	
	
	ЛогОшибки("-ЛОГ-","-=ЛОГ=-",ТекущаяДата(),СтрЛога);
	
	
	
КонецПроцедуры	



Процедура ЗагрузитьСправочникБанки(Данные,Обратка) //+
	
	Для каждого СтрокаЗагрузки из Данные Цикл
		
		Содержимое=СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки);
		
		Если СтрокаЗагрузки.uuid_MDM = "" тогда Продолжить; КонецЕсли;
		
		Ссылка = Справочники.Банки.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.uuid_MDM); // ищем по гуиду
		Если Ссылка.пустая() тогда
			
			Ссылка = Справочники.Банки.НайтиПоКоду(СтрокаЗагрузки.Код);  // нет по гуиду , пробуем по бику (коду)
			Если Ссылка.Пустая() Тогда
				Ссылка = Справочники.Банки.СоздатьЭлемент(); // нет по бику- создаем
			Иначе
				Ссылка = ссылка.ПолучитьОбъект();	
			КонецЕсли;
			
		Иначе
			Ссылка = ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		// GtG  //  24.05.2016 16:27:10 было ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки,,"Код");
		
		
		
		
		
		
		ЛогОшибки("Банки",СтрокаЗагрузки.uuid_MDM,"Пытаемся загрузить "+СтрокаЗагрузки.Код,Содержимое);
		
		
		ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки);
		
		Попытка
			Ссылка.Записать();
			
			Нстрока = Обратка.Добавить();
			Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
			Нстрока.ДатаИзменения = ТекущаяДата();
			Нстрока.ВнешнийКод = Ссылка.код;
			
			УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
			
		Исключение
			ЛогОшибки("Банки",СтрокаЗагрузки.uuid_MDM,"Не удалось записать элемент справочника",""+Содержимое+Символы.ПС+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСправочникОрганизации(Данные,Обратка) //+
	
	Для каждого СтрокаЗагрузки из Данные Цикл
		Если СтрокаЗагрузки.uuid_MDM = "" тогда Продолжить; КонецЕсли;
		
		Ссылка = Справочники.Фирмы.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.uuid_MDM);
		
		// GtG  //  27.10.2016 16:33:59 Если Ссылка.пустая() тогда продолжить КонецЕсли; // Не создаем новых организаций. Иначе появятся юрлица из других баз.
		Если Ссылка.пустая() тогда 
			Ссылка=Справочники.Фирмы.СоздатьЭлемент();
		Иначе
			Ссылка = ссылка.ПолучитьОбъект();
		КонецЕсли; 
		
		Если СтрокаЗагрузки.КонтрагентОрганизации <> "" Тогда
			Поставщик = Справочники.Поставщики.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.КонтрагентОрганизации);
			Если Поставщик.пустая() тогда 
				ЛогОшибки("Поставщик",СтрокаЗагрузки.КонтрагентОрганизации  ,"Не найден элемент справочника","При загрузке Организации  "+СтрокаЗагрузки.uuid_MDM);
				ЗапроситьНедостающийОбъектпоГуиду(СтрокаЗагрузки.КонтрагентОрганизации);
			продолжить ;
			КонецЕсли; // Нет контрагента
		КонецЕсли;
		
		Ссылка.ФирмаКакПоставщик = Поставщик;
		ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки);
		
		//ЮрФизЛицо = Новый соответствие;
		//ЮрФизЛицо.Вставить("ЮрЛицо",перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		//ЮрФизЛицо.Вставить("ФизЛицо",перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
//		Ссылка.ЮрФизЛицо = Перечисления.ЮрФизЛицо[СтрокаЗагрузки.ЮрФизЛицо];

//		Ссылка.ОКДП = СтрокаЗагрузки.КодПоОКАТО;
		Ссылка.ОКПО = СтрокаЗагрузки.КодПоОКПО;
		
		
		Попытка
			Ссылка.Записать();
			
			Нстрока = Обратка.Добавить();
			Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
			Нстрока.ДатаИзменения = ТекущаяДата();
			Нстрока.ВнешнийКод = Ссылка.код;
			
			УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
			
		Исключение
			
			Содержимое=СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки);
			
			ЛогОшибки("Организации",
					   СтрокаЗагрузки.uuid_MDM,
					  "Не удалось записать элемент справочника",
					  ""+Содержимое+Символы.ПС+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
					  
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСправочникВалюты(Данные,Обратка) //+
	
	Для каждого СтрокаЗагрузки из Данные Цикл
		
		Содержимое=СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки);
		
		Если СтрокаЗагрузки.uuid_MDM = "" тогда Продолжить; КонецЕсли;
		
		Ссылка = Справочники.Валюты.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.uuid_MDM);
		
		Если Данные.Колонки.Найти("БазоваяВалюта") <> Неопределено Тогда
			Если СтрокаЗагрузки.БазоваяВалюта <> "" Тогда
				БазоваяВалюта = Справочники.Валюты.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.БазоваяВалюта);
			Иначе
				БазоваяВалюта = Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;
		Иначе
			БазоваяВалюта = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
//		ГенерироватьКод=ложь;
		
		Если Ссылка.пустая() тогда
			Ссылка = Справочники.Валюты.НайтиПоКоду(СтрокаЗагрузки.Код);
			Если Ссылка.пустая() тогда
				Ссылка = Справочники.Валюты.СоздатьЭлемент();
			Иначе
				Ссылка = ссылка.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			Ссылка = ссылка.ПолучитьОбъект();	
		КонецЕсли;
		
		
//		ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки,,"Код");
		ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки,,);
		
		Ссылка.БазоваяВалюта = БазоваяВалюта;
		
		
		Попытка
			Ссылка.Записать();
			
			Нстрока = Обратка.Добавить();
			Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
			Нстрока.ДатаИзменения = ТекущаяДата();
			Нстрока.ВнешнийКод = Ссылка.код;
			УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
			
		Исключение
			ЛогОшибки("Валюты",СтрокаЗагрузки.uuid_MDM,"Не удалось записать элемент справочника",""+Содержимое+символы.ПС+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//Процедура ЗагрузитьСправочникКурсывалют(Данные,Обратка)              //+
//	
//	ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
//	
//	Для каждого СтрокаЗагрузки из Данные Цикл
//		Если СтрокаЗагрузки.uuid_MDM = "" Тогда Продолжить; КонецЕсли;
//		
//		Валюта	= Справочники.Валюты.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.Валюта);
//		Если Валюта.Пустая() Тогда 
//			ЛогОшибки("ЗаписьКурсовВалют",СтрокаЗагрузки.uuid_MDM,"Не найдена Валюта",""+СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки)+Символы.ПС);
//			Продолжить; КонецЕсли;
//		
//		Дата = СтрокаЗагрузки.Период;
//		
//		Если ОМ2_ЦельнотянутоИзБУХ.ПолучитьКурсВалюты(Валюта,Дата).Курс <> Окр(СтрокаЗагрузки.КурсВалюты,4) Тогда
//			 
//			ЗаписьКурсовВалют.Валюта = Валюта;
//			ЗаписьКурсовВалют.Период = Дата;
//			ЗаписьКурсовВалют.Прочитать();
//		
//			ЗаписьКурсовВалют.Валюта	= Валюта;
//			ЗаписьКурсовВалют.Период	= Дата;
//			ЗаписьКурсовВалют.Курс      = Окр(СтрокаЗагрузки.КурсВалюты,4);
//			ЗаписьКурсовВалют.Кратность = СтрокаЗагрузки.Кратность;
//			
//			ЗаписьКурсовВалют.Записать();
//			
//		КонецЕсли;
//		
//		Нстрока = Обратка.Добавить();
//		Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
//		Нстрока.ДатаИзменения = ТекущаяДата();
//		Нстрока.ВнешнийКод = "";

//	КонецЦикла;			
//	
//КонецПроцедуры

Процедура ЗагрузитьСправочникДоговорыКонтрагентов(Данные,Обратка) //+
	
	Для каждого СтрокаЗагрузки из Данные Цикл
		
		Содержимое=СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки);
		
		Если СтрокаЗагрузки.uuid_MDM = "" тогда
			Продолжить; 
		КонецЕсли;
		
		Организация = Справочники.Фирмы.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.Организация);
		Если Организация.пустая() тогда 
			ЛогОшибки("Фирмы",СтрокаЗагрузки.Организация  ,"Не найден элемент справочника","Не найдена Фирма при загрузке договора "
																+СтрокаЗагрузки.uuid_MDM+символы.ПС+Содержимое);

			продолжить; 
		КонецЕсли; // Чужая организация
		
		Контрагент = Справочники.Поставщики.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.Владелец);
		Если Контрагент.пустая() тогда 
			ЛогОшибки("Поставщики",СтрокаЗагрузки.Владелец  ,"Не найден элемент справочника","Не найден Поставщик при загрузке договора "
																+СтрокаЗагрузки.uuid_MDM+символы.ПС+Содержимое);
																
			ЗапроситьНедостающийОбъектпоГуиду(СтрокаЗагрузки.Владелец);	
			
			продолжить ;
		КонецЕсли; // Контрагент еще не создан
		
		//ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
		//Если СтрокаЗагрузки.ВалютаВзаиморасчетов<>"" Тогда
		//	ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.ВалютаВзаиморасчетов);
		//	Если ВалютаВзаиморасчетов.пустая() тогда 
		//		
		//		ЛогОшибки("Валюты",СтрокаЗагрузки.ВалютаВзаиморасчетов  ,"Не найден элемент справочника","Не найдена валюта при загрузке договора "
		//																 +СтрокаЗагрузки.uuid_MDM+символы.ПС+Содержимое);
		//																 
		//		ЗапроситьНедостающийОбъектпоГуиду(СтрокаЗагрузки.ВалютаВзаиморасчетов);														 
		//		продолжить ;
		//	КонецЕсли; // Валюта еще не создана
		//КонецЕсли;
		
		Ссылка = Справочники.ДоговорыПоставки.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.uuid_MDM);
		
		Если Ссылка.пустая() тогда
			Ссылка = Справочники.ДоговорыПоставки.СоздатьЭлемент();
		Иначе
			Ссылка = ссылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки);
		
		//		ссылка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов[СтрокаЗагрузки.ВидДоговора];
		ссылка.Фирма = Организация;
		//		ссылка.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ссылка.Владелец = Контрагент;
		//		ссылка.ВидВзаиморасчетов = ВидВзаиморасчетов;
		
		Если НЕ Данные.Колонки.Найти("УсловияПоставкиНаименование") = Неопределено Тогда
			Если СтрокаЗагрузки.УсловияПоставкиНаименование = "Бонусный товар" Тогда
				ссылка.ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.БонусныйТовар
			ИначеЕсли СтрокаЗагрузки.УсловияПоставкиНаименование = "Комиссия" Тогда
				ссылка.ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.Комиссия
			ИначеЕсли СтрокаЗагрузки.УсловияПоставкиНаименование = "Подарки" Тогда
				ссылка.ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.Подарки
			ИначеЕсли СтрокаЗагрузки.УсловияПоставкиНаименование = "Покупка" Тогда
				ссылка.ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.Покупка
			КонецЕсли;
		КонецЕсли;
		

		Попытка
			Ссылка.Записать();
			
			Нстрока = Обратка.Добавить();
			Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
			Нстрока.ДатаИзменения = ТекущаяДата();
			Нстрока.ВнешнийКод = Ссылка.код;
			
			УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
			
			
		Исключение
			
			//Если Ссылка.ВидДоговора<> Перечисления.ВидыДоговоровКонтрагентов[СтрокаЗагрузки.ВидДоговора] Тогда
			//	ПроВидДоговора=" Попытка изменить в МДМ вид договора. 
			//	|В бухгалтерии уже есть документы по этому договору. 
			//	|Менять вид договора нельзя!
			//	|В МДМ нужно вернуть вид договора как было изначально "+Ссылка.ВидДоговора;
			//Иначе
			//	ПроВидДоговора="";
			//КонецЕсли; 	
			
			ЛогОшибки("ДоговорыКонтрагентов",СтрокаЗагрузки.uuid_MDM,"Не удалось записать элемент справочника",""+Содержимое+символы.ПС+ОписаниеОшибки()+
			            символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСправочникБанковскиеСчета(Данные,Обратка) //+
	
	Для каждого СтрокаЗагрузки из Данные Цикл
		
		Содержимое=СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки);

		
		Если СтрокаЗагрузки.uuid_MDM = "" тогда Продолжить; КонецЕсли;
		
		ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643");
		Если СтрокаЗагрузки.ВалютаДенежныхСредств<>"" Тогда
			ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.ВалютаДенежныхСредств);
			Если ВалютаДенежныхСредств.пустая() тогда 
				
				ЛогОшибки("Валюты",СтрокаЗагрузки.ВалютаДенежныхСредств  ,"Не найден элемент справочника","При загрузке банковского счета "+СтрокаЗагрузки.uuid_MDM+ символы.пс+Содержимое);
				
				ЗапроситьНедостающийОбъектпоГуиду(СтрокаЗагрузки.ВалютаДенежныхСредств);
				
				продолжить 
			КонецЕсли; // Валюта еще не создана
		КонецЕсли;
		
		
		Владелец = Справочники.Фирмы.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.Владелец);
		Если Владелец.пустая() тогда
			Владелец = Справочники.Поставщики.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.Владелец);
			Если Владелец.пустая() тогда 
				ЛогОшибки("Поставщики",СтрокаЗагрузки.Владелец  ,"Не найден элемент справочника","При загрузке банковского счета "+СтрокаЗагрузки.uuid_MDM+ символы.пс+Содержимое);
				
				ЗапроситьНедостающийОбъектпоГуиду(СтрокаЗагрузки.Владелец);
				
				продолжить;
			КонецЕсли; // Нет владельца
		КонецЕсли;
		
		Банк = Справочники.Банки.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.Банк);
		Если Банк.пустая() тогда 
			ЛогОшибки("Банки",СтрокаЗагрузки.Банк  ,"Не найден элемент справочника","При загрузке банковского счета "+СтрокаЗагрузки.uuid_MDM+ символы.пс+Содержимое);
			
			ЗапроситьНедостающийОбъектпоГуиду(СтрокаЗагрузки.Банк);
			
			продолжить ;
		КонецЕсли; // Нет банка
		
		
		
		// Банковские счета - исключение. Тут нет уникальности по uuid_MDM, и мы перезаписываем все элементы с данным кодом.
		
		ЗапросБС = Новый запрос;
		ЗапросБС.Текст = "ВЫБРАТЬ
		                 |	БанковскиеСчета.Ссылка
		                 |ИЗ
		                 |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		                 |ГДЕ
		                 |	БанковскиеСчета.uuid_mdm = &uuid_mdm";
		
		ЗапросБС.УстановитьПараметр("uuid_mdm",СтрокаЗагрузки.uuid_MDM);
		
		РезультатБС = ЗапросБС.Выполнить().Выгрузить();
		
		Если РезультатБС.Количество() = 0 Тогда          // Новый элемент
			Ссылка = Справочники.БанковскиеСчета.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки);
		
			Ссылка.Владелец = Владелец;
			Ссылка.Банк = Банк;
			Ссылка.ВалютаДенежныхСредств = ВалютаДенежныхСредств;
			
			
			Попытка
				Ссылка.Записать();
			
				Нстрока = Обратка.Добавить();
				Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
				Нстрока.ДатаИзменения = ТекущаяДата();
				Нстрока.ВнешнийКод = Ссылка.код;
			
				УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
			
			Исключение
				ЛогОшибки("БанковскиеСчета",СтрокаЗагрузки.uuid_MDM,"Не удалось записать элемент справочника",""+Содержимое+ символы.пс+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
			
			КонецПопытки;
			
		ИНаче                                      // Несколько старых элементов.
			Для каждого стрБС из РезультатБС Цикл			
				
				Ссылка = стрБС.ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки);
		
				Ссылка.Владелец = Владелец;
				Ссылка.Банк = Банк;
				Ссылка.ВалютаДенежныхСредств = ВалютаДенежныхСредств;
			
			
				Попытка
					Ссылка.Записать();
				Исключение
					ЛогОшибки("БанковскиеСчета",СтрокаЗагрузки.uuid_MDM,"Не удалось записать элемент справочника",""+Содержимое+ символы.пс+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
				КонецПопытки;
				
				
				Нстрока = Обратка.Добавить();
				Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
				Нстрока.ДатаИзменения = ТекущаяДата();
				Нстрока.ВнешнийКод = Ссылка.код;
			
				УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
				
			КонецЦикла
		КонецЕсли;
		
		
		
		// Заполнение основного счета решили отключить.
		//Если СтрокаЗагрузки.Основной Тогда
		//	КонтрагентОбъект = Владелец.ПолучитьОбъект();
		//	КонтрагентОбъект.ОсновнойСчет = ссылка.ссылка;
		//	Попытка
		//		КонтрагентОбъект.Записать();
		//	Исключение
		//		ЛогОшибки("БанковскиеСчета",СтрокаЗагрузки.uuid_MDM,"Не удалось записать основной банковский счет",""+Содержимое+ символы.пс+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
		//	КонецПопытки;
		//	
		//КонецЕсли;
		
		
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСправочникКонтрагенты(Данные,Обратка) //+
	
//	Данные.Колонки.Добавить("uuid_MDM");
	
	Для каждого СтрокаЗагрузки из Данные Цикл
//		СтрокаЗагрузки.uuid_MDM = СтрокаЗагрузки.ссылка;
		Если СтрокаЗагрузки.uuid_MDM = "" тогда 
			Продолжить; 
		КонецЕсли;
		
		Ссылка = Справочники.Поставщики.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.uuid_MDM);
		Если Ссылка.пустая() тогда
			Ссылка = Справочники.Поставщики.СоздатьЭлемент();
		Иначе
			Ссылка = ссылка.ПолучитьОбъект();
		КонецЕсли;
		КодДДП = Ссылка.КодДДП;
		ЗаполнитьЗначенияСвойств(Ссылка,СтрокаЗагрузки);
		
//		Ссылка = Справочники.Поставщики.НайтиПоРеквизиту("uuid_MDM",СтрокаЗагрузки.uuid_MDM);
		Если Данные.Колонки.Найти("ОсуществлятьПрямыеПоставки") <> Неопределено Тогда Ссылка.ОсуществляетПрямыеПоставки = СтрокаЗагрузки.ОсуществлятьПрямыеПоставки; КонецЕсли;
		Если Данные.Колонки.Найти("ПолноеНаименование") <> Неопределено Тогда Ссылка.ПолнНаименование = СтрокаЗагрузки.ПолноеНаименование; КонецЕсли;
		Если Данные.Колонки.Найти("Почта") <> Неопределено Тогда Ссылка.ПочтаДляПретензий  = СтрокаЗагрузки.Почта; КонецЕсли;
		Если Данные.Колонки.Найти("ИспользоватьСрочныеОтсрочки") <> Неопределено Тогда Ссылка.ИспСложныеОтсрочки  = СтрокаЗагрузки.ИспользоватьСрочныеОтсрочки; КонецЕсли;
		Если Данные.Колонки.Найти("КонтрагентУСН") <> Неопределено Тогда Ссылка.КонтрагентНаУСН = СтрокаЗагрузки.КонтрагентУСН; КонецЕсли;
		Если Данные.Колонки.Найти("КоэффЦеныЖНВЛС") <> Неопределено Тогда Ссылка.КоэффициентПриведенияЦеныДляЖНВЛС = СтрокаЗагрузки.КоэффЦеныЖНВЛС; КонецЕсли;
		Если Данные.Колонки.Найти("КоэффЦеныНЕЖНВЛС") <> Неопределено Тогда Ссылка.КоэффициентПриведенияЦеныКромеЖНВЛС = СтрокаЗагрузки.КоэффЦеныНЕЖНВЛС; КонецЕсли;
		Если Данные.Колонки.Найти("КоэффЦеныНаБазовыйПрайс") <> Неопределено Тогда Ссылка.КоэффициентЦеныНаБазовыйПрайсПоставщика = СтрокаЗагрузки.КоэффЦеныНаБазовыйПрайс; КонецЕсли;
		Если Данные.Колонки.Найти("КоэффЦеныНаВесьТовар") <> Неопределено Тогда Ссылка.КоэффициентПриведенияЦены = СтрокаЗагрузки.КоэффЦеныНаВесьТовар; КонецЕсли;
		
		Если Данные.Колонки.Найти("КодБазы36_6") <> Неопределено Тогда Ссылка.Код366 = СтрокаЗагрузки.КодБазы36_6; КонецЕсли;
		Если Данные.Колонки.Найти("КодДДП") <> Неопределено Тогда 
			Если СтрокаЗагрузки.КодДДП = 0 Тогда  //Заявка 37829 из IntraService
				Ссылка.КодДДП = КодДДП;
			Иначе
				Ссылка.КодДДП = СтрокаЗагрузки.КодДДП; 
			КонецЕсли;
		КонецЕсли;
		Если Данные.Колонки.Найти("Телефон") <> Неопределено Тогда Ссылка.Телефон = СтрокаЗагрузки.Телефон; КонецЕсли;
		
		
		ТипыПоставщика = Новый соответствие;
		ТипыПоставщика.Вставить("Оптовый поставщик",перечисления.ТипПоставщика.ОптовыйПоставщик);
		ТипыПоставщика.Вставить("Покупатель",перечисления.ТипПоставщика.Покупатель );
		ТипыПоставщика.Вставить("Производитель",перечисления.ТипПоставщика.Производитель);
		
		
		Если Данные.Колонки.Найти("ТипПоставщикаНаименование") <> Неопределено Тогда Ссылка.ТипПоставщика = ТипыПоставщика[СтрокаЗагрузки.ТипПоставщикаНаименование]; КонецЕсли;
		
		Попытка
			Ссылка.Записать();
			
			Нстрока = Обратка.Добавить();
			Нстрока.Гуид = СтрокаЗагрузки.uuid_MDM;
			Нстрока.ДатаИзменения = ТекущаяДата();
			Нстрока.ВнешнийКод = Ссылка.код;
			
			УдалитьОшибку(СтрокаЗагрузки.uuid_MDM);
			
		Исключение
			
			Содержимое=СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,Данные.Колонки);
			
			ЛогОшибки("Контрагенты", СтрокаЗагрузки.uuid_MDM,"Не удалось записать элемент справочника",""+Содержимое+Символы.ПС+ОписаниеОшибки()+символы.ПС+ПолучитьСодержимоеОбъекта(Ссылка));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры



Функция СодержимоеЗагружаемогоЭлемента(СтрокаЗагрузки,ДанныеКолонки) // Строка загрузки - строка ТЗ  , ДанныеКолонки - Колонки 
	
	Содержимое="";
	
	
	Для Каждого Кол  Из ДанныеКолонки Цикл
		Содержимое=Содержимое+Кол.Имя+"  "+СтрокаЗагрузки[Кол.Имя]+Символы.ПС; 
	КонецЦикла;   
	
	Возврат Содержимое;
	
КонецФункции

Функция ПолучитьСодержимоеОбъекта(Ссылка)
	
	СодержимоеОбъекта="-------Содержимое незаписанного объекта----------"+символы.ПС;
	
	
	Для Каждого Рекв из Ссылка.Метаданные().СтандартныеРеквизиты Цикл
		СодержимоеОбъекта=СодержимоеОбъекта+Рекв.Имя +"   :   "+Ссылка[Рекв.Имя]+ Символы.ПС;
	КонецЦикла;
	
	
	
	Для Каждого Рекв из Ссылка.Метаданные().Реквизиты Цикл
		СодержимоеОбъекта=СодержимоеОбъекта+Рекв.Имя +"   :   "+Ссылка[Рекв.Имя]+ Символы.ПС;
	КонецЦикла;
	
	Возврат СодержимоеОбъекта;
	
КонецФункции	

Процедура ЗапроситьНедостающийОбъектпоГуиду(ГуидМДМ) Экспорт

	Прокси=ПолучитьПроксиМДМ(); 
	
	МассивИз1Гуида=Новый Массив();
	МассивИз1Гуида.Добавить(СокрЛП(ГуидМДМ));
	
	Рез= Прокси.queue (Константы.АС_ИДБазы_в_МДМ.Получить(),СериализаторXDTO.ЗаписатьXDTO(МассивИз1Гуида));
	
КонецПроцедуры

Процедура ЛогОшибки(Справочник,ГУИД,Ошибка,Комментарий)
	
	МЗ=РегистрыСведений.МДМ_Ошибки.СоздатьМенеджерЗаписи();
	МЗ.ГУИДмдм=ГУИД;
	МЗ.Комментарий="-= "+ТекущаяДата()+" =-"+Символы.ПС+Комментарий;
	МЗ.ОписаниеОшибки=Ошибка;
	МЗ.Справочник=Справочник;
	
	МЗ.Записать();
	
КонецПроцеДуры

ПроцеДура УдалитьОшибку(ГУИД)
	
	НЗ=РегистрыСведений.МДМ_Ошибки.СоздатьНаборЗаписей();
	НЗ.Отбор.ГуидМДМ.Установить(ГУИД,Истина);
	НЗ.Записать();
	
КонецПроцеДуры

Процедура МДМ_ПометитьАптекуКВыгрузке(Источник, Отказ) Экспорт

	Если НЕ Источник.ЭтоГруппа Тогда
		МЗ = РегистрыСведений.МДМ_АптекиКВыгрузке.СоздатьМенеджерЗаписи();
		МЗ.Аптека = Источник.Ссылка;
		МЗ.Прочитать();
		МЗ.Аптека = Источник.Ссылка;
		МЗ.ДатаЗаписи = ТекущаяДата();
		МЗ.Индекс = МЗ.Индекс + 1;
		МЗ.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ВырузкаАптекВМДМ() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВырузкаАптекВМДМ");
	Выборка = РегистрыСведений.МДМ_АптекиКВыгрузке.Выбрать();

	ПерваяСтрока = Истина;
	н=0;
	Пока Выборка.Следующий() Цикл
		н=н+1;
		Если н=30 Тогда
			Прокси = Неопределено;
			Прервать;
		КонецЕсли;
		
		Если ПерваяСтрока=Истина Тогда
			ПерваяСтрока = Ложь;
			Попытка
				Прокси=ПолучитьПроксиМДМ();
			Исключение
				МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			Если Прокси = Неопределено Тогда
				МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось создать подключение к МДМ. Обратитесь к администратору МДМ");
				Возврат;
			КонецЕсли;
			пИдентификаторСистемы="AVE_SKD";
		КонецЕсли;
		
		
		СкладСсылка = Выборка.Аптека;
		СтруктураПлощади = Справочники.МестаХранения.ПолучитьПлощадиАптеки(СкладСсылка);		
		
		СтруктураДанныхСклада=Новый Структура;
		СтруктураДанныхСклада.Вставить("ПометкаУдаления",СкладСсылка.ПометкаУдаления);
		СтруктураДанныхСклада.Вставить("Наименование",СкладСсылка.Наименование);
		СтруктураДанныхСклада.Вставить("Организация",СкладСсылка.Фирма.uuid_mdm);
		СтруктураДанныхСклада.Вставить("НомерАптеки",СкладСсылка.НомерАптеки);
		СтруктураДанныхСклада.Вставить("ГуидСклада",Строка(СкладСсылка.УникальныйИдентификатор()));
		СтруктураДанныхСклада.Вставить("КодТорговлиАВЕ",СкладСсылка.Код);
		СтруктураДанныхСклада.Вставить("ДатаОткрытия",СкладСсылка.ДатаПерехода);
		СтруктураДанныхСклада.Вставить("ДатаЗакрытия",СкладСсылка.ДатаЗакрытия);
		
		СтруктураДанныхСклада.Вставить("НаименованиеДляБухгалтерии",?(пустаястрока(СкладСсылка.НаименованиеДляБухгалтерии),СкладСсылка.Наименование,СкладСсылка.НаименованиеДляБухгалтерии));
		СтруктураДанныхСклада.Вставить("НаименованиеДляЗУП",?(пустаястрока(СкладСсылка.НаименованиеДляЗУП),СкладСсылка.Наименование,СкладСсылка.НаименованиеДляЗУП) );
		Если ЗначениеЗаполнено(СкладСсылка.ФирмаКомитент) Тогда
			СтруктураДанныхСклада.Вставить("ОрганизацияКомитент",СкладСсылка.ФирмаКомитент.uuid_mdm);
		Иначе
			СтруктураДанныхСклада.Вставить("ОрганизацияКомитент","");
		КонецЕсли;
		СтруктураДанныхСклада.Вставить("Город",СкладСсылка.Город.Наименование);
		СтруктураДанныхСклада.Вставить("Регион",СкладСсылка.СубъектРФ.Наименование);
		СтруктураДанныхСклада.Вставить("Бренд",СкладСсылка.Бренд.Наименование);
		СтруктураДанныхСклада.Вставить("НомерСумки",СкладСсылка.НомерСумки);
		СтруктураДанныхСклада.Вставить("ОбщаяПлощадь",СтруктураПлощади.ОбщаяПлощадь);
		СтруктураДанныхСклада.Вставить("ПлощадьТорговогоЗала",СтруктураПлощади.ПлощадьТорговогоЗала);
		СтруктураДанныхСклада.Вставить("МестоРасположения",СкладСсылка.МестоРасположения.Наименование);
		СтруктураДанныхСклада.Вставить("КодФинОтдела",СкладСсылка.КодФинОтдела);
		
		
		Результат=createUpdateSklad(Прокси, пИдентификаторСистемы,  СтруктураДанныхСклада);
		
			
		Если НЕ Результат.ЕстьОшибки Тогда
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		Иначе
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось вырузить в МДМ аптеку : " + СкладСсылка + Символы.ПС + Результат.ТекстОшибки);
			Прокси = Неопределено;
			Прервать;
		КонецЕсли;	
			

	КонецЦикла;
	
КонецПроцедуры

