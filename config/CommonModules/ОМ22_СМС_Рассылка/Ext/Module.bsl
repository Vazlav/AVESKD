
Функция SMSЛогинПарольАдресОтправителя() Экспорт
	//Потому что нельзя констаны в этом модуле
	Возврат Новый Структура("Логин,Пароль,АдресОтправителя","65439_AVEAptek","_FKLLK!","AVEApteka");
КонецФункции	


Функция ПроверкаОстаткаSMS() Экспорт
	Определение = Новый WSОпределения("http://ws1.smsdelivery.ru/SMSWebservice.asmx?WSDL");
	Прокси = Новый WSПрокси(Определение,"http://smsdelivery.ru/","SMSWebService","SMSWebServiceSoap");
	
	Учетка=SMSЛогинПарольАдресОтправителя();
	
	Результат = Прокси.GetBalance(Учетка.Логин,Учетка.Пароль);
	Если Результат.Balance > 0 Тогда
		Возврат Результат.Balance; // Штук СМСок
	Иначе
		Возврат Неопределено; // какая-то ошибка .... //Сообщить("Ошибка получения остатка : " + Результат.Result);
	КонецЕсли;
	
КонецФункции



Функция ПослатьSMSСообщение(Номер,ТекстСообщения,ТипСМССообщения) Экспорт
	Определение = Новый WSОпределения("http://ws1.smsdelivery.ru/SMSWebservice.asmx?WSDL");
	Прокси = Новый WSПрокси(Определение,"http://smsdelivery.ru/","SMSWebService","SMSWebServiceSoap");
	
	ФлешСМС = 0; // без сохранения в памяти
	
	ВремяЖизни = 1; 
	// время жизни СМС в часах в течении этого времени будут производится попытки отправки СМС
	
	//Цифробуквенный адрес отправителя. Изначально можно использовать только "smsdelivery" 
	//Чтобы разрешить другие адреса, нужно связаться со службой поддержки
	Учетка=SMSЛогинПарольАдресОтправителя();
	
	Результат = Прокси.SendMessage(Учетка.Логин,Учетка.Пароль, ФлешСМС, ВремяЖизни, Номер, Учетка.АдресОтправителя, ТекстСообщения);
	
	СтатусОтправки=Перечисления.СМС_Статус[Результат.Result];

	IDСообщения = Результат.MessageID;
	ОписаниеОшибки="Результат отправки = " + Результат.Result + "; Номер сообщения : " + Результат.MessageID + "; Число сегментов = " + Результат.SegmentsNumber;
	
	СохранитьSMSСообщение(ТекущаяДата(),Номер,IDСообщения,ТипСМССообщения,ТекстСообщения,СтатусОтправки,ОписаниеОшибки);
	
	Возврат СтатусОтправки;
	
КонецФункции

Процедура СохранитьSMSСообщение(ДатаОтправки,Телефон,IDСообщения,ТипСМССообщения,ТекстСообщения,СтатусОтправки,ОписаниеОшибки) Экспорт
	// Сохраняет отправленное сообщение в регистр сведений  СМС_Рассылка
	
	МЗ_РС_СМС_Рассылка=РегистрыСведений.СМС_Рассылка.СоздатьМенеджерЗаписи();
	
	МЗ_РС_СМС_Рассылка.ДатаОтправки   = ДатаОтправки;
	МЗ_РС_СМС_Рассылка.Телефон        =Телефон      ;
	МЗ_РС_СМС_Рассылка.IDСообщения    = IDСообщения ;
	МЗ_РС_СМС_Рассылка.ТипСМССообщения= ТипСМССообщения;
	
	МЗ_РС_СМС_Рассылка.Прочитать();
	
	МЗ_РС_СМС_Рассылка.ДатаОтправки   = ДатаОтправки;
	МЗ_РС_СМС_Рассылка.Телефон        =Телефон      ;
	МЗ_РС_СМС_Рассылка.IDСообщения    = IDСообщения ;
	МЗ_РС_СМС_Рассылка.ТипСМССообщения= ТипСМССообщения;
	
 	МЗ_РС_СМС_Рассылка.ТекстСообщения  = ТекстСообщения;
	МЗ_РС_СМС_Рассылка.СтатусОтправки  = СтатусОтправки;
	МЗ_РС_СМС_Рассылка.ОписаниеОшибки  = ОписаниеОшибки;
	
	МЗ_РС_СМС_Рассылка.Записать();
Конецпроцедуры	

Процедура ПроверитьСтатусДоставкиSMS(IDСообщения,СтарыйСтатусОтправки) Экспорт
	Если IDСообщения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Определение = Новый WSОпределения("http://ws1.smsdelivery.ru/SMSWebservice.asmx?WSDL");
	Прокси = Новый WSПрокси(Определение,"http://smsdelivery.ru/","SMSWebService","SMSWebServiceSoap");
	
	Учетка=SMSЛогинПарольАдресОтправителя();
	
	Результат = Прокси.GetMessageStatus(Учетка.Логин,Учетка.Пароль, IDСообщения);
	
	СтатусОтправки=Перечисления.СМС_Статус[Результат.MessageStatus];

	Если СтарыйСтатусОтправки<> СтатусОтправки Тогда // имеет смысл терзать базу, что-то изменилось
		ОбновитьСтатусДоставкиSMSСообщения(IDСообщения,СтатусОтправки);
	КонецЕсли;
КонецПроцедуры


Процедура ОбновитьСтатусДоставкиSMSСообщения(IDСообщения,СтатусОтправки)Экспорт
     Запрос=Новый Запрос("ВЫБРАТЬ
                         |	СМС_Рассылка.ДатаОтправки,
                         |	СМС_Рассылка.Телефон,
                         |	СМС_Рассылка.IDСообщения,
                         |	СМС_Рассылка.ТипСМССообщения,
                         |	СМС_Рассылка.ТекстСообщения,
                         |	СМС_Рассылка.СтатусОтправки,
                         |	СМС_Рассылка.ОписаниеОшибки
                         |ИЗ
                         |	РегистрСведений.СМС_Рассылка КАК СМС_Рассылка
                         |ГДЕ
                         |	СМС_Рассылка.IDСообщения = &IDСообщения");

	Запрос.УстановитьПараметр("IDСообщения",IDСообщения);
	
	Рез=Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество()=0 Тогда
		Возврат; // не существует смски с таким ИД сервера , ИД-сервера считается уникальным.
	Конецесли;	
	
	СМС=Рез.Получить(0); // там 1 строка
	
	МЗ_РС_СМС_Рассылка=РегистрыСведений.СМС_Рассылка.СоздатьМенеджерЗаписи();
	
	МЗ_РС_СМС_Рассылка.ДатаОтправки   = СМС.ДатаОтправки;
	МЗ_РС_СМС_Рассылка.Телефон        =СМС.Телефон      ;
	МЗ_РС_СМС_Рассылка.IDСообщения    = СМС.IDСообщения ;
	МЗ_РС_СМС_Рассылка.ТипСМССообщения= СМС.ТипСМССообщения;
	
	МЗ_РС_СМС_Рассылка.Прочитать();
	
	МЗ_РС_СМС_Рассылка.ДатаОтправки   = СМС.ДатаОтправки;
	МЗ_РС_СМС_Рассылка.Телефон        =СМС.Телефон      ;
	МЗ_РС_СМС_Рассылка.IDСообщения    = СМС.IDСообщения ;
	МЗ_РС_СМС_Рассылка.ТипСМССообщения= СМС.ТипСМССообщения;
	
 	МЗ_РС_СМС_Рассылка.ТекстСообщения  = СМС.ТекстСообщения;
	МЗ_РС_СМС_Рассылка.СтатусОтправки  = СтатусОтправки; // новый статус
	МЗ_РС_СМС_Рассылка.ОписаниеОшибки  = СМС.ОписаниеОшибки;
	
	МЗ_РС_СМС_Рассылка.Записать();

Конецпроцедуры 


ПРоцедура ОбновитьСтатусыSMS() Экспорт
	// Обновляет статусы у СМСок, которые не доставлены и не ошибки
	СписокПроверяемыхСтатусовСМС=Новый Массив;
	СписокПроверяемыхСтатусовСМС.Добавить(Перечисления.СМС_Статус.OK);
	СписокПроверяемыхСтатусовСМС.Добавить(Перечисления.СМС_Статус.EnQueue);
	СписокПроверяемыхСтатусовСМС.Добавить(Перечисления.СМС_Статус.EnRoute);
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СМС_Рассылка.IDСообщения,
	                    |	СМС_Рассылка.СтатусОтправки как СтарыйСтатусОтправки
	                    |ИЗ
	                    |	РегистрСведений.СМС_Рассылка КАК СМС_Рассылка
	                    |ГДЕ
	                    |	СМС_Рассылка.СтатусОтправки В(&СписокПроверяемыхСтатусовСМС)");
	
	Запрос.УстановитьПараметр("СписокПроверяемыхСтатусовСМС",СписокПроверяемыхСтатусовСМС);
	
	ПроверяемыеСМСки=Запрос.Выполнить().Выгрузить();
	
	ДЛя Каждого СМС Из ПроверяемыеСМСки Цикл
		ПроверитьСтатусДоставкиSMS(СМС.IDСообщения,СМС.СтарыйСтатусОтправки);
	КонецЦикла;	
	
	
	
КонецПроцедуры	



Функция ПривестиНомерТелефона(Знач ИсхНомер) Экспорт
	// конвертирует номер из +7 (916) 061-32-67 в 79160613267	
	РезНомер=ИсхНомер;
	ЗаменяемыеСимволы="+ ()-№#$%^&*_[]{}<>?!@"+Символы.Таб;
	Для Ы=1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		ЗаменяемыйСимвол=Сред(ЗаменяемыеСимволы,Ы,1);
		РезНомер=СтрЗаменить(РезНомер,ЗаменяемыйСимвол,"");
	КонецЦикла;	
	
	Возврат РезНомер;
	
КонецФункции


Функция ПроверитьНомерНаПригодностьДляОтправкиСМС(Знач ИсхНомер) Экспорт
	ТестНомер=ПривестиНомерТелефона(ИсхНомер);	
	Если СтрДлина(ТестНомер)=11 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕСли;	
КонецФункции














