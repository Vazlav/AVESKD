
////////////////////////////////////////////////////////////
// РАБОТА С ДОКУМЕНТАМИ

Процедура ЗарегистрироватьОбъектДляВыгрузки(Объект, ВидВыгрузки, Удаление = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОбъектыДляВыгрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидВыгрузки.Установить(ВидВыгрузки);
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	
	Если Не Удаление Тогда
		НоваяЗапись = НаборЗаписей.Добавить();	
		НоваяЗапись.ВидВыгрузки		= ВидВыгрузки;
		НоваяЗапись.Объект			= Объект;
		НоваяЗапись.ДатаРегистрации	= ТекущаяДата();
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗапланироватьДокументКПовторнойВыгрузке(ДокСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДокументыДляПовторнойВыгрузки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(ДокСсылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Документ = ДокСсылка;
	НоваяЗапись.Выгружен = Ложь;
	НоваяЗапись.ДатаСозданияЗаписи = ТекущаяДата();
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
			
Процедура ДобавитьДокументВРегистрОтсутствующих(Поставщик, НомерДокумента) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОтсутствующиеДокументыПоставщиков.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Поставщик.Установить(Поставщик);
	НаборЗаписей.Отбор.НомерДокумента.Установить(НомерДокумента);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Поставщик = Поставщик;
	НоваяЗапись.НомерДокумента = НомерДокумента;
	НоваяЗапись.ДатаСозданияЗаписи = ТекущаяДата();
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьНачальныйСтатусЭДО(ВидыЭД, Фирма, Поставщик) Экспорт
	                      	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК НастройкаНайдена
	|ИЗ
	|	Справочник.НастройкиЭДО КАК НастройкиЭДО
	|ГДЕ
	|	НастройкиЭДО.Активность = ИСТИНА
	|	И НастройкиЭДО.ВидЭлектронногоДокумента В(&ВидыЭД)
	|	И НастройкиЭДО.Фирма = &Фирма
	|	И НастройкиЭДО.Поставщик = &Поставщик";
	
	Запрос.УстановитьПараметр("ВидыЭД", ВидыЭД);
	Запрос.УстановитьПараметр("Фирма", Фирма);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.СтатусыВСистемеЭДО.НеТребуетВыгрузки;
	Иначе
		Возврат Перечисления.СтатусыВСистемеЭДО.ОжидаетВыгрузки;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипПретензииПоставщика(Знач ТекстПримечания, ВидПретензии) Экспорт
	
	ТекстПримечания = НРег(ТекстПримечания);
	
	Если ВидПретензии = 1 Тогда //Бой-брак
		
		Если ПустаяСтрока(ТекстПримечания) Тогда
			Рез = Справочники.ТипыПретензийПоставщику.БракПрочий;			
		ИначеЕсли Найти(ТекстПримечания, "нетов") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.НетоварныйВид;			
		ИначеЕсли Найти(ТекстПримечания, "заводс") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.ЗаводскойБрак;			
		ИначеЕсли Найти(ТекстПримечания, "срок") > 0 И Найти(ТекстПримечания, "срок") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.ИстечениеСрокаГодности;
		ИначеЕсли Найти(ТекстПримечания, "забраков") > 0 Или Найти(ТекстПримечания, "федер") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.ФедеральнаяЗабраковка;
		Иначе
			Рез = Справочники.ТипыПретензийПоставщику.БракПрочий;
		КонецЕсли;
		
	ИначеЕсли ВидПретензии = 2 Тогда //Недовоз
		
		Если ПустаяСтрока(ТекстПримечания) Тогда
			Рез = Справочники.ТипыПретензийПоставщику.Недовложение;					
		ИначеЕсли Найти(ТекстПримечания, "пересорт") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.НедовложениеПересорт;
		ИначеЕсли Найти(ТекстПримечания, "недов") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.Недовложение;
		Иначе
			Рез = Справочники.ТипыПретензийПоставщику.НедовозПрочий;
		КонецЕсли;
		
	Иначе //Излишек
		
		Если ПустаяСтрока(ТекстПримечания) Тогда
			Рез = Справочники.ТипыПретензийПоставщику.ИзлишкиЧистые;			
		ИначеЕсли Найти(ТекстПримечания, "чист") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.ИзлишкиЧистые;			
		ИначеЕсли Найти(ТекстПримечания, "пересорт") > 0 Тогда
			Рез = Справочники.ТипыПретензийПоставщику.ИзлишкиПересорт;			
		Иначе
			Рез = Справочники.ТипыПретензийПоставщику.ИзлишкиПрочие;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьСотрудникаАптеки(Док) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИзмененияПоступленийВАптеке.ИД) КАК ИД
	|ПОМЕСТИТЬ втПоследниеИзменения
	|ИЗ
	|	РегистрСведений.ИзмененияПоступленийВАптеке КАК ИзмененияПоступленийВАптеке
	|ГДЕ
	|	ИзмененияПоступленийВАптеке.Документ = &Док
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияПоступленийВАптеке.ФИО
	|ИЗ
	|	втПоследниеИзменения КАК втПоследниеИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияПоступленийВАптеке КАК ИзмененияПоступленийВАптеке
	|		ПО (ИзмененияПоступленийВАптеке.Документ = &Док)
	|			И втПоследниеИзменения.ИД = ИзмененияПоступленийВАптеке.ИД";
	
	Запрос.УстановитьПараметр("Док", Док);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФИО;
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции


////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛ.ЗАДАНИЯМИ (удалить)

Функция ИнициализироватьРегламентноеЗадание(ИмяЗадания) Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду(ИмяЗадания);
	
	Если РегламентноеЗадание.Пустая() Тогда
		Возврат Неопределено;		
	КонецЕсли;               
	
	ПараметрыРегламентногоЗадания = Новый Структура;
	
	ПараметрыРегламентногоЗадания.Вставить("ИмяЗадания", ИмяЗадания);
	ПараметрыРегламентногоЗадания.Вставить("Ссылка", РегламентноеЗадание.Ссылка);
	ПараметрыРегламентногоЗадания.Вставить("БылиОшибки", Ложь);
	
	Для Каждого ТекПараметр Из РегламентноеЗадание.Параметры Цикл
		
		Если ТекПараметр.Параметр = "Отключено" И ТекПараметр.Значение = Истина Тогда
			Возврат Неопределено;
			
		ИначеЕсли ТекПараметр.Параметр = "АдресаДляРассылки" Тогда
			
			МассивАдресов = Новый Массив;
			
			МногострочнаяСтрока = СтрЗаменить(ТекПараметр.Значение, ";", Символы.ПС);
			чСтрок = СтрЧислоСтрок(МногострочнаяСтрока);
			Для ч = 1 По чСтрок Цикл
				ТекСтрока = СокрЛП(СтрПолучитьСтроку(МногострочнаяСтрока, ч));
				Если Не ПустаяСтрока(ТекСтрока) Тогда 
					МассивАдресов.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыРегламентногоЗадания.Вставить("АдресаДляРассылки", МассивАдресов);
			
		Иначе
			ПараметрыРегламентногоЗадания.Вставить(ТекПараметр.Параметр, ТекПараметр.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// {Логирование	
	Подкаталог = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	Каталог = ПолучитьИмяФайлаНаФТП("\\id-vm-1\ftp_data\tso_log\" + Подкаталог + "\temp\");
	КаталогНаДиске = Новый Файл(Каталог);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	
	ВременныйФайл = СтрЗаменить(Каталог, "temp", "plan") + ИмяЗадания + ".log";
	ВременныйФайлНаДиске = Новый Файл(ВременныйФайл);
	Если ВременныйФайлНаДиске.Существует() Тогда
		УдалитьФайлы(ВременныйФайлНаДиске.ПолноеИмя);
	КонецЕсли;
	
	ИмяФайлаЛога = Каталог + ИмяЗадания + " (" + Формат(ТекущаяДата(), "ДФ=HH-mm") + ").log";		
	
	ПараметрыРегламентногоЗадания.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	
	ЗаписиЛога = Новый Массив;
	ЗаписиЛога.Добавить("Имя задания: " + ИмяЗадания);
	ЗаписиЛога.Добавить("Дата запуска: " + ТекущаяДата());
	ПараметрыРегламентногоЗадания.Вставить("ЗаписиЛога", ЗаписиЛога);
	
	АдресаДляОтправкиЛога = РегламентноеЗадание.АдресаДляОтправкиЛога.ВыгрузитьКолонку("ЭлектронныйАдрес");
	ПараметрыРегламентногоЗадания.Вставить("АдресаДляОтправкиЛога", АдресаДляОтправкиЛога);	
	// ...}
	
	Возврат ПараметрыРегламентногоЗадания;
	
КонецФункции

Процедура ЗавершитьРегламентноеЗадание(ПараметрыРегламентногоЗадания) Экспорт
	
	ЗаписьВЛогРегламентногоЗадания(ПараметрыРегламентногоЗадания, "Дата завершения: " + ТекущаяДата(), , Истина);
	
	ИмяФайлаСтарое = ПараметрыРегламентногоЗадания.ИмяФайлаЛога;
	ИмяФайлаНовое = СтрЗаменить(СтрЗаменить(ПараметрыРегламентногоЗадания.ИмяФайлаЛога, "\temp", ""), "/temp", "");
	
	Если ПараметрыРегламентногоЗадания.БылиОшибки Тогда
		ИмяФайлаНовое = СтрЗаменить(ИмяФайлаНовое, ".log", " ОШИБКИ.log");
	КонецЕсли;
	
	ПереместитьФайл(ИмяФайлаСтарое, ИмяФайлаНовое);
	
	Если ПараметрыРегламентногоЗадания.АдресаДляОтправкиЛога.Количество() > 0 
		И ПараметрыРегламентногоЗадания.БылиОшибки Тогда
		
		ТемаПисьма = "Лог регламентного задания """ + ПараметрыРегламентногоЗадания.ИмяЗадания + """";
				
		Получатели = ПараметрыРегламентногоЗадания.АдресаДляОтправкиЛога; 		
		
		Вложения = Новый Массив;
		Вложения.Добавить(ИмяФайлаНовое);
		
		ОтправитьПисьмо(Получатели, ТемаПисьма, "", "", Вложения);		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьВЛогРегламентногоЗадания(ПараметрыРегламентногоЗадания, Текст, Ошибка=Ложь, СохранитьВФайл=Ложь) Экспорт

	ЗаписиЛога = ПараметрыРегламентногоЗадания.ЗаписиЛога;
	ЗаписиЛога.Добавить(Текст);
	
	Если Ошибка Тогда
		ПараметрыРегламентногоЗадания.БылиОшибки = Истина;
	КонецЕсли;		
	
	Если СохранитьВФайл Тогда
		
		ЗаписьВФайл = Новый ЗаписьТекста(ПараметрыРегламентногоЗадания.ИмяФайлаЛога, КодировкаТекста.ANSI, , Истина);
		
		Для Каждого ТекЗаписьЛога Из ЗаписиЛога Цикл
			ЗаписьВФайл.ЗаписатьСтроку(ТекЗаписьЛога);
		КонецЦикла;
		
		ЗаписьВФайл.Закрыть();
		
		ЗаписиЛога.Очистить();
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыРегламентногоЗадания(ИмяЗадания) Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду(ИмяЗадания);
	
	Если РегламентноеЗадание.Пустая() Тогда
		Возврат Неопределено;		
	КонецЕсли;               
	
	ПараметрыРегламентногоЗадания = Новый Структура;	
	ПараметрыРегламентногоЗадания.Вставить("Ссылка", РегламентноеЗадание.Ссылка); 	
	Для Каждого ТекПараметр Из РегламентноеЗадание.Параметры Цикл		
		ПараметрыРегламентногоЗадания.Вставить(ТекПараметр.Параметр, ТекПараметр.Значение);
	КонецЦикла;
	
	Возврат ПараметрыРегламентногоЗадания;
	
КонецФункции

Процедура ИзменитьПараметрРегламентногоЗадания(РегламентноеЗадание, Параметр, ЗначениеПараметра) Экспорт
	
	РегламентноеЗаданиеОбъект = РегламентноеЗадание.ПолучитьОбъект();
	
	Для Каждого ТекПараметр Из РегламентноеЗаданиеОбъект.Параметры Цикл		
		Если ТекПараметр.Параметр = Параметр Тогда
			ТекПараметр.Значение = ЗначениеПараметра;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентноеЗаданиеОбъект.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////
// РАБОТА С ВЫПОЛНЯЕМЫМИ ПРОЦЕДУРАМИ

Функция ИнициализироватьВыполняемуюПроцедуру(КодПроцедуры, ДополнительныеПараметрыЗапуска="") Экспорт
	          
	ВыполняемаяПроцедура = Справочники.ВыполняемыеПроцедуры.НайтиПоКоду(КодПроцедуры);
	Если ВыполняемаяПроцедура.Пустая() Или ВыполняемаяПроцедура.ЗапретВыполнения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПревышеноМаксКолвоАктивныхПроцессов(ВыполняемаяПроцедура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	// Заполняем параметры
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", ВыполняемаяПроцедура);
	
	СтрокаПараметров = "";
	
	Для Каждого ТекПараметр Из ВыполняемаяПроцедура.Параметры Цикл
		ПараметрыПроцедуры.Вставить(ТекПараметр.Параметр, ТекПараметр.Значение);
		СтрокаПараметров = СтрокаПараметров + Символы.ПС + ТекПараметр.Параметр + "=" + ТекПараметр.Значение + ";";
	КонецЦикла;
	
	СтрокаПараметров = Сред(СтрокаПараметров, 2) + ДополнительныеПараметрыЗапуска;	
	
	
	// Запускаем логирование
	Если ВыполняемаяПроцедура.Логирование Тогда
		Лог = ЗапускЛогирования(ВыполняемаяПроцедура, СтрокаПараметров);
	Иначе
		Лог = Неопределено;
	КонецЕсли;
	
	ПараметрыПроцедуры.Вставить("Лог", Лог);
	
	Возврат ПараметрыПроцедуры;
	
КонецФункции

Процедура ИзменитьПараметрВыполняемойПроцедуры(ВыполняемаяПроцедура, Параметр, ЗначениеПараметра) Экспорт
	
	ВыполняемаяПроцедураОбъект = ВыполняемаяПроцедура.ПолучитьОбъект();
	
	НайденнаяСтрока = ВыполняемаяПроцедураОбъект.Параметры.Найти(Параметр, "Параметр");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Значение = ЗначениеПараметра;	
		ВыполняемаяПроцедураОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПревышеноМаксКолвоАктивныхПроцессов(ВыполняемаяПроцедура)
	
	МаксКолвоАктивныхПроцессов = ВыполняемаяПроцедура.МаксКолвоАктивныхПроцессов;
	Если МаксКолвоАктивныхПроцессов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(1), 0) КАК КолвоАктивныхПроцессов
	|ИЗ
	|	РегистрСведений.ЛогированиеРаботыПроцедур КАК ЛогированиеРаботыПроцедур
	|ГДЕ
	|	ЛогированиеРаботыПроцедур.Процедура = &Процедура
	|	И ЛогированиеРаботыПроцедур.Состояние = 0
	|	И ЛогированиеРаботыПроцедур.ДатаПоследнейЗаписи >= &ДатаПоследнейЗаписи";
	
	Запрос.УстановитьПараметр("Процедура", ВыполняемаяПроцедура);
	Запрос.УстановитьПараметр("ДатаПоследнейЗаписи", ТекущаяДата()-60*60);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КолвоАктивныхПроцессов >= МаксКолвоАктивныхПроцессов;	
	
КонецФункции

// --- Логирование

Функция ЗапускЛогирования(ВыполняемаяПроцедура, СтрокаВходящихПараметров)
	
	ДатаЗапуска = ТекущаяДата();
	
	
	МЗ = РегистрыСведений.ЛогированиеРаботыПроцедур.СоздатьМенеджерЗаписи();
	МЗ.ДатаЗапуска			= ДатаЗапуска;
	МЗ.Процедура   			= ВыполняемаяПроцедура;
	МЗ.Состояние			= 0;		
	МЗ.ВходящиеПараметры	= СтрокаВходящихПараметров;
	МЗ.ДатаПоследнейЗаписи	= ДатаЗапуска;
	
	МЗ.Записать(Истина);
	
	
	Лог = Новый Структура;
	Лог.Вставить("Процедура",			ВыполняемаяПроцедура);
	Лог.Вставить("ДатаЗапуска",			ДатаЗапуска);
	Лог.Вставить("ДатаПоследнейЗаписи",	ДатаЗапуска);
	Лог.Вставить("СписокОшибок",		Новый СписокЗначений);
	
	Возврат Лог;

КонецФункции

Процедура РегистрацияОшибки(Лог, ТекстОшибки) Экспорт
	
	Если Лог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Лог.СписокОшибок.Добавить(ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписьВЛог(Лог, Текст, Состояние=0) Экспорт
	
	Если Лог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Состояние = 1 Тогда
		Если Лог.СписокОшибок.Количество() > 0 Тогда
			Текст = Текст + Символы.ПС + "Список ошибок:" + Символы.ПС + СписокЗначенийВСтроку(Лог.СписокОшибок);
			Состояние = 2; 
		КонецЕсли;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ЛогированиеРаботыПроцедур.СоздатьМенеджерЗаписи();
	МЗ.ДатаЗапуска	= Лог.ДатаЗапуска;
	МЗ.Процедура   	= Лог.Процедура;
	МЗ.Прочитать();
	
	МЗ.Состояние			= Состояние;		
	МЗ.РезультатВыполнения	= Текст;	
	МЗ.ДатаПоследнейЗаписи	= ТекущаяДата();
	
	МЗ.Записать(Истина); 	
	
	Если Состояние = 0 Тогда
		Лог.ДатаПоследнейЗаписи = МЗ.ДатаПоследнейЗаписи;
	КонецЕсли;

КонецПроцедуры

Процедура ЗафиксироватьАктивностьПроцедуры(Лог, Текст="", Интервал=0) Экспорт
	
	Если Лог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Лог.ДатаПоследнейЗаписи+Интервал < ТекущаяДата() Тогда	
		ЗаписьВЛог(Лог, Текст);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////
// ОБМЕН С GDP

Функция АннулироватьПриходныйДокументВБазеGDP(НомерДокумента) Экспорт
	
	Рез = Новый Структура("Успешно, ОписаниеОшибки");
	
	ADO = Новый COMОбъект("ADODB.Connection");
	
	СтрокаСоединения =                
	"Provider                 = SQLNCLI11;
	|Password                 = DfvXk42GbNd8wxHH;                              
	|Persist Security Info    = True;
	|User ID                  = ave_1c; 
	|Initial Catalog          = Whl;
	|Data Source              = SQLSERVERA2.fc-moron.ru\ORIOLA;
	|MultipleActiveResultSets = true;";
	
	Попытка
		ADO.Open(СтрокаСоединения);
	Исключение
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "SQLNCLI11", "SQLNCLI10");
		Попытка
			ADO.Open(СтрокаСоединения);
		Исключение
			Рез.Успешно = Ложь;
			Рез.ОписаниеОшибки = "Ошибка подключения к базе SQL: " + ОписаниеОшибки();
			Возврат Рез;
		КонецПопытки;
	КонецПопытки;
	
	ТекстКоманды = "ave.CancelInboundOrder";
	Command = Новый COMОбъект("ADODB.Command");
	Command.CommandTimeout = 900;
	Command.ActiveConnection = ADO;
	Command.CommandText = ТекстКоманды;
	Command.CommandType = 4;
	Command.Parameters.Append(Command.CreateParameter("@DOCINID", 130, 1, 32));
	Command.Parameters(0).Value = НомерДокумента;
	Command.Prepared = Истина; 

	Попытка
		RS = Command.Execute();
		Рез.Успешно = Истина;
		
	Исключение
		ОписаниеОшибки = "";
		Для Каждого ТекОшибка Из ADO.Errors Цикл
			ОписаниеОшибки = ТекОшибка.Description;
			Прервать;
		КонецЦикла;
			
		Рез.Успешно = Ложь;
		Рез.ОписаниеОшибки = ОписаниеОшибки;
		
	КонецПопытки;
	
	ADO.Close();
	
	Возврат Рез;
	
КонецФункции


////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОтправитьПисьмо(Получатели, Тема, ТекстTXT, ТекстHTML="", Вложения=Неопределено) Экспорт
	
	ИПП = Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP	= Константы.АдресСервераSMTP.Получить();
	ИПП.Таймаут	 	 		= Константы.ВремяОжидания.Получить();
	ИПП.Пароль				= Константы.ПарольПочтыСклада.Получить();
	ИПП.ПарольSMTP			= Константы.ПарольПочтыСклада.Получить();
	ИПП.Пользователь		= Константы.ИмяПользователяПочты.Получить();
	ИПП.ПользовательSMTP	= ИПП.Пользователь;
	ИПП.ПортSMTP			= Константы.ПортSMTP.Получить();
	ИПП.АутентификацияSMTP	= СпособSMTPАутентификации.Login;
	ИПП.ИспользоватьSSLSMTP	= Константы.ИспользоватьSSLSMTP.Получить();
	
	Отправитель = Константы.ПользовательПочты.Получить();
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Отправитель.Адрес = Отправитель;
	Сообщение.Тема = Тема;
	
	Для Каждого Получатель Из Получатели Цикл
		Сообщение.Получатели.Добавить(Получатель);		
	КонецЦикла; 	
	
	Если ТекстTXT <> "" Тогда 
		Сообщение.Тексты.Добавить(ТекстTXT, ТипТекстаПочтовогоСообщения.ПростойТекст);
	КонецЕсли;
	
	Если ТекстHTML <> "" Тогда 
		Сообщение.Тексты.Добавить(ТекстHTML, ТипТекстаПочтовогоСообщения.HTML);
	КонецЕсли;
	
	Если Вложения <> Неопределено Тогда
		Для Каждого Вложение Из Вложения Цикл
			Сообщение.Вложения.Добавить(Вложение);		
		КонецЦикла;
	КонецЕсли;	
	
	Почта = Новый ИнтернетПочта;
	
	Почта.Подключиться(ИПП);
	Почта.Послать(Сообщение);
	Почта.Отключиться();
	
КонецПроцедуры

Функция ПолучитьСлэш()
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "/";
	Иначе
		Возврат "\";
	КонецЕсли;

КонецФункции

Функция ПолучитьКодСчетчика(ИмяСчетчика) Экспорт
 
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Блокировка = Новый БлокировкаДанных;
		БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Счетчики");
		БлокировкаМатрицы.УстановитьЗначение("Счетчик", ИмяСчетчика);
		БлокировкаМатрицы.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать(); 
		
		МЗ = РегистрыСведений.Счетчики.СоздатьМенеджерЗаписи();
		МЗ.Счетчик = ИмяСчетчика;
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			МЗ.Значение = МЗ.Значение + 1; 
		Иначе
			МЗ.Счетчик = ИмяСчетчика;
			МЗ.Значение = 1;
		КонецЕсли;
		МЗ.Записать();
		ЗафиксироватьТранзакцию();
		Возврат МЗ.Значение;
	Исключение
		ОтменитьТранзакцию();
		Возврат -1;
	КонецПопытки;	
 
КонецФункции

Функция УбратьНечисловыеСимволы(ИсходнаяСтрока) Экспорт
	
	НовСтрока = "";
	ПравильныеСимволы = "0123456789";
	
	Для Сч = 1 по СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимв = Сред(ИсходнаяСтрока, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			НовСтрока = НовСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовСтрока;
	
КонецФункции 

Функция АдресЭлектроннойПочтыВалиден(АдресЭП) Экспорт
	
	// Проверим наличие в адресе @
	ПозицияСобаки = Найти(АдресЭП, "@");	
	Если ПозицияСобаки < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	// Проверим наличие 2 или более "." подряд
    Если Найти(АдресЭП, "..") > 0 Тогда
        Возврат Ложь;
	КонецЕсли;
	
	
	// Проверим адрес на допустимые символы
	ДопустимыеСимволы = "ABCDEFGHIJKLMNOPQRSTUVWXYZ
	|0123456789
	|._-@";
	
	Позиция = 1;
	
	Пока Позиция <= СтрДлина(АдресЭП) Цикл
		
		ТекущийСимвол = ВРег(Сред(АдресЭП, Позиция, 1));
		
		Если Найти(ДопустимыеСимволы, ТекущийСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Позиция = Позиция + 1;
		
	КонецЦикла;
	
	
	// Раскладываем адрес на части
	ЛокальнаяЧасть = Лев(АдресЭП, ПозицияСобаки - 1);
	ДоменнаяЧасть = Сред(АдресЭП, ПозицияСобаки + 1); 	
	
    ПозицияПоследнейТочки = 0;
    Для ц = 1 По СтрДлина(ДоменнаяЧасть) Цикл
        Если Сред(ДоменнаяЧасть, ц, 1) = "." Тогда
            ПозицияПоследнейТочки = ц;
        КонецЕсли;
    КонецЦикла;
	
	Если ПозицияПоследнейТочки < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоменНижний = Лев(ДоменнаяЧасть, ПозицияПоследнейТочки - 1);
	ДоменВерхний = Сред(ДоменнаяЧасть, ПозицияПоследнейТочки + 1);
	
	
	// Мин. длина домена верхнего уровня
	Если СтрДлина(ДоменВерхний) < 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	// Задвоение знака @
	ПозицияСобаки2 = Найти(ДоменнаяЧасть, "@");	
	Если ПозицияСобаки2 > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	// Проверим первые и последние символы каждой части
	БуквыЦифры = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	              
	Если Найти(БуквыЦифры, Лев(ЛокальнаяЧасть,1)) = 0 
		Или Найти(БуквыЦифры, Прав(ЛокальнаяЧасть,1)) = 0 Тогда 
        Возврат Ложь;
	КонецЕсли;
	
	Если Найти(БуквыЦифры, Лев(ДоменНижний,1)) = 0
		Или Найти(БуквыЦифры, Прав(ДоменНижний,1)) = 0 Тогда 
        Возврат Ложь;
	КонецЕсли;
	
	Если Найти(БуквыЦифры, Лев(ДоменВерхний,1)) = 0
		Или Найти(БуквыЦифры, Прав(ДоменВерхний,1)) = 0 Тогда 
        Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИмяФайлаНаФТП(ИсходноеИмяФайла, ДобавитьСлэш=Ложь) Экспорт
	
	ИмяФайла = СокрЛП(ИсходноеИмяФайла);
	
	Если ДобавитьСлэш Тогда
		Если Прав(ИмяФайла,1) <> "\" Тогда
			ИмяФайла = ИмяФайла + "\";
		КонецЕсли;		
	КонецЕсли; 	
		
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла, "\\id-vm-1\ftp_data\", "/home/usr1cv8/ftp_net/");
		ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
	Иначе
		ИмяФайла = СтрЗаменить(ИмяФайла, "/home/usr1cv8/ftp_net/", "\\id-vm-1\ftp_data\");
		ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Знач ИсходнаяСтрока) Экспорт
	
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Дата") Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	
	ПозицияПервойТочки = Найти(ИсходнаяСтрока, ".");
	ПозицияПервогоСлэша = Найти(ИсходнаяСтрока, "/");
	
	Поз = Макс(ПозицияПервойТочки, ПозицияПервогоСлэша); 
	
	Если Поз = 5 Тогда		
		Д1 = Сред(ИсходнаяСтрока,1,4); 
		Д2 = Сред(ИсходнаяСтрока,6,2);
		Д3 = Сред(ИсходнаяСтрока,9,2);
	ИначеЕсли Поз = 3 Тогда
		Д1 = Сред(ИсходнаяСтрока,7,4); 
		Д2 = Сред(ИсходнаяСтрока,4,2);
		Д3 = Сред(ИсходнаяСтрока,1,2);
	ИначеЕсли Поз = 0 И СтрДлина(ИсходнаяСтрока) = 8 Тогда
		Д1 = Сред(ИсходнаяСтрока,1,4); 
		Д2 = Сред(ИсходнаяСтрока,5,2);
		Д3 = Сред(ИсходнаяСтрока,7,2);
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
	Попытка
		ДатаДок = Дата(Д1, Д2, Д3);
		Возврат ДатаДок;
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(Знач ИсходнаяСтрока) Экспорт
	
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", ".");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, " ", "");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "%", "");
	
	Попытка
		ЧислоВозвр = Число(ИсходнаяСтрока); 
		Возврат ЧислоВозвр;
	Исключение
		Возврат 0;
	КонецПопытки;  
	
КонецФункции

Функция ПолучитьСтрокуДляCSV(МассивПолей, Разделитель = ";", ИспользоватьКавычки = Ложь) Экспорт
	
	СтрокаДляCSV = "";
	
	Для Каждого ТекПоле Из МассивПолей Цикл 		
		ТекСтрока = ПреобразоватьПолеДляCSV(ТекПоле, Разделитель, ИспользоватьКавычки);
		СтрокаДляCSV = СтрокаДляCSV + ТекСтрока + Разделитель;
		
	КонецЦикла;
	
	Возврат Сред(СтрокаДляCSV, 1, СтрДлина(СтрокаДляCSV)-1);
	
КонецФункции

Функция ПреобразоватьПолеДляCSV(Поле, Разделитель, ИспользоватьКавычки) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда		
		ПреобразованноеПоле = СокрЛП(Поле);
		
		Если ИспользоватьКавычки Тогда 			
			//Если поле содержит перенос строки или знак разделителя, оно должно заключатся в двойные ковычки
			Если Найти(ПреобразованноеПоле, Разделитель) Или Найти(ПреобразованноеПоле, Символы.ПС) Тогда				
				//Если поле уже содержит двойные ковычки, они должны повторятся дважды
				Если Найти(ПреобразованноеПоле, """") Тогда				
					ПреобразованноеПоле = СтрЗаменить(ПреобразованноеПоле, """", """""");
				КонецЕсли;
				
				ПреобразованноеПоле = """" + ПреобразованноеПоле + """";
				
			КонецЕсли;
			
		Иначе			
			ПреобразованноеПоле = СтрЗаменить(ПреобразованноеПоле, Разделитель, "");
			ПреобразованноеПоле = СтрЗаменить(ПреобразованноеПоле, Символы.ПС, "");
			
		КонецЕсли;
		
	Иначе		
		ПреобразованноеПоле = Формат(Поле, "ЧРД=,; ЧН=; ЧГ=0; ДФ=dd.MM.yyyy; БЛ=Ложь; БИ=Истина") 
		
	КонецЕсли;
	
	Возврат ПреобразованноеПоле;
	
КонецФункции

Функция СписокЗначенийВСтроку(СписокЗнч) Экспорт
	
	СтрокаРез = "";
	Для Каждого ТекЗнч Из СписокЗнч Цикл
		СтрокаРез = ?(СтрокаРез="", ТекЗнч.Значение, СтрокаРез + Символы.ПС + ТекЗнч.Значение);			
	КонецЦикла;
	
	Возврат СтрокаРез;
		
КонецФункции

Функция ПолучитьИмяЗначенияПеречисления(Ссылка) Экспорт
	
	ИмяПеречисления = Ссылка.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);
	
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
	
КонецФункции

Функция ПолучитьАдресаРассылки(КодРассылки) Экспорт
	
	АдресаРассылки = Новый Массив;
	
	Рассылка = Справочники.Рассылки.НайтиПоКоду(КодРассылки);
	Если Не Рассылка.Пустая() Тогда
		Для Каждого ТекПолучатель Из Рассылка.Получатели Цикл
			Если ТекПолучатель.Активность Тогда
				АдресаРассылки.Добавить(ТекПолучатель.Адрес);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресаРассылки;
	
КонецФункции
