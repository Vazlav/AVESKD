#Если Клиент Тогда

Функция ВосстановлениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Истина;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // ВосстановитьНастройки()

Функция СохранениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // СохранитьНастройки()

#КонецЕсли

Функция ПолучитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
	
	Если СтруктураНастройки.Свойство("Пользователь") Тогда
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийСотр);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", ВыборкаИзРезультатаЗапроса.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройку()

Функция ПолучитьНастройки(СтруктураНастройки, ПолучитьНастройкиВсехПользователей = Ложь, ПолучитьГрупповыеНастройки = Ложь, ПолучитьОбщиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	0 КАК ВидНастройки
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	1
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь <> &Пользователь
	|	И СохраненныеНастройки.Пользователь ССЫЛКА Справочник.Сотрудники
	|	И &НастройкиВсехПользователей = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	3
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|	И &ОбщиеНастройки = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНастройки,
	|	НаименованиеНастройки");
			
	Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийСотр);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НастройкиВсехПользователей", ПолучитьНастройкиВсехПользователей);
	Запрос.УстановитьПараметр("ГрупповыеНастройки", ПолучитьГрупповыеНастройки);
	Запрос.УстановитьПараметр("ОбщиеНастройки", ПолучитьОбщиеНастройки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНастройки()
	
Функция ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НаименованиеНастройки КАК НаименованиеНастройки,
	|	ВложенныйЗапрос.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|	ВложенныйЗапрос.СохранятьАвтоматически КАК СохранятьАвтоматически
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
	|		0 КАК ВидНастройки
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И СохраненныеНастройки.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически,
	|		2
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ВидНастройки");
		
	Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийСотр);
					
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("НаименованиеНастройки", ВыборкаИзРезультатаЗапроса.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Истина);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройкуИспользоватьПриОткрытии()

Функция СохранитьНастройку(СтруктураНастройки, СтруктураЗаменяемойНастройки = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") И СтруктураНастройки.ИспользоватьПриОткрытии = Истина Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.НаименованиеНастройки <> &НаименованиеНастройки");
		
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
		
		РезультаЗапроса = Запрос.Выполнить();
		
		Если РезультаЗапроса.Пустой() = Ложь Тогда
			
			МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
			
			Выборка = РезультаЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МенеджерЗаписи.Пользователь = Выборка.Пользователь;
				МенеджерЗаписи.ИмяОбъекта = Выборка.ИмяОбъекта;
				МенеджерЗаписи.НаименованиеНастройки = Выборка.НаименованиеНастройки;
				
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					
					МенеджерЗаписи.ИспользоватьПриОткрытии = Ложь;
					МенеджерЗаписи.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	Если СтруктураЗаменяемойНастройки <> Неопределено Тогда
		
		МенеджерЗаписи.Пользователь = СтруктураЗаменяемойНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураЗаменяемойНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураЗаменяемойНастройки.НаименованиеНастройки;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
			
			Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
				
				МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
				
			КонецЕсли;
			
			Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
						
				МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
						
			КонецЕсли;
					
			Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
						
				МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
						
			КонецЕсли;
				
		Иначе
				
			Возврат Ложь;
				
		КонецЕсли;
		
	Иначе
		
		МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
		МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
		
		Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
					
			МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
					
		КонецЕсли;
				
		Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
					
			МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
					
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
		
	Возврат Истина;
	
КонецФункции // СохранитьНастройку()

Функция УдалитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
	МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
	МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
	
	МенеджерЗаписи.Прочитать();
		
	Если МенеджерЗаписи.Выбран() Тогда
			
		МенеджерЗаписи.Удалить();
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УдалитьНастройку()

Процедура РасчетШириныКолонок(ТабличныйДокумент) Экспорт
    
    Перем МаксимальноеКоличествоСтрок, МаксимальнаяШиринаКолонки;
    Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
    Перем ОбластьШапки, ОбластьПодвала;
    Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
    Перем КоличествоУровнейГруппировокСтрок, Отступ;
    Перем ШириныКолонок;
    
    // Максимальное количество строк отчета, которые будут использованы для расчета ширин колонок
 
    МаксимальноеКоличествоСтрок = 50;
    // Ограничение максимальной ширины колонки
 
    МаксимальнаяШиринаКолонки = 100;
    // Массив, в который будут помещаться ширины колонок
 
    ШириныКолонок = Новый Массив;
    // Получим количество уровней группировок в отчете для учета автоматического отступа
 
    КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
    
    // Инициализируем начальные строки
 
    НачальнаяСтрока = 0;
    НачалоДанных = 0;
    
    // Найдем в результирующем документе область шапки таблицы
 
    ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
    Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
        
        // Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
         НачальнаяСтрока = ОбластьШапки.Верх;
        НачалоДанных = ОбластьШапки.Низ + 1;
    Иначе
        
        // Если область шапки таблицы не найдена, найдем область шапки строк
         ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
        Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
            
            // Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
             НачальнаяСтрока = ОбластьШапки.Верх;
            НачалоДанных = ОбластьШапки.Низ + 1;
            
        КонецЕсли;
    КонецЕсли;
    
    // Получим область подвала отчета и вычислим конечную строку расчета
 
    ОбластьПодвала = ТабличныйДокумент.Области.Найти("Подвал");
    Если ТипЗнч(ОбластьПодвала) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
        // Область подвала найдена
        КонечнаяСтрока = ОбластьПодвала.Верх - 1;
        Если КонечнаяСтрока - НачальнаяСтрока > МаксимальноеКоличествоСтрок Тогда
            КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
        КонецЕсли;
    Иначе 
            // Область подвала не найдена
        КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
    КонецЕсли;
    
    // Ограничим конечную строку
    КонечнаяСтрока = Мин(КонечнаяСтрока, ТабличныйДокумент.ВысотаТаблицы);
    // Переберем все колонки отчета
    Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
        АвтоОтступ = 0;
        // Переберем строки, которые будут использованы для расчета ширин колонок
        Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
            ШиринаКолонки = 0;
            // Получим область текущей ячейки
            ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
            Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
                // Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой
                Продолжить;
            КонецЕсли;
            Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
                // Для первой строки с данными получим значение автоотступа
                АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
            КонецЕсли;
            // Получим текст ячейки
            ТекстЯчейки = ОбластьЯчейки.Текст;
            // Для каждой строки из текста ячейки рассчитаем количество символов в строке
            Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
                ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста));
                // Если используется автоотступ, то прибавим к ширине ячейки его величину
                Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
                    ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
                КонецЕсли;
                ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);
            КонецЦикла;

            Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
                // Ограничим ширину колонки
                ШиринаКолонки = МаксимальнаяШиринаКолонки;
            КонецЕсли;
            Если ШиринаКолонки <> 0 Тогда
                // Ширина колонки рассчитана
                // Определим, сколько ячеек по ширине используется в области для текущей ячейки
                КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
                // Переберем все ячейки, расположенные в области
                 Для НомерКолонки = 0 По КоличествоКолонок Цикл
                    Если ШириныКолонок.ВГраница() > ТекущаяКолонка - 1 + НомерКолонки Тогда
                        // В массиве ширин колонок уже был элемент для текущей колонки
                        Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
                            // Значение ширины колонки еще не было установлено
                            ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
                        Иначе
                            // Значение ширины колонки уже было установлено
                             // Вычислим максимум ширины колонки
                             ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = 
                                Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
                        КонецЕсли;
                    Иначе
                        // В массиве ширин колонок еще не было элемента для данной колонки
                        // Добавим элемент в массив ширин колонок
                        ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
                    КонецЕсли;
                КонецЦикла;
            КонецЕсли;
        КонецЦикла;    // Конец цикла перебора строк
    КонецЦикла;    // Конец цикла перебора колонок
    
    // Переберем все элементы в массиве вычисленных ширин колонок
     Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
        Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
            // Ширина колонок установлена
            // Установим ширину области ячеек
            ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры 

Процедура глУстШиринуЯчейки(Таб, Строка1, Столбец1, Строка2, Столбец2, ДлТекста = 0) 
	Если ДлТекста = 0 Тогда
	    врДлина	= СтрДлина(СокрЛП(Таб.Область(Строка1, Столбец1, Строка2, Столбец2).Текст));
	Иначе
		врДлина	= ДлТекста;
	КонецЕсли;
	Таб.Область(Строка1, Столбец1, Строка2, Столбец2).ШиринаСтолбца(Макс(Таб.Область(Строка1, Столбец1, Строка2, Столбец2).ШиринаСтолбца(), врДлина));
КонецПроцедуры

