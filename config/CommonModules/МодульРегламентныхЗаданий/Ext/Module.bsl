Процедура ОтправитьСМС(ПараметрыСМС,НомерТелефона) Экспорт

	имяВыходногоФайла = ПолучитьимяВременногоФайла("xml");
	//Соединение = Новый HTTPСоединение("gate.sms-manager.ru/_getsmsd.php");
	//Соединение.Получить("?user="+ПараметрыСМС.Логин+"&password="+ПараметрыСМС.Пароль+"&sender="+ПараметрыСМС.Отправитель+"&SMSText="+ПараметрыСМС.ТекстСМС+"&GSM=" + НомерТелефона + "",имяВыходногоФайла);	
	Соединение = Новый HTTPСоединение("188.94.208.131:80/sendsms.cgi");
	Соединение.Получить("?http_username="+ПараметрыСМС.Логин+"&http_password="+ПараметрыСМС.Пароль+"&fromphone="+ПараметрыСМС.Отправитель+"&phone_list=" + НомерТелефона+"&message="+ПараметрыСМС.ТекстСМС + "",имяВыходногоФайла);	
	УдалитьФайлы(имяВыходногоФайла);
	
КонецПроцедуры

Процедура ПроверкаСостоянияРоботов() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ПроверкаСостоянияРоботов");
	
	Параметры = Новый Структура("НомерТелефона,НомерТелефона1,НомерТелефона2,НомерТелефона3,НомерТелефона4,НомерТелефона5");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА РАЗНОСТЬДАТ(АктивностьРаботыРоботов.ДатаПоследнейАктивности, &ТекДата, МИНУТА) > 15
	               |			ТОГДА ""not OK""
	               |		ИНАЧЕ ""OK""
	               |	КОНЕЦ КАК Статус,
	               |	АктивностьРаботыРоботов.Операция КАК Операция,
	               |	АктивностьРаботыРоботов.ДатаЗапуска,
	               |	АктивностьРаботыРоботов.ДатаПоследнейАктивности,
	               |	АктивностьРаботыРоботов.Компьютер,
	               |	АктивностьРаботыРоботов.Примечание КАК Примечание,
				   |	КодРобота
	               |ИЗ
	               |	РегистрСведений.АктивностьРаботыРоботов КАК АктивностьРаботыРоботов
	               |ГДЕ
	               |	РАЗНОСТЬДАТ(АктивностьРаботыРоботов.ДатаПоследнейАктивности, &ТекДата, МИНУТА) > 15
	               |	И АктивностьРаботыРоботов.СМСОтправлено = 0";
	
	Запрос.УстановитьПараметр("ТекДата",ОМ_ТСО_Привелигированный.ПолучитьВремяСервера());
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыСМС = Новый Структура;
		ПараметрыСМС.Вставить("Логин","apteka-ave");
		ПараметрыСМС.Вставить("Пароль","mEkZ8gjO");
		ПараметрыСМС.Вставить("Отправитель","Apteka-AVE");
		ПараметрыСМС.Вставить("ТекстСМС","stop: " + СокрЛП(Выборка.Операция) + " " + СокрЛП(Выборка.Компьютер) + " " + СокрЛП(Выборка.Примечание));
		ОтправитьСМС(ПараметрыСМС,Параметры.НомерТелефона);
		
		Если Параметры.Свойство("НомерТелефона1") = Истина Тогда
			Если ЗначениеЗаполнено(Параметры.НомерТелефона1) Тогда
				ОтправитьСМС(ПараметрыСМС,Параметры.НомерТелефона1);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("НомерТелефона2") = Истина Тогда
			Если ЗначениеЗаполнено(Параметры.НомерТелефона2) Тогда
				ОтправитьСМС(ПараметрыСМС,Параметры.НомерТелефона2);
			КонецЕсли;
		КонецЕсли;

		Если Параметры.Свойство("НомерТелефона3") = Истина Тогда
			Если ЗначениеЗаполнено(Параметры.НомерТелефона3) Тогда
				ОтправитьСМС(ПараметрыСМС,Параметры.НомерТелефона3);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("НомерТелефона4") = Истина Тогда
			Если ЗначениеЗаполнено(Параметры.НомерТелефона4) Тогда
				ОтправитьСМС(ПараметрыСМС,Параметры.НомерТелефона4);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("НомерТелефона5") = Истина Тогда
			Если ЗначениеЗаполнено(Параметры.НомерТелефона5) Тогда
				ОтправитьСМС(ПараметрыСМС,Параметры.НомерТелефона5);
			КонецЕсли;
		КонецЕсли;

		
		Набор = РегистрыСведений.АктивностьРаботыРоботов.СоздатьНаборЗаписей();
		Набор.Отбор.КодРобота.Установить(Выборка.КодРобота);
		
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		Иначе
			Запись = Набор[0];
			Запись.СМСОтправлено = 1;
		КонецЕсли;
		
		Набор.Записать();		
		
	КонецЦикла;
				   
КонецПроцедуры


Процедура ВыгрузкаНаМед03(РегламентноеЗадание, Параметры)
	
	ТХТ = 
	"ВЫБРАТЬ
	|	ФиксированныеЦены.КодТовара КАК КодТовара,
	|	ФиксированныеЦены.Цена
	|ПОМЕСТИТЬ втФиксЦены
	|ИЗ
	|	РегистрСведений.ФиксЦены.СрезПоследних(,ВидФиксЦены = 1) КАК ФиксированныеЦены
	//|ГДЕ
	//|	ФиксированныеЦены.СубъектРФ = &СубъектРФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаХранения.Ссылка,
	|	МестаХранения.Код
	|ПОМЕСТИТЬ втАптеки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.Ссылка В(&СписокСкладов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Ссылка КАК Товар,
	|	СУММА(Остатки.КоличествоОстаток / Партии.К) КАК КолвоОстаток
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			СкладКод В
	|				(ВЫБРАТЬ
	|					втАптеки.Код
	|				ИЗ
	|					втАптеки)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ПО Остатки.ТоварКод = АП.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО Остатки.ПартияКод = Партии.Код
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АП.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КаталогПрайсЛистов.КодПрайсЛиста,
	|	ВЫБОР
	|		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	|			ТОГДА 1
	|		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	|	КОНЕЦ КАК БазовыйКоэфф
	|ПОМЕСТИТЬ Параметры
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	|			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	|		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	|ГДЕ
	|	КонтрактыИАптеки.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Аптека В(&СписокСкладов)
	|	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	|	И КаталогПрайсЛистов.Дата > &ПрошлыйМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Связки.ТоварФирмы КАК Товар,
	|	МИНИМУМ(Прайсы.Цена * Параметры.БазовыйКоэфф) КАК Цена
	|ПОМЕСТИТЬ втПрайсы
	|ИЗ
	|	РегистрСведений.ПрайсЛисты КАК Прайсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	|		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	|			И Прайсы.Код = Связки.КодТовараПоставщика
	|ГДЕ
	|	Прайсы.Цена > 0
	|	И ВЫБОР
	|			КОГДА Прайсы.Цена > 0
	|					И Прайсы.Цена < 50
	|					И Прайсы.Количество > 200
	|				ТОГДА ИСТИНА
	|			КОГДА Прайсы.Цена >= 50
	|					И Прайсы.Цена < 5000
	|					И Прайсы.Количество > 10
	|				ТОГДА ИСТИНА
	|			КОГДА Прайсы.Цена >= 5000
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|	И (Прайсы.СрокГодности > &СрокГодности
	|			ИЛИ Прайсы.СрокГодности = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	Связки.ТоварФирмы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛистыНеавтоматизированныхПоставщиков.Товар КАК Товар,
	|	МИНИМУМ(ПрайсЛистыНеавтоматизированныхПоставщиков.Цена) КАК ИнтернетЦена
	|ПОМЕСТИТЬ втПрайсыНеавтПоставщиков
	|ИЗ
	|	РегистрСведений.ПрайсЛистыНеавтоматизированныхПоставщиков КАК ПрайсЛистыНеавтоматизированныхПоставщиков
	|ГДЕ
	|	ПрайсЛистыНеавтоматизированныхПоставщиков.Поставщик В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				КонтрактыИАптеки.Владелец.Владелец
	|			ИЗ
	|				Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|			ГДЕ
	|				КонтрактыИАптеки.Аптека В (&СписокСкладов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрайсЛистыНеавтоматизированныхПоставщиков.Товар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Ссылка,
	|	АП.Код,
	|	АП.Наименование КАК Наименование,
	|	АП.Производитель.Наименование КАК Производитель,
	|	АП.МинЦенаMedlux КАК Цена,
	|	АП.МаксЦенаMedlux КАК Цена2,
	|	АП.ЗаказНаСкладе,
	|	АП.ОтпускПоРецепту,
	|	АП.АссортиментГипермаркета,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втОстатки.КолвоОстаток, 0) / АП.ЕдиницаПоУмолчанию.К КАК ЧИСЛО(10, 0)) КАК Остаток,
	|	ЕСТЬNULL(втФиксЦены.Цена, 0) КАК ЦенаФиксированная,
	|	ЕСТЬNULL(УцененныйТоварОнлайнЗоны.ИнтернетЦена, 0) КАК ЦенаУценки,
	|	ЕСТЬNULL(втПрайсы.Цена, ЕСТЬNULL(втПрайсыНеавтПоставщиков.ИнтернетЦена, 0)) КАК ЦенаИзПрайса
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФиксЦены КАК втФиксЦены
	|		ПО АП.Код = втФиксЦены.КодТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО АП.Ссылка = втОстатки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УцененныйТоварОнлайнЗоны КАК УцененныйТоварОнлайнЗоны
	|		ПО АП.Ссылка = УцененныйТоварОнлайнЗоны.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрайсы КАК втПрайсы
	|		ПО АП.Ссылка = втПрайсы.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрайсыНеавтПоставщиков КАК втПрайсыНеавтПоставщиков
	|		ПО АП.Ссылка = втПрайсыНеавтПоставщиков.Товар
	|ГДЕ
	|	НЕ АП.ПККН
	|	И НЕ АП.ПометкаУдаления
	|	И (ЕСТЬNULL(УцененныйТоварОнлайнЗоны.ИнтернетЦена, АП.МинЦенаMedlux) > 0
	|			ИЛИ АП.МаксЦенаMedlux > 0)
	|	И ЕСТЬNULL(втПрайсы.Цена, ЕСТЬNULL(втПрайсыНеавтПоставщиков.ИнтернетЦена, ЕСТЬNULL(втОстатки.КолвоОстаток, 0))) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	СписокАптек = Новый СписокЗначений;
	СписокАптек.Добавить(Параметры.Аптека1);
	СписокАптек.Добавить(Параметры.Аптека2);
	СписокАптек.Добавить(Параметры.Аптека3);
	
	Запрос.УстановитьПараметр("СписокСкладов",	СписокАптек);
	Запрос.УстановитьПараметр("СубъектРФ",		Справочники.СубъектыРФ.НайтиПоКоду(31));
	Запрос.УстановитьПараметр("ПрошлыйМесяц",	ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("СрокГодности",	НачалоДня(ТекущаяДата()) + 24*60*60*120);
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Т = Новый ТекстовыйДокумент;
	Т.ДобавитьСтроку("code;sku;price;producer;market;price2;price3;qnt;pr;hyper"); 	
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЦенаУценки > 0 Тогда
			Цена = Выборка.ЦенаУценки;
		ИначеЕсли Выборка.Цена > 0 И Выборка.Цена < Выборка.ЦенаИзПрайса * 1.05 Тогда
			Цена = ОкруглитьЦену(Выборка.ЦенаИзПрайса * 1.05);
			ИзменитьИнтернетЦенуТовара(Выборка.Ссылка, Цена);
		Иначе
			Цена = Выборка.Цена;
		КонецЕсли; 		
		
		Т.ДобавитьСтроку(""+Формат(выборка.Код,"ЧГ=0") + ";""" + СтрЗаменить(СокрЛП(выборка.Наименование),"""","""""") + """;" 
						+ Формат(Цена,"ЧДЦ=2; ЧРД=.; ЧГ=0") + ";""" + СтрЗаменить(СокрЛП(Выборка.Производитель),"""","""""")
						+ """;""" + Выборка.ЗаказНаСкладе + """;" + Формат(Выборка.Цена2,"ЧДЦ=2; ЧРД=.; ЧГ=0") + ";" 
						+ Формат(Выборка.ЦенаФиксированная,"ЧДЦ=2; ЧРД=.; ЧГ=0") + ";" + Формат(Выборка.Остаток,"ЧДЦ=2; ЧРД=.; ЧГ=0") 
						+ ";""" + Выборка.ОтпускПоРецепту + """;""" + Выборка.АссортиментГипермаркета + """");		
		
	КонецЦикла;                                                                                                                                                                                                                                     
	
    Попытка
		Т.Записать(Параметры.ФайлВыгрузкиНаМед03,КодировкаТекста.ANSI);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось создать файл: " + Параметры.ФайлВыгрузкиНаМед03 + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки; 	
	
КонецПроцедуры

Процедура ВыгрузкаНаЙонамарт(РегламентноеЗадание, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МатрицаОкруглений.Цена1,
	               |	МатрицаОкруглений.Цена2,
	               |	МатрицаОкруглений.ПроцентОтклоненияВверх,
	               |	МатрицаОкруглений.ПроцентОтклоненияВниз,
	               |	МатрицаОкруглений.СпособОкругления,
	               |	МатрицаОкруглений.МетодОкругления,
	               |	МатрицаОкруглений.ИспользоватьДляЖВ
	               |ИЗ
	               |	Справочник.МатрицаОкруглений КАК МатрицаОкруглений
	               |ГДЕ
	               |	МатрицаОкруглений.ИспользоватьДляЖВ = ЛОЖЬ";
			 
	ТЗОкруглений = Запрос.Выполнить().Выгрузить();	
	
	ТХТ = "ВЫБРАТЬ
	      |	АП.Код,
	      |	АП.Наименование КАК Наименование,
	      |	АП.Производитель.Наименование КАК Производитель,
	      |	АП.ЖНВЛС,
	      |	ВЫБОР
	      |		КОГДА АП.ЖНВЛС = ИСТИНА
	      |			ТОГДА АП.МинЦенаMedlux
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА АП.МинЦенаMedlux < 50
	      |					ТОГДА АП.МинЦенаMedlux * 1.3
	      |				КОГДА АП.МинЦенаMedlux >= 50
	      |						И АП.МинЦенаMedlux < 250
	      |					ТОГДА АП.МинЦенаMedlux * 1.15
	      |				КОГДА АП.МинЦенаMedlux >= 250
	      |						И АП.МинЦенаMedlux < 500
	      |					ТОГДА АП.МинЦенаMedlux * 1.1
	      |				КОГДА АП.МинЦенаMedlux >= 500
	      |						И АП.МинЦенаMedlux < 1000
	      |					ТОГДА АП.МинЦенаMedlux * 1.07
	      |				КОГДА АП.МинЦенаMedlux >= 1000
	      |						И АП.МинЦенаMedlux < 2000
	      |					ТОГДА АП.МинЦенаMedlux * 1.05
	      |				КОГДА АП.МинЦенаMedlux >= 2000
	      |					ТОГДА АП.МинЦенаMedlux * 1.03
	      |			КОНЕЦ
	      |	КОНЕЦ КАК Цена,
	      |	ВЫБОР
	      |		КОГДА АП.ЖНВЛС = ИСТИНА
	      |			ТОГДА АП.МаксЦенаMedlux
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА АП.МаксЦенаMedlux < 50
	      |					ТОГДА АП.МаксЦенаMedlux * 1.3
	      |				КОГДА АП.МаксЦенаMedlux >= 50
	      |						И АП.МаксЦенаMedlux < 250
	      |					ТОГДА АП.МаксЦенаMedlux * 1.15
	      |				КОГДА АП.МаксЦенаMedlux >= 250
	      |						И АП.МаксЦенаMedlux < 500
	      |					ТОГДА АП.МаксЦенаMedlux * 1.1
	      |				КОГДА АП.МаксЦенаMedlux >= 500
	      |						И АП.МаксЦенаMedlux < 1000
	      |					ТОГДА АП.МаксЦенаMedlux * 1.07
	      |				КОГДА АП.МаксЦенаMedlux >= 1000
	      |						И АП.МаксЦенаMedlux < 2000
	      |					ТОГДА АП.МаксЦенаMedlux * 1.05
	      |				КОГДА АП.МаксЦенаMedlux >= 2000
	      |					ТОГДА АП.МаксЦенаMedlux * 1.03
	      |			КОНЕЦ
	      |	КОНЕЦ КАК Цена2,		  
	      |	АП.ЗаказНаСкладе,
	      |	ЕСТЬNULL(ВЫРАЗИТЬ(ЕСТЬNULL(ПартииОстатки.КолвоОстаток, 0) / АП.ЕдиницаПоУмолчанию.К КАК ЧИСЛО(10, 0)),0) КАК Остаток
	      |ИЗ
	      |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииЖНВЛС.Остатки(, Склад В (&СписокСкладов)) КАК ПартииОстатки
	      |		ПО (ПартииОстатки.Товар = АП.Ссылка)
	      |ГДЕ
	      |	(АП.МинЦенаMedlux > 0
	      |			ИЛИ АП.МаксЦенаMedlux > 0)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Наименование";
		  
	
	Запрос.Текст = ТХТ;
	СписокАптекНаЙонамарт = Новый СписокЗначений;
	СписокАптекНаЙонамарт.Добавить(Параметры.Аптека1);
	СписокАптекНаЙонамарт.Добавить(Параметры.Аптека2);
	СписокАптекНаЙонамарт.Добавить(Параметры.Аптека3);
	Запрос.УстановитьПараметр("СписокСкладов",СписокАптекНаЙонамарт);
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Т = Новый ТекстовыйДокумент;
	Т.ДобавитьСтроку("code;sku;price;producer;market;price2;qnt");
	
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЖНВЛС = Ложь  Тогда
			Цена = Выборка.Цена;
			Цена2= Выборка.Цена2;
			Для каждого строкаМО из ТЗОкруглений Цикл
				Если (Цена >= строкаМО.Цена1 и Цена <=строкаМО.Цена2 ) Тогда
					Цена = Округлить(Цена,строкаМО.СпособОкругления,строкаМО.МетодОкругления);
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Для каждого строкаМО из ТЗОкруглений Цикл
				Если (Цена2 >= строкаМО.Цена1 и Цена2 <=строкаМО.Цена2 ) Тогда
					Цена2 = Округлить(Цена2,строкаМО.СпособОкругления,строкаМО.МетодОкругления);
					Прервать;	
				КонецЕсли;
			КонецЦикла;	
		Иначе
			Цена = Выборка.Цена;
			Цена2= Выборка.Цена2;
		КонецЕсли;
		
		Остаток = ?(Выборка.Остаток<0,0,Выборка.Остаток);
		
		Т.ДобавитьСтроку(""+Формат(выборка.Код,"ЧГ=0") + ";""" + СтрЗаменить(СокрЛП(выборка.Наименование),"""","""""") + """;" + Формат(Цена,"ЧДЦ=2; ЧРД=.; ЧГ=0") + ";""" + СтрЗаменить(СокрЛП(Выборка.Производитель),"""","""""")+"""" + ";""" + Выборка.ЗаказНаСкладе + """;" + Формат(Цена2,"ЧДЦ=2; ЧРД=.; ЧГ=0") + ";" + Формат(Остаток,"ЧДЦ=0; ЧРД=.; ЧГ=0"));		
	КонецЦикла;                                                                                                                                                                                                                                      
	
    Попытка
		Т.Записать(Параметры.ФайлВыгрузкиНаЙонамарт,КодировкаТекста.ANSI);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось создать файл: " + Параметры.ФайлВыгрузкиНаЙонамарт + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ВыгрузкаПрайсовНаСайты() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВыгрузкаПрайсовНаСайты");
	
	Параметры = Новый Структура("ФайлВыгрузкиНаМед03,КаталогВыгрузкиНаСайт366,Аптека1,Аптека2,Аптека3,АптекаСЦенами");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаНаМед03(РегламентноеЗадание, Параметры);
	ВыгрузкаНаСайт366(РегламентноеЗадание, Параметры);
	//ВыгрузкаНаЙонамарт(РегламентноеЗадание, Параметры); // ТСО 28.08.2014
	
	
КонецПроцедуры

Процедура СправочнаяСлужба() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("СправочнаяСлужба");
	
	//Параметры = Новый Структура("Инфолек, ИнфолекФТП, ИнфолекФТПЛогин, ИнфолекФТППароль, ИнфолекКаталогФТП, ИнфолекПодкатегория, Аптекарск, АптекарскФТП, АптекарскФТПЛогин, АптекарскФТППароль, АптекарскEMailУведомления, АптекарскФирма,
	//|Горздрав, ГорздравФТП, ГорздравФТПЛогин, ГорздравФТППароль, ГорздравКаталогФТП,КаталогДляСайта366");
	
	//Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//ВыгрузкаВИнфолек(РегламентноеЗадание, Параметры);
	//ВыгрузкаВАптекарск(РегламентноеЗадание, Параметры);
	//ВыгрузкаВГорздрав(РегламентноеЗадание, Параметры);
	//ВыгрузкаНаСайт366(РегламентноеЗадание, Параметры);
	
	Выборка = Справочники.СправочныеСлужбы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Активна Тогда
			Если Выборка.Ссылка = Справочники.СправочныеСлужбы.Горздрав				Тогда	ВыгрузитьВГорздрав(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.ГорздравПитер	Тогда	ВыгрузитьВГорздравПитер(РегламентноеЗадание, Выборка.Ссылка);				
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Инфолек			Тогда 	ВыгрузитьВИнфолек(РегламентноеЗадание, Выборка.Ссылка);				
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Аптекарск		Тогда	ВыгрузитьВАптекарск(РегламентноеЗадание, Выборка.Ссылка);				
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.АптекаМос		Тогда	ВыгрузитьВАптекаМос(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.ЛекПрайс		Тогда 	ВыгрузитьВЛекПрайс(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.ЛекМос			Тогда  	ВыгрузитьВЛекМос(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Справмедика		Тогда	ВыгрузитьВСправМедика(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Вебаптека		Тогда   ВыгрузитьВВебаптека(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Росфарм			Тогда   ВыгрузитьВРосФарм(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Информед		Тогда	ВыгрузитьВИнформед(РегламентноеЗадание, Выборка.Ссылка);
			ИначеЕсли Выборка.Ссылка = Справочники.СправочныеСлужбы.Справка003su	Тогда	ВыгрузитьВСлужбу003Спб(РегламентноеЗадание, Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	
КонецПроцедуры


Функция ПолучитьИнтернетАптеку(Аптека) 
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	МестаХранения.Ссылка КАК онлайнзона
						|ИЗ
	                    |	Справочник.МестаХранения КАК МестаХранения
	                    |ГДЕ
	                    |	МестаХранения.ОффлайнАпетка = &Аптека");
						
	Запрос.УстановитьПараметр("Аптека",Аптека);
	
	Рез=ЗАпрос.Выполнить().Выгрузить();
	
	Если Рез.Количество()=0 Тогда
		#Если Клиент Тогда
			Сообщить("У аптеки "+Аптека+" нет онлайн-зоны!");
		#КонецЕсли
		Возврат неопределено;
	Иначе
		Возврат Рез.Получить(0).Онлайнзона;
	КонецЕсли;	
Конецфункции

Процедура ВыгрузитьВИнфолек(РегламентноеЗадание, Справка) Экспорт
	
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Необходимо переделать выгрузку под новые регистры");
	Возврат;
		
	КаталогОтправки = КаталогВременныхФайлов();
	ИмяФайла        = "assort";
	Расширение      = ".DBF";
		
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("Drug_ID","N",9,0);
	ДБФ.поля.Добавить("QTTY","N",11,2);
	ДБФ.поля.Добавить("Price","N",11,2);
	ДБФ.поля.Добавить("ORG_ID","N",4,0);
	ДБФ.поля.Добавить("SROK","D",8);
	Попытка
		ДБФ.СоздатьФайл(КаталогОтправки + ИмяФайла + Расширение); //Создаем новый
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ИНфоЛек: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ИнтернетАптека = ПолучитьИнтернетАптеку(Константы.ЦентральнаяИнтернетАптека.Получить());
	Если ИнтернетАптека = Неопределено Тогда
		ИнтернетАптека = Справочники.МестаХранения.ПустаяСсылка();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыАптек.Код КАК Код,
	|	КодыАптек.Аптека КАК Аптека
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &Инфолек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Аптека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар КАК Товар
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.Товар КАК _Товар,
	|	РегПартии.Склад КАК _Аптека,
	|	РегПартии.Партия КАК _Партия,
	|	ВЫРАЗИТЬ(РегПартии.СуммаРознСНДСОстаток / РегПартии.КолвоОстаток КАК ЧИСЛО(12, 2)) КАК Цена,
	|	РегПартии.КолвоОстаток КАК Остаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ПартииЖНВЛС.Остатки(
	|			,
	|			Товар.Разбивается = ЛОЖЬ
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ТЗАптек.Аптека
	|					ИЗ
	|						ТЗАптек КАК ТЗАптек
	|					ГДЕ
	|						ТЗАптек.Аптека <> &ИнтернетАптека)) КАК РегПартии
	|ГДЕ
	|	РегПартии.КолвоОстаток >= 1
	|	И РегПартии.СуммаРознСНДСОстаток > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегПартии.Товар КАК _Товар,
	|	РегПартии.Склад,
	|	РегПартии.Партия,
	|	ВЫРАЗИТЬ(РегПартии.СуммаРознСНДСОстаток / РегПартии.КолвоОстаток * РегПартии.Партия.К КАК ЧИСЛО(12, 2)),
	|	ВЫРАЗИТЬ(РегПартии.КолвоОстаток / РегПартии.Партия.К КАК ЧИСЛО(12, 2))
	|ИЗ
	|	РегистрНакопления.ПартииЖНВЛС.Остатки(
	|			,
	|			Товар.Разбивается = ИСТИНА
	|				И Склад В
	|					(ВЫБРАТЬ
	|						ТЗАптек.Аптека
	|					ИЗ
	|						ТЗАптек КАК ТЗАптек
	|					ГДЕ
	|						ТЗАптек.Аптека <> &ИнтернетАптека)) КАК РегПартии
	|ГДЕ
	|	РегПартии.КолвоОстаток >= 1
	|	И РегПартии.СуммаРознСНДСОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АрбитражТовар.Ссылка.Склад,
	|	АрбитражТовар.Товар,
	|	АрбитражТовар.Партия,
	|	СУММА(АрбитражТовар.Колво) КАК Колво
	|ПОМЕСТИТЬ Арбитраж
	|ИЗ
	|	Документ.Арбитраж.Товар КАК АрбитражТовар
	|ГДЕ
	|	НЕ АрбитражТовар.Ссылка.Проведен
	|	И АрбитражТовар.Ссылка.Склад В
	|			(ВЫБРАТЬ
	|				вт.Аптека
	|			ИЗ
	|				ТЗАптек КАК вт)
	|
	|СГРУППИРОВАТЬ ПО
	|	АрбитражТовар.Ссылка.Склад,
	|	АрбитражТовар.Товар,
	|	АрбитражТовар.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТовар.Ссылка.Склад,
	|	СписаниеТовар.Товар,
	|	СписаниеТовар.Партия,
	|	СУММА(СписаниеТовар.КоличествоФакт) КАК Колво
	|ПОМЕСТИТЬ Списания
	|ИЗ
	|	Документ.Списание.Товар КАК СписаниеТовар
	|ГДЕ
	|	НЕ СписаниеТовар.Ссылка.Проведен
	|	И СписаниеТовар.Ссылка.Склад В
	|			(ВЫБРАТЬ
	|				вт.Аптека
	|			ИЗ
	|				ТЗАптек КАК вт)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеТовар.Ссылка.Склад,
	|	СписаниеТовар.Товар,
	|	СписаниеТовар.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяБлокировкаТоваровДляСС.Склад,
	|	ВременнаяБлокировкаТоваровДляСС.Товар,
	|	ИСТИНА КАК Блокировка
	|ПОМЕСТИТЬ Блокировки
	|ИЗ
	|	РегистрСведений.ВременнаяБлокировкаТоваровДляСС КАК ВременнаяБлокировкаТоваровДляСС
	|ГДЕ
	|	ВременнаяБлокировкаТоваровДляСС.НачалоБлокировки < &Сегодня
	|	И ВременнаяБлокировкаТоваровДляСС.КонецБлокировки > &Сегодня
	|	И ВременнаяБлокировкаТоваровДляСС.Склад В
	|			(ВЫБРАТЬ
	|				вт.Аптека
	|			ИЗ
	|				ТЗАптек КАК вт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяБлокировкаТоваровДляСС.Склад,
	|	ВременнаяБлокировкаТоваровДляСС.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииЖНВЛСОбороты.Товар,
	|	ПартииЖНВЛСОбороты.Склад,
	|	ПартииЖНВЛСОбороты.Партия,
	|	СУММА(ПартииЖНВЛСОбороты.КолвоПриход) КАК КолвоПриход
	|ПОМЕСТИТЬ ПриходыЗаДень
	|ИЗ
	|	РегистрНакопления.ПартииЖНВЛС.Обороты(&Вчера, , Регистратор, ) КАК ПартииЖНВЛСОбороты
	|ГДЕ
	|	ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТовара
	|	И НЕ ПартииЖНВЛСОбороты.Товар.Разбивается
	|	И ПартииЖНВЛСОбороты.КолвоПриход > 0
	|	И ПартииЖНВЛСОбороты.Склад В
	|			(ВЫБРАТЬ
	|				вт.Аптека
	|			ИЗ
	|				ТЗАптек КАК вт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииЖНВЛСОбороты.Товар,
	|	ПартииЖНВЛСОбороты.Склад,
	|	ПартииЖНВЛСОбороты.Партия
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПартииЖНВЛСОбороты.Товар,
	|	ПартииЖНВЛСОбороты.Склад,
	|	ПартииЖНВЛСОбороты.Партия,
	|	СУММА(ПартииЖНВЛСОбороты.КолвоПриход / ПартииЖНВЛСОбороты.Партия.К)
	|ИЗ
	|	РегистрНакопления.ПартииЖНВЛС.Обороты(&Вчера, , Регистратор, ) КАК ПартииЖНВЛСОбороты
	|ГДЕ
	|	ПартииЖНВЛСОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТовара
	|	И ПартииЖНВЛСОбороты.Товар.Разбивается
	|	И ПартииЖНВЛСОбороты.КолвоРасход > 0
	|	И ПартииЖНВЛСОбороты.Склад В
	|			(ВЫБРАТЬ
	|				вт.Аптека
	|			ИЗ
	|				ТЗАптек КАК вт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииЖНВЛСОбороты.Товар,
	|	ПартииЖНВЛСОбороты.Склад,
	|	ПартииЖНВЛСОбороты.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТоваров.КодЕГК КАК КодЕГК,
	|	Остатки._Аптека.Код КАК КодСклада,
	|	Остатки.Цена КАК Цена,
	|	СУММА(Остатки.Остаток) КАК Остаток,
	|	СУММА(ЕСТЬNULL(Арбитраж.Колво, 0)) КАК КолвоАрбитраж,
	|	СУММА(ЕСТЬNULL(Списания.Колво, 0)) КАК КолвоСписание,
	|	ЕСТЬNULL(Блокировки.Блокировка, ЛОЖЬ) КАК Блокировка,
	|	СУММА(ЕСТЬNULL(ПриходыЗаДень.КолвоПриход, 0)) КАК ПриходЗаДень,
	|	ВЫБОР
	|		КОГДА Остатки._Товар.Подкатегория = &Подкатегория
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Госпитальный,
	|	0 КАК ИнтернетАптека
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Арбитраж КАК Арбитраж
	|		ПО Остатки._Аптека = Арбитраж.Склад
	|			И Остатки._Товар = Арбитраж.Товар
	|			И Остатки._Партия = Арбитраж.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Блокировки КАК Блокировки
	|		ПО Остатки._Аптека = Блокировки.Склад
	|			И Остатки._Товар = Блокировки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриходыЗаДень КАК ПриходыЗаДень
	|		ПО Остатки._Товар = ПриходыЗаДень.Товар
	|			И Остатки._Аптека = ПриходыЗаДень.Склад
	|			И Остатки._Партия = ПриходыЗаДень.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО Остатки._Товар = ТЗТоваров.Товар
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки._Аптека.Код,
	|	Остатки.Цена,
	|	ВЫБОР
	|		КОГДА Остатки._Товар.Подкатегория = &Подкатегория
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТЗТоваров.КодЕГК
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиАрбитраж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Блокировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПриходыЗаДень"; 
	
	Запрос.УстановитьПараметр("Подкатегория",Справочники.Подкатегории.НайтиПоКоду(17));
	Запрос.УстановитьПараметр("Инфолек", Справка); 
	Запрос.УстановитьПараметр("ИнтернетАптека",ИнтернетАптека);
	Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
	Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Номер = 0;
	ГСЧ = Новый ГенераторСлучайныхЧисел(0);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Остаток = Неопределено или Выборка.Остаток = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		//ТСО 28.08.2014
		Если Выборка.Блокировка Тогда
			Продолжить;
		КонецЕсли;
		
		Остаток = Выборка.Остаток - Выборка.КолвоАрбитраж - Выборка.КолвоСписание - Выборка.ПриходЗаДень;
		
		Если Остаток <=0 Тогда
			Продолжить;
		КонецЕсли;
		//*ТСО
		
		СЧ = ГСЧ.СлучайноеЧисло(0,10)/10; 		
		
		ДБФ.Добавить();	
		ДБФ.Drug_ID = Выборка.КодЕГК ;
		Если Выборка.ИнтернетАптека = 0 Тогда
			Если Выборка.Госпитальный = 1 Тогда
				Если Остаток >=1 и Остаток <=3 Тогда
					ДБФ.QTTY = Окр(Остаток*10,2);		
				ИначеЕсли Остаток >3 и Остаток <=5 Тогда
					ДБФ.QTTY = Окр(Остаток*5,2);		
				ИначеЕсли Остаток >5 и Остаток <=10 Тогда
					ДБФ.QTTY = Окр(Остаток*2,2);						
				Иначе
					ДБФ.QTTY = Остаток;
				КонецЕсли;
			Иначе
				ДБФ.QTTY = Остаток;
			КонецЕсли;
		Иначе
			Если Выборка.Цена > 0 и Выборка.Цена <=50 Тогда
				ДБФ.QTTY = Цел(100+(СЧ*20));
			ИначеЕсли Выборка.Цена > 50 и Выборка.Цена <=100 Тогда
				ДБФ.QTTY = Цел(50+(СЧ*10));
			ИначеЕсли Выборка.Цена > 100 и Выборка.Цена <=200 Тогда
				ДБФ.QTTY = Цел(20+(СЧ*5));				 
			ИначеЕсли Выборка.Цена > 200 и Выборка.Цена <=400 Тогда
				ДБФ.QTTY = Цел(10+(СЧ*5));				 
			ИначеЕсли Выборка.Цена > 400 и Выборка.Цена <=600 Тогда
				ДБФ.QTTY = Цел(5+(СЧ*3));
			ИначеЕсли Выборка.Цена > 600 Тогда
				ДБФ.QTTY = Цел(3+(СЧ*2));
			КонецЕсли;			
		КонецЕсли;
		ДБФ.Price = Окр(Выборка.Цена,2);
		ДБФ.ORG_ID = Выборка.КодСклада;
        ДБФ.Записать();
	КонецЦикла;
	
	Если ДБФ.Открыта() = Истина Тогда
		ДБФ.ЗакрытьФайл();
	КонецЕсли;
	
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку(КаталогОтправки + ИмяФайла + Расширение, КаталогОтправки + ИмяФайла + ".ZIP");
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ИНфоЛек: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Выгружаем файл на фтп
	Попытка
		ФТП = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт) , Справка.ФТПЛогин, Справка.ФТППароль, , Истина,,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
		ФТП.УстановитьТекущийКаталог(Справка.ФТПКаталог);
		ФТП.Записать(КаталогОтправки + ИмяФайла + ".ZIP", ИмяФайла + ".ZIP");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка ИНфоЛек: данные выгружены" );
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ИНфоЛек:  " + ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры


Процедура ВыгрузитьВГорздрав(РегламентноеЗадание, Справка) Экспорт
	
		КаталогОтправки = КаталогВременныхФайлов();
		
		Попытка
			УдалитьФайлы(КаталогОтправки+"euroweb.csv");
			УдалитьФайлы(КаталогОтправки+"euroweb.zip");
		Исключение
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось удалить старые файлы euroweb.csv и euroweb.zip! " + ОписаниеОшибки());
			//Возврат;
		КонецПопытки;		
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
		//----------------------------------------------------------------------------
		ТХТ = "ВЫБРАТЬ
		      |	МестаХранения.Код КАК Код,
		      |	МестаХранения.Наименование,
		      |	МестаХранения.Метро.Наименование как Метро,
		      |	МестаХранения.ТелефонДляСправки как телефон,
		      |	МестаХранения.РежимРаботы.Наименование как РежимРаботы
		      |ИЗ
		      |	Справочник.МестаХранения КАК МестаХранения
		      |ГДЕ
		      |	МестаХранения.ПометкаУдаления = ЛОЖЬ
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Код";		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Рез = запрос.Выполнить();
		Выборка = Рез.Выбрать();
		
		Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"depot.csv", "windows-1251");

		
		Пока Выборка.Следующий() Цикл
			Файл_CSV.ЗаписатьСтроку
				(
					Формат(Выборка.Код	,"ЧЦ=12; ЧГ=0")+"@"+
					СокрЛП(Выборка.Наименование)+"@"+
					СокрЛП(Выборка.Метро)+ "@" + 
					СокрЛП(Выборка.Телефон)+"@"+
					СокрЛП(Выборка.РежимРаботы)
				);
		КонецЦикла;
		Файл_CSV.Закрыть();
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
		//----------------------------------------------------------------------------
		ТХТ = "ВЫБРАТЬ
		      |	АП.Код КАК Код,
		      |	АП.Наименование КАК Товар,
		      |	АП.ГруппаФТГ.Наименование КАК ГруппаФТГ,
		      |	АП.ЛекФорма.Наименование КАК ЛекФорма,
		      |	АП.Дозировка.Наименование КАК Дозировка,
		      |	АП.ОтпускПоРецепту,
		      |	АП.СтраницаРаспродаж,
		      |	ЕСТЬNULL(ФиксЦены.Цена, 0) КАК ФиксЦена
		      |ИЗ
		      |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксЦены.СрезПоследних(,ВидФиксЦены = 1) КАК ФиксЦены
		      |		ПО (ФиксЦены.КодТовара = АП.Код)
		      //|			И (ФиксЦены.СубъектРФ = &СубъектРФ)
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Товар";		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("СубъектРФ",Справочники.СубъектыРФ.НайтиПоНаименованию("Москва",Истина));

		Рез = Запрос.Выполнить();

		Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"goods.csv", "windows-1251");
		
		Выборка = Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
	
			Файл_CSV.ЗаписатьСтроку
				(
					Формат(Выборка.Код	,"ЧЦ=12; ЧГ=0")+"@"+
					СокрЛП(СтрЗаменить(Выборка.Товар,"@",""))+"@"+
					"@" + 
					"@" + 
					СокрЛП(Выборка.ЛекФорма)+"@"+
					СокрЛП(Выборка.Дозировка)+"@"+
					СокрЛП(Выборка.ГруппаФТГ)+"@"+
					Формат(Выборка.ОтпускПоРецепту,"БЛ=0; БИ=1") +"@"+
					Формат(Выборка.СтраницаРаспродаж,"БЛ=0; БИ=1") +"@"+
					Формат(Выборка.ФиксЦена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")

				);
	
		КонецЦикла;
        Файл_CSV.Закрыть();
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА ОСТАТКОВ
		//----------------------------------------------------------------------------		

		Запрос =  Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	КодыАптек.Аптека,
		|	КодыАптек.Аптека.Код КАК СкладКод
		|ПОМЕСТИТЬ ТЗАптек
		|ИЗ
		|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
		|ГДЕ
		|	КодыАптек.Ссылка = &Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АП.Код КАК КодТовара
		|ПОМЕСТИТЬ ТоварыПККН
		|ИЗ
		|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		|ГДЕ
		|	АП.ПККН = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегПартии.ТоварКод КАК КодТовара,
		|	РегПартии.СкладКод КАК КодАптеки,
		|	МАКСИМУМ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0))) КАК Цена,
		|	СУММА(РегПартии.КоличествоОстаток / Партии.К) КАК Остаток
		|ИЗ
		|	РегистрНакопления.УЗ_Партии.Остатки(
		|			,
		|			НЕ ТоварКод В
		|						(ВЫБРАТЬ
		|							ТоварыПККН.КодТовара
		|						ИЗ
		|							ТоварыПККН)
		|				И СкладКод В
		|					(ВЫБРАТЬ
		|						вт.СкладКод
		|					ИЗ
		|						ТЗАптек КАК вт)) КАК РегПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		|		ПО (Партии.Код = РегПартии.ПартияКод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
		|			И (РЦ.АптекаКод = РегПартии.СкладКод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
		|			И (РЦП.АптекаКод = РегПартии.СкладКод)
		|ГДЕ
		|	РегПартии.КоличествоОстаток >= 1
		|	И РегПартии.СуммаЗакупБезНДСОстаток > 0 и  НЕ Партии.ТипПартии = ""I""
		|
		|СГРУППИРОВАТЬ ПО
		|	РегПартии.ТоварКод,
		|	РегПартии.СкладКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТЗАптек";
		
		Запрос.УстановитьПараметр("Владелец", Справка);
		Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
		//Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);		
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
		    ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустой набор записей.");
			Возврат;
		КонецЕсли;
		
		Выборка = Рез.Выбрать();
		
		Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"euroweb.csv", "windows-1251");
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Цена <= 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Остаток = Окр(Выборка.Остаток,0);
			
			Если Остаток <=0 Тогда
				Продолжить;
			КонецЕсли;			
			
			
			Файл_CSV.ЗаписатьСтроку
				(
					Формат(Выборка.КодТовара	,"ЧЦ=12; ЧГ=0")+"@"+
					Формат(Выборка.КодАптеки	,"ЧЦ=12; ЧГ=0")+"@"+					
					Формат(Выборка.Цена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")+"@"+
					Формат(Остаток,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")
					);
		КонецЦикла;
		Файл_CSV.Закрыть();
		
		// Архивация
		//Состояние("Архивация...");
		//Архив = Новый ЗаписьZipФайла;
		//Архив.Открыть (пл_Каталог+"euroweb.zip");
		//Архив.Добавить(пл_Каталог+"euroweb.csv");
		//Архив.Добавить(пл_Каталог+"goods.csv");
		//Архив.Добавить(пл_Каталог+"depot.csv");
		//Архив.Записать();
		//Сообщить("Создан файл: euroweb.zip");
		
	  //  // Выкладываем на FTP
	  Если Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FTP Тогда
		  Попытка
			  FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт) , Справка.ФТПЛогин, Справка.ФТППароль,, Истина,,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
			  FTP.Записать(КаталогОтправки+"euroweb.csv", "euroweb.csv");
			  FTP.Записать(КаталогОтправки+"goods.csv", "goods.csv");
			  FTP.Записать(КаталогОтправки+"depot.csv", "depot.csv");
			  FTP = Неопределено;
			  ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Гоздрав: данные выгружены" );
		  Исключение
			  ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Горздрав: " + ОписаниеОшибки());
			  Возврат;
		  КонецПопытки;
	  КонецЕсли;
	  
	
КонецПроцедуры

Процедура ВыгрузитьВГорздравПитер(РегламентноеЗадание, Справка) Экспорт
	
	КаталогОтправки = КаталогВременныхФайлов();
	
	Попытка
		УдалитьФайлы(КаталогОтправки+"euroweb.csv");
		УдалитьФайлы(КаталогОтправки+"euroweb.zip");
	Исключение
		//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось удалить старые файлы euroweb.csv и euroweb.zip! " + ОписаниеОшибки());
		//Возврат;
	КонецПопытки;		
	
	//----------------------------------------------------------------------------
	//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
	//----------------------------------------------------------------------------
	ТХТ = "ВЫБРАТЬ
	|	Аптеки.Аптека.Код КАК Код,
	|	Аптеки.Аптека.Наименование КАК Наименование,
	|	Аптеки.Аптека.Метро.Наименование КАК Метро,
	|	Аптеки.Аптека.ТелефонДляСправки КАК телефон,
	|	Аптеки.Аптека.РежимРаботы.Наименование КАК РежимРаботы
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК Аптеки
	|ГДЕ
	|	Аптеки.Ссылка = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аптеки.Аптека.Код";		
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Владелец",Справка);
	Рез = запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"depot.csv", "windows-1251");
	
	
	Пока Выборка.Следующий() Цикл
		Файл_CSV.ЗаписатьСтроку
		(
		Формат(Выборка.Код	,"ЧЦ=12; ЧГ=0")+"@"+
		СокрЛП(Выборка.Наименование)+"@"+
		СокрЛП(Выборка.Метро)+ "@" + 
		СокрЛП(Выборка.Телефон)+"@"+
		СокрЛП(Выборка.РежимРаботы)
		);
	КонецЦикла;
	Файл_CSV.Закрыть();
	
	//----------------------------------------------------------------------------
	//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
	//----------------------------------------------------------------------------
	ТХТ = "ВЫБРАТЬ
	|	АП.Код КАК Код,
	|	АП.Наименование КАК Товар,
	|	АП.ГруппаФТГ.Наименование КАК ГруппаФТГ,
	|	АП.ЛекФорма.Наименование КАК ЛекФорма,
	|	АП.Дозировка.Наименование КАК Дозировка,
	|	АП.ОтпускПоРецепту,
	|	АП.СтраницаРаспродаж,
	|	ЕСТЬNULL(ФиксЦены.Цена, 0) КАК ФиксЦена
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксЦены.СрезПоследних(, ВидФиксЦены = 1) КАК ФиксЦены
	|		ПО (ФиксЦены.КодТовара = АП.Код)
	//|			И (ФиксЦены.СубъектРФ = &СубъектРФ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар";		
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("СубъектРФ",Справочники.СубъектыРФ.НайтиПоНаименованию("Москва",Истина));
	
	Рез = Запрос.Выполнить();
	
	Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"goods.csv", "windows-1251");
	
	Выборка = Рез.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Префикс = Лев(Выборка.Товар,4);
		Если Префикс = "РПО " Тогда
			Наименование = СтрЗаменить(СтрЗаменить(Выборка.ТОвар,"РПО ",""),"@","");
		Иначе
			Наименование  = СтрЗаменить(Выборка.Товар,"@","");
		КонецЕсли;
		Файл_CSV.ЗаписатьСтроку
		(
		Формат(Выборка.Код	,"ЧЦ=12; ЧГ=0")+"@"+
		СокрЛП(Наименование)+"@"+
		"@" + 
		"@" + 
		СокрЛП(Выборка.ЛекФорма)+"@"+
		СокрЛП(Выборка.Дозировка)+"@"+
		СокрЛП(Выборка.ГруппаФТГ)+"@"+
		Формат(Выборка.ОтпускПоРецепту,"БЛ=0; БИ=1") +"@"+
		Формат(Выборка.СтраницаРаспродаж,"БЛ=0; БИ=1") +"@"+
		Формат(Выборка.ФиксЦена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")
		
		);
		
	КонецЦикла;
	Файл_CSV.Закрыть();
	
	//----------------------------------------------------------------------------
	//				СОЗДАНИЕ ФАЙЛА ОСТАТКОВ
	//----------------------------------------------------------------------------		
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	КодыАптек.Аптека,
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара
	|ПОМЕСТИТЬ ТоварыПККН
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПККН = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.ТоварКод КАК КодТовара,
	|	РегПартии.СкладКод КАК КодАптеки,
	|	Партии.СрокГодности КАК СрокГодности,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			НЕ ТоварКод В
	|						(ВЫБРАТЬ
	|							ТоварыПККН.КодТовара
	|						ИЗ
	|							ТоварыПККН)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						вт.СкладКод
	|					ИЗ
	|						ТЗАптек КАК вт)) КАК РегПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0  и  НЕ Партии.ТипПартии = ""I""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек";
	
	Запрос.УстановитьПараметр("Владелец", Справка);
	Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
	//Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);		
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустой набор записей.");
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	
	Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"euroweb.csv", "windows-1251");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Цена <= 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Остаток = Окр(Выборка.Остаток,0);
		
		Если Остаток <=0 Тогда
			Продолжить;
		КонецЕсли;			
		
		
		Файл_CSV.ЗаписатьСтроку
		(
		Формат(Выборка.КодТовара	,"ЧЦ=12; ЧГ=0")+"@"+
		Формат(Выборка.КодАптеки	,"ЧЦ=12; ЧГ=0")+"@"+					
		Формат(Выборка.Цена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")+"@"+
		Формат(Остаток,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0") +"@"+
		Формат(Выборка.СрокГодности,"ДФ=dd.MM.yyyy")
		);
	КонецЦикла;
	Файл_CSV.Закрыть();
	
	// Архивация
	//Состояние("Архивация...");
	//Архив = Новый ЗаписьZipФайла;
	//Архив.Открыть (пл_Каталог+"euroweb.zip");
	//Архив.Добавить(пл_Каталог+"euroweb.csv");
	//Архив.Добавить(пл_Каталог+"goods.csv");
	//Архив.Добавить(пл_Каталог+"depot.csv");
	//Архив.Записать();
	//Сообщить("Создан файл: euroweb.zip");
	
	//  // Выкладываем на FTP
	Если Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FTP Тогда
		Попытка
			FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт) , Справка.ФТПЛогин, Справка.ФТППароль,, Истина);
			FTP.Записать(КаталогОтправки+"euroweb.csv", "euroweb.csv");
			FTP.Записать(КаталогОтправки+"goods.csv", "goods.csv");
			FTP.Записать(КаталогОтправки+"depot.csv", "depot.csv");
			FTP = Неопределено;
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Гоздрав (Питер): данные выгружены" );
		Исключение
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Горздрав (Питер): " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FILE Тогда
		КаталогВыгрузки = Справка.КаталогВыгрузки + ?(Прав(Справка.КаталогВыгрузки, 1) = "\", "", "\");  
		КаталогВыгрузки = ОМ_ТСО.ПолучитьИмяФайлаНаФТП(КаталогВыгрузки);
		
		ПереместитьФайл(КаталогОтправки + "euroweb.csv",	КаталогВыгрузки + "euroweb.csv");
		ПереместитьФайл(КаталогОтправки + "goods.csv",		КаталогВыгрузки + "goods.csv");
		ПереместитьФайл(КаталогОтправки + "depot.csv",		КаталогВыгрузки + "depot.csv");
		
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Гоздрав (Питер): данные выгружены" );
		
	КонецЕсли; 	
	
КонецПроцедуры


Процедура ВыгрузитьВАптекаМос(РегламентноеЗадание, Справка ) Экспорт
	
	ТХТ = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар.Код КАК ТоварКод
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураЕГК КАК НЕГК
	|		ПО (НЕГК.Код = СвязкиСЕГК.КодЕГК)
	|			И (НЕГК.ИнвалидныйКод = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыАптек.Аптека КАК Аптека,
	|	КодыАптек.Код КАК Код,
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &АптекаМос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара
	|ПОМЕСТИТЬ ТоварыПККН
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПККН = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВиртуальныеОстаткиТовары.Товар.Код КАК КодТовара,
	|	ВиртуальныеОстаткиАптеки.Аптека.Код КАК КодАптеки,
	|	ВиртуальныеОстаткиТовары.Количество КАК Количество,
	|	ВиртуальныеОстаткиТовары.Цена КАК Цена
	|ПОМЕСТИТЬ ВиртОст
	|ИЗ
	|	Документ.ВиртуальныеОстатки.Аптеки КАК ВиртуальныеОстаткиАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВиртуальныеОстатки.Товары КАК ВиртуальныеОстаткиТовары
	|		ПО ВиртуальныеОстаткиАптеки.Ссылка = ВиртуальныеОстаткиТовары.Ссылка
	|ГДЕ
	|	ВиртуальныеОстаткиАптеки.Ссылка.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выборка.СкладКод КАК СкладКод,
	|	СУММА(Выборка.Количество) КАК Количество,
	|	Выборка.КодПартии КАК КодПартии
	|ПОМЕСТИТЬ Резерв
	|ИЗ
	|	(ВЫБРАТЬ
	|		МОР.Ссылка.Склад.Код КАК СкладКод,
	|		МОР.Количество * МОР.Коэфф КАК Количество,
	|		МОР.КодПартии КАК КодПартии
	|	ИЗ
	|		Документ.УЗ_МелкооптоваяРеализация.Товар КАК МОР
	|	ГДЕ
	|		МОР.Ссылка.Дата >= ДОБАВИТЬКДАТЕ(&Сегодня, МЕСЯЦ, -2)
	|		И МОР.Ссылка.Проведен = ЛОЖЬ
	|		И МОР.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И НЕ МОР.Ссылка.СтатусДокАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусДокАптеки.Аннулирован)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СП.Ссылка.Склад.Код,
	|		СП.Количество * СП.Коэфф,
	|		СП.КодПартии
	|	ИЗ
	|		Документ.УЗ_Списание.Товар КАК СП
	|	ГДЕ
	|		СП.Ссылка.Дата >= ДОБАВИТЬКДАТЕ(&Сегодня, МЕСЯЦ, -2)
	|		И СП.Ссылка.Проведен = ЛОЖЬ
	|		И СП.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И НЕ СП.Ссылка.СтатусДокАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусДокАптеки.Аннулирован)
	|		И СП.Ссылка.ВидОперацииСписания = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписания.ОсновнойТовар)) КАК Выборка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выборка.СкладКод,
	|	Выборка.КодПартии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Выборка.СкладКод,
	|	Выборка.КодПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТоваров.КодЕГК КАК КодЕГК,
	|	ТЗАптек.Код КАК КодАптеки,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	(РегПартии.КоличествоОстаток - ЕСТЬNULL(Резерв.Количество, 0)) / Партии.К КАК Остаток
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			НЕ ТоварКод В
	|						(ВЫБРАТЬ
	|							ТоварыПККН.КодТовара
	|						ИЗ
	|							ТоварыПККН)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						вт.СкладКод    
	|					ИЗ
	|						ТЗАптек КАК вт)) КАК РегПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО РегПартии.ТоварКод = ТЗТоваров.ТоварКод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
	|		ПО (ТЗАптек.СкладКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Резерв КАК Резерв
	|		ПО РегПартии.ПартияКод = Резерв.КодПартии
	|			И (Резерв.СкладКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток - ЕСТЬNULL(Резерв.Количество, 0) >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
	|	И НЕ Партии.ТипПартии = ""I""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗТоваров.КодЕГК,
	|	ТЗАптек.Код,
	|	ВиртОст.Цена,
	|	ВиртОст.Количество
	|ИЗ
	|	ВиртОст КАК ВиртОст
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УЗ_ПартииОстатки.ТоварКод КАК ТоварКод,
	|			УЗ_ПартииОстатки.СкладКод КАК СкладКод,
	|			УЗ_ПартииОстатки.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.УЗ_Партии.Остатки(
	|					,
	|					ТоварКод В
	|						(ВЫБРАТЬ
	|							Товары.КодТовара
	|						ИЗ
	|							Документ.ВиртуальныеОстатки.Товары КАК Товары
	|						ГДЕ
	|							Товары.Ссылка.Проведен = ИСТИНА)) КАК УЗ_ПартииОстатки) КАК Ост
	|		ПО ВиртОст.КодТовара = Ост.ТоварКод
	|			И ВиртОст.КодАптеки = Ост.СкладКод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО ВиртОст.КодТовара = ТЗТоваров.ТоварКод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
	|		ПО (ТЗАптек.СкладКод = ВиртОст.КодАптеки)
	|ГДЕ
	|	Ост.ТоварКод ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВиртОст
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров"; // ТСО изм 28.08.2014			  
	

	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("АптекаМос",Справка);
	//Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.НайтиПоКоду(279));
	Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
	//Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);
	
	//Запрос.УстановитьПараметр("ДатаОстатков",ДатаОстатка);
	//Запрос.УстановитьПараметр("пар_СписокАптек", Поле_СписокАптек);
	
	//Сообщить(ТХТ);
	//Возврат;
	
	//Запрос.УстановитьПараметр("ДатаОстатков",ДатаОстатка);
	//Запрос.УстановитьПараметр("ТипСклада",Перечисления.ТипыМХ.Розн);
	//Запрос.УстановитьПараметр("пар_СписокАптек", Поле_СписокАптек);
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("Drug_ID","N",6,0);
	ДБФ.поля.Добавить("QTTY","N",11,2);
	ДБФ.поля.Добавить("Price","N",11,2);
	ДБФ.поля.Добавить("ORG_ID","N",5,0);
	//ДБФ.поля.Добавить("DEPT_NUM","N",3,0);

	//Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmm")
	Файл = КаталогВременныхФайлов() + "ExpAVE.DBF";
    ИмяФайла = СокрЛП(Файл);
	ДБФ.СоздатьФайл(ИмяФайла);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(0);

	
	
	//КолСтрок = Выборка.Количество();
	//Номер = 0;
	Пока Выборка.Следующий() Цикл
		
		//СЧ = ГСЧ.СлучайноеЧисло(0,10)/10;
		//Номер = Номер + 1;
		//Если Номер%200 = 0 Тогда
		//	Состояние("" + Номер + " из " + КолСтрок);
		//КонецЕсли;
		Если Выборка.Остаток = Неопределено или Выборка.Остаток = NULL Тогда
			Продолжить;
		КонецЕсли;  
		
		ДБФ.Добавить();	
		ДБФ.Drug_ID = Выборка.КодЕГК ;
		//Если Выборка.ИнтернетАптека = 0 Тогда
			ДБФ.QTTY = Окр(Выборка.Остаток,3);
		//Иначе
		//	Если Выборка.Цена > 0 и Выборка.Цена <=50 Тогда
		//	     ДБФ.QTTY = Цел(100+(СЧ*20));
		//	ИначеЕсли Выборка.Цена > 50 и Выборка.Цена <=100 Тогда
		//	     ДБФ.QTTY = Цел(50+(СЧ*10));
		//	ИначеЕсли Выборка.Цена > 100 и Выборка.Цена <=200 Тогда
		//	     ДБФ.QTTY = Цел(20+(СЧ*5));				 
		//	ИначеЕсли Выборка.Цена > 200 и Выборка.Цена <=400 Тогда
		//	     ДБФ.QTTY = Цел(10+(СЧ*5));				 
		//	ИначеЕсли Выборка.Цена > 400 и Выборка.Цена <=600 Тогда
		//	     ДБФ.QTTY = Цел(5+(СЧ*3));
		//	ИначеЕсли Выборка.Цена > 600 Тогда
		//	     ДБФ.QTTY = Цел(3+(СЧ*2));
		//	КонецЕсли;
		//КонецЕсли;
		ДБФ.Price = Окр(Выборка.Цена,2);
		ДБФ.ORG_ID = Выборка.КодАптеки;
        ДБФ.Записать();
	КонецЦикла;
	
	ДБФ.ЗакрытьФайл();
	
	//ФайлО = Новый Файл(СокрЛП(Файл));
	НовоеИмяФайла = СтрЗаменить(ИмяФайла,"ExpAVE","assort");
	Попытка
		//КопироватьФайл(ИмяФайла,"D:\Работа\assort.dbf");
		ПереместитьФайл(ИмяФайла,НовоеИмяФайла);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка АптекаМос: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//Попытка
	//	Инфо = Новый СистемнаяИнформация;
	//	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
	//		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
	//		ФайлКопия = "/home/usr1cv8/ftp_net/Post/informed/Price/assort.DBF";
	//	Иначе
	//		ФайлКопия = "\\id-vm-1\ftp_data\Post\informed\Price\assort.DBF";
	//	КонецЕсли;
	//	
	//	
	//	КопироватьФайл(НовоеИмяФайла,ФайлКопия);
	//Исключение
	//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка АптекаМос: Не удалось скопировать файл в " + ФайлКопия + Символы.ПС + ОписаниеОшибки());
	//КонецПопытки;
	
	
	
	//Сервер = "ftp.aptekamos.ru";
	//Порт = 21;
	//Логин = "c0550800";
	//Пароль = "f0550800";

	Попытка
		FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль , , Истина,400,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " соединение с FTP не установлено!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка АптекаМос: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	ТекФайл = Новый Файл(НовоеИмяФайла);
	//Загоняем файлик на FTP
	Попытка
		FTP.Записать(ТекФайл.ПолноеИмя,Справка.ФТПКаталог + ТекФайл.Имя);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка АптекаМос: данные выгружены" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка АптекаМос: " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ТекФайл.ПолноеИмя);
	Исключение
	КонецПопытки;
	//Закрываем соединение с FTP
	FTP = Неопределено;
	
	
КонецПроцедуры

Процедура ВыгрузитьВЛекПрайс(РегламентноеЗадание, Справка ) Экспорт
	
		  
	ТХТ = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар.Код КАК ТоварКод
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураЕГК КАК НЕГК
	|		ПО (НЕГК.Код = СвязкиСЕГК.КодЕГК)
	|			И (НЕГК.ИнвалидныйКод = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыАптек.Аптека,
	|	КодыАптек.Код,
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &ЛекПрайс
	|	И НЕ КодыАптек.Аптека В
	|				(ВЫБРАТЬ
	|					Блокировки.Аптека
	|				ИЗ
	|					РегистрСведений.БлокировкиАптекДляБронирования КАК Блокировки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара
	|ПОМЕСТИТЬ ТоварыПККН
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПККН = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.ТоварКод,
	|	РегПартии.СкладКод,
	|	РегПартии.ПартияКод,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			НЕ ТоварКод В
	|						(ВЫБРАТЬ
	|							ТоварыПККН.КодТовара
	|						ИЗ
	|							ТоварыПККН)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						вт.СкладКод
	|					ИЗ
	|						ТЗАптек КАК вт)) КАК РегПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО  РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0 и  НЕ Партии.ТипПартии = ""I""
	|;
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТоваров.КодЕГК КАК КодЕГК,
	|	ТЗАптек.Код КАК КодАптеки,
	|	Остатки.Цена КАК Цена,
	|	СУММА(Остатки.Остаток) КАК Остаток
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО Остатки.ТоварКод = ТЗТоваров.ТоварКод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
	|		ПО (ТЗАптек.СкладКод = Остатки.СкладКод)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗАптек.Код,
	|	Остатки.Цена,
	|	ТЗТоваров.КодЕГК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Остатки
	|;
	|"; // ТСО изм 28.08.2014			  

	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("ЛекПрайс",Справка);
	//Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.НайтиПоКоду(279));
	Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
	//Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);

	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("Drug_ID","N",6,0);
	ДБФ.поля.Добавить("QTTY","N",11,2);
	ДБФ.поля.Добавить("Price","N",11,2);
	ДБФ.поля.Добавить("ORG_ID","N",5,0);

	Файл = КаталогВременныхФайлов() + "ExpLpr.DBF";
    ИмяФайла = СокрЛП(Файл);
	ДБФ.СоздатьФайл(ИмяФайла);
	
	//ГСЧ = Новый ГенераторСлучайныхЧисел(0);

	
	
	КолСтрок = Выборка.Количество();
	Номер = 0;
	Пока ВЫборка.Следующий() Цикл
		
		//ОбработкаПрерыванияПользователя();
		//СЧ = ГСЧ.СлучайноеЧисло(0,10)/10;
		//Номер = Номер + 1;
		//Если Номер%200 = 0 Тогда
		//	Состояние("" + Номер + " из " + КолСтрок);
		//КонецЕсли;
		Если Выборка.Остаток = Неопределено или Выборка.Остаток = NULL Тогда
			Продолжить;
		КонецЕсли;
		
	
	
		ДБФ.Добавить();	
		ДБФ.Drug_ID = Выборка.КодЕГК;
		//Если стр.ИнтернетАптека = 0 Тогда
			ДБФ.QTTY = Окр(Выборка.Остаток,3);
		//Иначе
		//	Если стр.Цена > 0 и стр.Цена <=50 Тогда
		//		 ДБФ.QTTY = Цел(100+(СЧ*20));
		//	ИначеЕсли стр.Цена > 50 и стр.Цена <=100 Тогда
		//		 ДБФ.QTTY = Цел(50+(СЧ*10));
		//	ИначеЕсли стр.Цена > 100 и стр.Цена <=200 Тогда
		//		 ДБФ.QTTY = Цел(20+(СЧ*5));				 
		//	ИначеЕсли стр.Цена > 200 и стр.Цена <=400 Тогда
		//		 ДБФ.QTTY = Цел(10+(СЧ*5));				 
		//	ИначеЕсли стр.Цена > 400 и стр.Цена <=600 Тогда
		//		 ДБФ.QTTY = Цел(5+(СЧ*3));
		//	ИначеЕсли стр.Цена > 600 Тогда
		//		 ДБФ.QTTY = Цел(3+(СЧ*2));
		//	КонецЕсли;
		//КонецЕсли;
		ДБФ.Price = Окр(Выборка.Цена,2);
		ДБФ.ORG_ID = Выборка.КодАптеки;
        ДБФ.Записать();
	КонецЦикла;
	
	ДБФ.ЗакрытьФайл();
	
	//ФайлО = Новый Файл(СокрЛП(Файл));
	НовоеИмяФайла = СтрЗаменить(ИмяФайла,"ExpLpr","assort_ave");
	Попытка
		//КопироватьФайл(ИмяФайла,"D:\Работа\!СопоставлениеТовара\assort.dbf");
		ПереместитьФайл(ИмяФайла,НовоеИмяФайла);
	Исключение
		Возврат;
	КонецПопытки;
	

	//Сервер = "lekprice.ru";
	//Порт = 21;
	//Логин = "adm00117";
	//Пароль = "VKPVA9X6";

	Попытка
		FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль , , Истина,400,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " соединение с FTP не установлено!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ЛекПрайс: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	ТекФайл = Новый Файл(НовоеИмяФайла	);
	//Загоняем файлик на FTP
	Попытка
		FTP.Записать(ТекФайл.ПолноеИмя,Справка.ФТПКаталог + ТекФайл.Имя);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка ЛекПрайс: данные выгружены" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ЛекПрайс: " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ТекФайл.ПолноеИмя);
	Исключение
	КонецПопытки;
	//Закрываем соединение с FTP
	FTP = Неопределено;

	
	
	
	
КонецПроцедуры


Процедура ВыгрузитьВЛекМос(РегламентноеЗадание, Справка) Экспорт
	
	Файл = КаталогВременныхФайлов() + "ExpAVE.DBF";
	Подкатегория = Справочники.Подкатегории.НайтиПоКоду(17);
	ТХТ = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар.Код КАК ТоварКод,
	|	ВЫБОР
	|		КОГДА СвязкиСЕГК.Товар.Подкатегория = &Подкатегория
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Госпитальный
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураЕГК КАК НЕГК
	|		ПО (НЕГК.Код = СвязкиСЕГК.КодЕГК)
	|			И (НЕГК.ИнвалидныйКод = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар.Код,
	|	ВЫБОР
	|		КОГДА СвязкиСЕГК.Товар.Подкатегория = &Подкатегория
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыАптек.Аптека,
	|	КодыАптек.Код,
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &ЛекМос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара
	|ПОМЕСТИТЬ ТоварыПККН
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПККН = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.ТоварКод,
	|	РегПартии.СкладКод,
	|	РегПартии.ПартияКод,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			НЕ ТоварКод В
	|						(ВЫБРАТЬ
	|							ТоварыПККН.КодТовара
	|						ИЗ
	|							ТоварыПККН)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						вт.СкладКод
	|					ИЗ
	|						ТЗАптек КАК вт)) КАК РегПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0  и  НЕ Партии.ТипПартии = ""I""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТоваров.КодЕГК КАК КодТовара,
	|	ТЗТоваров.Госпитальный,
	|	ТЗАптек.СкладКод КАК КодАптеки,
	|	Остатки.Цена КАК Цена,
	|	СУММА(Остатки.Остаток) КАК Остаток
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО Остатки.ТоварКод = ТЗТоваров.ТоварКод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
	|		ПО (ТЗАптек.СкладКод = Остатки.СкладКод)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗАптек.СкладКод,
	|	Остатки.Цена,
	|	ТЗТоваров.КодЕГК,
	|	ТЗТоваров.Госпитальный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Остатки"; // ТСО изм 28.08.2014			  

	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("ЛекМос",Справка);
	Запрос.УстановитьПараметр("ДатаОстатков",КонецГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Подкатегория",Подкатегория);
	//Запрос.УстановитьПараметр("ПустаяПартия",Справочники.Партии.ПустаяСсылка());
	//Запрос.УстановитьПараметр("Аптека",Справочники.МестаХранения.НайтиПоКоду(279));
	Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
	//Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	//ДБФ = Новый XBASE;
	//ДБФ.поля.Добавить("CodeGood","N",10,0);
	////ДБФ.поля.Добавить("NameGood","S",120);
	//ДБФ.поля.Добавить("Producer","S",100);
	//ДБФ.поля.Добавить("Qnt","N",12,3);
	//ДБФ.поля.Добавить("PriceSale","N",12,2);
	//ДБФ.поля.Добавить("CodePodr","N",4,0);
	ИмяФайла = СокрЛП(Файл);
	//ДБФ.СоздатьФайл(ИмяФайла);
	ИмяФайлаТовара = КаталогВременныхФайлов() + "AVE_" + Формат(ТекущаяДата(),"ДФ=ddMMyyyyHHmm") + ".CSV";
	
	Т = Новый ЗаписьТекста(ИмяФайлаТовара, КодировкаТекста.ANSI);
	Т.ЗаписатьСтроку("CodeGood;Producer;Qnt;PriceSale;CodePodr");	
	
	КолСтрок = Выборка.Количество();
	Номер = 0;
	//ГСЧ = Новый ГенераторСлучайныхЧисел(0);
	
	Пока Выборка.Следующий() Цикл
		
		//СЧ = ГСЧ.СлучайноеЧисло(0,10)/10;
		Номер = Номер + 1;
		#Если Клиент Тогда
			Если Номер%1000 = 0 Тогда
				Состояние("" + Номер + " из " + КолСтрок);
			КонецЕсли;
		#КонецЕсли
		Если Выборка.Остаток = Неопределено или Выборка.Остаток = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		
		Остаток = Выборка.Остаток ;
		
		Если Остаток <=0 Тогда
			Продолжить;
		КонецЕсли;
		//*ТСО
			
		КодТовара = Формат(Выборка.КодТовара,"ЧГ=0") ;
		//ДБФ.NameGood = стр.Наименование;
		Производитель = "";
		//Если Выборка.ИнтернетАптека = 0 Тогда
		//Если Выборка.Госпитальный = 0 Тогда
		//	Количество = Окр(Остаток,3);
		//Иначе
		//	Если Остаток >=1 и Остаток <=3 Тогда
		//		Количество = Окр(Остаток*10,3);		
		//	ИначеЕсли Остаток >3 и Остаток <=5 Тогда
		//		Количество = Окр(Остаток*5,3);		
		//	ИначеЕсли Остаток >5 и Остаток <=10 Тогда
		//		Количество = Окр(Остаток*2,3);						
		//	Иначе
		//		Количество = Окр(Остаток,3);
		//	КонецЕсли;
		//КонецЕсли;
		//Иначе
		//	Если Выборка.Цена > 0 и Выборка.Цена <=50 Тогда
		//	     Количество = Цел(100+(СЧ*20));
		//	ИначеЕсли Выборка.Цена > 50 и Выборка.Цена <=100 Тогда
		//	     Количество = Цел(50+(СЧ*10));
		//	ИначеЕсли Выборка.Цена > 100 и Выборка.Цена <=200 Тогда
		//	     Количество = Цел(20+(СЧ*5));				 
		//	ИначеЕсли Выборка.Цена > 200 и Выборка.Цена <=400 Тогда
		//	     Количество = Цел(10+(СЧ*5));				 
		//	ИначеЕсли Выборка.Цена > 400 и Выборка.Цена <=600 Тогда
		//	     Количество = Цел(5+(СЧ*3));
		//	ИначеЕсли Выборка.Цена > 600 Тогда
		//	     Количество = Цел(3+(СЧ*2));
		//	КонецЕсли;
		//КонецЕсли;
		
		Количество = Окр(Остаток,0);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Количество = Формат(Количество,"ЧДЦ=0");
		
		КодСклада = Формат(Выборка.КодАптеки,"ЧГ=0");
		Цена = Формат(Окр(Выборка.Цена,2),"ЧДЦ=2; ЧРД=.; ЧГ=0");
		Т.ЗаписатьСтроку( "" + КодТовара + ";;" 
		//+ ""  + Производитель + ";"  
		+ ""  + Количество + ";" 
		+ ""  + Цена + ";" 
		+ ""  + КодСклада +"");

	КонецЦикла;
    Т.Закрыть();


	ФайлОбъект = Новый Файл(ИмяФайлаТовара);
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ИмяФайлаТовара,ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
		
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не запакован!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ЛекМос: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	//Сервер = "213.167.57.122";
	//Порт = 21;
	//Логин = "AVE";
	//Пароль = "I3urO2H4";
	//Каталог = "/AVE/";

	//ВыгрузитьОдинФайл_На_FTP(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP","/AVE/",Сервер,Порт,Логин,Пароль);
	
	Попытка
		FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль , , Истина,400,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " соединение с FTP не установлено!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ЛекМос: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	//Загоняем файлик на FTP
	Попытка
		FTP.Записать(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP",Справка.ФТПКаталог + ФайлОбъект.ИмяБезРасширения + ".ZIP");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка ЛекМос: данные выгружены" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка ЛекМос: " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ИмяФайлаТовара);
		УдалитьФайлы(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
	Исключение
	КонецПопытки;
	//Закрываем соединение с FTP
	FTP = Неопределено;

	
	//выгрузка номенклатуры
	ТХТ = "ВЫБРАТЬ
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Код как Код,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование как Наименование
	      |ИЗ
	      |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН";	
		  
	

	Запрос.Текст = ТХТ;
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Т = Новый ТекстовыйДокумент;
	Т.ДобавитьСтроку("Код;Наименование");
	Для каждого стр из ТЗ Цикл
		Т.ДобавитьСтроку(Формат(стр.Код,"ЧГ=0") + ";" + СокрЛП(стр.Наименование));
	КонецЦикла;
	
	ИмяФайлаТовара = КаталогВременныхФайлов() + "goods_ave.CSV";
	Т.Записать(ИмяФайлаТовара,КодировкаТекста.ANSI);
	ФайлОбъект = Новый Файл(ИмяФайлаТовара);
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ИмяФайлаТовара,ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
		
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не запакован!",СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецПопытки;
	
	
	Попытка
		FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль , , Истина,400,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " соединение с FTP не установлено!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "ЛекМос. " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	//Загоняем файлик на FTP
	Попытка
		FTP.Записать(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP",Справка.ФТПКаталог + ФайлОбъект.ИмяБезРасширения + ".ZIP");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка ЛекМос: Выгружен АП" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "ЛекМос. " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ИмяФайлаТовара);
		УдалитьФайлы(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
	Исключение
	КонецПопытки;
	//Закрываем соединение с FTP
	FTP = Неопределено;


	
КонецПроцедуры //ВыгрузитьВЛекМос


Процедура ВыгрузитьВВебаптека(РегламентноеЗадание, Справка) Экспорт
	
	КаталогОтправки = КаталогВременныхФайлов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара,
	|	АП.Наименование КАК НаименованиеТовара
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПометкаУдаления = ЛОЖЬ
	|	И АП.ПККН = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АП.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.ТоварКод КАК ТоварКод,
	|	РегПартии.СкладКод КАК СкладКод,
	|	РегПартии.ПартияКод КАК ПартияКод,
	|	РегПартии.КоличествоОстаток КАК Остаток,
	|	Партии.К КАК Коэфф,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			СкладКод В
	|				(ВЫБРАТЬ
	|					вт.СкладКод
	|				ИЗ
	|					ТЗАптек КАК вт)) КАК РегПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
	|	И НЕ Партии.ТипПартии = ""I""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегПартии.ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.СкладКод КАК КодАптеки,
	|	Остатки.ТоварКод КАК КодТовара,
	|	ТЗТоваров.НаименованиеТовара КАК НаименованиеТовара,
	|	МАКСИМУМ(Остатки.Цена) КАК Цена,
	|	СУММА(ВЫРАЗИТЬ(Остатки.Остаток / Остатки.Коэфф КАК ЧИСЛО(12, 2))) КАК Остаток
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО Остатки.ТоварКод = ТЗТоваров.КодТовара
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.СкладКод,
	|	Остатки.ТоварКод,
	|	ТЗТоваров.НаименованиеТовара
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫРАЗИТЬ(Остатки.Остаток / Остатки.Коэфф КАК ЧИСЛО(12, 2))) >= 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАптеки,
	|	КодТовара
	|ИТОГИ ПО
	|	КодАптеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Остатки";           
	
	Запрос.УстановитьПараметр("Владелец", Справка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, 
		Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустой набор записей.");
		Возврат;
		
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	
	ВыборкаКодАптеки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКодАптеки.Следующий() Цикл
		ИмяФайла = КаталогОтправки + Формат(ВыборкаКодАптеки.КодАптеки, "ЧГ=0") + ".csv";
		Текст = Новый ЗаписьТекста(ИмяФайла, "windows-1251");
		
		Выборка = ВыборкаКодАптеки.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивПолей = Новый Массив;
			МассивПолей.Добавить(Выборка.КодТовара);
			МассивПолей.Добавить(Выборка.НаименованиеТовара);
			МассивПолей.Добавить(Выборка.Цена);
			МассивПолей.Добавить(Выборка.Остаток);
			
			ТекСтрока = ОМ_ТСО.ПолучитьСтрокуДляCSV(МассивПолей, Символы.Таб);			
			Текст.ЗаписатьСтроку(ТекСтрока);
			 			
		КонецЦикла;
		
		Текст.Закрыть();
		           
		МассивФайлов.Добавить(Новый Файл(ИмяФайла));

	КонецЦикла;
	        	
	 	
	// Выкладываем на FTP
	Если Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FTP Тогда
		Попытка
			FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт) , Справка.ФТПЛогин, Справка.ФТППароль,, Истина,,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
			FTP.Удалить("prices", "*.csv");
			FTP.УстановитьТекущийКаталог("prices");
			
			Для Каждого Файл Из МассивФайлов Цикл
				FTP.Записать(Файл.ПолноеИмя, Файл.Имя);				
			КонецЦикла;		
			
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Вебаптека: данные выгружены" );
			  			
		Исключение
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Вебаптека: " + ОписаниеОшибки());
			
		КонецПопытки;
		
		FTP = Неопределено;
		
	ИначеЕсли Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FILE Тогда
		КаталогВыгрузки = Справка.КаталогВыгрузки + ?(Прав(Справка.КаталогВыгрузки, 1) = "\", "", "\");  
		КаталогВыгрузки = ОМ_ТСО.ПолучитьИмяФайлаНаФТП(КаталогВыгрузки);
		
		Для Каждого Файл Из МассивФайлов Цикл
			КопироватьФайл(Файл.ПолноеИмя, КаталогВыгрузки + Файл.Имя);
		КонецЦикла;
		
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Вебаптека: данные выгружены" );
		
	КонецЕсли;
	
	
	// Удаляем временные файлы
	Попытка
		Для Каждого Файл Из МассивФайлов Цикл
			УдалитьФайлы(Файл.ПолноеИмя);				
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьВРосФарм(РегламентноеЗадание, Справка) Экспорт
	
	Если Справка.ВыгружатьДанныеПоВсемАптекам  Тогда
		ТХТ = 		
	"ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар.Код КАК ТоварКод
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураЕГК КАК НЕГК
	|		ПО (НЕГК.Код = СвязкиСЕГК.КодЕГК)
	|			И (НЕГК.ИнвалидныйКод = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	ВЫРАЗИТЬ(РегПартии.КоличествоОстаток / Партии.К КАК ЧИСЛО(12, 2)) КАК Остаток,
	|	РегПартии.СкладКод КАК КодАптеки,
	|	ТЗТоваров.КодЕГК КАК КодЕГК
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(, ) КАК РегПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО РегПартии.ТоварКод = ТЗТоваров.ТоварКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ПО РегПартии.ТоварКод = АП.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК Аптеки
	|		ПО РегПартии.СкладКод = Аптеки.Код
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
	|	И АП.ПККН = ЛОЖЬ
	|	И Аптеки.ПометкаУдаления = ЛОЖЬ  и  НЕ Партии.ТипПартии = ""I""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров"; 
		
	Иначе
		ТХТ = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар.Код КАК ТоварКод
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураЕГК КАК НЕГК
	|		ПО (НЕГК.Код = СвязкиСЕГК.КодЕГК)
	|			И (НЕГК.ИнвалидныйКод = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыАптек.Аптека КАК Аптека,
	|	КодыАптек.Код КАК Код,
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &Справка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара
	|ПОМЕСТИТЬ ТоварыПККН
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПККН = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток,
	|	ТЗАптек.Код КАК КодАптеки,
	|	ТЗТоваров.КодЕГК КАК КодЕГК
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			НЕ ТоварКод В
	|						(ВЫБРАТЬ
	|							ТоварыПККН.КодТовара
	|						ИЗ
	|							ТоварыПККН)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						вт.СкладКод
	|					ИЗ
	|						ТЗАптек КАК вт)) КАК РегПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО РегПартии.ТоварКод = ТЗТоваров.ТоварКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
	|		ПО РегПартии.СкладКод = ТЗАптек.СкладКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ПО РегПартии.ТоварКод = АП.Код
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
	|	И НЕ Партии.ТипПартии = ""I""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПККН"; 
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Справка",Справка);

	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	

	ИмяФайлаТовара = КаталогВременныхФайлов() + "AVE.CSV";
	
	Т = Новый ЗаписьТекста(ИмяФайлаТовара, КодировкаТекста.ANSI);
	Т.ЗаписатьСтроку("Id_egk;PriceSale;Qnt;CodePodr");	
	

	Пока Выборка.Следующий() Цикл
		
		Т.ЗаписатьСтроку( "" + Формат(Выборка.КодЕГК,"ЧГ=0") + ";"
		+ ""  + Формат(Выборка.Цена,"ЧДЦ=2; ЧРД=.; ЧГ=0") + ";"
		//+ ""  + СтрЗаменить(Выборка._Производитель,";","") + ";" 
		+ ""  + Формат(Выборка.Остаток,"ЧРД=.; ЧГ=0") + ";" 
		+ ""  + Формат(Выборка.КодАптеки,"ЧГ=0") +"");


	КонецЦикла;
    Т.Закрыть();


	ФайлОбъект = Новый Файл(ИмяФайлаТовара);
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ИмяФайлаТовара,ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
		
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не запакован!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка росфарм: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	
	Попытка
		FTP = Новый FTPСоединение(Справка.ФТПСервер,Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль , , Истина,400,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " соединение с FTP не установлено!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка росфарм: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	//Загоняем файлик на FTP
	Попытка
		FTP.Записать(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP",Справка.ФТПКаталог + ФайлОбъект.ИмяБезРасширения + ".ZIP");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка росфарм: данные выгружены" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка росфарм: " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ИмяФайлаТовара);
		УдалитьФайлы(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
	Исключение
	КонецПопытки;
	//Закрываем соединение с FTP
	FTP = Неопределено;

	
КонецПроцедуры //ВыгрузитьВросфарм


Процедура ВыгрузитьВИнформед(РегламентноеЗадание, Справка ) Экспорт
	
	ТХТ = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СвязкиСЕГК.КодЕГК) КАК КодЕГК,
	|	СвязкиСЕГК.Товар.Код КАК ТоварКод
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.СвязкиСЕГК КАК СвязкиСЕГК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураЕГК КАК НЕГК
	|		ПО (НЕГК.Код = СвязкиСЕГК.КодЕГК)
	|			И (НЕГК.ИнвалидныйКод = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязкиСЕГК.Товар.Код
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток,
	|	РегПартии.СкладКод КАК КодАптеки,
	|	АП.КодЕГК КАК КодЕГК
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(, ) КАК РегПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК АП
	|		ПО РегПартии.ТоварКод = АП.ТоварКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК Аптеки
	|		ПО РегПартии.СкладКод = Аптеки.Код
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0  и  НЕ Партии.ТипПартии = ""I""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров"; // ТСО изм 28.08.2014			  
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
		  
	
	ДБФ = Новый XBASE;
	ДБФ.поля.Добавить("Drug_ID","N",6,0);
	ДБФ.поля.Добавить("QTTY","N",11,2);
	ДБФ.поля.Добавить("Price","N",11,2);
	ДБФ.поля.Добавить("ORG_ID","N",4,0);
	
	Файл = КаталогВременныхФайлов() + "ExpAVE.DBF";
    ИмяФайла = СокрЛП(Файл);
	ДБФ.СоздатьФайл(ИмяФайла);
	
	Пока Выборка.Следующий() Цикл
			
		ДБФ.Добавить();	
		ДБФ.Drug_ID = Выборка.КодЕГК ;
		ДБФ.QTTY = Окр(Выборка.Остаток,3);
		ДБФ.Price = Окр(Выборка.Цена,2);
		ДБФ.ORG_ID = Выборка.КодАптеки;
        ДБФ.Записать();
	КонецЦикла;
	
	ДБФ.ЗакрытьФайл();
	
	НовоеИмяФайла = СтрЗаменить(ИмяФайла,"ExpAVE","assort");
	Попытка
		ПереместитьФайл(ИмяФайла,НовоеИмяФайла);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Информед: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	

	Попытка
		FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль , , Истина,400,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " соединение с FTP не установлено!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Информед: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	ТекФайл = Новый Файл(НовоеИмяФайла);
	//Загоняем файлик на FTP
	Попытка
		FTP.Записать(ТекФайл.ПолноеИмя,Справка.ФТПКаталог + ТекФайл.Имя);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Информед: данные выгружены" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " файл не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Информед: " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ТекФайл.ПолноеИмя);
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестаХранения.Код,
				   |	МестаХранения.НомерАптеки,
	               |	МестаХранения.Наименование,
	               |	МестаХранения.ДатаПерехода,
	               |	МестаХранения.ДатаЗакрытия,
	               |	МестаХранения.Метро.Наименование как Метро,
	               |	МестаХранения.МестоРасположения.Наименование как МестоРасположения,
	               |	МестаХранения.ТелефонДляСправки,
	               |	МестаХранения.РежимРаботы.Наименование как РежимРаботы,
	               |	МестаХранения.Бренд.Наименование как Бренд,
	               |	МестаХранения.СубъектРФ.Наименование  как СубъектРФ
	               |ИЗ
	               |	Справочник.МестаХранения КАК МестаХранения
	               |ГДЕ
	               |	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)";
	
	Рез = Запрос.Выполнить();                                    
	Выборка = Рез.Выбрать();
	ИмяВремФайла = ПолучитьИмяВременногоФайла("CSV");
	Файл_CSV = Новый ЗаписьТекста(ИмяВремФайла, "windows-1251");
	Файл_CSV.ЗаписатьСтроку("Код;НомерАптеки;Наименование;ДатаОткрытия;ДатаЗакрытия;Метро;МестоРасположения;ТелефонДляСправки;РежимРаботы;Бренд;СубъектРФ");
		     
		Пока Выборка.Следующий() Цикл
			Файл_CSV.ЗаписатьСтроку
				(
					Формат(Выборка.Код	,"ЧДЦ=; ЧГ=0")
					+";"+ Формат(Выборка.НомерАптеки	,"ЧДЦ=; ЧГ=0")
					+";"+ СтрЗаменить(СокрЛП(Выборка.Наименование),";","")
					+";"+ Формат(Выборка.ДатаПерехода,"ДФ=dd.MM.yyyy")
					+";"+ Формат(Выборка.ДатаЗакрытия,"ДФ=dd.MM.yyyy")
					+";"+ СтрЗаменить(СокрЛП(Выборка.Метро),";","")
					+";"+ СтрЗаменить(СокрЛП(Выборка.МестоРасположения),";","")
					+";"+ СтрЗаменить(СокрЛП(Выборка.ТелефонДляСправки),";","")
					+";"+ СтрЗаменить(СокрЛП(Выборка.РежимРаботы),";","")
					+";"+ СтрЗаменить(СокрЛП(Выборка.Бренд),";","")
					+";"+ СтрЗаменить(СокрЛП(Выборка.СубъектРФ),";","")
				);
		КонецЦикла;
		Файл_CSV.Закрыть();
		
	Попытка
		FTP.Записать(ИмяВремФайла,Справка.ФТПКаталог + "depot.csv");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Информед: список аптек выгружен" );
	Исключение
		FTP = Неопределено;
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки() + " список аптек не выгружен!",СтатусСообщения.Важное);
		#КонецЕсли
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Информед: " + ОписаниеОшибки());

	КонецПопытки;
	//Удаляем файл из папки заказа
	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
	КонецПопытки;		
		
		//Закрываем соединение с FTP
	FTP = Неопределено;
	
	
КонецПроцедуры



Процедура ВыгрузкаНаСайт366_Старая(РегламентноеЗадание, Параметры) Экспорт 
		// Горздрав -----------------------------------------------
		КаталогОтправки = КаталогВременныхФайлов() + "\";
		КаталогДляСайта366 = Параметры.КаталогДляСайта366;

		//Попытка
		//	УдалитьФайлы(КаталогОтправки+"366.csv");
		//	УдалитьФайлы(КаталогОтправки+"366.zip");
		//Исключение
		//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось удалить старые файлы 366.csv и 366.zip! " + ОписаниеОшибки());
		//	Возврат;
		//КонецПопытки;		
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
		//----------------------------------------------------------------------------
		ТХТ = "ВЫБРАТЬ
		      |	МестаХранения.Код КАК Код,
		      |	МестаХранения.Наименование,
		      |	МестаХранения.Метро.Наименование как Метро,
		      |	МестаХранения.ТелефонДляСправки как телефон,
		      |	МестаХранения.РежимРаботы.Наименование как РежимРаботы
		      |ИЗ
		      |	Справочник.МестаХранения КАК МестаХранения
		      |ГДЕ
		      |	МестаХранения.ПометкаУдаления = ЛОЖЬ и Код366 <> ""0""
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Код";		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		ТЗ = запрос.Выполнить().Выгрузить();
		Файл_CSV = Новый ТекстовыйДокумент;
		
		Для Каждого стр Из ТЗ Цикл
			//ОбработкаПрерыванияПользователя();
			Попытка
			Файл_CSV.ДобавитьСтроку
				(
					Формат(стр.Код	,"ЧЦ=12; ЧГ=0")+"@"+
					СокрЛП(стр.Наименование)+"@"+
					СокрЛП(стр.Метро)+ "@" + 
					СокрЛП(стр.Телефон)+"@"+
					СокрЛП(стр.РежимРаботы)
				);
			Исключение
			КонецПопытки;
		КонецЦикла;
		Файл_CSV.Записать(КаталогОтправки+"depot366.csv", "windows-1251");
		//Сообщить("Создан файл: depot.csv");
		
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
		//----------------------------------------------------------------------------
		ТХТ = "ВЫБРАТЬ
		      |	АП.Код КАК Код,
		      |	АП.Наименование КАК Товар,
		      |	АП.ГруппаФТГ.Наименование КАК ГруппаФТГ,
		      |	АП.ЛекФорма.Наименование КАК ЛекФорма,
		      |	АП.Дозировка.Наименование КАК Дозировка ,
			  | АП.ОтпускПоРецепту
		      |ИЗ
		      |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Товар";		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		ТЗ = запрос.Выполнить().Выгрузить();
		Файл_CSV = Новый ТекстовыйДокумент;
		
		Для Каждого стр Из ТЗ Цикл
			//ОбработкаПрерыванияПользователя();
			Попытка
			Файл_CSV.ДобавитьСтроку
				(
					Формат(стр.Код	,"ЧЦ=12; ЧГ=0")+"@"+
					СокрЛП(СтрЗаменить(стр.Товар,"@",""))+"@"+
					"@" + 
					"@" + 
					СокрЛП(стр.ЛекФорма)+"@"+
					СокрЛП(стр.Дозировка)+"@"+
					СокрЛП(стр.ГруппаФТГ)+"@"+
					Формат(стр.ОтпускПоРецепту,"БЛ=0; БИ=1")
				);
			Исключение
			КонецПопытки;
		КонецЦикла;
		Файл_CSV.Записать(КаталогОтправки+"goods366.csv", "windows-1251");
		//Сообщить("Создан файл: goods.csv");

		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА ОСТАТКОВ
		//----------------------------------------------------------------------------		

		Запрос =  Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	МестаХранения.Ссылка КАК Аптека
		               |ПОМЕСТИТЬ ТЗАптек
		               |ИЗ
		               |	Справочник.МестаХранения КАК МестаХранения
		               |ГДЕ
		               |	МестаХранения.ПометкаУдаления = ЛОЖЬ
		               |	И МестаХранения.Код366 <> ""0""
		               |	И НЕ МестаХранения.Ссылка В
		               |				(ВЫБРАТЬ
		               |					Блокировки.Аптека
		               |				ИЗ
		               |					РегистрСведений.БлокировкиАптекДляБронирования КАК Блокировки)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РегПартии.Товар КАК _Товар,
		               |	РегПартии.Склад КАК _Аптека,
		               |	РегПартии.Партия КАК _Партия,
		               |	ВЫРАЗИТЬ(РегПартии.СуммаРознСНДСОстаток / РегПартии.КолвоОстаток КАК ЧИСЛО(12, 2)) КАК Цена,
		               |	РегПартии.КолвоОстаток КАК Остаток
		               |ПОМЕСТИТЬ ОстаткиНЕРазбивки
		               |ИЗ
		               |	РегистрНакопления.ПартииЖНВЛС.Остатки(, Товар.разбивается = ЛОЖЬ) КАК РегПартии
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
		               |		ПО РегПартии.Склад = ТЗАптек.Аптека
		               |ГДЕ
		               |	РегПартии.КолвоОстаток >= 1
		               |	И РегПартии.СуммаРознСНДСОстаток > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РегПартии.Товар КАК _Товар,
		               |	РегПартии.Склад КАК _Аптека,
		               |	РегПартии.Партия КАК _Партия,
		               |	ВЫРАЗИТЬ(РегПартии.СуммаРознСНДСОстаток / РегПартии.КолвоОстаток * РегПартии.Партия.К КАК ЧИСЛО(12, 2)) КАК Цена,
		               |	ВЫРАЗИТЬ(РегПартии.КолвоОстаток / РегПартии.Партия.К КАК ЧИСЛО(12, 2)) КАК Остаток
		               |ПОМЕСТИТЬ ОстаткиРазбивки
		               |ИЗ
		               |	РегистрНакопления.ПартииЖНВЛС.Остатки(, Товар.разбивается = ИСТИНА) КАК РегПартии
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
		               |		ПО РегПартии.Склад = ТЗАптек.Аптека
		               |ГДЕ
		               |	РегПартии.КолвоОстаток >= 1
		               |	И РегПартии.СуммаРознСНДСОстаток > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОстаткиНЕРазбивки._Товар.Код КАК КодТовара,
		               |	ОстаткиНЕРазбивки._Аптека.Код КАК КодАптеки,
		               |	ЕСТЬNULL(ОстаткиНЕРазбивки.Цена, 0) КАК Цена,
		               |	СУММА(ОстаткиНЕРазбивки.Остаток) КАК Остаток
		               |ИЗ
		               |	ОстаткиНЕРазбивки КАК ОстаткиНЕРазбивки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОстаткиНЕРазбивки._Товар.Код,
		               |	ОстаткиНЕРазбивки._Аптека.Код,
		               |	ОстаткиНЕРазбивки.Цена
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	ОстаткиРазбивки._Товар.Код,
		               |	ОстаткиРазбивки._Аптека.Код,
		               |	ЕСТЬNULL(ОстаткиРазбивки.Цена, 0),
		               |	СУММА(ОстаткиРазбивки.Остаток)
		               |ИЗ
		               |	ОстаткиРазбивки КАК ОстаткиРазбивки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОстаткиРазбивки._Товар.Код,
		               |	ОстаткиРазбивки._Аптека.Код,
		               |	ОстаткиРазбивки.Цена
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОстаткиНЕРазбивки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТЗАптек
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ОстаткиРазбивки";
	
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		//Запрос.УстановитьПараметр("Владелец",Параметры.Горздрав);
	    //нач = Текущаядата();
		ТЗ = Запрос.Выполнить().Выгрузить();
		//Кон = ТекущаяДата();
		//Т = Новый Текстовыйдокумент;
		//Т.ДобавитьСтроку("" + (Кон - Нач));
		//Т.Записать("D:\temp\time_sql.txt",КодировкаТекста.UTF8);
		Файл_CSV = Новый ТекстовыйДокумент;
		
		Для Каждого стр Из ТЗ Цикл
			//ОбработкаПрерыванияПользователя();
			
			Если стр.Цена <= 1 Тогда
				Продолжить;
			КонецЕсли;
			
			стр.Остаток = Окр(стр.Остаток,0);
			Если стр.Остаток <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
			Файл_CSV.ДобавитьСтроку
				(
					Формат(стр.КодТовара	,"ЧЦ=12; ЧГ=0")+"@"+
					Формат(стр.КодАптеки	,"ЧЦ=12; ЧГ=0")+"@"+					
					Формат(стр.Цена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")+"@"+
					Формат(стр.Остаток,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")
				);
			Исключение
				//Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		Файл_CSV.Записать(КаталогОтправки+"366.csv", "windows-1251");
		
		Архив = Новый ЗаписьZipФайла;
		Архив.Открыть (КаталогОтправки+"366.zip");
		Архив.Добавить(КаталогОтправки+"366.csv");
		Архив.Записать();
		
		Попытка
			ПереместитьФайл(КаталогОтправки+"366.zip",КаталогДляСайта366+"366.zip");
			ПереместитьФайл(КаталогОтправки+"goods366.csv",КаталогДляСайта366+"goods366.csv");
			ПереместитьФайл(КаталогОтправки+"depot366.csv",КаталогДляСайта366+"depot366.csv");
		Исключение
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось переместить один из файлов справки 36,6! " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		//Сообщить("Создан файл: euroweb.csv");
		
		// Архивация
		//Состояние("Архивация...");
		//Архив = Новый ЗаписьZipФайла;
		//Архив.Открыть (пл_Каталог+"euroweb.zip");
		//Архив.Добавить(пл_Каталог+"euroweb.csv");
		//Архив.Добавить(пл_Каталог+"goods.csv");
		//Архив.Добавить(пл_Каталог+"depot.csv");
		//Архив.Записать();
		//Сообщить("Создан файл: euroweb.zip");
		
	  //  // Выкладываем на FTP
	  //Попытка
	  //	FTP = Новый FTPСоединение(Параметры.ГорздравФТП, 21, Параметры.ГорздравФТПЛогин, Параметры.ГорздравФТППароль,, Истина);
	  //	FTP.Записать(КаталогОтправки+"366.csv", "366.csv");
	  //	FTP.Записать(КаталогОтправки+"goods366.csv", "goods366.csv");
	  //	FTP.Записать(КаталогОтправки+"depot366.csv", "depot366.csv");
	  //	//Сообщить(Строка(ТекущаяДата())+" Горздрав: Выгружено!");
	  //	//ПослатьПисьмо("Остатки на сайт выгружены");
	  //Исключение
	  //	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
	  //	//Возврат;
	  //КонецПопытки;
	  //FTP = Неопределено;
	    
	  //УдалитьФайлы(пл_Каталог+"euroweb.zip");
КонецПроцедуры

Процедура ВыгрузкаНаСайт366(РегламентноеЗадание, Параметры)
	
	Каталог = ОМ_ТСО.ПолучитьИмяФайлаНаФТП(Параметры.КаталогВыгрузкиНаСайт366);
	
	//ВЫГРУЗКА СПРАВОЧНИКА ТОВАРОВ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.ПометкаУдаления = ИСТИНА
	|			ТОГДА """"
	|		ИНАЧЕ АССОРТИМЕНТНЫЙ_ПЛАН.Бренд.Код
	|	КОНЕЦ КАК Бренд,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО.Ссылка КАК Тип,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Холодильник,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Примечание
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Подгруппа <> &ПустаяПодгруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ПустаяПодгруппа", Справочники.Подгруппа.ПустаяСсылка());
	
	ТЗ = Запрос.Выполнить().Выгрузить();		
	
	кав = """";
	НовыйТекст = Новый ТекстовыйДокумент;	
	НовыйТекст.ДобавитьСтроку("" + кав + "code" +  кав + ";" +  кав + "name" + кав + ";" + кав + "brend" + кав + ";" + кав 
	+ "type" + кав + ";" + кав + "cold" + кав + ";" + кав + "description" + кав + "");
	
	Для каждого строка из ТЗ Цикл
		т = "" + Формат(строка.Код, "ЧГ=0") 
		+ ";" + кав + СтрЗаменить(СокрЛП(строка.Наименование), """", "") + кав 
		+ ";" + Формат(строка.Бренд, "ЧГ=0") 
		+ ";" + кав + строка.Тип + кав 
		+ ";" + кав + Формат(строка.Холодильник, "БЛ=false; БИ=true") + кав 
		+ ";" + кав + кав + "";
		
		НовыйТекст.ДобавитьСтроку(т);
		
	КонецЦикла;
	
	НовыйТекст.Записать(Каталог + "ap.csv", КодировкаТекста.ANSI);
	
	
	// ВЫГРУЗКА ТОВАРНЫХ ГРУПП
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объект.Код КАК Код,
	|	Объект.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ТоварнаяГруппа КАК Объект";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	НовыйТекст = Новый ТекстовыйДокумент;
	НовыйТекст.ДобавитьСтроку("code;" + """" + "name" + """" + ";priority");
	
	Для каждого строка из ТЗ Цикл
		НовыйТекст.ДобавитьСтроку(Формат(строка.Код, "ЧГ=0") + ";" + """" + СтрЗаменить(строка.Наименование, """", "") 
		+ """" + ";" + Формат(строка.Код,"ЧГ=0") + "" );
	КонецЦикла;
	
	НовыйТекст.Записать(Каталог + "GoodGroup.csv", КодировкаТекста.ANSI);
	 	
	
	//ВЫГРУЗКА ТОВАРНЫХ ПОДГРУПП
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объект.Код КАК Код,
	|	Объект.Наименование КАК Наименование,
	|	Объект.Владелец.Код КАК КодВладельца,
	|	Объект.Приоритет
	|ИЗ
	|	Справочник.Подгруппа КАК Объект";

	ТЗ = Запрос.Выполнить().Выгрузить();
	
	НовыйТекст = Новый ТекстовыйДокумент;
	НовыйТекст.ДобавитьСтроку("code;name;idparent;priority");
	
	Для каждого строка из ТЗ Цикл
		НовыйТекст.ДобавитьСтроку(Формат(строка.Код, "ЧГ=0") + ";" + кав + СокрЛП(строка.Наименование) + кав + 
		";" + строка.КодВладельца + ";" + строка.Приоритет);
	КонецЦикла;
	
	НовыйТекст.Записать(Каталог + "GoodSubGroup.csv", КодировкаТекста.ANSI);

	
	//ВЫГРУЗКА СВЯЗОК ТОВАР-ГРУППА
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объект.Код КАК Код,
	|	Объект.ТоварнаяГруппа.Код КАК КодТоварнойГруппы,
	|	Объект.Подгруппа.Код КАК КодПодгруппы
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК Объект
	|ГДЕ
	|	Объект.ТоварнаяГруппа <> &ГруппаПустая
	|	И Объект.Подгруппа <> &ПодгруппаПустая";

	Запрос.УстановитьПараметр("ГруппаПустая", Справочники.ТоварнаяГруппа.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодГруппаПустая", Справочники.Подгруппа.ПустаяСсылка());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	НовыйТекст = Новый ТекстовыйДокумент;                               
	НовыйТекст.ДобавитьСтроку("idgood;idgroup;idsubgroup");
	
	Для каждого строка из ТЗ Цикл
		НовыйТекст.ДобавитьСтроку(Формат(строка.Код, "ЧГ=0") + ";" + Формат(строка.КодТоварнойГруппы, "ЧГ=0") 
		+ ";" + Формат(строка.КодПодгруппы, "ЧГ=0"));
	КонецЦикла;
	
	НовыйТекст.Записать(Каталог + "GoodsAndGroups.csv", КодировкаТекста.ANSI);
	
	
	//ВЫГРУЗКА СВЯЗОК ТОВАР-ПОДГРУППА
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объект.ТоварнаяГруппа.Код КАК КодТоварнойГруппы,
	|	Объект.Подгруппа.Код КАК КодПодгруппы
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК Объект
	|ГДЕ
	|	Объект.ТоварнаяГруппа <> &ГруппаПустая
	|	И Объект.Подгруппа <> &ПодгруппаПустая
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТоварнойГруппы";

	Запрос.УстановитьПараметр("ГруппаПустая", Справочники.ТоварнаяГруппа.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодГруппаПустая", Справочники.Подгруппа.ПустаяСсылка());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	НовыйТекст = Новый ТекстовыйДокумент;                               
	НовыйТекст.ДобавитьСтроку("idgroup;idsubgroup");
	
	Для каждого строка из ТЗ Цикл
		НовыйТекст.ДобавитьСтроку(Формат(строка.КодТоварнойГруппы, "ЧГ=0") + ";" + Формат(строка.КодПодгруппы,"ЧГ=0"));
	КонецЦикла;
	
	НовыйТекст.Записать(Каталог + "GroupsAndSubGroups.csv", КодировкаТекста.ANSI);
	
	
	// ВЫГРУЗКА ПРАЙСА
	
	ТХТ = 
	"ВЫБРАТЬ
	|	МестаХранения.Код КАК Код,
	|	МестаХранения.Ссылка
	|ПОМЕСТИТЬ втАптеки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И (МестаХранения.Бренд = &Бренд
	|			ИЛИ МестаХранения.Ссылка = &АптекаСЦенами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Ссылка КАК Товар,
	|	СУММА(Остатки.КоличествоОстаток / Партии.К) КАК КолвоОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0))) КАК Цена
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			СкладКод В
	|				(ВЫБРАТЬ
	|					втАптеки.Код
	|				ИЗ
	|					втАптеки)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ПО Остатки.ТоварКод = АП.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО Остатки.ПартияКод = Партии.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО Остатки.ТоварКод = РЦ.ТоварКод
	|			И Остатки.СкладКод = РЦ.АптекаКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО Остатки.ПартияКод = РЦП.ПартияКод
	|			И Остатки.СкладКод = РЦП.АптекаКод
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0  и  НЕ Партии.ТипПартии = ""I""
	|
	|СГРУППИРОВАТЬ ПО
	|	АП.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФиксированныеЦены.КодТовара КАК КодТовара,
	|	ФиксированныеЦены.Цена
	|ПОМЕСТИТЬ втФиксЦены
	|ИЗ
	|	РегистрСведений.ФиксЦены.СрезПоследних(,ВидФиксЦены = 1) КАК ФиксированныеЦены
	//|ГДЕ
	//|	ФиксированныеЦены.СубъектРФ = &СубъектРФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КаталогПрайсЛистов.КодПрайсЛиста,
	|	ВЫБОР
	|		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	|			ТОГДА 1
	|		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	|	КОНЕЦ КАК БазовыйКоэфф
	|ПОМЕСТИТЬ Параметры
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	|			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	|		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	|ГДЕ
	|	КонтрактыИАптеки.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Аптека В
	|			(ВЫБРАТЬ
	|				вт.Ссылка
	|			ИЗ
	|				втАптеки КАК вт)
	|	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	|	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	|	И КаталогПрайсЛистов.Дата > &ПрошлыйМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Связки.ТоварФирмы КАК Товар,
	|	МИНИМУМ(Прайсы.Цена * Параметры.БазовыйКоэфф) КАК Цена
	|ПОМЕСТИТЬ втПрайсы
	|ИЗ
	|	РегистрСведений.ПрайсЛисты КАК Прайсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	|		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	|		ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	|			И Прайсы.Код = Связки.КодТовараПоставщика
	|ГДЕ
	|	Прайсы.Цена > 0
	|	И ВЫБОР
	|			КОГДА Прайсы.Цена > 0
	|					И Прайсы.Цена < 50
	|					И Прайсы.Количество > 200
	|				ТОГДА ИСТИНА
	|			КОГДА Прайсы.Цена >= 50
	|					И Прайсы.Цена < 5000
	|					И Прайсы.Количество > 10
	|				ТОГДА ИСТИНА
	|			КОГДА Прайсы.Цена >= 5000
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|	И (Прайсы.СрокГодности > &СрокГодности
	|			ИЛИ Прайсы.СрокГодности = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	Связки.ТоварФирмы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Параметры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛистыНеавтоматизированныхПоставщиков.Товар КАК Товар,
	|	МИНИМУМ(ПрайсЛистыНеавтоматизированныхПоставщиков.Цена) КАК ИнтернетЦена
	|ПОМЕСТИТЬ втПрайсыНеавтПоставщиков
	|ИЗ
	|	РегистрСведений.ПрайсЛистыНеавтоматизированныхПоставщиков КАК ПрайсЛистыНеавтоматизированныхПоставщиков
	|ГДЕ
	|	ПрайсЛистыНеавтоматизированныхПоставщиков.Поставщик В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				КонтрактыИАптеки.Владелец.Владелец
	|			ИЗ
	|				Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|			ГДЕ
	|				КонтрактыИАптеки.Аптека В
	|					(ВЫБРАТЬ
	|						вт.Ссылка
	|					ИЗ
	|						втАптеки КАК вт))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрайсЛистыНеавтоматизированныхПоставщиков.Товар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втАптеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Ссылка,
	|	АП.Код,
	|	АП.Наименование КАК Наименование,
	|	АП.Производитель.Наименование КАК Производитель,
	|	АП.МинЦенаMedlux КАК Цена,
	|	АП.МаксЦенаMedlux КАК Цена2,
	|	АП.ЗаказНаСкладе,
	|	АП.ОтпускПоРецепту,
	|	АП.АссортиментГипермаркета,
	|	ЕСТЬNULL(втОстатки.КолвоОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(втОстатки.Цена, 0) КАК ЦенаОсновнойАптеки,
	|	ЕСТЬNULL(втФиксЦены.Цена, 0) КАК ЦенаФиксированная,
	|	ЕСТЬNULL(втПрайсы.Цена, ЕСТЬNULL(втПрайсыНеавтПоставщиков.ИнтернетЦена, 0)) КАК ЦенаИзПрайса
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФиксЦены КАК втФиксЦены
	|		ПО АП.Код = втФиксЦены.КодТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО АП.Ссылка = втОстатки.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрайсы КАК втПрайсы
	|		ПО АП.Ссылка = втПрайсы.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПрайсыНеавтПоставщиков КАК втПрайсыНеавтПоставщиков
	|		ПО АП.Ссылка = втПрайсыНеавтПоставщиков.Товар
	|ГДЕ
	|	НЕ АП.ПККН
	|	И НЕ АП.ПометкаУдаления
	|	И ЕСТЬNULL(втОстатки.Цена, АП.МинЦенаMedlux) > 0
	|	И ЕСТЬNULL(втПрайсы.Цена, ЕСТЬNULL(втПрайсыНеавтПоставщиков.ИнтернетЦена, ЕСТЬNULL(втОстатки.КолвоОстаток, 0))) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втФиксЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПрайсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПрайсыНеавтПоставщиков";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	Запрос.УстановитьПараметр("Бренд",			Справочники.БрендыАптечныхСетей.НайтиПоКоду(12));
	Запрос.УстановитьПараметр("СубъектРФ",		Справочники.СубъектыРФ.НайтиПоКоду(31));
	Запрос.УстановитьПараметр("ПрошлыйМесяц",	ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("СрокГодности",	НачалоДня(ТекущаяДата()) + 24*60*60*120);
	Запрос.УстановитьПараметр("АптекаСЦенами",	Параметры.АптекаСЦенами);
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Т = Новый ТекстовыйДокумент;
	Т.ДобавитьСтроку("code;sku;price;producer;market;price2;price3;qnt;pr;hyper"); 	
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЦенаОсновнойАптеки > 0 Тогда
			Цена = Выборка.ЦенаОсновнойАптеки;
			
		ИначеЕсли Выборка.Цена > 0 И Выборка.Цена < Выборка.ЦенаИзПрайса * 1.05 Тогда
			Цена = ОкруглитьЦену(Выборка.ЦенаИзПрайса * 1.05);
			ИзменитьИнтернетЦенуТовара(Выборка.Ссылка, Цена);
			
		Иначе
			Цена = Выборка.Цена;
			
		КонецЕсли; 		
		
		Т.ДобавитьСтроку("" + Формат(Выборка.Код, "ЧГ=0") + ";""" + СтрЗаменить(СокрЛП(Выборка.Наименование),"""", """""") + """;" 
						+ Формат(Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0") + ";""" + СтрЗаменить(СокрЛП(Выборка.Производитель), """", """""")
						+ """;""" + Выборка.ЗаказНаСкладе + """;" + Формат(Выборка.Цена2, "ЧДЦ=2; ЧРД=.; ЧГ=0") + ";" 
						+ Формат(Выборка.ЦенаФиксированная, "ЧДЦ=2; ЧРД=.; ЧГ=0") + ";" + Формат(Выборка.Остаток, "ЧДЦ=2; ЧРД=.; ЧГ=0") 
						+ ";""" + Выборка.ОтпускПоРецепту + """;""" + Выборка.АссортиментГипермаркета + """");		
		
	КонецЦикла;                                                                                                                                                                                                                                     
	
	Т.Записать(Каталог + "price.csv", КодировкаТекста.ANSI);
	
КонецПроцедуры

Процедура ВыгрузкаВIMSHealthЗаПериод(РегламентноеЗадание,НачПериода,КонПериода)
	
	Запрос  = Новый Запрос;
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла("CSV");
	 
	
	Слэш = "\";
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогВыгрузки = "/home/usr1cv8/ftp_net/IMSHealth2/";
		ИмяФайлаВыгрузки = "all_prihod_" + Формат(НачПериода,"ДФ=dd.MM.yyyy") + "_" + Формат(КонПериода,"ДФ=dd.MM.yyyy") + ".csv";
		Слэш = "/";
	Иначе
		КаталогВыгрузки = "\\id-vm-1\ftp_data\IMSHealth2\";
		ИмяФайлаВыгрузки = "all_prihod_" + Формат(НачПериода,"ДФ=dd.MM.yyyy") + "_" + Формат(КонПериода,"ДФ=dd.MM.yyyy") + ".csv";
	КонецЕсли;	
	
	ИмяФайлаВыгрузкиZIP = СтрЗаменить(ИмяФайлаВыгрузки,"csv","ZIP");
	
	ТХТ= "ВЫБРАТЬ
	     |	ПоступлениеТовараТовар.Ссылка.Склад.Код КАК КодСклада,
	     |	ПоступлениеТовараТовар.КодТовара КАК КодТовара,
	     |	ПоступлениеТовараТовар.Количество КАК КолВоПрихода,
	     |	ПоступлениеТовараТовар.Производитель.Наименование КАК Производитель,
	     |	ПоступлениеТовараТовар.ЦенаЗакуп КАК ЦенаЗакуп,
	     |	ПоступлениеТовараТовар.Баркод КАК Баркод
	     |ИЗ
	     |	Документ.УЗ_ПоступлениеТовара.Товар КАК ПоступлениеТовараТовар
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	     |		ПО ПоступлениеТовараТовар.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка
	     |ГДЕ
	     |	ПоступлениеТовараТовар.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	     |	И ПоступлениеТовараТовар.Ссылка.Проведен = ИСТИНА
	     |	И АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Код <> 3800
	     |	И АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Код <> 5484";
		 // Исключение из выгрузки товара с производителями 3800 5484
		 
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Дата1",НачПериода);
	Запрос.УстановитьПараметр("Дата2",КонПериода);
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	
	Текст = Новый ЗаписьТекста(ИмяТемпФайла, КодировкаТекста.ANSI); 
	Текст.ЗаписатьСтроку("""loc""" + ";" + """id_good""" + ";" + """man_country"""  + ";" + """manufacturer""" + ";" + """qnt""" + ";" + """price"""+ ";" + """barcode""");
	
	Пока Выборка.Следующий() Цикл
		Текст.ЗаписатьСтроку(""
		+ "" + Формат(выборка.КодСклада,"ЧГ=0") 
		+ ";" + Формат(Выборка.КодТовара,"ЧГ=0")
		+ ";""" + ""
		+ """;""" + СокрЛП(Выборка.Производитель)
		+ """;" +	Формат(Выборка.КолВоПрихода,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";" +	Формат(Выборка.ЦенаЗакуп,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";""" + СокрЛП(Выборка.БарКод)
		+ """");		
	КонецЦикла;
	Текст.Закрыть();
	
	ПереместитьФайл(ИмяТемпФайла,КаталогВыгрузки + ИмяФайлаВыгрузки);
	
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (КаталогВыгрузки + ИмяФайлаВыгрузки, КаталогВыгрузки + ИмяФайлаВыгрузкиZIP);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	УдалитьФайлы(КаталогВыгрузки + ИмяФайлаВыгрузки);

	Попытка
		КопироватьФайл(КаталогВыгрузки + ИмяФайлаВыгрузкиZIP,СтрЗаменить(КаталогВыгрузки + ИмяФайлаВыгрузкиZIP,"IMSHealth2","IMSHealth"));
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
	КонецПопытки;
	
	
	//Выгружаем расход 
	Запрос  = Новый Запрос;
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла("CSV");
	 
	
	Слэш = "\";
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогВыгрузки = "/home/usr1cv8/ftp_net/IMSHealth2/";
		ИмяФайлаВыгрузки = "all_sales_" + Формат(НачПериода,"ДФ=dd.MM.yyyy") + "_" + Формат(КонПериода,"ДФ=dd.MM.yyyy") + ".csv";
		Слэш = "/";
	Иначе
		КаталогВыгрузки = "\\id-vm-1\ftp_data\IMSHealth2\";
		ИмяФайлаВыгрузки = "all_sales_" + Формат(НачПериода,"ДФ=dd.MM.yyyy") + "_" + Формат(КонПериода,"ДФ=dd.MM.yyyy") + ".csv";
	КонецЕсли;	
	
	ИмяФайлаВыгрузкиZIP = СтрЗаменить(ИмяФайлаВыгрузки,"csv","ZIP");

	
	ТХТ= "ВЫБРАТЬ
	     |	Выборка.КодСклада КАК КодСклада,
	     |	Выборка.КодТовара КАК КодТовара,
	     |	ЕСТЬNULL(Партии.Производитель.Наименование, """") КАК _Производитель,
	     |	Выборка.Количество / Партии.К КАК Количество,
	     |	Выборка.СуммаРозн / Выборка.Количество * Партии.К КАК ЦенаРозн,
	     |	Партии.Баркод КАК Баркод
	     |ИЗ
	     |	(ВЫБРАТЬ
	     |		РеализацииККМ.СкладКод КАК КодСклада,
	     |		РеализацииККМ.ТоварКод КАК КодТовара,
	     |		РеализацииККМ.ПартияКод КАК КодПартии,
	     |		СУММА(РеализацииККМ.Количество) КАК Количество,
	     |		СУММА(РеализацииККМ.СуммаРозн) КАК СуммаРозн
	     |	ИЗ
	     |		РегистрНакопления.УЗ_РеализацииККМ КАК РеализацииККМ
	     |	ГДЕ
	     |		РеализацииККМ.Период МЕЖДУ &НачПериода И &КонПериода
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		РеализацииККМ.СкладКод,
	     |		РеализацииККМ.ТоварКод,
	     |		РеализацииККМ.ПартияКод
	     |	
	     |	ОБЪЕДИНИТЬ ВСЕ
	     |	
	     |	ВЫБРАТЬ
	     |		УЗ_Партии.СкладКод,
	     |		УЗ_Партии.ТоварКод,
	     |		УЗ_Партии.ПартияКод,
	     |		СУММА(УЗ_Партии.Количество),
	     |		СУММА(УЗ_Партии.СуммаЗакупБезНДС)
	     |	ИЗ
	     |		РегистрНакопления.УЗ_Партии КАК УЗ_Партии
	     |	ГДЕ
	     |		УЗ_Партии.Период МЕЖДУ &НачПериода И &КонПериода
	     |		И УЗ_Партии.Активность
	     |		И УЗ_Партии.Регистратор ССЫЛКА Документ.УЗ_МелкооптоваяРеализация
	     |		И ВЫРАЗИТЬ(УЗ_Партии.Регистратор КАК Документ.УЗ_МелкооптоваяРеализация).ВидОперацииМелкооптовойРеализации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю)
	     |	
	     |	СГРУППИРОВАТЬ ПО
	     |		УЗ_Партии.СкладКод,
	     |		УЗ_Партии.ТоварКод,
	     |		УЗ_Партии.ПартияКод) КАК Выборка
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	     |		ПО (Партии.Код = Выборка.КодПартии)
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	     |		ПО Выборка.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	     |ГДЕ
	     |	Выборка.Количество > 0
	     |	И АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Код <> 3800
	     |	И АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Код <> 5484
	     |
	     |ОБЪЕДИНИТЬ ВСЕ
	     |
	     |ВЫБРАТЬ
	     |	ПродажиОптовыхСкладов.КодСклада,
	     |	ПродажиОптовыхСкладов.КодТовара,
	     |	ЕСТЬNULL(АП.Производитель.Наименование, """"),
	     |	СУММА(ПродажиОптовыхСкладов.Количество),
	     |	СУММА(ПродажиОптовыхСкладов.СуммаРозн) / СУММА(ПродажиОптовыхСкладов.Количество),
	     |	ПродажиОптовыхСкладов.Баркод
	     |ИЗ
	     |	РегистрСведений.ПродажиОптовыхСкладов КАК ПродажиОптовыхСкладов
	     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	     |		ПО ПродажиОптовыхСкладов.КодТовара = АП.Код
	     |ГДЕ
	     |	ПродажиОптовыхСкладов.Дата МЕЖДУ &НачПериода И &КонПериода
	     |	И ПродажиОптовыхСкладов.Количество > 0
	     |	И АП.Производитель.Код <> 3800
	     |	И АП.Производитель.Код <> 5484
	     |
	     |СГРУППИРОВАТЬ ПО
	     |	ПродажиОптовыхСкладов.КодСклада,
	     |	ПродажиОптовыхСкладов.КодТовара,
	     |	ПродажиОптовыхСкладов.Баркод,
	     |	АП.Производитель.Наименование";
		// Исключение из выгрузки товара с производителями 3800 5484
		 
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("НачПериода",НачПериода);
	Запрос.УстановитьПараметр("КонПериода",КонПериода);
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	
	Текст = Новый ЗаписьТекста(ИмяТемпФайла, КодировкаТекста.ANSI); 
	Текст.ЗаписатьСтроку("""loc""" + ";" + """id_good""" + ";" + """man_country"""  + ";" + """manufacturer""" + ";" + """qnt""" + ";" + """price"""+ ";" + """barcode""");
	
	Пока Выборка.Следующий() Цикл
		Текст.ЗаписатьСтроку(""
		+ "" + Формат(выборка.КодСклада,"ЧГ=0") 
		+ ";" + Формат(Выборка.КодТовара,"ЧГ=0")
		+ ";""" + ""
		+ """;""" + СокрЛП(Выборка._Производитель)
		+ """;" +	Формат(Выборка.Количество,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";" +	Формат(Выборка.ЦенаРозн,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";""" + СокрЛП(Выборка.БарКод)
		+ """");		
	КонецЦикла;
	Текст.Закрыть();
	
	ПереместитьФайл(ИмяТемпФайла,КаталогВыгрузки + ИмяФайлаВыгрузки);
	
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (КаталогВыгрузки + ИмяФайлаВыгрузки, КаталогВыгрузки + ИмяФайлаВыгрузкиZIP);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	УдалитьФайлы(КаталогВыгрузки + ИмяФайлаВыгрузки);

	Попытка
		КопироватьФайл(КаталогВыгрузки + ИмяФайлаВыгрузкиZIP,СтрЗаменить(КаталогВыгрузки + ИмяФайлаВыгрузкиZIP,"IMSHealth2","IMSHealth"));
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
	КонецПопытки;

	
	//Выгружаем справочник
	
	Запрос  = Новый Запрос;
	
	ТХТ= "ВЫБРАТЬ
	     |	АП.Код КАК Код,
	     |	АП.Наименование КАК Наименование,
	     |	АП.ОбобщеннаяГруппа.Наименование КАК ОГ,
	     |	АП.ГруппаФТГ.Наименование КАК ФТГ
	     |ИЗ
	     |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	     |ГДЕ
	     |	АП.Производитель.Код <> 3800
	     |	И АП.Производитель.Код <> 5484
	     |
	     |УПОРЯДОЧИТЬ ПО
	     |	АП.Наименование";
	// Исключение из выгрузки товара с производителями 3800 5484
		 
	Запрос.Текст = ТХТ;
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	
	
	Текст = Новый ЗаписьТекста(ИмяТемпФайла, КодировкаТекста.ANSI); 
	Текст.ЗаписатьСтроку("""id_good""" + ";" + """full_name""" + ";" + """OG""" + ";" + """FTG""");
	
	Пока Выборка.Следующий() Цикл
		Текст.ЗаписатьСтроку(""
		+ Формат(выборка.Код,"ЧГ=0") 
		+ ";""" + СокрЛП(СтрЗаменить(Выборка.Наименование,";","")) + """"
		+ ";""" + СокрЛП(СтрЗаменить(Выборка.ОГ,";","")) + """"
		+ ";""" + СокрЛП(СтрЗаменить(Выборка.ФТГ,";","")) + """");
	КонецЦикла;
	Текст.Закрыть();
	
	ИмяФайлаВыгрузкиТоваров =  "RefGoods_" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + ".csv";
	ИмяФайлаВыгрузкиТоваровZIP = СтрЗаменить(ИмяФайлаВыгрузкиТоваров,"csv","ZIP");

	ПереместитьФайл(ИмяТемпФайла,КаталогВыгрузки + ИмяФайлаВыгрузкиТоваров);
	
	Попытка
		ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (КаталогВыгрузки + ИмяФайлаВыгрузкиТоваров, КаталогВыгрузки + ИмяФайлаВыгрузкиТоваровZIP);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	УдалитьФайлы(КаталогВыгрузки + ИмяФайлаВыгрузкиТоваров);

	Попытка
		КопироватьФайл(КаталогВыгрузки + ИмяФайлаВыгрузкиТоваровZIP,СтрЗаменить(КаталогВыгрузки + ИмяФайлаВыгрузкиТоваровZIP,"IMSHealth2","IMSHealth"));
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "" + ОписаниеОшибки());
	КонецПопытки;

	
	Выборка = Неопределено;
	Рез = Неопределено;	
	
	
КонецПроцедуры

Процедура ВыгрузкаВIMSHealth(РегламентноеЗадание,Параметры) Экспорт
	
	НачПериода = НачалоНедели(ТекущаяДата()) - 60*60*24*Параметры.ПериодВыгрузки;
	КонПериода = НачалоНедели(ТекущаяДата())-1;
	
	
	
	Если Месяц(НачПериода) <> Месяц(КонПериода) Тогда
		ВыгрузкаВIMSHealthЗаПериод(РегламентноеЗадание,НачПериода,КонецМесяца(НачПериода));
		ВыгрузкаВIMSHealthЗаПериод(РегламентноеЗадание,КонецМесяца(НачПериода)+1,КонПериода);
	Иначе
		ВыгрузкаВIMSHealthЗаПериод(РегламентноеЗадание,НачПериода,КонПериода);
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ВыгрузкаВАналитическиеСлужбы() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВыгрузкаВАналитическиеСлужбы");
	
	Параметры = Новый Структура("ПериодВыгрузки");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаВIMSHealth(РегламентноеЗадание, Параметры);
	
	
КонецПроцедуры

Процедура ВыгрузитьРезультатАнализаПотребности() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВыгрузкаРезультатаАнализаПотребности");
	
	Параметры = Новый Структура("НастройкаПрайса,КоэффA,КоэффB,КоэффC");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ИмяФайлаГлоб = "/home/usr1cv8/ftp_net/Post/moron/requirement/requirement.csv";
	Иначе
		ИмяФайлаГлоб = "\\id-vm-1\ftp_data\Post\moron\requirement\requirement.csv";
	КонецЕсли;
	
	ТХТ = "ВЫБРАТЬ
	      |	СУММА(Прайсы.Количество) КАК Количество,
	      |	СУММА(Прайсы.КоличествоПолное) КАК КоличествоПолное,
	      |	МИНИМУМ(Прайсы.КоличествоВКоробе) КАК КоличествоВКоробе,
	      |	Связки.ТоварФирмы.Код КАК КодТовара
	      |ПОМЕСТИТЬ Прайс
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК Параметры
	      |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	      |			И (Параметры.Настройка = &Настройка)
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	      |		ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	      |			И Прайсы.Код = Связки.КодТовараПоставщика
	      |			И (Связки.Блокировка = ЛОЖЬ)
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Связки.ТоварФирмы.Код
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ОстаткиОптовыхСкладов.Товар.Код КАК КодТовара,
	      |	СУММА(ОстаткиОптовыхСкладов.Количество) КАК Количество
	      |ПОМЕСТИТЬ Склад
	      |ИЗ
	      |	РегистрСведений.ОстаткиОптовыхСкладов КАК ОстаткиОптовыхСкладов
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	ОстаткиОптовыхСкладов.Товар.Код
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетТоргов.КодСклада) КАК КодСклада,
	      |	РасчетТоргов.КодТовара,
	      |	СУММА(РасчетТоргов.ВПути) КАК ВПути,
	      |	СУММА(РасчетТоргов.Остаток) КАК Остаток,
	      |	СУММА(РасчетТоргов.Продажи) КАК Продажи,
	      |	СУММА(РасчетТоргов.Потребность) КАК Потребность,
	      |	СУММА(РасчетТоргов.ПотребностьОтКуМакс2) КАК ПотребностьПоКуМакс2,
	      |	СУММА(ВЫБОР
	      |			КОГДА РасчетТоргов.ГруппаАП = ""A""
	      |				ТОГДА РасчетТоргов.ПотребностьОтКуМакс2 * &КоэффA
	      |			КОГДА РасчетТоргов.ГруппаАП = ""B""
	      |				ТОГДА РасчетТоргов.ПотребностьОтКуМакс2 * &КоэффB
	      |			КОГДА РасчетТоргов.ГруппаАП = ""C""
	      |				ТОГДА РасчетТоргов.ПотребностьОтКуМакс2 * &КоэффC
	      |			ИНАЧЕ РасчетТоргов.ПотребностьОтКуМакс2
	      |		КОНЕЦ) КАК СкладМакс,
	      |	СУММА(РасчетТоргов.Коробов) КАК Коробов
	      |ПОМЕСТИТЬ ТЗВРЕМ
	      |ИЗ
	      |	РегистрСведений.РасчетТоргов КАК РасчетТоргов
	      |ГДЕ
	      |	РасчетТоргов.ДатаРасчета = &ТекДата
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	РасчетТоргов.КодТовара
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ТЗВрем.КодТовара,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Наименование КАК Производитель,
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Активный КАК АктивныйПроизводитель,
	      |	ТЗВрем.ВПути,
	      |	ТЗВрем.Остаток,
	      |	ТЗВрем.Продажи КАК ПродажиРозницы,
	      |	ТЗВрем.Потребность КАК ПотребностьРозницы,
	      |	ТЗВрем.ПотребностьПоКуМакс2 КАК ПотребностьРозницыПоКумакс2,
		  |	Выразить(ТЗВрем.СкладМакс как Число(12,0)) КАК СкладМакс,
	      |	ВЫБОР
	      |		КОГДА ЕСТЬNULL(Прайс.КоличествоВКоробе, 0) = 1
	      |			ТОГДА 0
	      |		ИНАЧЕ ТЗВрем.Коробов
	      |	КОНЕЦ КАК Коробов,
	      |	0 КАК ПотребностьСклада,
	      |	0 КАК СкладМин,
	      |	ЕСТЬNULL(Прайс.Количество, 0) КАК ОстатокВПрайсе,
	      |	ЕСТЬNULL(Прайс.КоличествоПолное, 0) КАК ОстатокВЯчейке,
	      |	ЕСТЬNULL(Прайс.КоличествоВКоробе, 0) КАК КоличествоВКоробе,
	      |	ЕСТЬNULL(Склад.Количество, 0) КАК ОстатокНаСкладе
	      |ИЗ
	      |	ТЗВРЕМ КАК ТЗВрем
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	      |		ПО ТЗВрем.КодТовара = АССОРТИМЕНТНЫЙ_ПЛАН.Код
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Прайс КАК Прайс
	      |		ПО (Прайс.КодТовара = ТЗВрем.КодТовара)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ Склад КАК Склад
	      |		ПО (Склад.КодТовара = ТЗВрем.КодТовара)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Прайс
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Склад
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗВРЕМ";
	  
	  Запрос = Новый Запрос;
	  Запрос.Текст = ТХТ;
	  Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	  Запрос.УстановитьПараметр("Настройка", Параметры.НастройкаПрайса  );
	  Запрос.УстановитьПараметр("КоэффA", Параметры.КоэффA  );
	  Запрос.УстановитьПараметр("КоэффB", Параметры.КоэффB  );
	  Запрос.УстановитьПараметр("КоэффC", Параметры.КоэффC  );
	  
	  ТЗ = Запрос.Выполнить().Выгрузить();
	  ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");
	  Т = Новый ЗаписьТекста(ИмяФайлаЛок,КодировкаТекста.ANSI);
	  Т.ЗаписатьСтроку("КодТовара;Наименование;ВПути;Остаток;ПродажиРозницы;Потребность КуМакс1;Потребность КуМакс2;Склад min;Склад max;Коробов;ОстатокВПрайсе;Ячейка;Остаток на складе; Количество в коробе;Производитель");
	Для каждого стр из ТЗ Цикл
		
		//стр.ПотребностьСклада = ?(стр.ПотребностьРозницыПоКумакс2 - стр.ОстатокВЯчейке < 0 , 0 , стр.ПотребностьРозницыПоКумакс2 - стр.ОстатокВЯчейке);
		//стр.СкладМин = ?(стр.ПотребностьРозницы - стр.ОстатокВЯчейке < 0 , 0 , стр.ПотребностьРозницы - стр.ОстатокВЯчейке);
		
		стр.ПотребностьСклада = ?(стр.ПотребностьРозницыПоКумакс2 < 0 , 0 , стр.ПотребностьРозницыПоКумакс2 );
		стр.СкладМин = ?(стр.ПотребностьРозницы < 0 , 0 , стр.ПотребностьРозницы );
		

		Если стр.КоличествоВКоробе > 0 Тогда
			 //стр.ПотребностьРозницыПоКумакс2 = ПривестиККоробу(стр.ПотребностьРозницыПоКумакс2,стр.КоличествоВКоробе);
			 стр.ПотребностьСклада = Окр(стр.ПотребностьСклада/стр.КоличествоВКоробе,0)*стр.КоличествоВКоробе; //ПривестиККоробу(стр.ПотребностьСклада,стр.КоличествоВКоробе);
			 стр.СкладМин = Окр(стр.СкладМин/стр.КоличествоВКоробе,0)*стр.КоличествоВКоробе;

		КонецЕсли;
		 
		Т.ЗаписатьСтроку(""
		+ Формат(стр.КодТовара,"ЧГ=0")
		+ ";" + СтрЗаменить(СокрЛП(стр.Наименование),";","")
		+ ";" + Формат(стр.ВПути,"ЧГ=0")
		+ ";" + Формат(стр.Остаток,"ЧГ=0")
		+ ";" + Формат(стр.ПродажиРозницы,"ЧГ=0")
		+ ";" + Формат(стр.ПотребностьРозницы,"ЧГ=0")
		+ ";" + Формат(стр.ПотребностьРозницыПоКуМакс2,"ЧГ=0")
		+ ";" + Формат(стр.ПотребностьСклада,"ЧГ=0")// было так : Формат(стр.СкладМин,"ЧГ=0")
		+ ";" + Формат(стр.СкладМакс,"ЧГ=0")		// было так : Формат(стр.ПотребностьСклада,"ЧГ=0")
		+ ";" + Формат(стр.Коробов,"ЧГ=0")
		+ ";" + Формат(стр.ОстатокВПрайсе,"ЧГ=0")
		+ ";" + Формат(стр.ОстатокВЯчейке,"ЧГ=0")
		+ ";" + Формат(стр.ОстатокНаСкладе,"ЧГ=0")
		+ ";" + Формат(стр.КоличествоВКоробе,"ЧГ=0")
		+ ";" + СтрЗаменить(стр.Производитель,";",""));
		//Если стр.ОстатокВЯчейке < стр.ПотребностьСклада*0.5 и  стр.ОстатокНаСкладе > стр.ПотребностьСклада Тогда
		//	стр.Ограничение = Истина;
		//КонецЕсли;
		 
	КонецЦикла;
	Т.Закрыть();
	
	ПереместитьФайл(ИмяФайлаЛок,ИмяФайлаГлоб);
	
КонецПроцедуры

Процедура ВыгрузитьАптеки()
	

	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП			= Константы.КаталогФТПЛинукс.Получить();
		КаталогКоммон		= КаталогФТП + "common/";
		ФайлДляСайта		= КаталогФТП + "reserve/filials/depots.csv"; 
	Иначе
		КаталогФТП			= Константы.КаталогФТП.Получить();
		КаталогКоммон		= КаталогФТП + "common\";
		ФайлДляСайта		= КаталогФТП + "reserve\filials\depots.csv";
	КонецЕсли;
	
		ФайлДляАптек		= КаталогКоммон+"ids_dep.DBF";
		ФайлАрхиваДляАптек	= КаталогКоммон+"ids_dep.ZIP";	
	
	
	ТХТ="ВЫБРАТЬ
	    |	МестаХранения.Ссылка КАК АптекаСсылка,
	    |	МестаХранения.Код КАК КодАптеки,
	    |	ЕСТЬNULL(МестаХранения.Фирма.Код, 0) КАК КодФирмы,
	    |	ЕСТЬNULL(МестаХранения.Фирма.ИНН, """") КАК ИННФирмы,
	    |	МестаХранения.НомерАптеки,
	    |	МестаХранения.Наименование КАК Наименование,
	    |	МестаХранения.НаименованиеПоКлассификатору,
	    |	МестаХранения.ОбщаяПлощадь,
	    |	МестаХранения.ПлощадьТорговогоЗала,
	    |	МестаХранения.ТелефонДляСправки,
	    |	ЕСТЬNULL(МестаХранения.РежимРаботы.Код, 0) КАК КодРежимаРаботы,
	    |	МестаХранения.РежимРаботы.Наименование КАК ИмяРежимаРаботы,
	    |	ЕСТЬNULL(МестаХранения.Метро.Код, 0) КАК КодМетро,
	    |	МестаХранения.Метро.Наименование КАК ИмяМетро,
	    |	ЕСТЬNULL(МестаХранения.МестоРасположения.Код, 0) КАК КодМеста,
	    |	МестаХранения.МестоРасположения.Наименование КАК ИмяМеста,
	    |	ЕСТЬNULL(МестаХранения.ГруппаТТ.Код, 0) КАК КодГруппыТТ,
	    |	МестаХранения.ГруппаТТ.Наименование КАК ИмяГруппыТТ,
	    |	МестаХранения.ТипСклада.Порядок КАК ПорядокТипаСклада,
	    |	МестаХранения.ТипНалогообложения.Порядок КАК ПорядокТипаНалогов,
	    |	МестаХранения.Мэйл,
	    |	МестаХранения.АссортиментноеПланирование,
	    |	МестаХранения.ПометкаУдаления,
	    |	ЕСТЬNULL(МестаХранения.Бренд.ПроцентМотивации, 0) КАК ПроцентМотивации,
	    |	ЕСТЬNULL(МестаХранения.Бренд.Код, 0) КАК КодБренда,
	    |	МестаХранения.Бренд.Наименование КАК ИмяБренда,
	    |	ЕСТЬNULL(МестаХранения.СубъектРФ.КодКлассификатора, """") КАК КодСубъектаРФ,
	    |	МестаХранения.ПоказыватьАптекуНаСайте
	    |ИЗ
	    |	Справочник.МестаХранения КАК МестаХранения
	    |ГДЕ
	    |	НЕ(МестаХранения.СторонаДоговораКомиссии = ЗНАЧЕНИЕ(Перечисление.СтороныДоговораКомиссии.Комитент)
	    |				И МестаХранения.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыМХ.Розн))
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	Наименование";
	Запрос=Новый Запрос;
	Запрос.Текст=ТХТ;
	
	//Запрос.УстановитьПараметр("МассивКодов",МассивКодов);
	ТЗ=Запрос.Выполнить().Выгрузить();
	
	ТХТ_Продаж = "ВЫБРАТЬ
	             |	МХ.Ссылка как Склад,
	             |	ВЫРАЗИТЬ((Продажи.СуммаРознФактОборот - Продажи.СуммаЗакупСНДСОборот) / Продажи.СуммаЗакупСНДСОборот * 100 КАК ЧИСЛО(15, 2)) КАК Процент
	             |ИЗ
	             |	РегистрНакопления.УЗ_ПродажиДляМотивации" + Формат(Месяц(НачалоМесяца(НачалоМесяца(ТекущаяДата())-1)),"ЧДЦ=; ЧГ=0") + ".Обороты(&НачПериода, &КонПериода, , ) КАК Продажи
				 |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МестаХранения как МХ ПО МХ.Код = Продажи.СкладКод";
	
	Запрос.Текст = ТХТ_Продаж;
	
	Запрос.УстановитьПараметр("НачПериода",НачалоМесяца(НачалоМесяца(ТекущаяДата())-1));
	Запрос.УстановитьПараметр("КонПериода",КонецМесяца(НачалоМесяца(ТекущаяДата())-1)+1);
	ТЗПроцентов = Запрос.Выполнить().Выгрузить();
	
	ДБФ=Новый XBAse;
	
	ДБФ.Кодировка=КодировкаXBase.OEM; // WIN 1251
	
	ДБФ.поля.Добавить("id_dep","S",15,0);
	ДБФ.поля.Добавить("id_firm","S",15,0);
	ДБФ.поля.Добавить("num_dep","N",10,0);
	ДБФ.поля.Добавить("name_dep","S",150,0);
	ДБФ.поля.Добавить("name_short","S",150,0);
	ДБФ.поля.Добавить("area_full","N",10,0);
	ДБФ.поля.Добавить("area_hall","N",10,0);
	ДБФ.поля.Добавить("telefon","S",80,0);
	ДБФ.поля.Добавить("id_wtime","S",15,0);
	ДБФ.поля.Добавить("name_wtime","S",50,0);
	ДБФ.поля.Добавить("id_metro","S",15,0);
	ДБФ.поля.Добавить("name_metro","S",100,0);	
	ДБФ.поля.Добавить("id_locate","S",15,0);
	ДБФ.поля.Добавить("n_locate","S",150,0);
	ДБФ.поля.Добавить("id_gtt","S",15,0);
	ДБФ.поля.Добавить("name_gtt","S",50,0);
	ДБФ.поля.Добавить("type_dep","N",10,0);
	ДБФ.поля.Добавить("type_tax","N",10,0);
	ДБФ.поля.Добавить("email","S",50,0);
	ДБФ.поля.Добавить("ap","N",1,0);
	ДБФ.поля.Добавить("is_del","N",1,0);
	ДБФ.поля.Добавить("prc_motiv","N",10,2);
	ДБФ.поля.Добавить("t_exp_cash","N",3,0);
	ДБФ.поля.Добавить("id_br_net","S",20,0);
	ДБФ.поля.Добавить("n_br_net","S",100,0);
	
	ДБФ.СоздатьФайл(КаталогКоммон+"ids_dep.dbf"); 
	
	Для каждого Стр из ТЗ Цикл
		
		Если Стр.Наименование = "" Тогда
			Продолжить;
		КонецЕсли;
		
		
		ДБФ.Добавить();
		
		ДБФ.id_dep		= "{"+ Формат(стр.КодАптеки,"ЧГ=0") + ",0}";
		ДБФ.id_firm		= "{"+ Формат(стр.КодФирмы,"ЧН=0; ЧГ=0") + ",0}";
		ДБФ.num_dep		= стр.НомерАптеки;
		ДБФ.name_dep	= стр.Наименование;
		ДБФ.name_short	= стр.НаименованиеПоКлассификатору;
		ДБФ.area_full	= стр.ОбщаяПлощадь;
		ДБФ.area_hall	= стр.ПлощадьТорговогоЗала;
		ДБФ.telefon		= стр.ТелефонДляСправки;
		ДБФ.id_wtime	= "{"+ Формат(Число(стр.КодРежимаРаботы),"ЧН=0; ЧГ=0") + ",0}";
		ДБФ.name_wtime	= стр.ИмяРежимаРаботы;
		ДБФ.id_metro	= "{"+ Формат(стр.КодМетро,"ЧН=0; ЧГ=0") + ",0}";
		ДБФ.name_metro	= стр.ИмяМетро;	
		ДБФ.id_locate	= "{"+ Формат(стр.КодМеста,"ЧН=0; ЧГ=0") + ",0}";
		ДБФ.n_locate	= стр.ИмяМеста;
		ДБФ.id_gtt		= "{"+ Формат(стр.КодГруппыТТ,"ЧН=0; ЧГ=0") + ",0}";
		ДБФ.name_gtt	= стр.ИмяГруппыТТ;
		ДБФ.type_dep	= стр.ПорядокТипаСклада;
		ДБФ.type_tax	= стр.ПорядокТипаНалогов;
		ДБФ.email		= стр.Мэйл;
		ДБФ.ap			= Число(Формат(стр.АссортиментноеПланирование,"БЛ=0; БИ=1"));		
		ДБФ.is_del		= Число(Формат(стр.ПометкаУдаления,"БЛ=0; БИ=1"));	
		ДБФ.id_br_net	= "{"+ Формат(стр.КодБренда,"ЧН=0; ЧГ=0") + ",0}";
		ДБФ.n_br_net	= стр.ИмяБренда;		
		
		
		ПроцентМотивации = 0;
		НайденнаяСтрока  = ТЗПроцентов.Найти(стр.АптекаСсылка, "Склад");
		
		//Если (СокрЛП(стр.ИННФирмы) = "7705947629")    //ООО "АПТЕКА-А.в.е"
		//	или (СокрЛП(стр.ИННФирмы) = "7714844316") //ООО "АПТЕКА-А.в.е-1"
		//	или (СокрЛП(стр.ИННФирмы) = "7715804186") //ООО "А-Фарм"
		//	или (СокрЛП(стр.ИННФирмы) = "7726560069") //ЖЗ
		//	или (СокрЛП(стр.ИННФирмы) = "5003109157") //ЖЗ-2
		//	или (СокрЛП(стр.ИННФирмы) = "7701343979") //03-Аптека
		//	или (СокрЛП(стр.ИННФирмы) = "7724194699") //Витим
		//	или (СокрЛП(стр.ИННФирмы) = "7704511276") //Ля-Профанс
		//	или (СокрЛП(стр.ИННФирмы) = "5032057760") //ЗаготКонтора
		//	Тогда
			
			Если стр.КодБренда = 4 Тогда
				// "Ave luxury"
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НайденнаяСтрока.Процент <= 70 Тогда
						ПроцентМотивации = 3.0;
					ИначеЕсли НайденнаяСтрока.Процент > 70  и НайденнаяСтрока.Процент <=90 Тогда
						ПроцентМотивации = 2.5;
					ИначеЕсли НайденнаяСтрока.Процент > 90 Тогда
						ПроцентМотивации = 1.2;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПроцентМотивации = стр.ПроцентМотивации;
			КонецЕсли;
		//ИначеЕсли НайденнаяСтрока <> Неопределено Тогда
		//	Если Найти(";77;50;40;34;61;23;01;42;54;55;66;72;24;", ";" + СокрЛП(стр.КодСубъектаРФ) + ";") > 0 Тогда
		//		
		//		Если НайденнаяСтрока.Процент <= 20 Тогда
		//			ПроцентМотивации = 7.5;
		//		ИначеЕсли НайденнаяСтрока.Процент > 20  и НайденнаяСтрока.Процент <= 30 Тогда
		//			ПроцентМотивации = 6.8;
		//		ИначеЕсли НайденнаяСтрока.Процент > 30  и НайденнаяСтрока.Процент <= 40 Тогда
		//			ПроцентМотивации = 4.5;
		//		ИначеЕсли НайденнаяСтрока.Процент > 40  и НайденнаяСтрока.Процент <= 50 Тогда
		//			ПроцентМотивации = 3.9;
		//		ИначеЕсли НайденнаяСтрока.Процент > 50  и НайденнаяСтрока.Процент <= 70 Тогда
		//			ПроцентМотивации = 3.0;
		//		ИначеЕсли НайденнаяСтрока.Процент > 70  и НайденнаяСтрока.Процент <= 90 Тогда
		//			ПроцентМотивации = 2.5;
		//		ИначеЕсли НайденнаяСтрока.Процент > 90 Тогда
		//			ПроцентМотивации = 1.2;
		//		КонецЕсли;
		//		
		//	ИначеЕсли Найти(";36;76;48;31;62;", ";" + СокрЛП(стр.КодСубъектаРФ) + ";") > 0 Тогда
		//		
		//		Если НайденнаяСтрока.Процент <= 20 Тогда
		//			ПроцентМотивации = 2.25;
		//		ИначеЕсли НайденнаяСтрока.Процент > 20  и НайденнаяСтрока.Процент <= 30 Тогда
		//			ПроцентМотивации = 2.04;
		//		ИначеЕсли НайденнаяСтрока.Процент > 30  и НайденнаяСтрока.Процент <= 40 Тогда
		//			ПроцентМотивации = 1.35;
		//		ИначеЕсли НайденнаяСтрока.Процент > 40  и НайденнаяСтрока.Процент <= 50 Тогда
		//			ПроцентМотивации = 1.17;
		//		ИначеЕсли НайденнаяСтрока.Процент > 50  и НайденнаяСтрока.Процент <= 70 Тогда
		//			ПроцентМотивации = 0.9;
		//		ИначеЕсли НайденнаяСтрока.Процент > 70  и НайденнаяСтрока.Процент <= 90 Тогда
		//			ПроцентМотивации = 0.75;
		//		ИначеЕсли НайденнаяСтрока.Процент > 90 Тогда
		//			ПроцентМотивации = 0.36;
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		ДБФ.prc_motiv	= ПроцентМотивации;
		ДБФ.t_exp_cash = 2;
		
		ДБФ.Записать();
		
	КонецЦикла;	 
	
	ДБФ.ЗакрытьФайл();

	Попытка
		УдалитьФайлы(ФайлАрхиваДляАптек);
	Исключение
	КонецПопытки;
	
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ФайлДляАптек,ФайлАрхиваДляАптек);


	ТХТ="ВЫБРАТЬ
	    |	МестаХранения.Код КАК Код,
	    |	МестаХранения.Наименование КАК Наименование,
	    |	МестаХранения.Мэйл КАК Мэйл,
	    |	МестаХранения.ОсуществляетБронирование КАК ОсуществляетБронирование,
	    |	МестаХранения.ТелефонДляSMSИнформирования КАК ТелефонДляSMSИнформирования,
	    |	МестаХранения.НомерАптеки КАК НомерАптеки,
	    |	ЕСТЬNULL(МестаХранения.Бренд.Наименование, """") КАК Бренд,
	    |	ЕСТЬNULL(МестаХранения.Бренд.Код, 0) КАК КодБренда,
	    |	МестаХранения.Метро.Наименование КАК Метро,
	    |	МестаХранения.ПометкаУдаления КАК Пометка,
	    |	МестаХранения.ДатаПерехода КАК ДатаПерехода,
	    |	МестаХранения.ДатаЗакрытия КАК ДатаЗакрытия,
	    |	ЕСТЬNULL(МестаХранения.Фирма.Код, 0) КАК КодФирмы,
	    |	МестаХранения.ПоказыватьАптекуНаСайте КАК ПоказыватьАптекуНаСайте,
	    |	МестаХранения.Город.Наименование КАК Город,
	    |	МестаХранения.Улица КАК Улица,
	    |	МестаХранения.Дом КАК Дом,
	    |	МестаХранения.ТелефонДляСправки КАК ТелефонДляСправки,
	    |	МестаХранения.СубъектРФ.КодКлассификатора КАК КодСубъекта,
	    |	МестаХранения.Фирма.Наименование КАК Фирма,
	    |	МестаХранения.СтатусАптеки КАК СтатусАптеки,
	    |	МестаХранения.РежимРаботы.Наименование КАК РежимРаботы,
	    |	МестаХранения.АптекаКлиника КАК АптекаКлиника,
	    |	ЕСТЬNULL(Сотр.АдресЭлектроннойПочты, """") КАК EmailOperDir,
	    |	МестаХранения.ВнутреннийТелефон КАК ВнутреннийТелефон,
		|	Управляющие.ФИО КАК ФИОУправл,
		|	Управляющие.Должность КАК ДолжностьУправл,
		|	Управляющие.Телефон КАК ТелефонУправл,
		|	Управляющие.АдресЭлектроннойПочты КАК EmailУправл
		|
	    |ИЗ
	    |	Справочник.МестаХранения КАК МестаХранения
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК Сотр
	    |		ПО (Сотр.Ссылка = МестаХранения.Ссылка)
	    |			И (Сотр.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.ДиректорБизнесЕдиницы))
	    |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК Управляющие
		|		ПО (Управляющие.Ссылка = МестаХранения.Ссылка)
		|			И (Управляющие.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой))
		|
	    |УПОРЯДОЧИТЬ ПО
	    |	МестаХранения.Наименование";
	Запрос=Новый Запрос;
	Запрос.Текст=ТХТ;
	запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	
	Т = Новый ТекстовыйДокумент;
	Т.ДобавитьСтроку("Код;Наименование;Мэйл;ОсуществляетБронирование;ТелефонДляSMSИнформирования;НомерАптеки;КодБренда;Бренд;Метро;Пометка;ДатаОткрытия;ДатаЗакрытия;КодФирмы;ПоказыватьАптекуНаСайте;Город;Улица;Дом;Телефон;СубъектРФ;Фирма;СтатусАптеки;РежимРаботы;АптекаКлиника;EmailДиректораМакроРегиона;ВнутреннийТелефон;ФИОУправляющего;ДолжностьУправляющего;ТелефонУправляющего;EmailУправляющего");	
	ДЛя каждого стр из ТЗ Цикл
		Т.ДобавитьСтроку(""+Формат(стр.Код,"ЧГ=0")+";"+СокрЛП(СтрЗаменить(стр.Наименование,";","")) + ";"+СокрЛП(стр.Мэйл)+ ";"+СокрЛП(стр.ОсуществляетБронирование)+";"+СокрЛП(СтрЗаменить(стр.ТелефонДляSMSИнформирования,";",""))+ ";"+Формат(стр.НомерАптеки,"ЧГ=0")+ ";"+Формат(стр.КодБренда,"ЧГ=0") + ";"+стр.Бренд + ";"+стр.Метро + ";"+?(стр.Пометка=Истина,1,0)
		+ ";"+ Формат(стр.ДатаПерехода,"ДФ=dd.MM.yyyy")
		+ ";"+ Формат(стр.ДатаЗакрытия,"ДФ=dd.MM.yyyy")
		+ ";"+ Формат(стр.КодФирмы,"ЧГ=0")
		+ ";"+ Формат(стр.ПоказыватьАптекуНаСайте,"ЧГ=0; БЛ=0; БИ=1")
		+ ";"+ СокрЛП(СтрЗаменить(стр.Город,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(стр.Улица,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(стр.Дом,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(стр.ТелефонДляСправки,";"," "))
		+ ";"+ Формат(стр.КодСубъекта,"ЧГ=0")
		+ ";"+ СокрЛП(СтрЗаменить(стр.Фирма,";"," "))
		+ ";"+ СокрЛП(СтрЗаменить(стр.СтатусАптеки,";"," "))
		+ ";"+ СокрЛП(СтрЗаменить(стр.РежимРаботы,";"," "))
		+ ";"+?(стр.АптекаКлиника=Истина,1,0)
		+ ";"+ СокрЛП(СтрЗаменить(стр.EmailOperDir,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(стр.ВнутреннийТелефон,Символы.НПП,"")) //ENT-983 Теперь вместо числа передаем строчку
		+ ";"+ СокрЛП(СтрЗаменить(стр.ФИОУправл,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(стр.ДолжностьУправл,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(стр.ТелефонУправл,";"," "))
		+ ";"+ СокрЛП(СтрЗаменить(стр.EmailУправл,";"," "))
		);	
	КонецЦикла;
	Т.Записать(ФайлДляСайта, КодировкаТекста.UTF8);

	
	
КонецПроцедуры

Процедура ВыгрузитьКонтрагентов()
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП			= Константы.КаталогФТПЛинукс.Получить();
		КаталогКоммон		= КаталогФТП + "common/";
	Иначе
		КаталогФТП			= Константы.КаталогФТП.Получить();
		КаталогКоммон		= КаталогФТП + "common\";
	КонецЕсли;
	
	ФайлДляАптек = КаталогКоммон + "contrids.DBF";
	ФайлАрхиваДляАптек = КаталогКоммон + "contrids.ZIP";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	        |	Поставщики.Код,
	        |	Поставщики.Наименование КАК Наименование,
	        |	Поставщики.ИНН,
	        |	Поставщики.КПП,
	        |	Поставщики.Адрес,
	        |	Поставщики.АдресГрузополучателя,
	        |	Поставщики.ПолнНаименование,
	        |	ЕСТЬNULL(Поставщики.ОсновнойСчет.Код,0) как КодСчета,
	        |	Поставщики.ОсновнойСчет.Наименование как ИмяСчета,
	        |	Поставщики.ОсновнойСчет.НомерСчета как НомерСчета,
	        |	Поставщики.ОсновнойСчет.Банк.Код как КодБанка,
	        |	Поставщики.ОсновнойСчет.Банк.Наименование как наименованиеБанка,
	        |	Поставщики.ОсновнойСчет.Банк.КоррСчет  как КоррСчет,
			|	Поставщики.ПометкаУдаления 
	        |ИЗ
	        |	Справочник.Поставщики КАК Поставщики
	        |ГДЕ
	        |	Поставщики.ЭтоГруппа = ЛОЖЬ
	        |	
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Наименование";
			
	
	ТЗ=Запрос.Выполнить().Выгрузить();
	
	ДБФ=Новый XBAse;
	
	ДБФ.Кодировка=КодировкаXBase.OEM; // WIN 1251
	
	ДБФ.поля.Добавить("CODE","N",7,0);
	ДБФ.поля.Добавить("Name","S",150,0);
	ДБФ.поля.Добавить("FullName","S",150,0);
	ДБФ.поля.Добавить("INN","S",20,0);
    ДБФ.поля.Добавить("KPP","S",20,0);
    ДБФ.поля.Добавить("ADDRESS","S",150,0);
	ДБФ.поля.Добавить("GRUZ","S",150,0);
	ДБФ.поля.Добавить("CODESCH","N",10,0);
	ДБФ.поля.Добавить("NAMESCH","S",30,0);
	ДБФ.поля.Добавить("NUMSCH","S",50,0);
	ДБФ.поля.Добавить("CODEBANK","S",50,0);
	ДБФ.поля.Добавить("BANKNAME","S",100,0);
	ДБФ.поля.Добавить("KORRSCH","S",50,0);
	ДБФ.поля.Добавить("VIDSCH","N",1,0);
	ДБФ.поля.Добавить("IS_DELETED","N",1,0);
	
	ДБФ.СоздатьФайл(ФайлДляАптек); 

	Для каждого Стр из ТЗ Цикл
		
		Если  ПустаяСтрока(СТР.ПолнНаименование)=Истина и ПустаяСтрока(Стр.Наименование)=Истина ТОгда
			ПРодолжить;
		КонецЕсли;	
		
		ДБФ.Добавить();
		ДБФ.CODE=Формат(стр.Код,"ЧГ=0");
		ДБФ.Name=стр.Наименование;
		ДБФ.FullName=?(ПустаяСтрока(СТР.ПолнНаименование),Стр.Наименование,СТР.ПолнНаименование);
		ДБФ.INN=стр.ИНН;
		ДБФ.KPP=стр.КПП;
		ДБФ.ADDRESS=стр.Адрес;
		ДБФ.GRUZ=стр.АдресГрузополучателя;
		ДБФ.CODESCH=Число(стр.КодСчета);
		ДБФ.NAMESCH=стр.ИмяСчета;
		ДБФ.NUMSCH=стр.НомерСчета;
		ДБФ.BANKNAME=стр.наименованиеБанка;
		ДБФ.CODEBANK=стр.КодБанка;
		ДБФ.KORRSCH=?(ПустаяСтрока(стр.КоррСчет),"н/у",стр.КоррСчет);
		ДБФ.VIDSCH=0;
		ДБФ.IS_DELETED = Число(стр.ПометкаУдаления);
		ДБФ.Записать();
		
	КонецЦикла;	 
	
	ДБФ.ЗакрытьФайл();
	
	Попытка
		УдалитьФайлы(ФайлАрхиваДляАптек);
	Исключение
	КонецПопытки;
	
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ФайлДляАптек,ФайлАрхиваДляАптек);
	
КонецПроцедуры

Процедура ВыгрузитьТипыДисконтныхКарт()
	
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП			= Константы.КаталогФТПЛинукс.Получить();
		КаталогКоммон		= КаталогФТП + "common/";
	Иначе
		КаталогФТП			= Константы.КаталогФТП.Получить();
		КаталогКоммон		= КаталогФТП + "common\";
	КонецЕсли;
	
	ФайлДляАптек = КаталогКоммон + "dc_type.DBF";
	ФайлАрхиваДляАптек = КаталогКоммон + "dc_type.ZIP";	
	
	ТХТ="ВЫБРАТЬ
	    |	ТипыДисконтныхКарт.ПометкаУдаления КАК IS_DELETED,
	    |	ТипыДисконтныхКарт.Наименование КАК NAME,
	    |	ТипыДисконтныхКарт.Префикс КАК PREFIX,
	    |	ТипыДисконтныхКарт.НачНомер КАК N_START,
	    |	ТипыДисконтныхКарт.КонНомер КАК N_END,
	    |	ТипыДисконтныхКарт.ПроцентСкидки КАК P_SK,
	    |	ТипыДисконтныхКарт.Персональная КАК IS_PERSONA,
	    |	ТипыДисконтныхКарт.Одноразовая КАК IS_ONE_TIM,
	    |	ТипыДисконтныхКарт.ПрограммаЛояльности КАК IS_LOYALTY,
	    |	ТипыДисконтныхКарт.ОбластьДействия.Порядок КАК SCOPE_TYPE,
	    |	ВЫРАЗИТЬ(ТипыДисконтныхКарт.Контрагент КАК Справочник.Поставщики).Код КАК ID_CONTRAG,
	    |	ТипыДисконтныхКарт.Код КАК EXTCODE,
	    |	ТипыДисконтныхКарт.ДлинаКарты КАК CODE_LENGT,
	    |	ТипыДисконтныхКарт.ТекстВЧек КАК TEXTVCHECK,
	    |	ТипыДисконтныхКарт.ПорогСрабатыванияПрограммыЛояльности как T_LOYALTY,
	    |	ТипыДисконтныхКарт.СпрашиватьКарту как ASKLOYALTY,
	    |	ТипыДисконтныхКарт.НомерГруппыПрограммЛояльности как LCNOMGROUP,
		|	ТипыДисконтныхКарт.ОплатаБаллами как PAYSCORES,
		|	ТипыДисконтныхКарт.СтоимостьБалла как POINT_COST,
		|	ТипыДисконтныхКарт.ТекстПриОплатеБаллами как LC_PS_TEXT
	    |ИЗ
	    |	Справочник.ТипыДисконтныхКарт КАК ТипыДисконтныхКарт";
	
	Запрос=Новый Запрос;
	Запрос.Текст=ТХТ;
	ТЗ=Запрос.Выполнить().Выгрузить();
	
	ТХТ="ВЫБРАТЬ
		|	ЛОЖЬ как IS_DELETED,
	    |	ТипыДисконтныхКартСписокАптек.Ссылка.Код как EXTCODE,
	    |	ТипыДисконтныхКартСписокАптек.Аптека.Код как ID_CONTRAG
	    |ИЗ
	    |	Справочник.ТипыДисконтныхКарт.СписокАптек КАК ТипыДисконтныхКартСписокАптек";
	
	Запрос.Текст=ТХТ;
	ТЗАптек=Запрос.Выполнить().Выгрузить();
	
	
	ДБФ=Новый XBAse;
	ДБФ.Кодировка=КодировкаXBase.OEM; // WIN 1251
	
	ДБФ.поля.Добавить("IS_DELETED","L",1,0);
	ДБФ.поля.Добавить("NAME","S",150,0);
	ДБФ.поля.Добавить("PREFIX","S",12,0);
	ДБФ.поля.Добавить("N_START","N",12,0);
	ДБФ.поля.Добавить("N_END","N",12,0);
	ДБФ.поля.Добавить("CODE_LENGT","N",12,0);
	ДБФ.поля.Добавить("P_SK","N",12,0);
	ДБФ.поля.Добавить("IS_PERSONA","L",1,0);
	ДБФ.поля.Добавить("IS_ONE_TIM","L",1,0);
	ДБФ.поля.Добавить("IS_LOYALTY","L",1,0);
	ДБФ.поля.Добавить("ID_CONTRAG","N",12,0);
	ДБФ.поля.Добавить("SCOPE_TYPE","N",12,0);
	ДБФ.поля.Добавить("EXTCODE","S",15,0);
	ДБФ.поля.Добавить("TEXTVCHECK","S",250,0);
	ДБФ.поля.Добавить("T_LOYALTY","N",12,2);
	ДБФ.поля.Добавить("ASKLOYALTY","L",1,0);
	ДБФ.поля.Добавить("LCNOMGROUP","N",12,0);
	
	ДБФ.поля.Добавить("PAYSCORES","L",1,0);
	ДБФ.поля.Добавить("POINT_COST","N",12,4);
	ДБФ.поля.Добавить("LC_PS_TEXT","S",250,0);
	
	ДБФ.СоздатьФайл(ФайлДляАптек); 

	Для каждого Стр из ТЗ Цикл
		ДБФ.Добавить();
		ЗаполнитьЗначенияСвойств(ДБФ,стр);
		ДБФ.Записать();
	КонецЦикла;	 
	
	Для каждого Стр из ТЗАптек Цикл
		ДБФ.Добавить();
		ЗаполнитьЗначенияСвойств(ДБФ,стр);
		ДБФ.Записать();
	КонецЦикла;	 	
	
	ДБФ.ЗакрытьФайл();
	
	Попытка
		УдалитьФайлы(ФайлАрхиваДляАптек);
	Исключение
	КонецПопытки;
	
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ФайлДляАптек,ФайлАрхиваДляАптек);
	
КонецПроцедуры


Процедура ВыгрузитьСимптомыИТовар()
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП			= Константы.КаталогФТПЛинукс.Получить();
		КаталогКоммон		= КаталогФТП + "common/";
	Иначе
		КаталогФТП			= Константы.КаталогФТП.Получить();
		КаталогКоммон		= КаталогФТП + "common\";
	КонецЕсли;
	
	//=========================  Выгружаем симптомы ===================================
	
	ФайлДляАптек = КаталогКоммон + "symptom.DBF";
	ФайлАрхиваДляАптек = КаталогКоммон + "symptom.ZIP";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	                 |	Симптомы.Код,
	                 |	Симптомы.Симптом КАК Симптом
	                 |ИЗ
	                 |	Справочник.Симптомы КАК Симптомы
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	Симптом";
			
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	
	ДБФ=Новый XBAse;
	
	ДБФ.Кодировка=КодировкаXBase.OEM;
	
	ДБФ.поля.Добавить("CODE","N",9,0);
	ДБФ.поля.Добавить("NAME","S",250,0);
	
	ДБФ.СоздатьФайл(ФайлДляАптек); 

	Пока Выборка.Следующий() Цикл
		
		
		ДБФ.Добавить();
		ДБФ.CODE=Формат(Выборка.Код,"ЧГ=0");
		ДБФ.Name=Выборка.Симптом;
		ДБФ.Записать();
		
	КонецЦикла;	 
	
	ДБФ.ЗакрытьФайл();
	
	Попытка
		УдалитьФайлы(ФайлАрхиваДляАптек);
	Исключение
	КонецПопытки;
	
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ФайлДляАптек,ФайлАрхиваДляАптек);
	
	//=========================  Выгружаем симптомы и товар ===================================
	ФайлДляАптек = КаталогКоммон + "gsymptom.DBF";
	ФайлАрхиваДляАптек = КаталогКоммон + "gsymptom.ZIP";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	СимптомыИТовар.Симптом.Код КАК КодСимптома,
	                 |	СимптомыИТовар.Товар.Код КАК КодТовара
	                 |ИЗ
	                 |	Справочник.СимптомыИТовар КАК СимптомыИТовар
	                 |ГДЕ
	                 |	СимптомыИТовар.Симптом.УчаствуетВЗаменах = ИСТИНА";
			
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	
	ДБФ=Новый XBAse;
	
	ДБФ.Кодировка=КодировкаXBase.OEM;
	
	ДБФ.поля.Добавить("IDSYMPTOM","N",9,0);
	ДБФ.поля.Добавить("IDGOOD","N",10,0);
	
	ДБФ.СоздатьФайл(ФайлДляАптек); 

	Пока Выборка.Следующий() Цикл
		
		
		ДБФ.Добавить();
		ДБФ.IDSYMPTOM	= Формат(Выборка.КодСимптома,"ЧГ=0");
		ДБФ.IDGOOD		= Формат(Выборка.КодТовара,"ЧГ=0");
		ДБФ.Записать();
		
	КонецЦикла;	 
	
	ДБФ.ЗакрытьФайл();
	
	Попытка
		УдалитьФайлы(ФайлАрхиваДляАптек);
	Исключение
	КонецПопытки;
	
	ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ФайлДляАптек,ФайлАрхиваДляАптек);
	
	
КонецПроцедуры


Процедура ВыгрузитьСправочники() Экспорт
	
	ВыгрузитьАптеки();
	ВыгрузитьКонтрагентов();
	ВыгрузитьТипыДисконтныхКарт();
	ВыгрузитьСимптомыИТовар();
	
КонецПроцедуры
//Процедура ВыгрузкаНовыхАптекВИнфолек(РегламентноеЗадание, Параметры)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ВложенныйЗапрос.Склад,
//	|	ВложенныйЗапрос.Склад.Код КАК КодАптеки,
//	|	ВложенныйЗапрос.Склад.Наименование КАК Наименование,
//	|	ВложенныйЗапрос.Склад.НомерАптеки КАК НомерАптеки,
//	|	ВложенныйЗапрос.Код
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		ПартииЖНВЛСОстатки.Склад КАК Склад,
//	|		ЕСТЬNULL(ДанныеИнфолек.Код, 0) КАК Код
//	|	ИЗ
//	|		РегистрНакопления.ПартииЖНВЛС.Остатки(
//	|				&НаДату,
//	|				(НЕ Склад.ПометкаУдаления)
//	|					И Склад.ТипСклада = &ТипСклада) КАК ПартииЖНВЛСОстатки
//	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|				КодыАптек.Аптека КАК Аптека,
//	|				КодыАптек.Код КАК Код
//	|			ИЗ
//	|				Справочник.КодыАптек КАК КодыАптек
//	|			ГДЕ
//	|				КодыАптек.Владелец = &Инфолек) КАК ДанныеИнфолек
//	|			ПО ПартииЖНВЛСОстатки.Склад = ДанныеИнфолек.Аптека
//	|	ГДЕ
//	|		ПартииЖНВЛСОстатки.КолвоОстаток > 0) КАК ВложенныйЗапрос
//	|ГДЕ
//	|	ВложенныйЗапрос.Код = 0";
//	Запрос.УстановитьПараметр("НаДату",    КонецДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ТипСклада", Перечисления.ТипыМХ.Розн);
//	Запрос.УстановитьПараметр("Инфолек",   Справочники.Поставщики.НайтиПоКоду("693"));
//	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Выборка = Результат.Выбрать();
//	
//	КаталогОтправки = КаталогВременныхФайлов();
//	Имя             = "НовыеАптеки";
//	Файлзаказа      = Имя + ".xls";
//	Попытка
//		Excel = Новый COMОбъект("Excel.Application");
//	Исключение
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось инициализировать Excel! " + ОписаниеОшибки());
//		Возврат;
//	КонецПопытки;
//	
//	Попытка
//		Excel.Workbooks.Add();
//		Лист = Excel.Sheets(1);
//		
//		Лист.Cells(1, 1).ColumnWidth = 14;
//		Лист.Cells(1, 1).Value       = "Код аптеки";
//		Лист.Cells(1, 2).ColumnWidth = 14;
//		Лист.Cells(1, 2).Value       = "Номер аптеки";
//		Лист.Cells(1, 3).ColumnWidth = 75;
//		Лист.Cells(1, 3).Value       = "Название/адрес";
//		
//		Сч = 2;
//		Пока Выборка.Следующий() Цикл 
//			Лист.Cells(Сч, 1).Value = Выборка.КодАптеки;
//			Лист.Cells(Сч, 2).Value = Выборка.НомерАптеки;
//			Лист.Cells(Сч, 3).Value = Выборка.Наименование;
//			
//			Сч = Сч + 1;
//		КонецЦикла;
//		
//		Excel.Application.DisplayAlerts = Ложь;
//		Попытка
//			Excel.ActiveWorkbook.SaveAs(КаталогОтправки + Файлзаказа, 43);
//		Исключение	
//			Excel.ActiveWorkbook.SaveAs(КаталогОтправки + Файлзаказа, 56);
//		КонецПопытки;	
//	Исключение
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось записать файл Excel! " + ОписаниеОшибки());
//		Excel.Quit();
//		Возврат;
//	КонецПопытки;
//	
//	Excel.Quit();
//	
//	// Выгружаем файл на фтп
//	Попытка
//		ФТП = Новый FTPСоединение(Параметры.ИнфолекФТП, , Параметры.ИнфолекФТПЛогин, Параметры.ИнфолекФТППароль, , Истина);
//		ФТП.УстановитьТекущийКаталог(Параметры.ИнфолекКаталогФТП);
//		ФТП.Записать(КаталогОтправки + Файлзаказа, Файлзаказа);
//	Исключение
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Ошибка при записи на FTP! " + ОписаниеОшибки());
//	КонецПопытки;
//	
//КонецПроцедуры

Процедура ЗаписатьЭлементXML(ЗаписьXML, Имя, Значение) 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	ЗаписьXML.ЗаписатьТекст(Значение);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, Имя, Значение) 
	
	Если Значение = "" Тогда
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + "/>");
	Иначе
		ЗаписьXML.ЗаписатьСтроку("<" + Имя + ">" + Значение + "</" + Имя + ">");
	КонецЕсли;
	
КонецПроцедуры

Функция КорректировкаСпецСимволовXML(Значение)
	
	//Возврат Значение;
	
   Результат = СтрЗаменить(Значение, "&", "&amp;");
   Результат = СтрЗаменить(Результат, "<", "&lt;");
   Результат = СтрЗаменить(Результат, ">", "&gt;");
   Результат = СтрЗаменить(Результат, """", "&quot;");
   Результат = СтрЗаменить(Результат, "'", "&apos;");
   Результат = СтрЗаменить(Результат, "/", "&#x2F;");	
   Возврат Результат;
   
КонецФункции



Процедура ВыгрузитьВАптекарск(РегламентноеЗадание, Справка)
	
	КаталогВыгрузки		= КаталогВременныхФайлов();
	ИмяФайла			= "ASSORT.DBF";
	ИмяФайлаСправочника	= "DICT.DBF";
	
	
	// Формируем файл остатков
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК ТоварКод
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПККН = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыАптек.Аптека,
	|	КодыАптек.Код,
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &Аптекарск
	|	И КодыАптек.Код <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.ТоварКод,
	|	РегПартии.СкладКод,
	|	РегПартии.ПартияКод,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
	|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			ТоварКод В
	|					(ВЫБРАТЬ
	|						ТЗТоваров.ТоварКод
	|					ИЗ
	|						ТЗТоваров)
	|				И СкладКод В
	|					(ВЫБРАТЬ
	|						вт.СкладКод
	|					ИЗ
	|						ТЗАптек КАК вт)) КАК РегПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО 
	|			 РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТоваров.ТоварКод КАК КодТовара,
	|	ТЗАптек.Код КАК КодАптеки,
	|	МАКСИМУМ(Остатки.Цена) КАК Цена,
	|	СУММА(Остатки.Остаток) КАК Остаток
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО Остатки.ТоварКод = ТЗТоваров.ТоварКод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗАптек КАК ТЗАптек
	|		ПО (ТЗАптек.СкладКод = Остатки.СкладКод)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗТоваров.ТоварКод,
	|	ТЗАптек.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Остатки
	|";

	Запрос.УстановитьПараметр("Аптекарск",	Справка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДБФ = Новый XBASE;
	ДБФ.Кодировка = КодировкаXBase.OEM;
	ДБФ.Поля.Добавить("med_id",	"N", 12, 0);
	ДБФ.Поля.Добавить("pid",	"N", 10, 0);	
	ДБФ.Поля.Добавить("price",	"N", 12, 2);
	ДБФ.Поля.Добавить("qtty",	"N", 12, 2);
	  	
	Попытка
		ДБФ.СоздатьФайл(КаталогВыгрузки + ИмяФайла); 
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось создать файл dbf! " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ДБФ.АвтоСохранение = Истина;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		ДБФ.Добавить();	
		ДБФ.med_id	= Выборка.КодТовара;
		ДБФ.pid		= Выборка.КодАптеки;
		ДБФ.price	= Окр(Выборка.Цена, 2);
		ДБФ.qtty	= Выборка.Остаток;
		
	КонецЦикла;
	
	ДБФ.ЗакрытьФайл();

	// Формируем файл списка номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование,
	|	ПРЕДСТАВЛЕНИЕ(АССОРТИМЕНТНЫЙ_ПЛАН.ЛекФорма) КАК ЛекФорма,
	|	ПРЕДСТАВЛЕНИЕ(АССОРТИМЕНТНЫЙ_ПЛАН.Дозировка) КАК Дозировка,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.КолвоВУпаковке,
	|	ПРЕДСТАВЛЕНИЕ(АССОРТИМЕНТНЫЙ_ПЛАН.Производитель) КАК Производитель,
	|	ПРЕДСТАВЛЕНИЕ(АССОРТИМЕНТНЫЙ_ПЛАН.Страна) КАК Страна
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПККН = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДБФ = Новый XBASE;
	ДБФ.Кодировка = КодировкаXBase.OEM; 	
	
	ДБФ.Поля.Добавить("id",			"N", 12, 0);
	ДБФ.Поля.Добавить("name",		"S", 150);
	ДБФ.Поля.Добавить("form",		"S", 50);
	ДБФ.Поля.Добавить("dose",		"S", 20);
	ДБФ.Поля.Добавить("pack",		"S", 20);
	ДБФ.Поля.Добавить("mnf_name",	"S", 100);
	ДБФ.Поля.Добавить("mnf_cntry",	"S", 100);
	
	Попытка
		ДБФ.СоздатьФайл(КаталогВыгрузки + ИмяФайлаСправочника); 
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось создать файл dbf! " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ДБФ.АвтоСохранение = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 		
		ДБФ.Добавить();	
		ДБФ.id			= Выборка.Код;
		ДБФ.name		= Выборка.Наименование;
		ДБФ.form		= Выборка.ЛекФорма;
		ДБФ.dose		= Выборка.Дозировка;
		ДБФ.pack		= ?(Выборка.КолвоВУпаковке=0, "", "№" + Формат(Выборка.КолвоВУпаковке, "ЧДЦ=; ЧГ=0"));
		ДБФ.mnf_name	= Выборка.Производитель;
		ДБФ.mnf_cntry	= Выборка.Страна;
		
	КонецЦикла;
	
	ДБФ.ЗакрытьФайл();
	
	
	// Выгружаем файлы на ФТП
	Попытка
		ФТП = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт), Справка.ФТПЛогин, Справка.ФТППароль, , Истина,,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
		
		ФТП.УстановитьТекущийКаталог(Справка.ФТПКаталог);
		ФТП.Записать(КаталогВыгрузки + ИмяФайла, ИмяФайла);
		
		ФТП.УстановитьТекущийКаталог("/dictionary/");
		ФТП.Записать(КаталогВыгрузки + ИмяФайлаСправочника, ИмяФайлаСправочника);
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Аптекарск: данные выгружены");
		
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Ошибка при записи на FTP! " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьФайлКонфигурации(ИмяФайла, РегламентноеЗадание)
	
	ЗаписьXML = Новый ЗаписьXML;
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось создать файл conf.xml! " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("config");
	ЗаписьXML.ЗаписатьНачалоЭлемента("dataStruct");
	ЗаписьXML.ЗаписатьНачалоЭлемента("colSet");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("column");
	ЗаписатьЭлементXML(ЗаписьXML, "name", "DRUG_ID");
	ЗаписатьЭлементXML(ЗаписьXML, "paramId", "1");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //column
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("column");
	ЗаписатьЭлементXML(ЗаписьXML, "name", "ORG_ID");
	ЗаписатьЭлементXML(ЗаписьXML, "paramId", "2");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //column
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("column");
	ЗаписатьЭлементXML(ЗаписьXML, "name", "QTTY");
	ЗаписатьЭлементXML(ЗаписьXML, "paramId", "3");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //column
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("column");
	ЗаписатьЭлементXML(ЗаписьXML, "name", "PRICE");
	ЗаписатьЭлементXML(ЗаписьXML, "paramId", "4");
	ЗаписьXML.ЗаписатьКонецЭлемента(); //column
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //colSet
	ЗаписьXML.ЗаписатьКонецЭлемента(); //dataStruct
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("dsRelSet");
	
	Возврат ЗаписьXML;
	
КонецФункции

//Процедура ЗагрузкаВыручек() Экспорт
//	
//	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ЗагрузкаВыручек");
//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Загрузка выручек запущена.");
//	
//	ОбработкаЗагрузкиDBF = Обработки.ЗагрузкаВыручекDBF.Создать();
//	ОбработкаЗагрузкиDBF.Загрузка();
//	
//	ОбработкаЗагрузки = Обработки.ЗагрузкаВыручек.Создать();
//	ОбработкаЗагрузки.Загрузка();
//	
//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Загрузка выручек завершена.");
//	
//КонецПроцедуры

Процедура ДобавитьЗаписьВЛог(РегламентноеЗадание, ТипЗаписи, Описание, Параметры = Неопределено, ОтправлятьПоПочте = Ложь) Экспорт
	
	Если РегламентноеЗадание.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	НоваяЗапись = Документы.ЛогРегламентныхЗаданий.СоздатьДокумент();
	НоваяЗапись.Дата = ТекущаяДата();
	НоваяЗапись.РегламентноеЗадание = РегламентноеЗадание;
	НоваяЗапись.ТипЗаписи = ТипЗаписи;
	НоваяЗапись.Описание = Описание;
	
	Если Параметры <> Неопределено Тогда
		Если Параметры["Аптека"] <> Неопределено Тогда
			НоваяЗапись.Аптека = Параметры["Аптека"];
		КонецЕсли;
		Если Параметры["Поставщик"] <> Неопределено Тогда
			НоваяЗапись.Поставщик = Параметры["Поставщик"];
		КонецЕсли;	
		НоваяЗапись.Параметры.Загрузить(ПодготовитьТаблицуПараметровЛога(Параметры));
	КонецЕсли;
	
	Попытка
		НоваяЗапись.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	Если ОтправлятьПоПочте Тогда
		
		СписокАдресов = ПолучитьАдресаДляОтправкиЛога(РегламентноеЗадание);
		Если СписокАдресов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстПисьма = РегламентноеЗадание.Наименование + "
		|_______________________________
		|" + Описание + "
		|_______________________________
		|
		|Дополнительные данные:
		|";
		
		Для Каждого СтрокаТаблицы Из НоваяЗапись.Параметры Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС + СтрокаТаблицы.Параметр + ": " + Строка(СтрокаТаблицы.Значение);
		КонецЦикла;
		
		УправлениеЭлектроннойПочтой.ОтправитьПисьмо(СписокАдресов, "Ошибка при выполнении регламентного задания", ТекстПисьма);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьЛогРегламентныхЗаданий(СрокХранения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛогРегламентныхЗаданий.Ссылка
	|ИЗ
	|	Документ.ЛогРегламентныхЗаданий КАК ЛогРегламентныхЗаданий
	|ГДЕ
	|	ЛогРегламентныхЗаданий.Дата < &Период";
	
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата() - СрокХранения * 86400));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка;
		Док.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьАдресаДляОтправкиЛога(РегламентноеЗадание)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентныеЗаданияАдресаДляОтправкиЛога.ЭлектронныйАдрес
	|ИЗ
	|	Справочник.РегламентныеЗадания.АдресаДляОтправкиЛога КАК РегламентныеЗаданияАдресаДляОтправкиЛога
	|ГДЕ
	|	РегламентныеЗаданияАдресаДляОтправкиЛога.Ссылка = &Ссылка
	|	И РегламентныеЗаданияАдресаДляОтправкиЛога.ЭлектронныйАдрес <> """"";
	
	Запрос.УстановитьПараметр("Ссылка", РегламентноеЗадание);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйАдрес");
	
КонецФункции	

Функция ПодготовитьТаблицуПараметровЛога(Соответствие)
	
	ПараметрыЛога = Новый ТаблицаЗначений;
	ПараметрыЛога.Колонки.Добавить("Параметр", Новый ОписаниеТипов("Строка"));
	ПараметрыЛога.Колонки.Добавить("Значение");
	
	Для Каждого ЭлементСоответствия Из Соответствие Цикл
		СтрокаЛога = ПараметрыЛога.Добавить();
		СтрокаЛога.Параметр = ЭлементСоответствия.Ключ;
		СтрокаЛога.Значение = ЭлементСоответствия.Значение;
	КонецЦикла;
	
	Возврат ПараметрыЛога;
	
КонецФункции

Функция ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентныеЗаданияПараметры.Параметр,
	|	РегламентныеЗаданияПараметры.Значение
	|ИЗ
	|	Справочник.РегламентныеЗадания.Параметры КАК РегламентныеЗаданияПараметры
	|ГДЕ
	|	РегламентныеЗаданияПараметры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РегламентноеЗадание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Параметры.Свойство(Выборка.Параметр) Тогда
			Параметры[Выборка.Параметр] = Выборка.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	Результат = Истина;
	
	Для Каждого ЭлементСтруктуры Из Параметры Цикл
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не задано значение параметра '" + ЭлементСтруктуры.Ключ + "'");
			Результат = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Процедура ВыгрузкаВПфайзер() Экспорт
//	
//	ОбработкаВыгрузки = Обработки.ВыгрузкаВПфайзер.Создать();
//	ОбработкаВыгрузки.НачПериода = НачалоДня(ТекущаяДата() - 86400);
//	ОбработкаВыгрузки.КонПериода = КонецДня(ТекущаяДата() - 86400);
//	ОбработкаВыгрузки.ОтправлятьПоПочте = Истина;
//	ОбработкаВыгрузки.ВыгрузитьЗаПроизвольныйПериод();
//	
//	Если День(ТекущаяДата()) = 5 Тогда
//		ОбработкаВыгрузки.НачПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
//		ОбработкаВыгрузки.КонПериода = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
//		ОбработкаВыгрузки.ВыгрузитьЗаМесяц();
//	КонецЕсли;	
//	
//КонецПроцедуры


//Процедура ВыгрузкаДанныхДляИнвентаризации() Экспорт
//	
//	Обработка = Обработки.ВыгрузкаДанныхДляИнвентаризации.Создать();
//	Обработка.Выгрузка();
//	
//КонецПроцедуры

//Процедура ЗагрузкаИнвентаризации() Экспорт
//	
//	Обработка = Обработки.ЗагрузкаИнвентаризации.Создать();
//	Обработка.Загрузка();
//	
//КонецПроцедуры

//Процедура ВыгрузкаПрайсов() Экспорт
//	
//	Обработка = Обработки.ВыгрузкаПрайсов.Создать();
//	Обработка.Выгрузка();
//	
//КонецПроцедуры

//Процедура ВыгрузкаСправочников() Экспорт
//	
//	Обработка = Обработки.ВыгрузкаСправочников.Создать();
//	Обработка.Выгрузка();
//	
//КонецПроцедуры

Функция ПолучитьСпайкиИКоробы(НастройкаПрайсЛиста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Связки.ТоварФирмы КАК ТоварСсылка,
	               |	Связки.ТоварФирмы.Код КАК КодТовара,
	               |	МИНИМУМ(Прайсы.КоличествоВСпайке) КАК КоличествоВСпайке,
	               |	МИНИМУМ(Прайсы.КоличествоВКоробе) КАК КоличествоВКоробе
	               |ИЗ
	               |	РегистрСведений.ПрайсЛисты КАК Прайсы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК Параметры
	               |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	               |			И (Параметры.Настройка = &Настройка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	               |		ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	               |			И Прайсы.Код = Связки.КодТовараПоставщика
	               |			И (Связки.Блокировка = ЛОЖЬ)
	               |ГДЕ
	               |	(Прайсы.КоличествоВСпайке > 0
	               |			ИЛИ Прайсы.КоличествоВКоробе > 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Связки.ТоварФирмы,
	               |	Связки.ТоварФирмы.Код";
	Запрос.УстановитьПараметр("Настройка",НастройкаПрайсЛиста);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;
	
КонецФункции


Функция ЗафиксироватьАктивностьРасчета(Аптека)
	
	МЗ = РегистрыСведений.ТекущийРасчетАвтозаказа.СоздатьМенеджерЗаписи();
	МЗ.Аптека = Аптека;
	МЗ.ДатаНачалаРасчета = ТекущаяДата();
	Попытка
		МЗ.Записать(Ложь);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция УдалитьАктивностьРасчета(Аптека)
	
	МЗ = РегистрыСведений.ТекущийРасчетАвтозаказа.СоздатьМенеджерЗаписи();
	МЗ.Аптека = Аптека;
	Для н = 0 по 2 Цикл
		Попытка
			МЗ.Прочитать();
			Прервать;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если МЗ.Выбран() Тогда
		Для н = 0 по 2 Цикл
			Попытка
				МЗ.Удалить();
				Прервать;
			Исключение
			КонецПопытки;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура РасчетАвтозаказа1() Экспорт
	
	//Получим список аптек
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №1 запущен.");
		
		СуммыЗакрытияТовараВПути = Новый Структура();
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,КоэффициентКуМакс2НаПлохихСкоростях,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоДнейПродаж. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;	
		
		Если ТипЗнч(Параметры.КоличествоДнейПродаж) <> Тип("Число") Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Тип значения параметра ""КоличествоДнейПродаж"" должен быть числовым. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;
		
		
		//Параметры.Вставить("ДопУсловиеОтбораАптек","И РеализацияККМ.Склад.Код366 = ""0""");
		Параметры.Вставить("ДопУсловиеОтбораАптек","И МХ.Код / 2 <> (ВЫРАЗИТЬ(МХ.Код / 2 КАК ЧИСЛО(10, 0)))");

		
		СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказа2016(Параметры);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список 1 аптек. Колво = " + СписокАптек.Количество());
		
		ДатаТочкиОтсчета = ТекущаяДата();
		ТаблицаДатРасчета = Новый ТаблицаЗначений();
		ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

		
		к = 28;
		НомерПериода = 5;
		Пока к > 0 Цикл	
			Если к%7 = 0 Тогда
				НомерПериода = НомерПериода - 1;
				Если НомерПериода = 4 Тогда
					КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
				ИначеЕсли НомерПериода = 3 Тогда
					НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 2 Тогда
					НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 1 Тогда
					НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				КонецЕсли;			
			КонецЕсли;
			стр = ТаблицаДатРасчета.Добавить();
			стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			к = к - 1;
		КонецЦикла;	
		НачалоПервыйПериод = стр.Дата;
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СуммыЗакрытияТовараВПути = Автозаказ.ПолучитьСуммыЗакрытияТоваровВПути(ТекущаяДата(),СписокАптек);
	Если НЕ СуммыЗакрытияТовараВПути = Неопределено Тогда
		Автозаказ.ОтправитьПисьмоОбОтменеЗакрытияТовараВПути(СуммыЗакрытияТовараВПути);
	КонецЕсли;

	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);
	
	Для Каждого Аптека Из СписокАптек Цикл 
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №1 принудительно остановлен.");
			Возврат;
		КонецЕсли;
		
		Если ЗафиксироватьАктивностьРасчета(Аптека) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(Аптека);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаA",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаA);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаBC",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаBC);
		ПараметрыРасчета.Вставить("КоэффициентКуМакс2НаПлохихСкоростях",Параметры.КоэффициентКуМакс2НаПлохихСкоростях);

				
		ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
		ЗначениеАВС       = НачалоДня(ДатыРасчетов.ДатаРасчетаABC);
		ЗначениеQminQmax  = НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости);
		ЗначениеАвтозаказ = НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа);
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем АВС
		Если ЗначениеАВС <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ВыбраннаяАптека = Новый Массив;
			ВыбраннаяАптека.Добавить(Аптека);
			Автозаказ.РасчетABC(ВыбраннаяАптека);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали АБС.");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Таблицу скорости

		Если (ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) ИЛИ ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата())) или Параметры.ОдинРасчетВДень = Ложь Тогда 
			ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажВремянка(Аптека, ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод));
		Иначе
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаРасчетаСкорости.Количество() = 0 Тогда
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Qmin-Qmax
		Если ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			Автозаказ.РассчитатьQminQmaxДляАптеки(ТаблицаРасчетаСкорости, Аптека, ПараметрыРасчета);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали QminQmax .");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Автозаказ
		Если ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательный2016(ТаблицаРасчетаСкорости, Аптека,ПараметрыРасчета,СуммыЗакрытияТовараВПути,ЗаводскиеПараметрыТовара);
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
			ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
			СуммаЛекарств = 0;
			СуммаПарафарм = 0;
			Для каждого стр из ТЗТипыДляЦО Цикл
				Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
					СуммаЛекарств = стр.Сумма;
				ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
					СуммаПарафарм = стр.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(Аптека);
			
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
				//Запись = НаборЗаписей.Добавить();
			Запись.Период       = ТекДата;
			Запись.Пользователь = Сотрудник;
			Запись.Склад        = Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(3));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= ДопДанные.СуммаВыручки;
			Запись.ДнейБезЗаказа			= ДопДанные.ДнейЗаказа;
			Запись.СуммаПоступленийЗаПериод	= ДопДанные.СуммаПоступленийЗаПериод;			
			Запись.СуммаПродажЗаПериод		= ДопДанные.СуммаПродажЗаПериод;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.НомерТаймСлота			= -1;
			Запись.СуммаЗаказаЛС			= СуммаЛекарств;
			Запись.СуммаЗаказаПФ			= СуммаПарафарм;
			Запись.РасчетПотребностиSAS		= Аптека.РасчетПотребностиSAS;
			
			Попытка
				Запись.Записать();
				Автозаказ.ОбновитьДатуРасчетаКоэффициента(Аптека, "Автозаказ");
			Исключение
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		УдалитьАктивностьРасчета(Аптека);
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №1 аптек завершен.");

	
КонецПроцедуры


Процедура РасчетАвтозаказа2() Экспорт
	
	//Получим список аптек
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №2 запущен.");
		
		СуммыЗакрытияТовараВПути = Новый Структура();
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,КоэффициентКуМакс2НаПлохихСкоростях,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоДнейПродаж. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;	
		
		Если ТипЗнч(Параметры.КоличествоДнейПродаж) <> Тип("Число") Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Тип значения параметра ""КоличествоДнейПродаж"" должен быть числовым. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;
		
		
		//Параметры.Вставить("ДопУсловиеОтбораАптек","И РеализацияККМ.Склад.Код366 = ""0""");
		Параметры.Вставить("ДопУсловиеОтбораАптек","И МХ.Код / 2 <> (ВЫРАЗИТЬ(МХ.Код / 2 КАК ЧИСЛО(10, 0)))");

		
		СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказа2016(Параметры);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список 2. Колво = " + СписокАптек.Количество());
		
		ДатаТочкиОтсчета = ТекущаяДата();
		ТаблицаДатРасчета = Новый ТаблицаЗначений();
		ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

		
		к = 28;
		НомерПериода = 5;
		Пока к > 0 Цикл	
			Если к%7 = 0 Тогда
				НомерПериода = НомерПериода - 1;
				Если НомерПериода = 4 Тогда
					КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
				ИначеЕсли НомерПериода = 3 Тогда
					НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 2 Тогда
					НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 1 Тогда
					НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				КонецЕсли;			
			КонецЕсли;
			стр = ТаблицаДатРасчета.Добавить();
			стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			к = к - 1;
		КонецЦикла;	
		НачалоПервыйПериод = стр.Дата;
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СуммыЗакрытияТовараВПути = Автозаказ.ПолучитьСуммыЗакрытияТоваровВПути(ТекущаяДата(),СписокАптек);
	Если НЕ СуммыЗакрытияТовараВПути = Неопределено Тогда
		Автозаказ.ОтправитьПисьмоОбОтменеЗакрытияТовараВПути(СуммыЗакрытияТовараВПути);
	КонецЕсли;

	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);
	
	Для Каждого Аптека Из СписокАптек Цикл 
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №2 принудительно остановлен.");
			Возврат;
		КонецЕсли;
		
		Если ЗафиксироватьАктивностьРасчета(Аптека) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(Аптека);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаA",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаA);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаBC",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаBC);
		ПараметрыРасчета.Вставить("КоэффициентКуМакс2НаПлохихСкоростях",Параметры.КоэффициентКуМакс2НаПлохихСкоростях);

				
		ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
		ЗначениеАВС       = НачалоДня(ДатыРасчетов.ДатаРасчетаABC);
		ЗначениеQminQmax  = НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости);
		ЗначениеАвтозаказ = НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа);
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем АВС
		Если ЗначениеАВС <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ВыбраннаяАптека = Новый Массив;
			ВыбраннаяАптека.Добавить(Аптека);
			Автозаказ.РасчетABC(ВыбраннаяАптека);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали АБС.");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Таблицу скорости

		Если (ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) ИЛИ ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата())) или Параметры.ОдинРасчетВДень = Ложь Тогда 
			ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажВремянка(Аптека, ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод));
		Иначе
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаРасчетаСкорости.Количество() = 0 Тогда
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Qmin-Qmax
		Если ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			Автозаказ.РассчитатьQminQmaxДляАптеки(ТаблицаРасчетаСкорости, Аптека, ПараметрыРасчета);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали QminQmax .");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Автозаказ
		Если ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательный2016(ТаблицаРасчетаСкорости, Аптека,ПараметрыРасчета,СуммыЗакрытияТовараВПути,ЗаводскиеПараметрыТовара);
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
			ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
			СуммаЛекарств = 0;
			СуммаПарафарм = 0;
			Для каждого стр из ТЗТипыДляЦО Цикл
				Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
					СуммаЛекарств = стр.Сумма;
				ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
					СуммаПарафарм = стр.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(Аптека);
			
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
				//Запись = НаборЗаписей.Добавить();
			Запись.Период       = ТекДата;
			Запись.Пользователь = Сотрудник;
			Запись.Склад        = Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= ДопДанные.СуммаВыручки;
			Запись.ДнейБезЗаказа			= ДопДанные.ДнейЗаказа;
			Запись.СуммаПоступленийЗаПериод	= ДопДанные.СуммаПоступленийЗаПериод;			
			Запись.СуммаПродажЗаПериод		= ДопДанные.СуммаПродажЗаПериод;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.НомерТаймСлота			= -1;
			Запись.СуммаЗаказаЛС			= СуммаЛекарств;
			Запись.СуммаЗаказаПФ			= СуммаПарафарм;
			Запись.РасчетПотребностиSAS		= Аптека.РасчетПотребностиSAS;

			
			Попытка
				Запись.Записать();
				Автозаказ.ОбновитьДатуРасчетаКоэффициента(Аптека, "Автозаказ");
			Исключение
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		УдалитьАктивностьРасчета(Аптека);
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №2 аптек завершен.");

	
КонецПроцедуры


Процедура РасчетАвтозаказа3() Экспорт
	
	//Получим список аптек
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №3 запущен.");
		
		СуммыЗакрытияТовараВПути = Новый Структура();
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,КоэффициентКуМакс2НаПлохихСкоростях,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоДнейПродаж. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;	
		
		Если ТипЗнч(Параметры.КоличествоДнейПродаж) <> Тип("Число") Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Тип значения параметра ""КоличествоДнейПродаж"" должен быть числовым. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;
		
		
		//Параметры.Вставить("ДопУсловиеОтбораАптек","И РеализацияККМ.Склад.Код366 = ""0""");
		Параметры.Вставить("ДопУсловиеОтбораАптек","И МХ.Код / 2 <> (ВЫРАЗИТЬ(МХ.Код / 2 КАК ЧИСЛО(10, 0)))");

		
		СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказа2016(Параметры);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список аптек. Колво = " + СписокАптек.Количество());
		
		ДатаТочкиОтсчета = ТекущаяДата();
		ТаблицаДатРасчета = Новый ТаблицаЗначений();
		ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

		
		к = 28;
		НомерПериода = 5;
		Пока к > 0 Цикл	
			Если к%7 = 0 Тогда
				НомерПериода = НомерПериода - 1;
				Если НомерПериода = 4 Тогда
					КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
				ИначеЕсли НомерПериода = 3 Тогда
					НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 2 Тогда
					НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 1 Тогда
					НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				КонецЕсли;			
			КонецЕсли;
			стр = ТаблицаДатРасчета.Добавить();
			стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			к = к - 1;
		КонецЦикла;	
		НачалоПервыйПериод = стр.Дата;
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СуммыЗакрытияТовараВПути = Автозаказ.ПолучитьСуммыЗакрытияТоваровВПути(ТекущаяДата(),СписокАптек);
	Если НЕ СуммыЗакрытияТовараВПути = Неопределено Тогда
		Автозаказ.ОтправитьПисьмоОбОтменеЗакрытияТовараВПути(СуммыЗакрытияТовараВПути);
	КонецЕсли;

	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);
	
	Для Каждого Аптека Из СписокАптек Цикл 
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №3 принудительно остановлен.");
			Возврат;
		КонецЕсли;
		
		Если ЗафиксироватьАктивностьРасчета(Аптека) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(Аптека);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаA",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаA);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаBC",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаBC);
		ПараметрыРасчета.Вставить("КоэффициентКуМакс2НаПлохихСкоростях",Параметры.КоэффициентКуМакс2НаПлохихСкоростях);

				
		ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
		ЗначениеАВС       = НачалоДня(ДатыРасчетов.ДатаРасчетаABC);
		ЗначениеQminQmax  = НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости);
		ЗначениеАвтозаказ = НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа);
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем АВС
		Если ЗначениеАВС <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ВыбраннаяАптека = Новый Массив;
			ВыбраннаяАптека.Добавить(Аптека);
			Автозаказ.РасчетABC(ВыбраннаяАптека);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали АБС.");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Таблицу скорости

		Если (ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) ИЛИ ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата())) или Параметры.ОдинРасчетВДень = Ложь Тогда 
			ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажВремянка(Аптека, ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод));
		Иначе
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаРасчетаСкорости.Количество() = 0 Тогда
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Qmin-Qmax
		Если ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			Автозаказ.РассчитатьQminQmaxДляАптеки(ТаблицаРасчетаСкорости, Аптека, ПараметрыРасчета);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали QminQmax .");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Автозаказ
		Если ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательный2016(ТаблицаРасчетаСкорости, Аптека,ПараметрыРасчета,СуммыЗакрытияТовараВПути,ЗаводскиеПараметрыТовара);
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
			ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
			СуммаЛекарств = 0;
			СуммаПарафарм = 0;
			Для каждого стр из ТЗТипыДляЦО Цикл
				Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
					СуммаЛекарств = стр.Сумма;
				ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
					СуммаПарафарм = стр.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(Аптека);
			
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
				//Запись = НаборЗаписей.Добавить();
			Запись.Период       = ТекДата;
			Запись.Пользователь = Сотрудник;
			Запись.Склад        = Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= ДопДанные.СуммаВыручки;
			Запись.ДнейБезЗаказа			= ДопДанные.ДнейЗаказа;
			Запись.СуммаПоступленийЗаПериод	= ДопДанные.СуммаПоступленийЗаПериод;			
			Запись.СуммаПродажЗаПериод		= ДопДанные.СуммаПродажЗаПериод;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.НомерТаймСлота			= -1;
			Запись.СуммаЗаказаЛС			= СуммаЛекарств;
			Запись.СуммаЗаказаПФ			= СуммаПарафарм;
			Запись.РасчетПотребностиSAS		= Аптека.РасчетПотребностиSAS;

			
			Попытка
				Запись.Записать();
				Автозаказ.ОбновитьДатуРасчетаКоэффициента(Аптека, "Автозаказ");
			Исключение
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		УдалитьАктивностьРасчета(Аптека);
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №3 аптек завершен.");

	
КонецПроцедуры


Процедура РасчетАвтозаказа4() Экспорт
	
	//Получим список аптек
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №4 запущен.");
		
		СуммыЗакрытияТовараВПути = Новый Структура();
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,КоэффициентКуМакс2НаПлохихСкоростях,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоДнейПродаж. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;	
		
		Если ТипЗнч(Параметры.КоличествоДнейПродаж) <> Тип("Число") Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Тип значения параметра ""КоличествоДнейПродаж"" должен быть числовым. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;
		
		
		//Параметры.Вставить("ДопУсловиеОтбораАптек","И РеализацияККМ.Склад.Код366 = ""0""");
		Параметры.Вставить("ДопУсловиеОтбораАптек","И МХ.Код / 2 <> (ВЫРАЗИТЬ(МХ.Код / 2 КАК ЧИСЛО(10, 0)))");

		
		СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказа2016(Параметры);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список аптек. Колво = " + СписокАптек.Количество());
		
		ДатаТочкиОтсчета = ТекущаяДата();
		ТаблицаДатРасчета = Новый ТаблицаЗначений();
		ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

		
		к = 28;
		НомерПериода = 5;
		Пока к > 0 Цикл	
			Если к%7 = 0 Тогда
				НомерПериода = НомерПериода - 1;
				Если НомерПериода = 4 Тогда
					КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
				ИначеЕсли НомерПериода = 3 Тогда
					НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 2 Тогда
					НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 1 Тогда
					НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				КонецЕсли;			
			КонецЕсли;
			стр = ТаблицаДатРасчета.Добавить();
			стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			к = к - 1;
		КонецЦикла;	
		НачалоПервыйПериод = стр.Дата;
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СуммыЗакрытияТовараВПути = Автозаказ.ПолучитьСуммыЗакрытияТоваровВПути(ТекущаяДата(),СписокАптек);
	Если НЕ СуммыЗакрытияТовараВПути = Неопределено Тогда
		Автозаказ.ОтправитьПисьмоОбОтменеЗакрытияТовараВПути(СуммыЗакрытияТовараВПути);
	КонецЕсли;

	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);
	
	Для Каждого Аптека Из СписокАптек Цикл 
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №4 принудительно остановлен.");
			Возврат;
		КонецЕсли;
		
		Если ЗафиксироватьАктивностьРасчета(Аптека) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(Аптека);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаA",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаA);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаBC",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаBC);
		ПараметрыРасчета.Вставить("КоэффициентКуМакс2НаПлохихСкоростях",Параметры.КоэффициентКуМакс2НаПлохихСкоростях);

				
		ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
		ЗначениеАВС       = НачалоДня(ДатыРасчетов.ДатаРасчетаABC);
		ЗначениеQminQmax  = НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости);
		ЗначениеАвтозаказ = НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа);
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем АВС
		Если ЗначениеАВС <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ВыбраннаяАптека = Новый Массив;
			ВыбраннаяАптека.Добавить(Аптека);
			Автозаказ.РасчетABC(ВыбраннаяАптека);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали АБС.");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Таблицу скорости

		Если (ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) ИЛИ ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата())) или Параметры.ОдинРасчетВДень = Ложь Тогда 
			ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажВремянка(Аптека, ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод));
		Иначе
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаРасчетаСкорости.Количество() = 0 Тогда
			УдалитьАктивностьРасчета(Аптека);
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Qmin-Qmax
		Если ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			Автозаказ.РассчитатьQminQmaxДляАптеки(ТаблицаРасчетаСкорости, Аптека, ПараметрыРасчета);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали QminQmax .");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Автозаказ
		Если ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательный2016(ТаблицаРасчетаСкорости, Аптека,ПараметрыРасчета,СуммыЗакрытияТовараВПути,ЗаводскиеПараметрыТовара);
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
			ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
			СуммаЛекарств = 0;
			СуммаПарафарм = 0;
			Для каждого стр из ТЗТипыДляЦО Цикл
				Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
					СуммаЛекарств = стр.Сумма;
				ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
					СуммаПарафарм = стр.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(Аптека);
			
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
				//Запись = НаборЗаписей.Добавить();
			Запись.Период       = ТекДата;
			Запись.Пользователь = Сотрудник;
			Запись.Склад        = Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= ДопДанные.СуммаВыручки;
			Запись.ДнейБезЗаказа			= ДопДанные.ДнейЗаказа;
			Запись.СуммаПоступленийЗаПериод	= ДопДанные.СуммаПоступленийЗаПериод;			
			Запись.СуммаПродажЗаПериод		= ДопДанные.СуммаПродажЗаПериод;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.НомерТаймСлота			= -1;
			Запись.СуммаЗаказаЛС			= СуммаЛекарств;
			Запись.СуммаЗаказаПФ			= СуммаПарафарм;
			Запись.РасчетПотребностиSAS		= Аптека.РасчетПотребностиSAS;

			
			Попытка
				Запись.Записать();
				Автозаказ.ОбновитьДатуРасчетаКоэффициента(Аптека, "Автозаказ");
			Исключение
				УдалитьАктивностьРасчета(Аптека);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		УдалитьАктивностьРасчета(Аптека);
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа №4 аптек завершен.");

	
КонецПроцедуры



Процедура РасчетАвтозаказа366() Экспорт
	
	//Получим список аптек
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа366");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа четных аптек запущен.");
		
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,КоэффициентКуМакс2НаПлохихСкоростях,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоДнейПродаж. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметры.КоличествоДнейПродаж) <> Тип("Число") Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Тип значения параметра ""КоличествоДнейПродаж"" должен быть числовым. Выполнение задания не может быть продолжено.");
			Возврат;
		КонецЕсли;
		
		//Параметры.Вставить("ДопУсловиеОтбораАптек","И РеализацияККМ.Склад.Код366 <> ""0""");
		//Параметры.Вставить("ДопУсловиеОтбораАптек","И РеализацияККМ.Склад.Код / 2 = (ВЫРАЗИТЬ(РеализацияККМ.Склад.Код / 2 КАК ЧИСЛО(10, 0)))");
		Параметры.Вставить("ДопУсловиеОтбораАптек","И МХ.Код / 2 = (ВЫРАЗИТЬ(МХ.Код / 2 КАК ЧИСЛО(10, 0)))");
		
		СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказа2016(Параметры);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список аптек четных аптек. Колво = " + СписокАптек.Количество());
		
		ДатаТочкиОтсчета = ТекущаяДата();
		
		ТаблицаДатРасчета = Новый ТаблицаЗначений();
		ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		
		к = 28;
		НомерПериода = 5;
		Пока к > 0 Цикл	
			Если к%7 = 0 Тогда
				НомерПериода = НомерПериода - 1;
				Если НомерПериода = 4 Тогда
					КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
				ИначеЕсли НомерПериода = 3 Тогда
					НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 2 Тогда
					НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 1 Тогда
					НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				КонецЕсли;			
			КонецЕсли;
			стр = ТаблицаДатРасчета.Добавить();
			стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			к = к - 1;
		КонецЦикла;	
		НачалоПервыйПериод = стр.Дата;
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СуммыЗакрытияТовараВПути = Автозаказ.ПолучитьСуммыЗакрытияТоваровВПути(ТекущаяДата(),СписокАптек);
	Если НЕ СуммыЗакрытияТовараВПути = Неопределено Тогда
		Автозаказ.ОтправитьПисьмоОбОтменеЗакрытияТовараВПути(СуммыЗакрытияТовараВПути);
	КонецЕсли;
	
	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);
	
	
	Для Каждого Аптека Из СписокАптек Цикл 
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа четных аптек принудительно остановлен.");
			Возврат;
		КонецЕсли;
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(Аптека);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаA",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаA);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаBC",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаBC);
		ПараметрыРасчета.Вставить("КоэффициентКуМакс2НаПлохихСкоростях",Параметры.КоэффициентКуМакс2НаПлохихСкоростях);


		
		ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
		ЗначениеАВС       = НачалоДня(ДатыРасчетов.ДатаРасчетаABC);
		ЗначениеQminQmax  = НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости);
		ЗначениеАвтозаказ = НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа);
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем АВС
		Если ЗначениеАВС <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ВыбраннаяАптека = Новый Массив;
			ВыбраннаяАптека.Добавить(Аптека);
			Автозаказ.РасчетABC(ВыбраннаяАптека);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали АБС.");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Таблицу скорости

		Если (ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) ИЛИ ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата())) или Параметры.ОдинРасчетВДень = Ложь Тогда 
			ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажВремянка(Аптека, ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод));
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаРасчетаСкорости.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Qmin-Qmax
		Если ЗначениеQminQmax <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			Автозаказ.РассчитатьQminQmaxДляАптеки(ТаблицаРасчетаСкорости, Аптека, ПараметрыРасчета);
			//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Рассчитали QminQmax .");

		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Автозаказ
		Если ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата()) или Параметры.ОдинРасчетВДень = Ложь Тогда
			ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательный2016(ТаблицаРасчетаСкорости, Аптека,ПараметрыРасчета,СуммыЗакрытияТовараВПути,ЗаводскиеПараметрыТовара);
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
			ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
			СуммаЛекарств = 0;
			СуммаПарафарм = 0;
			Для каждого стр из ТЗТипыДляЦО Цикл
				Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
					СуммаЛекарств = стр.Сумма;
				ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
					СуммаПарафарм = стр.Сумма;
				КонецЕсли;
			КонецЦикла;

			
			ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(Аптека);
			
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
				//Запись = НаборЗаписей.Добавить();
			Запись.Период       = ТекДата;
			Запись.Пользователь = Сотрудник;
			Запись.Склад        = Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= ДопДанные.СуммаВыручки;
			Запись.СуммаПоступленийЗаПериод	= ДопДанные.СуммаПоступленийЗаПериод;			
			Запись.СуммаПродажЗаПериод		= ДопДанные.СуммаПродажЗаПериод;
			Запись.ДнейБезЗаказа			= ДопДанные.ДнейЗаказа;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.НомерТаймСлота			= -1;
			Запись.СуммаЗаказаЛС			= СуммаЛекарств;
			Запись.СуммаЗаказаПФ			= СуммаПарафарм;
			
			Попытка
				Запись.Записать();
				Автозаказ.ОбновитьДатуРасчетаКоэффициента(Аптека, "Автозаказ");
			Исключение
				Продолжить;
			КонецПопытки;

		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа четных аптек завершен.");

	
КонецПроцедуры

Процедура РасчетАвтозаказаБезПересчетаСкоростей() Экспорт
	
	//Получим список аптек
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказаБезПересчетаСкоростей");
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа без пересчета запущен.");
		
		
		СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказаБезПересчетаСкоростей();

		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список аптек. Колво = " + СписокАптек.Количество());
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры);

		
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);

	
	Для Каждого Аптека Из СписокАптек Цикл 
		
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа принудительно остановлен.");
			Возврат;
		КонецЕсли;
		
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(Аптека);
		
		ДатыРасчетов = Автозаказ.ПолучитьСтруктуруДатРасчетовКоэффициентов(Аптека);
		//ЗначениеАВС       = НачалоДня(ДатыРасчетов.ДатаРасчетаABC);
		//ЗначениеQminQmax  = НачалоДня(ДатыРасчетов.ДатаРасчетаСкорости);
		ЗначениеАвтозаказ = НачалоДня(ДатыРасчетов.ДатаРасчетаАвтозаказа);
		
		//////////////////////////////////////////////////////////////////////////////////
		//Рассчитаем Автозаказ
		Если ЗначениеАвтозаказ <> НачалоДня(ТекущаяДата()) Тогда
			ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаТолькоПоМатрице(Аптека,ПараметрыРасчета,ЗаводскиеПараметрыТовара);
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
			ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
			СуммаЛекарств = 0;
			СуммаПарафарм = 0;
			Для каждого стр из ТЗТипыДляЦО Цикл
				Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
					СуммаЛекарств = стр.Сумма;
				ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
					СуммаПарафарм = стр.Сумма;
				КонецЕсли;
			КонецЦикла;

			
			ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(Аптека);			
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
			//	Запись = НаборЗаписей.Добавить();
				Запись.Период       = ТекДата;
				Запись.Пользователь = Сотрудник;
				Запись.Склад        = Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
 			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= ДопДанные.СуммаВыручки;
			Запись.ДнейБезЗаказа			= ДопДанные.ДнейЗаказа;
			Запись.СуммаПоступленийЗаПериод	= ДопДанные.СуммаПоступленийЗаПериод;			
			Запись.СуммаПродажЗаПериод		= ДопДанные.СуммаПродажЗаПериод;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.НомерТаймСлота			= 1;
			Запись.СуммаЗаказаЛС			= СуммаЛекарств;
			Запись.СуммаЗаказаПФ			= СуммаПарафарм;
			Запись.РасчетПотребностиSAS		= Аптека.РасчетПотребностиSAS;

			
            Записали = Ложь;
			Для ы=0 по 3 Цикл
				Попытка
					Запись.Записать();
					Автозаказ.ОбновитьДатуРасчетаКоэффициента(Аптека, "Автозаказ");
					Записали = Истина;
					Прервать;
				Исключение
					ОбщегоНазначения.Задержка(2);
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет автозаказа завершен.");

	
КонецПроцедуры

Процедура УдалениеСтарыхДанных() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("УдалениеСтарыхДанных");
	
	Параметры = Новый Структура("СрокХраненияРасчетовЗаказов, СрокХраненияЛогаРегламентныхЗаданий");
	
	Если НЕ ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Автозаказ.УдалениеРасчетовЗаказов(Параметры.СрокХраненияРасчетовЗаказов);
	
	ОчиститьЛогРегламентныхЗаданий(Параметры.СрокХраненияЛогаРегламентныхЗаданий);
	
КонецПроцедуры


Процедура РасчетАвтозаказаВторойТаймСлот() Экспорт
	
	
	//ВремяЗаказа = Константы.ВторойПериодЗаказа.Получить();
	ТаймСлот = Справочники.ТаймСлотыЗаказов.Второй;

	Если ТаймСлот.ВремяЗапуска = Дата(1,1,1) или ТаймСлот.Выключен Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяДата() <= НачалоДня(ТекущаяДата()) + (ТаймСлот.ВремяЗапуска  - Дата(1,1,1) ) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказаВторойТаймСлот");
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет 2 тайм слота запущен.");
	Параметры = Новый Структура("КоличествоЗаказовЗаЦикл");
	
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоЗаказовЗаЦикл. Выполнение задания не может быть продолжено.");
		Возврат;
	КонецЕсли;
	
	НеделяГода = НеделяГода(ТекущаяДата());
	ДеньСтрока = Формат(ТекущаяДата(),"ДФ=дддд");
	
	Если Цел(НеделяГода/2)=НеделяГода/2  Тогда
		Четность = "Четный";
	ИНаче
		Четность = "";
	КонецЕсли;
	Колонка = ДеньСтрока + Четность;	
	
	//				   
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			   |	СохраненныеРасчетыЗаказов.Склад
	//			   |ПОМЕСТИТЬ АптекиКЗаказу	
	//			   |ИЗ
	//			   |	РегистрСведений.СохраненныеРасчетыЗаказов КАК СохраненныеРасчетыЗаказов
	//			   |ГДЕ
	//			   |	СохраненныеРасчетыЗаказов.Период >= &ДатаНачалоДня
	//			   |	И НЕ СохраненныеРасчетыЗаказов.Склад.Фирма В (&Фирмы)
	//			   |;
	//			   |
	Если ТаймСлот.НаличиеПредыдущегоТаймслота = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиПервые.Склад
		|ПОМЕСТИТЬ АптекиКЗаказу
		|ИЗ
		|	Документ.ЗаявкаНаТовар КАК ЗаявкиПервые
		|ГДЕ
		|	ЗаявкиПервые.Дата >= &ДатаНачалоДня
		|	И ЗаявкиПервые.Проведен = ИСТИНА
		|	И ЗаявкиПервые.Склад.СубъектРФ В
		|			(ВЫБРАТЬ
		|				СубъектыРФ.Ссылка
		|			ИЗ
		|				Справочник.СубъектыРФ КАК СубъектыРФ
		|			ГДЕ
		|				СубъектыРФ.ВторойПериод = ИСТИНА)  
		|	И ЗаявкиПервые.Склад.СубъектРФ в 
		|				(ВЫБРАТЬ
		|					ТаймСлотыЗаказовСубъектыРФ.СубъектРФ КАК СубъектРФ
		|				ИЗ
		|					Справочник.ТаймСлотыЗаказов.СубъектыРФ КАК ТаймСлотыЗаказовСубъектыРФ
		|				ГДЕ
		|						ТаймСлотыЗаказовСубъектыРФ.Ссылка.НомерТаймСлота = 2  И ТаймСлотыЗаказовСубъектыРФ.Включен = ИСТИНА)
		|	И ЗаявкиПервые.НомерТаймСлота = 1  и ЗаявкиПервые.Склад.ИнтернетАптека = Ложь
		//|И  ЗаявкиПервые.Склад.ЗаказSAS = Ложь
		|;
		|
		|ВЫБРАТЬ
		|ГрафикиАвтозаказаГрафик.Аптека как Склад
		|ПОМЕСТИТЬ АптекиИзГрафика
		|ИЗ
		|	Справочник.ГрафикиАвтозаказа.График КАК ГрафикиАвтозаказаГрафик
		|ГДЕ
		|	ГрафикиАвтозаказаГрафик.Блокировка = ЛОЖЬ
		|	И ГрафикиАвтозаказаГрафик.Ссылка.Активный = ИСТИНА
		|	И ГрафикиАвтозаказаГрафик."+ Колонка +" = ИСТИНА;	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиВторые.Склад
		|ПОМЕСТИТЬ АптекиИсключения
		|ИЗ
		|	Документ.ЗаявкаНаТовар КАК ЗаявкиВторые
		|ГДЕ
		|	ЗаявкиВторые.Дата >= &ДатаНачалоДня
		|	И ЗаявкиВторые.ПометкаУдаления = ЛОЖЬ
		|	И ЗаявкиВторые.НомерТаймСлота = 2
		|ОБЪЕДИНИТь 
		|
		|ВЫБРАТЬ
		|	ТаймСлотыЗаказовАптекиИсключения.Аптека
		|ИЗ
		|	Справочник.ТаймСлотыЗаказов.АптекиИсключения КАК ТаймСлотыЗаказовАптекиИсключения
		|ГДЕ
		|	ТаймСлотыЗаказовАптекиИсключения.Ссылка.НомерТаймСлота = 2  и Истина = &ИспользоватьАптекиИсключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ  ПЕРВЫЕ "+ Формат(Параметры.КоличествоЗаказовЗаЦикл,"ЧГ=0") +"
		//|ВЫБРАТЬ ПЕРВЫЕ 20
		|	АптекиКЗаказу.Склад КАК Аптека,
		|	ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) как Приоритет,
		|	АптекиКЗаказу.Склад.ЗаказSAS КАК ЗаказSAS
		|ИЗ
		|	АптекиКЗаказу КАК АптекиКЗаказу
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений как ДопРеквизиты ПО ДопРеквизиты.Аптека = АптекиКЗаказу.Склад 
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АптекиИзГрафика как АптекиИзГрафика ПО АптекиИзГрафика.Склад = АптекиКЗаказу.Склад 	
		|ГДЕ
		|	НЕ АптекиКЗаказу.Склад В
		|				(ВЫБРАТЬ
		|					АптекиИсключения.Склад
		|				ИЗ
		|					АптекиИсключения)
		|УПОРЯДОЧИТЬ ПО  ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АптекиКЗаказу
		|;
		|УНИЧТОЖИТЬ АптекиИзГрафика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АптекиИсключения";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Различные
		|	СохраненныеРасчетыЗаказов.Склад Поместить АптекиКЗаказу
		|ИЗ
		|	РегистрСведений.СохраненныеРасчетыЗаказов КАК СохраненныеРасчетыЗаказов
		|ГДЕ
		|	СохраненныеРасчетыЗаказов.Период >= &ДатаНачалоДня
		|	И СохраненныеРасчетыЗаказов.Склад.СубъектРФ В
		|			(ВЫБРАТЬ
		|				СубъектыРФ.Ссылка
		|			ИЗ
		|				Справочник.СубъектыРФ КАК СубъектыРФ
		|			ГДЕ
		|				СубъектыРФ.ВторойПериод = ИСТИНА)
		|	И СохраненныеРасчетыЗаказов.Склад.СубъектРФ в 
		|				(ВЫБРАТЬ
		|					ТаймСлотыЗаказовСубъектыРФ.СубъектРФ КАК СубъектРФ
		|				ИЗ
		|					Справочник.ТаймСлотыЗаказов.СубъектыРФ КАК ТаймСлотыЗаказовСубъектыРФ
		|				ГДЕ
		|						ТаймСлотыЗаказовСубъектыРФ.Ссылка.НомерТаймСлота = 2  И ТаймСлотыЗаказовСубъектыРФ.Включен = ИСТИНА)
		|	И СохраненныеРасчетыЗаказов.НомерТаймСлота < 2 и СохраненныеРасчетыЗаказов.Склад.ИнтернетАптека = Ложь 
		//|И  СохраненныеРасчетыЗаказов.Склад.ЗаказSAS = Ложь
		|;
		|
		|ВЫБРАТЬ
		|ГрафикиАвтозаказаГрафик.Аптека как Склад
		|ПОМЕСТИТЬ АптекиИзГрафика
		|ИЗ
		|	Справочник.ГрафикиАвтозаказа.График КАК ГрафикиАвтозаказаГрафик
		|ГДЕ
		|	ГрафикиАвтозаказаГрафик.Блокировка = ЛОЖЬ
		|	И ГрафикиАвтозаказаГрафик.Ссылка.Активный = ИСТИНА
		|	И ГрафикиАвтозаказаГрафик."+ Колонка +" = ИСТИНА;		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиВторые.Склад
		|ПОМЕСТИТЬ АптекиИсключения
		|ИЗ
		|	Документ.ЗаявкаНаТовар КАК ЗаявкиВторые
		|ГДЕ
		|	ЗаявкиВторые.Дата >= &ДатаНачалоДня
		|	И ЗаявкиВторые.ПометкаУдаления = ЛОЖЬ
		|	И ЗаявкиВторые.НомерТаймСлота = 2
		|ОБЪЕДИНИТь 
		|
		|ВЫБРАТЬ
		|	ТаймСлотыЗаказовАптекиИсключения.Аптека
		|ИЗ
		|	Справочник.ТаймСлотыЗаказов.АптекиИсключения КАК ТаймСлотыЗаказовАптекиИсключения
		|ГДЕ
		|	ТаймСлотыЗаказовАптекиИсключения.Ссылка.НомерТаймСлота = 2  и Истина = &ИспользоватьАптекиИсключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ  ПЕРВЫЕ "+ Формат(Параметры.КоличествоЗаказовЗаЦикл,"ЧГ=0") +"
		//|ВЫБРАТЬ ПЕРВЫЕ 20
		|	АптекиКЗаказу.Склад КАК Аптека,
		|	ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) как Приоритет , 
		|	АптекиКЗаказу.Склад.ЗаказSAS КАК ЗаказSAS
		|ИЗ
		|	АптекиКЗаказу КАК АптекиКЗаказу
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений как ДопРеквизиты ПО ДопРеквизиты.Аптека = АптекиКЗаказу.Склад
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АптекиИзГрафика как АптекиИзГрафика ПО АптекиИзГрафика.Склад = АптекиКЗаказу.Склад
		|ГДЕ
		|	НЕ АптекиКЗаказу.Склад В
		|				(ВЫБРАТЬ
		|					АптекиИсключения.Склад
		|				ИЗ
		|					АптекиИсключения)  
		|УПОРЯДОЧИТЬ ПО  ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АптекиКЗаказу
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АптекиИзГрафика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АптекиИсключения";
	КонецЕсли;	
	
	//СписокФирм = Новый СписокЗначений;
	//СписокФирм.Добавить(Справочники.Фирмы.НайтиПоКоду(76));
	//СписокФирм.Добавить(Справочники.Фирмы.НайтиПоКоду(77));
	//СписокФирм.Добавить(Справочники.Фирмы.НайтиПоКоду(78));
	
	Запрос.УстановитьПараметр("ИспользоватьАптекиИсключения",ТаймСлот.ИспользоватьАптекиИсключения);
	Запрос.УстановитьПараметр("ДатаНачалоДня",НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Фирмы",СписокФирм);
	Аптеки = Запрос.Выполнить().Выгрузить();
	
	
	Если ТаймСлот.ЕстьОграничениеПоТовару Тогда
		ТЗОтбораПоТовару = РаботаСЗаказамиСервер.ПолучитьТаблицуОграниченийПоТоварам(ТаймСлот.НастройкиПостроителя, Неопределено);
	Иначе
		ТЗОтбораПоТовару = Неопределено;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Если ТаймСлот.ЕстьОграничениеПоТовару и НЕ ТЗОтбораПоТовару = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ТоварСсылка КАК ТоварСсылка,
		|	Т.КодТовара КАК КодТовара,
		|	Т.Заказать КАК Заказать,
		|	Т.Цена КАК Цена,
		|	Т.Сумма КАК Сумма,
		|	Т.ГруппаАП КАК ГруппаАП
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Товар КАК Товар
		|ПОМЕСТИТЬ ОтборПоТовару
		|ИЗ
		|	&ТЗОтбораПоТовару КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ТоварСсылка КАК ТоварСсылка,
		|	ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0)) КАК Заказать,
		|	ВТ.Цена КАК Цена,
		|	ВТ.Цена * (ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) КАК Сумма,
		|	ВТ.ГруппаАП КАК ГруппаАП
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТаймСлотыЗаказов.ГруппыАП КАК ТаймСлотыЗаказовГруппыАП
		|		ПО ВТ.ГруппаАП = ТаймСлотыЗаказовГруппыАП.ГруппаАП
		|			И (ТаймСлотыЗаказовГруппыАП.Включена = ИСТИНА)
		|			И (ТаймСлотыЗаказовГруппыАП.Ссылка.НомерТаймСлота = 2)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоТовару КАК ОтборПоТовару
		|		ПО ВТ.ТоварСсылка = ОтборПоТовару.Товар
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КРП.ТоварКод КАК ТоварКод,
		|			МАКСИМУМ(КРП.Коэффициент) КАК Коэффициент
		|		ИЗ
		|			РегистрСведений.КоэффициентРаспределенияПромоакции КАК КРП
		|		ГДЕ
		|			КРП.СкладКод = &СкладКод
		|			И КРП.ДатаДействияС <= &ТекДата
		|			И КРП.ДатаДействияПо >= &ТекДата
		|			И ИСТИНА = &УчитыватьПромоВЗаказе
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КРП.ТоварКод) КАК Коэфф
		|		ПО (Коэфф.ТоварКод = ВТ.КодТовара)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОтборПоТовару";
		
		Запрос.УстановитьПараметр("ТЗОтбораПоТовару",ТЗОтбораПоТовару);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.ТоварСсылка КАК ТоварСсылка,
		|	Т.КодТовара КАК КодТовара,
		|	Т.Заказать КАК Заказать,
		|	Т.Цена КАК Цена,
		|	Т.Сумма КАК Сумма,
		|	Т.ГруппаАП КАК ГруппаАП
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ТоварСсылка КАК ТоварСсылка,
		|	ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0)) КАК Заказать,
		|	ВТ.Цена КАК Цена,
		|	ВТ.Цена * (ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) КАК Сумма,
		|	ВТ.ГруппаАП КАК ГруппаАП
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТаймСлотыЗаказов.ГруппыАП КАК ТаймСлотыЗаказовГруппыАП
		|		ПО ВТ.ГруппаАП = ТаймСлотыЗаказовГруппыАП.ГруппаАП
		|			И (ТаймСлотыЗаказовГруппыАП.Включена = ИСТИНА)
		|			И (ТаймСлотыЗаказовГруппыАП.Ссылка.НомерТаймСлота = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КРП.ТоварКод КАК ТоварКод,
		|			МАКСИМУМ(КРП.Коэффициент) КАК Коэффициент
		|		ИЗ
		|			РегистрСведений.КоэффициентРаспределенияПромоакции КАК КРП
		|		ГДЕ
		|			КРП.СкладКод = &СкладКод
		|			И КРП.ДатаДействияС <= &ТекДата
		|			И КРП.ДатаДействияПо >= &ТекДата
		|			И ИСТИНА = &УчитыватьПромоВЗаказе
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КРП.ТоварКод) КАК Коэфф
		|		ПО (Коэфф.ТоварКод = ВТ.КодТовара)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
	КонецЕсли;
	
	УчитыватьПромоВЗаказе = Константы.УчитыватьПромоВЗаказе.Получить();

	Для каждого стр из Аптеки Цикл
		
			ОстановитьРасчет = Ложь;
			Попытка
				ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
			Исключение
			КонецПопытки;
		
			Если ОстановитьРасчет = Истина Тогда
				ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет АЗ-2 принудительно остановлен.");
				Возврат;
			КонецЕсли;			
			
			ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(стр.Аптека);
			Если стр.ЗаказSAS  = Истина Тогда
				ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаБезПересчетаСкоростейSAS(стр.Аптека,ПараметрыРасчета);
			Иначе
				ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательныйБезПересчетаСкоростей(стр.Аптека,ПараметрыРасчета);
			КонецЕсли;
			
			Если ТаблицаАвтозаказа = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			Если ТаблицаАвтозаказа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
            МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
			СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
			
			ОтборДляЗаявки = Новый Структура();
			ОтборДляЗаявки.Вставить("Заказано",Истина);
			ОтборДляЗаявки.Вставить("Исключение",0);
			ТЧТовара = ТаблицаАвтозаказа.Скопировать(ОтборДляЗаявки,"ТоварСсылка,КодТовара,Заказать,Цена,Сумма,ГруппаАП");
			
			ТаблицаАвтозаказа.Колонки.Удалить("ТоварСсылка");
			ТаблицаАвтозаказа.Колонки.Удалить("Заказано");			
			
			Запрос.УстановитьПараметр("Таб",ТЧТовара);
			Запрос.УстановитьПараметр("СкладКод", стр.Аптека.Код);
			Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
			Запрос.УстановитьПараметр("УчитыватьПромоВЗаказе", УчитыватьПромоВЗаказе);
			ТЧТовара = Запрос.Выполнить().Выгрузить();
			
			//ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(стр.Аптека);
			
			ТекДата   = ТекущаяДата();
			Сотрудник = ПараметрыСеанса.ТекущийСотр;
			
			Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Период.Установить(ТекДата);
			//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
			//НаборЗаписей.Отбор.Склад.Установить(Аптека);
			
			//НаборЗаписей.Прочитать();
			//Если НаборЗаписей.Количество() = 0 Тогда
				//Запись = НаборЗаписей.Добавить();
			Запись.Период       = ТекДата;
			Запись.Пользователь = Сотрудник;
			Запись.Склад        = стр.Аптека;
			//Иначе
			//	Запись = НаборЗаписей[0];
			//КонецЕсли;
			
			Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
			Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
			Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
			Запись.СуммаЗаказа				= СуммаЗаказа;
			Запись.СуммаВыручки				= 0;
			Запись.ДнейБезЗаказа			= 0;
            Запись.ДатаСозданияЗаписи		= ТекущаяДата();
			Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
			Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
			Запись.СтатусРасчета			= Перечисления.СтатусыРасчетовАвтозаказа.Выгрузить;
			Запись.НомерТаймСлота			= 2;
			Запись.РасчетПотребностиSAS		= стр.Аптека.РасчетПотребностиSAS;
			Запись.ПримененРасчетSAS 		= Истина;
			ДанныеSAS = SAS_Обмен.ПолучитьШапкуРасчетаПотребности(стр.Аптека.Код,НачалоДня(ТекущаяДата()));
			Запись.КоличествоКЗаказуSAS = ДанныеSAS.КоличествоКЗаказуSAS;
			Запись.СуммаЗаказаSAS = ДанныеSAS.СуммаЗаказаSAS;

			
			РасчетЗаписан = Ложь;
			Попытка
				Запись.Записать();
				РасчетЗаписан = Истина;
				Автозаказ.ОбновитьДатуРасчетаКоэффициента(стр.Аптека, "Автозаказ");
			Исключение
				ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ""+ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			Если РасчетЗаписан = Истина Тогда
				Док = Документы.ЗаявкаНаТовар.СоздатьДокумент();
				Док.Дата = ТекущаяДата();
				Док.Склад = стр.Аптека;
				Док.ТипЗаявки = Перечисления.ТипЗаявки.Автоматический;
				Если стр.Аптека.НаПрямыхПоставках = Ложь Тогда
					Док.Статус = Перечисления.СтатусЗаказаПоставщику.Создан;
					Док.Комментарий = "Аптека исключена из автоматического распределения";
				Иначе
					Док.Статус = Перечисления.СтатусЗаказаПоставщику.ОжидаетРаспределения;
				КонецЕсли;
				Док.НомерЗаявкиАптеки = "";
				Док.Менеджер = Сотрудник;
				Док.Приоритет = стр.Приоритет;
				Док.ИдентификаторРасчета = Запись.ИдентификаторЗаписи;
				Док.НомерТаймСлота = 2;
				ТЧДокумента = Док.Товар;
				
				Для каждого стрТЧ из ТЧТовара Цикл
					НоваяСтрока = ТЧДокумента.Добавить();	
					НоваяСтрока.Товар = стрТЧ.ТоварСсылка;
					НоваяСтрока.Количество = стрТЧ.Заказать;
					НОваяСтрока.Цена = стрТЧ.Цена;
					НоваяСтрока.Сумма = стрТЧ.Сумма;
				КонецЦикла;
				
				Док.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
			
			
			
		КонецЦикла;
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет 2 таймслота завершен." + Аптеки.Количество());
	
КонецПроцедуры



Процедура РасчетАвтозаказаТретийТаймСлот() Экспорт
	
	ТаймСлот = Справочники.ТаймСлотыЗаказов.Третий;

	Если ТаймСлот.ВремяЗапуска = Дата(1,1,1) или ТаймСлот.Выключен Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяДата() <= НачалоДня(ТекущаяДата()) + (ТаймСлот.ВремяЗапуска - Дата(1,1,1) ) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказаТретийТаймСлот");
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет 3 тайм слота запущен.");
	Параметры = Новый Структура("КоличествоЗаказовЗаЦикл");
	
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствует параметр - КоличествоЗаказовЗаЦикл. Выполнение задания не может быть продолжено.");
		Возврат;
	КонецЕсли;
	
	НеделяГода = НеделяГода(ТекущаяДата());
	ДеньСтрока = Формат(ТекущаяДата(),"ДФ=дддд");
	
	Если Цел(НеделяГода/2)=НеделяГода/2  Тогда
		Четность = "Четный";
	ИНаче
		Четность = "";
	КонецЕсли;
	Колонка = ДеньСтрока + Четность;	
	
	Если ТаймСлот.НаличиеПредыдущегоТаймслота = Истина Тогда
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиПервые.Склад
	|ПОМЕСТИТЬ АптекиКЗаказу
	|ИЗ
	|	Документ.ЗаявкаНаТовар КАК ЗаявкиПервые
	|ГДЕ
	|	ЗаявкиПервые.Дата >= &ДатаНачалоДня
	|	И ЗаявкиПервые.Проведен = ИСТИНА
	|	И ЗаявкиПервые.Склад.СубъектРФ В
	|			(ВЫБРАТЬ
	|				СубъектыРФ.Ссылка
	|			ИЗ
	|				Справочник.СубъектыРФ КАК СубъектыРФ
	|			ГДЕ
	|				СубъектыРФ.ТретийПериод = ИСТИНА)
	|	И ЗаявкиПервые.Склад.СубъектРФ в 
	|				(ВЫБРАТЬ
	|					ТаймСлотыЗаказовСубъектыРФ.СубъектРФ КАК СубъектРФ
	|				ИЗ
	|					Справочник.ТаймСлотыЗаказов.СубъектыРФ КАК ТаймСлотыЗаказовСубъектыРФ
	|				ГДЕ
	|						ТаймСлотыЗаказовСубъектыРФ.Ссылка.НомерТаймСлота = 3  И ТаймСлотыЗаказовСубъектыРФ.Включен = ИСТИНА)
	|	И ЗаявкиПервые.НомерТаймСлота = 2  И  ЗаявкиПервые.Склад.ЗаказSAS = Ложь  и  ЗаявкиПервые.Склад.ИнтернетАптека = Ложь
	|;
	|
	|ВЫБРАТЬ
	|ГрафикиАвтозаказаГрафик.Аптека как Склад
	|ПОМЕСТИТЬ АптекиИзГрафика
	|ИЗ
	|	Справочник.ГрафикиАвтозаказа.График КАК ГрафикиАвтозаказаГрафик
	|ГДЕ
	|	ГрафикиАвтозаказаГрафик.Блокировка = ЛОЖЬ
	|	И ГрафикиАвтозаказаГрафик.Ссылка.Активный = ИСТИНА
	|	И ГрафикиАвтозаказаГрафик."+ Колонка +" = ИСТИНА;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиВторые.Склад
	|ПОМЕСТИТЬ АптекиИсключения
	|ИЗ
	|	Документ.ЗаявкаНаТовар КАК ЗаявкиВторые
	|ГДЕ
	|	ЗаявкиВторые.Дата >= &ДатаНачалоДня
	|	И ЗаявкиВторые.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкиВторые.НомерТаймСлота = 3
	|
	|ОБЪЕДИНИТь 
	|
	|ВЫБРАТЬ
	|	ТаймСлотыЗаказовАптекиИсключения.Аптека
	|ИЗ
	|	Справочник.ТаймСлотыЗаказов.АптекиИсключения КАК ТаймСлотыЗаказовАптекиИсключения
	|ГДЕ
	|	ТаймСлотыЗаказовАптекиИсключения.Ссылка.НомерТаймСлота = 3  и Истина = &ИспользоватьАптекиИсключения	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  ПЕРВЫЕ "+ Формат(Параметры.КоличествоЗаказовЗаЦикл,"ЧГ=0") +"
	//|ВЫБРАТЬ ПЕРВЫЕ 20
	|	АптекиКЗаказу.Склад КАК Аптека,
	|	ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) как Приоритет
	|ИЗ
	|	АптекиКЗаказу КАК АптекиКЗаказу
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений как ДопРеквизиты ПО ДопРеквизиты.Аптека = АптекиКЗаказу.Склад 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АптекиИзГрафика как АптекиИзГрафика ПО АптекиИзГрафика.Склад = АптекиКЗаказу.Склад 		
	|ГДЕ
	|	НЕ АптекиКЗаказу.Склад В
	|				(ВЫБРАТЬ
	|					АптекиИсключения.Склад
	|				ИЗ
	|					АптекиИсключения)
	|УПОРЯДОЧИТЬ ПО  ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АптекиКЗаказу
	|;
	|
	|УНИЧТОЖИТЬ АптекиИзГрафика
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АптекиИсключения";
Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	|	СохраненныеРасчетыЗаказов.Склад Поместить АптекиКЗаказу
	|ИЗ
	|	РегистрСведений.СохраненныеРасчетыЗаказов КАК СохраненныеРасчетыЗаказов
	|ГДЕ
	|	СохраненныеРасчетыЗаказов.Период >= &ДатаНачалоДня
	|	И СохраненныеРасчетыЗаказов.Склад.СубъектРФ В
	|			(ВЫБРАТЬ
	|				СубъектыРФ.Ссылка
	|			ИЗ
	|				Справочник.СубъектыРФ КАК СубъектыРФ
	|			ГДЕ
	|				СубъектыРФ.ТретийПериод = ИСТИНА)
	|	И СохраненныеРасчетыЗаказов.Склад.СубъектРФ в 
	|				(ВЫБРАТЬ
	|					ТаймСлотыЗаказовСубъектыРФ.СубъектРФ КАК СубъектРФ
	|				ИЗ
	|					Справочник.ТаймСлотыЗаказов.СубъектыРФ КАК ТаймСлотыЗаказовСубъектыРФ
	|				ГДЕ
	|						ТаймСлотыЗаказовСубъектыРФ.Ссылка.НомерТаймСлота = 3  И ТаймСлотыЗаказовСубъектыРФ.Включен = ИСТИНА)
	|	И СохраненныеРасчетыЗаказов.НомерТаймСлота < 3   И  СохраненныеРасчетыЗаказов.Склад.ЗаказSAS = Ложь  и  СохраненныеРасчетыЗаказов.Склад.ИнтернетАптека = Ложь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиВторые.Склад
	|ПОМЕСТИТЬ АптекиИсключения
	|ИЗ
	|	Документ.ЗаявкаНаТовар КАК ЗаявкиВторые
	|ГДЕ
	|	ЗаявкиВторые.Дата >= &ДатаНачалоДня
	|	И ЗаявкиВторые.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкиВторые.НомерТаймСлота = 3
	|
	|ОБЪЕДИНИТь 
	|
	|ВЫБРАТЬ
	|	ТаймСлотыЗаказовАптекиИсключения.Аптека
	|ИЗ
	|	Справочник.ТаймСлотыЗаказов.АптекиИсключения КАК ТаймСлотыЗаказовАптекиИсключения
	|ГДЕ
	|	ТаймСлотыЗаказовАптекиИсключения.Ссылка.НомерТаймСлота = 3  и Истина = &ИспользоватьАптекиИсключения
	|;
	|
	|ВЫБРАТЬ
	|ГрафикиАвтозаказаГрафик.Аптека как Склад
	|ПОМЕСТИТЬ АптекиИзГрафика
	|ИЗ
	|	Справочник.ГрафикиАвтозаказа.График КАК ГрафикиАвтозаказаГрафик
	|ГДЕ
	|	ГрафикиАвтозаказаГрафик.Блокировка = ЛОЖЬ
	|	И ГрафикиАвтозаказаГрафик.Ссылка.Активный = ИСТИНА
	|	И ГрафикиАвтозаказаГрафик."+ Колонка +" = ИСТИНА;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  ПЕРВЫЕ "+ Формат(Параметры.КоличествоЗаказовЗаЦикл,"ЧГ=0") +"
	//|ВЫБРАТЬ ПЕРВЫЕ 20
	|	АптекиКЗаказу.Склад КАК Аптека,
	|	ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) как Приоритет
	|ИЗ
	|	АптекиКЗаказу КАК АптекиКЗаказу
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений как ДопРеквизиты ПО ДопРеквизиты.Аптека = АптекиКЗаказу.Склад 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АптекиИзГрафика как АптекиИзГрафика ПО АптекиИзГрафика.Склад = АптекиКЗаказу.Склад 	
	|ГДЕ
	|	НЕ АптекиКЗаказу.Склад В
	|				(ВЫБРАТЬ
	|					АптекиИсключения.Склад
	|				ИЗ
	|					АптекиИсключения)
	|УПОРЯДОЧИТЬ ПО  ЕСТЬNULL(ДопРеквизиты.ПриоритетПриРаспределенииЗаказа,0) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АптекиКЗаказу
	|;
	|
	|УНИЧТОЖИТЬ АптекиИзГрафика
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АптекиИсключения";
КонецЕсли;		
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ЗаявкиПервые.Склад
	//               |ПОМЕСТИТЬ ВыборкаПервогоПериода
	//               |ИЗ
	//               |	Документ.ЗаявкаНаТовар КАК ЗаявкиПервые
	//               |ГДЕ
	//               |	ЗаявкиПервые.Дата >= &ДатаНачалоДня
	//               |	И ЗаявкиПервые.Проведен = ИСТИНА
	//               |	И ЗаявкиПервые.Склад.СубъектРФ В
	//               |			(ВЫБРАТЬ
	//               |				СубъектыРФ.Ссылка
	//               |			ИЗ
	//               |				Справочник.СубъектыРФ КАК СубъектыРФ
	//               |			ГДЕ
	//               |				СубъектыРФ.ТретийПериод = ИСТИНА)
	//               |	И ЗаявкиПервые.НомерТаймСлота = 1
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ЗаявкиВторые.Склад
	//               |ПОМЕСТИТЬ ВыборкаВторогоПериода
	//               |ИЗ
	//               |	Документ.ЗаявкаНаТовар КАК ЗаявкиВторые
	//               |ГДЕ
	//               |	ЗаявкиВторые.Дата >= &ДатаНачалоДня
	//               |	И ЗаявкиВторые.Проведен = ИСТИНА
	//               |	И ЗаявкиВторые.Склад.СубъектРФ В
	//               |			(ВЫБРАТЬ
	//               |				СубъектыРФ.Ссылка
	//               |			ИЗ
	//               |				Справочник.СубъектыРФ КАК СубъектыРФ
	//               |			ГДЕ
	//               |				СубъектыРФ.ВторойПериод = ИСТИНА)
	//               |	И ЗаявкиВторые.НомерТаймСлота = 2
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ЗаявкиТретьи.Склад
	//               |ПОМЕСТИТЬ ВыборкаТретьегоПериода
	//               |ИЗ
	//               |	Документ.ЗаявкаНаТовар КАК ЗаявкиТретьи
	//               |ГДЕ
	//               |	ЗаявкиТретьи.Дата >= &ДатаНачалоДня
	//               |	И ЗаявкиТретьи.ПометкаУдаления = ЛОЖЬ
	//               |	И ЗаявкиТретьи.Склад.СубъектРФ В
	//               |			(ВЫБРАТЬ
	//               |				СубъектыРФ.Ссылка
	//               |			ИЗ
	//               |				Справочник.СубъектыРФ КАК СубъектыРФ
	//               |			ГДЕ
	//               |				СубъектыРФ.ТретийПериод = ИСТИНА)
	//               |	И ЗаявкиТретьи.НомерТаймСлота = 3
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	МестаХранения.Ссылка,
	//               |	МестаХранения.Представление,
	//               |	Субъекты.ВторойПериод,
	//               |	ВЫБОР
	//               |		КОГДА ВыборкаВторогоПериода.Склад ЕСТЬ NULL 
	//               |			ТОГДА ЛОЖЬ
	//               |		ИНАЧЕ ИСТИНА
	//               |	КОНЕЦ КАК ВторойПериодГотов,
	//               |	Субъекты.ТретийПериод,
	//               |	ВЫБОР
	//               |		КОГДА ВыборкаТретьегоПериода.Склад ЕСТЬ NULL 
	//               |			ТОГДА ЛОЖЬ
	//               |		ИНАЧЕ ИСТИНА
	//               |	КОНЕЦ КАК ТретийПериодГотов
	//               |ПОМЕСТИТЬ ГрафикДня
	//               |ИЗ
	//               |	Справочник.МестаХранения КАК МестаХранения
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СубъектыРФ КАК Субъекты
	//               |		ПО (Субъекты.Ссылка = МестаХранения.СубъектРФ)
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыборкаПервогоПериода КАК ВыборкаПервогоПериода
	//               |		ПО (ВыборкаПервогоПериода.Склад = МестаХранения.Ссылка)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаВторогоПериода КАК ВыборкаВторогоПериода
	//               |		ПО (ВыборкаВторогоПериода.Склад = МестаХранения.Ссылка)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаТретьегоПериода КАК ВыборкаТретьегоПериода
	//               |		ПО (ВыборкаТретьегоПериода.Склад = МестаХранения.Ссылка)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ  ПЕРВЫЕ  "+ Формат(Параметры.КоличествоЗаказовЗаЦикл,"ЧГ=0") +"
	//               |	ГрафикДня.Ссылка КАК Склад,
	//               |	ГрафикДня.ВторойПериод,
	//               |	ГрафикДня.ВторойПериодГотов,
	//               |	ГрафикДня.ТретийПериод,
	//               |	ГрафикДня.ТретийПериодГотов
	//               |ИЗ
	//               |	ГрафикДня КАК ГрафикДня
	//               |ГДЕ
	//               |	ГрафикДня.ВторойПериод = ГрафикДня.ВторойПериодГотов
	//               |	И ГрафикДня.ТретийПериод <> ГрафикДня.ТретийПериодГотов
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |УНИЧТОЖИТЬ ВыборкаПервогоПериода
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |УНИЧТОЖИТЬ ВыборкаВторогоПериода
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |УНИЧТОЖИТЬ ГрафикДня";
				   
				   
		Запрос.УстановитьПараметр("ДатаНачалоДня",НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ИспользоватьАптекиИсключения",ТаймСлот.ИспользоватьАптекиИсключения);
		
		Аптеки = Запрос.Выполнить().Выгрузить();
		
		
	Если ТаймСлот.ЕстьОграничениеПоТовару Тогда
		ТЗОтбораПоТовару = РаботаСЗаказамиСервер.ПолучитьТаблицуОграниченийПоТоварам(ТаймСлот.НастройкиПостроителя);
	Иначе
		ТЗОтбораПоТовару = Неопределено;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Если ТаймСлот.ЕстьОграничениеПоТовару и НЕ ТЗОтбораПоТовару = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ТоварСсылка КАК ТоварСсылка,
		|	Т.КодТовара КАК КодТовара,
		|	Т.Заказать КАК Заказать,
		|	Т.Цена КАК Цена,
		|	Т.Сумма КАК Сумма,
		|	Т.ГруппаАП КАК ГруппаАП
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Товар КАК Товар
		|ПОМЕСТИТЬ ОтборПоТовару
		|ИЗ
		|	&ТЗОтбораПоТовару КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ТоварСсылка КАК ТоварСсылка,
		|	ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0)) КАК Заказать,
		|	ВТ.Цена КАК Цена,
		|	ВТ.Цена * (ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) КАК Сумма,
		|	ВТ.ГруппаАП КАК ГруппаАП
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТаймСлотыЗаказов.ГруппыАП КАК ТаймСлотыЗаказовГруппыАП
		|		ПО ВТ.ГруппаАП = ТаймСлотыЗаказовГруппыАП.ГруппаАП
		|			И (ТаймСлотыЗаказовГруппыАП.Включена = ИСТИНА)
		|			И (ТаймСлотыЗаказовГруппыАП.Ссылка.НомерТаймСлота = 3)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоТовару КАК ОтборПоТовару
		|		ПО ВТ.ТоварСсылка = ОтборПоТовару.Товар
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КРП.ТоварКод КАК ТоварКод,
		|			МАКСИМУМ(КРП.Коэффициент) КАК Коэффициент
		|		ИЗ
		|			РегистрСведений.КоэффициентРаспределенияПромоакции КАК КРП
		|		ГДЕ
		|			КРП.СкладКод = &СкладКод
		|			И КРП.ДатаДействияС <= &ТекДата
		|			И КРП.ДатаДействияПо >= &ТекДата
		|			И ИСТИНА = &УчитыватьПромоВЗаказе
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КРП.ТоварКод) КАК Коэфф
		|		ПО (Коэфф.ТоварКод = ВТ.КодТовара)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОтборПоТовару";
					   
		Запрос.УстановитьПараметр("ТЗОтбораПоТовару",ТЗОтбораПоТовару);
					   
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.ТоварСсылка КАК ТоварСсылка,
		|	Т.КодТовара КАК КодТовара,
		|	Т.Заказать КАК Заказать,
		|	Т.Цена КАК Цена,
		|	Т.Сумма КАК Сумма,
		|	Т.ГруппаАП КАК ГруппаАП
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ТоварСсылка КАК ТоварСсылка,
		|	ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0)) КАК Заказать,
		|	ВТ.Цена КАК Цена,
		|	ВТ.Цена * (ВЫРАЗИТЬ(ВТ.Заказать * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) КАК Сумма,
		|	ВТ.ГруппаАП КАК ГруппаАП
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТаймСлотыЗаказов.ГруппыАП КАК ТаймСлотыЗаказовГруппыАП
		|		ПО ВТ.ГруппаАП = ТаймСлотыЗаказовГруппыАП.ГруппаАП
		|			И (ТаймСлотыЗаказовГруппыАП.Включена = ИСТИНА)
		|			И (ТаймСлотыЗаказовГруппыАП.Ссылка.НомерТаймСлота = 3)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КРП.ТоварКод КАК ТоварКод,
		|			МАКСИМУМ(КРП.Коэффициент) КАК Коэффициент
		|		ИЗ
		|			РегистрСведений.КоэффициентРаспределенияПромоакции КАК КРП
		|		ГДЕ
		|			КРП.СкладКод = &СкладКод
		|			И КРП.ДатаДействияС <= &ТекДата
		|			И КРП.ДатаДействияПо >= &ТекДата
		|			И ИСТИНА = &УчитыватьПромоВЗаказе
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КРП.ТоварКод) КАК Коэфф
		|		ПО (Коэфф.ТоварКод = ВТ.КодТовара)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
	КонецЕсли;
		
	УчитыватьПромоВЗаказе = Константы.УчитыватьПромоВЗаказе.Получить();
	
	Для каждого стр из Аптеки Цикл
		
		ОстановитьРасчет = Ложь;
		Попытка
			ОстановитьРасчет = Константы.ОстановитьРасчетАвтозаказов.Получить();
		Исключение
		КонецПопытки;
		
		Если ОстановитьРасчет = Истина Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет АЗ-3 принудительно остановлен.");
			Возврат;
		КонецЕсли;			
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(стр.Аптека);
		ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательныйБезПересчетаСкоростей(стр.Аптека,ПараметрыРасчета);
		
		
		Если ТаблицаАвтозаказа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
		МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
		СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");
		
		ОтборДляЗаявки = Новый Структура();
		ОтборДляЗаявки.Вставить("Заказано",Истина);
		ОтборДляЗаявки.Вставить("Исключение",0);
		ТЧТовара = ТаблицаАвтозаказа.Скопировать(ОтборДляЗаявки,"ТоварСсылка,КодТовара,Заказать,Цена,Сумма,ГруппаАП");
		
		ТаблицаАвтозаказа.Колонки.Удалить("ТоварСсылка");
		ТаблицаАвтозаказа.Колонки.Удалить("Заказано");			
		
		Запрос.УстановитьПараметр("Таб",ТЧТовара);
		Запрос.УстановитьПараметр("СкладКод", стр.Аптека.Код);
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("УчитыватьПромоВЗаказе", УчитыватьПромоВЗаказе);
		ТЧТовара = Запрос.Выполнить().Выгрузить();
		
		
		
		//ДопДанные = Автозаказ.ВернутьСуммуВыручкиИДнейЗаказа(стр.Аптека);
		
		
		ТекДата   = ТекущаяДата();
		Сотрудник = ПараметрыСеанса.ТекущийСотр;
		
		Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Период.Установить(ТекДата);
		//НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник);
		//НаборЗаписей.Отбор.Склад.Установить(Аптека);
		
		//НаборЗаписей.Прочитать();
		//Если НаборЗаписей.Количество() = 0 Тогда
		//Запись = НаборЗаписей.Добавить();
		Запись.Период       = ТекДата;
		Запись.Пользователь = Сотрудник;
		Запись.Склад        = стр.Аптека;
		//Иначе
		//	Запись = НаборЗаписей[0];
		//КонецЕсли;
		
		Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(9));
		Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
		Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
		Запись.СуммаЗаказа				= СуммаЗаказа;
		Запись.СуммаВыручки				= 0;
		Запись.ДнейБезЗаказа			= 0;
		Запись.ДатаСозданияЗаписи		= ТекущаяДата();
		Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
		Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
		Запись.СтатусРасчета			= Перечисления.СтатусыРасчетовАвтозаказа.Выгрузить;
		Запись.НомерТаймСлота			= 3;
		Запись.РасчетПотребностиSAS		= стр.Аптека.РасчетПотребностиSAS;
		ДанныеSAS = SAS_Обмен.ПолучитьШапкуРасчетаПотребности(стр.Аптека.Код,НачалоДня(ТекущаяДата()));
		Запись.КоличествоКЗаказуSAS = ДанныеSAS.КоличествоКЗаказуSAS;
		Запись.СуммаЗаказаSAS = ДанныеSAS.СуммаЗаказаSAS;
		
		
		
		РасчетЗаписан = Ложь;
		Попытка
			Запись.Записать();
			РасчетЗаписан = Истина;
			Автозаказ.ОбновитьДатуРасчетаКоэффициента(стр.Аптека, "Автозаказ");
		Исключение
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ""+ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если РасчетЗаписан = Истина Тогда
			Док = Документы.ЗаявкаНаТовар.СоздатьДокумент();
			Док.Дата = ТекущаяДата();
			Док.Склад = стр.Аптека;
			Док.ТипЗаявки = Перечисления.ТипЗаявки.Автоматический;
			Если стр.Аптека.НаПрямыхПоставках = Ложь Тогда
				Док.Статус = Перечисления.СтатусЗаказаПоставщику.Создан;
				Док.Комментарий = "Аптека исключена из автоматического распределения";
			Иначе
				Док.Статус = Перечисления.СтатусЗаказаПоставщику.ОжидаетРаспределения;
			КонецЕсли;
			Док.НомерЗаявкиАптеки = "";
			Док.Менеджер = Сотрудник;
			Док.Приоритет = стр.Приоритет;
			Док.ИдентификаторРасчета = Запись.ИдентификаторЗаписи;
			Док.НомерТаймСлота = 3;
			ТЧДокумента = Док.Товар;
			
			Для каждого стрТЧ из ТЧТовара Цикл
				НоваяСтрока = ТЧДокумента.Добавить();	
				НоваяСтрока.Товар = стрТЧ.ТоварСсылка;
				НоваяСтрока.Количество = стрТЧ.Заказать;
				НОваяСтрока.Цена = стрТЧ.Цена;
				НоваяСтрока.Сумма = стрТЧ.Сумма;					
			КонецЦикла;
			
			
			Док.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
		
		
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет 3 таймслота завершен." + Аптеки.Количество());
	
КонецПроцедуры


Процедура РасчетТорговПоАптекам() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетТоргов");
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет торгов запущен.");
	Параметры = Новый Структура("КоличествоДнейПотребности,КоличествоДнейПродаж,КоличествоДнейРаботыАптеки,ОтборАптек");
	
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отсутствуют параметры - КоличествоДнейПотребности,КоличествоДнейПродаж  Выполнение задания не может быть продолжено.");
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Если Параметры.ОтборАптек = "ПоПродажам" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияККМ.Склад КАК Склад,
		|	РеализацияККМ.Склад.Код КАК КодСклада,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(РеализацияККМ.Дата, ДЕНЬ)) КАК КоличествоВыручек
		|ПОМЕСТИТЬ ВЫБОРКА
		|ИЗ
		|	Документ.РеализацияККМ КАК РеализацияККМ
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РеализацияККМ.Дата, ДЕНЬ) МЕЖДУ &МинДата И &МаксДата
		|	И РеализацияККМ.Проведен = ИСТИНА
		|	И РеализацияККМ.Склад.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияККМ.Склад,
		|	РеализацияККМ.Склад.Код";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	МестаХранения.Ссылка КАК Склад,
		               |	МестаХранения.Код КАК КодСклада
		               |ИЗ
		               |	Справочник.МестаХранения КАК МестаХранения
		               |ГДЕ
		               |	МестаХранения.ПометкаУдаления = ЛОЖЬ
		               |	И МестаХранения.СубъектРФ В(&СписокСубъектов)";
		СписокСубъектов = Новый СписокЗначений;
		СписокСубъектов.Добавить(Справочники.СубъектыРФ.НайтиПоНаименованию("Москва",Истина));
		СписокСубъектов.Добавить(Справочники.СубъектыРФ.НайтиПоНаименованию("Московская область",Истина));
		Запрос.УстановитьПараметр("СписокСубъектов",СписокСубъектов);
		
	КонецЕсли;
				   
	МинДата = НачалоДня(ТекущаяДата() - Параметры.КоличествоДнейРаботыАптеки*86400);
	МаксДата = КонецДня(НачалоДня(ТекущаяДата())-1 );
	
	
	Запрос.УстановитьПараметр("МинДата", МинДата);
	Запрос.УстановитьПараметр("МаксДата", МаксДата );
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Пустая выборка аптек");
		Если Параметры.ОтборАптек = "ПоПродажам" Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Нет продаж по аптекам за " + Параметры.КоличествоДнейРаботыАптеки + " последних дней.");
		КонецЕсли;
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет торгов завершен.");
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Автозаказ.РасчетТорговПоАптеке(Выборка,Параметры);
		Если Результат.ЕстьОшибки Тогда
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Расчет торгов завершен.");
	
КонецПроцедуры

//Процедура ИмпортНакладных() Экспорт
//	
//	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ИмпортНакладных");
//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Импорт накладных запущен.");
//	
//	Обработка = Обработки.ИмпортНакладных.Создать();
//	Обработка.Загрузка();
//	
//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Импорт накладных завершен.");
//	
//КонецПроцедуры

//Процедура СворачиваниеАрхиваПрайсов() Экспорт
//	
//	НачатьТранзакцию();
//	
//	НаДату = ТекущаяДата() - 24*60*60;
//	
//	//Получим данные
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	НАЧАЛОПЕРИОДА(АрхивПрайсов.Период, ДЕНЬ) КАК Период,
//	|	АрхивПрайсов.Поставщик КАК Поставщик,
//	|	АрхивПрайсов.Код КАК Код,
//	|	АрхивПрайсов.Товар КАК Товар,
//	|	СРЕДНЕЕ(АрхивПрайсов.Цена) КАК Цена,
//	|	СРЕДНЕЕ(АрхивПрайсов.ЦенаПриведенная) КАК ЦенаПриведенная
//	|ИЗ
//	|	РегистрСведений.АрхивПрайсов КАК АрхивПрайсов
//	|ГДЕ
//	|	АрхивПрайсов.Период МЕЖДУ &ДатаНач И &ДатаКон
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	НАЧАЛОПЕРИОДА(АрхивПрайсов.Период, ДЕНЬ),
//	|	АрхивПрайсов.Поставщик,
//	|	АрхивПрайсов.Код,
//	|	АрхивПрайсов.Товар";
//	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НаДату));
//	Запрос.УстановитьПараметр("ДатаКон", КонецДня(НаДату));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	//Очистим регистр
//	//РегистрВыборка = РегистрыСведений.АрхивПрайсов.Выбрать(НачалоДня(НаДату), КонецДня(НаДату));
//	//Пока РегистрВыборка.Следующий() Цикл
//	//	РегистрВыборка.ПолучитьМенеджерЗаписи().Удалить();
//	//КонецЦикла;
//	Периоды = Новый Запрос;
//	Периоды.Текст = 
//	"ВЫБРАТЬ
//	|	АрхивПрайсов.Период
//	|ИЗ
//	|	РегистрСведений.АрхивПрайсов КАК АрхивПрайсов
//	|ГДЕ
//	|	АрхивПрайсов.Период МЕЖДУ &ДатаНач И &ДатаКон
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	АрхивПрайсов.Период";
//	Периоды.УстановитьПараметр("ДатаНач", НачалоДня(НаДату));
//	Периоды.УстановитьПараметр("ДатаКон", КонецДня(НаДату));
//	ВыборкаПериоды = Периоды.Выполнить().Выбрать();
//	Пока ВыборкаПериоды.Следующий() Цикл 
//		
//		НаборЗаписей = РегистрыСведений.АрхивПрайсов.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Период.Установить(ВыборкаПериоды.Период);
//		
//		НаборЗаписей.Записать();
//		
//	КонецЦикла;
//	
//	//Заполним регистр	
//	Пока Выборка.Следующий() Цикл 
//		
//		НаборЗаписей = РегистрыСведений.АрхивПрайсов.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
//		НаборЗаписей.Отбор.Поставщик.Установить(Выборка.Поставщик);
//		НаборЗаписей.Отбор.Код.Установить(Выборка.Код);
//		НаборЗаписей.Отбор.Товар.Установить(Выборка.Товар);
//		
//		Запись = НаборЗаписей.Добавить();
//		Запись.Период          = Выборка.Период;
//		Запись.Поставщик       = Выборка.Поставщик;
//		Запись.Код             = Выборка.Код;
//		Запись.Товар           = Выборка.Товар;
//		Запись.Цена            = Выборка.Цена;
//		Запись.ЦенаПриведенная = Выборка.ЦенаПриведенная;
//		
//		НаборЗаписей.Записать();
//		
//	КонецЦикла;
//	ЗафиксироватьТранзакцию();
//	
//КонецПроцедуры

//Процедура ВыгрузкаВФармэксперт() Экспорт
//	
//	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВыгрузкаВФармэксперт");
//	
//	Параметры = Новый Структура("АдресЭлектроннойПочты");
//	
//	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВремКаталог = КаталогВременныхФайлов() + "farmexpert";
//	СоздатьКаталог(ВремКаталог);
//	УдалитьФайлы(ВремКаталог,"*.*");
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	РеализацияККМТовар.Ссылка.Склад КАК Склад,
//	|	РеализацияККМТовар.Ссылка.Склад.Регион КАК Регион,
//	|	РеализацияККМТовар.Товар КАК Товар,
//	|	РеализацияККМТовар.Товар.ГруппаФТГ КАК ГруппаФТГ,
//	|	РеализацияККМТовар.ЕИТ.Код,
//	|	РеализацияККМТовар.Партия.БарКод КАК Штрихкод,
//	|	РеализацияККМТовар.Партия.Производитель КАК Производитель,
//	|	СУММА(РеализацияККМТовар.Количество) КАК Количество,
//	|	СУММА(РеализацияККМТовар.Сумма) КАК Сумма
//	|ИЗ
//	|	Документ.РеализацияККМ.Товар КАК РеализацияККМТовар
//	|ГДЕ
//	|	РеализацияККМТовар.Ссылка.Проведен
//	|	И РеализацияККМТовар.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РеализацияККМТовар.Ссылка.Склад,
//	|	РеализацияККМТовар.Ссылка.Склад.Регион,
//	|	РеализацияККМТовар.Товар,
//	|	РеализацияККМТовар.Партия.Производитель,
//	|	РеализацияККМТовар.Партия.БарКод,
//	|	РеализацияККМТовар.Товар.ГруппаФТГ,
//	|	РеализацияККМТовар.ЕИТ.Код
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Регион,
//	|	Склад,
//	|	Товар
//	|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), - 1)));
//	Запрос.УстановитьПараметр("КонДата", КонецМесяца(ДобавитьМесяц(ТекущаяДата(), - 1)));
//	
//	ТекРегион = Неопределено; ФайлВыгрузки = Неопределено;
//	
//	Сч = 0;
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Если ТекРегион <> Выборка.Регион Тогда
//			Если ФайлВыгрузки <> Неопределено Тогда
//				ФайлВыгрузки.ЗакрытьФайл();
//			КонецЕсли;	
//			ТекРегион = Выборка.Регион;
//			Сч = Сч + 1;
//			ФайлВыгрузки = ВернутьФайлВыгрузки(Выборка.Регион, Сч, ВремКаталог);
//		КонецЕсли;
//		ФайлВыгрузки.Добавить();
//		ФайлВыгрузки.SHOPNAME = СокрЛП(Выборка.Склад);
//		ФайлВыгрузки.GRPNAME = СокрЛП(Выборка.ГруппаФТГ);
//		ФайлВыгрузки.BARCODE = СокрЛП(Выборка.Штрихкод);
//		ФайлВыгрузки.INTCODE = Выборка.ЕИТКод;
//		ФайлВыгрузки.GOODNAME = СокрЛП(Выборка.Товар);
//		ФайлВыгрузки.SALESVALUE = Выборка.Сумма;
//		ФайлВыгрузки.SALESITEM = Выборка.Количество;
//		ФайлВыгрузки.FACTOR = 1;
//		ФайлВыгрузки.MANUFACT = СокрЛП(Выборка.Производитель);
//		ФайлВыгрузки.Записать();
//	КонецЦикла;
//	
//	Если ФайлВыгрузки <> Неопределено Тогда
//		ФайлВыгрузки.Записать();
//		ФайлВыгрузки.ЗакрытьФайл();
//		
//		Зипь= Новый ЗаписьZipФайла;
//		Зипь.Открыть(ВремКаталог + "\SALES.zip", , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
//		МассивФайлов = НайтиФайлы(ВремКаталог, "*.dbf");
//		Для Каждого СтрФайл Из МассивФайлов Цикл
//			Зипь.Добавить(СтрФайл.ПолноеИмя, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
//		КонецЦикла;
//		Зипь.Записать();
//		
//		СписокАдресов = Новый Массив;
//		СписокАдресов.Добавить(Параметры.АдресЭлектроннойПочты);
//		СписокВложений = Новый Массив;
//		СписокВложений.Добавить(ВремКаталог + "\SALES.zip");
//		УправлениеЭлектроннойПочтой.ОтправитьПисьмо(СписокАдресов, "Данные от ТС ""Аптечка"" за " + Формат(Запрос.Параметры.НачДата, "ДФ='ММММ гггг'"), , СписокВложений);
//	КонецЕсли;
//	
//	УдалитьФайлы(ВремКаталог);
//	
//КонецПроцедуры

//Функция ВернутьФайлВыгрузки(Регион, Сч, ИмяКаталогаВыгрузки)
//	
//	ФайлВыгрузки = Новый XBase;
//	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
//	ФайлВыгрузки.поля.Добавить("SHOPNAME", "S", 110);
//	ФайлВыгрузки.поля.Добавить("GRPNAME", "S", 110);
//	ФайлВыгрузки.поля.Добавить("BARCODE", "S", 13);
//	ФайлВыгрузки.поля.Добавить("INTCODE", "N", 12, 2);
//	ФайлВыгрузки.поля.Добавить("GOODNAME", "S", 120);
//	ФайлВыгрузки.поля.Добавить("SALESVALUE", "N", 12, 2);
//	ФайлВыгрузки.поля.Добавить("SALESITEM", "N", 12, 2);
//	ФайлВыгрузки.поля.Добавить("FACTOR", "N", 3, 0);
//	ФайлВыгрузки.поля.Добавить("MANUFACT", "S", 80);
//	ФайлВыгрузки.СоздатьФайл(ИмяКаталогаВыгрузки + "\SALES_" + Сч + ".dbf");
//	
//	Возврат ФайлВыгрузки;
//	
//КонецФункции	

//Процедура КонтрольНовинокАП() Экспорт
//	
//	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("КонтрольНовинокАП");
//	
//	Параметры = Новый Структура("ЧислоМесяцев, АдресЭлектроннойПочты");
//	
//	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КаталогОтправки = КаталогВременныхФайлов();
//	Имя             = "УстаревшиеНовинки";
//	Файлзаказа      = Имя + ".xls";
//	Попытка
//		Excel = Новый COMОбъект("Excel.Application");
//		Excel.Workbooks.Add();
//		Лист = Excel.Sheets(1);
//		
//		Лист.Cells(1, 1).ColumnWidth = 75;
//		Лист.Cells(1, 1).Value       = "Аптека";
//		Лист.Cells(1, 2).ColumnWidth = 15;
//		Лист.Cells(1, 2).Value       = "Тип СТМ";
//		Лист.Cells(1, 3).ColumnWidth = 15;
//		Лист.Cells(1, 3).Value       = "Дата ввода в АП";
//		
//		Сч = 2;
//		ЕстьExcel = Истина;
//	Исключение
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось инициализировать Excel! " + ОписаниеОшибки());
//		ЕстьExcel = Ложь;
//	КонецПопытки;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка,
//	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипСТМ,
//	|	АССОРТИМЕНТНЫЙ_ПЛАН.ДатаВводаВАП
//	|ИЗ
//	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
//	|ГДЕ
//	|	АССОРТИМЕНТНЫЙ_ПЛАН.Новинка
//	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ДатаВводаВАП <= &ГраницаНовинок";
//	Запрос.УстановитьПараметр("ГраницаНовинок", ДобавитьМесяц(НачалоДня(ТекущаяДата()), Параметры.ЧислоМесяцев * -1));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл 
//		
//		Если Выборка.ТипСТМ = Перечисления.ТипыСТМ.СТМ ИЛИ Выборка.ТипСТМ = Перечисления.ТипыСТМ.УсловноСТМ Тогда 
//			
//			Если ЕстьExcel Тогда 
//				 
//				Лист.Cells(Сч, 1).Value = Строка(Выборка.Ссылка);
//				Лист.Cells(Сч, 2).Value = Строка(Выборка.ТипСТМ);
//				Лист.Cells(Сч, 3).Value = Формат(Выборка.ДатаВводаВАП, "ДФ=dd.MM.yyyy");
//				
//				Сч = Сч + 1;
//				
//			КонецЕсли;
//			
//		Иначе 
//			
//			ОбъектАП = Выборка.Ссылка.ПолучитьОбъект();
//			ОбъектАП.Новинка = Ложь;
//			Попытка
//				ОбъектАП.Записать();
//			Исключение
//			КонецПопытки;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ЕстьExcel Тогда 
//		
//		Excel.Application.DisplayAlerts = Ложь;
//		Попытка
//			Попытка
//				Excel.ActiveWorkbook.SaveAs(КаталогОтправки + Файлзаказа, 43);
//			Исключение	
//				Excel.ActiveWorkbook.SaveAs(КаталогОтправки + Файлзаказа, 56);
//			КонецПопытки;	
//		Исключение
//			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось записать файл Excel! " + ОписаниеОшибки());
//			Excel.Quit();
//			Возврат;
//		КонецПопытки;

//		Excel.Quit();
//		
//		Попытка
//			СписокАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Параметры.АдресЭлектроннойПочты, ";");
//			СписокВложений = Новый Массив;
//			СписокВложений.Добавить(КаталогОтправки + Файлзаказа);
//			УправлениеЭлектроннойПочтой.ОтправитьПисьмо(СписокАдресов, "Данные о устаревших новинках АП", , СписокВложений);
//		Исключение
//			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось отправить письмо! " + ОписаниеОшибки());
//		КонецПопытки;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура ОбновлениеПрайсовПоставщиков() Экспорт
	
	//ОМ21_ЗаказыПоставщикам.ОбновитьПрайсыПоставщиков(Справочники.РегламентныеЗадания.НайтиПоКоду("ОбновлениеПрайсовПоставщиков"));
	
КонецПроцедуры

//Процедура ЗагрузкаЗаказов() Экспорт
//	
//	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ЗагрузкаЗаказов");
//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Загрузка заказов запущена.");
//	
//	Обработка = Обработки.ЗагрузкаЗаказовDBF.Создать();
//	Обработка.Загрузка();
//	
//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Загрузка заказов завершена.");
//	
//КонецПроцедуры

//Процедура ЗагрузкаСправочникаЕГК() Экспорт
//	
//	Перем HTTP;
//	
//	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ЗагрузкаСправочникаЕГК");
//	
//	Параметры = Новый Структура("СерверИсточник, СтрокаПараметраПолучения");
//	
//	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();
//	ВремКаталог = КаталогВременныхФайлов() + "EGK";
//	СоздатьКаталог(ВремКаталог);
//	УдалитьФайлы(ВремКаталог,"*.*");
//	мИмяФайлаЗип = "egk_light.ZIP";
//	мИмяФайлаДБФ = "DRUGS.dbf";
//	
//	Попытка
//		
//		Если ОбработкаПолученияФайлов.ЗапроситьФайлыССервера(Параметры.СерверИсточник, Параметры.СтрокаПараметраПолучения, ВремКаталог + "\" + мИмяФайлаЗип, HTTP) <> Истина Тогда
//			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось установить соединение с сервером!");
//			Возврат;
//		Иначе
//			HTTP.Получить(Параметры.СтрокаПараметраПолучения, ВремКаталог + "\" + мИмяФайлаЗип);
//		КонецЕсли;
//		
//	Исключение
//		
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Неудачная попытка соединения! " + ОписаниеОшибки());
//		Возврат;
//		
//	КонецПопытки;
//	
//	ЗИП = Новый ЧтениеZipФайла;
//	НужныйФайлРазархивирован = Ложь;
//	Попытка
//		ЗИП.Открыть(ВремКаталог + "\" + мИмяФайлаЗип);
//		Для Каждого ЗипЭлем Из ЗИП.Элементы Цикл 
//			Если ЗипЭлем.Имя = мИмяФайлаДБФ Тогда 
//				ЗИП.Извлечь(ЗипЭлем, ВремКаталог + "\", РежимВосстановленияПутейФайловZIP.НеВосстанавливать);	
//				НужныйФайлРазархивирован = Истина;
//				Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	Исключение
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Битый архив! " + ОписаниеОшибки());
//		Возврат;
//	КонецПопытки;
//	
//	Если НЕ НужныйФайлРазархивирован Тогда 
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Файла" + мИмяФайлаДБФ + " в архиве нет!");
//		Возврат;
//	КонецЕсли;
//	
//	ЗагрузитьСправочникЕГК(РегламентноеЗадание, ВремКаталог + "\" + мИмяФайлаДБФ);
//	
//	УдалитьФайлы(ВремКаталог);
//	
//КонецПроцедуры

//Процедура ЗагрузитьСправочникЕГК(РегламентноеЗадание, ИмяФайла)
//	
//	Файл = Новый XBase;
//	Попытка
//		Файл.ОткрытьФайл(ИмяФайла);
//	Исключение
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Ошибка при открытии файла DBF! " + ОписаниеОшибки());
//		Возврат;
//	КонецПопытки;
//	
//	Если Файл.Поля.Найти("drug_id") = Неопределено ИЛИ Файл.Поля.Найти("drug_name") = Неопределено И Файл.Поля.Найти("drug_n_r") = Неопределено Тогда
//		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Неверный формат файла!");
//		Возврат;
//	КонецЕсли;
//	
//	СписокЕГК = Новый СписокЗначений;
//	НачатьТранзакцию();
//	
//	Файл.Первая();
//	Пока Истина Цикл
//		
//		Если НЕ Файл.Следующая() Тогда
//			Прервать;
//		КонецЕсли;
//		
//		КодЕГК = Файл.drug_id;
//		НаименованиеЕГК = ?(Файл.Поля.Найти("drug_name") <> Неопределено, СокрЛП(Файл.drug_name), СокрЛП(Файл.drug_n_r));
//		
//		Если КодЕГК = 0 ИЛИ ПустаяСтрока(НаименованиеЕГК) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ТекНоменклатура = Справочники.НоменклатураЕГК.НайтиПоКоду(КодЕГК);
//		Если ТекНоменклатура.Пустая() Тогда
//			НовыйЭлемент = Справочники.НоменклатураЕГК.СоздатьЭлемент();
//			НовыйЭлемент.Код = КодЕГК;
//			НовыйЭлемент.Наименование = НаименованиеЕГК;
//			НовыйЭлемент.Записать();
//			СписокЕГК.Добавить(НовыйЭлемент.Ссылка);
//		Иначе                                 
//			Если СокрЛП(ТекНоменклатура.Наименование) <> НаименованиеЕГК Тогда
//				Элемент = ТекНоменклатура.ПолучитьОбъект();
//				Элемент.Наименование = НаименованиеЕГК;
//				Элемент.Записать();
//			КонецЕсли;
//			СписокЕГК.Добавить(ТекНоменклатура);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	НоменклатураЕГК.Ссылка
//	|ИЗ
//	|	Справочник.НоменклатураЕГК КАК НоменклатураЕГК
//	|ГДЕ
//	|	(НЕ НоменклатураЕГК.Ссылка В (&СписокЕГК))";
//	Запрос.УстановитьПараметр("СписокЕГК", СписокЕГК);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл 
//		
//		Объект = Выборка.Ссылка.ПолучитьОбъект();
//		Объект.Удалить();
//		
//	КонецЦикла;
//	
//	ЗафиксироватьТранзакцию();
//	
//КонецПроцедуры

//Процедура ПересчетИтоговРегистровНакопления() Экспорт
//	
//	НаДату = НачалоМесяца(ТекущаяДата())-1;	
//	ПересчетРегистров(РегистрыНакопления, НаДату, Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
//	
//КонецПроцедуры

//Процедура ПересчетРегистров(МенеджерРегистров, НаДату, ОграничениеПоВидуРегистра = Неопределено)
//	
//	Для Каждого МенеджерРегистра ИЗ МенеджерРегистров Цикл
//		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерРегистра));
//		
//		Если ОграничениеПоВидуРегистра <> Неопределено И МетаданныеРегистра.ВидРегистра <> ОграничениеПоВидуРегистра Тогда
//			Продолжить;
//		КонецЕсли;
//		ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату)
//	
//	Если МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов()<НаДату Тогда
//		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(НаДату);
//	Иначе
//		МенеджерРегистра.ПересчитатьИтоги();
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура РасчетПростояВАптеках() Экспорт
//	
//	НеделяРасчета = ТекущаяДата() - 7*24*60*60;
//	
//	ДатаНач = НачалоНедели(НеделяРасчета);
//	ДатаКон = КонецНедели(НеделяРасчета);
//	
//	РассчитатьПростоиВАптеках(ДатаНач, ДатаКон);
//	
//КонецПроцедуры

//Процедура РассчитатьПростоиВАптеках(ДатаНач, ДатаКон, Аптека = Неопределено) Экспорт 
//	
//	Если НЕ ЗначениеЗаполнено(ДатаНач) ИЛИ НЕ ЗначениеЗаполнено(ДатаКон) ИЛИ ДатаНач > ДатаКон Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ТекДата = НачалоДня(ДатаНач);
//	
//	Пока ТекДата <= ДатаКон Цикл 
//		
//		НаборЗаписей = РегистрыСведений.ПростоиВАптеках.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Период.Установить(ТекДата);
//		Если Аптека <> Неопределено Тогда 
//			НаборЗаписей.Отбор.Аптека.Установить(Аптека);
//		КонецЕсли;
//		
//		ДатаНачПред = ДобавитьМесяц(ТекДата, -3);
//		ДатаКонПред = ТекДата - 1;
//		КолвоДней   = Окр((ДатаКонПред - ДатаНачПред)/(24*60*60), 0);
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ИсточникДанных.Склад КАК Аптека,
//		|	ИсточникДанных.Товар,
//		|	ИсточникДанных.Сумма,
//		|	&ДатаНач КАК Период
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		ПродажиОбороты.Склад КАК Склад,
//		|		ПродажиОбороты.Товар КАК Товар,
//		|		ПродажиОбороты.СуммаОборот / &КолвоДней КАК Сумма,
//		|		ЕСТЬNULL(ВЫБОР
//		|				КОГДА ПартииЖНВЛСОстаткиИОбороты.КолвоНачальныйОстаток > 0
//		|						ИЛИ ПартииЖНВЛСОстаткиИОбороты.КолвоКонечныйОстаток > 0
//		|						ИЛИ ПартииЖНВЛСОстаткиИОбороты.КолвоПриход + ПартииЖНВЛСОстаткиИОбороты.КолвоРасход > 0
//		|					ТОГДА ИСТИНА
//		|				ИНАЧЕ ЛОЖЬ
//		|			КОНЕЦ, ЛОЖЬ) КАК ОстатокЕсть
//		|	ИЗ
//		|		РегистрНакопления.Продажи.Обороты(&ДатаНачПред, &ДатаКонПред, , " + ?(Аптека = Неопределено, "", "Склад = &Склад") + ") КАК ПродажиОбороты
//		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииЖНВЛС.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , " + ?(Аптека = Неопределено, "", "Склад = &Склад") + ") КАК ПартииЖНВЛСОстаткиИОбороты
//		|			ПО ПродажиОбороты.Товар = ПартииЖНВЛСОстаткиИОбороты.Товар
//		|				И ПродажиОбороты.Склад = ПартииЖНВЛСОстаткиИОбороты.Склад) КАК ИсточникДанных
//		|ГДЕ
//		|	(НЕ ИсточникДанных.ОстатокЕсть)";
//		Запрос.УстановитьПараметр("ДатаНач",     НачалоДня(ТекДата));
//		Запрос.УстановитьПараметр("ДатаКон",     КонецДня(ТекДата));
//		Запрос.УстановитьПараметр("ДатаНачПред", ДатаНачПред);
//		Запрос.УстановитьПараметр("ДатаКонПред", ДатаКонПред);
//		Запрос.УстановитьПараметр("Склад",       Аптека);
//		Запрос.УстановитьПараметр("КолвоДней",   КолвоДней);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		#Если Клиент Тогда
//		Сч    = 1;
//		Колво = Выборка.Количество();	
//		#КонецЕсли
//		
//		Пока Выборка.Следующий() Цикл 
//			
//			#Если Клиент Тогда
//			Состояние(Формат(ТекДата, "ДФ=dd.MM.yyyy") + " - обрабатывается " + Строка(Сч) + " из " + Строка(Колво));
//			Сч = Сч + 1;	
//			#КонецЕсли
//			
//			Запись = НаборЗаписей.Добавить();
//			ЗаполнитьЗначенияСвойств(Запись, Выборка);
//			
//		КонецЦикла;
//		
//		НаборЗаписей.Записать();
//		
//		ТекДата = ТекДата + 24*60*60;
//		
//	КонецЦикла;
//	
//КонецПроцедуры


Процедура КонтрольРаботыРоботов() Экспорт
	
	ДопустимоеВремяПростоя = 1800;
	ВремяПроверки          = ТекущаяДата();
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("КонтрольРаботыРоботов");
	
	Для Каждого Стр Из РегламентноеЗадание.Параметры Цикл 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛогРегламентныхЗаданий.Ссылка
		|ИЗ
		|	Документ.ЛогРегламентныхЗаданий КАК ЛогРегламентныхЗаданий
		|ГДЕ
		|	ЛогРегламентныхЗаданий.РегламентноеЗадание = &РегламентноеЗадание
		|	И ЛогРегламентныхЗаданий.Дата >= &Дата";
		Запрос.УстановитьПараметр("РегламентноеЗадание", Стр.Значение);
		Запрос.УстановитьПараметр("Дата", ВремяПроверки - ДопустимоеВремяПростоя);
		
		Выборка = Запрос.Выполнить();
		Если НЕ Выборка.Пустой() Тогда 
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания[СокрЛП(Стр.Значение.Код)]);
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		
		Если СписокЗаданий.Количество() > 0 Тогда 
			Задание = СписокЗаданий.Получить(0);
			
			//Проверка на использование
			Если НЕ Задание.Использование Тогда 
				Продолжить;
			КонецЕсли;
			//Проверки на расписание
			Если ЗначениеЗаполнено(Задание.Расписание.ВремяНачала) 
				И (Задание.Расписание.ВремяНачала - НачалоДня(Задание.Расписание.ВремяНачала)) + ДопустимоеВремяПростоя > ВремяПроверки - НачалоДня(ВремяПроверки) Тогда 
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Задание.Расписание.ВремяЗавершения)
				И Задание.Расписание.ВремяЗавершения - НачалоДня(Задание.Расписание.ВремяЗавершения) < ВремяПроверки - НачалоДня(ВремяПроверки) Тогда 
				Продолжить;
			КонецЕсли;
			Если Задание.Расписание.ДниНедели.Найти(ДеньНедели(ВремяПроверки)) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			МетаданныеЗадания = Задание.Метаданные;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ИмяПользователя",                          Задание.ИмяПользователя);
			СтруктураПараметров.Вставить("ИнтервалПовтораПриАварийномЗавершении",    Задание.ИнтервалПовтораПриАварийномЗавершении);
			СтруктураПараметров.Вставить("Использование",                            Задание.Использование);
			СтруктураПараметров.Вставить("Ключ",                                     Задание.Ключ);
			СтруктураПараметров.Вставить("КоличествоПовторовПриАварийномЗавершении", Задание.КоличествоПовторовПриАварийномЗавершении);
			СтруктураПараметров.Вставить("Наименование",                             Задание.Наименование);
			СтруктураПараметров.Вставить("Параметры",                                Задание.Параметры);
			СтруктураПараметров.Вставить("РазделениеДанных",                         Задание.РазделениеДанных);
			СтруктураПараметров.Вставить("Расписание",                               Задание.Расписание);
			
			Задание.Удалить();
			
			НовЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
			Для Каждого СтрДанные Из СтруктураПараметров Цикл 
				НовЗадание[СтрДанные.Ключ] = СтрДанные.Значение;
			КонецЦикла;
			НовЗадание.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СверкаТоварныхОтчетов() Экспорт
	
	Обработка = Обработки.СверкаТоварныхОтчетов.Создать();
	Обработка.Загрузка();
	
КонецПроцедуры

Процедура СохранитьИсториюЗакупок(ДеньСохранения = Неопределено) Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ЗаполнениеИсторииЗакупок");
	//Начало НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам 	
	//Параметры = Новый Структура("ПериодХраненияЦены");
	Параметры = Новый Структура("ПериодХраненияЦены,ПериодХраненияЦеныПоТоварам");
	//Конец НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам 	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеньСохранения = Неопределено Тогда
		ДеньСохранения = ТекущаяДата()-60*60*24;
	КонецЕсли;
	
	//ТХТ = "ВЫБРАТЬ
	//      |	&НачДата КАК Период,
	//      |	ЗаказТовар.Ссылка.Склад.СубъектРФ КАК СубъектРФ,
	//      |	ЗаказТовар.Товар,
	//      |	СРЕДНЕЕ(ЗаказТовар.Цена) КАК Цена,
	//      |	ЗаказТовар.Ссылка.Поставщик.ПринадлежитГруппеКомпаний  как ПринадлежитГруппеКомпаний
	//      |ИЗ
	//      |	Документ.Заказ.Товар КАК ЗаказТовар
	//      |ГДЕ
	//      |	ЗаказТовар.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	//      |	И ЗаказТовар.Ссылка.Проведен = ИСТИНА
	//      |	И ЗаказТовар.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаказаПоставщику.ВыгруженПоставщику)
	//      |	И НЕ ЗаказТовар.Товар = ЗНАЧЕНИЕ(Справочник.Ассортиментный_план.ПустаяСсылка)
	//      |
	//      |СГРУППИРОВАТЬ ПО
	//      |	ЗаказТовар.Ссылка.Склад.СубъектРФ,
	//      |	ЗаказТовар.Товар,
	//      |	ЗаказТовар.Ссылка.Поставщик.ПринадлежитГруппеКомпаний";	
		  
	ТХТ = "ВЫБРАТЬ
		  |	&НачДата КАК Период,
	      |	ЗаказПоставщику.Товар,
	      |	ЗаказПоставщику.Склад.СубъектРФ как СубъектРФ,
	      |	ЗаказПоставщику.Поставщик.ПринадлежитГруппеКомпаний  как ПринадлежитГруппеКомпаний,
	      |	СРЕДНЕЕ(ЗаказПоставщику.ЦенаЗакуп) КАК Цена
	      |ИЗ
		  |	РегистрНакопления.ЗаказПоставщику КАК ЗаказПоставщику
		  |ГДЕ
		  |	ЗаказПоставщику.Период между &НачДата и &КонДата
		  |	И ЗаказПоставщику.Регистратор ССЫЛКА Документ.Заказ
		  //Начало НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам 			  
		  | И ВЫРАЗИТЬ(ЗаказПоставщику.Регистратор КАК Документ.Заказ).Статус = Значение(Перечисление.СтатусЗаказаПоставщику.ВыгруженПоставщику)
		  //Конец НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам 
		  |
	      |СГРУППИРОВАТЬ ПО
	      |	ЗаказПоставщику.Товар,
	      |	ЗаказПоставщику.Склад.СубъектРФ,
	      |	ЗаказПоставщику.Поставщик.ПринадлежитГруппеКомпаний";
		  
	Запрос = Новый запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("НачДата",НачалоДня(ДеньСохранения) );
	Запрос.УстановитьПараметр("КонДата",КонецДня(ДеньСохранения) );
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Запишем для собственных поставщиков
	Отбор = Новый Структура;
	Отбор.Вставить("ПринадлежитГруппеКомпаний",Истина);
	
	Набор = РегистрыСведений.ИсторияЗакупочнойЦеныСП.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(НачалоДня(ДеньСохранения));
	Набор.Загрузить(ТЗ.Скопировать(Отбор));
	Попытка
		Набор.Записать();
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
	КонецПопытки;

	//теперь затрем неактуальные данные
	ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ИсторияЗакупочнойЦены.Период
	      |ИЗ
	      |	РегистрСведений.ИсторияЗакупочнойЦеныСП КАК ИсторияЗакупочнойЦены
	      |ГДЕ
	      |	ИсторияЗакупочнойЦены.Период < &Период";
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Период",НачалоДня(ТекущаяДата()) - Параметры.ПериодХраненияЦены *60*60*24);
	Рез = Запрос.Выполнить();
	//Начало НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	//Если Рез.Пустой() Тогда
	//	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Выполнено" );
	//	Возврат;
	//КонецЕсли;
	//Конец НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ИсторияЗакупочнойЦеныСП.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.Период);
			Набор.Записать();
		КонецЦикла;
	КонецЕсли;
	
	//Начало НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	ТекстЗапросаСГруппировкойПоТоварамСП=	"
	|ВЫБРАТЬ
	|	ИсторияЗакупочнойЦены.Период КАК Период,
	|	ИсторияЗакупочнойЦены.Товар КАК Товар
	|ИЗ
	|	РегистрСведений.ИсторияЗакупочнойЦеныСП КАК ИсторияЗакупочнойЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦеныСП КАК ИсторияЗакупочнойЦены1
	|		ПО ИсторияЗакупочнойЦены.Товар = ИсторияЗакупочнойЦены1.Товар
	|			И ИсторияЗакупочнойЦены.СубъектРФ = ИсторияЗакупочнойЦены1.СубъектРФ
	|			И ИсторияЗакупочнойЦены.Период <= ИсторияЗакупочнойЦены1.Период
	|			И ИсторияЗакупочнойЦены.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ИсторияЗакупочнойЦены1.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ИсторияЗакупочнойЦены.Период >= &Период
	|			И ИсторияЗакупочнойЦены1.Период >= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияЗакупочнойЦены.Товар,
	|	ИсторияЗакупочнойЦены.Период,
	|	ИсторияЗакупочнойЦены.СубъектРФ
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > &ПериодХраненияЦеныПоТоварам
	|";
	
	Запрос.Текст = ТекстЗапросаСГруппировкойПоТоварамСП;
	Запрос.УстановитьПараметр("ПериодХраненияЦеныПоТоварам",Параметры.ПериодХраненияЦеныПоТоварам);
	РезультатЗапросаСГруппировкойПоТоварамСП = Запрос.Выполнить();
	
	Если НЕ РезультатЗапросаСГруппировкойПоТоварамСП.Пустой() Тогда
		ВыборкаСГруппировкойПоТоварамСП = РезультатЗапросаСГруппировкойПоТоварамСП.Выбрать();
		Пока ВыборкаСГруппировкойПоТоварамСП.Следующий() Цикл
			Набор = РегистрыСведений.ИсторияЗакупочнойЦеныСП.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ВыборкаСГруппировкойПоТоварамСП.Период);
			Набор.Отбор.Товар.Установить(ВыборкаСГруппировкойПоТоварамСП.Товар);
			Набор.Записать();
		КонецЦикла;
	КонецЕсли;
	//Конец НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	
	//Запишем для стрононних поставщиков
	Отбор = Новый Структура;
	Отбор.Вставить("ПринадлежитГруппеКомпаний",Ложь);
	
	Набор = РегистрыСведений.ИсторияЗакупочнойЦены.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(НачалоДня(ДеньСохранения));
	Набор.Загрузить(ТЗ.Скопировать(Отбор));
	Попытка
		Набор.Записать();
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
	КонецПопытки;

	//теперь затрем неактуальные данные
	ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ИсторияЗакупочнойЦены.Период
	      |ИЗ
	      |	РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
	      |ГДЕ
	      |	ИсторияЗакупочнойЦены.Период < &Период";
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Период",НачалоДня(ТекущаяДата()) - Параметры.ПериодХраненияЦены *60*60*24);
	Рез = Запрос.Выполнить();
	
	///Начало НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	//Если Рез.Пустой() Тогда
	//	Возврат;
	//КонецЕсли;
	//Конец НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	
	Если НЕ Рез.Пустой() Тогда
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ИсторияЗакупочнойЦены.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.Период);
			Набор.Записать();
		КонецЦикла;
	КонецЕсли;
	//Начало НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	ТекстЗапросаСГруппировкойПоТоварам=	"
	|ВЫБРАТЬ
	|	ИсторияЗакупочнойЦены.Период КАК Период,
	|	ИсторияЗакупочнойЦены.Товар КАК Товар
	|ИЗ
	|	РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены1
	|		ПО ИсторияЗакупочнойЦены.Товар = ИсторияЗакупочнойЦены1.Товар
	|			И ИсторияЗакупочнойЦены.Период <= ИсторияЗакупочнойЦены1.Период
	|		И ИсторияЗакупочнойЦены.СубъектРФ = ИсторияЗакупочнойЦены1.СубъектРФ  	
	|			И (ИсторияЗакупочнойЦены.Период <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (ИсторияЗакупочнойЦены1.Период <> ДАТАВРЕМЯ(1, 1, 1))
	|			И ИсторияЗакупочнойЦены.Период >= &Период
	|			И ИсторияЗакупочнойЦены1.Период >= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияЗакупочнойЦены.Товар,
	|	ИсторияЗакупочнойЦены.Период,
	|	ИсторияЗакупочнойЦены.СубъектРФ
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > &ПериодХраненияЦеныПоТоварам
	|";
	Запрос.Текст = ТекстЗапросаСГруппировкойПоТоварам;
	Запрос.УстановитьПараметр("ПериодХраненияЦеныПоТоварам",Параметры.ПериодХраненияЦеныПоТоварам);
	РезультатЗапросаСГруппировкойПоТоварам = Запрос.Выполнить();	
	Если НЕ РезультатЗапросаСГруппировкойПоТоварам.Пустой() Тогда 		
		ВыборкаСГруппировкойПоТоварам = РезультатЗапросаСГруппировкойПоТоварам.Выбрать();
		Пока ВыборкаСГруппировкойПоТоварам.Следующий() Цикл
			Набор = РегистрыСведений.ИсторияЗакупочнойЦены.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(ВыборкаСГруппировкойПоТоварам.Период);
			Набор.Отбор.Товар.Установить(ВыборкаСГруппировкойПоТоварам.Товар);
			Набор.Записать();
		КонецЦикла;
	КонецЕсли; 
	//Конец НЭТИ Барданов А.Ю. 29.12.2018 ENT-805 обработка параметра ПериодХраненияЦеныПоТоварам
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Выполнено" );
	
	
КонецПроцедуры

Процедура СохранениеИсторииЗакупок() Экспорт
	
	СохранитьИсториюЗакупок();	
	
КонецПроцедуры

Процедура СохранитьИсториюРозничныхЦен(ДеньСохранения = Неопределено) Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ЗаполнениеИсторииРозничныхЦен");
	
	Параметры = Новый Структура("КоличествоДатХранения");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеньСохранения = Неопределено Тогда
		ДеньСохранения = ТекущаяДата()-60*60*24;
	КонецЕсли;
	
	ТХТ = "ВЫБРАТЬ
	      |	&НачДата КАК Период,
	      |	ПартииЖНВЛС.Товар,
	      |	ПартииЖНВЛС.Товар.ЕдиницаПоУмолчанию.К КАК Коэффициент,
	      |	ПартииЖНВЛС.Склад.Регион КАК Регион,
	      |	ВЫРАЗИТЬ(СРЕДНЕЕ(ПартииЖНВЛС.СуммаРознСНДС / ПартииЖНВЛС.Колво * ПартииЖНВЛС.Товар.ЕдиницаПоУмолчанию.К) КАК ЧИСЛО(12, 2)) КАК Цена
	      |ИЗ
	      |	РегистрНакопления.ПартииЖНВЛС КАК ПартииЖНВЛС
	      |ГДЕ
	      |	ПартииЖНВЛС.Период МЕЖДУ &НачДата И &КонДата
	      |	И ПартииЖНВЛС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций.ПоступлениеТМЦ)
	      | И ПартииЖНВЛС.Колво > 0  
	      |СГРУППИРОВАТЬ ПО
	      |	ПартииЖНВЛС.Склад.Регион,
	      |	ПартииЖНВЛС.Товар,
	      |	ПартииЖНВЛС.Товар.ЕдиницаПоУмолчанию.К";	
		  
	Запрос = Новый запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("НачДата",НачалоДня(ДеньСохранения) );
	Запрос.УстановитьПараметр("КонДата",КонецДня(ДеньСохранения) );
	
	Набор = РегистрыСведений.ИсторияРозничнойЦены.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(НачалоДня(ДеньСохранения));
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Попытка
		Набор.Записать();
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
	КонецПопытки;

	//теперь затрем неактуальные данные
	//ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	  |	ИсторияЗакупочнойЦены.Период
	//	  |ИЗ
	//	  |	РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
	//	  |ГДЕ
	//	  |	ИсторияЗакупочнойЦены.Период < &Период";
	//Запрос.Текст = ТХТ;
	//Запрос.УстановитьПараметр("Период",НачалоДня(ТекущаяДата()) - Параметры.ПериодХраненияЦены *60*60*24);
	//Рез = Запрос.Выполнить();
	//Если Рез.Пустой() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Выборка = Рез.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Набор = РегистрыСведений.ИсторияЗакупочнойЦены.СоздатьНаборЗаписей();
	//	Набор.Отбор.Период.Установить(Выборка.Период);
	//	Набор.Записать();
	//КонецЦикла;
	
КонецПроцедуры

Процедура СохранениеИсторииРозничныхЦен() Экспорт
	
	СохранитьИсториюРозничныхЦен();	
	
КонецПроцедуры

Процедура Запись_В_ЛогЗапускаРегламентныхЗаданий(Задание,ТекДата,Событие,Сообщение) Экспорт
	МенЗап=РегистрыСведений.ЛогЗапускаРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	МенЗап.Задание=Задание;
	МенЗап.Дата=ТекДата;
	МенЗап.Время=ТекДата;
	
	менЗап.Прочитать();
	
	МенЗап.Задание=Задание;
	МенЗап.Дата=ТекДата;
	МенЗап.Время=ТекДата;
	
	МенЗап.Событие=Событие;
	МенЗап.Сообщение=Сообщение;
	
	МенЗап.Записать();
	
Конецпроцедуры	

Процедура Очистка_ЛогаЗапускаРегламентныхЗаданий_ЗаПериод(Задание,ДатаС, ДатаПо,ЭлементФормыНадпись=Неопределено)  Экспорт
	МенЗап=РегистрыСведений.ЛогЗапускаРегламентныхЗаданий.СоздатьНаборЗаписей();
	
	ТекДата=ДатаС;
	
	Пока ТекДата<=ДатаПо Цикл
		
		Если ЭлементФормыНадпись<>Неопределено ТОгда
			ЭлементФормыНадпись.Заголовок="Очистка лога за "+Формат(ТекДата,"ДФ=dd.MM.yyyy");
		КонецЕсли;	
			
		
		МенЗап.Отбор.Задание.Установить(Задание);
		МенЗап.Отбор.Дата.Установить(ТекДата);

		менЗап.Прочитать();
		
		МенЗап.Очистить();
		МенЗап.Записать();
		
		ТекДата=ТекДата+24*60*60;
	КонецЦикла;
Конецпроцедуры	

Процедура Очистка_ЛогаЗапускаРегламентныхЗаданий(Задание,Дата)  Экспорт
	Очистка_ЛогаЗапускаРегламентныхЗаданий_ЗаПериод(Задание,Дата, Дата);
Конецпроцедуры	

Процедура ЗагрузкаЭлектронныхСчетовФактур() Экспорт
	
	РЗ=Справочники.РегламентныеЗадания.НайтиПоКоду("ЭлСчФактуры");
	//---------------<Саморегистрация в справочнике>---------------------------// GtG // 22.05.2013 19:05:54
	Если РЗ.Пустая()=Истина Тогда
		ОбРз=Справочники.РегламентныеЗадания.СоздатьЭлемент();
		ОбРз.Код="ЭлСчФактуры";
		ОбРз.Наименование="Загрузка электронных счетов фактур";
		ОбРз.Записать();
		РЗ=ОбРз.Ссылка;
	КонецЕсли;	
		
	
	
	ДобавитьЗаписьВЛог(РЗ, Перечисления.ТипыЗаписейЛога.Информация, "Загрузка электронных сч.-фактур запущена.");
	
	ОбработкаЗагрузки = Обработки.ЭСФ_Робот.Создать();
	ОбработкаЗагрузки.ЗагрузкаДанныхИзДиадока();
	
	ДобавитьЗаписьВЛог(РЗ, Перечисления.ТипыЗаписейЛога.Информация, "Загрузка сч.-фактур завершена.");
	

	
КонецПроцедуры

Процедура ПересчетСрезаОстатковДляСС() Экспорт
	
	Запрос=Новый Запрос();
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	МестаХранения.Код как АптекаКод
	//               |ИЗ
	//               |	Справочник.МестаХранения КАК МестаХранения
	//               |ГДЕ
	//               |	МестаХранения.СторонаДоговораКомиссии = Значение(Перечисление.СтороныДоговораКомиссии.Комитент)";
	//Комитенты = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст= "ВЫБРАТЬ
	              |	АП.Ссылка КАК Товар,
	              |	ВЫРАЗИТЬ(ПартииЖНВЛСОстатки.КоличествоОстаток / АП.Коэффициент КАК ЧИСЛО(12, 0)) КАК Количество
	              |ИЗ
	              |	РегистрНакопления.УЗ_Партии.Остатки(, ) КАК ПартииЖНВЛСОстатки
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	              |		ПО ПартииЖНВЛСОстатки.ТоварКод = АП.Код
	              |ГДЕ
	              |	ПартииЖНВЛСОстатки.КоличествоОстаток > 0
	              |	И АП.Коэффициент > 0"; // Сгенерировано в GtG's Консоль запросов. 22.07.2013 11:35:26
	
	//Запрос.УстановитьПараметр("СписокСкладов",Комитенты.ВыгрузитьКолонку("АптекаКод"));			  
	РЕз=Запрос.Выполнить().Выгрузить();
	
	НЗ=РегистрыСведений.СрезОстатков_дляСС.СоздатьНаборЗаписей();
	
	НЗ.Прочитать();
	
	НЗ.Загрузить(Рез);
	
	НЗ.Записать();
	
	
КонецПроцедуры

	
//---------------<Загрузка выручки через CSV>---------------------------// GtG // 08.12.2013 20:25:01
Процедура Регламент_ВыручкаCSV_ЗаписьВЛог(Сообщение,Задание,УдалитьСтарыеЗаписи=ложь) Экспорт
	//ДатаЗаписи=ТекущаяДата();
	//
	//Если УдалитьСтарыеЗаписи=Истина ТОгда 
	//	// Чистим записи за 3 дня назад
	//	НЗ=РегистрыСведений.ЛогЗагрузкиЧеков.СоздатьНаборЗаписей();
	//	НЗ.Отбор.День.Установить(НачалоДня(ДатаЗаписи-3*24*60*60));
	//	НЗ.Прочитать();
	//	НЗ.Очистить();
	//	НЗ.Записать();
	//КонецЕсли; 
	//
	//ГуидЗаписи=Новый УникальныйИдентификатор();
	//
	//Мз=РегистрыСведений.ЛогЗагрузкиЧеков.СоздатьМенеджерЗаписи();
	//МЗ.Активность=Истина;
	//МЗ.Дата=ДатаЗаписи;
	//МЗ.День=НачалоДня(ДатаЗаписи);
	//МЗ.Задание=Задание;
	//МЗ.ГУИДЗаписиЛога=ГуидЗаписи;
	//
	//МЗ.Прочитать();
	//
	//МЗ.Активность=Истина;
	//МЗ.Дата=ДатаЗаписи;
	//МЗ.День=НачалоДня(ДатаЗаписи);
	//МЗ.Задание=Задание;
	//МЗ.ГУИДЗаписиЛога=ГуидЗаписи;
	//МЗ.Сообщение=Сообщение;
	//МЗ.Записать();
КонецПроцедуры



//---------------<Получение файлов (Регламент+Фон)>---------------------------// GtG // 09.12.2013 23:20:49
Функция ПолучитьФайлыСФТП(FTPСоединение,Тип)
	КорневойКаталогФТП="/";
	МассивФайловФТП=FTPСоединение.НайтиФайлы(КорневойКаталогФТП,""+Тип+"_*.csv",ложь);
	
	Возврат МассивФайловФТП;
	
КонецФункции

Процедура УбратьМусорСФТП(Год,FTPСоединение)
	
	Попытка
		FTPСоединение.удалить("/","tst*.csv"); // тестовые файлики
	Исключение
	Конецпопытки;

	
	
	
	
	ЕстьМусор=Истина;
	
	МассивФайловФТП=FTPСоединение.НайтиФайлы("/","???_?????_"+Формат(Год,"ЧЦ=4; ЧГ=")+"*.csv");
	МассивФайловФТП2=FTPСоединение.НайтиФайлы("/","???2_?????_"+Формат(Год,"ЧЦ=4; ЧГ=")+"*.csv");
	
	Если МассивФайловФТП.Количество()=0 И МассивФайловФТП2.Количество()=0 Тогда
			ЕстьМусор=Ложь;
	КонецЕсли;
	
	Пока ЕстьМусор = Истина Цикл
		
		//Для Каждого Файл Из МассивФайловФТП Цикл
			Попытка
				FTPСоединение.удалить("/","???_?????_"+Формат(Год,"ЧЦ=4; ЧГ=")+"*.csv");
			Исключение
			Конецпопытки;
		//КонецЦикла;
		
		//Для Каждого Файл Из МассивФайловФТП Цикл
			Попытка
				FTPСоединение.удалить("/","???2_?????_"+Формат(Год,"ЧЦ=4; ЧГ=")+"*.csv");
			Исключение
			Конецпопытки;
		//КонецЦикла;
		
		МассивФайловФТП=FTPСоединение.НайтиФайлы("/","???_?????_"+Формат(Год,"ЧЦ=4; ЧГ=")+"*.csv");
		МассивФайловФТП2=FTPСоединение.НайтиФайлы("/","???2_?????_"+Формат(Год,"ЧЦ=4; ЧГ=")+"*.csv");
		
		Если МассивФайловФТП.Количество()=0 И МассивФайловФТП2.Количество()=0 Тогда
			ЕстьМусор=Ложь;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры	

процедура МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку(ОграничительИмен="") Экспорт
	  // Регламентное задание крутится на сервере предприятия и Копирует файлы с FTP сервера на линуксе
	  // в расшаренную папку на винде.
	  // После копирования на винду файлики на линуксе перекладываются в папку бэкапа на нем же.
	  //---------------<>---------------------------// GtG // 06.12.2013 19:51:57 ------------------------
	   СисИнфо = Новый СистемнаяИнформация;
	   пер_ТипПлатформы = СисИнфо.ТипПлатформы;
	   
	   //Сервер="192.168.10.1";
	   Сервер="46.226.96.218";
	   Порт=2121;
	   ИмяПользователя ="check";
	   ПарольПользователя="Check_Upload";
	   Прокси ="";
	   ПассивноеСоединение=Истина;
	   Таймаут=30;
	   
	   FTPСоединение=Новый  FTPСоединение(Сервер, Порт, ИмяПользователя, ПарольПользователя, Прокси, ПассивноеСоединение, Таймаут) ;
	   //---------------<>---------------------------// GtG // 06.12.2013 23:00:17

	   УбратьМусорСФТП(2013,FTPСоединение);
	   
	   
	   КорневойКаталогФТП="/";
       МассивФайловФТП=FTPСоединение.НайтиФайлы(КорневойКаталогФТП,"*"+ОграничительИмен+".csv");// все что пришли, либо с ограничением по последней цифре имени файла
	   
	   //---------------<Копируем файлы в виндовскую шару>---------------------------// GtG // 06.12.2013 19:58:09 
	   
	   Если пер_ТипПлатформы = ТипПлатформы.Linux_x86 или пер_ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		   КаталогФайлов=СокрЛП(Константы.КаталогФТПЛинукс.Получить());
		   Если Прав(КаталогФайлов,1)<>"/" Тогда
			   КаталогФайлов=КаталогФайлов+"/";
		   КонецЕсли;
	   ИНаче		   
		   КаталогФайлов=СокрЛП(Константы.КаталогФТП.Получить());
		   Если Прав(КаталогФайлов,1)<>"\" Тогда
			   КаталогФайлов=КаталогФайлов+"\";
		   КонецЕсли;
	   КонецЕсли;
	   
	   КаталогФайлов=КаталогФайлов+"KKM_CHECKS_CSV";
	   //попытка
	   КаталогО = Новый Файл(КаталогФайлов);
	   Если НЕ КаталогО.Существует() Тогда
		   СоздатьКаталог(КаталогФайлов);// а вдруг его там нет
	   КонецЕсли;
	   //исключение
		   
	   //конецпопытки;

	   
	   МассивСкопированныхФайловФТП=Новый Массив;
	   
	   Для Каждого ФайлФТП Из МассивФайловФТП Цикл
		   УспешноСкопирован=ложь;
		   
		   ИмяЗагруженногофайла=КаталогФайлов+"\"+ФайлФтп.Имя;
		   ИмяЗагруженногофайла=СтрЗаменить(ИмяЗагруженногофайла,"err","ERROR_Files\err");
		   Если пер_ТипПлатформы = ТипПлатформы.Linux_x86 или пер_ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
				ИмяЗагруженногофайла = СтрЗаменить(ИмяЗагруженногофайла,"\","/");   
		   КонецЕсли;
			
		   Попытка
			   FTPСоединение.Получить(ФайлФТП.ПолноеИмя,ИмяЗагруженногофайла);
			   УспешноСкопирован=Истина;
		   исключение
			   // нишмогла
			   УспешноСкопирован=ложь;
		   КонецПопытки;
		   
		   
		   Если УспешноСкопирован=Истина тогда
			   МассивСкопированныхФайловФТП.Добавить(ФайлФТП); // все что не скопировались продолжат висеть до следующего запуска загрузчика
		   КонецЕсли;
	   КонецЦикла;	   
	   
	   //---------------<Перемещаем файлы в Бэкап>---------------------------// GtG // 06.12.2013 20:38:23
		   
	   ТЗОтложенныхОпераций=Новый ТаблицаЗначений();
	   ТипСтроки=Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(350,ДопустимаяДлина.Фиксированная));
	   ТЗОтложенныхОпераций.Колонки.Добавить("Тип",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("Компьютер",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("ИмяЛокальногоФайла",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("ИмяФайлаFTP",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("ТребуемаяОперация",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("Год",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("КодАптеки",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("НомерККМ",ТипСтроки);
	   ТЗОтложенныхОпераций.Колонки.Добавить("Дата",ТипСтроки);

	   Для Каждого ФТПФайл Из МассивСкопированныхФайловФТП Цикл
		   	   
		   СтрТЗ_ОО=ТЗОтложенныхОпераций.Добавить();
		   СтрТЗ_ОО.Компьютер="пох";
		   СтрТЗ_ОО.Тип="пох";//Тип;
		   СтрТЗ_ОО.ИмяЛокальногоФайла="пох";
		   СтрТЗ_ОО.ИмяФайлаFTP=ФТПФайл.ПолноеИмя;
		   СтрТЗ_ОО.ТребуемаяОперация=0;  //0-удалить локальный и переместить на фтп в бэкап, 1-Удалить локальный, 2- Удалить на ФТП, 3-переместить локальный  на ФТП, 4- переместить ФТП на локальный
		   х=0; // если файлы первой версии с именами типа: str_00001_20130920185756_0000200259_0848_05351.csv    // GtG  //  07.01.2014 13:18:53 
		   Если Найти(ФТПФайл.Имя,"_") = 5 Тогда
			   х=1; // если файлы последующих версий с именами типа: strN_00001_20130920185756_0000200259_0848_05351.csv где N- цифра от 2 до 9     // GtG  //  07.01.2014 13:18:56
		   КонецЕсли;                                              //12345678901234
		                                                           //           12345678901234
		   
		   НомерККМ=Сред(ФТПФайл.Имя,26+х,20+х);
		   НомерККМ=Лев(НомерККМ,Найти(НомерККМ,"_")-1);
		   ДатаЧека=Дата(Сред(ФТПФайл.Имя,11+х,14));
		   
		   СтрТЗ_ОО.КодАптеки=Сред(ФТПФайл.Имя,5+х,5);
		   СтрТЗ_ОО.НомерККМ=НомерККМ;
		   СтрТЗ_ОО.Дата=Формат(ДатаЧека,"ДФ=yyyy-MM-dd");
		   СтрТЗ_ОО.Год=Формат(Год(ДатаЧека),"ЧЦ=4; ЧГ=0");
	   КонецЦикла;

       //---------------<Перемещаем файлы в бэкап на линуксе>---------------------------// GtG // 06.12.2013 21:14:36
	
	Если FTPСоединение.НайтиФайлы(КорневойКаталогФТП,"backup",Ложь).Количество()=0 ТОгда
		FTPСоединение.СоздатьКаталог(КорневойКаталогФТП+"backup"); 
	КонецЕсли;

	// запрос по таблице значений, чтобы из тз сделать типа дерево значений
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ОтложенныеОперацииСFTP.Тип,
	                    |	ОтложенныеОперацииСFTP.Компьютер,
	                    |	ОтложенныеОперацииСFTP.ИмяЛокальногоФайла,
	                    |	ОтложенныеОперацииСFTP.ИмяФайлаFTP,
	                    |	ОтложенныеОперацииСFTP.ТребуемаяОперация,
	                    |	ОтложенныеОперацииСFTP.Год КАК Год,
	                    |	ОтложенныеОперацииСFTP.КодАптеки КАК КодАптеки,
	                    |	ОтложенныеОперацииСFTP.НомерККМ КАК НомерККМ,
	                    |	ОтложенныеОперацииСFTP.Дата КАК Дата
	                    |ПОМЕСТИТЬ TZ
	                    |ИЗ
	                    |	&ТЗОтложенныеОперацииСFTP КАК ОтложенныеОперацииСFTP
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	TZ.Тип,
	                    |	TZ.Компьютер,
	                    |	TZ.ИмяЛокальногоФайла,
	                    |	TZ.ИмяФайлаFTP,
	                    |	TZ.ТребуемаяОперация,
	                    |	TZ.Год КАК Год,
	                    |	TZ.КодАптеки КАК КодАптеки,
	                    |	TZ.НомерККМ КАК НомерККМ,
	                    |	TZ.Дата КАК Дата
	                    |ИЗ
	                    |	TZ КАК TZ
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	TZ.Год
	                    |ИТОГИ ПО
	                    |	Год,
	                    |	КодАптеки,
	                    |	НомерККМ,
	                    |	Дата
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |УНИЧТОЖИТЬ TZ");
						
	Запрос.УстановитьПараметр("ТЗОтложенныеОперацииСFTP",ТЗОтложенныхОпераций);
	Результат = Запрос.Выполнить();

	ВыборкаГод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ПутьУ0=КорневойКаталогФТП+"backup/";
	
	Пока ВыборкаГод.Следующий() Цикл
		
        ПутьУ1=ПутьУ0+СокрЛП(ВыборкаГод.Год);
		
		Если FTPСоединение.НайтиФайлы(ПутьУ0,СокрЛП(ВыборкаГод.Год),Ложь).Количество()=0 ТОгда
				FTPСоединение.СоздатьКаталог(ПутьУ1); 
		КонецЕсли;

		
		
		ВыборкаКодАптеки = ВыборкаГод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаКодАптеки.Следующий() Цикл
			
			ПутьУ2=ПутьУ1+"/"+СокрЛП(ВыборкаКодАптеки.КодАптеки);
            Если FTPСоединение.НайтиФайлы(ПутьУ1+"/",СокрЛП(ВыборкаКодАптеки.КодАптеки),Ложь).Количество()=0 ТОгда
				FTPСоединение.СоздатьКаталог(ПутьУ2); 
			КонецЕсли;
			ВыборкаНомерККМ = ВыборкаКодАптеки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаНомерККМ.Следующий() Цикл
				
				ПутьУ3=ПутьУ2+"/"+СокрЛП(ВыборкаНомерККМ.НомерККМ);
				Если FTPСоединение.НайтиФайлы(ПутьУ2+"/",СокрЛП(ВыборкаНомерККМ.НомерККМ),Ложь).Количество()=0 ТОгда
					FTPСоединение.СоздатьКаталог(ПутьУ3); 
				КонецЕсли;
				ВыборкаДата = ВыборкаНомерККМ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ВыборкаДата.Следующий() Цикл
					
					ПутьУ4=ПутьУ3+"/"+СокрЛП(ВыборкаДата.Дата);
					Если FTPСоединение.НайтиФайлы(ПутьУ3+"/",СокрЛП(ВыборкаДата.Дата),Ложь).Количество()=0 ТОгда
						FTPСоединение.СоздатьКаталог(ПутьУ4); 
					КонецЕсли;
					Стр = ВыборкаДата.Выбрать();

					Пока Стр.Следующий() Цикл
						
						ТекИмяФайлаФТП= Стр.ИмяФайлаFTP;
						ИмяФайлаБэкапа=ПутьУ4+ТекИмяФайлаФТП;
                        FTPСоединение.Переместить(СокрЛП(Стр.ИмяФайлаFTP),СокрЛП(ИмяФайлаБэкапа));
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	FTPСоединение="";
	МассивСкопированныхФайловФТП=неопределено;
	МассивФайловФТП=Неопределено;
	
Конецпроцедуры



Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку() Экспорт  // Все файлы что пришли
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы получены","Файлы"); 

 КонецПроцедуры

 //---------------<Выкачивание файлов в 10 потоков>---------------------------// GtG // 08.01.2014 16:44:12 
 
 Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_0() Экспорт  // Файлы заканчивающиеся на *0.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*0.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("0");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*0.csv) получены","Файлы"); 

 КонецПроцедуры

  Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_1() Экспорт  // Файлы заканчивающиеся на *1.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*1.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("1");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*1.csv) получены","Файлы"); 

 КонецПроцедуры

 Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_2() Экспорт  // Файлы заканчивающиеся на *2.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*2.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("2");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*2.csv) получены","Файлы"); 

 КонецПроцедуры

  Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_3() Экспорт  // Файлы заканчивающиеся на *3.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*3.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("3");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*3.csv) получены","Файлы"); 

 КонецПроцедуры
 
   Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_4() Экспорт  // Файлы заканчивающиеся на *4.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*4.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("4");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*4.csv) получены","Файлы"); 

 КонецПроцедуры

   Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_5() Экспорт  // Файлы заканчивающиеся на *5.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*5.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("5");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*5.csv) получены","Файлы"); 

 КонецПроцедуры

  Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_6() Экспорт  // Файлы заканчивающиеся на *6.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*6.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("6");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*6.csv) получены","Файлы"); 

 КонецПроцедуры

  Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_7() Экспорт  // Файлы заканчивающиеся на *7.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*7.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("7");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*7.csv) получены","Файлы"); 

 КонецПроцедуры

  Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_8() Экспорт  // Файлы заканчивающиеся на *8.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*8.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("8");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*8.csv) получены","Файлы"); 

 КонецПроцедуры

  Процедура Регламент_ВыручкаCSV_ПолучитьФайлыНаОбработку_9() Экспорт  // Файлы заканчивающиеся на *9.csv
	
	Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
		Возврат;
	КонецЕсли;	
	
	// Файлы CSV копируются с Линуксового FTP (с ограничением видимости в 2000 файлов)  в Windows шару ( без ограничений по количеству файлов)
	// и перемещаются в папку бэкапа на линуксовом сервере ( где размер кластера мелкий и множество мелких файлов не создаст большой проблемы при хранении)
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Запуск получения файлов (*9.csv)","Файлы"); 
	
	//Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
	//Обр.Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку();

	МРЗ_Регламент_ЗабратьФайлыЧеков_СFTP_НаОбработку("9");    // GtG  //  07.01.2014 13:25:07 Перемещено сюда из обработки
	
	Регламент_ВыручкаCSV_ЗаписьВЛог("Файлы (*9.csv) получены","Файлы"); 

 КонецПроцедуры

 
 




//---------------<Удаление старых Смен ККМ (Регламент+Фон)>---------------------------// GtG // 09.12.2013 23:21:46
процедура Регламент_Удалить_Старые_СменыКММ() Экспорт     // GtG  //  07.01.2014 13:27:58 Перенесено сюда из обработки
	ВОЗВРАТ;    // GtG  //  15.04.2014 17:27:59 ОТКЛЮЧЕНО
	// Удаляются смены по аптекам, но только в том случае, если все смены за дату по аптеке не имеют проблем.
	// проблемные смены остаются в непроведенном состоянии для дальнейшей обработки техподдержкой.
	
    //Запрос=Новый Запрос();
    //Запрос.Текст= "ВЫБРАТЬ
    //              |	СменаККМ.Склад,
    //              |	СменаККМ.Ссылка,
    //              |	НАЧАЛОПЕРИОДА(СменаККМ.Дата, ДЕНЬ) КАК Дата,
    //              |	СУММА(СменаККМ.КоличествоЧеков - СменаККМ.ЗагруженоЧеков) КАК РасхождениеВЧеках,
    //              |	СменаККМ.ЕстьПроблемныеЧеки
    //              |ПОМЕСТИТЬ Смены
    //              |ИЗ
    //              |	Документ.СменаККМ КАК СменаККМ
    //              |ГДЕ
    //              |	СменаККМ.Проведен = ЛОЖЬ
    //              |	И СменаККМ.Дата < &Дата
    //              |	И СменаККМ.ZОтчетСнят = ИСТИНА
    //              |
    //              |СГРУППИРОВАТЬ ПО
    //              |	СменаККМ.Склад,
    //              |	НАЧАЛОПЕРИОДА(СменаККМ.Дата, ДЕНЬ),
    //              |	СменаККМ.Ссылка
    //              |;
    //              |
    //              |////////////////////////////////////////////////////////////////////////////////
    //              |ВЫБРАТЬ
    //              |	Смены.Склад,
    //              |	Смены.Дата
    //              |ПОМЕСТИТЬ ДефективныеСмены
    //              |ИЗ
    //              |	Смены КАК Смены
    //              |ГДЕ
    //              |	Смены.РасхождениеВЧеках <> 0
    //              |	И Смены.ЕстьПроблемныеЧеки = ИСТИНА
    //              |
    //              |СГРУППИРОВАТЬ ПО
    //              |	Смены.Склад,
    //              |	Смены.Дата
    //              |;
    //              |
    //              |////////////////////////////////////////////////////////////////////////////////
    //              |ВЫБРАТЬ
    //              |	Смены.Ссылка,
    //              |	Смены.Ссылка.Проведен,
    //              |	Смены.Ссылка.ZОтчетСнят,
    //              |	Смены.Ссылка.ЗагруженоЧеков,
    //              |	Смены.Ссылка.КоличествоЧеков
    //              |ИЗ
    //              |	Смены КАК Смены
    //              |		ЛЕВОЕ СОЕДИНЕНИЕ ДефективныеСмены КАК ДефективныеСмены
    //              |		ПО Смены.Склад = ДефективныеСмены.Склад
    //              |			И Смены.Дата = ДефективныеСмены.Дата
    //              |ГДЕ
    //              |	ДефективныеСмены.Склад ЕСТЬ NULL 
    //              |;
    //              |
    //              |////////////////////////////////////////////////////////////////////////////////
    //              |УНИЧТОЖИТЬ ДефективныеСмены
    //              |;
    //              |
    //              |////////////////////////////////////////////////////////////////////////////////
    //              |УНИЧТОЖИТЬ Смены"; // Сгенерировано в GtG's Консоль запросов. 17.12.2013 18:39:47
    //
    //Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()-7*24*60*60));					
    //
    //Результат = Запрос.Выполнить();
    //
    //ВыборкаДетальныеЗаписи = Результат.Выбрать();
    //
    //Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    //	ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект().Удалить();
    //КонецЦикла;
    //
КонецПроцедуры	


Процедура Регламент_ВыручкаCSV_УдалитьСтарыеСменыККМ() Экспорт
    
       // GtG  //  15.04.2014 17:26:04 Старые смены хранятся без данных по чекам
       // они нужны для определения того, по каким чекам была создана реализация ккм.
       // Это используется при загрузке шальных чеков задним числом.
       
       ВОЗВРАТ;     // GtG  //  15.04.2014 17:27:25
	
    //Если Константы.ОстановитьЗагрузкуЧеков.Получить()=Истина Тогда
    //	Возврат;
    //КонецЕсли;	
    //

    //Регламент_ВыручкаCSV_ЗаписьВЛог("Начато удаления старых смен ККМ","Очистка"); 
    //
    ////Обр=Обработки.ЗагрузкаЧеков_CSV_с_FTP.Создать();
    ////Обр.Регламент_Удалить_Старые_СменыКММ();
    //
    //Регламент_Удалить_Старые_СменыКММ();
    //
    //
    //Регламент_ВыручкаCSV_ЗаписьВЛог("Завершено удаление старых смен ККМ","Очистка"); 

КонецПроцедуры
 
Процедура РаспределенениеЗаказов366() Экспорт
	
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РаспределенениеЗаказов366");
		Параметры = Новый Структура("КоличествоОбрабатываемыхЗаявок");
	
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			Возврат;
		КонецЕсли;
		
		Параметры.Вставить("ДопУсловиеОтбораАптек","И ЗаявкаНаТовар.Склад.Код366 <> ""0""");
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Распределенение заказов 36.6 запущено.");
		
		
		ТаблицаЗаявок = РаботаСЗаказамиСервер.ВернутьСписокЗаявок(Параметры);
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список заявок 36.6.");
		
 	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для Каждого стр Из ТаблицаЗаявок Цикл 	
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Ссылка",стр.Ссылка);
		ДопПараметры.Вставить("Склад",стр.Склад);
		ДопПараметры.Вставить("Регион",стр.Регион);
		ДопПараметры.Вставить("РаботаЧерезКонвертер",стр.РаботаЧерезКонвертер);
		
		РаботаСЗаказамиСервер.РаспределитьЗаявкуСервер(ДопПараметры);
	КонецЦикла;


КонецПроцедуры

Процедура РаспределенениеЗаказов(_КоличествоОбрабатываемыхЗаявок, _ТаймСлот) Экспорт
	
	
	Если Константы.РоботаОстановили.Получить() = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВремяЗапуска = _ТаймСлот.ВремяЗапуска;
	ВремяОстановки = Константы.ВремяОстановки.Получить();
	ТекущееВремя = Дата("00010101" + Формат(ТекущаяДата(),"ДФ=ЧЧммсс"));
	
	Если ТекущееВремя < ВремяЗапуска  или ТекущееВремя > ВремяОстановки или _ТаймСлот.Выключен Тогда 
		Возврат;
	КонецЕсли;
	
	
	Попытка
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РаспределенениеЗаказов");
		Параметры = Новый Структура("КоличествоОбрабатываемыхЗаявок,ТаймСлот");
		Параметры.КоличествоОбрабатываемыхЗаявок = _КоличествоОбрабатываемыхЗаявок;
		Параметры.ТаймСлот = _ТаймСлот;
	
		//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Распределенение заказов запущено.");
		
		ТаблицаЗаявок = РаботаСЗаказамиСервер.ВернутьСписокЗаявок(Параметры);
		//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Получили список заявок.");
		
 	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для Каждого стр Из ТаблицаЗаявок Цикл 
		
		Если _ТаймСлот.Выключен Тогда 
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Ссылка",стр.Ссылка);
		ДопПараметры.Вставить("Склад",стр.Склад);
		ДопПараметры.Вставить("Регион",стр.Регион);
		
		РаботаСЗаказамиСервер.РаспределитьЗаявкуСервер(ДопПараметры);
		
	КонецЦикла;


КонецПроцедуры

Процедура ОбновитьРегистрНаценок() Экспорт  //ТСО 21.02.2013
	
	Обработка = Обработки.УстановкаНаценок.Создать();
	Обработка.ОбновитьРегистрНаценок();	
	
КонецПроцедуры

Функция ОкруглитьЦену(Цена) //ТСО 04.09.2014
	
	Результат = 0;
	
	Если Цена > 0 И Цена <= 50 Тогда
		Результат = Окр(Цена + 0.05, 1, 0);
	ИначеЕсли Цена > 50 И Цена <=500 Тогда
		Результат = Окр(Цена + 0.5, 0, 0);
	ИначеЕсли Цена > 500 Тогда
		Результат = Окр(Цена + 5, -1, 0);
	КонецЕсли;    	
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьИнтернетЦенуТовара(ТоварСсылка, Цена) //ТСО 04.09.2014
	
	ТоварОбъект = ТоварСсылка.ПолучитьОбъект();
	ТоварОбъект.МинЦенаMedlux = Цена;
	ТоварОбъект.Записать();
	
КонецПроцедуры

Процедура ОбновлениеАктивныхСотрудниковККМ() Экспорт
	
	Запрос=Новый Запрос();
	Запрос.Текст=  "	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПДМ_КонтрольСотрудников.Сотрудник.ТабНомер КАК ТабНомер
	|	ИЗ
	|		РегистрСведений.ПДМ_КонтрольСотрудников КАК ПДМ_КонтрольСотрудников
	|	ГДЕ
	|		ПДМ_КонтрольСотрудников.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -2) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|"; // Сгенерировано в GtG's Консоль запросов. 13.05.2015 18:52:21
	
	
	Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
	
	Рез=Запрос.Выполнить();
	
	
	АдресWSDL="http://id-app-01/PG_EXCHANGE_WS_BASE/ws/kkm_users_ws.1cws?wsdl";       //Например "http://bebebe.com:8080/bebe_bubu/ws/buh_exchange.1cws?wsdl";
	TargetNamespace="http://www.kkm_users.org"; //Например "http://localhost/bebe_bubu" из первой строки WSDL  targetNamespace="http://localhost/bebe_bubu"
	DefinitionsName="KKM_USERS"; //Например "buh_exchange" из первой строки WSDL definitions name="buh_exchange"
	PortName="KKM_USERSSoap12";        //Например   "buh_exchangeSoap12"  в конце WSDL port name="buh_exchangeSoap12" binding="tns:buh_exchangeSoap12Binding">
	
	
	Определение=Новый WSОпределения(СокрЛП(АдресWSDL));  // без пароля
	
	Прокси = Новый WSПрокси(Определение,
	СокрЛП(TargetNamespace),//targetNamespace из WSDL
	СокрЛП(DefinitionsName),//definitions name из  WSDL 
	СокрЛП(PortName),       // port name из WSDL 
	0);
	
	WSТип=Прокси.ФабрикаXDTO.Тип("http://www.kkm_users.org", "Active_kkm_users_list") ; // какой-то тип данных веб-сервиса
	WSЗначениеWSТипа=Прокси.ФабрикаXDTO.Создать(WSТип);  // Значение этого какого-то типа
	
	
	// Обрабатываем в цикле результат запроса -----------------------------------//
	Выб=Рез.Выбрать();
	Пока Выб.Следующий() Цикл                                           //
		WSЗначениеWSТипа.tabnum.Добавить(Выб.ТабНомер);
	КонецЦикла;
	//------------------ конец обработки результата запроса ---------------------//
	
	Результат=Прокси.activate_kkm_users(WSЗначениеWSТипа);
	
	ЗаписьЖурналаРегистрации("REVIVE_KKM_USERS",,,"Список из "+Выб.Количество()+" строк", "Список из "+Выб.Количество()+" строк", ) ;	
	
КонецПроцедуры


Процедура ВыгрузитьВСправМедика(РегламентноеЗадание, Справка) Экспорт
	
		КаталогОтправки = КаталогВременныхФайлов();
		
		ДатаВыгрузки = Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd");
		
		//Попытка
		//	УдалитьФайлы(КаталогОтправки+"euroweb.csv");
		//	УдалитьФайлы(КаталогОтправки+"euroweb.zip");
		//Исключение
		//	//ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не удалось удалить старые файлы euroweb.csv и euroweb.zip! " + ОписаниеОшибки());
		//	//Возврат;
		//КонецПопытки;		
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
		//----------------------------------------------------------------------------
		ТХТ = "ВЫБРАТЬ
		      |	МестаХранения.Код КАК Код,
		      |	МестаХранения.Наименование
		      |ИЗ
		      |	Справочник.МестаХранения КАК МестаХранения
		      |ГДЕ
		      |	МестаХранения.ПометкаУдаления = ЛОЖЬ
		      |	И МестаХранения.Бренд = &Бренд
		      |	И МестаХранения.СторонаДоговораКомиссии <> &СторонаДоговораКомиссии
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Код";		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Бренд",Справочники.БрендыАптечныхСетей.НайтиПоКоду(1));
		Запрос.УстановитьПараметр("СторонаДоговораКомиссии",Перечисления.СтороныДоговораКомиссии.Комитент);

		Рез = запрос.Выполнить();
		Выборка = Рез.Выбрать();
		
		Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"fname.txt", "windows-1251");

		
		
		Пока Выборка.Следующий() Цикл
			Файл_CSV.ЗаписатьСтроку
				(
					Формат(Выборка.Код	,"ЧЦ=12; ЧГ=0")+"|"+
					СокрЛП(Выборка.Наименование)+"|"+
					ДатаВыгрузки
				);
		КонецЦикла;
		Файл_CSV.Закрыть();
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА НОМЕНКЛАТУРЫ
		//----------------------------------------------------------------------------
		ТХТ = "ВЫБРАТЬ
		      |	АП.Код КАК Код,
		      |	АП.Наименование КАК Товар
		      |ИЗ
		      |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			      |
		      |УПОРЯДОЧИТЬ ПО
		      |	Товар";		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;

		Рез = Запрос.Выполнить();

		Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"tname.txt", "windows-1251");
		
		Выборка = Рез.Выбрать();
		
		Пока Выборка.Следующий() Цикл
	
			Файл_CSV.ЗаписатьСтроку
				(
					Формат(Выборка.Код	,"ЧЦ=12; ЧГ=0")+"|"+
					СокрЛП(СтрЗаменить(Выборка.Товар,"@",""))+"|||||"

				);
	
		КонецЦикла;
        Файл_CSV.Закрыть();
		
		//----------------------------------------------------------------------------
		//				СОЗДАНИЕ ФАЙЛА ОСТАТКОВ
		//----------------------------------------------------------------------------		

		Запрос =  Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	КодыАптек.Аптека,
		|	КодыАптек.Аптека.Код КАК СкладКод,
		|	КодыАптек.Код КАК Код
		|ПОМЕСТИТЬ ТЗАптек
		|ИЗ
		|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
		|ГДЕ
		|	КодыАптек.Ссылка = &СправМедика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АП.Код КАК КодТовара
		|ПОМЕСТИТЬ ТоварыПККН
		|ИЗ
		|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		|ГДЕ
		|	АП.ПККН = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегПартии.ТоварКод,
		|	РегПартии.СкладКод,
		|	РегПартии.ПартияКод,
		|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена,
		|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.УЗ_Партии.Остатки(
		|			,
		|			НЕ ТоварКод В
		|						(ВЫБРАТЬ
		|							ТоварыПККН.КодТовара
		|						ИЗ
		|							ТоварыПККН)
		|				И СкладКод В
		|					(ВЫБРАТЬ
		|						вт.СкладКод
		|					ИЗ
		|						ТЗАптек КАК вт)) КАК РегПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		|		ПО (Партии.Код = РегПартии.ПартияКод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
		|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
		|			И (РЦ.АптекаКод = РегПартии.СкладКод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
		|		ПО  РегПартии.ПартияКод = РЦП.ПартияКод
		|			И (РЦП.АптекаКод = РегПартии.СкладКод)
		|ГДЕ
		|	РегПартии.КоличествоОстаток >= 1
		|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегПартии.ТоварКод,
		|	РегПартии.СкладКод,
		|	РегПартии.ПартияКод,
		|	РегПартии.КоличествоОстаток / Партии.К КАК Остаток
		|ПОМЕСТИТЬ ОстаткиАрбитраж
		|ИЗ
		|	РегистрНакопления.УЗ_ПартииАрбитраж.Остатки(
		|			,
		|			СкладКод В
		|				(ВЫБРАТЬ
		|					вт.СкладКод
		|				ИЗ
		|					ТЗАптек КАК вт)) КАК РегПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		|		ПО (Партии.Код = РегПартии.ПартияКод)      ГДЕ РегПартии.КоличествоОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.ТоварКод КАК КодТовара,
		|	Остатки.СкладКод КАК КодАптеки,
		|	МАКСИМУМ(Остатки.Цена) КАК Цена,
		|	СУММА(Остатки.Остаток) КАК Остаток,
		|	СУММА(ЕСТЬNULL(Арбитраж.Колво, 0)) КАК КолвоАрбитраж
		|ИЗ
		|	Остатки КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАрбитраж КАК Арбитраж
		|		ПО Остатки.СкладКод = Арбитраж.СкладКод
		|			И Остатки.ТоварКод = Арбитраж.ТоварКод
		|			И Остатки.ПартияКод = Арбитраж.ПартияКод
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.ТоварКод,
		|	Остатки.СкладКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТЗАптек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Остатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОстаткиАрбитраж";
		
		Запрос.УстановитьПараметр("СправМедика", Справка);
		Запрос.УстановитьПараметр("Сегодня", ТекущаяДата());
		Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 48*60*60);	
		Запрос.УстановитьПараметр("Бренд",Справочники.БрендыАптечныхСетей.НайтиПоКоду(1));
		Запрос.УстановитьПараметр("СторонаДоговораКомиссии",Перечисления.СтороныДоговораКомиссии.Комитент);
		
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
		    ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустой набор записей.");
			Возврат;
		КонецЕсли;
		
		Выборка = Рез.Выбрать();
		
		Файл_CSV = Новый ЗаписьТекста(КаталогОтправки+"data.txt", "windows-1251");
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Цена <= 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Остаток = Окр(Выборка.Остаток,0);
			
			//ТСО 28.08.2014
			//Если Выборка.Блокировка Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Остаток = Остаток - Выборка.КолвоАрбитраж ;			
			//*ТСО	
			
			Если Остаток <=0 Тогда
				Продолжить;
			КонецЕсли;			
			
			
			Файл_CSV.ЗаписатьСтроку
				(
					"0|"+
					Формат(Выборка.КодАптеки	,"ЧЦ=12; ЧГ=0")+"|"+					
					Формат(Выборка.КодТовара	,"ЧЦ=12; ЧГ=0")+"|"+
					Формат(Остаток,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")+"|"+
					Формат(Выборка.Цена,"ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")+"||||"
					
					);
		КонецЦикла;
		Файл_CSV.Закрыть();
		
		// Архивация
		//Состояние("Архивация...");
		Архив = Новый ЗаписьZipФайла;
		Архив.Открыть (КаталогОтправки+"data_003_v2.zip");
		Архив.Добавить(КаталогОтправки+"fname.txt");
		Архив.Добавить(КаталогОтправки+"tname.txt");
		Архив.Добавить(КаталогОтправки+"data.txt");
		Архив.Записать();
		//Сообщить("Создан файл: euroweb.zip");
		
	  //  // Выкладываем на FTP
	  Если Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FTP Тогда
		  Попытка
			  FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт) , Справка.ФТПЛогин, Справка.ФТППароль,, Истина);
			  FTP.Записать(КаталогОтправки+"data_003_v2.zip", "data_003_v2.zip");
			  FTP = Неопределено;
			  ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка Справмедика: данные выгружены" );
		  Исключение
			  ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка Справмедика: " + ОписаниеОшибки());
			  Возврат;
		  КонецПопытки;
	  КонецЕсли;
	  
	
  КонецПроцедуры
  
Процедура ВырузкаДанныхВАльянс() Экспорт
	  
	  

	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП			= "/home/usr1cv8/ftp_net/post/GDPAHR/";
	Иначе
		КаталогФТП			= "\\id-vm-1\ftp_data\Post\GDPAHR\";
	КонецЕсли;
	
	ФайлСвязок		= КаталогФТП + "Links.CSV";
    ФайлСтока		= КаталогФТП + "Stock.CSV";
	ФайлЗаказов		= КаталогФТП + "Orders.CSV";

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
	               |	МАКСИМУМ(СвязкиТовараСПоставщиком.КодТовараПоставщика) КАК КодТовараПоставщика
	               |ПОМЕСТИТЬ втСвязки
	               |ИЗ
	               |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	               |ГДЕ
	               |	СвязкиТовараСПоставщиком.Поставщик = &ПоставщикСвязок
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СвязкиТовараСПоставщиком.ТоварФирмы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиОптовыхСкладов.Товар.Код КАК КодAVE,
	               |	ОстаткиОптовыхСкладов.Товар.Наименование КАК ТоварAVE,
	               |	ОстаткиОптовыхСкладов.НаименованиеТовараСклада КАК НаименованиеGDP,
	               |	ОстаткиОптовыхСкладов.КодТовараСклада КАК КодТовараGDP,
	               |	ЕСТЬNULL(втСвязки.КодТовараПоставщика, """") КАК КодТовараAHR,
	               |	ОстаткиОптовыхСкладов.Количество КАК Количество,
	               |	ОстаткиОптовыхСкладов.ЦенаБезНДС КАК ЦенаБезНДС,
	               |	ОстаткиОптовыхСкладов.ЦенаСНДС КАК ЦенаСНДС,
	               |	ОстаткиОптовыхСкладов.СрокГодности КАК СрокГодности,
	               |	ОстаткиОптовыхСкладов.Серия КАК Серия,
	               |	ВЫБОР
	               |		КОГДА ОстаткиОптовыхСкладов.ЦенаБезНДС = 0
	               |			ТОГДА ЕСТЬNULL(ВЫБОР
	               |						КОГДА ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Код = 3
	               |								И &Дата < ДАТАВРЕМЯ(2019, 1, 1)
	               |							ТОГДА 18
	               |						ИНАЧЕ ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Ставка
	               |					КОНЕЦ, 0)
	               |		ИНАЧЕ ВЫБОР ВЫРАЗИТЬ(ОстаткиОптовыхСкладов.ЦенаСНДС / ОстаткиОптовыхСкладов.ЦенаБезНДС КАК ЧИСЛО(5, 2))
	               |				КОГДА 1
	               |					ТОГДА 0
	               |				КОГДА 1.1
	               |					ТОГДА 10
	               |				КОГДА 1.18
	               |					ТОГДА 18
	               |				ИНАЧЕ ЕСТЬNULL(ВЫБОР
	               |							КОГДА ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Код = 3
	               |									И &Дата < ДАТАВРЕМЯ(2019, 1, 1)
	               |								ТОГДА 18
	               |							ИНАЧЕ ОстаткиОптовыхСкладов.Товар.СтавкаНДС.Ставка
	               |						КОНЕЦ, 0)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтавкаНДС
	               |ИЗ
	               |	РегистрСведений.ОстаткиОптовыхСкладов КАК ОстаткиОптовыхСкладов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСвязки КАК втСвязки
	               |		ПО ОстаткиОптовыхСкладов.Товар = втСвязки.ТоварФирмы
	               |ГДЕ
	               |	ОстаткиОптовыхСкладов.ОптовыйСклад В(&Склад)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТоварAVE
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТСвязки";
	                          
	ОптовыеСклады = Новый СписокЗначений;
	ОптовыеСклады.Добавить(Справочники.ОптовыеСклады.НайтиПоКоду(5));
	ОптовыеСклады.Добавить(Справочники.ОптовыеСклады.НайтиПоКоду(72));
	Запрос.УстановитьПараметр("Склад",				ОптовыеСклады); //Оптовый (белые столбы)  + Госпитальный
	Запрос.УстановитьПараметр("ПоставщикСвязок",	Справочники.Поставщики.НайтиПоКоду(456)); //АЛЬЯНС ХЕЛСКЕА РУС
	Запрос.УстановитьПараметр("Дата",	ТекущаяДата()); 
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Т = Новый ЗаписьТекста(ФайлСтока,КодировкаТекста.ANSI);
	Т.ЗаписатьСтроку("КодAVE;ТоварAVE;НаименованиеGDP;КодТовараGDP;КодТовараAHR;Количество;ЦенаБезНДС;ЦенаСНДС;СрокГодности;Серия;СтавкаНДС");	
	Пока Выборка.Следующий() Цикл
		Т.ЗаписатьСтроку(""+Формат(Выборка.КодAVE,"ЧГ=0")
		+ ";"+СокрЛП(СтрЗаменить(Выборка.ТоварAVE,";",""))
		+ ";"+СокрЛП(СтрЗаменить(Выборка.НаименованиеGDP,";",""))
		+ ";"+СокрЛП(Выборка.КодТовараGDP)
		+ ";"+СокрЛП(Выборка.КодТовараAHR)
		+ ";"+ Формат(Выборка.Количество,"ЧДЦ=; ЧРД=.; ЧГ=0")
		+ ";"+ Формат(Выборка.ЦенаБезНДС,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";"+ Формат(Выборка.ЦенаСНДС,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";"+ Формат(Выборка.СрокГодности,"ДФ=dd.MM.yyyy")
		+ ";"+СокрЛП(СтрЗаменить(Выборка.Серия,";",""))
		+ ";"+ Формат(Выборка.СтавкаНДС,"ЧДЦ=; ЧРД=.; ЧГ=0"));	
	КонецЦикла;
	Т.Закрыть();	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязкиТовараСПоставщиком.Поставщик.Код КАК ПоставщикКод,
	               |	СвязкиТовараСПоставщиком.Поставщик.Наименование как Поставщик,
	               |	СвязкиТовараСПоставщиком.КодТовараПоставщика,
	               |	СвязкиТовараСПоставщиком.ТоварФирмы.Код как КодТовараAVE,
	               |	СвязкиТовараСПоставщиком.ТоварФирмы.Наименование КАК ТоварAVE
	               |ИЗ
	               |	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	               |ГДЕ
	               |	СвязкиТовараСПоставщиком.Поставщик В(&СписокПоставщиков)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоставщикКод,
	               |	ТоварAVE";
				   
	СписокПоставщиков = Новый СписокЗначений;
	СписокПоставщиков.Добавить(Справочники.Поставщики.НайтиПоКоду(456)); //АЛЬЯНС ХЕЛСКЕА РУС
	СписокПоставщиков.Добавить(Справочники.Поставщики.НайтиПоКоду(582)); //Ориола
	Запрос.УстановитьПараметр("СписокПоставщиков",	СписокПоставщиков); 
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Т = Новый ЗаписьТекста(ФайлСвязок,КодировкаТекста.ANSI);
	Т.ЗаписатьСтроку("ПоставщикКод;Поставщик;КодТовараПоставщика;КодТовараAVE;ТоварAVE");	
	Пока Выборка.Следующий() Цикл
		Т.ЗаписатьСтроку(""+Формат(Выборка.ПоставщикКод,"ЧГ=0")
		+ ";"+СокрЛП(СтрЗаменить(Выборка.Поставщик,";",""))
		+ ";"+СокрЛП(Выборка.КодТовараПоставщика)
		+ ";"+Формат(Выборка.КодТовараAVE,"ЧГ=0")
		+ ";"+СокрЛП(СтрЗаменить(Выборка.ТоварAVE,";","")));	
	КонецЦикла;
	Т.Закрыть();
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрактыИАптеки.КодАптекиВнешн,
	               |	КонтрактыИАптеки.КодАптекиВнутр КАК ВнутрКод,
	               |	КонтрактыИАптеки.Аптека.Фирма.Наименование КАК Фирма,
	               |	КонтрактыИАптеки.Аптека.Фирма.ИНН КАК ИНН
	               |ПОМЕСТИТЬ Коды
	               |ИЗ
	               |	РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	               |		ПО КонтрактыИНастройки.Контракт = КонтрактыИАптеки.Владелец
	               |ГДЕ
	               |	КонтрактыИНастройки.НастройкаОбмена.Владелец = &ПоставщикСвязок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Заказ.Номер КАК Номер,
	               |	НАЧАЛОПЕРИОДА(Заказ.Дата, ДЕНЬ) КАК Дата,
	               |	Заказ.Склад.Код КАК КодАптекиAVE,
	               |	Коды.КодАптекиВнешн КАК КодГрузополучателя,
	               |	Заказ.Склад.Наименование КАК Грузополучатель,
	               |	Заказ.СуммаДок,
	               |	Коды.Фирма,
	               |	Коды.ИНН
	               |ИЗ
	               |	Документ.Заказ КАК Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Коды КАК Коды
	               |		ПО (Коды.ВнутрКод = Заказ.Склад.Код)
	               |ГДЕ
	               |	Заказ.Дата МЕЖДУ &Дата1 И &Дата2
	               |	И Заказ.Проведен = ИСТИНА
	               |	И Заказ.Статус = &Статус
	               |	И Заказ.Поставщик = &ПоставщикСвязок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Коды";
	  
	Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()) - 24*60*60*6);
	Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусЗаказаПоставщику.ВыгруженПоставщику);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Т = Новый ЗаписьТекста(ФайлЗаказов,КодировкаТекста.ANSI);
	Т.ЗаписатьСтроку("Номер;Дата;КодАптекиAVE;КодГрузополучателя;Грузополучатель;СуммаДок;Фирма;ИНН");	
	Пока Выборка.Следующий() Цикл
		Т.ЗаписатьСтроку(""+Формат(Выборка.Номер,"ЧГ=0")
		+ ";"+ Формат(Выборка.Дата,"ДФ=dd.MM.yyyy")
		+ ";"+ Формат(Выборка.КодАптекиAVE,"ЧГ=0")
		+ ";"+ СокрЛП(Выборка.КодГрузополучателя)
		+ ";"+ СокрЛП(СтрЗаменить(Выборка.Грузополучатель,";",""))
		+ ";"+ Формат(Выборка.СуммаДок,"ЧДЦ=2; ЧРД=.; ЧГ=0")
		+ ";"+ СокрЛП(СтрЗаменить(Выборка.Фирма,";",""))
		+ ";"+ СокрЛП(СтрЗаменить(Выборка.ИНН,";","")) );	
	КонецЦикла;
	Т.Закрыть();


	  
КонецПроцедуры

Процедура СохранениеПрайсЛистов() Экспорт
	
	//КаталогАрхивныхПрайсЛистов = Константы.КаталогАрхивныхПрайсЛистов.Получить();
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("СохранениеПрайсЛистов");
	Параметры = Новый Структура("КаталогАрхивныхПрайсЛистов");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;	
	   
	КаталогАрхивныхПрайсЛистов =  Параметры.КаталогАрхивныхПрайсЛистов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КаталогПрайсЛистов.Настройка.Код КАК КодНастройки,
	               |	КаталогПрайсЛистов.КодПоставщика,
	               |	КаталогПрайсЛистов.КодПрайсЛиста
	               |ИЗ
	               |	РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	               |ГДЕ
	               |	КаталогПрайсЛистов.Дата >= &Дата";
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Рез = Запрос.Выполнить();
	Выборка  = Рез.Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрайсЛисты.КодПрайсЛиста,
	               |	ПрайсЛисты.НомерЗаписи,
	               |	ПрайсЛисты.Код,
	               |	ПрайсЛисты.Товар,
	               |	ПрайсЛисты.Производитель,
	               |	ПрайсЛисты.СрокГодности,
	               |	ПрайсЛисты.Кратность,
	               |	ПрайсЛисты.Цена,
	               |	ПрайсЛисты.БарКод,
	               |	ПрайсЛисты.Количество
	               |ИЗ
	               |	РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
	               |ГДЕ
	               |	ПрайсЛисты.КодПрайсЛиста = &КодПрайсЛиста
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПрайсЛисты.Товар";
	
	ПостфиксФайла = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
	н=0;
	ВсегоСтрок = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		н=н+1;
		//Состояние("Сохранение " + н + " из " + ВсегоСтрок );
		КаталогПоставщика = КаталогАрхивныхПрайсЛистов + "/" + Формат(Выборка.КодПоставщика,"ЧЦ=7; ЧВН=; ЧГ=0") + "_" + Формат(Выборка.КодНастройки,"ЧГ=0") + "/";
		Каталог = Новый Файл(КаталогПоставщика);
		Если НЕ Каталог.Существует() Тогда
			СоздатьКаталог(КаталогПоставщика);	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КодПрайсЛиста",Выборка.КодПрайсЛиста);
		Рез = Запрос.Выполнить();
		ВыборкаПрайса = Рез.Выбрать();
		
		Т= Новый ЗаписьТекста(КаталогПоставщика + Формат(Выборка.КодПоставщика,"ЧГ=0") + "_" + ПостфиксФайла + ".CSV",КодировкаТекста.ANSI);
		
		Пока ВыборкаПрайса.Следующий() Цикл
			ТекСтрока = ""
			+ Формат(ВыборкаПрайса.КодПрайсЛиста,"ЧГ=0")
			+ ";" + Формат(ВыборкаПрайса.НомерЗаписи,"ЧГ=0")
			+ ";" + СтрЗаменить(ВыборкаПрайса.Код,";","")
			+ ";" + СтрЗаменить(ВыборкаПрайса.Товар,";","")
			+ ";" + СтрЗаменить(ВыборкаПрайса.Производитель,";","")
			+ ";" + Формат(ВыборкаПрайса.СрокГодности,"ДФ=yyyyMMdd")
			+ ";" + Формат(ВыборкаПрайса.Кратность,"ЧГ=0")
			+ ";" + Формат(ВыборкаПрайса.Цена,"ЧДЦ=2; ЧРД=.; ЧГ=0")
			+ ";" + СтрЗаменить(ВыборкаПрайса.БарКод,";","")
			+ ";" + Формат(ВыборкаПрайса.Количество,"ЧДЦ=0; ЧГ=0");
			
			Т.ЗаписатьСтроку(ТекСтрока);
			
		КонецЦикла;
		Т.Закрыть();
		
		
	КонецЦикла;
	
КонецПроцедуры


Процедура РассылкаНекорректныхСмен() Экспорт
	
	//КаталогАрхивныхПрайсЛистов = Константы.КаталогАрхивныхПрайсЛистов.Получить();
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РассылкаНекорректныхСмен");
	Параметры = Новый Структура("КоличествоДнейВыборки, СписокАдресовРассылки, ДолжностьБЕ");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;	
	   
	
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЗ_РеализацияККМ.Дата,
	               |	Выборка.Аптека,
	               |	Выборка.ФИОБЕ,
	               |	Выборка.Почта КАК Почта
	               |ИЗ
	               |	Документ.УЗ_РеализацияККМ КАК УЗ_РеализацияККМ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			Сотр.ФИО КАК ФИОБЕ,
	               |			Сотр.АдресЭлектроннойПочты КАК Почта,
	               |			Сотр.Ссылка КАК Аптека,
	               |			ВыборкаАптек.СкладКод КАК СкладКод
	               |		ИЗ
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				УЗ_РеализацияККМ.СкладКод КАК СкладКод,
	               |				МестаХранения.Ссылка КАК Аптека
	               |			ИЗ
	               |				Документ.УЗ_РеализацияККМ КАК УЗ_РеализацияККМ
	               |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	               |					ПО УЗ_РеализацияККМ.СкладКод = МестаХранения.Код
	               |			ГДЕ
	               |				УЗ_РеализацияККМ.Дата >= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1 * &КоличествоДнейВыборки)
	               |				И УЗ_РеализацияККМ.ПризнакКорректности = 2
	               |				И УЗ_РеализацияККМ.ПометкаУдаления = ЛОЖЬ) КАК ВыборкаАптек
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК Сотр
	               |				ПО ВыборкаАптек.Аптека = Сотр.Ссылка
	               |					И (Сотр.Должность = &Должность)) КАК Выборка
	               |		ПО (Выборка.СкладКод = УЗ_РеализацияККМ.СкладКод)
	               |ГДЕ
	               |	УЗ_РеализацияККМ.Дата >= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1 * &КоличествоДнейВыборки)
	               |	И УЗ_РеализацияККМ.ПризнакКорректности = 2
	               |	И УЗ_РеализацияККМ.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УЗ_РеализацияККМ.Дата
	               |ИТОГИ ПО
	               |	Почта";
	
	
	
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Запрос.УстановитьПараметр("КоличествоДнейВыборки",Параметры.КоличествоДнейВыборки);
	Запрос.УстановитьПараметр("Должность",Параметры.ДолжностьБЕ);
	
	н=0;

	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустую выборку");
		Возврат;
	КонецЕсли;
	
	ТЗ = Рез.Выгрузить();
	
	
	МПочтец = Обработки.Почтарь;
	Почтец = МПочтец.Создать();
	Почтец.Рассылка.Очистить();
	Почтец.Автоотправка = Истина;
	
	СписокАдресовРассылки = СтрЗаменить(Параметры.СписокАдресовРассылки,";",Символы.ПС);
	Для н=1 по СтрЧислоСтрок(СписокАдресовРассылки) Цикл
		ТекПочта = СтрПолучитьСтроку(СписокАдресовРассылки,н);
		Если НЕ ПустаяСтрока(ТекПочта) Тогда
			Почтец.Рассылка.Добавить(ТекПочта);
		КонецЕсли;
	КонецЦикла;
	
	
	Почтец.Тема = "Некорректная выручка " + ТекущаяДата();
	ТекстПисьма = "";
	Для каждого стр из ТЗ Цикл
			ТекстПисьма = ТекстПисьма + "
			| " + Формат(стр.Дата,"ДФ=dd.MM.yyyy") + "	аптека : " + стр.Аптека + "";
		
	КонецЦикла;
	Почтец.ТекстПисьма = ТекстПисьма;
	Почтец.Функция_Послать();
	Почтец = Неопределено;
	

	
	// Рассылаем каждому Директору БЕ свой регион и свои аптеки
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ФИОБЕ) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетали = Выборка.Выбрать();
		

		ТекстПисьма = "Уважаемый (ая) " + Выборка.ФИОБЕ + "!
		| в вашей аптеке обнаружены следующие некорректные выручки : 
		|";
		Пока ВыборкаДетали.Следующий() Цикл
			ТекстПисьма = ТекстПисьма + "
			| " + Формат(ВыборкаДетали.Дата,"ДФ=dd.MM.yyyy") + "	аптека : " + ВыборкаДетали.Аптека + "";
		КонецЦикла;	
		
		ТекстПисьма = ТекстПисьма + "
		|Необходимо сформировать заявку с темой <Некорректная выручка> в личном кабинете http://my.id-soft.ru ,
		|обязательно приложив к заявке скан z-отчета проблемной смены.";
		
		МПочтец = Обработки.Почтарь;
		Почтец = МПочтец.Создать();
		Почтец.Рассылка.Очистить();
		Почтец.Автоотправка = Истина;
		Почтец.Рассылка.Добавить(Выборка.Почта);
		
		Почтец.Тема = "Некорректная выручка " + ТекущаяДата();
		Почтец.ТекстПисьма = ТекстПисьма;
		
		Почтец.Функция_Послать();
		
		Почтец = Неопределено;
		
	КонецЦикла;
	
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отчет отправлен");
	
КонецПроцедуры



Процедура РассылкаПоступленийКонтрольСтатусов() Экспорт
	
	//КаталогАрхивныхПрайсЛистов = Константы.КаталогАрхивныхПрайсЛистов.Получить();
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РассылкаПоступленийКонтрольСтатусов");
	Параметры = Новый Структура("КоличествоДнейВыборки, СписокАдресовРассылки");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		Возврат;
	КонецЕсли;	
	   
	
	
	Запрос = Новый Запрос;
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	П.Дата КАК Дата,
	//               |	П.ДатаФактПоступления,
	//               |	П.Номер,
	//               |	П.ВхНомерНакл,
	//               |	П.ВхНомерСФ,
	//               |	П.Поставщик.Наименование КАК Поставщик,
	//               |	П.Склад.Наименование КАК Аптека,
	//               |	П.СуммаДок,
	//               |	П.СуммаДокРозн,
	//               |	П.Статус,
	//               |	П.СтатусДокАптеки,
	//               |	П.Комментарий,
	//               |	П.КомментарийАптеки,
	//               |	П.Фирма.Наименование КАК Фирма,
	//               |	П.Проведен,
	//               |	П.ПометкаУдаления
	//               |ИЗ
	//               |	Документ.УЗ_ПоступлениеТовара КАК П
	//               |ГДЕ
	//               |	П.Дата >= ДАТАВРЕМЯ(2016, 9, 1)
	//               |	И П.Дата <= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1 * &КоличествоДнейВыборки)
	//               |	И П.СтатусДокАптеки В(&СтатусыДокАптеки)
	//               |	И П.Склад.ПометкаУдаления = Ложь
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	Дата";
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	П.Дата КАК Дата,
	               |	П.ДатаФактПоступления,
	               |	П.Номер,
	               |	П.ВхНомерНакл,
	               |	П.ВхНомерСФ,
	               |	П.Поставщик.Наименование КАК Поставщик,
	               |	П.Склад.Наименование КАК Аптека,
	               |	П.СуммаДок,
	               |	П.СуммаДокРозн,
	               |	П.Статус,
	               |	П.СтатусДокАптеки,
	               |	П.Комментарий,
	               |	П.КомментарийАптеки,
	               |	П.Фирма.Наименование КАК Фирма,
	               |	П.Проведен,
	               |	П.ПометкаУдаления,
	               |	Выборка.ФИОБЕ,
	               |	Выборка.Почта КАК Почта,
	               |	П.КД_ЭДО как КДЭДО
	               |ИЗ
	               |	Документ.УЗ_ПоступлениеТовара КАК П
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			Сотр.ФИО КАК ФИО,
	               |			Сотр.АдресЭлектроннойПочты КАК Почта,
	               |			Сотр.Ссылка КАК Аптека
	               |		ИЗ
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				П.Склад КАК Склад
	               |			ИЗ
	               |				Документ.УЗ_ПоступлениеТовара КАК П
	               |			ГДЕ
	               |				П.Дата >= ДАТАВРЕМЯ(2016, 9, 1)
	               |				И П.Дата <= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1 * &КоличествоДнейВыборки)
	               |				И П.СтатусДокАптеки В(&СтатусыДокАптеки)
	               |				И П.Склад.ПометкаУдаления = ЛОЖЬ) КАК Выборка
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК Сотр
	               |				ПО Выборка.Склад = Сотр.Ссылка
	               |					И (Сотр.Должность = &Должность)) КАК Выборка
	               |		ПО (Выборка.Аптека = П.Склад)
	               |ГДЕ
	               |	П.Дата >= ДАТАВРЕМЯ(2016, 9, 1)
	               |	И П.Дата <= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, -1 * &КоличествоДнейВыборки)
	               |	И П.СтатусДокАптеки В(&СтатусыДокАптеки)
	               |	И П.Склад.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |ИТОГИ ПО
	               |	Почта";
	
	
	СтатусыДокАптеки = Новый СписокЗначений;
	СтатусыДокАптеки.Добавить(Перечисления.СтатусДокАптеки.Неопределено);
	СтатусыДокАптеки.Добавить(Перечисления.СтатусДокАптеки.Создан);
	
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Запрос.УстановитьПараметр("КоличествоДнейВыборки",Параметры.КоличествоДнейВыборки);
	Запрос.УстановитьПараметр("Должность",Параметры.ДолжностьБЕ);
	Запрос.УстановитьПараметр("СтатусыДокАптеки",СтатусыДокАптеки);

	
	н=0;

	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустую выборку");
		Возврат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("РассылкаПоступленийКонтрольСтатусов");
	текОбласть = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(текОбласть);
	
	н=0;
	Пока Выборка.Следующий() Цикл
		н=н+1;
		текОбласть = Макет.ПолучитьОбласть("Строка");
		текОбласть.Параметры.Заполнить(Выборка);
		текОбласть.Параметры.Ном = н;
		текОбласть.Параметры.ДатаФактПоступления = ?(Выборка.ДатаФактПоступления = Дата(1,1,1),"",Выборка.ДатаФактПоступления);
		Таб.Вывести(текОбласть);
	КонецЦикла;	
	УниверсальныеМеханизмы.РасчетШириныКолонок(Таб);	
	
	ИмяФайла = КаталогВременныхФайлов() + "insupp_" +Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + ".XLSX";
	
	Таб.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	МПочтец = Обработки.Почтарь;
	Почтец = МПочтец.Создать();
	Почтец.Рассылка.Очистить();
	Почтец.Автоотправка = Истина;
	
	СписокАдресовРассылки = СтрЗаменить(Параметры.СписокАдресовРассылки,";",Символы.ПС);
	Для н=1 по СтрЧислоСтрок(СписокАдресовРассылки) Цикл
		ТекПочта = СтрПолучитьСтроку(СписокАдресовРассылки,н);
		Если НЕ ПустаяСтрока(ТекПочта) Тогда
			Почтец.Рассылка.Добавить(ТекПочта);
		КонецЕсли;
	КонецЦикла;
	
	Почтец.СписокВложений.Добавить(ИмяФайла);
	Почтец.Тема = "Контроль оприходования товара " + ТекущаяДата();
	Почтец.ТекстПисьма = Почтец.Тема;
	
	Почтец.Функция_Послать();
	
	Почтец = Неопределено;
	
	УдалитьФайлы(ИмяФайла);
	
	// Рассылаем каждому Директору БЕ свой регион и свои аптеки
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ФИОБЕ) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетали = Выборка.Выбрать();
		Таб = Новый ТабличныйДокумент;
		Макет = ПолучитьОбщийМакет("РассылкаПоступленийКонтрольСтатусов");
		текОбласть = Макет.ПолучитьОбласть("Шапка");
		Таб.Вывести(текОбласть);
		
		н=0;
		Пока ВыборкаДетали.Следующий() Цикл
			н=н+1;
			текОбласть = Макет.ПолучитьОбласть("Строка");
			текОбласть.Параметры.Заполнить(ВыборкаДетали);
			текОбласть.Параметры.Ном = н;
			текОбласть.Параметры.ДатаФактПоступления = ?(ВыборкаДетали.ДатаФактПоступления = Дата(1,1,1),"",ВыборкаДетали.ДатаФактПоступления);
			Если ВыборкаДетали.КДЭДО = Истина Тогда
				текОбласть.Параметры.Поставщик = ВыборкаДетали.Поставщик + " Кросс-докинг" ;	
			КонецЕсли;
			Таб.Вывести(текОбласть);
		КонецЦикла;	
		УниверсальныеМеханизмы.РасчетШириныКолонок(Таб);	
		
		ИмяФайла = КаталогВременныхФайлов() + "insupp_" +Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + ".XLSX";
		
		Таб.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		
		МПочтец = Обработки.Почтарь;
		Почтец = МПочтец.Создать();
		Почтец.Рассылка.Очистить();
		Почтец.Автоотправка = Истина;
		Почтец.Рассылка.Добавить(Выборка.Почта);
		
		Почтец.СписокВложений.Добавить(ИмяФайла);
		Почтец.Тема = "Контроль оприходования товара " + ТекущаяДата();
		Почтец.ТекстПисьма = Почтец.Тема;
		
		Почтец.Функция_Послать();
		
		Почтец = Неопределено;
		
		УдалитьФайлы(ИмяФайла);		
		
	КонецЦикла;
	
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Отчет отправлен");
	
КонецПроцедуры

Процедура ВыгрузитьСправочникТоваровВCSV() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВыгрузитьСправочникТоваровВCSV");
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла("CSV");

	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
		Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		КаталогФТП			= "/home/usr1cv8/ftp_net/post/GDPAHR/";
	Иначе
		КаталогФТП			= "\\id-vm-1\ftp_data\Post\GDPAHR\";
	КонецЕсли;	
	
	ФайлДанных		= КаталогФТП + "ap.CSV";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АП.ПометкаУдаления,
	               |	АП.Код,
	               |	АП.Наименование КАК Наименование,
	               |	АП.АптечныйОБ,
	               |	АП.Артикул,
	               |	АП.Возраст,
	               |	АП.ГруппаАП.Наименование КАК ГруппаАП,
	               |	АП.ГруппаНаценки.Наименование КАК ГруппаНаценки,
	               |	АП.ГруппаНаценкиДоп.Наименование КАК ГруппаНаценкиДоп,
	               |	АП.ГруппаФТГ.Наименование КАК ГруппаФТГ,
	               |	АП.ДатаВводаВАП,
	               |	АП.Дисконт,
	               |	АП.Дозировка.Наименование КАК Дозировка,
	               |	АП.Дополнение,
	               |	АП.ЖНВЛС,
	               |	АП.ЗакупочнаяЦена,
	               |	АП.Категория.Наименование КАК Категория,
	               |	АП.ГруппаМалина.Наименование КАК ГруппаМалина,
	               |	АП.КолвоВУпаковке,
	               |	АП.КоличествоБалловЗаПродажу,
	               |	АП.Концентрация,
	               |	АП.Коэффициент,
	               |	АП.ЛекФорма.Наименование КАК ЛекФорма,
	               |	АП.МаксКоличествоВОдинЧек,
	               |	АП.МаксЦенаMedlux,
	               |	АП.МеждународноеНазвание,
	               |	АП.МестоХранения.Наименование КАК МестоХранения,
	               |	АП.МинимальныйЗаказ,
	               |	АП.МинЦенаMedlux,
	               |	АП.МНН.Наименование КАК МНН,
	               |	АП.Назначение.Наименование КАК Назначение,
	               |	АП.НезависимаяГруппа.Наименование КАК НезависимаяГруппа,
	               |	АП.Новинка,
	               |	АП.ОбобщеннаяГруппа.Наименование КАК ОбобщеннаяГруппа,
	               |	АП.ОснованиеСогласования,
	               |	АП.ОсновнаяГруппа.Наименование КАК ОсновнаяГруппа,
	               |	АП.ОтпускПоРецепту,
	               |	АП.ПККН,
	               |	АП.Подгруппа.Наименование КАК Подгруппа,
	               |	АП.Подкатегория.Наименование КАК Подкатегория,
	               |	АП.Поставщик.Наименование КАК Поставщик,
	               |	АП.Примечание,
	               |	АП.НеУчаствуетВМотивации,
	               |	АП.Причина,
	               |	АП.Производитель.Наименование КАК Производитель,
	               |	АП.РозничнаяЦена,
	               |	АП.РозничнаяЦенаДоп,
	               |	АП.СВЛС,
	               |	АП.Сезон.Наименование КАК Сезон,
	               |	АП.Сезонный,
	               |	АП.Согласован,
	               |	АП.СпецПроект.Наименование КАК СпецПроект,
	               |	АП.СпецРознЦена,
				   //|	АП.СтавкаНДС.Ставка КАК СтавкаНДС,
			  	   |	ВЫБОР
			 	   |		КОГДА АП.СтавкаНДС.Код = 3
			  	   |				И &Дата < ДАТАВРЕМЯ(2019, 1, 1)
			  	   |			ТОГДА 18
			  	   |		ИНАЧЕ АП.СтавкаНДС.Ставка
			  	   |	КОНЕЦ КАК СтавкаНДС,
	               |	АП.Страна.Наименование КАК Страна,
	               |	АП.СтраницаРаспродаж,
	               |	АП.ТипДляЦО,
	               |	АП.ТоварнаяГруппа.Наименование КАК ТоварнаяГруппа,
	               |	АП.Топ100,
	               |	АП.Топ1000,
	               |	АП.ТорговоеНаименование.Наименование КАК ТорговоеНаименование,
	               |	АП.УТК.Наименование КАК УТК,
	               |	АП.УчаствуетВАП,
	               |	АП.Фасовка,
	               |	АП.Холодильник,
	               |	АП.ШиринаУпаковки,
	               |	АП.ВыборочнаяИнвентаризация,
	               |	АП.ПорогПродаж,
	               |	АП.ЧувствителенКЦене,
	               |	АП.НормативСрокаГодности,
	               |	АП.Бренд.Наименование КАК Бренд,
	               |	АП.Локомотив.Наименование КАК Локомотив,
	               |	АП.Маркер.Наименование КАК Маркер,
	               |	АП.АссортиментГипермаркета,
	               |	АП.ДатаВводаВСТМ,
	               |	АП.НоваяКатегория.Наименование КАК НоваяКатегория,
	               |	АП.Кластер.Наименование КАК Кластер,
	               |	АП.Сегмент.Наименование КАК Сегмент,
	               |	АП.ТипТовара.Наименование КАК ТипТовара
	               |ИЗ
	               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
				   
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());			   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Т = Новый ЗаписьТекста(ИмяТемпФайла,КодировкаТекста.ANSI);
	
	МассивРекв = Новый Массив;
	
	МассивРекв.Добавить("ПометкаУдаления");
	МассивРекв.Добавить("Код");
	МассивРекв.Добавить("Наименование");
	МассивРекв.Добавить("АптечныйОБ");
	МассивРекв.Добавить("Артикул");
	МассивРекв.Добавить("Возраст");
	МассивРекв.Добавить("ГруппаАП");
	МассивРекв.Добавить("ГруппаНаценки");
	МассивРекв.Добавить("ГруппаНаценкиДоп");
	МассивРекв.Добавить("ГруппаФТГ");
	МассивРекв.Добавить("ДатаВводаВАП");
	МассивРекв.Добавить("Дисконт");
	МассивРекв.Добавить("Дозировка");
	МассивРекв.Добавить("Дополнение");
	МассивРекв.Добавить("ЖНВЛС");
	МассивРекв.Добавить("ЗакупочнаяЦена");
	МассивРекв.Добавить("Категория");
	МассивРекв.Добавить("ГруппаМалина");
	МассивРекв.Добавить("КолвоВУпаковке");
	МассивРекв.Добавить("КоличествоБалловЗаПродажу");
	МассивРекв.Добавить("Концентрация");
	МассивРекв.Добавить("Коэффициент");
	МассивРекв.Добавить("ЛекФорма");
	МассивРекв.Добавить("МаксКоличествоВОдинЧек");
	МассивРекв.Добавить("МаксЦенаMedlux");
	МассивРекв.Добавить("МеждународноеНазвание");
	МассивРекв.Добавить("МестоХранения");
	МассивРекв.Добавить("МинимальныйЗаказ");
	МассивРекв.Добавить("МинЦенаMedlux");
	МассивРекв.Добавить("МНН");
	МассивРекв.Добавить("Назначение");
	МассивРекв.Добавить("НезависимаяГруппа");
	МассивРекв.Добавить("Новинка");
	МассивРекв.Добавить("ОбобщеннаяГруппа");
	МассивРекв.Добавить("ОснованиеСогласования");
	МассивРекв.Добавить("ОсновнаяГруппа");
	МассивРекв.Добавить("ОтпускПоРецепту");
	МассивРекв.Добавить("ПККН");
	МассивРекв.Добавить("Подгруппа");
	МассивРекв.Добавить("Подкатегория");
	МассивРекв.Добавить("Поставщик");
	МассивРекв.Добавить("Примечание");
	МассивРекв.Добавить("НеУчаствуетВМотивации");
	МассивРекв.Добавить("Причина");
	МассивРекв.Добавить("Производитель");
	МассивРекв.Добавить("РозничнаяЦена");
	МассивРекв.Добавить("РозничнаяЦенаДоп");
	МассивРекв.Добавить("СВЛС");
	МассивРекв.Добавить("Сезон");
	МассивРекв.Добавить("Сезонный");
	МассивРекв.Добавить("Согласован");
	МассивРекв.Добавить("СпецПроект");
	МассивРекв.Добавить("СпецРознЦена");
	МассивРекв.Добавить("СтавкаНДС");
	МассивРекв.Добавить("Страна");
	МассивРекв.Добавить("СтраницаРаспродаж");
	МассивРекв.Добавить("ТипДляЦО");
	МассивРекв.Добавить("ТоварнаяГруппа");
	МассивРекв.Добавить("Топ100");
	МассивРекв.Добавить("Топ1000");
	МассивРекв.Добавить("ТорговоеНаименование");
	МассивРекв.Добавить("УТК");
	МассивРекв.Добавить("УчаствуетВАП");
	МассивРекв.Добавить("Фасовка");
	МассивРекв.Добавить("Холодильник");
	МассивРекв.Добавить("ШиринаУпаковки");
	МассивРекв.Добавить("ВыборочнаяИнвентаризация");
	МассивРекв.Добавить("ПорогПродаж");
	МассивРекв.Добавить("ЧувствителенКЦене");
	МассивРекв.Добавить("НормативСрокаГодности");
	МассивРекв.Добавить("Бренд");
	МассивРекв.Добавить("Локомотив");
	МассивРекв.Добавить("Маркер");
	МассивРекв.Добавить("АссортиментГипермаркета");
	МассивРекв.Добавить("ДатаВводаВСТМ");
	МассивРекв.Добавить("НоваяКатегория");
	МассивРекв.Добавить("Кластер");
	МассивРекв.Добавить("Сегмент");
	МассивРекв.Добавить("ТипТовара");
	
	ш="";
	Для каждого стр из МассивРекв Цикл
		ш = ш + ?(ш="", стр, ";"+ стр);
	КонецЦикла;
	Т.ЗаписатьСтроку(ш);
	
	//Всего = Выборка.Количество();
	//н=0;
	Пока Выборка.Следующий() Цикл
		//н=н+1;
		//Если н%500 = 0 Тогда
		//	Состояние("" + н + " из " + Всего);	
		//КонецЕсли;
		с = "";
		Для каждого стр из МассивРекв Цикл
			п_Знч = Выборка[стр];
			п_ТипЗнч = ТипЗнч(п_Знч);
			Если п_ТипЗнч = Тип("Строка") Тогда
				п_Знч = СтрЗаменить(п_Знч,";","");
			Иначе 
				п_Знч = Формат(п_Знч,"ЧРД=.; ЧГ=0; БЛ=0; БИ=1; ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			с = с + ?(с="", п_Знч, ";"+ п_Знч);
			
		КонецЦикла;
		
		Т.ЗаписатьСтроку(с);
		
	КонецЦикла;
	
	Т.Закрыть();
	
	Попытка
		ПереместитьФайл(ИмяТемпФайла,ФайлДанных);
		
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справочник товаров выгружен в " + ФайлДанных);
	Исключение
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, ""+ОписаниеОшибки());
	КонецПопытки;	

	
КонецПроцедуры

//--------------------------  работа с розничными ценами  -----------------------------------------
Процедура ВыгрузитьОбщиеЦены(КодАптеки,ТЗЦен)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XML");
	
	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");
	
	
	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ЗаписатьСтроку("<document>"); 

	
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "pack_type", "PRICE_GOODS"); 
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "fmt_ver", "1"); 
	
	ЗаписьXML.ЗаписатьСтроку("<price_goods>");
 

	Для каждого стр из ТЗЦен Цикл
		ЗаписьXML.ЗаписатьСтроку("<row>");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc",		Формат(стр.НомерДокумента,"ЧГ=0"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc", 		Формат(стр.ДатаУстановки,"ДФ=dd.MM.yyyy"));		
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_goods",	Формат(стр.ТоварКод,"ЧГ=0"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_rtl_w_vat_pack", Формат(стр.Цена,"ЧРД=.; ЧГ=0") );
		ЗаписьXML.ЗаписатьСтроку("</row>");
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьСтроку("</price_goods>");
	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "STORING_PLACE"
	
	ЗаписьXML.Закрыть();
	ЗаписьXML = Новый ЧтениеТекста(ИмяФайла,"windows-1251");
	ВесьТекст = ЗаписьXML.Прочитать();
	ЗаписьXML.Закрыть();
	УдалитьФайлы(ИмяФайла);

	

	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
		Если КодСчетчика = -1 Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.КодАптеки = КодАптеки;
	МЗ.ТипУпаковки = "PRICE_GOODS";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "price_goods_pend" + СокрЛП(Формат(КодАптеки,"ЧГ=0")) + "_" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy.ЧЧ.мм.сс") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.Записать();	
	
	
КонецПроцедуры

Процедура ВыгрузитьИндивидуальныеЦены(КодАптеки,ТЗЦен)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XML");
	
	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");
	
	
	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ЗаписатьСтроку("<document>"); 

	
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "pack_type", "PRICE_GPART"); 
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "fmt_ver", "1"); 
	
	ЗаписьXML.ЗаписатьСтроку("<price_gpart>");
 

	Для каждого стр из ТЗЦен Цикл
		ЗаписьXML.ЗаписатьСтроку("<row>");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ndoc",		Формат(стр.НомерДокумента,"ЧГ=0"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ddoc", 		Формат(стр.ДатаУстановки,"ДФ=dd.MM.yyyy"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "guid_gpart",	Формат(стр.ПартияКод,"ЧГ=0"));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "cost_rtl_w_vat_pack", Формат(стр.Цена,"ЧРД=.; ЧГ=0") );
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_prescription",	Число(стр.ОтпускПоРецепту));

		ЗаписьXML.ЗаписатьСтроку("</row>");
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьСтроку("</price_gpart>");
	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "STORING_PLACE"
	
	ЗаписьXML.Закрыть();
	ЗаписьXML = Новый ЧтениеТекста(ИмяФайла,"windows-1251");
	ВесьТекст = ЗаписьXML.Прочитать();
	ЗаписьXML.Закрыть();
	УдалитьФайлы(ИмяФайла);

	

	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисЦелевые");
		Если КодСчетчика = -1 Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ОфисАптекаЦелевые.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.КодАптеки = КодАптеки;
	МЗ.ТипУпаковки = "PRICE_GPART";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "price_gpart_pend_" + СокрЛП(Формат(КодАптеки,"ЧГ=0")) + "_" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy.ЧЧ.мм.сс") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.Записать();	
	
	
КонецПроцедуры

Процедура ВырузитьВсеОтложенныеЦены() Экспорт
	
	
	//Выгрузка общих отложенных цен
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РозничныеЦеныОтложенные.АптекаКод,
	|	КОЛИЧЕСТВО(РозничныеЦеныОтложенные.АптекаКод) КАК АптекаКод1
	|ИЗ
	|	РегистрСведений.РозничныеЦеныОтложенные КАК РозничныеЦеныОтложенные
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеЦеныОтложенные.АптекаКод";
	
	Рез = Запрос.Выполнить();
	ВыборкаАптек = Рез.Выбрать();
	Запрос.Текст = "ВЫБРАТЬ
	|	РозничныеЦеныОтложенные.ТоварКод,
	|	РозничныеЦеныОтложенные.Цена,
	|	РозничныеЦеныОтложенные.Коэффициент,
	|	РозничныеЦеныОтложенные.ДатаУстановки,
	|	РозничныеЦеныОтложенные.НомерДокумента
	|ИЗ
	|	РегистрСведений.РозничныеЦеныОтложенные КАК РозничныеЦеныОтложенные
	|ГДЕ
	|	РозничныеЦеныОтложенные.АптекаКод = &АптекаКод
	|	и РозничныеЦеныОтложенные.Цена > 0";
	
	Пока ВыборкаАптек.Следующий() Цикл
		
		Запрос.УстановитьПараметр("АптекаКод",ВыборкаАптек.АптекаКод);
		ТЗЦен = Запрос.Выполнить().Выгрузить();
		
		Если ТЗЦен.Количество() > 0 Тогда
			ВыгрузитьОбщиеЦены(ВыборкаАптек.АптекаКод,ТЗЦен);
			НЗ = РегистрыСведений.РозничныеЦеныОтложенные.СоздатьНаборЗаписей();
			НЗ.Отбор.АптекаКод.Установить(ВыборкаАптек.АптекаКод);
			НЗ.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	//Выгрузка общих отложенных цен  по партиям
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РЦП.АптекаКод,
	               |	КОЛИЧЕСТВО(РЦП.АптекаКод) КАК Колво
	               |ИЗ
	               |	РегистрСведений.РозничныеЦеныПоПартиямОтложенные КАК РЦП
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РЦП.АптекаКод";
	
	Рез = Запрос.Выполнить();
	ВыборкаАптек = Рез.Выбрать();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РЦП.Цена,
	               |	РЦП.ДатаУстановки,
	               |	РЦП.НомерДокумента,
	               |	РЦП.ПартияКод,
	               |	ЕСТЬNULL(АП.ОтпускПоРецепту,ЛОЖЬ) как ОтпускПоРецепту
	               |ИЗ
	               |	РегистрСведений.РозничныеЦеныПоПартиямОтложенные КАК РЦП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	               |		ПО РЦП.ТоварКод = АП.Код
	               |ГДЕ
	               |	РЦП.АптекаКод = &АптекаКод
	               |	И РЦП.Цена > 0";
	
	Пока ВыборкаАптек.Следующий() Цикл
		
		Запрос.УстановитьПараметр("АптекаКод",ВыборкаАптек.АптекаКод);
		ТЗЦен = Запрос.Выполнить().Выгрузить();
		
		Если ТЗЦен.Количество() > 0 Тогда
			ВыгрузитьИндивидуальныеЦены(ВыборкаАптек.АптекаКод,ТЗЦен);
			НЗ = РегистрыСведений.РозничныеЦеныПоПартиямОтложенные.СоздатьНаборЗаписей();
			НЗ.Отбор.АптекаКод.Установить(ВыборкаАптек.АптекаКод);
			НЗ.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

//-------------------------------------------------------------------------------------------------
Процедура АннулироватьЗаказыПокупателя() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("АннулироватьЗаказыПокупателя");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.ДатаОкончанияЖизниЗаказа <= &Дата
	               |	И ЗаказПокупателя.ИсточникИнтернетЗаказа.АвтоматическоеАннулированиеЗаказа = ИСТИНА
	               |	И ЗаказПокупателя.СтатусЗаказаПокупателя = ЗаказПокупателя.ИсточникИнтернетЗаказа.СтатусЗаказаДляАннулирования";
	 Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	 //Запрос.УстановитьПараметр("СтатусЗаказаПокупателя",Справочники.СтатусыЗаказаПокупателя.DELIVERED);
	 Рез = Запрос.Выполнить();
	 Если Рез.Пустой() Тогда
		 Возврат;
	 КонецЕсли;
	              
	 Выборка = Рез.Выбрать();
	 Пока Выборка.Следующий() Цикл
		ДокО = Выборка.Ссылка.ПолучитьОбъект();
		//ДокО.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.TIMEOUT;
		ДокО.ВыгрузитьВАптеку("TIMEOUT");
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Аннулировано " + Выборка.Количество() + " заказов");
	 
	
 КонецПроцедуры
 
Процедура ВыгрузкаИзмененийПоТоваруВАптеки() Экспорт
	 
	 
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("ВыгрузкаИзмененныхТоваровВАптеки");
	Параметры = Новый Структура("КоличествоЧасов");
	
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Не задан параметр КоличествоЧасов. Выгрузка не выполнена.");
		Возврат;
	КонецЕсли;
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	Выборка.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
               |	Выборка.Ссылка.Код КАК КодТовара,
               |	Выборка.Ссылка.Наименование КАК Наименование,
               |	ПОДСТРОКА(Выборка.Ссылка.МеждународноеНазвание, 1, 150) КАК МеждународноеНазвание,
               |	0 КАК КодПроизводителя,
               |	Выборка.Ссылка.УчаствуетВАП КАК УчаствуетВАП,
               |	ЕСТЬNULL(Выборка.Ссылка.МНН.Код, 0) КАК КодМНН,
               |	Выборка.Ссылка.ЖНВЛС КАК ЖНВЛС,
               |	Выборка.Ссылка.ПККН КАК ПККН,
               |	ВЫБОР
               |		КОГДА Выборка.Ссылка.ДатаВводаВАП = ДАТАВРЕМЯ(1, 1, 1)
               |			ТОГДА ДАТАВРЕМЯ(2000, 1, 1)
               |		ИНАЧЕ Выборка.Ссылка.ДатаВводаВАП
               |	КОНЕЦ КАК ДатаВводаВАП,
			   //|	Выборка.Ссылка.СтавкаНДС.Ставка КАК Ставка,
               |	ВЫБОР
               |		КОГДА Выборка.Ссылка.СтавкаНДС.Код = 3
               |				И &ВыбДата < ДАТАВРЕМЯ(2019, 1, 1)
               |			ТОГДА 18
               |		ИНАЧЕ Выборка.Ссылка.СтавкаНДС.Ставка
               |	КОНЕЦ КАК Ставка,
               |	Выборка.Ссылка.АптечныйОБ КАК ОбязательноеНаличие,
               |	Выборка.Ссылка.МаксКоличествоВОдинЧек КАК МаксКоличествоВОдинЧек,
               |	Выборка.Ссылка.ОтпускПоРецепту КАК ОтпускПоРецепту,
               |	ЕСТЬNULL(Выборка.Ссылка.Подкатегория.Код, 0) КАК КодПодкатегории,
               |	Выборка.Ссылка.Коэффициент КАК Коэффициент,
               |	ЕСТЬNULL(Выборка.Ссылка.Страна.Наименование, """") КАК Страна,
               |	ЕСТЬNULL(Выборка.Ссылка.Бренд.Код, 0) КАК КодБренда,
               |	ЕСТЬNULL(Выборка.Ссылка.МестоХранения.Код, 0) КАК МестоХраненияКод
               |ИЗ
               |	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН.Изменения КАК Выборка
               |ГДЕ
               |	Выборка.Дата >= &ВыбДата
               |	И Выборка.Реквизит В (""Наименование"", ""ЖНВЛС"", ""Страна"", ""МНН"", ""Бренд"", ""МеждународноеНазвание"")
               |
               |УПОРЯДОЧИТЬ ПО
               |	Выборка.Ссылка.Код";	
			   
	Запрос.УстановитьПараметр("ВыбДата",ТекущаяДата() - Параметры.КоличествоЧасов*60*60);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаТовары = Рез.Выбрать();
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"windows-1251");

	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""WINDOWS-1251""?>");

	ЗаписьXML.ЗаписатьСтроку("<document>"); 

	
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "pack_type", "GOODS_UPDATE"); 
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "fmt_ver", "1"); 
	
		ЗаписьXML.ЗаписатьСтроку("<goods>");
		Пока ВыборкаТовары.Следующий() Цикл

				ЗаписьXML.ЗаписатьСтроку("<row>");
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id",			Формат(ВыборкаТовары.КодТовара,"ЧГ=0"));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_deleted",	"" + Число(ВыборкаТовары.ПометкаУдаления)); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_active",	"" + Число(ВыборкаТовары.УчаствуетВАП));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr",		КорректировкаСпецСимволовXML(СокрЛП(ВыборкаТовары.Наименование)));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr_ecr",	"");
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "descr_en",		КорректировкаСпецСимволовXML(СокрЛП(ВыборкаТовары.МеждународноеНазвание)));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "article",		""); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "p_vat",		Формат(ВыборкаТовары.Ставка,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_ap",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_ftg",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_main","0"); //основная группа
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_group_general","0"); //обобщенная группа
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_brand_goods",Формат(ВыборкаТовары.КодБренда,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_trade_name","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_inter_name",Формат(ВыборкаТовары.КодМНН,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_category_goods","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_sub_category_goods",Формат(ВыборкаТовары.КодПодкатегории,"ЧГ=0; ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_med_form",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_destination","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_prod_form",	"0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "id_storing_place",Формат(ВыборкаТовары.МестоХраненияКод,"ЧГ=0; ЧН=0"));  
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_life_important","" + Формат(Число(ВыборкаТовары.ЖНВЛС),"ЧН=0"));  
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_social_important","0"); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_scdc_list",		"" + Формат(Число(ВыборкаТовары.ПККН),"ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_mandatory",		"" + Формат(Число(ВыборкаТовары.ОбязательноеНаличие),"ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "is_prescription","" + Формат(Число(ВыборкаТовары.ОтпускПоРецепту),"ЧН=0")); 
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "date_in", 		Формат(ВыборкаТовары.ДатаВВодаВАП,"ДФ=dd.MM.yyyy"));
				  ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "producer_country_descr",		КорректировкаСпецСимволовXML(СокрЛП(ВыборкаТовары.Страна)));

				ЗаписьXML.ЗаписатьСтроку("</row>");

			КонецЦикла;
		ЗаписьXML.ЗаписатьСтроку("</goods>"); //конец записи секции  "good"

	
	ЗаписьXML.ЗаписатьСтроку("</document>"); //конец записи секции  "STORING_PLACE"
	
	ЗаписьXML.Закрыть();
	ЗаписьXML = Новый ЧтениеТекста(ИмяФайла,"windows-1251");
	ВесьТекст = ЗаписьXML.Прочитать();
	ЗаписьXML.Закрыть();
	УдалитьФайлы(ИмяФайла);	
	
	КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисШВ");
	Если КодСчетчика = -1 Тогда
		КодСчетчика = ОМ_ТСО.ПолучитьКодСчетчика("ОбменАптекаОфисШВ");
		Если КодСчетчика = -1 Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ОфисАптекаШироковещание.СоздатьМенеджерЗаписи();
	МЗ.Код = КодСчетчика;
	МЗ.ТипУпаковки = "GOODS_UPDATE";
	МЗ.Приоритет = 1;
	МЗ.ВерсияФормата = 1;
	МЗ.ИмяФайла = "GOODS_UPDATE_" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") +".xml";
	МЗ.ИдентификаторКодировки = 1;
	МЗ.ХМЛСтрока = ВесьТекст;
	МЗ.Записать();
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Выгружено " + ВыборкаТовары.Количество() + " измененных записей");
	
	
КонецПроцедуры


Процедура РасчетИРассылкаСверхзапасаТовараSAS() Экспорт

	СпрРЗ = справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("РасчетРисковОбразованияСЗ_Аптек");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - РасчетРисковОбразованияСЗ_Аптек. Выполнение задания не может быть продолжено.",,Истина);
		Возврат	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("ПутьКОбработке,ПочтаРассылки,ПочтаРассылки1");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ПутьКОбработке,ПочтаРассылки. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
	КонецЕсли;
	
	Попытка
		Обработка = Обработки.РасчетРисковОбразованияСЗ.Создать(); 
		Обработка.СформироватьРасчетРискиОбразованияСЗ(,,,Истина,Параметры.ПочтаРассылки+" "+Параметры.ПочтаРассылки1); 
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
	
КонецПроцедуры
 
Процедура РассылкаКонтрольSAS()Экспорт

	СпрРЗ = справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("КонтрольОбновленияГруппSAS");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - КонтрольОбновленияГруппSAS. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("ПочтаРассылки, ПочтаРассылки1");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ПочтаРассылки,ПочтаРассылки1. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
	КонецЕсли;
	СтрокаСписокРассылки = Параметры.ПочтаРассылки+";"+Параметры.ПочтаРассылки1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК ПрогнозированиеSAS_Все
		|ПОМЕСТИТЬ ВТ_Прогнозирование_SAS_Все
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.РасчетПотребностиSAS = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК ПрогнозированиеSAS_Работает
		|ПОМЕСТИТЬ ВТ_Прогнозирование_SAS_Работает
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.РасчетПотребностиSAS = ИСТИНА
		|	И МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК ЗаказSAS_Все
		|ПОМЕСТИТЬ ВТ_ЗаказSAS_Все
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.ЗаказSAS = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК ЗаказSAS_Работает
		|ПОМЕСТИТЬ ВТ_Заказ_SAS_Работает
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
		|	И МестаХранения.ЗаказSAS = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КатегорияАптекиSAS_Все
		|ПОМЕСТИТЬ ВТ_КатегорияАптекиSAS_Все
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	НЕ МестаХранения.КатегорияАптекиSAS ЕСТЬ NULL
		|	И МестаХранения.КатегорияАптекиSAS <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КатегорияАптекиSAS_Работает
		|ПОМЕСТИТЬ ВТ_КатегорияАптекиSAS_Работает
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
		|	И НЕ МестаХранения.КатегорияАптекиSAS ЕСТЬ NULL
		|	И МестаХранения.КатегорияАптекиSAS <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоэфЦУС_Все
		|ПОМЕСТИТЬ ВТ_КоэфЦУС_Все
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.КоэффициентЦУС_A > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоэфЦУС_Работает
		|ПОМЕСТИТЬ ВТ_КоэфЦУС_Работает
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
		|	И МестаХранения.КоэффициентЦУС_A > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоКатегорий_Все
		|ПОМЕСТИТЬ ВТ_КолвоКатегорийSAS_Все
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		МестаХранения.КатегорияАптекиSAS КАК КоличествоКатегорий
		|	ИЗ
		|		Справочник.МестаХранения КАК МестаХранения
		|	ГДЕ
		|		НЕ МестаХранения.КатегорияАптекиSAS ЕСТЬ NULL
		|		И МестаХранения.КатегорияАптекиSAS <> 0) КАК табл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КоличествоКатегорий_Работает
		|ПОМЕСТИТЬ ВТ_КолвоКатегорийSAS_Работает
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		МестаХранения.КатегорияАптекиSAS КАК КоличествоКатегорий
		|	ИЗ
		|		Справочник.МестаХранения КАК МестаХранения
		|	ГДЕ
		|		МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
		|		И НЕ МестаХранения.КатегорияАптекиSAS ЕСТЬ NULL
		|		И МестаХранения.КатегорияАптекиSAS <> 0) КАК табл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Прогнозирование_SAS_Все.ПрогнозированиеSAS_Все КАК Прогн_Все,
		|	ВТ_Прогнозирование_SAS_Работает.ПрогнозированиеSAS_Работает КАК Прогн_Раб,
		|	ВТ_ЗаказSAS_Все.ЗаказSAS_Все КАК Заказ_Все,
		|	ВТ_Заказ_SAS_Работает.ЗаказSAS_Работает КАК ЗаказSAS_Работает,
		|	ВТ_КатегорияАптекиSAS_Все.КатегорияАптекиSAS_Все КАК Кат_Все,
		|	ВТ_КатегорияАптекиSAS_Работает.КатегорияАптекиSAS_Работает КАК КатегорияАптекиSAS_Работает,
		|	ВТ_КоэфЦУС_Все.КоэфЦУС_Все КАК Коэф_Все,
		|	ВТ_КоэфЦУС_Работает.КоэфЦУС_Работает КАК КоэфЦУС_Работает,
		|	ВТ_КолвоКатегорийSAS_Все.КоличествоКатегорий_Все КАК Кол_Все,
		|	ВТ_КолвоКатегорийSAS_Работает.КоличествоКатегорий_Работает КАК КоличествоКатегорий_Работает
		|ИЗ
		|	ВТ_Прогнозирование_SAS_Все КАК ВТ_Прогнозирование_SAS_Все,
		|	ВТ_Прогнозирование_SAS_Работает КАК ВТ_Прогнозирование_SAS_Работает,
		|	ВТ_ЗаказSAS_Все КАК ВТ_ЗаказSAS_Все,
		|	ВТ_Заказ_SAS_Работает КАК ВТ_Заказ_SAS_Работает,
		|	ВТ_КатегорияАптекиSAS_Все КАК ВТ_КатегорияАптекиSAS_Все,
		|	ВТ_КатегорияАптекиSAS_Работает КАК ВТ_КатегорияАптекиSAS_Работает,
		|	ВТ_КоэфЦУС_Все КАК ВТ_КоэфЦУС_Все,
		|	ВТ_КоэфЦУС_Работает КАК ВТ_КоэфЦУС_Работает,
		|	ВТ_КолвоКатегорийSAS_Все КАК ВТ_КолвоКатегорийSAS_Все,
		|	ВТ_КолвоКатегорийSAS_Работает КАК ВТ_КолвоКатегорийSAS_Работает";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//ТекстПисьма = 
	//"												|Все аптеки|Только с признаком""Работает"""+Символы.ПС;
	ТекстПисьма = "";
	
	Пока Выборка.Следующий() Цикл
		
		
		// Расчет количества аптек в которые переданы прогноз SAS за неделю
		// За текущий день (Вс)
		КоличествоАптекЗаНеделю_Все			= 0;
		КоличествоАптекЗаНеделю_Работает	= 0;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SAS_ПотребностьАптек.СкладКод
		|ПОМЕСТИТЬ ВТ_Аптеки_Все_ТМП
		|ИЗ
		|	РегистрСведений.SAS_ПотребностьАптек КАК SAS_ПотребностьАптек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КолвоАптекВсе
		|ПОМЕСТИТЬ ВТ_Аптеки_Все
		|ИЗ
		|	ВТ_Аптеки_Все_ТМП КАК Аптеки_Все
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	SAS_ПотребностьАптек.СкладКод
		|ПОМЕСТИТЬ ВТ_Аптеки_Работает_ТМП
		|ИЗ
		|	РегистрСведений.SAS_ПотребностьАптек КАК SAS_ПотребностьАптек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
		|		ПО SAS_ПотребностьАптек.СкладКод = МестаХранения.Код
		|ГДЕ
		|	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК КолвоАптекРаботает
		|ПОМЕСТИТЬ ВТ_Аптеки_Работает
		|ИЗ
		|	ВТ_Аптеки_Работает_ТМП КАК Аптеки_Работает
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Аптеки_Все.КолвоАптекВсе,
		|	ВТ_Аптеки_Работает.КолвоАптекРаботает
		|ИЗ
		|	ВТ_Аптеки_Все КАК ВТ_Аптеки_Все,
		|	ВТ_Аптеки_Работает КАК ВТ_Аптеки_Работает";
		Запрос.Текст = ТекстЗапроса;
		Выборка1 = Запрос.Выполнить().Выбрать();
		Если Выборка1.Следующий() Тогда
			
			КоличествоАптекЗаНеделю_Все			= Выборка1.КолвоАптекВсе;
			КоличествоАптекЗаНеделю_Работает	= Выборка1.КолвоАптекРаботает;
		
		КонецЕсли;
		
		// За предыдущие 6 дней (Пн-Сб)
		РасчетнаяДата = ТекущаяДата();//РабочаяДата;
		Для Сч = 1 По 6 Цикл
			
			РасчетнаяДата = НачалоДня(РасчетнаяДата)-1;
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	SAS_ПотребностьАптекАрхив.СкладКод
			|ПОМЕСТИТЬ ВТ_Аптеки_Все_ТМП
			|ИЗ
			|	РегистрСведений.SAS_ПотребностьАптекАрхив КАК SAS_ПотребностьАптекАрхив
			|ГДЕ
			|	SAS_ПотребностьАптекАрхив.Дата МЕЖДУ &Дата1 И &Дата2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(1) КАК КолвоАптекВсе
			|ПОМЕСТИТЬ ВТ_Аптеки_Все
			|ИЗ
			|	ВТ_Аптеки_Все_ТМП КАК ВТ_Аптеки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	SAS_ПотребностьАптекАрхив.СкладКод
			|ПОМЕСТИТЬ ВТ_Аптеки_Работает_ТМП
			|ИЗ
			|	РегистрСведений.SAS_ПотребностьАптекАрхив КАК SAS_ПотребностьАптекАрхив
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
			|		ПО SAS_ПотребностьАптекАрхив.СкладКод = МестаХранения.Код
			|ГДЕ
			|	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
			|	И SAS_ПотребностьАптекАрхив.Дата МЕЖДУ &Дата1 И &Дата2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(1) КАК КолвоАптекРаботает
			|ПОМЕСТИТЬ ВТ_Аптеки_Работает
			|ИЗ
			|	ВТ_Аптеки_Работает_ТМП КАК ВТ_Аптеки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Аптеки_Все.КолвоАптекВсе,
			|	ВТ_Аптеки_Работает.КолвоАптекРаботает
			|ИЗ
			|	ВТ_Аптеки_Все КАК ВТ_Аптеки_Все,
			|	ВТ_Аптеки_Работает КАК ВТ_Аптеки_Работает";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Дата1",НачалоДня(РасчетнаяДата));
			Запрос.УстановитьПараметр("Дата2",КонецДня(РасчетнаяДата));
			Выборка1 = Запрос.Выполнить().Выбрать();
			Если Выборка1.Следующий() Тогда
			
				КоличествоАптекЗаНеделю_Все			= КоличествоАптекЗаНеделю_Все + Выборка1.КолвоАптекВсе;
				КоличествоАптекЗаНеделю_Работает	= КоличествоАптекЗаНеделю_Работает + Выборка1.КолвоАптекРаботает;
		
			КонецЕсли;
		
		
		КонецЦикла; 
		//Макет = ПолучитьМакет("Макет1");
		//Область = Макет.ПолучитьОбласть("Тело");
		//ЗаполнитьЗначенияСвойств(Область.Параметры,Выборка);
		//
		//ТекстовыйДок = Новый ТекстовыйДокумент;
		//ТекстовыйДок.Вывести(Область);
		////ТекстовыйДок.Показать();
		//
		//ТекстПисьма = ТекстовыйДок.ПолучитьТекст();
		ТекстПисьма = ТекстПисьма+
	"Показатель												|Все аптеки |Только с признаком ""Работает"""+Символы.ПС;
	ТекстПисьма = ТекстПисьма+
	"Аптек в справочнике 1С имеющих признак: ""Прогнозирование SAS""				|"+"	   "+Выборка.Прогн_Все+"|	"+Выборка.Прогн_Раб+Символы.ПС;
	ТекстПисьма = ТекстПисьма+
	"Аптек в справочнике 1С имеющих признак: ""Заказ SAS""						|"+"	   "+Выборка.Заказ_Все+"|	"+Выборка.ЗаказSAS_Работает+Символы.ПС;
	ТекстПисьма = ТекстПисьма+
	"Аптек в справочнике 1С имеющих в поле: ""Категория аптеки SAS"" не пустое значение		|"+"	"+Выборка.Кат_Все+"|	"+Выборка.КатегорияАптекиSAS_Работает+Символы.ПС;
	ТекстПисьма = ТекстПисьма+
	"Аптек в справочнике 1С имеющих коэффициент ЦУС более 1					|"+"	       "+Выборка.Коэф_Все+"|	"+Выборка.КоэфЦУС_Работает+Символы.ПС;
	ТекстПисьма = ТекстПисьма+                                                                                                                                 
	"Всего моделей прогнозирования в мастер-данных 1С						|"+"	     "+Выборка.Кол_Все+"|	"+Выборка.КоличествоКатегорий_Работает+Символы.ПС;
	ТекстПисьма = ТекстПисьма+
	"Обновлено в SAS моделей прогнозирования автоматически в последнее прошедшее вс	|	"+Символы.ПС;
	ТекстПисьма = ТекстПисьма+
	"Отправлено прогнозов из SAS в 1С за предыдущую неделю (пн-вс) (сочетание: аптека-день)	|	"+КоличествоАптекЗаНеделю_Все+"| "+КоличествоАптекЗаНеделю_Работает
	+Символы.ПС;
	
	КонецЦикла;
	
	Почта=Обработки.Почтарь.Создать();
	Почта.Автоотправка=Истина;
	Почта.Тема = "Контрольные статусы SAS";
	Почта.ТекстПисьма = ТекстПисьма;
	
	СписокРассылки = СтрЗаменить(СтрокаСписокРассылки,";",Символы.ПС);
	Для н=1 по СтрЧислоСтрок(СписокРассылки) Цикл
		ТекПочта = СтрПолучитьСтроку(СписокРассылки,н);
		Если НЕ ПустаяСтрока(ТекПочта) Тогда
			Почта.Рассылка.Добавить(ТекПочта);
		КонецЕсли;
	КонецЦикла;
	
	Почта.функция_Послать();
	
КонецПроцедуры

Процедура ЗаполнениеМатрицаНЗизABCSAS() Экспорт
	
	СпрРЗ = справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("ЗаполнениеМатрицаНЗизABCSAS");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - КонтрольОбновленияГруппSAS. Выполнение задания не может быть продолжено.",,Истина);
		//Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("ПочтаРассылки");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ПочтаРассылки. Выполнение задания не может быть продолжено.",,Истина);
		//Возврат;
	КонецЕсли;
	СтрокаСписокРассылки = Параметры.ПочтаРассылки;
	СтрокаСообщений = "";
	
	СпрСотрудники = Справочники.Сотрудники;
	СпрСотрудникиSAS = СпрСотрудники.НайтиПоНаименованию("SAS робот");
	
	ВыборкаСпр = Справочники.УсловияЗаполненияРСМатрицаНЗ.Выбрать();
	ПервыйЗапрос = Истина;
	Сч = 1;
	Запрос = Новый Запрос;
	Пока ВыборкаСпр.Следующий() Цикл
				
		Если НЕ ВыборкаСпр.ИспользуетсяВРасчете Тогда
			Продолжить	
		КонецЕсли;
		
		// Доп  условие на группу
		ДопУсловие = "";
		Если ВыборкаСпр.ИспользуетсяПервыйСимвол Тогда
		
			Если ВыборкаСпр.ИспользуетсяВторойСимвол Тогда
			
				Если ВыборкаСпр.ИспользуетсяТретийСимвол Тогда
				
					СтрокаГруппа = ВыборкаСпр.БукваABCГруппы+""+ВыборкаСпр.БукваABCГруппы+""+ВыборкаСпр.БукваABCГруппы;
					ДопУсловие = "
					| И SAS_ABCРасчет.Группа = """ + СтрокаГруппа + """
					|";
				
				Иначе
				
					СтрокаГруппа = "["+ВыборкаСпр.БукваABCГруппы+""+ВыборкаСпр.БукваABCГруппы+"]%";
					ДопУсловие = "
					| И SAS_ABCРасчет.Группа ПОДОБНО """ + СтрокаГруппа + """
					|";
				
				КонецЕсли; 	
				
			Иначе
				
				СтрокаГруппа = "["+ВыборкаСпр.БукваABCГруппы+"]%";
				ДопУсловие = "
				| И SAS_ABCРасчет.Группа ПОДОБНО """ + СтрокаГруппа + """
				|";
				
			КонецЕсли; 	
		
		КонецЕсли;
		
		// Доп условие на Категорию товара
		Если ВыборкаСпр.КатегорияТоваров.Количество() <> 0 Тогда
		
			Сч = 1;
			Для каждого СтрокаТЧ Из ВыборкаСпр.КатегорияТоваров Цикл
			
				Если Сч = 1 Тогда
				
					ДопУсловие = ДопУсловие + "
					| И (АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО = &ТипДляЦО"+Строка(Сч)+"
					|";
					Запрос.УстановитьПараметр("ТипДляЦО"+Строка(Сч),СтрокаТЧ.КатегорияТовара)
					
				Иначе
					
					ДопУсловие = ДопУсловие + "
					| ИЛИ АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО = &ТипДляЦО"+Строка(Сч)+"
					|";
					Запрос.УстановитьПараметр("ТипДляЦО"+Строка(Сч),СтрокаТЧ.КатегорияТовара)
					
				КонецЕсли; 
				
				Сч = Сч + 1;
			
			КонецЦикла; 	
			ДопУсловие = ДопУсловие + ")";
			
		КонецЕсли; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	SAS_ABCРасчет.СкладКод КАК СкладКод,
		|	SAS_ABCРасчет.ТоварКод КАК ТоварКод,
		|	SAS_ABCРасчет.Группа КАК Группа,
		|	МестаХранения.Ссылка КАК Аптека,
		|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыНЗ.НЗ_2) КАК ВидНЗ,
		|   &ДнейНЗ"+Строка(Сч)+" КАК НЗ,
		|	&ДатаВнесенияВМатрицу КАК ДатаВнесенияВМатрицу,	
		|	&СрокДействияРекламы КАК СрокДействияРекламы,	
		|	&КтоВнесВМатрицу КАК КтоВнесВМатрицу	
		|ИЗ
		|	РегистрСведений.SAS_ABCРасчет КАК SAS_ABCРасчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
		|		ПО SAS_ABCРасчет.СкладКод = МестаХранения.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		|		ПО SAS_ABCРасчет.ТоварКод = АССОРТИМЕНТНЫЙ_ПЛАН.Код
		|ГДЕ
		|	МестаХранения.ЗаказSAS = ИСТИНА
		|	И МестаХранения.РасчетПотребностиSAS = ИСТИНА";
		
		Если НЕ ПустаяСтрока(ДопУсловие) Тогда
			ТекстЗапроса = ТекстЗапроса + ДопУсловие
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДнейНЗ" + Строка(Сч), ВыборкаСпр.НеснижаемыйЗапас);
		
		Если ПервыйЗапрос  Тогда
		
			РезультирующийЗапрос = ТекстЗапроса;
			ПервыйЗапрос = Ложь
		
		Иначе
		
			РезультирующийЗапрос = РезультирующийЗапрос + "
		|Объединить
		|"
			+ ТекстЗапроса
		
		КонецЕсли;
		
		Сч = Сч +1;
		
	КонецЦикла;	
	
	// Перед выгрузкой очистим РС.МатрицаНЗ с отбором по НЗ_2 
	НаборЗаписей = РегистрыСведений.МатрицаНЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНЗ.Установить(Перечисления.ВидыНЗ.НЗ_2);
	НаборЗаписей.Записать();
	
	Запрос.Текст = РезультирующийЗапрос;
	Запрос.УстановитьПараметр("ДатаВнесенияВМатрицу", ТекущаяДата()); 
	Запрос.УстановитьПараметр("СрокДействияРекламы", ТекущаяДата()+60*60*24*20);//+20 дней 
	Запрос.УстановитьПараметр("КтоВнесВМатрицу", СпрСотрудникиSAS);
	
	ТЗ_Результат = Запрос.Выполнить().Выгрузить();
	
	// Список аптек
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	SAS_ABCРасчет.СкладКод КАК СкладКод
	|ИЗ
	|	РегистрСведений.SAS_ABCРасчет КАК SAS_ABCРасчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	|		ПО SAS_ABCРасчет.СкладКод = МестаХранения.Код
	|ГДЕ
	|	МестаХранения.ЗаказSAS = ИСТИНА
	|	И МестаХранения.РасчетПотребностиSAS = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладКод";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТЗПоАптеке = Новый ТаблицаЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		ТЗПоАптеке.Очистить();
		Отбор = Новый Структура("СкладКод",Выборка.СкладКод);
		
		ТЗПоАптеке = ТЗ_Результат.Скопировать(Отбор);
		
		Если ТЗПоАптеке.Количество()>0 Тогда
		
			АптекаСсылка = ТЗПоАптеке[0].Аптека;
			
			НаборЗаписей = РегистрыСведений.МатрицаНЗ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Аптека.Установить(АптекаСсылка);
			НаборЗаписей.Отбор.ВидНЗ.Установить(Перечисления.ВидыНЗ.НЗ_2);
		    НаборЗаписей.Загрузить(ТЗПоАптеке);
			Попытка
			
				НаборЗаписей.Записать();	
			
			Исключение
				СтрокаСообщений = СтрокаСообщений+"Не записались данные по аптеке: "+Выборка.СкладКод+". "+ОписаниеОшибки()+ Символы.ПС;
			КонецПопытки;

		КонецЕсли; 
		
	КонецЦикла;
	
	// В случае ошибок отправить сообщение на почту
	Если НЕ ПустаяСтрока(СтрокаСообщений) Тогда
	
		Почта=Обработки.Почтарь.Создать();
		Почта.Автоотправка=Истина;
		Почта.Тема = "Ошибки при загрузке в РС ""МатрицаНЗ""";
		Почта.ТекстПисьма = СтрокаСообщений;
		
		СписокРассылки = СтрЗаменить(СтрокаСписокРассылки,";",Символы.ПС);
		Для н=1 по СтрЧислоСтрок(СписокРассылки) Цикл
			ТекПочта = СтрПолучитьСтроку(СписокРассылки,н);
			Если НЕ ПустаяСтрока(ТекПочта) Тогда
				Почта.Рассылка.Добавить(ТекПочта);
			КонецЕсли;
		КонецЦикла;
		
		Почта.функция_Послать();
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыгрузитьАптекиВDBF_Для_интернет_аптеки() Экспорт
	
                Инфо = Новый СистемнаяИнформация;
                Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или 
                               Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
                               КаталогФТП                                      = "/home/usr1cv8/ftp_net/post/gdp/internet_apt/";
                Иначе
                               КаталогФТП                                      = "\\id-vm-1\ftp_data\Post\gdp\internet_apt\";
                КонецЕсли;       
                
                ФайлДанных                   = КаталогФТП + "AptSkl.DBF";
                
                
                ТекстЗапроса =
                "ВЫБРАТЬ
                |             НастройкиОбмена.НастройкаОбмена КАК Настройка,
                |             НастройкиОбмена.НастройкаОбмена.Владелец.Наименование КАК НаименованиеПоставщика,
                |             КонтрактыИАптеки.КодАптекиВнешн,
                |             КонтрактыИАптеки.КодАптекиВнутр,
                |             КонтрактыИАптеки.Аптека.Ссылка КАК АптекаСсылка
                |ПОМЕСТИТЬ ВТ_КонтрактыИАптеки
                |ИЗ
                |             РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
                |                             ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
                |                             ПО НастройкиОбмена.НастройкаОбмена = КонтрактыИНастройки.НастройкаОбмена
                |                             ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
                |                             ПО (КонтрактыИНастройки.Контракт = КонтрактыИАптеки.Владелец)
                |ГДЕ
                |             НастройкиОбмена.УзелОбмена = ""Прайс""
                |             И НастройкиОбмена.НастройкаОбмена.Владелец.Наименование ПОДОБНО ""%Джи Ди Пи%""
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |             МестаХраненияЗаведующие.ФИО,
                |             МестаХраненияЗаведующие.Телефон,
                |             МестаХраненияЗаведующие.АдресЭлектроннойПочты,
                |             МестаХраненияЗаведующие.Ссылка
                |ПОМЕСТИТЬ ВТ_ЗаведующиеАптекой
                |ИЗ
                |             Справочник.МестаХранения.Заведующие КАК МестаХраненияЗаведующие
                |ГДЕ
                |             МестаХраненияЗаведующие.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой)
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |             МестаХранения.Наименование КАК НазваниеПВЗ,
                |             МестаХранения.Код КАК Код1С,
                |             МестаХранения.ДатаПерехода КАК ДатаОткрытия,
                |             МестаХранения.ДатаЗакрытия КАК ДатаЗакрытия,
                |             МестаХранения.Фирма.Наименование КАК ЮЛ,
                |             МестаХранения.Бренд.Наименование КАК Бренд,
                |             МестаХранения.Город.Наименование КАК Город,
                |             МестаХранения.Улица КАК Улица,
                |             МестаХранения.Дом КАК Дом,
                |             МестаХранения.НомерАптеки КАК НомерАптеки,
                |             ВЫБОР
                |                             КОГДА МестаХранения.СубъектРФ.КодКлассификатора = ""77""
                |                                                            ИЛИ МестаХранения.СубъектРФ.КодКлассификатора = ""50""
                |                                             ТОГДА ""Москва""
                |                             ИНАЧЕ ""Санкт-Петербург""
                |             КОНЕЦ КАК КодРегиона,
                |             ДопРеквизитыМестХранений.Долгота КАК Долгота,
                |             ДопРеквизитыМестХранений.Широта КАК Широта,
                |             МестаХранения.ТелефонДляСправки КАК ТелефонДляСправки,
                |             МестаХранения.ВнутреннийТелефон КАК ВнутреннийТелефон,
                |             МестаХранения.РежимРаботы.Наименование КАК РежимРаботы,
                |             ""Самовывоз из аптечных пунктов"" КАК ОписаниеСпособаДоставки,
                |             МестаХранения.НаименованиеПоКлассификатору КАК ПолныйАдрес,
                |             ""1-2 дня."" КАК ПериодДоставки,
                |             ""Вы можете забрать свой заказ в пункте выдачи. С Вами свяжутся при поступлении заказа."" КАК ТекстПисьма,
                |             МестаХранения.Метро.Наименование КАК Метро,
                |             МестаХранения.КакДоехать КАК Комментарий,
                |             ""Получение заказа возможно после СМС о доставке в аптечный пункт."" КАК ДопИнфо,
                |             ""Заказ будет доступен в течении 5 дней с момента поступления в аптечный пункт."" КАК Сроки,
                |             ВТ_КонтрактыИАптеки.КодАптекиВнешн КАК КодКлиентаДДП,
                |             ВТ_ЗаведующиеАптекой.ФИО КАК УправляющийФИО,
                |             ВТ_ЗаведующиеАптекой.Телефон КАК УправляющийТелефон,
                |             ВТ_ЗаведующиеАптекой.АдресЭлектроннойПочты КАК УправляющийПочта
                |ИЗ
                |             Справочник.МестаХранения КАК МестаХранения
                |                             ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений КАК ДопРеквизитыМестХранений
                |                             ПО МестаХранения.Ссылка = ДопРеквизитыМестХранений.Аптека
                |                             ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрактыИАптеки КАК ВТ_КонтрактыИАптеки
                |                             ПО МестаХранения.Ссылка = ВТ_КонтрактыИАптеки.АптекаСсылка
                |                             ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаведующиеАптекой КАК ВТ_ЗаведующиеАптекой
                |                             ПО МестаХранения.Ссылка = ВТ_ЗаведующиеАптекой.Ссылка
                |ГДЕ
                |             (МестаХранения.СубъектРФ.КодКлассификатора = ""77""
                |                                             ИЛИ МестаХранения.СубъектРФ.КодКлассификатора = ""50""
                |                                             ИЛИ МестаХранения.СубъектРФ.КодКлассификатора = ""78""
                |                                             ИЛИ МестаХранения.СубъектРФ.КодКлассификатора = ""47"")
                |             И МестаХранения.ПометкаУдаления = ЛОЖЬ
                |             И МестаХранения.ЭтоГруппа = ЛОЖЬ
                |
                |УПОРЯДОЧИТЬ ПО
                |             НомерАптеки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |УНИЧТОЖИТЬ ВТ_КонтрактыИАптеки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |УНИЧТОЖИТЬ ВТ_ЗаведующиеАптекой";
                
                Запрос = Новый Запрос;
                Запрос.Текст = ТекстЗапроса;
                
                ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
                
                База = Новый XBase;
                База.Кодировка = КодировкаXBase.ANSI;
                База.Поля.Добавить("Kod1C","N",5);
                База.Поля.Добавить("DateOpen","D");
                База.Поля.Добавить("DateClose","D");
                База.Поля.Добавить("YL","S",150);
                База.Поля.Добавить("Brand","S",50);
                База.Поля.Добавить("City","S",25);
                База.Поля.Добавить("Street","S",150);
                База.Поля.Добавить("Dom","S",20);
                База.Поля.Добавить("NumberApt","N",10);
                База.Поля.Добавить("KodRegion","S",25);
                База.Поля.Добавить("Dolgota","N",11,7);
                База.Поля.Добавить("Shirota","N",11,7);
                База.Поля.Добавить("Tel","S",50);
                База.Поля.Добавить("VnTel","S",4); //ENT-983 База.Поля.Добавить("VnTel","N",6);
                База.Поля.Добавить("RezRabApt","S",30);
                База.Поля.Добавить("SposobDost","S",50);
                База.Поля.Добавить("FullAdres","S",150);
                База.Поля.Добавить("PeriodDost","S",20);
                База.Поля.Добавить("TextLetter","S",100);
                База.Поля.Добавить("Metro","S",50);
                База.Поля.Добавить("DopInfo","S",100);
                База.Поля.Добавить("Sroki","S",100);
                База.Поля.Добавить("KodGDP","S",25);
                База.Поля.Добавить("UprTel","S",100);
                База.Поля.Добавить("UprFIO","S",50);
                База.Поля.Добавить("UprEMail","S",50);
                База.Поля.Добавить("ShemaProez","S",1023);
                
                База.СоздатьФайл(ФайлДанных);
                База.Записать();
                База.ОчиститьФайл();
                Сч = 1;
                КоличествоСтрок = ТаблицаРезультат.Количество();
                Для каждого запись из ТаблицаРезультат Цикл
                               
                               База.Добавить();
                               База.KOD1C                      = запись.Код1С;
                               База.DateOpen               = запись.ДатаОткрытия;
                               База.DateClose                = запись.ДатаЗакрытия;
                               База.YL                                = запись.ЮЛ;
                               База.Brand                        = СтрЗаменить(запись.Бренд,"36и6","36.6");
                               База.City                             = запись.Город;
                               База.Dom                           = запись.Дом;
                               
                               База.Street                        = запись.Улица;
                               База.NumberApt            = запись.НомерАптеки;
                               База.KodRegion              = запись.КодРегиона;
                               База.Dolgota     = запись.Долгота;
                               База.Shirota      = запись.Широта;
                               База.Tel                              = запись.ТелефонДляСправки;
                               База.VnTel                         = запись.ВнутреннийТелефон;
                               База.RezRabApt              = запись.РежимРаботы;
                               База.SposobDost            = запись.ОписаниеСпособаДоставки;
                               База.FullAdres  = запись.ПолныйАдрес;
                               База.PeriodDost              = запись.ПериодДоставки;
                               База.TextLetter               = запись.ТекстПисьма;
                               База.Metro                       = запись.Метро;
                               База.ShemaProez           = запись.Комментарий;
                               База.DopInfo    = запись.ДопИнфо;
                               База.Sroki                          = запись.Сроки;
                               База.KodGDP                   = запись.КодКлиентаДДП;
                               База.UprTel                       = запись.УправляющийТелефон;
                               База.UprFIO                      = запись.УправляющийФИО;
                               База.UprEMail  = запись.УправляющийПочта;
                               База.Записать();
                               #Если Клиент Тогда
                                               Состояние ("Обработано: "+Сч+" из "+ КоличествоСтрок);
                                               Сч = Сч + 1;
                               #КонецЕсли
                КонецЦикла;
                
                База.Записать();
                База.ЗакрытьФайл();                                   
		
	
КонецПроцедуры

Процедура СоздатьДокументВиртуальныхОстатков(ИмяФайла, ТаблицаТоваров, СписокАптек)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВиртуальныеОстатки.Ссылка
	               |ИЗ
	               |	Документ.ВиртуальныеОстатки КАК ВиртуальныеОстатки
	               |ГДЕ
	               |	ВиртуальныеОстатки.Комментарий = &Комментарий";
	Запрос.УстановитьПараметр("Комментарий",ИмяФайла);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ДокО = Документы.ВиртуальныеОстатки.СоздатьДокумент();
	Иначе
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		ДокО = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.КодТовара,
	               |	Т.Цена,
	               |	Т.Количество
	               |ПОМЕСТИТЬ ВТТаб
	               |ИЗ
	               |	&Таб КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Связки.ТоварФирмы.Код КАК КодТовара,
	               |	ВТТаб.Цена,
	               |	СУММА(ВТТаб.Количество) КАК Количество,
	               |	Связки.ТоварФирмы КАК Товар
	               |ИЗ
	               |	ВТТаб КАК ВТТаб
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	               |		ПО (ПОДСТРОКА(ВТТаб.КодТовара, 1, 36) = Связки.КодТовараПоставщика)
	               |			И (Связки.Поставщик = &ПоставщикСвязок)
	               |ГДЕ
	               |	ВТТаб.Цена > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Связки.ТоварФирмы.Код,
	               |	Связки.ТоварФирмы,
	               |	ВТТаб.Цена
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Связки.ТоварФирмы.Наименование";
				   
	Запрос.УстановитьПараметр("Таб",ТаблицаТоваров);
	Запрос.УстановитьПараметр("ПоставщикСвязок",Справочники.Поставщики.НайтиПоКоду(582));
	
	ДокО.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МХ.Ссылка как Аптека
	               |ИЗ
	               |	Справочник.МестаХранения КАК МХ
	               |ГДЕ
	               |	МХ.Код В(&Коды)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МХ.Наименование";
	Запрос.УстановитьПараметр("Коды",СписокАптек);
	
	ДокО.Аптеки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ДокО.Дата = ТекущаяДата();
	ДокО.Пользователь = ПараметрыСеанса.ТекущийСотр;
	ДокО.Комментарий = ИмяФайла;
	ДокО.ДатаИзменения = ТекущаяДата();
	ДокО.Записать(РежимЗаписиДокумента.Проведение);
	
	
	
КонецПроцедуры

Процедура ЗагрузкаВиртуальныхОстатков() Экспорт
	
	
	КаталогЗагрузки = ОМ_ТСО.ПолучитьИмяФайлаНаФТП("\\id-vm-1\ftp_data\Post\gdp\internet_apt\");	
	КаталогБэкапа = ОМ_ТСО.ПолучитьИмяФайлаНаФТП("\\id-vm-1\ftp_data\Post\gdp\internet_apt\backup\");	
		
	МассивФайлов = НайтиФайлы(КаталогЗагрузки, "AptekaMosHospitalAssortmentPrice.xml", Ложь);
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("КодТовара",Новый ОписаниеТипов("Строка"));
		ТаблицаТоваров.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
		
		СписокАптек = Новый СписокЗначений;

		
		
		// Читаем файл загрузки
		
		ХМЛ = Новый ЧтениеXML;		
		ХМЛ.ОткрытьФайл(Файл.ПолноеИмя);
		Пока ХМЛ.Прочитать() Цикл
			Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				
				Если ХМЛ.Имя = "GOODS" Тогда 
					Пока ХМЛ.Прочитать() Цикл
						Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента и ХМЛ.Имя = "ROW" Тогда
							
							Пока ХМЛ.Прочитать() Цикл
								Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									
									Если ХМЛ.Имя = "id_good" Тогда  
										НС = ТаблицаТоваров.Добавить();
										ХМЛ.Прочитать();  НС.КодТовара = СокрЛП(ХМЛ.Значение);							
									ИначеЕсли ХМЛ.Имя = "price" Тогда
										ХМЛ.Прочитать();  НС.Цена = Число(ХМЛ.Значение);
									ИначеЕсли ХМЛ.Имя = "qty" Тогда
										ХМЛ.Прочитать();  НС.Количество = Число(ХМЛ.Значение);								
									КонецЕсли;
								ИначеЕсли ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "ROW" Тогда
									прервать;
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "GOODS" Тогда
							прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ХМЛ.Имя = "DEP" Тогда
					Пока ХМЛ.Прочитать() Цикл
						Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента и ХМЛ.Имя = "ROW" Тогда
							Пока ХМЛ.Прочитать() Цикл
								Если ХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									Если ХМЛ.Имя = "id_dep" Тогда
										ХМЛ.Прочитать();  СписокАптек.Добавить(Число(ХМЛ.Значение));							
									КонецЕсли;
								ИначеЕсли ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "ROW" Тогда
									прервать;
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента и ХМЛ.Имя = "DEP" Тогда
							прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ХМЛ.Закрыть();
		
		
		СоздатьДокументВиртуальныхОстатков(Файл.Имя,ТаблицаТоваров,СписокАптек);
		ПереместитьФайл(Файл.ПолноеИмя  , КаталогБэкапа + Файл.Имя);
		
	КонецЦикла;	
	
КонецПроцедуры

#Область РассылкаПоАптекамПланаПродажПоСрокамГодности

Функция ВозвратИмениCSVФайла()
	Возврат "Otchet.csv"
КонецФункции // ВозвратИмениCSVФайла()

Процедура ЗаписатьТабличнуюЧастьВЭксель(ПутьВыгрузки,Результат) Экспорт

	кодировка = КодировкаТекста.ANSI;
	ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");

	Файл_CSV = Новый ЗаписьТекста(ИмяФайлаЛок, Кодировка);
	
	Разделитель = ";";
	КолонкиТЗ = Результат.Колонки;
	Для каждого Колонка Из КолонкиТЗ Цикл
		
		Если Колонка.Заголовок = "МэйлАптека" ИЛИ 
			Колонка.Заголовок = "АдресЭлектроннойПочтыУправляющий" ИЛИ
			Колонка.Заголовок = "АдресЭлектроннойПочтыЗаместитель" ИЛИ
			Колонка.Заголовок = "СтатусАптеки" ИЛИ
			Колонка.Заголовок = "НоваяАптекаКод" 			
			Тогда
			
			продолжить
		
		КонецЕсли;
		
		// Корректное наименование колонок
		НаименованиеКолонки = "";
		Если Колонка.Заголовок = "ФИООперационныйДиректор" Тогда
			НаименованиеКолонки = "Операционный директор"
		ИначеЕсли Колонка.Заголовок = "ФИОЗаместитель" Тогда
		    НаименованиеКолонки = "Заместитель Операционного директора"
		ИначеЕсли Колонка.Заголовок = "ФИОУправляющий" Тогда
		    НаименованиеКолонки = "Управляющий аптекой"
		ИначеЕсли Колонка.Заголовок = "СкладКод" Тогда
		    НаименованиеКолонки = "Код склада"
		ИначеЕсли Колонка.Заголовок = "ТоварКод" Тогда
		    НаименованиеКолонки = "Код товара"
		ИначеЕсли Колонка.Заголовок = "ТипТовара" Тогда
		    НаименованиеКолонки = "Тип товара"
		ИначеЕсли Колонка.Заголовок = "СрокГодности" Тогда
		    НаименованиеКолонки = "Срок годности"
		ИначеЕсли Колонка.Заголовок = "ПланРуб" Тогда
		    НаименованиеКолонки = "Остаток на 1е число месяца, руб"
		ИначеЕсли Колонка.Заголовок = "ПланУп" Тогда
		    НаименованиеКолонки = "Остаток на 1е число месяца, уп"
		ИначеЕсли Колонка.Заголовок = "ПроданоЗакупБезНДС_7Дней" Тогда
		    НаименованиеКолонки = "Продажи за предыдущую неделю (понедельник- воскресенье),руб"
		ИначеЕсли Колонка.Заголовок = "ПроданоУп_7Дней" Тогда
		    НаименованиеКолонки = "Продажи за предыдущую неделю (понедельник-воскресенье),уп"
		ИначеЕсли Колонка.Заголовок = "ПроданоЗакупБезНДС_СначалаМесяца" Тогда
		    НаименованиеКолонки = "Итого продажи с начала месяца, руб"
		ИначеЕсли Колонка.Заголовок = "ПроданоУп_СначалаМесяца" Тогда
		    НаименованиеКолонки = "Итого продажи с начала месяца, уп"
		Иначе
			НаименованиеКолонки = Колонка.Заголовок;
		КонецЕсли; 
		
		стрКолонки = "" + стрКолонки + НаименованиеКолонки + разделитель;
		
	КонецЦикла; 
	Файл_CSV.ЗаписатьСтроку(стрКолонки);

	Сч = 1; 	

	КоличествоСтрок = Результат.Количество();
	Для каждого запись из Результат Цикл

		Текст = "";
		Текст = Текст + запись.ФИООперационныйДиректор
			+ разделитель + запись.ФИОЗаместитель  
			+ разделитель + запись.ФИОУправляющий  
			+ разделитель + запись.СкладКод  
			+ разделитель + запись.Склад
			+ разделитель + запись.ТоварКод
			+ разделитель + запись.Товар
			+ разделитель + запись.Производитель
			+ разделитель + запись.ТипТовара
			+ разделитель + запись.СрокГодности
			+ разделитель + Формат(запись.ПланРуб, "ЧГ=")
			+ разделитель + Формат(запись.ПланУп, "ЧГ=")     
			+ разделитель + Формат(запись.ПроданоЗакупБезНДС_7Дней, "ЧГ=")
			+ разделитель + Формат(запись.ПроданоУп_7Дней, "ЧГ=")
			+ разделитель + Формат(запись.ПроданоЗакупБезНДС_СначалаМесяца, "ЧГ=")
			+ разделитель + Формат(запись.ПроданоУп_СначалаМесяца, "ЧГ=")
			+ разделитель + запись.Мероприятия;
			
			Файл_CSV.ЗаписатьСтроку
			(Текст);
			
		# Если Клиент Тогда
		Состояние ("Обработано: "+Сч+" из "+ КоличествоСтрок);
		ОбработкаПрерыванияПользователя();
		# КонецЕсли
		Сч = Сч + 1;
	КонецЦикла;
	Файл_CSV.Закрыть();
	
	ПервыйСимволПути = Лев(ПутьВыгрузки,1);
	ПереместитьФайл(ИмяФайлаЛок,СокрЛП(ПутьВыгрузки+?(ПервыйСимволПути = "/","/","\")+ВозвратИмениCSVФайла()));

КонецПроцедуры

Функция СформироватьТекстПисьма()Экспорт

	ТекстПисьма = "Во вложении подробный отчет по продажам товара с истекающим сроком годности";
	Возврат ТекстПисьма;

КонецФункции // СформироватьТекстПисьма()

Функция СформироватьЗаголовокПисьма()Экспорт

	ЗаголовокПисьма = "Отчет о продажах товара с истекающим сроком годности";
	Возврат	ЗаголовокПисьма;

КонецФункции // СформироватьЗаголовокПисьм()

Процедура ОтправитьСообщениеНаПочту(ПочтаРассылки,ПутьРасположенияФайла) Экспорт

	Почта=Обработки.Почтарь.Создать();
	Почта.Автоотправка=Истина;
		
	СтрокаСписокРассылки = ПочтаРассылки;
	СписокРассылки = СтрЗаменить(СтрокаСписокРассылки,";",Символы.ПС);
	Для н=1 по СтрЧислоСтрок(СписокРассылки) Цикл
			ТекПочта = СтрПолучитьСтроку(СписокРассылки,н);
			Если НЕ ПустаяСтрока(ТекПочта) Тогда
				Почта.Рассылка.Добавить(ТекПочта);
			КонецЕсли;
		КонецЦикла;
		
	Почта.Тема = СформироватьЗаголовокПисьма();
	Почта.ТекстПисьма = СформироватьТекстПисьма();
	Почта.СписокВложений.Добавить(СокрЛП(ПутьРасположенияФайла));
	Почта.функция_Послать()

КонецПроцедуры

Процедура РассылкаПоАптекамПланаПродажПоСрокамГодности() Экспорт
	
	СпрРЗ = справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("РассылкаПоАптекамПланаПродажПоСрокамГодности");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - РассылкаПоАптекамПланаПродажПоСрокамГодности. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("КоличествоМесяцевДляСрокаГодности");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - КоличествоМесяцевДляСрокаГодности. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
		
	КонецЕсли;
	КоличествоМесяцевДляСрокаГодности = Параметры.КоличествоМесяцевДляСрокаГодности;
	
	Параметры = Новый Структура("АдресРассылкиОшибок");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - АдресРассылкиОшибок. Не возможна рассылка сообщений об ошибках.",,Истина);
		
	КонецЕсли;
	АдресРассылкиОшибок = Параметры.АдресРассылкиОшибок;
	СтрокаСообщений = "";
	СтрокаСообщений1 = "";
	СтрокаСообщений2 = "";
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ВременныйКаталог = "/home/usr1cv8/ftp_net/Post/";
		Слэш = "/";
		ПутьРасположенияФайла = ВременныйКаталог + "/"+ВозвратИмениCSVФайла();
	Иначе
		ВременныйКаталог = "\\id-vm-1\ftp_data\Post\";
		Слэш = "\";
		ПутьРасположенияФайла = ВременныйКаталог + "\"+ВозвратИмениCSVФайла();
	КонецЕсли;
	
	МассивУправляющих = Новый Массив;
	МассивЗаместителей = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МатрицаПоСрокуГодности.КодСклад КАК КодСклад
	|ИЗ
	|	РегистрСведений.МатрицаПоСрокуГодности КАК МатрицаПоСрокуГодности";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	КопироватьТаблицу = Истина;
	РезультирующаяТаблицаРезультатов = Новый ТаблицаЗначений;
	Пока Выборка.Следующий() Цикл
		
		МассивТоварПоАптеке = Новый Массив;
		МассивПартийПоАптеке = Новый Массив;
		
		НаборЗаписей = РегистрыСведений.МатрицаПоСрокуГодности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КодСклад.Установить(Выборка.КодСклад);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
		
			Для каждого СтрокаПоАптеке Из НаборЗаписей Цикл
			
				МассивТоварПоАптеке.Добавить(СтрокаПоАптеке.КодТовар);
				МассивПартийПоАптеке.Добавить(СтрокаПоАптеке.Партия)	
			
			КонецЦикла; 
			
			// Здесь основной запрос и рассылка
			ТекстЗапросаОсн = 
			"ВЫБРАТЬ
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Ссылка,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Товар,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Наименование КАК Производитель,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипТовара.Наименование КАК ТипТовара
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
			|ГДЕ
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Код В(&КодАП)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МестаХранения.Ссылка КАК Ссылка,
			|	МестаХранения.Код КАК Код,
			|	МестаХранения.Наименование КАК Склад,
			|	МестаХранения.Мэйл КАК МэйлАптека,
			|	УправляющийАптекой.АдресЭлектроннойПочты КАК АдресЭлектроннойПочтыУправляющий,
			|	ДиректорБизнесЕдиницы.ФИО КАК ФИООперационныйДиректор,
			|	ЗаместительДиректорБизнесЕдиницы.АдресЭлектроннойПочты КАК АдресЭлектроннойПочтыЗаместитель,
			|	МестаХранения.СтатусАптеки КАК СтатусАптеки,
			|	ЗаместительДиректорБизнесЕдиницы.ФИО КАК ФИОЗаместитель,
			|	УправляющийАптекой.ФИО КАК ФИОУправляющий
			|ПОМЕСТИТЬ втСклады
			|ИЗ
			|	Справочник.МестаХранения КАК МестаХранения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК УправляющийАптекой
			|		ПО МестаХранения.Ссылка = УправляющийАптекой.Ссылка
			|			И (УправляющийАптекой.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК ДиректорБизнесЕдиницы
			|		ПО МестаХранения.Ссылка = ДиректорБизнесЕдиницы.Ссылка
			|			И (ДиректорБизнесЕдиницы.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.ДиректорБизнесЕдиницы))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК ЗаместительДиректорБизнесЕдиницы
			|		ПО МестаХранения.Ссылка = ЗаместительДиректорБизнесЕдиницы.Ссылка
			|			И (ЗаместительДиректорБизнесЕдиницы.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.РегиональныйДиректор))
			|ГДЕ
			|	МестаХранения.Код = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПерелицензированныеАптеки.НоваяАптека.Код КАК НоваяАптекаКод
			|ПОМЕСТИТЬ ВТ_НоваяАптека
			|ИЗ
			|	РегистрСведений.ПерелицензированныеАптеки КАК ПерелицензированныеАптеки
			|ГДЕ
			|	ПерелицензированныеАптеки.СтараяАптека = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_Партии.СрокГодности КАК СрокГодности,
			|	УЗ_Партии.Код КАК Код,
			|	УЗ_Партии.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
			|	УЗ_Партии.Наименование КАК Наименование
			|ПОМЕСТИТЬ втПартии
			|ИЗ
			|	Справочник.УЗ_Партии КАК УЗ_Партии
			|ГДЕ
			|	УЗ_Партии.Наименование В(&Партии)
			|	И УЗ_Партии.СрокГодности >= &ДатаОкончания
			|	И УЗ_Партии.СрокГодности <= &СрокГодности
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МатрицаПоСрокуГодности.КодТовар КАК КодТовар,
			|	МатрицаПоСрокуГодности.Партия КАК КодПартия,
			|	МатрицаПоСрокуГодности.ПланУп КАК ПланУп,
			|	МатрицаПоСрокуГодности.ПланРуб КАК ПланРуб,
			|	МатрицаПоСрокуГодности.Мероприятия КАК Мероприятия
			|ПОМЕСТИТЬ втМатрица
			|ИЗ
			|	РегистрСведений.МатрицаПоСрокуГодности КАК МатрицаПоСрокуГодности
			|ГДЕ
			|	МатрицаПоСрокуГодности.КодСклад = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_РеализацииККМ.СкладКод КАК СкладКод,
			|	УЗ_РеализацииККМ.ТоварКод КАК ТоварКод,
			|	УЗ_РеализацииККМ.ПартияКод КАК ПартияКод,
			|	УЗ_РеализацииККМ.Количество КАК Количество,
			|	УЗ_РеализацииККМ.СуммаРозн КАК СуммаРозн,
			|	УЗ_РеализацииККМ.СуммаЗакупСНДС КАК СуммаЗакупСНДС
			|ПОМЕСТИТЬ втРеализацияККМ_7Дней
			|ИЗ
			|	РегистрНакопления.УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
			|ГДЕ
			|	УЗ_РеализацииККМ.Период МЕЖДУ &ДатаНачала7Дней И &ДатаОкончания7Дней
			|	И УЗ_РеализацииККМ.СкладКод = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_РеализацииККМ.СкладКод КАК СкладКод,
			|	УЗ_РеализацииККМ.ТоварКод КАК ТоварКод,
			|	УЗ_РеализацииККМ.ПартияКод КАК ПартияКод,
			|	УЗ_РеализацииККМ.Количество КАК Количество,
			|	УЗ_РеализацииККМ.СуммаРозн КАК СуммаРозн,
			|	УЗ_РеализацииККМ.СуммаЗакупСНДС КАК СуммаЗакупСНДС
			|ПОМЕСТИТЬ втРеализацияККМ_СначалаМесяца
			|ИЗ
			|	РегистрНакопления.УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
			|ГДЕ
			|	УЗ_РеализацииККМ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И УЗ_РеализацииККМ.СкладКод = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСклады.ФИООперационныйДиректор КАК ФИООперационныйДиректор,
			|	втСклады.ФИОЗаместитель КАК ФИОЗаместитель,
			|	втСклады.ФИОУправляющий КАК ФИОУправляющий,
			|	втСклады.Код КАК СкладКод,
			|	втСклады.Склад КАК Склад,
			|	втТовары.Код КАК ТоварКод,
			|	втТовары.Товар КАК Товар,
			|	втТовары.Производитель КАК Производитель,
			|	втТовары.ТипТовара КАК ТипТовара,
			|	УЗ_Партии.СрокГодности КАК СрокГодности,
			|	МатрицаПоСрокуГодности.ПланРуб КАК ПланРуб,
			|	МатрицаПоСрокуГодности.ПланУп КАК ПланУп,
			|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РеализацииККМ_7Дней.СуммаЗакупСНДС / (1 + УЗ_Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))), 0) КАК ПроданоЗакупБезНДС_7Дней,
			|	ЕСТЬNULL(СУММА(РеализацииККМ_7Дней.Количество), 0) КАК ПроданоУп_7Дней,
			|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РеализацииККМ_СначалаМесяца.СуммаЗакупСНДС / (1 + УЗ_Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))), 0) КАК ПроданоЗакупБезНДС_СначалаМесяца,
			|	ЕСТЬNULL(СУММА(РеализацииККМ_СначалаМесяца.Количество), 0) КАК ПроданоУп_СначалаМесяца,
			|	втСклады.МэйлАптека КАК МэйлАптека,
			|	втСклады.АдресЭлектроннойПочтыУправляющий КАК АдресЭлектроннойПочтыУправляющий,
			|	втСклады.АдресЭлектроннойПочтыЗаместитель КАК АдресЭлектроннойПочтыЗаместитель,
			|	втСклады.СтатусАптеки КАК СтатусАптеки,
			|	ЕСТЬNULL(ВТ_НоваяАптека.НоваяАптекаКод, 0) КАК НоваяАптекаКод,
			|	МатрицаПоСрокуГодности.Мероприятия КАК Мероприятия
			|ИЗ
			|	втМатрица КАК МатрицаПоСрокуГодности
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПартии КАК УЗ_Партии
			|		ПО МатрицаПоСрокуГодности.КодПартия = УЗ_Партии.Наименование
			|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализацияККМ_7Дней КАК РеализацииККМ_7Дней
			|		ПО (РеализацииККМ_7Дней.ПартияКод = УЗ_Партии.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализацияККМ_СначалаМесяца КАК РеализацииККМ_СначалаМесяца
			|		ПО (РеализацииККМ_СначалаМесяца.ПартияКод = УЗ_Партии.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
			|		ПО МатрицаПоСрокуГодности.КодТовар = втТовары.Код
			|		ЛЕВОЕ СОЕДИНЕНИЕ втСклады КАК втСклады
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоваяАптека КАК ВТ_НоваяАптека
			|		ПО (ИСТИНА)
			|
			|СГРУППИРОВАТЬ ПО
			|	УЗ_Партии.СрокГодности,
			|	МатрицаПоСрокуГодности.ПланРуб,
			|	втСклады.МэйлАптека,
			|	втСклады.АдресЭлектроннойПочтыУправляющий,
			|	втСклады.Склад,
			|	втТовары.Товар,
			|	втТовары.Производитель,
			|	втТовары.ТипТовара,
			|	втСклады.Код,
			|	втТовары.Код,
			|	втСклады.АдресЭлектроннойПочтыЗаместитель,
			|	втСклады.СтатусАптеки,
			|	ВТ_НоваяАптека.НоваяАптекаКод,
			|	МатрицаПоСрокуГодности.ПланУп,
			|	втСклады.ФИОЗаместитель,
			|	втСклады.ФИОУправляющий,
			|	втСклады.ФИООперационныйДиректор,
			|	МатрицаПоСрокуГодности.Мероприятия";
			
			ЗапросОсн = Новый Запрос;
			ЗапросОсн.Текст = ТекстЗапросаОсн;
			ЗапросОсн.УстановитьПараметр("КодСклад",Выборка.КодСклад); //Выборка.КодСклад
			ЗапросОсн.УстановитьПараметр("КодАП",МассивТоварПоАптеке);  //МассивТоварПоАптеке
			ЗапросОсн.УстановитьПараметр("Партии",МассивПартийПоАптеке);  
			ЗапросОсн.УстановитьПараметр("ДатаНачала",НачалоМесяца(ТекущаяДата()));
			ЗапросОсн.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
			
			ДН = ДеньНедели(ТекущаяДата());
			ДатаНачалаПрошлойНедели		= НачалоДня(ТекущаяДата()-3600*24*(6+ДН));
			ДатаОкончанияПрошлойНедели  = КонецДня(ТекущаяДата()-3600*24*ДН);
			
			ЗапросОсн.УстановитьПараметр("ДатаНачала7Дней",ДатаНачалаПрошлойНедели);  
			ЗапросОсн.УстановитьПараметр("ДатаОкончания7Дней",ДатаОкончанияПрошлойНедели);  
			ЗапросОсн.УстановитьПараметр("СрокГодности", ДобавитьМесяц(КонецМесяца(ТекущаяДата()),КоличествоМесяцевДляСрокаГодности));
			
			ТаблицаРезультат = ЗапросОсн.Выполнить().Выгрузить();
			
			Если ТаблицаРезультат.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;
			
			НайденноеЗначениеМассива = МассивУправляющих.Найти(ТаблицаРезультат[0].АдресЭлектроннойПочтыУправляющий);
			Если НайденноеЗначениеМассива = Неопределено Тогда
				МассивУправляющих.Добавить(ТаблицаРезультат[0].АдресЭлектроннойПочтыУправляющий);
			КонецЕсли; 
			
			//НайденноеЗначениеМассива = МассивЗаместителей.Найти(ТаблицаРезультат[0].АдресЭлектроннойПочтыЗаместитель);
			//Если НайденноеЗначениеМассива = Неопределено Тогда
			//	МассивЗаместителей.Добавить(ТаблицаРезультат[0].АдресЭлектроннойПочтыЗаместитель);
			//КонецЕсли; 
			
			Если КопироватьТаблицу Тогда
			
				РезультирующаяТаблицаРезультатов = ТаблицаРезультат.Скопировать();	
			    КопироватьТаблицу = Ложь;
				
			Иначе
				
				Для каждого СтрокаТЗ  Из ТаблицаРезультат Цикл
				
					НоваяСтрока = РезультирующаяТаблицаРезультатов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
					
				КонецЦикла;
				
			КонецЕсли; 
			
			ЗаписатьТабличнуюЧастьВЭксель(ВременныйКаталог,ТаблицаРезультат);
			
			// Файл по аптеке отправляем только на адрес аптеки
			ПочтаРассылки = "";
			СтатусАптеки = Перечисления.СтатусыАптеки.ПустаяСсылка();
			НовыйКодАптеки = 0;

			Если ТаблицаРезультат.Количество() > 0 Тогда
				
				ПочтаРассылки = ПочтаРассылки + СокрЛП(ТаблицаРезультат[0].МэйлАптека);
				СтатусАптеки = ТаблицаРезультат[0].СтатусАптеки;
				НовыйКодАптеки	= ТаблицаРезультат[0].НоваяАптекаКод;
			КонецЕсли;
			
			Если ПустаяСтрока(ПочтаРассылки) Тогда
			
				Если ПустаяСтрока(СтрокаСообщений) Тогда
					СтрокаСообщений = "Не указан адрес электронной почты для перечисленных ниже аптек. Отчет в указанные аптеки не отпрален." + Символы.ПС;
				КонецЕсли; 
				СтрокаСообщений = СтрокаСообщений+"Аптека №: "+Выборка.КодСклад+";" + Символы.ПС;
			
			КонецЕсли;
			
			Если СтатусАптеки <> Перечисления.СтатусыАптеки.Р Тогда // Статус Работает
				
				Если ПустаяСтрока(СтрокаСообщений1) Тогда
					СтрокаСообщений1 = "У аптек в справочнике ""Места хранения"" указан статус аптеки отличный от ""Работает"". Необходимо проверить корректность заполнения статуса аптеки, а также проверить необходимость внесения товаров по данной аптеке в файл по продажам товаров с истекающим сроком годности." + Символы.ПС;
				КонецЕсли; 
				СтрокаСообщений1 = СтрокаСообщений1+"Аптека №: "+Выборка.КодСклад + Символы.ПС;	
			
			КонецЕсли; 
			
			Если НовыйКодАптеки <> 0 Тогда
			
				Если СтрокаСообщений2 Тогда
					СтрокаСообщений2 = "У аптек существует номер новой (перелицензированной) аптеки. Необходимо проверить необходимость внесения товаров по данной аптеке в файл по продажам товаров с истекающим сроком годности."+ Символы.ПС;
				КонецЕсли; 
				СтрокаСообщений2 = СтрокаСообщений2+"Аптека №: "+Выборка.КодСклад+" - новой код (перелицензированной) аптеки: "+НовыйКодАптеки + Символы.ПС;	
			
			КонецЕсли; 
			
			ОтправитьСообщениеНаПочту(ПочтаРассылки,ПутьРасположенияФайла);
			УдалитьФайлы(ПутьРасположенияФайла)
			
		КонецЕсли;
		
	КонецЦикла;
	
	// В случае ошибок отправить сообщение на почту
	Если НЕ ПустаяСтрока(СтрокаСообщений) 
		ИЛИ НЕ ПустаяСтрока(СтрокаСообщений1)
		ИЛИ НЕ ПустаяСтрока(СтрокаСообщений2)
		Тогда
	
		Почта=Обработки.Почтарь.Создать();
		Почта.Автоотправка=Истина;
		Почта.Тема = "Ошибки при отправке отчета по продажам по срокам годности в аптеки";
		Почта.ТекстПисьма = СтрокаСообщений+Символы.ПС+СтрокаСообщений1+Символы.ПС+СтрокаСообщений2;
		
		СписокРассылки = СтрЗаменить(АдресРассылкиОшибок,";",Символы.ПС);
		Для н=1 по СтрЧислоСтрок(СписокРассылки) Цикл
			ТекПочта = СтрПолучитьСтроку(СписокРассылки,н);
			Если НЕ ПустаяСтрока(ТекПочта) Тогда
				Почта.Рассылка.Добавить(ТекПочта);
			КонецЕсли;
		КонецЦикла;
		
		Почта.функция_Послать();
	
	КонецЕсли; 

	// Рассылка сконсолидированного файла на  почту управляющих и заместителей
	ТЗ_Рассылки = Новый ТаблицаЗначений;
	// Для Заместитетелей
	//Для каждого СтрокаМассива Из МассивЗаместителей Цикл
	//
	//	ТЗ_Рассылки.Очистить();
	//	Отбор = Новый Структура("АдресЭлектроннойПочтыЗаместитель",СтрокаМассива);
	//	
	//	ТЗ_Рассылки = РезультирующаяТаблицаРезультатов.Скопировать(Отбор);
	//	ЗаписатьТабличнуюЧастьВЭксель(ВременныйКаталог,ТЗ_Рассылки);
	//	
	//	ПочтаРассылки = "";
	//	ПочтаРассылки = ПочтаРассылки + СокрЛП(СтрокаМассива);	
	//		
	//	ОтправитьСообщениеНаПочту(ПочтаРассылки,ПутьРасположенияФайла);
	//	УдалитьФайлы(ПутьРасположенияФайла)
	//	
	//КонецЦикла; 
	
	// Для управляющих
	Для каждого СтрокаМассива Из МассивУправляющих Цикл
	
		ТЗ_Рассылки.Очистить();
		Отбор = Новый Структура("АдресЭлектроннойПочтыУправляющий",СтрокаМассива);
		
		ТЗ_Рассылки = РезультирующаяТаблицаРезультатов.Скопировать(Отбор);
		ЗаписатьТабличнуюЧастьВЭксель(ВременныйКаталог,ТЗ_Рассылки);
		
		ПочтаРассылки = "";
		ПочтаРассылки = ПочтаРассылки + СокрЛП(СтрокаМассива);	
			
		ОтправитьСообщениеНаПочту(ПочтаРассылки,ПутьРасположенияФайла);
		УдалитьФайлы(ПутьРасположенияФайла)
		
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти 

#Область РассылкаПоАптекамПланаПродажПоСрокамГодностиОперДиректорам

Процедура ЗаписатьТабличнуюЧастьВЭксель2(ПутьВыгрузки,Результат) Экспорт

	кодировка = КодировкаТекста.ANSI;
	ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");

	Файл_CSV = Новый ЗаписьТекста(ИмяФайлаЛок, Кодировка);
	
	Разделитель = ";";
	КолонкиТЗ = Результат.Колонки;
	Для каждого Колонка Из КолонкиТЗ Цикл
		
		Если Колонка.Заголовок = "АдресЭлектроннойПочтыОперацтонныйДиректор" ИЛИ
			 Колонка.Заголовок = "АдресЭлектроннойПочтыЗаместитель"
			Тогда
			
			продолжить
		
		КонецЕсли;
		
		// Корректное наименование колонок
		НаименованиеКолонки = "";
		Если Колонка.Заголовок = "ФИООперационныйДиректор" Тогда
			НаименованиеКолонки = "Операционный директор"
		ИначеЕсли Колонка.Заголовок = "ФИОЗаместитель" Тогда
		    НаименованиеКолонки = "Заместитель Операционного директора"
		ИначеЕсли Колонка.Заголовок = "ФИОУправляющий" Тогда
		    НаименованиеКолонки = "Управляющий аптекой"
		ИначеЕсли Колонка.Заголовок = "СкладКод" Тогда
		    НаименованиеКолонки = "Код склада"
		ИначеЕсли Колонка.Заголовок = "ПланРуб" Тогда
		    НаименованиеКолонки = "Остаток на 1е число месяца, руб"
		ИначеЕсли Колонка.Заголовок = "ПланУп" Тогда
		    НаименованиеКолонки = "Остаток на 1е число месяца, уп"
		ИначеЕсли Колонка.Заголовок = "ПроданоЗакупБезНДС_7Дней" Тогда
		    НаименованиеКолонки = "Продажи за предыдущую неделю (понедельник- воскресенье),руб"
		ИначеЕсли Колонка.Заголовок = "ПроданоУп_7Дней" Тогда
		    НаименованиеКолонки = "Продажи за предыдущую неделю (понедельник-воскресенье),уп"
		ИначеЕсли Колонка.Заголовок = "ПроданоЗакупБезНДС_СначалаМесяца" Тогда
		    НаименованиеКолонки = "Итого продажи с начала месяца, руб"
		ИначеЕсли Колонка.Заголовок = "ПроданоУп_СначалаМесяца" Тогда
		    НаименованиеКолонки = "Итого продажи с начала месяца, уп"
		Иначе
			НаименованиеКолонки = Колонка.Заголовок;
		КонецЕсли; 
		
		стрКолонки = "" + стрКолонки + НаименованиеКолонки + разделитель;
		
	КонецЦикла; 
	Файл_CSV.ЗаписатьСтроку(стрКолонки);

	Сч = 1; 	

	КоличествоСтрок = Результат.Количество();
	Для каждого запись из Результат Цикл

		Текст = "";
		Текст = Текст + запись.ФИООперационныйДиректор
			+ разделитель + запись.ФИОЗаместитель  
			+ разделитель + запись.ФИОУправляющий  
			+ разделитель + запись.СкладКод  
			+ разделитель + запись.Склад
			+ разделитель + Формат(запись.ПланРуб, "ЧГ=")
			+ разделитель + Формат(запись.ПланУп, "ЧГ=")     
			+ разделитель + Формат(запись.ПроданоЗакупБезНДС_7Дней, "ЧГ=")
			+ разделитель + Формат(запись.ПроданоУп_7Дней, "ЧГ=")
			+ разделитель + Формат(запись.ПроданоЗакупБезНДС_СначалаМесяца, "ЧГ=")
			+ разделитель + Формат(запись.ПроданоУп_СначалаМесяца, "ЧГ=");
			
			Файл_CSV.ЗаписатьСтроку
			(Текст);
			
		# Если Клиент Тогда
		Состояние ("Обработано: "+Сч+" из "+ КоличествоСтрок);
		ОбработкаПрерыванияПользователя();
		# КонецЕсли
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Вычисление итоговых строк
	ИтоговаяСтрока = ""+разделитель+""+разделитель+""+разделитель+""+разделитель+""+разделитель+Формат(Результат.Итог("ПланРуб"), "ЧГ=")+разделитель+Формат(Результат.Итог("ПланУп"), "ЧГ=")
	+разделитель+Формат(Результат.Итог("ПроданоЗакупБезНДС_7Дней"), "ЧГ=")+разделитель+Формат(Результат.Итог("ПроданоУп_7Дней"), "ЧГ=")+разделитель+Формат(Результат.Итог("ПроданоЗакупБезНДС_СначалаМесяца"), "ЧГ=")
	+разделитель+Формат(Результат.Итог("ПроданоУп_СначалаМесяца"), "ЧГ=");
	Файл_CSV.ЗаписатьСтроку(ИтоговаяСтрока);
	
	Файл_CSV.Закрыть();
	
	ПервыйСимволПути = Лев(ПутьВыгрузки,1);
	ПереместитьФайл(ИмяФайлаЛок,СокрЛП(ПутьВыгрузки+?(ПервыйСимволПути = "/","/","\")+ВозвратИмениCSVФайла()));

КонецПроцедуры

Процедура РассылкаПоАптекамПланаПродажПоСрокамГодностиОперДиректорам() Экспорт
	
	СпрРЗ = справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("РассылкаПоАптекамПланаПродажПоСрокамГодностиОперДи");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - РассылкаПоАптекамПланаПродажПоСрокамГодностиОперДи. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("КоличествоМесяцевДляСрокаГодности");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - КоличествоМесяцевДляСрокаГодности. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
		
	КонецЕсли;
	КоличествоМесяцевДляСрокаГодности = Параметры.КоличествоМесяцевДляСрокаГодности;
	
	Параметры = Новый Структура("АдресРассылкиОшибок");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - АдресРассылкиОшибок. Не возможна рассылка сообщений об ошибках.",,Истина);
		
	КонецЕсли;
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ВременныйКаталог = "/home/usr1cv8/ftp_net/Post/";
		Слэш = "/";
		ПутьРасположенияФайла = ВременныйКаталог + "/"+ВозвратИмениCSVФайла();
	Иначе
		ВременныйКаталог = "\\id-vm-1\ftp_data\Post\";
		Слэш = "\";
		ПутьРасположенияФайла = ВременныйКаталог + "\"+ВозвратИмениCSVФайла();
	КонецЕсли;
	
	МассивОперДиректоров	= Новый Массив;
	МассивЗаместителей		= Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МатрицаПоСрокуГодности.КодСклад КАК КодСклад
	|ИЗ
	|	РегистрСведений.МатрицаПоСрокуГодности КАК МатрицаПоСрокуГодности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	|		ПО МатрицаПоСрокуГодности.КодСклад = МестаХранения.Код
	|ГДЕ
	|	МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	КопироватьТаблицу = Истина;
	РезультирующаяТаблицаРезультатов = Новый ТаблицаЗначений;
	Пока Выборка.Следующий() Цикл
		
		МассивТоварПоАптеке = Новый Массив;
		МассивПартийПоАптеке = Новый Массив;
		
		НаборЗаписей = РегистрыСведений.МатрицаПоСрокуГодности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КодСклад.Установить(Выборка.КодСклад);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
		
			Для каждого СтрокаПоАптеке Из НаборЗаписей Цикл
			
				МассивТоварПоАптеке.Добавить(СтрокаПоАптеке.КодТовар);
				МассивПартийПоАптеке.Добавить(СтрокаПоАптеке.Партия)	
			
			КонецЦикла; 
			
			// Здесь основной запрос и рассылка
			ТекстЗапросаОсн = 
			"ВЫБРАТЬ
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Ссылка,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Товар,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель.Наименование КАК Производитель,
			|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипТовара.Наименование КАК ТипТовара
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
			|ГДЕ
			|	АССОРТИМЕНТНЫЙ_ПЛАН.Код В(&КодАП)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МестаХранения.Ссылка КАК Ссылка,
			|	МестаХранения.Код КАК Код,
			|	МестаХранения.Наименование КАК Склад,
			|	ДиректорБизнесЕдиницы.ФИО КАК ФИООперационныйДиректор,
			|	МестаХранения.СтатусАптеки КАК СтатусАптеки,
			|	ЗаместительДиректорБизнесЕдиницы.ФИО КАК ФИОЗаместитель,
			|	УправляющийАптекой.ФИО КАК ФИОУправляющий,
			|	ДиректорБизнесЕдиницы.АдресЭлектроннойПочты КАК АдресЭлектроннойПочтыОперацтонныйДиректор,
			|	ЗаместительДиректорБизнесЕдиницы.АдресЭлектроннойПочты КАК АдресЭлектроннойПочтыЗаместитель
			|ПОМЕСТИТЬ втСклады
			|ИЗ
			|	Справочник.МестаХранения КАК МестаХранения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК УправляющийАптекой
			|		ПО МестаХранения.Ссылка = УправляющийАптекой.Ссылка
			|			И (УправляющийАптекой.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК ДиректорБизнесЕдиницы
			|		ПО МестаХранения.Ссылка = ДиректорБизнесЕдиницы.Ссылка
			|			И (ДиректорБизнесЕдиницы.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.ДиректорБизнесЕдиницы))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК ЗаместительДиректорБизнесЕдиницы
			|		ПО МестаХранения.Ссылка = ЗаместительДиректорБизнесЕдиницы.Ссылка
			|			И (ЗаместительДиректорБизнесЕдиницы.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.РегиональныйДиректор))
			|ГДЕ
			|	МестаХранения.Код = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_Партии.СрокГодности КАК СрокГодности,
			|	УЗ_Партии.Код КАК Код,
			|	УЗ_Партии.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
			|	УЗ_Партии.Наименование КАК Наименование
			|ПОМЕСТИТЬ втПартии
			|ИЗ
			|	Справочник.УЗ_Партии КАК УЗ_Партии
			|ГДЕ
			|	УЗ_Партии.Наименование В(&Партии)
			|	И УЗ_Партии.СрокГодности >= &ДатаОкончания
			|	И УЗ_Партии.СрокГодности <= &СрокГодности
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МатрицаПоСрокуГодности.КодТовар КАК КодТовар,
			|	МатрицаПоСрокуГодности.Партия КАК КодПартия,
			|	МатрицаПоСрокуГодности.ПланУп КАК ПланУп,
			|	МатрицаПоСрокуГодности.ПланРуб КАК ПланРуб,
			|	МатрицаПоСрокуГодности.Мероприятия КАК Мероприятия
			|ПОМЕСТИТЬ втМатрица
			|ИЗ
			|	РегистрСведений.МатрицаПоСрокуГодности КАК МатрицаПоСрокуГодности
			|ГДЕ
			|	МатрицаПоСрокуГодности.КодСклад = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_РеализацииККМ.СкладКод КАК СкладКод,
			|	УЗ_РеализацииККМ.ТоварКод КАК ТоварКод,
			|	УЗ_РеализацииККМ.ПартияКод КАК ПартияКод,
			|	УЗ_РеализацииККМ.Количество КАК Количество,
			|	УЗ_РеализацииККМ.СуммаРозн КАК СуммаРозн,
			|	УЗ_РеализацииККМ.СуммаЗакупСНДС КАК СуммаЗакупСНДС
			|ПОМЕСТИТЬ втРеализацияККМ_7Дней
			|ИЗ
			|	РегистрНакопления.УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
			|ГДЕ
			|	УЗ_РеализацииККМ.Период МЕЖДУ &ДатаНачала7Дней И &ДатаОкончания7Дней
			|	И УЗ_РеализацииККМ.СкладКод = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_РеализацииККМ.СкладКод КАК СкладКод,
			|	УЗ_РеализацииККМ.ТоварКод КАК ТоварКод,
			|	УЗ_РеализацииККМ.ПартияКод КАК ПартияКод,
			|	УЗ_РеализацииККМ.Количество КАК Количество,
			|	УЗ_РеализацииККМ.СуммаРозн КАК СуммаРозн,
			|	УЗ_РеализацииККМ.СуммаЗакупСНДС КАК СуммаЗакупСНДС
			|ПОМЕСТИТЬ втРеализацияККМ_СначалаМесяца
			|ИЗ
			|	РегистрНакопления.УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
			|ГДЕ
			|	УЗ_РеализацииККМ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И УЗ_РеализацииККМ.СкладКод = &КодСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСклады.Код КАК СкладКод,
			|	МатрицаПоСрокуГодности.ПланРуб КАК ПланРуб,
			|	МатрицаПоСрокуГодности.ПланУп КАК ПланУп,
			|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РеализацииККМ_7Дней.СуммаЗакупСНДС / (1 + УЗ_Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))), 0) КАК ПроданоЗакупБезНДС_7Дней,
			|	ЕСТЬNULL(СУММА(РеализацииККМ_7Дней.Количество), 0) КАК ПроданоУп_7Дней,
			|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РеализацииККМ_СначалаМесяца.СуммаЗакупСНДС / (1 + УЗ_Партии.СтавкаНДСЗакуп / 100) КАК ЧИСЛО(15, 2))), 0) КАК ПроданоЗакупБезНДС_СначалаМесяца,
			|	ЕСТЬNULL(СУММА(РеализацииККМ_СначалаМесяца.Количество), 0) КАК ПроданоУп_СначалаМесяца
			|ПОМЕСТИТЬ ВТ_ДляСуммированияПоАптекам
			|ИЗ
			|	втМатрица КАК МатрицаПоСрокуГодности
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПартии КАК УЗ_Партии
			|		ПО МатрицаПоСрокуГодности.КодПартия = УЗ_Партии.Наименование
			|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализацияККМ_7Дней КАК РеализацииККМ_7Дней
			|		ПО (РеализацииККМ_7Дней.ПартияКод = УЗ_Партии.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализацияККМ_СначалаМесяца КАК РеализацииККМ_СначалаМесяца
			|		ПО (РеализацииККМ_СначалаМесяца.ПартияКод = УЗ_Партии.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
			|		ПО МатрицаПоСрокуГодности.КодТовар = втТовары.Код
			|		ЛЕВОЕ СОЕДИНЕНИЕ втСклады КАК втСклады
			|		ПО (ИСТИНА)
			|
			|СГРУППИРОВАТЬ ПО
			|	УЗ_Партии.СрокГодности,
			|	МатрицаПоСрокуГодности.ПланРуб,
			|	втСклады.Код,
			|	МатрицаПоСрокуГодности.ПланУп,
			|	втТовары.Товар,
			|	втТовары.Производитель,
			|	втТовары.ТипТовара,
			|	втТовары.Код
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДляСуммированияПоАптекам.СкладКод КАК СкладКод,
			|	СУММА(ВТ_ДляСуммированияПоАптекам.ПланРуб) КАК ПланРуб,
			|	СУММА(ВТ_ДляСуммированияПоАптекам.ПланУп) КАК ПланУп,
			|	СУММА(ВТ_ДляСуммированияПоАптекам.ПроданоЗакупБезНДС_7Дней) КАК ПроданоЗакупБезНДС_7Дней,
			|	СУММА(ВТ_ДляСуммированияПоАптекам.ПроданоУп_7Дней) КАК ПроданоУп_7Дней,
			|	СУММА(ВТ_ДляСуммированияПоАптекам.ПроданоЗакупБезНДС_СначалаМесяца) КАК ПроданоЗакупБезНДС_СначалаМесяца,
			|	СУММА(ВТ_ДляСуммированияПоАптекам.ПроданоУп_СначалаМесяца) КАК ПроданоУп_СначалаМесяца
			|ПОМЕСТИТЬ ВТ_СуммированиеПоАптекам
			|ИЗ
			|	ВТ_ДляСуммированияПоАптекам КАК ВТ_ДляСуммированияПоАптекам
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ДляСуммированияПоАптекам.СкладКод
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСклады.ФИООперационныйДиректор КАК ФИООперационныйДиректор,
			|	втСклады.ФИОЗаместитель КАК ФИОЗаместитель,
			|	втСклады.ФИОУправляющий КАК ФИОУправляющий,
			|	втСклады.Код КАК СкладКод,
			|	втСклады.Склад КАК Склад,
			|	ВТ_СуммированиеПоАптекам.ПланРуб КАК ПланРуб,
			|	ВТ_СуммированиеПоАптекам.ПланУп КАК ПланУп,
			|	ВТ_СуммированиеПоАптекам.ПроданоЗакупБезНДС_7Дней КАК ПроданоЗакупБезНДС_7Дней,
			|	ВТ_СуммированиеПоАптекам.ПроданоУп_7Дней КАК ПроданоУп_7Дней,
			|	ВТ_СуммированиеПоАптекам.ПроданоЗакупБезНДС_СначалаМесяца КАК ПроданоЗакупБезНДС_СначалаМесяца,
			|	ВТ_СуммированиеПоАптекам.ПроданоУп_СначалаМесяца КАК ПроданоУп_СначалаМесяца,
			|	втСклады.АдресЭлектроннойПочтыОперацтонныйДиректор КАК АдресЭлектроннойПочтыОперацтонныйДиректор,
			|	втСклады.АдресЭлектроннойПочтыЗаместитель КАК АдресЭлектроннойПочтыЗаместитель
			|ИЗ
			|	ВТ_СуммированиеПоАптекам КАК ВТ_СуммированиеПоАптекам
			|		ЛЕВОЕ СОЕДИНЕНИЕ втСклады КАК втСклады
			|		ПО ВТ_СуммированиеПоАптекам.СкладКод = втСклады.Код";
			
			ЗапросОсн = Новый Запрос;
			ЗапросОсн.Текст = ТекстЗапросаОсн;
			ЗапросОсн.УстановитьПараметр("КодСклад",Выборка.КодСклад); //Выборка.КодСклад
			ЗапросОсн.УстановитьПараметр("КодАП",МассивТоварПоАптеке);  //МассивТоварПоАптеке
			ЗапросОсн.УстановитьПараметр("Партии",МассивПартийПоАптеке);  
			ЗапросОсн.УстановитьПараметр("ДатаНачала",НачалоМесяца(ТекущаяДата()));
			ЗапросОсн.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
			
			ДН = ДеньНедели(ТекущаяДата());
			ДатаНачалаПрошлойНедели		= НачалоДня(ТекущаяДата()-3600*24*(6+ДН));
			ДатаОкончанияПрошлойНедели  = КонецДня(ТекущаяДата()-3600*24*ДН);
			
			ЗапросОсн.УстановитьПараметр("ДатаНачала7Дней",ДатаНачалаПрошлойНедели);  
			ЗапросОсн.УстановитьПараметр("ДатаОкончания7Дней",ДатаОкончанияПрошлойНедели);  
			ЗапросОсн.УстановитьПараметр("СрокГодности", ДобавитьМесяц(КонецМесяца(ТекущаяДата()),КоличествоМесяцевДляСрокаГодности));
			
			ТаблицаРезультат = ЗапросОсн.Выполнить().Выгрузить();
			
			Если ТаблицаРезультат.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;
			
			НайденноеЗначениеМассива = МассивОперДиректоров.Найти(ТаблицаРезультат[0].АдресЭлектроннойПочтыОперацтонныйДиректор);
			Если НайденноеЗначениеМассива = Неопределено Тогда
				МассивОперДиректоров.Добавить(ТаблицаРезультат[0].АдресЭлектроннойПочтыОперацтонныйДиректор);
			КонецЕсли; 
			
			НайденноеЗначениеМассива = МассивЗаместителей.Найти(ТаблицаРезультат[0].АдресЭлектроннойПочтыЗаместитель);
			Если НайденноеЗначениеМассива = Неопределено Тогда
				МассивЗаместителей.Добавить(ТаблицаРезультат[0].АдресЭлектроннойПочтыЗаместитель);
			КонецЕсли; 
			
			Если КопироватьТаблицу Тогда
			
				РезультирующаяТаблицаРезультатов = ТаблицаРезультат.Скопировать();	
			    КопироватьТаблицу = Ложь;
				
			Иначе
				
				Для каждого СтрокаТЗ  Из ТаблицаРезультат Цикл
				
					НоваяСтрока = РезультирующаяТаблицаРезультатов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Рассылка сконсолидированного файла на  почту опер директору
	ТЗ_Рассылки = Новый ТаблицаЗначений;
	
	// Для Опер директоров
	Для каждого СтрокаМассива Из МассивОперДиректоров Цикл
	
		ТЗ_Рассылки.Очистить();
		Отбор = Новый Структура("АдресЭлектроннойПочтыОперацтонныйДиректор",СтрокаМассива);
		
		ТЗ_Рассылки = РезультирующаяТаблицаРезультатов.Скопировать(Отбор);
		ЗаписатьТабличнуюЧастьВЭксель2(ВременныйКаталог,ТЗ_Рассылки);
		
		ПочтаРассылки = "";
		ПочтаРассылки = ПочтаРассылки + СокрЛП(СтрокаМассива);	
			
		ОтправитьСообщениеНаПочту(ПочтаРассылки,ПутьРасположенияФайла);
		УдалитьФайлы(ПутьРасположенияФайла);
		
	КонецЦикла; 
	
	// Для Заместитетелей
	Для каждого СтрокаМассива Из МассивЗаместителей Цикл
	
		ТЗ_Рассылки.Очистить();
		Отбор = Новый Структура("АдресЭлектроннойПочтыЗаместитель",СтрокаМассива);
		
		ТЗ_Рассылки = РезультирующаяТаблицаРезультатов.Скопировать(Отбор);
		ЗаписатьТабличнуюЧастьВЭксель2(ВременныйКаталог,ТЗ_Рассылки);
		
		ПочтаРассылки = "";
		ПочтаРассылки = ПочтаРассылки + СокрЛП(СтрокаМассива);	
			
		ОтправитьСообщениеНаПочту(ПочтаРассылки,ПутьРасположенияФайла);
		УдалитьФайлы(ПутьРасположенияФайла)
		
	КонецЦикла; 
КонецПроцедуры
 
#КонецОбласти 

#Область ВыгрузитьСпрАПвПроцессинговыйЦентрЦФТ

Функция ГГГГММДДЧЧММ(РазборДаты) Экспорт

	Возврат ""+Формат(РазборДаты, "ДФ=гггг")+Формат(РазборДаты, "ДФ=ММ")+Формат(РазборДаты, "ДФ=дд")+Формат(РазборДаты, "ДФ=чч")+Формат(РазборДаты, "ДФ=мм")	

КонецФункции // ()

Функция ВозвратИмениCSVФайлавЦентрЦФТ(ДатаР) Экспорт

	Возврат "TK_"+ГГГГММДДЧЧММ(ДатаР)+".csv";

КонецФункции // ВозвратИмениCSVФайла()

Процедура ВыгрузитьСпрАПвПроцессинговыйЦентрЦФТ() Экспорт

	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("ВыгрузитьСпрАПвПроцессинговыйЦентрЦФТ");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - РассылкаПоАптекамПланаПродажПоСрокамГодностиОперДи. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли;
	
	Параметры = Новый Структура("ПутьХраненияФайлаСервер,ПутьЗапускаПриложения,ВыгрузкаВ_BIЦФТ");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ПутьХраненияФайлаСервер,ПутьЗапускаПриложения,ВыгрузкаВ_BIЦФТ. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
		
	КонецЕсли;
	
	
	КаталогТоваров = "CTL_36_6";
	ТипОбновления = "FULL";
	
	кодировка = КодировкаТекста.ANSI;
	ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");
	Разделитель = ";";

	Файл_CSV = Новый ЗаписьТекста(ИмяФайлаЛок, Кодировка);
	ТекущаяДата = ТекущаяДата();
	
	// Добавление строки H
	стрH = "H" + Разделитель + СокрЛП(КаталогТоваров) + Разделитель+ Формат(ТекущаяДата, "ДФ=гггг") +Формат(ТекущаяДата, "ДФ=ММ")+Формат(ТекущаяДата, "ДФ=дд")+Формат(ТекущаяДата, "ДФ=чч")+Формат(ТекущаяДата, "ДФ=мм")+Формат(ТекущаяДата, "ДФ=сс")+
	Разделитель + ГГГГММДДЧЧММ(ТекущаяДата) + Разделитель + СокрЛП(ТипОбновления)+Разделитель+"0" + Символы.ВК + Символы.ПС;
	
	Файл_CSV.ЗаписатьСтроку	(стрH);

	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить("ЛС не СТМ");
	МассивГрупп.Добавить("ЛС СТМ");
	МассивГрупп.Добавить("ПФ не СТМ");
	МассивГрупп.Добавить("ПФ СТМ");
	МассивГрупп.Добавить("Неопределенные"); 
	
	запрос = Новый запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	|	ТоварыСТМСрезПоследних.ТипСТМ КАК ТипСТМ,
	|	ВЫБОР
	|		КОГДА ТоварыСТМСрезПоследних.ТипСТМ ЕСТЬ NULL
	|			ТОГДА ""Не СТМ""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.СТМ)
	|						ИЛИ ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.УсловныйСТМ)
	|					ТОГДА ""СТМ""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.НеСТМ)
	|								ИЛИ ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.Приорити)
	|							ТОГДА ""Не СТМ""
	|						ИНАЧЕ ""Неопределенные""
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СТМ,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО КАК ТипДляЦО,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС КАК ЖНВЛС,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипТовара КАК ТипТовара
	|ПОМЕСТИТЬ ВТ_ТМП
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыСТМ.СрезПоследних(&Период, ) КАК ТоварыСТМСрезПоследних
	|		ПО АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка = ТоварыСТМСрезПоследних.Товар
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.Наименование <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТМП.Код КАК Код,
	|	ВТ_ТМП.Наименование КАК Наименование,
	|	ВТ_ТМП.ТипСТМ КАК ТипСТМ,
	|	ВТ_ТМП.СТМ КАК СТМ,
	|	ВТ_ТМП.ТипДляЦО КАК ТипДляЦО,
	|	ВЫБОР
	|		КОГДА ВТ_ТМП.СТМ = ""СТМ""
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Лексредства)
	|						ТОГДА ""ЛС СТМ""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Парафармация)
	|								ТОГДА ""ПФ СТМ""
	|							ИНАЧЕ ""Неопределенные""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ТМП.СТМ = ""Не СТМ""
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Лексредства)
	|								ТОГДА ""ЛС не СТМ""
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Парафармация)
	|										ТОГДА ""ПФ не СТМ""
	|									ИНАЧЕ ""Неопределенные""
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ""Неопределенные""
	|			КОНЕЦ
	|	КОНЕЦ КАК Группа,
	|	ВТ_ТМП.ЖНВЛС КАК ЖНВЛС,
	|	ВТ_ТМП.ТипТовара КАК ТипТовара
	|ИЗ
	|	ВТ_ТМП КАК ВТ_ТМП";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаименованиеИзВыборки = Выборка.Наименование;
		Если СтрНайти(Выборка.Наименование,Символы.ПС)>0 Тогда
			НаименованиеИзВыборки = СтрЗаменить(Выборка.Наименование,Символы.ПС," "); 
		КонецЕсли; 
		КодТовара = СтрЗаменить(Выборка.Код,Символы.НПП,"");
		Если СтрНайти(НаименованиеИзВыборки,"""")>0 Тогда
			
			НаименованиеСКавычками = СтрЗаменить(НаименованиеИзВыборки,"""",""""+"""");
			СтрокаЗаписи = "SG"+Разделитель+Строка(КодТовара)+Разделитель+""""+СокрЛП(НаименованиеСКавычками)+""""+Символы.ВК + Символы.ПС;
			
		ИначеЕсли СтрНайти(НаименованиеИзВыборки,";")>0 Тогда
			СтрокаЗаписи = "SG"+Разделитель+Строка(КодТовара)+Разделитель+""""+СокрЛП(НаименованиеИзВыборки)+""""+Символы.ВК + Символы.ПС;
		Иначе
			СтрокаЗаписи = "SG"+Разделитель+Строка(КодТовара)+Разделитель+СокрЛП(НаименованиеИзВыборки)+  Символы.ВК + Символы.ПС;   
		КонецЕсли; 
		
		Файл_CSV.ЗаписатьСтроку       (СтрокаЗаписи);
		
	КонецЦикла;
	
	ОсновнаяТаблицаРезультата = РезультатЗапроса.Выгрузить();
	ТЗПоГруппе = Новый ТаблицаЗначений;
	ЧислоГрупп = 0;
	Для каждого СтрокаМасиваГрупп Из МассивГрупп Цикл
		
		ТЗПоГруппе.Очистить();
		Отбор = Новый Структура("Группа",СтрокаМасиваГрупп);	
		ТЗПоГруппе = ОсновнаяТаблицаРезультата.Скопировать(Отбор);
		КоличествоВГруппе = ТЗПоГруппе.Количество();
		Если КоличествоВГруппе > 0 Тогда
		
			ЧислоГрупп = ЧислоГрупп + 1;
			СтрокаЗаписи = "PGH"+Разделитель+СокрЛП(СтрокаМасиваГрупп)+Разделитель+СтрокаМасиваГрупп+Разделитель+Сокрлп(ТипОбновления)+Разделитель+"0"+Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			
			СчПоГруппе = 1;
			Для каждого СтрокаТаблицыГруппы Из ТЗПоГруппе Цикл
			
				# Если Клиент Тогда
				Состояние("Выгрузка группы: "+ЧислоГрупп+", Элемент "+СчПоГруппе + " из "+ КоличествоВГруппе);
				# КонецЕсли
				КодЗапись = СтрЗаменить(Строка(СтрокаТаблицыГруппы.Код),Символы.НПП,"");
				СтрокаЗаписи = "+"+Разделитель+СокрЛП(КодЗапись)+Символы.ВК + Символы.ПС;
				Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
				СчПоГруппе = СчПоГруппе +1;
				
			КонецЦикла; 
			
			СтрокаЗаписи = "PGT"+Разделитель+СтрЗаменить(Строка(КоличествоВГруппе),Символы.НПП,"")+Разделитель+"0"+Символы.ВК + Символы.ПС;  
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Добавление группы ЖНВЛС
	Отбор = Новый Структура("ЖНВЛС",Истина);	
	ТЗПоГруппе = ОсновнаяТаблицаРезультата.Скопировать(Отбор);
	КоличествоВГруппе = ТЗПоГруппе.Количество();
	Если КоличествоВГруппе > 0 Тогда
		
		ЧислоГрупп = ЧислоГрупп + 1;
		СтрокаЗаписи = "PGH"+Разделитель+СокрЛП("ЖНВЛС")+Разделитель+"ЖНВЛС"+Разделитель+Сокрлп(ТипОбновления)+Разделитель+"0"+Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		
		СчПоГруппе = 1;
		Для каждого СтрокаТаблицыГруппы Из ТЗПоГруппе Цикл
			
			# Если Клиент Тогда
				Состояние("Выгрузка группы: "+ЧислоГрупп+", Элемент "+СчПоГруппе + " из "+ КоличествоВГруппе);
			# КонецЕсли
			КодЗапись = СтрЗаменить(Строка(СтрокаТаблицыГруппы.Код),Символы.НПП,"");
			СтрокаЗаписи = "+"+Разделитель+СокрЛП(КодЗапись)+Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			СчПоГруппе = СчПоГруппе +1;
			
		КонецЦикла; 
		
		СтрокаЗаписи = "PGT"+Разделитель+СтрЗаменить(Строка(КоличествоВГруппе),Символы.НПП,"")+Разделитель+"0"+Символы.ВК + Символы.ПС;  
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
	КонецЕсли;	
	
	// Добавление группы ТипТовара
	СпрТипТовара = Справочники.ТипыТовара;
	СпрТипТовара_Госпитальный = СпрТипТовара.НайтиПоКоду(11); // ЛС/ГОСПИТАЛЬНЫЙ/RX
	Отбор = Новый Структура("ТипТовара",СпрТипТовара_Госпитальный);	
	ТЗПоГруппе = ОсновнаяТаблицаРезультата.Скопировать(Отбор);
	КоличествоВГруппе = ТЗПоГруппе.Количество();
	Если КоличествоВГруппе > 0 Тогда
		
		ЧислоГрупп = ЧислоГрупп + 1;
		СтрокаЗаписи = "PGH"+Разделитель+"Госпитальные"+Разделитель+"Госпитальные"+Разделитель+СокрЛП(ТипОбновления)+Разделитель+"0"+Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		
		СчПоГруппе = 1;
		Для каждого СтрокаТаблицыГруппы Из ТЗПоГруппе Цикл
			
			# Если Клиент Тогда
				Состояние("Выгрузка группы: "+ЧислоГрупп+", Элемент "+СчПоГруппе + " из "+ КоличествоВГруппе);
			# КонецЕсли
			КодЗапись = СтрЗаменить(Строка(СтрокаТаблицыГруппы.Код),Символы.НПП,"");
			СтрокаЗаписи = "+"+Разделитель+СокрЛП(КодЗапись)+Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			СчПоГруппе = СчПоГруппе +1;
			
		КонецЦикла; 
		
		СтрокаЗаписи = "PGT"+Разделитель+СтрЗаменить(Строка(КоличествоВГруппе),Символы.НПП,"")+Разделитель+"0"+Символы.ВК + Символы.ПС;  
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
	КонецЕсли;
	
	// Добавление строки T                        
	стрT = "T" + Разделитель +"0;0;0;0;0;0;0;0;"+ СтрЗаменить(Строка(Выборка.Количество()),Символы.НПП,"")+Разделитель+"0;0;0;0;0;"+ЧислоГрупп+Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрT);
	
	Файл_CSV.Закрыть();
	
	//ПутьЗаписиФайла = "/home/usr1cv8/jzdo-1.5.13-bc/files/documents/out/jzdo/notype";
	ПутьЗаписиФайла			= Параметры.ПутьХраненияФайлаСервер;
	ПутьЗапускаПриложения	= Параметры.ПутьЗапускаПриложения;
	Попытка
		ПереместитьФайл(ИмяФайлаЛок,СокрЛП(ПутьЗаписиФайла+"/"+ВозвратИмениCSVФайлавЦентрЦФТ(ТекущаяДата)));
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
	
	Попытка
		ЗапуститьПриложение(ПутьЗапускаПриложения);
		
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
	
	ВыгрузкаВ_BIЦФТ = Параметры.ВыгрузкаВ_BIЦФТ;
	Если ВыгрузкаВ_BIЦФТ Тогда
		ВыгрузитьСпрАПвПроцессинговыйЦентрBIЦФТ()	
	КонецЕсли; 
	
КонецПроцедуры

Функция СтрокаSG(ВыборкаТоварДляФасет, Разделитель)

	НаименованиеИзВыборки = ВыборкаТоварДляФасет.Наименование;
	Если СтрНайти(ВыборкаТоварДляФасет.Наименование,Символы.ПС)>0 Тогда
		НаименованиеИзВыборки = СтрЗаменить(ВыборкаТоварДляФасет.Наименование,Символы.ПС," "); 
	КонецЕсли; 
	КодТовара = СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,"");
	Если СтрНайти(НаименованиеИзВыборки,"""")>0 Тогда
		
		НаименованиеСКавычками = СтрЗаменить(НаименованиеИзВыборки,"""",""""+"""");
		СтрокаЗаписи = "SG"+Разделитель+Строка(КодТовара)+Разделитель+""""+СокрЛП(НаименованиеСКавычками)+""""+Символы.ВК + Символы.ПС;
		
	ИначеЕсли СтрНайти(НаименованиеИзВыборки,";")>0 Тогда
		СтрокаЗаписи = "SG"+Разделитель+Строка(КодТовара)+Разделитель+""""+СокрЛП(НаименованиеИзВыборки)+""""+Символы.ВК + Символы.ПС;
	Иначе
		СтрокаЗаписи = "SG"+Разделитель+Строка(КодТовара)+Разделитель+СокрЛП(НаименованиеИзВыборки)+  Символы.ВК + Символы.ПС;   
	КонецЕсли;
	
	Возврат СтрокаЗаписи 

КонецФункции // ()

Функция СтрокаSFE(ИмяФасета, ВыборкаТоварДляФасет, Разделитель)

	НаименованиеИзВыборки = ЛЕВ(ВыборкаТоварДляФасет.Наименование,100);
	Если СтрНайти(ВыборкаТоварДляФасет.Наименование,Символы.ПС)>0 Тогда
		НаименованиеИзВыборки = СтрЗаменить(ВыборкаТоварДляФасет.Наименование,Символы.ПС," "); 
	КонецЕсли; 
	КодТовара = СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,"");
	Если СтрНайти(НаименованиеИзВыборки,"""")>0 Тогда
		
		НаименованиеСКавычками = СтрЗаменить(НаименованиеИзВыборки,"""",""""+"""");
		// Обрезание под внешние кавычки
		Если СтрДлина(НаименованиеСКавычками) > 100 Тогда
			НаименованиеСКавычками = Лев(НаименованиеСКавычками,98);
			// Если под обрезание попадет двойная ковычка "" (первая кавычка нормальная, вторая экранирующая), то тогда сместим обрезаемую строку на один символ влева.
			// Т.е. обрезаем обе кавычки - обычную и экранирующую
			Символ98 = Сред(НаименованиеСКавычками,98,1);
			Символ97 = Сред(НаименованиеСКавычками,97,1);
			Если (Символ98 = """") и (Символ97 <> """") Тогда
				НаименованиеСКавычками = Лев(НаименованиеСКавычками,97);
			КонецЕсли; 
		КонецЕсли; 
		СтрокаЗаписи	= "SFE"+Разделитель+ИмяФасета+Разделитель+Строка(КодТовара)+Разделитель+""""+СокрЛП(НаименованиеСКавычками)+""""+ Символы.ВК + Символы.ПС;
	ИначеЕсли СтрНайти(НаименованиеИзВыборки,";")>0 Тогда
		СтрокаЗаписи	= "SFE"+Разделитель+ИмяФасета+Разделитель+Строка(КодТовара)+Разделитель+""""+СокрЛП(НаименованиеИзВыборки)+""""+Символы.ВК + Символы.ПС;
	Иначе
		СтрокаЗаписи	= "SFE"+Разделитель+ИмяФасета+Разделитель+Строка(КодТовара)+Разделитель+СокрЛП(НаименованиеИзВыборки)+Символы.ВК + Символы.ПС;
	КонецЕсли;
	
	Возврат СтрокаЗаписи 

КонецФункции // ()

Процедура ВыгрузитьСпрАПвПроцессинговыйЦентрBIЦФТ()

	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("ВыгрузитьСпрАПвПроцессинговыйЦентр_BI_ЦФТ");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - ВыгрузитьСпрАПвПроцессинговыйЦентр_BI_ЦФТ. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли;
	
	Параметры = Новый Структура("ПутьХраненияФайлаСервер,ПутьЗапускаПриложения");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ПутьХраненияФайлаСервер,ПутьЗапускаПриложения. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
		
	КонецЕсли;
	
	КаталогТоваров = "CTL_36_6";
	ТипОбновления = "FULL";
	
	кодировка = КодировкаТекста.ANSI;
	ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");
	Разделитель = ";";
	
	Файл_CSV = Новый ЗаписьТекста(ИмяФайлаЛок, Кодировка);
	ТекущаяДата = ТекущаяДата();
	
	Уид = Новый УникальныйИдентификатор();
	ГГГГММДДЧЧММ_Заголовок = ГГГГММДДЧЧММ(ТекущаяДата);
	
	// Добавление строки H
	стрH = "H" + Разделитель + СокрЛП(КаталогТоваров)+ Разделитель + Уид + Разделитель+ ГГГГММДДЧЧММ_Заголовок + Разделитель + СокрЛП(ТипОбновления)+Разделитель+"0" + Символы.ВК + Символы.ПС;
	
	Файл_CSV.ЗаписатьСтроку	(стрH);
	
	запрос = Новый запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.НоваяКатегория КАК НоваяКатегория,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Кластер КАК Кластер,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Сегмент КАК Сегмент,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.МНН КАК МНН,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО КАК ТипДляЦО,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипТовара КАК ТипТовара,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Бренд КАК Бренд,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Производитель КАК Производитель,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Спрос КАК Спрос
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.Наименование <> """"";
	Запрос.Текст = ТекстЗапроса;
	ВыборкаТоварДляФасет = Запрос.Выполнить().Выбрать();
	
	СчетчикSFC = 0;
	СчетчикDFC = 0;
	СчетчикSHC = 0;
	СчетчикDHC = 0;
	СчетчикSFE = 0;
	СчетчикDFE = 0;
	СчетчикSHE = 0;
	СчетчикDHE = 0;
	СчетчикSG = 0;
	СчетчикDG = 0;
	СчетчикSFM = 0;
	СчетчикDFM = 0;
	СчетчикSHM = 0;
	СчетчикDHM = 0;
	СчетчикPGH = 0;
	
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSG(ВыборкаТоварДляФасет, Разделитель);
		Файл_CSV.ЗаписатьСтроку(СтрокаЗаписи);
		СчетчикSG = СчетчикSG + 1;
	
	КонецЦикла;
	// 1. Фасет NewCategory
	ИмяФасета = "NewCategory";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Новая категория";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	ТекстЗапросаФасет = 
	"ВЫБРАТЬ
	|	ГруппировкиАссортимента.Код КАК Код,
	|	ГруппировкиАссортимента.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ГруппировкиАссортимента КАК ГруппировкиАссортимента";
	
	Запрос.Текст = ТекстЗапросаФасет;
	ВыборкаФасет = Запрос.Выполнить().Выбрать();
	
	// Строка SFE
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.НоваяКатегория) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.НоваяКатегория.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 2. Фасет Cluster
	ИмяФасета = "Cluster";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Кластер";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	ВыборкаФасет.Сбросить();
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
		
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.Кластер) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.Кластер.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 3. Фасет Segment
	ИмяФасета = "Segment";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Сегмент";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	ВыборкаФасет.Сбросить();
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.Сегмент) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.Сегмент.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 4. Фасет MNN
	ТекстЗапросаФасет = 
	"ВЫБРАТЬ
	|	МНН.Код КАК Код,
	|	МНН.Наименование КАК Наименование
	|ИЗ
	|	Справочник.МНН КАК МНН";
	Запрос.Текст = ТекстЗапросаФасет;
	ВыборкаФасет = Запрос.Выполнить().Выбрать();
	
	ИмяФасета = "MNN";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "МНН";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.МНН) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.МНН.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 5. Фасет PricingType (Перечисление)
	МножествоПеречислений = Перечисления.ТипыДляЦО;
	ИмяФасета = "PricingType";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Тип для ЦО";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	Для каждого ЭлементПеречисление Из МножествоПеречислений Цикл
		
		стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+Лев(ЭлементПеречисление,3)+Разделитель+ СокрЛП(Строка(ЭлементПеречисление)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(стрФасет);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.ТипДляЦО) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+Лев(ВыборкаТоварДляФасет.ТипДляЦО,3) + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 6. Фасет Type
	ТекстЗапросаФасет = 
	"ВЫБРАТЬ
	|	ТипыТовара.Код КАК Код,
	|	ТипыТовара.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ТипыТовара КАК ТипыТовара";
	Запрос.Текст = ТекстЗапросаФасет;
	ВыборкаФасет = Запрос.Выполнить().Выбрать();
	
	ИмяФасета = "Type";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Тип товара";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.ТипТовара) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.ТипТовара.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 7. Фасет Brand
	ТекстЗапросаФасет = 
	"ВЫБРАТЬ
	|	Брэнды.Код КАК Код,
	|	Брэнды.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Брэнды КАК Брэнды";
	Запрос.Текст = ТекстЗапросаФасет;
	ВыборкаФасет = Запрос.Выполнить().Выбрать();
	
	ИмяФасета = "Brand";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "БРЕНД";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.Бренд) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.Бренд.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 8. Фасет Manufacturer
	ТекстЗапросаФасет = 
	"ВЫБРАТЬ
	|	Производители.Код КАК Код,
	|	Производители.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Производители КАК Производители";
	Запрос.Текст = ТекстЗапросаФасет;
	ВыборкаФасет = Запрос.Выполнить().Выбрать();
	
	ИмяФасета = "Manufacturer";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Производитель";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	Пока ВыборкаФасет.Следующий() Цикл
		
		СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		//стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаФасет.Код),Символы.НПП,"")+Разделитель+ СокрЛП(Лев(ВыборкаФасет.Наименование,100)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.Производитель) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+СтрЗаменить(Строка(ВыборкаТоварДляФасет.Производитель.Код),Символы.НПП,"") + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// 9. Фасет Demand (Перечисление)
	МножествоПеречислений = Перечисления.ВидыСпроса;
	ИмяФасета = "Demand";
	# Если Клиент Тогда
		Состояние("Обработка фасета: "+ИмяФасета);
	# КонецЕсли
	ОписаниеФасета = "Вид спроса";
	стрФасет = "SFC"+Разделитель+ИмяФасета+Разделитель+ОписаниеФасета + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрФасет);
	СчетчикSFC = СчетчикSFC +1;
	
	// Строка SFE
	Для каждого ЭлементПеречисление Из МножествоПеречислений Цикл
		
		//СтрокаЗаписи = СтрокаSFE(ИмяФасета,ВыборкаФасет,Разделитель);
		стрФасет = "SFE"+Разделитель+ИмяФасета+Разделитель+Лев(ЭлементПеречисление,3)+Разделитель+ СокрЛП(Строка(ЭлементПеречисление)) + Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(стрФасет);
		СчетчикSFE = СчетчикSFE +1;
	
	КонецЦикла; 
	// Строка SFM
	ВыборкаТоварДляФасет.Сбросить();
	Пока ВыборкаТоварДляФасет.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаТоварДляФасет.Спрос) Тогда
			
			стрФасет = "SFM"+Разделитель+Строка(СтрЗаменить(ВыборкаТоварДляФасет.Код,Символы.НПП,""))+Разделитель+ ИмяФасета+Разделитель+Лев(ВыборкаТоварДляФасет.Спрос,3) + Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(стрФасет);
			СчетчикSFM = СчетчикSFM + 1;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Выгрузка товаров по группам
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить("ЛС не СТМ");
	МассивГрупп.Добавить("ЛС СТМ");
	МассивГрупп.Добавить("ПФ не СТМ");
	МассивГрупп.Добавить("ПФ СТМ");
	МассивГрупп.Добавить("Неопределенные"); 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Наименование КАК Наименование,
	|	ТоварыСТМСрезПоследних.ТипСТМ КАК ТипСТМ,
	|	ВЫБОР
	|		КОГДА ТоварыСТМСрезПоследних.ТипСТМ ЕСТЬ NULL
	|			ТОГДА ""Не СТМ""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.СТМ)
	|						ИЛИ ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.УсловныйСТМ)
	|					ТОГДА ""СТМ""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.НеСТМ)
	|								ИЛИ ТоварыСТМСрезПоследних.ТипСТМ = ЗНАЧЕНИЕ(Перечисление.ТипыСТМ.Приорити)
	|							ТОГДА ""Не СТМ""
	|						ИНАЧЕ ""Неопределенные""
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СТМ,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипДляЦО КАК ТипДляЦО,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЖНВЛС КАК ЖНВЛС,
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ТипТовара КАК ТипТовара
	|ПОМЕСТИТЬ ВТ_ТМП
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыСТМ.СрезПоследних(&Период, ) КАК ТоварыСТМСрезПоследних
	|		ПО АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка = ТоварыСТМСрезПоследних.Товар
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.Наименование <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТМП.Код КАК Код,
	|	ВТ_ТМП.Наименование КАК Наименование,
	|	ВТ_ТМП.ТипСТМ КАК ТипСТМ,
	|	ВТ_ТМП.СТМ КАК СТМ,
	|	ВТ_ТМП.ТипДляЦО КАК ТипДляЦО,
	|	ВЫБОР
	|		КОГДА ВТ_ТМП.СТМ = ""СТМ""
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Лексредства)
	|						ТОГДА ""ЛС СТМ""
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Парафармация)
	|								ТОГДА ""ПФ СТМ""
	|							ИНАЧЕ ""Неопределенные""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ТМП.СТМ = ""Не СТМ""
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Лексредства)
	|								ТОГДА ""ЛС не СТМ""
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ВТ_ТМП.ТипДляЦО = ЗНАЧЕНИЕ(Перечисление.ТипыДляЦО.Парафармация)
	|										ТОГДА ""ПФ не СТМ""
	|									ИНАЧЕ ""Неопределенные""
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ""Неопределенные""
	|			КОНЕЦ
	|	КОНЕЦ КАК Группа,
	|	ВТ_ТМП.ЖНВЛС КАК ЖНВЛС,
	|	ВТ_ТМП.ТипТовара КАК ТипТовара
	|ИЗ
	|	ВТ_ТМП КАК ВТ_ТМП";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ОсновнаяТаблицаРезультата = РезультатЗапроса.Выгрузить();
	ТЗПоГруппе = Новый ТаблицаЗначений;
	ЧислоГрупп = 0;
	Для каждого СтрокаМасиваГрупп Из МассивГрупп Цикл
		
		ТЗПоГруппе.Очистить();
		Отбор = Новый Структура("Группа",СтрокаМасиваГрупп);	
		ТЗПоГруппе = ОсновнаяТаблицаРезультата.Скопировать(Отбор);
		КоличествоВГруппе = ТЗПоГруппе.Количество();
		Если КоличествоВГруппе > 0 Тогда
		
			ЧислоГрупп = ЧислоГрупп + 1;
			СтрокаЗаписи = "PGH"+Разделитель+СокрЛП(СтрокаМасиваГрупп)+Разделитель+СтрокаМасиваГрупп+Разделитель+Сокрлп(ТипОбновления)+Разделитель+"0"+Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			СчетчикPGH = СчетчикPGH + 1;
			
			СчПоГруппе = 1;
			Для каждого СтрокаТаблицыГруппы Из ТЗПоГруппе Цикл
			
				# Если Клиент Тогда
				Состояние("Выгрузка группы: "+ЧислоГрупп+", Элемент "+СчПоГруппе + " из "+ КоличествоВГруппе);
				# КонецЕсли
				КодЗапись = СтрЗаменить(Строка(СтрокаТаблицыГруппы.Код),Символы.НПП,"");
				СтрокаЗаписи = "+"+Разделитель+СокрЛП(КодЗапись)+Символы.ВК + Символы.ПС;
				Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
				СчПоГруппе = СчПоГруппе +1;
				
			КонецЦикла; 
			
			СтрокаЗаписи = "PGT"+Разделитель+СтрЗаменить(Строка(КоличествоВГруппе),Символы.НПП,"")+Разделитель+"0"+Символы.ВК + Символы.ПС;  
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Добавление группы ЖНВЛС
	Отбор = Новый Структура("ЖНВЛС",Истина);	
	ТЗПоГруппе = ОсновнаяТаблицаРезультата.Скопировать(Отбор);
	КоличествоВГруппе = ТЗПоГруппе.Количество();
	Если КоличествоВГруппе > 0 Тогда
		
		ЧислоГрупп = ЧислоГрупп + 1;
		СтрокаЗаписи = "PGH"+Разделитель+СокрЛП("ЖНВЛС")+Разделитель+"ЖНВЛС"+Разделитель+Сокрлп(ТипОбновления)+Разделитель+"0"+Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикPGH = СчетчикPGH + 1;
		
		СчПоГруппе = 1;
		Для каждого СтрокаТаблицыГруппы Из ТЗПоГруппе Цикл
			
			# Если Клиент Тогда
				Состояние("Выгрузка группы: "+ЧислоГрупп+", Элемент "+СчПоГруппе + " из "+ КоличествоВГруппе);
			# КонецЕсли
			КодЗапись = СтрЗаменить(Строка(СтрокаТаблицыГруппы.Код),Символы.НПП,"");
			СтрокаЗаписи = "+"+Разделитель+СокрЛП(КодЗапись)+Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			СчПоГруппе = СчПоГруппе +1;
			
		КонецЦикла; 
		
		СтрокаЗаписи = "PGT"+Разделитель+СтрЗаменить(Строка(КоличествоВГруппе),Символы.НПП,"")+Разделитель+"0"+Символы.ВК + Символы.ПС;  
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
	КонецЕсли;	
	
	// Добавление группы ТипТовара
	СпрТипТовара = Справочники.ТипыТовара;
	СпрТипТовара_Госпитальный = СпрТипТовара.НайтиПоКоду(11); // ЛС/ГОСПИТАЛЬНЫЙ/RX
	Отбор = Новый Структура("ТипТовара",СпрТипТовара_Госпитальный);	
	ТЗПоГруппе = ОсновнаяТаблицаРезультата.Скопировать(Отбор);
	КоличествоВГруппе = ТЗПоГруппе.Количество();
	Если КоличествоВГруппе > 0 Тогда
		
		ЧислоГрупп = ЧислоГрупп + 1;
		СтрокаЗаписи = "PGH"+Разделитель+"Госпитальные"+Разделитель+"Госпитальные"+Разделитель+СокрЛП(ТипОбновления)+Разделитель+"0"+Символы.ВК + Символы.ПС;
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
		СчетчикPGH = СчетчикPGH + 1;
		
		СчПоГруппе = 1;
		Для каждого СтрокаТаблицыГруппы Из ТЗПоГруппе Цикл
			
			# Если Клиент Тогда
				Состояние("Выгрузка группы: "+ЧислоГрупп+", Элемент "+СчПоГруппе + " из "+ КоличествоВГруппе);
			# КонецЕсли
			КодЗапись = СтрЗаменить(Строка(СтрокаТаблицыГруппы.Код),Символы.НПП,"");
			СтрокаЗаписи = "+"+Разделитель+СокрЛП(КодЗапись)+Символы.ВК + Символы.ПС;
			Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
			СчПоГруппе = СчПоГруппе +1;
			
		КонецЦикла; 
		
		СтрокаЗаписи = "PGT"+Разделитель+СтрЗаменить(Строка(КоличествоВГруппе),Символы.НПП,"")+Разделитель+"0"+Символы.ВК + Символы.ПС;  
		Файл_CSV.ЗаписатьСтроку	(СтрокаЗаписи);
	КонецЕсли;
	
	// Добавление строки T           СтрЗаменить(Строка(СчетчикPGH),Символы.НПП,"")             
	стрT = "T" 											+ Разделитель + СтрЗаменить(Строка(СчетчикSFC),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикDFC),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикSHC),Символы.НПП,"") + Разделитель +
		СтрЗаменить(Строка(СчетчикDHC),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикSFE),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикDFE),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикSHE),Символы.НПП,"") + Разделитель +
		СтрЗаменить(Строка(СчетчикDHE),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикSG),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикDG),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикSFM),Символы.НПП,"") + Разделитель +  
	    СтрЗаменить(Строка(СчетчикDFM),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикSHM),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикDHM),Символы.НПП,"")	+ Разделитель + СтрЗаменить(Строка(СчетчикPGH),Символы.НПП,"") + Символы.ВК + Символы.ПС;
	Файл_CSV.ЗаписатьСтроку	(стрT);
	
	Файл_CSV.Закрыть();
	ПутьЗаписиФайла			= Параметры.ПутьХраненияФайлаСервер;
	ПутьЗапускаПриложения	= Параметры.ПутьЗапускаПриложения;
	Попытка
		ПереместитьФайл(ИмяФайлаЛок,СокрЛП(ПутьЗаписиФайла+"/TK_"+ГГГГММДДЧЧММ_Заголовок+".csv"));
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
	
	Попытка
		ЗапуститьПриложение(ПутьЗапускаПриложения);
		
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
КонецПроцедуры


#КонецОбласти  

Функция ПреобразованиеНаименованияБренда(ЧтоПреобразовать)

	ВозвращаемоеЗначение = СтрЗаменить(ЧтоПреобразовать,"36и6 +","36,6");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"36и6","36,6");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"А5 (АВЕ) VIP","А5");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"А5 (АВЕ)","А5");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"А5 (ГЗ)","А5");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"НОРМА (ГЗ)","НОРМА");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"НОРМА (АВЕ)","НОРМА");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"ФАРМАДАР (АВЕ)","ФАРМАДАР");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"Аве VIP","A.V.E");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"Аве","A.V.E");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"Витрум (АВЕ)","Витрум");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"- - -","Аптека");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"Без бренда н- 35","Аптека");
	ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение,"БЕЗ БРЕНДА","Аптека");
	Если ПустаяСтрока(ВозвращаемоеЗначение) Тогда
		ВозвращаемоеЗначение = "Аптека"
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции // ПреобразованиеНаименованияБренда()


Процедура РассылкаСпискаАптекДляСайтаИА() Экспорт

	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("РассылкаСпискаАптекДляСайтаИА");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - РассылкаСпискаАптекДляСайтаИА. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("ТелефонДляИнформирования,СрокХраненияЗаказа,ПутьХраненияФайлаЛокально,ПутьХраненияФайлаСервер");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ТелефонДляИнформирования,СрокХраненияЗаказа,ПутьХраненияФайлаЛокально,ПутьХраненияФайлаСервер. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
	КонецЕсли;
	
	// Таблица соответствий кодов станций метро 1с и сайта
	МакетСтанций = ПолучитьОбщийМакет("СоответствияКодовСтанцийМетро");
	
	ТЗ_СтанцииМетро = Новый ТаблицаЗначений;
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5));
	ТЗ_СтанцииМетро.Колонки.Добавить("Код1С",ОписаниеЧисло);
	ТЗ_СтанцииМетро.Колонки.Добавить("КодСтанцииИА",Новый ОписаниеТипов("Строка"));
	ТЗ_СтанцииМетро.Колонки.Добавить("КодЛинииИА", Новый ОписаниеТипов("Строка"));
	
	Для Стр = 2  По МакетСтанций.ВысотаТаблицы Цикл
		
		НоваяСтрока  = ТЗ_СтанцииМетро.Добавить();
		НоваяСтрока.КодСтанцииИА	= МакетСтанций.Область(Стр, 2).Текст;
		НоваяСтрока.КодЛинииИА		= МакетСтанций.Область(Стр, 3).Текст;
		НоваяСтрока.Код1С			= Число(МакетСтанций.Область(Стр, 4).Текст);
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(МестаХранения.Код) КАК КодАптека,
	|	МестаХранения.Фирма.Код КАК ФирмаКод,
	|	Контракты.Код КАК КодКонтракта,
	|	Контракты.Ссылка КАК СсылкаКонтракт,
	|	МестаХранения.Ссылка КАК СсылкаАптека
	|ПОМЕСТИТЬ ВТ_Аптеки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контракты КАК Контракты
	|		ПО МестаХранения.Фирма.Код = Контракты.КодФирмы
	|			И (Контракты.КодПоставщика = 3055)
	|			И (Контракты.Активность = ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	МестаХранения.Фирма.Код,
	|	Контракты.Код,
	|	Контракты.Ссылка,
	|	МестаХранения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КонтрактыИАптеки.КодАптекиВнешн) КАК КодАптекиВнешн,
	|	ВТ_Аптеки.КодАптека КАК КодАптека
	|ПОМЕСТИТЬ ВТ_ВнешнийКодДДП
	|ИЗ
	|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Аптеки КАК ВТ_Аптеки
	|		ПО КонтрактыИАптеки.Владелец = ВТ_Аптеки.СсылкаКонтракт
	|			И КонтрактыИАптеки.Аптека = ВТ_Аптеки.СсылкаАптека
	|			И (КонтрактыИАптеки.Активность = ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Аптеки.КодАптека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКодовСтанцийМетро.КодСтанцииИА КАК КодСтанцииИА,
	|	ТаблицаКодовСтанцийМетро.КодЛинииИА КАК КодЛинииИА,
	|	ТаблицаКодовСтанцийМетро.Код1С КАК Код1С
	|ПОМЕСТИТЬ ВТ_КодовСтанцийМетро
	|ИЗ
	|	&ТаблицаКодовСтанцийМетро КАК ТаблицаКодовСтанцийМетро
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	"""" КАК СлужебноеПоле,
	|	МестаХранения.Бренд.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(МестаХранения.Бренд) КАК Бренд,
	|	МестаХранения.Код КАК Код1С,
	|	ВТ_ВнешнийКодДДП.КодАптекиВнешн КАК КодGDP,
	|	ВЫБОР
	|		КОГДА МестаХранения.СубъектРФ.КодКлассификатора = ""77""
	|				ИЛИ МестаХранения.СубъектРФ.КодКлассификатора = ""50""
	|			ТОГДА ""77""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МестаХранения.СубъектРФ.КодКлассификатора = ""78""
	|						ИЛИ МестаХранения.СубъектРФ.КодКлассификатора = ""47""
	|					ТОГДА ""78""
	|				ИНАЧЕ МестаХранения.СубъектРФ.КодКлассификатора
	|			КОНЕЦ
	|	КОНЕЦ КАК Регион,
	|	ВЫБОР
	|		КОГДА МестаХранения.НаименованиеДляЗУП = """"
	|			ТОГДА МестаХранения.НаименованиеПоКлассификатору
	|		ИНАЧЕ МестаХранения.НаименованиеДляЗУП
	|	КОНЕЦ КАК Адрес,
	|	ДопРеквизитыМестХранений.Широта КАК Широта,
	|	ДопРеквизитыМестХранений.Долгота КАК Долгота,
	|	ПРЕДСТАВЛЕНИЕ(МестаХранения.РежимРаботы) КАК ЧасыРаботы,
	|	"""" КАК ПустоеПоле,
	|	&СрокХраненияЗаказа КАК СрокХраненияЗаказа,
	|	МестаХранения.Город.Наименование + ""###"" + &Телефон + ""####"" КАК СводноеПоле,
	|	ВТ_КодовСтанцийМетро.КодСтанцииИА КАК КодСтанцииИА,
	|	ВТ_КодовСтанцийМетро.КодЛинииИА КАК КодЛинииИА,
	|	ВЫБОР
	|		КОГДА МестаХранения.РежимРаботы.Код = ""000000001""
	|			ТОГДА ""is24hour""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ФлагКруглосуточно,
	|	ВЫБОР
	|		КОГДА МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
	|			ТОГДА ""TRUE""
	|		ИНАЧЕ ""FALSE""
	|	КОНЕЦ КАК Опубликовано,
	|	ВЫБОР
	|		КОГДА МестаХранения.Бренд.Код = 1
	|			ТОГДА ""employeeGorzdrav""
	|		ИНАЧЕ ""employee366""
	|	КОНЕЦ КАК Группа,
	|	МестаХранения.НомерАптеки КАК НомерАптеки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДопРеквизитыМестХранений КАК ДопРеквизитыМестХранений
	|		ПО МестаХранения.Ссылка = ДопРеквизитыМестХранений.Аптека
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодовСтанцийМетро КАК ВТ_КодовСтанцийМетро
	|		ПО МестаХранения.Метро.Код = ВТ_КодовСтанцийМетро.Код1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнешнийКодДДП КАК ВТ_ВнешнийКодДДП
	|		ПО МестаХранения.Код = ВТ_ВнешнийКодДДП.КодАптека
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И МестаХранения.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СрокХраненияЗаказа", Параметры.СрокХраненияЗаказа);
	Запрос.УстановитьПараметр("Телефон", Параметры.ТелефонДляИнформирования);
	Запрос.УстановитьПараметр("ТаблицаКодовСтанцийМетро", ТЗ_СтанцииМетро);
	ТЗ_Результат = Запрос.Выполнить().Выгрузить();
	
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ВременныйКаталог = Параметры.ПутьХраненияФайлаСервер;//"/home/usr1cv8/ftp_net/Post/";
		Слэш = "/";
		ПутьРасположенияФайла = ВременныйКаталог + "/"+"1CStore-{sequienceId}.csv";
	Иначе
		ВременныйКаталог = Параметры.ПутьХраненияФайлаЛокально;//"\\id-vm-1\ftp_data\Post\";
		Слэш = "\";
		ПутьРасположенияФайла = ВременныйКаталог + "\"+"1CStore-{sequienceId}.csv";
	КонецЕсли;
	
	кодировка = КодировкаТекста.ANSI;
	ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");

	Файл_CSV = Новый ЗаписьТекста(ИмяФайлаЛок, Кодировка);
	
	Разделитель = ";";
	КолонкиТЗ = ТЗ_Результат.Колонки;
	Для каждого Колонка Из КолонкиТЗ Цикл
		
		Если Колонка.Заголовок = "КодСтанцииИА"
			ИЛИ Колонка.Заголовок = "НомерАптеки" Тогда
			Продолжить
		КонецЕсли; 
		стрКолонки = "" + стрКолонки + Колонка.Заголовок + разделитель;
		
	КонецЦикла; 
	Файл_CSV.ЗаписатьСтроку(стрКолонки);

	Сч = 1; 	

	КоличествоСтрок = ТЗ_Результат.Количество();
	Для каждого запись из ТЗ_Результат Цикл

		Текст = "";
		
		НаименованиеАптеки	= ПреобразованиеНаименованияБренда(запись.Наименование);
		НаименованиеБрэнд	= ПреобразованиеНаименованияБренда(запись.Бренд);
		
		Текст = Текст +разделитель+ СокрЛП(НаименованиеАптеки) +" Аптека №"+ Формат(запись.НомерАптеки, "ЧГ=")
			+ разделитель + НаименованиеБрэнд  
			+ разделитель + Формат(запись.Код1С, "ЧГ=")  
			+ разделитель + СокрЛП(запись.КодGDP)  
			+ разделитель + запись.Регион
			+ разделитель + Символ(34)+запись.Адрес+Символ(34)
			+ разделитель + запись.Широта     
			+ разделитель + запись.Долгота
			+ разделитель + """"+СтрЗаменить(запись.ЧасыРаботы,";",",")+""""
			+ разделитель + """"+""""
			+ разделитель + """"+запись.СрокХраненияЗаказа+""""
			+ разделитель + запись.СводноеПоле + запись.КодСтанцииИА
			
			//+ разделитель + запись.Город
			//+ разделитель + запись.Телефон
			//+ разделитель + запись.КодСтанцииИА
			+ разделитель + запись.КодЛинииИА
			+ разделитель + запись.ФлагКруглосуточно
			+ разделитель + запись.Опубликовано
			+ разделитель + запись.Группа;
			
			Файл_CSV.ЗаписатьСтроку
			(Текст);
			
		Сч = Сч + 1;
		
	КонецЦикла;
	Файл_CSV.Закрыть();
	
	ПервыйСимволПути = Лев(ПутьРасположенияФайла,1);
	ПереместитьФайл(ИмяФайлаЛок,СокрЛП(ПутьРасположенияФайла+?(ПервыйСимволПути = "/","/","\")));
	

	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Файл сформирован");

КонецПроцедуры

Процедура РассылкаСпискаАптекДляСайтаИА_1() Экспорт

	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("РассылкаСпискаАптекДляСайтаИА1");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - РассылкаСпискаАптекДляСайтаИА. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("ПутьХраненияФайлаЛокально,ПутьХраненияФайлаСервер");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - ПутьХраненияФайлаЛокально,ПутьХраненияФайлаСервер. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	"""" КАК name,
	|	МестаХранения.Мэйл КАК uid,
	|	МестаХранения.Мэйл КАК customerID,
	|	ВЫБОР
	|		КОГДА МестаХранения.Бренд.Код = 1
	|			ТОГДА ""employeeGorzdrav""
	|		ИНАЧЕ ""employee366""
	|	КОНЕЦ КАК groups,
	|	"""" КАК password,
	|	ВЫБОР
	|		КОГДА МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
	|			ТОГДА ""FALSE""
	|		ИНАЧЕ ""TRUE""
	|	КОНЕЦ КАК loginDisabled,
	|	ПРЕДСТАВЛЕНИЕ(МестаХранения.Бренд) КАК Бренд,
	|	МестаХранения.НомерАптеки КАК НомерАптеки
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.ЭтоГруппа = ЛОЖЬ";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ТЗ_Результат = Запрос.Выполнить().Выгрузить();
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ВременныйКаталог = Параметры.ПутьХраненияФайлаСервер;//"/home/usr1cv8/ftp_net/Post/";
		Слэш = "/";
		ПутьРасположенияФайла = ВременныйКаталог + "/"+"1CCustomer-{sequienceId}csv";
	Иначе
		ВременныйКаталог = Параметры.ПутьХраненияФайлаЛокально;//"\\id-vm-1\ftp_data\Post\";
		Слэш = "\";
		ПутьРасположенияФайла = ВременныйКаталог + "\"+"1CCustomer-{sequienceId}.csv";
	КонецЕсли;
	
	кодировка = КодировкаТекста.UTF8;
	ИмяФайлаЛок = ПолучитьИмяВременногоФайла("csv");
	Файл_CSV = Новый ЗаписьТекста(ИмяФайлаЛок, Кодировка);
	
	Разделитель = ";";
	КолонкиТЗ = ТЗ_Результат.Колонки;
	Для каждого Колонка Из КолонкиТЗ Цикл
		
		Если Колонка.Заголовок = "Бренд"
			ИЛИ Колонка.Заголовок = "НомерАптеки" 
			ИЛИ Колонка.Заголовок = "Мэйл" 
			Тогда
			Продолжить
		КонецЕсли; 
		стрКолонки = "" + стрКолонки + Колонка.Заголовок + разделитель;
		
	КонецЦикла; 
	Файл_CSV.ЗаписатьСтроку(стрКолонки);

	КоличествоСтрок = ТЗ_Результат.Количество();
	Для каждого запись из ТЗ_Результат Цикл

		Текст = "";
		
		НаименованиеБрэнд	= ПреобразованиеНаименованияБренда(запись.Бренд);
		
		Текст = Текст + СокрЛП(НаименованиеБрэнд) +" Аптека №"+ Формат(запись.НомерАптеки, "ЧГ=")
			+ разделитель + запись.uid  
			+ разделитель + запись.customerID  
			+ разделитель + запись.groups;
			Записьuid = запись.uid;
			Если СтрНайти(Записьuid,"apt.366.ru")>0 Тогда
				Записьuid = СтрЗаменить(Записьuid,"apt.366.ru","apt")
			КонецЕсли;
			Текст = Текст+ разделитель + Записьuid
			+ разделитель + запись.loginDisabled;     
			
			Файл_CSV.ЗаписатьСтроку
			(Текст);
		
	КонецЦикла;
	Файл_CSV.Закрыть();
	
	ПервыйСимволПути = Лев(ПутьРасположенияФайла,1);
	ПереместитьФайл(ИмяФайлаЛок,СокрЛП(ПутьРасположенияФайла+?(ПервыйСимволПути = "/","/","\")));
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Файл сформирован");
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитаСтоимостьСборки_СправочникАП() Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК СсылкаАП,
	|	ВЫБОР
	|		КОГДА АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦена <> 0
	|			ТОГДА АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦенаДляРозницы <> 0
	|					ТОГДА АССОРТИМЕНТНЫЙ_ПЛАН.ЗакупочнаяЦенаДляРозницы
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаДляАлгоритма
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
	|ГДЕ
	|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
	|	И АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазрешенныеТовары.Товар.Ссылка,
	|	ВЫБОР
	|		КОГДА РазрешенныеТовары.Товар.ЗакупочнаяЦена <> 0
	|			ТОГДА РазрешенныеТовары.Товар.ЗакупочнаяЦена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РазрешенныеТовары.Товар.ЗакупочнаяЦенаДляРозницы <> 0
	|					ТОГДА РазрешенныеТовары.Товар.ЗакупочнаяЦенаДляРозницы
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.РазрешенныеТовары КАК РазрешенныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_1.СсылкаАП КАК СсылкаАП,
	|	ВЫБОР
	|		КОГДА ВТ_1.СсылкаАП.ТипТовара.Код = 10
	|			ТОГДА 20
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_1.ЦенаДляАлгоритма >= 0.11
	|						И ВТ_1.ЦенаДляАлгоритма <= 50
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_1.СсылкаАП.ТипТовара.Код = 9
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_1.СсылкаАП.Холодильник
	|									ТОГДА 1
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_1.ЦенаДляАлгоритма > 50
	|												И НЕ ВТ_1.СсылкаАП.Холодильник
	|												И ЕСТЬNULL(ВТ_1.СсылкаАП.ТипТовара.Код, 0) <> 10
	|											ТОГДА 10
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтоимостьСборки,
	|	ВТ_1.СсылкаАП.СтоимостьСборки КАК СсылкаАПСтоимостьСборки
	|ПОМЕСТИТЬ ВТ_2
	|ИЗ
	|	ВТ_1 КАК ВТ_1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_2.СсылкаАП КАК СсылкаАП,
	|	ВТ_2.СтоимостьСборки КАК СтоимостьСборки
	|ИЗ
	|	ВТ_2 КАК ВТ_2
	|ГДЕ
	|	ВТ_2.СтоимостьСборки <> ВТ_2.СсылкаАПСтоимостьСборки";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Объект = Выборка.СсылкаАП.ПолучитьОбъект();
		Объект.СтоимостьСборки = Выборка.СтоимостьСборки;
		Попытка
		
			Объект.Записать()
		
		Исключение

		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры

Процедура МаркетинговыеЦеныПрайсЛистИА() Экспорт
	
	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("МаркетинговыеЦеныПрайсЛистИА");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - МаркетинговыеЦеныПрайсЛистИА. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("ФайлСвязокКодаДДП");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
		
	КонецЕсли;
	
	КодСвязокДДП = Параметры.ФайлСвязокКодаДДП;
	
	Если Прав(КодСвязокДДП,3) <> "csv" Тогда
	
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Файл связок кодов ДДП не является файлом ""csv"". Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
	
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	// Чтение Файла Связок кодов ДДП
	Разделитель = ";";
	ОписаниеЧисло12		= Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12));
	ОписаниеЧисло1		= Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1, 0));
	ОписаниеСтрока36	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36));
	ОписаниеЧисло15_0	= Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 0));
	ТЗСвязкаКодов = Новый ТаблицаЗначений;
	ТЗСвязкаКодов.Колонки.Добавить("КодДДП", ОписаниеЧисло15_0);
	ТЗСвязкаКодов.Колонки.Добавить("КодНалогойСтавки", ОписаниеСтрока36);
	ТЗСвязкаКодов.Колонки.Добавить("Код1С", ОписаниеЧисло12);
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(КодСвязокДДП);

	Для НомерСтроки=2 по ЗагружаемыйФайл.КоличествоСтрок() Цикл

		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКол = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
		НоваяСтрочка= ТЗСвязкаКодов.Добавить();
		Если МассивКол.Количество() <> ТЗСвязкаКодов.Колонки.Количество() Тогда 
			Продолжить; // скорее всего в тексте содержит разделитель 
		КонецЕсли; 
		Для НомерСтолбца= 1 по МассивКол.Количество() Цикл //заполняем строчку значениями 
			ТекущееЗначение = МассивКол[НомерСтолбца-1]; 
			ИмяКолонки = ТЗСвязкаКодов.Колонки[НомерСтолбца-1].Имя; 
			НоваяСтрочка[ИмяКолонки] = ТекущееЗначение; 
		КонецЦикла; 
		
	КонецЦикла;
	
	Connection = Неопределено;
	#Если Клиент Тогда
	// COM Соединение
	Попытка
		
		СтрокаСоединения = "Provider= SQLNCLI10.1;
		|Password					= As8$ty;   		
		|Persist Security Info		= True;
		|User ID					= marketingprice; 
		|Initial Catalog			= extorders;
		|Data Source				= SQLSERVERA2.fc-moron.ru\ORIOLA
		|;MultipleActiveResultSets	= true;";

		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.Open(СтрокаСоединения);
		
	Исключение
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка COM Соединения: "+ОписаниеОшибки(),,Истина);
		Connection = Неопределено 
		
	КонецПопытки; 
	#КонецЕсли
	Если Connection = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	RS = Новый COMОбъект ("ADODB.RecordSet");
	RS.CursorLocation = 2;
	RS.CursorType = 0;
	RS.LockType = 1;
	
	// Вборка из таблицы retail_price
	ДатаВЗапрос = "'"+СтрЗаменить(Строка(Год(ДатаОтчета)),Символы.НПП,"")+
	Строка(Формат(Месяц(ДатаОтчета),"ЧЦ=2; ЧВН="))+
	Строка(Формат(День(ДатаОтчета),"ЧЦ=2; ЧВН="))+"'";
	
	sql = "select * 
	|from retail_price 
	|where PriceID in (1,2,7,8)
	|;
	|";
	
	RS = Connection.Execute(sql);
	
	ТЗ_СКЛ = Новый ТаблицаЗначений;
	// Поля
	ОписаниеЧисло15_2	= Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	ОписаниеЧисло3_0	= Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3, 0));
	ОписаниеДата		= Новый Описаниетипов("Дата");
	Для каждого Поле ИЗ  RS.Fields Цикл
		Попытка
			Если Поле.Name = "KodNlkLek" Тогда
				ТЗ_СКЛ.Колонки.Добавить(Поле.Name ,ОписаниеЧисло15_0, );
			ИначеЕсли Поле.Name = "PriceID" или Поле.Name = "Rate" Тогда
				ТЗ_СКЛ.Колонки.Добавить(Поле.Name ,ОписаниеЧисло3_0, );
			ИначеЕсли Поле.Name = "Price" или Поле.Name = "PriceDiscount" Тогда
				ТЗ_СКЛ.Колонки.Добавить(Поле.Name ,ОписаниеЧисло15_2, );
			ИначеЕсли Поле.Name = "Price" или Поле.Name = "dt" Тогда
				ТЗ_СКЛ.Колонки.Добавить(Поле.Name ,ОписаниеДата, );
			КонецЕсли; 
		Исключение
			ТЗ_СКЛ.Колонки.Добавить("Поле" + Строка(ТЗ_СКЛ.Колонки.Количество()+1) , , Поле.Name);
		КонецПопытки;
	КонецЦикла;
	
	// Строки
	КолКолонок = RS.Fields.Count;
	Пока RS.Eof()= 0 Цикл 
		НоваяСтрока = ТЗ_СКЛ.Добавить();
		Для Инд = 0 По КолКолонок - 1 Цикл
			НоваяСтрока[RS.Fields(Инд).Name] = RS.Fields(Инд).Value;
		КонецЦикла;
		RS.MoveNext();
	КонецЦикла;
	
	// Запрос к данным
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТЗ_Файл.PriceID = 1
	|				ИЛИ ТЗ_Файл.PriceID = 5
	|				ИЛИ ТЗ_Файл.PriceID = 3
	|				ИЛИ ТЗ_Файл.PriceID = 7
	|				ИЛИ ТЗ_Файл.PriceID = 9
	|			ТОГДА &РегионМосква
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЗ_Файл.PriceID = 2
	|						ИЛИ ТЗ_Файл.PriceID = 4
	|						ИЛИ ТЗ_Файл.PriceID = 6
	|						ИЛИ ТЗ_Файл.PriceID = 8
	|					ТОГДА &РегионСпб
	|				ИНАЧЕ &РегионПустаяСсылка
	|			КОНЕЦ
	|	КОНЕЦ КАК PriceID,
	|	ТЗ_Файл.PriceID КАК PRICEID_,
	|	ТЗ_Файл.KodNlkLek КАК KodNlkLek,
	|	ТЗ_Файл.Price КАК Price,
	|	ТЗ_Файл.RATE КАК RATE,
	|	ТЗ_Файл.PriceDiscount КАК PriceDiscount
	|ПОМЕСТИТЬ ВТ_Файл
	|ИЗ
	|	&ТЗ_Файл КАК ТЗ_Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_Файл.КодДДП КАК КодДДП,
	|	ТЗ_Файл.Код1С КАК Код1С
	|ПОМЕСТИТЬ ВТ_Файл_СвязкиДДП
	|ИЗ
	|	&ТЗ_ФайлСвязкиДДП КАК ТЗ_Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Файл_СвязкиДДП.Код1С КАК Код1С,
	|	ВТ_Файл.PriceID КАК PRICEID,
	|	ВТ_Файл.Price КАК Price,
	|	ВТ_Файл.PRICEID_ КАК PRICEID_,
	|	ВТ_Файл.KodNlkLek КАК KodNlkLek,
	|	ВТ_Файл.RATE КАК RATE,
	|	ВТ_Файл.PriceDiscount КАК PriceDiscount
	|ПОМЕСТИТЬ ВТ_Файл_Код1С
	|ИЗ
	|	ВТ_Файл КАК ВТ_Файл
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Файл_СвязкиДДП КАК ВТ_Файл_СвязкиДДП
	|		ПО ВТ_Файл.KodNlkLek = ВТ_Файл_СвязкиДДП.КодДДП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИА_ЦО_МаркетинговыеЦены.КодТовар КАК КодТовар,
	|	ИА_ЦО_МаркетинговыеЦены.Регион КАК Регион,
	|	ИА_ЦО_МаркетинговыеЦены.ЗначениеСкидки КАК ЗначениеСкидки,
	|	ИА_ЦО_МаркетинговыеЦены.ТипСкидки КАК ТипСкидки,
	|	ИА_ЦО_МаркетинговыеЦены.ТипЗначенияСкидки КАК ТипЗначенияСкидки,
	|	ИА_ЦО_МаркетинговыеЦены.ПризнакСкидки КАК ПризнакСкидки
	|ПОМЕСТИТЬ ВТ_МаркетинговыеЦены
	|ИЗ
	|	РегистрСведений.ИА_ЦО_МаркетинговыеЦены КАК ИА_ЦО_МаркетинговыеЦены
	|ГДЕ
	|	ИА_ЦО_МаркетинговыеЦены.ДатаНачалаДействияСкидки <= &ПериодНачалоДня
	|	И ИА_ЦО_МаркетинговыеЦены.ДатаОкончанияДействияСкидки >= &ПериодНачалоДня
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Файл_Код1С.PRICEID_ КАК PRICEID,
	|	ВТ_Файл_Код1С.KodNlkLek КАК KodNlkLek,
	|	ВТ_Файл_Код1С.Price КАК Price_Old,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_МаркетинговыеЦены.ПризнакСкидки, ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_МаркетинговыеЦены.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипСкидки.Реальная)
	|							ТОГДА ВТ_Файл_Код1С.Price
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Относительная)
	|										ИЛИ ЕСТЬNULL(ВТ_МаркетинговыеЦены.ТипЗначенияСкидки, ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.ПустаяСсылка)
	|									ТОГДА ВТ_Файл_Код1С.PriceDiscount / (1 - ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0) / 100)
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Абсолютная)
	|											ТОГДА ВТ_Файл_Код1С.PriceDiscount + ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0)
	|										ИНАЧЕ ВТ_Файл_Код1С.Price
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_МаркетинговыеЦены.ПризнакСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.СменаРеальнойНаФиктивную)
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Относительная)
	|										ИЛИ ЕСТЬNULL(ВТ_МаркетинговыеЦены.ТипЗначенияСкидки, ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.ПустаяСсылка)
	|									ТОГДА ВТ_Файл_Код1С.PriceDiscount / (1 - ЕСТЬNULL(ВТ_Файл_Код1С.RATE, 0) / 100) / (1 - ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0) / 100)
	|								ИНАЧЕ ВТ_Файл_Код1С.PriceDiscount + ЕСТЬNULL(ВТ_Файл_Код1С.RATE, 0) + ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_МаркетинговыеЦены.ПризнакСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.СменаФиктивнойНаРеальную)
	|								ТОГДА ВТ_Файл_Код1С.PriceDiscount
	|							ИНАЧЕ ВТ_Файл_Код1С.Price
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 1)) КАК Price,
	|	ВТ_Файл_Код1С.RATE КАК RATE_old,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_МаркетинговыеЦены.ЗначениеСкидки
	|	КОНЕЦ КАК RATE,
	|	ВТ_Файл_Код1С.PriceDiscount КАК PriceDiscount_old,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_МаркетинговыеЦены.ПризнакСкидки, ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_МаркетинговыеЦены.ТипСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипСкидки.Реальная)
	|							ТОГДА ВЫБОР
	|									КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Относительная)
	|											ИЛИ ЕСТЬNULL(ВТ_МаркетинговыеЦены.ТипЗначенияСкидки, ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.ПустаяСсылка)
	|										ТОГДА ВТ_Файл_Код1С.Price - ВТ_Файл_Код1С.Price * ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0) / 100
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Абсолютная)
	|												ТОГДА ВТ_Файл_Код1С.Price - ВТ_МаркетинговыеЦены.ЗначениеСкидки
	|											ИНАЧЕ ВТ_Файл_Код1С.PriceDiscount
	|										КОНЕЦ
	|								КОНЕЦ
	|						ИНАЧЕ ВТ_Файл_Код1С.PriceDiscount
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_МаркетинговыеЦены.ПризнакСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.СменаРеальнойНаФиктивную)
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Относительная)
	|									ТОГДА ВТ_Файл_Код1С.PriceDiscount / (1 - ЕСТЬNULL(ВТ_Файл_Код1С.RATE, 0) / 100)
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Абсолютная)
	|											ТОГДА ВТ_Файл_Код1С.PriceDiscount + ЕСТЬNULL(ВТ_Файл_Код1С.RATE, 0)
	|										ИНАЧЕ ВТ_Файл_Код1С.PriceDiscount
	|									КОНЕЦ
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_МаркетинговыеЦены.ПризнакСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ПризнакСкидки.СменаФиктивнойНаРеальную)
	|								ТОГДА ВЫБОР
	|										КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Относительная)
	|											ТОГДА ВТ_Файл_Код1С.Price - ВТ_Файл_Код1С.Price * ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0) / 100
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ВТ_МаркетинговыеЦены.ТипЗначенияСкидки = ЗНАЧЕНИЕ(Перечисление.ИА_ЦО_ТипЗначенияСкидки.Абсолютная)
	|													ТОГДА ВТ_Файл_Код1С.Price - ЕСТЬNULL(ВТ_МаркетинговыеЦены.ЗначениеСкидки, 0)
	|												ИНАЧЕ ВТ_Файл_Код1С.PriceDiscount
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ ВТ_Файл_Код1С.PriceDiscount
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 1)) КАК PriceDiscount
	|ПОМЕСТИТЬ втПочтиГотово
	|ИЗ
	|	ВТ_Файл_Код1С КАК ВТ_Файл_Код1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеЦены КАК ВТ_МаркетинговыеЦены
	|		ПО ВТ_Файл_Код1С.Код1С = ВТ_МаркетинговыеЦены.КодТовар
	|			И ВТ_Файл_Код1С.PRICEID = ВТ_МаркетинговыеЦены.Регион
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПочтиГотово.PRICEID КАК PRICEID,
	|	втПочтиГотово.KodNlkLek КАК KodNlkLek,
	|	втПочтиГотово.Price_Old КАК Price_Old,
	|	втПочтиГотово.Price КАК Price,
	|	втПочтиГотово.RATE_old КАК RATE_old,
	|	втПочтиГотово.RATE КАК RATE,
	|	втПочтиГотово.PriceDiscount_old КАК PriceDiscount_old,
	|	втПочтиГотово.PriceDiscount КАК PriceDiscount
	|ИЗ
	|	втПочтиГотово КАК втПочтиГотово
	|ГДЕ
	|	(втПочтиГотово.PriceDiscount <> втПочтиГотово.PriceDiscount_old
	|			ИЛИ втПочтиГотово.RATE <> втПочтиГотово.RATE_old
	|			ИЛИ втПочтиГотово.Price <> втПочтиГотово.Price_Old)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Файл_СвязкиДДП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Файл_Код1С
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МаркетинговыеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПочтиГотово";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТЗ_Файл", ТЗ_СКЛ);
	Запрос.УстановитьПараметр("ТЗ_ФайлСвязкиДДП", ТЗСвязкаКодов);
	Запрос.УстановитьПараметр("ПериодНачалоДня", НачалоДня(ДатаОтчета));
	
	СпрРегионы = Справочники.ИА_ЦО_Регионы;
	СпрРегионыПустая = СпрРегионы.ПустаяСсылка();
	СпрРегионыМос = СпрРегионы.НайтиПоКоду("000000001");
	СпрРегионыСпб = СпрРегионы.НайтиПоКоду("000000002");
	
	Запрос.УстановитьПараметр("РегионМосква", СпрРегионыМос);
	Запрос.УстановитьПараметр("РегионСпб", СпрРегионыСпб);
	Запрос.УстановитьПараметр("РегионПустаяСсылка", СпрРегионыПустая);
	
	ТЗ_ОбработанныеЦены = Запрос.Выполнить().Выгрузить();
	
	// update 
	Для каждого СтрокаТЗ Из ТЗ_ОбработанныеЦены Цикл
	
		sql = "update retail_price
		| set Rate = "+СтрокаТЗ.RATE+"
		|,Price = "+СтрЗаменить(СтрЗаменить(СтрокаТЗ.Price,",","."),Символы.НПП,"")+"
		|,PriceDiscount = "+СтрЗаменить(СтрЗаменить(СтрокаТЗ.PriceDiscount,",","."),Символы.НПП,"")+"
		|,dt = " + ДатаВЗапрос+"
		|where KodNlkLek = "+СтрЗаменить(СтрокаТЗ.KodNlkLek,Символы.НПП,"")+ " and PriceID = "+СтрокаТЗ.PRICEID;
		Попытка
			Connection.Execute(sql);
		Исключение
			
			RS.Close();
			Connection.Close();
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка update запроса: "+ОписаниеОшибки(),,Истина);
			Возврат;

		КонецПопытки;
		
	КонецЦикла; 
	
	RS.Close();
	Connection.Close();
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Информация обновлена. Количество записей: "+ТЗ_ОбработанныеЦены.Количество());
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитаСтоимостьСборки_РС_Матрица() Экспорт
	
	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("ЗаполнениеРеквизитаСтоимостьСборки_РС_Матрица");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания - ЗаполнениеРеквизитаСтоимостьСборки_РС_Матрица. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	
	Параметры = Новый Структура("КоличествоДнейПлохихПродаж");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров - КоличествоДнейПлохихПродаж. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
	КонецЕсли;
	КоличествоДнейПлохихПродаж = Параметры.КоличествоДнейПлохихПродаж;
	
	Запрос = Новый запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестаХранения.Код КАК Код,
	|	МестаХранения.Ссылка КАК АптекаСсылка
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.РасчетПотребностиSAS = ИСТИНА";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ТекстЗапросаВн =
		"ВЫБРАТЬ
		|	УЗ_РеализацииККМ.ТоварКод КАК ТоварКод,
		|	СУММА(УЗ_РеализацииККМ.Количество / УЗ_РеализацииККМ.К) КАК КоличествоОборот
		|ПОМЕСТИТЬ ВТ_УЗ_РеализацииККМ
		|ИЗ
		|	РегистрНакопления.УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
		|ГДЕ
		|	УЗ_РеализацииККМ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И УЗ_РеализацииККМ.СкладКод = &КодАптеки
		|
		|СГРУППИРОВАТЬ ПО
		|	УЗ_РеализацииККМ.ТоварКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
		|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Ссылка,
		|	АССОРТИМЕНТНЫЙ_ПЛАН.СтоимостьСборки КАК СтоимостьСборки,
		|	Матрица.СтоимостьСборки КАК СтоимостьСборкиМатрица,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УЗ_РеализацииККМ.КоличествоОборот, 0) <= &КоличествоДнейПлохихПродаж
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПлохиеПродажи
		|ПОМЕСТИТЬ ВТ_1
		|ИЗ
		|	РегистрСведений.Матрица КАК Матрица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		|		ПО Матрица.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
		|		ПО Матрица.Товар.Код = УЗ_РеализацииККМ.ТоварКод
		|ГДЕ
		|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
		|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
		|	И АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП = ИСТИНА
		|	И Матрица.Аптека = &АптекаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_1.Код КАК Код,
		|	ВТ_1.СтоимостьСборки КАК СтоимостьСборки,
		|	ВТ_1.СтоимостьСборкиМатрица КАК СтоимостьСборкиМатрица,
		|	ВТ_1.ПлохиеПродажи КАК ПлохиеПродажи,
		|	ВЫБОР
		|		КОГДА ВТ_1.ПлохиеПродажи
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_1.СтоимостьСборки
		|	КОНЕЦ КАК СтоимостьСборкиЗаписать,
		|	ВТ_1.Ссылка КАК Товар
		|ИЗ
		|	ВТ_1 КАК ВТ_1
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_1.ПлохиеПродажи
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_1.СтоимостьСборки
		|		КОНЕЦ <> ВТ_1.СтоимостьСборкиМатрица
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		
		ЗапросВн = Новый Запрос;
		ЗапросВН.Текст = ТекстЗапросаВн;
		ЗапросВн.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата() - 28 * 86400));
		ЗапросВн.УстановитьПараметр("ДатаОкончания", КонецДня((ТекущаяДата())));
		АптекаНомер = Выборка.Код;
		ЗапросВн.УстановитьПараметр("КодАптеки", АптекаНомер);
		ЗапросВн.УстановитьПараметр("АптекаСсылка", Выборка.АптекаСсылка);
		ЗапросВн.УстановитьПараметр("КоличествоДнейПлохихПродаж", КоличествоДнейПлохихПродаж);
		
		ТЗЗапрос = ЗапросВн.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из ТЗЗапрос Цикл
			
			НЗ = РегистрыСведений.Матрица.СоздатьНаборЗаписей();
			НЗ.Отбор.Аптека.Установить(Выборка.АптекаСсылка);
			НЗ.Отбор.Товар.Установить(СтрокаТЗ.Товар);
			НЗ.Прочитать();
			Для каждого СтрокаНЗ Из НЗ Цикл
				СтрокаНЗ.СтоимостьСборки = СтрокаТЗ.СтоимостьСборкиЗаписать	
			КонецЦикла;
			Нз.Записать();
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "РС ""Матрица"" заполнен",,Истина);

	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
	
		ТекстЗапросаВн =
		"ВЫБРАТЬ
		|	УЗ_РеализацииККМ.ТоварКод КАК ТоварКод,
		|	СУММА(УЗ_РеализацииККМ.Количество / УЗ_РеализацииККМ.К) КАК КоличествоОборот
		|ПОМЕСТИТЬ ВТ_УЗ_РеализацииККМ
		|ИЗ
		|	РегистрНакопления.УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
		|ГДЕ
		|	УЗ_РеализацииККМ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И УЗ_РеализацииККМ.СкладКод = &КодАптеки
		|
		|СГРУППИРОВАТЬ ПО
		|	УЗ_РеализацииККМ.ТоварКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АССОРТИМЕНТНЫЙ_ПЛАН.Код КАК Код,
		|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Ссылка,
		|	АССОРТИМЕНТНЫЙ_ПЛАН.СтоимостьСборки КАК СтоимостьСборки,
		|	РазрешенныеТовары.СтоимостьСборки КАК СтоимостьСборкиМатрица,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УЗ_РеализацииККМ.КоличествоОборот, 0) <= &КоличествоДнейПлохихПродаж
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПлохиеПродажи
		|ПОМЕСТИТЬ ВТ_1
		|ИЗ
		|	РегистрСведений.РазрешенныеТовары КАК РазрешенныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		|		ПО РазрешенныеТовары.Товар = АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УЗ_РеализацииККМ КАК УЗ_РеализацииККМ
		|		ПО РазрешенныеТовары.Товар.Код = УЗ_РеализацииККМ.ТоварКод
		|ГДЕ
		|	АССОРТИМЕНТНЫЙ_ПЛАН.ЭтоГруппа = ЛОЖЬ
		|	И АССОРТИМЕНТНЫЙ_ПЛАН.ПометкаУдаления = ЛОЖЬ
		|	И АССОРТИМЕНТНЫЙ_ПЛАН.УчаствуетВАП = ИСТИНА
		|	И РазрешенныеТовары.Аптека = &АптекаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_1.Код КАК Код,
		|	ВТ_1.СтоимостьСборки КАК СтоимостьСборки,
		|	ВТ_1.СтоимостьСборкиМатрица КАК СтоимостьСборкиМатрица,
		|	ВТ_1.ПлохиеПродажи КАК ПлохиеПродажи,
		|	ВЫБОР
		|		КОГДА ВТ_1.ПлохиеПродажи
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_1.СтоимостьСборки
		|	КОНЕЦ КАК СтоимостьСборкиЗаписать,
		|	ВТ_1.Ссылка КАК Товар
		|ИЗ
		|	ВТ_1 КАК ВТ_1
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_1.ПлохиеПродажи
		|				ТОГДА 0
		|			ИНАЧЕ ВТ_1.СтоимостьСборки
		|		КОНЕЦ <> ВТ_1.СтоимостьСборкиМатрица
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		ЗапросВн = Новый Запрос;
		ЗапросВН.Текст = ТекстЗапросаВн;
		ЗапросВн.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата() - 28 * 86400));
		ЗапросВн.УстановитьПараметр("ДатаОкончания", КонецДня((ТекущаяДата())));
		АптекаНомер = Выборка.Код;
		ЗапросВн.УстановитьПараметр("КодАптеки", АптекаНомер);
		ЗапросВн.УстановитьПараметр("АптекаСсылка", Выборка.АптекаСсылка);
		ЗапросВн.УстановитьПараметр("КоличествоДнейПлохихПродаж", КоличествоДнейПлохихПродаж);
		
		ТЗЗапрос = ЗапросВн.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из ТЗЗапрос Цикл
			
			НЗ = РегистрыСведений.РазрешенныеТовары.СоздатьНаборЗаписей();
			НЗ.Отбор.Аптека.Установить(Выборка.АптекаСсылка);
			НЗ.Отбор.Товар.Установить(СтрокаТЗ.Товар);
			НЗ.Прочитать();
			Для каждого СтрокаНЗ Из НЗ Цикл
				СтрокаНЗ.СтоимостьСборки = СтрокаТЗ.СтоимостьСборкиЗаписать	
			КонецЦикла;
			Нз.Записать();
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "РС ""РазрешенныеТовары"" заполнен",,Истина);
	
КонецПроцедуры

Процедура РасчетАвтозаказаИнтернетАптек() Экспорт
	
		РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказаИнтернетАптек");
		
		
		Параметры = Новый Структура("КоличествоДнейПродаж,УвеличениеДнейПотребностиДляКуМакс2ГруппаA,УвеличениеДнейПотребностиДляКуМакс2ГруппаBC,КоэффициентКуМакс2НаПлохихСкоростях,НастройкаПрайсЛистаОриолы");
		Параметры.Вставить("ОдинРасчетВДень");
		
		
		Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
			Возврат;
		КонецЕсли;		
	
		ДатаТочкиОтсчета = ТекущаяДата();
		ТаблицаДатРасчета = Новый ТаблицаЗначений();
		ТаблицаДатРасчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));

		
		к = 28;
		НомерПериода = 5;
		Пока к > 0 Цикл	
			Если к%7 = 0 Тогда
				НомерПериода = НомерПериода - 1;
				Если НомерПериода = 4 Тогда
					КонецЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;			
				ИначеЕсли НомерПериода = 3 Тогда
					НачалоЧетвертыйПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 2 Тогда
					НачалоТретийПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				ИначеЕсли НомерПериода = 1 Тогда
					НачалоВторойПериод = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
				КонецЕсли;			
			КонецЕсли;
			стр = ТаблицаДатРасчета.Добавить();
			стр.Дата = НачалоДня(ДатаТочкиОтсчета) - к*24*60*60;
			к = к - 1;
		КонецЦикла;	
		НачалоПервыйПериод = стр.Дата;	
		

	ЗаводскиеПараметрыТовара = ПолучитьСпайкиИКоробы(Параметры.НастройкаПрайсЛистаОриолы);	
	СписокАптек = Автозаказ.ВернутьСписокАптекДляАвтозаказаИнтернетАптек();
	Для каждого ВыбАптека из СписокАптек Цикл
		
		ПараметрыРасчета = Автозаказ.ПолучитьПараметрыРасчетаАвтозаказаПоАптеке(ВыбАптека);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаA",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаA);
		ПараметрыРасчета.Вставить("УвеличениеДнейПотребностиДляКуМакс2ГруппаBC",Параметры.УвеличениеДнейПотребностиДляКуМакс2ГруппаBC);
		ПараметрыРасчета.Вставить("КоэффициентКуМакс2НаПлохихСкоростях",Параметры.КоэффициентКуМакс2НаПлохихСкоростях);
		
		
		ВыбраннаяАптека = Новый Массив;
		ВыбраннаяАптека.Добавить(ВыбАптека);
		Автозаказ.РасчетABCИнтернетАптек(ВыбраннаяАптека);
		ТаблицаРасчетаСкорости = Автозаказ.ПолучитьТаблицуРасчетаСкоростейПродажИнтернетАптеки(ВыбАптека, ТаблицаДатРасчета,ПараметрыРасчета, Новый Структура("НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод", НачалоПервыйПериод, НачалоВторойПериод, НачалоТретийПериод, НачалоЧетвертыйПериод, КонецЧетвертыйПериод));
		Автозаказ.РассчитатьQminQmaxДляАптеки(ТаблицаРасчетаСкорости, ВыбАптека, ПараметрыРасчета);
		ТаблицаАвтозаказа = Автозаказ.РасчетАвтозаказаОкончательныйИнтернетАптеки(ТаблицаРасчетаСкорости, ВыбАптека,ПараметрыРасчета,Неопределено,ЗаводскиеПараметрыТовара);
		
		МассивНедостоверных = ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("НедостовернаяПозиция",Истина));
		МассивКЗаказуНоль	= ТаблицаАвтозаказа.НайтиСтроки(Новый Структура("Заказать",0));
		СуммаЗаказа			= ТаблицаАвтозаказа.Итог("Сумма");	
		
		ТЗТипыДляЦО = ТаблицаАвтозаказа.Скопировать(,"ТипДляЦО,Сумма");
		ТЗТипыДляЦО.Свернуть("ТипДляЦО","Сумма");
		СуммаЛекарств = 0;
		СуммаПарафарм = 0;
		Для каждого стр из ТЗТипыДляЦО Цикл
			Если стр.ТипДляЦО = Перечисления.ТипыДляЦО.Лексредства Тогда
				СуммаЛекарств = стр.Сумма;
			ИначеЕсли стр.ТипДляЦО = Перечисления.ТипыДляЦО.Парафармация Тогда
				СуммаПарафарм = стр.Сумма;
			КонецЕсли;
		КонецЦикла;	
		
		Запись = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьМенеджерЗаписи(); //СоздатьНаборЗаписей();
		Запись.Период       = ТекущаяДата();
		Запись.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Запись.Склад        = ВыбАптека;
		
		Запись.РасчетЗаказа = Новый ХранилищеЗначения(ТаблицаАвтозаказа, Новый СжатиеДанных(3));
		Запись.КоличествоНедостоверных	= МассивНедостоверных.Количество() ;
		Запись.ОбщееКоличествоКЗаказу	= ТаблицаАвтозаказа.Количество()-МассивКЗаказуНоль.Количество();
		Запись.СуммаЗаказа				= СуммаЗаказа;
		Запись.СуммаВыручки				= 0;
		Запись.ДнейБезЗаказа			= 0;
		Запись.СуммаПоступленийЗаПериод	= 0;			
		Запись.СуммаПродажЗаПериод		= 0;
		Запись.ДатаСозданияЗаписи		= ТекущаяДата();
		Запись.ИдентификаторЗаписи		= Новый УникальныйИдентификатор();
		Запись.РодительЗаписи			= Запись.ИдентификаторЗаписи;
		Запись.НомерТаймСлота			= -1;
		Запись.СуммаЗаказаЛС			= СуммаЛекарств;
		Запись.СуммаЗаказаПФ			= СуммаПарафарм;
		Запись.РасчетПотребностиSAS		= ВыбАптека.РасчетПотребностиSAS;
		
		Попытка
			Запись.Записать();
			Автозаказ.ОбновитьДатуРасчетаКоэффициента(ВыбАптека, "Автозаказ");
		Исключение
			УдалитьАктивностьРасчета(ВыбАптека);
			Возврат;
		КонецПопытки;
		
		УдалитьАктивностьРасчета(ВыбАптека);
	КонецЦикла;
	
КонецПроцедуры


Процедура ВыгрузитьВСлужбу003Спб(РегламентноеЗадание, Справка) Экспорт
	
	КаталогОтправки = КаталогВременныхФайлов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КодыАптек.Аптека.Код КАК СкладКод
	|ПОМЕСТИТЬ ТЗАптек
	|ИЗ
	|	Справочник.СправочныеСлужбы.Аптеки КАК КодыАптек
	|ГДЕ
	|	КодыАптек.Ссылка = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АП.Код КАК КодТовара,
	|	АП.Наименование КАК НаименованиеТовара
	|ПОМЕСТИТЬ ТЗТоваров
	|ИЗ
	|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	|ГДЕ
	|	АП.ПометкаУдаления = ЛОЖЬ
	|	И АП.ПККН = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АП.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегПартии.ТоварКод КАК ТоварКод,
	|	РегПартии.СкладКод КАК СкладКод,
	|	РегПартии.ПартияКод КАК ПартияКод,
	|	ВЫРАЗИТЬ(РегПартии.КоличествоОстаток / Партии.К КАК ЧИСЛО(15, 2)) КАК Остаток,
	|	Партии.СрокГодности КАК СрокГодности,
	|	ЕСТЬNULL(РЦП.Цена, ЕСТЬNULL(РЦ.Цена, 0)) КАК Цена
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.УЗ_Партии.Остатки(
	|			,
	|			СкладКод В
	|				(ВЫБРАТЬ
	|					вт.СкладКод
	|				ИЗ
	|					ТЗАптек КАК вт)) КАК РегПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
	|		ПО (Партии.Код = РегПартии.ПартияКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦены КАК РЦ
	|		ПО РегПартии.ТоварКод = РЦ.ТоварКод
	|			И (РЦ.АптекаКод = РегПартии.СкладКод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РозничныеЦеныПоПартиям КАК РЦП
	|		ПО РегПартии.ПартияКод = РЦП.ПартияКод
	|			И (РЦП.АптекаКод = РегПартии.СкладКод)
	|ГДЕ
	|	РегПартии.КоличествоОстаток >= 1
	|	И РегПартии.СуммаЗакупБезНДСОстаток > 0
	|	И НЕ Партии.ТипПартии = ""I""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегПартии.ТоварКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.СкладКод КАК КодАптеки,
	|	Остатки.ТоварКод КАК КодТовара,
	|	ТЗТоваров.НаименованиеТовара КАК НаименованиеТовара,
	|	Остатки.Цена КАК Цена,
	|	Остатки.Остаток КАК Остаток,
	|	Остатки.СрокГодности КАК СрокГодности,
	|	Остатки.ПартияКод КАК ПартияКод
	|ИЗ
	|	Остатки КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗТоваров КАК ТЗТоваров
	|		ПО Остатки.ТоварКод = ТЗТоваров.КодТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАптеки,
	|	КодТовара
	|ИТОГИ ПО
	|	КодАптеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗАптек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Остатки";           
	
	Запрос.УстановитьПараметр("Владелец", Справка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, 
		Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустой набор записей.");
		Возврат;
		
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	
	ВыборкаКодАптеки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКодАптеки.Следующий() Цикл
		
		
		ИмяФайла = КаталогОтправки + Формат(ВыборкаКодАптеки.КодАптеки, "ЧГ=0") + ".csv";
		Текст = Новый ЗаписьТекста(ИмяФайла, "windows-1251");

		Выборка = ВыборкаКодАптеки.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивПолей = Новый Массив;
			МассивПолей.Добавить(Выборка.КодТовара);
			МассивПолей.Добавить(Выборка.НаименованиеТовара);
			МассивПолей.Добавить(Выборка.Цена);
			МассивПолей.Добавить(Выборка.Остаток);
			МассивПолей.Добавить(Формат(Выборка.СрокГодности,"ДФ=yyyyMMdd"));
			МассивПолей.Добавить(Выборка.ПартияКод);
			
			ТекСтрока = ОМ_ТСО.ПолучитьСтрокуДляCSV(МассивПолей, ";");			
			Текст.ЗаписатьСтроку(ТекСтрока);
			 			
		КонецЦикла;
		
		Текст.Закрыть();
		
		ФайлОбъект = Новый Файл(ИмяФайла);
		Попытка
			ОМ17_ЗапаковатьФайлИСкопироватьЕгоВПапку (ИмяФайла,ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP");
			
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки() + " файл не запакован!",СтатусСообщения.Важное);
			#КонецЕсли
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка АптекиСу: " + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;		
		           
		МассивФайлов.Добавить(Новый Файл(ФайлОбъект.Путь+ФайлОбъект.ИмяБезРасширения + ".ZIP"));

	КонецЦикла;
	        	
	 	
	// Выкладываем на FTP
	Если Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FTP Тогда
		Попытка
			FTP = Новый FTPСоединение(Справка.ФТПСервер, Число(Справка.ФТППорт) , Справка.ФТПЛогин, Справка.ФТППароль,, Истина,,Неопределено,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
			FTP.УстановитьТекущийКаталог(Справка.ФТПКаталог);
			
			Для Каждого Файл Из МассивФайлов Цикл
				FTP.Записать(Файл.ПолноеИмя, Файл.Имя);				
			КонецЦикла;		
			
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка 003Спб: данные выгружены" );
			  			
		Исключение
			МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Справка 003Спб: " + ОписаниеОшибки());
			
		КонецПопытки;
		
		FTP = Неопределено;
		
	ИначеЕсли Справка.СпособОбмена = Перечисления.ВидТрансортаСообщений.FILE Тогда
		КаталогВыгрузки = Справка.КаталогВыгрузки + ?(Прав(Справка.КаталогВыгрузки, 1) = "\", "", "\");  
		КаталогВыгрузки = ОМ_ТСО.ПолучитьИмяФайлаНаФТП(КаталогВыгрузки);
		
		Для Каждого Файл Из МассивФайлов Цикл
			КопироватьФайл(Файл.ПолноеИмя, КаталогВыгрузки + Файл.Имя);
		КонецЦикла;
		
		МодульРегламентныхЗаданий.ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Справка 003Спб: данные выгружены" );
		
	КонецЕсли;
	
	
	// Удаляем временные файлы
	Попытка
		Для Каждого Файл Из МассивФайлов Цикл
			УдалитьФайлы(Файл.ПолноеИмя);				
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура РассылкаНезакрытыеСмены() Экспорт
	
	РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РассылкаНезакрытыеСмены"); 
	Если НЕ РегламентноеЗадание.Пустая() Тогда
		Попытка
			Параметры = Новый Структура("АдресаДляРассылки"); 
			ДопАдресаРассылки =  Новый СписокЗначений;
			Если ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
				
				тДопАдресаРассылки = Параметры.АдресаДляРассылки;
				
				СписокДопАдресаРассылки = СтрЗаменить(тДопАдресаРассылки,";",Символы.ПС);
				
				Для К = 1 по СтрЧислоСтрок(СписокДопАдресаРассылки) Цикл
					ТекПочта = СтрПолучитьСтроку(СписокДопАдресаРассылки,К);
					Если НЕ ПустаяСтрока(ТекПочта) Тогда
						ДопАдресаРассылки.Добавить(СокрЛП(ТекПочта));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если (ДопАдресаРассылки.Количество() = 0) Тогда
				ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Не заданы дополнительные адреса рассылки.");
			КонецЕсли;
			ТекСостояние = ВнешниеИсточникиДанных.ЦТБ.ПолучитьСостояние();
			
			Если ТекСостояние = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
				ВнешниеИсточникиДанных.ЦТБ.УстановитьСоединение();
				ТекСостояние = ВнешниеИсточникиДанных.ЦТБ.ПолучитьСостояние();
				Если НЕ ТекСостояние = СостояниеВнешнегоИсточникаДанных.Подключен Тогда
					ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Ошибка подключения к внешнему источнику данных ЦТБ");
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			ДатаОтчета = ТекущаяДата();
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			ЗапросТемп = Новый Запрос("ВЫБРАТЬ
			|	apt_retail_repl_repl_fo_inactive_stat.id_instance КАК id_instance
			|ИЗ
			|	ВнешнийИсточникДанных.ЦТБ.Таблица.apt_retail_repl_repl_fo_inactive_stat КАК apt_retail_repl_repl_fo_inactive_stat");
			Результат = ЗапросТемп.Выполнить();
			
			Запрос.Текст = "
			|ВЫБРАТЬ * ПОМЕСТИТЬ fo_inactive_stat 
			|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УЗ_СменаККМ.Дата КАК Дата,
			|	УЗ_СменаККМ.Номер КАК Номер,
			|	МестаХранения.Ссылка КАК Аптека,
			|	УЗ_СменаККМ.СкладКод КАК СкладКод,
			|	УЗ_СменаККМ.ДатаСмены КАК ДатаСмены,
			|	УЗ_СменаККМ.ДатаОткрытия КАК ДатаОткрытия,
			|	УЗ_СменаККМ.НомерККМ КАК НомерККМ,
			|	УЗ_СменаККМ.НомерСмены КАК НомерСмены,
			|	Выборка.ПочтаДиректораБЕ КАК ПочтаДиректораБЕ,
			|	Выборка.ПочтаУправляющие КАК ПочтаУправляющего,
			|	fo_inactive_stat.id_instance КАК id_instance
			|ИЗ
			|	Документ.УЗ_СменаККМ КАК УЗ_СменаККМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			МестаХранения.Код КАК СкладКод,
			|			ДиректораБЕ.АдресЭлектроннойПочты КАК ПочтаДиректораБЕ,
			|			Управляющие.АдресЭлектроннойПочты КАК ПочтаУправляющие
			|		ИЗ
			|			Справочник.МестаХранения КАК МестаХранения
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК ДиректораБЕ
			|				ПО (ДиректораБЕ.Ссылка = МестаХранения.Ссылка)
			|					И (ДиректораБЕ.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.ДиректорБизнесЕдиницы))
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения.Заведующие КАК Управляющие
			|				ПО (Управляющие.Ссылка = МестаХранения.Ссылка)
			|					И (Управляющие.Должность = ЗНАЧЕНИЕ(Перечисление.ДолжностиРуководителейАптек.УправляющийАптекой))) КАК Выборка
			|		ПО (Выборка.СкладКод = УЗ_СменаККМ.СкладКод)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения ПО  УЗ_СменаККМ.СкладКод = МестаХранения.Код
			|		ЛЕВОЕ СОЕДИНЕНИЕ fo_inactive_stat КАК fo_inactive_stat ПО МестаХранения.Код = fo_inactive_stat.id_instance 
			|								
			|ГДЕ
			|	УЗ_СменаККМ.ДатаСмены < &ТекДата
			|	И УЗ_СменаККМ.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И УЗ_СменаККМ.ВАрхив = ЛОЖЬ
			|	И УЗ_СменаККМ.Корректная = ЛОЖЬ
			|   И МестаХранения.СтатусАптеки  = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р) 
			|   И fo_inactive_stat.id_instance ЕСТЬ NULL
			|   И УЗ_СменаККМ.СуммаВыручки > 0 //показывать только незакрытые смены где есть выручка
			|УПОРЯДОЧИТЬ ПО
			|	УЗ_СменаККМ.СкладКод
			|ИТОГИ ПО
			|	ПочтаДиректораБЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ fo_inactive_stat
			|";
			//fo_inactive_stat - это те аптеки которые не выходилина связь более 30 минут
			//Надо: Обмен между аптекой и 1С Склад отсутствует менее 30 минут
			
			Запрос.УстановитьПараметр("ТекДата",НачалоДня(ДатаОтчета));
			Запрос.УстановитьПараметр("ВнешнийИсточник",Результат);
			
			Рез = Запрос.Выполнить();
			
			Запрос.МенеджерВременныхТаблиц.Закрыть();
			
			ВнешниеИсточникиДанных.ЦТБ.РазорватьСоединение();
			
			Если НЕ Рез.Пустой() Тогда
				
				ТемаПисьма = "1С Склад Отчет по незакрытым сменам ККМ " + ТекущаяДата();
				ШапкаПисьма = " Склад код		Дата смены		Дата открытия смены		Номер ККМ		Номер смены";
				ТекстПисьмаОбщ = "";
				Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					ВыборкаДетали = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					ТекстПисьмаДиректораБЕ = "";
					спПочтаУправляющего = Новый СписокЗначений;
					ПочтаДиректораБЕ = СокрЛП(Выборка.ПочтаДиректораБЕ);
					Если НЕ ПустаяСтрока(ПочтаДиректораБЕ) Тогда
						спПочтаУправляющего.Добавить(ПочтаДиректораБЕ);
					КонецЕсли;
					Пока ВыборкаДетали.Следующий() Цикл 
						ПочтаДиректораБЕ = СокрЛП(ВыборкаДетали.ПочтаДиректораБЕ);
						ПочтаУправляющего = СокрЛП(ВыборкаДетали.ПочтаУправляющего);
						Если (НЕ ПустаяСтрока(ПочтаУправляющего)) и (спПочтаУправляющего.НайтиПоЗначению(ПочтаУправляющего) = Неопределено) Тогда
							спПочтаУправляющего.Добавить(ПочтаУправляющего);
						КонецЕсли;
						СкладКод = Символы.Таб + СокрЛП(Формат(ВыборкаДетали.СкладКод,"ЧЦ=10; ЧГ=0"));
						ДатаСмены = Символы.Таб + СокрЛП(Формат(ВыборкаДетали.ДатаСмены,"ДФ=dd.MM.yyyy"));
						ДатаОткрытия = Символы.Таб + СокрЛП(ВыборкаДетали.ДатаОткрытия);
						НомерККМ = Символы.Таб + СокрЛП(ВыборкаДетали.НомерККМ);
						НомерСмены = Символы.Таб + СокрЛП(ВыборкаДетали.НомерСмены);
						
						СтпПисьма = "
						|" + СкладКод + "	" + ДатаСмены + "	"+ ДатаОткрытия + "	"+ НомерККМ + "	"+ НомерСмены + "	";
						
						ТекстПисьмаДиректораБЕ = ТекстПисьмаДиректораБЕ + СтпПисьма;
						ТекстПисьмаОбщ = ТекстПисьмаОбщ + СтпПисьма;
					КонецЦикла; 
					Если НЕ ПустаяСтрока(ТекстПисьмаДиректораБЕ) Тогда
						МПочтец = Обработки.Почтарь;
						Почтец = МПочтец.Создать();
						Почтец.Рассылка.Очистить();
						Почтец.Автоотправка = Истина;
						Почтец.Рассылка.ЗагрузитьЗначения(спПочтаУправляющего.ВыгрузитьЗначения());
						Почтец.Тема = ТемаПисьма;
						Почтец.ТекстПисьма = ШапкаПисьма + ТекстПисьмаДиректораБЕ;
						
						Почтец.Функция_Послать();
						
						Почтец = Неопределено;
					КонецЕсли;	
				КонецЦикла;
				Если (НЕ ПустаяСтрока(ТекстПисьмаОбщ)) и (ДопАдресаРассылки.Количество() > 0) Тогда
					МПочтец = Обработки.Почтарь;
					Почтец = МПочтец.Создать();
					Почтец.Рассылка.Очистить();
					Почтец.Автоотправка = Истина;
					спПочтаУправляющего = ДопАдресаРассылки.Скопировать();
					Почтец.Рассылка.ЗагрузитьЗначения(спПочтаУправляющего.ВыгрузитьЗначения());
					Почтец.Тема = ТемаПисьма;
					Почтец.ТекстПисьма = ШапкаПисьма + ТекстПисьмаОбщ;
					
					Почтец.Функция_Послать();
					
					Почтец = Неопределено;
				КонецЕсли;	
				
			Иначе
				ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Запрос вернул пустую выборку");
			КонецЕсли;
		Исключение
			ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Ошибка, "Рассылка незакрытые смены: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;

	КонецЕсли;		
	
КонецПроцедуры

Процедура ВыгрузкаСпрАпВАстраЗенека() Экспорт
	
	СпрРЗ = Справочники.РегламентныеЗадания;
	РегламентноеЗадание = СпрРЗ.НайтиПоКоду("ВыгрузкаАптекВАстраЗенека");
	Если РегламентноеЗадание = Неопределено Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения регламентированного задания. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;	
		
	КонецЕсли; 
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Задание начало выполнения",,);
	
	Параметры = Новый Структура("CHAINCODE, Активность,ПутьХраненияФайлаСервер,ПутьЗапускаПриложения");
	Если НЕ МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
		
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка получения параметров. Выполнение задания не может быть продолжено.",,Истина);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Параметры.Активность Тогда
	
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Регламентное задание не активно. Выполнение задания прекращено.",,Истина);
		Возврат;	
	
	КонецЕсли;
	
	// Выгружаем работающие аптеки
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.Код КАК Код,
	|	МестаХранения.Фирма.ИНН КАК ФирмаИНН,
	|	МестаХранения.Фирма.Наименование КАК ФирмаНаименование,
	|	МестаХранения.НомерАптеки КАК НомерАптеки,
	|	МестаХранения.Наименование КАК Наименование,
	|	МестаХранения.Город.Наименование КАК ГородНаименование,
	|	МестаХранения.НаименованиеДляЧеков КАК НаименованиеДляЧеков,
	|	МестаХранения.РежимРаботы.Наименование КАК РежимРаботыНаименование,
	|	МестаХранения.СубъектРФ.Наименование КАК СубъектРФНаименование
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоАптек
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаХранения.Код КАК Код,
	|	УЗ_СменаККМ.НомерККМ КАК НомерККМ
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЗ_СменаККМ КАК УЗ_СменаККМ
	|		ПО МестаХранения.Код = УЗ_СменаККМ.СкладКод
	|ГДЕ
	|	МестаХранения.ЭтоГруппа = ЛОЖЬ
	|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
	|	И МестаХранения.СтатусАптеки = ЗНАЧЕНИЕ(Перечисление.СтатусыАптеки.Р)
	|	И УЗ_СменаККМ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка1 = МассивРезультатов[0].Выбрать(); 
	Выборка2 = МассивРезультатов[1].Выбрать();
	Выборка3 = МассивРезультатов[2].Выбрать();
	
	ТЗ = МассивРезультатов[0].Выгрузить();
	Выборка2.Следующий();
	Если Выборка2.КоличествоАптек = 0 Тогда
	
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Количество выгруженных аптек 0. Выгрузка прервана",,Истина);
		Возврат
	
	КонецЕсли;
	ТЗ_Терминал = МассивРезультатов[2].Выгрузить();
	
	КолвоАптекВыгружено = Выборка2.КоличествоАптек;
	
	Если ТЗ.Количество() = 0 Тогда
	
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Количество выгруженных аптек 0. Выгрузка прервана",,Истина);
		Возврат
	
	КонецЕсли; 
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XML");
	ЗаписьXML = Новый ЗаписьТекста(ИмяФайла,"utf-8");
	ЗаписьXML.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""utf-8""?>");   //WINDOWS-1251
	ЗаписьXML.ЗаписатьСтроку("<PHARMACIES>");
	Если Параметры.CHAINCODE = "" Тогда
		ЗаписьXML.ЗаписатьСтроку("<CHAINCODE></CHAINCODE>");
	Иначе	
		ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "CHAINCODE", Параметры.CHAINCODE);
	КонецЕсли;
	ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "COUNT", Формат(КолвоАптекВыгружено,"ЧГ="));
	
	Для каждого СтрокаТЗ Из ТЗ Цикл
	
		ЗаписьXML.ЗаписатьСтроку("<PHARMACY>");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "CODE",		Формат(СтрокаТЗ.Код,"ЧГ="));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "INN",			СтрокаТЗ.ФирмаИНН);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "LEGALENTITY",	СтрокаТЗ.ФирмаНаименование);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "NUM",			Формат(СтрокаТЗ.НомерАптеки,"ЧГ="));
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "NAME",		СтрокаТЗ.Наименование);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "CITY",		СтрокаТЗ.ГородНаименование);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "REGION",		СтрокаТЗ.СубъектРФНаименование);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "ADDRESS",		СтрокаТЗ.НаименованиеДляЧеков);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "CONTACTPERSON",	"");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "PHONES",	"");
			//ЗаписьXML.ЗаписатьСтроку("<CONTACTPERSON></CONTACTPERSON>");
			//ЗаписьXML.ЗаписатьСтроку("<PHONES></PHONES>");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "WORKTIME",	СтрокаТЗ.РежимРаботыНаименование);
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "IS_ACTUAL",	"Y");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "WORK_MODE",	"TAKE");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "DESCRIPTION",	"");
			ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "MODE",		"ONLINE");
			ЗаписьXML.ЗаписатьСтроку("<POSES>");
			    ЗаписьXML.ЗаписатьСтроку("<POS>");
				ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "CODE",		Формат(СтрокаТЗ.Код,"ЧГ="));
				ЗаписьXML.ЗаписатьСтроку("</POS>");
				СтруктураОтбора = Новый Структура("Код",СтрокаТЗ.Код);
				НайденныеСтроки = ТЗ_Терминал.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 0  Тогда
					
					Для каждого СтрокаТерминала Из НайденныеСтроки Цикл
					
						ЗаписьXML.ЗаписатьСтроку("<POS>");
						ЗаписатьЭлементXMLЧерезЗапись(ЗаписьXML, "CODE",		СтрокаТерминала.НомерККМ);
						ЗаписьXML.ЗаписатьСтроку("</POS>");
					
					КонецЦикла; 
				
				КонецЕсли; 
			ЗаписьXML.ЗаписатьСтроку("</POSES>");
		ЗаписьXML.ЗаписатьСтроку("</PHARMACY>");
	
	КонецЦикла; 
	
	ЗаписьXML.ЗаписатьСтроку("</PHARMACIES>");
	ЗаписьXML.Закрыть();

	ТекДень	= Формат(День(ТекущаяДата()),"ЧЦ=2; ЧВН="); 
	ТекМес	= Формат(Месяц(ТекущаяДата()),"ЧЦ=2; ЧВН=");
	ТекГод	= Формат(Год(ТекущаяДата()),"ЧГ=");
	
	ПутьЗаписиФайла			= Параметры.ПутьХраненияФайлаСервер;
	ПутьЗапускаПриложения	= Параметры.ПутьЗапускаПриложения;
	
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ТипПлатформы = ТипПлатформы.Linux_x86 Или Инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Слэш = "/";
	Иначе
		Слэш = "\";
	КонецЕсли;
	
	Попытка
		ПереместитьФайл(ИмяФайла,СокрЛП(ПутьЗаписиФайла+Слэш+"AZ_PL_"+Строка(ТекДень)+Строка(ТекМес)+Строка(ТекГод)+".xml"));
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
	
	Попытка
		ЗапуститьПриложение(ПутьЗапускаПриложения);
	Исключение
		ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Ошибка при выполнении обработки: " + ОписаниеОшибки(),,Истина);
	КонецПопытки;
	
	ДобавитьЗаписьВЛог(РегламентноеЗадание, Перечисления.ТипыЗаписейЛога.Информация, "Задание выполнено",,);
	
КонецПроцедуры
