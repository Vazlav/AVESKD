
Функция ПроверитьСоответствиеПолей(СписокПолей,ДБФ)
	
	СтрокаПолей = "";
	
	Для каждого СтрПоле из СписокПолей Цикл
		Если ДБФ.поля.Найти(СтрПоле.Значение) = Неопределено Тогда
			СтрокаПолей = СтрокаПолей + "," + СтрПоле.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаПолей;
	
КонецФункции

Функция НайтиАптекуПоВнешнемуКоду(ВнешнийКодАптеки,Поставщик)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрактыИАптеки.Аптека
	               |ИЗ
	               |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	               |ГДЕ
	               |	КонтрактыИАптеки.КодАптекиВнешн = &КодАптекиВнешн
	               |	И КонтрактыИАптеки.Владелец.Владелец = &Поставщик";
	Запрос.УстановитьПараметр("КодАптекиВнешн",ВнешнийКодАптеки);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Аптека;
	КонецЕсли;
	
	
	
КонецФункции

Функция ПолучитьШаблонАптеки(Аптека)
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПараметрыРасчетаАвтозаказаДляАптек.ШаблонМатрицы
		|ИЗ
		|	РегистрСведений.ПараметрыРасчетаАвтозаказаДляАптек КАК ПараметрыРасчетаАвтозаказаДляАптек
		|ГДЕ
		|	ПараметрыРасчетаАвтозаказаДляАптек.Аптека = &Аптека";
		
		Запрос.УстановитьПараметр("Аптека",Аптека);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			ШаблонМатрицы = Справочники.ШаблоныМатриц.НайтиПоРеквизиту("ШаблонПоУмолчанию",Истина);
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			ШаблонМатрицы = Выборка.ШаблонМатрицы;
		КонецЕсли;
		
		Возврат ШаблонМатрицы;
		
	
КонецФункции

Процедура ПометитьПрайсНаУдаление(КодПрайсЛиста)
	
			МЗ = РегистрыСведений.ПрайсЛистыНаУдаление.СоздатьМенеджерЗаписи();
			МЗ.КодПрайсЛиста = КодПрайсЛиста;
			МЗ.Прочитать();
			Если НЕ МЗ.Выбран() Тогда
				МЗ.КодПрайсЛиста = КодПрайсЛиста;
				МЗ.ДатаУдаления = ТекущаяДата() + 5*60;
			КонецЕсли;
			МЗ.Записать();	
				
КонецПроцедуры

Процедура УдалитьСтарыеПрайсы()
	
	ТХТ = "ВЫБРАТЬ
	      |	ПрайсЛистыНаУдаление.КодПрайсЛиста
	      |ИЗ
	      |	РегистрСведений.ПрайсЛистыНаУдаление КАК ПрайсЛистыНаУдаление
	      |ГДЕ
	      |	ПрайсЛистыНаУдаление.КодПрайсЛиста > 0
	      |	И ПрайсЛистыНаУдаление.ДатаУдаления <= &ДатаДляУдаления";
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("ДатаДляУдаления",ТекущаяДата());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого стр из ТЗ Цикл
		НачатьТранзакцию();
			НаборЗаписей = РегистрыСведений.ПрайсЛисты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КодПрайсЛиста.Установить(стр.КодПрайсЛиста);
			НаборЗаписей.Записать();
			
			МЗ = РегистрыСведений.ПрайсЛистыНаУдаление.СоздатьМенеджерЗаписи();
			МЗ.КодПрайсЛиста = стр.КодПрайсЛиста;
			МЗ.Прочитать();
			МЗ.Удалить();
		ЗафиксироватьТранзакцию();	
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьКодПрайсЛиста()
	
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Счетчики");
			БлокировкаМатрицы.УстановитьЗначение("Счетчик","Прайсы");
			БлокировкаМатрицы.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();	

			МЗ = РегистрыСведений.Счетчики.СоздатьМенеджерЗаписи();
			МЗ.Счетчик = "Прайсы";
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.Значение = МЗ.Значение + 1;	
			Иначе
				МЗ.Счетчик = "Прайсы";
				МЗ.Значение = 1;
			КонецЕсли;
			МЗ.Записать();
			ЗафиксироватьТранзакцию();
			Возврат МЗ.Значение;
		Исключение
			ОтменитьТранзакцию();
			Возврат -1;
		КонецПопытки;
		
	
	
КонецФункции

Функция ЗагрузитьПрайсЛистПоставщика(ПоОбъекту = Неопределено, ПерезагрузитьСуществующиеПрайсы = Ложь) Экспорт
	
	Если ПоОбъекту = Неопределено Тогда
		ДопУсловие = "";
	ИначеЕсли ТипЗнч(ПоОбъекту) = Тип("СправочникСсылка.Поставщики") Тогда
		ДопУсловие = " И  НастройкиОбмена.Владелец = &ПоОбъекту";
	ИначеЕсли ТипЗнч(ПоОбъекту) = Тип("СправочникСсылка.НастройкиОбмена") Тогда
		ДопУсловие = " И  НастройкиОбмена.Ссылка = &ПоОбъекту";
	КонецЕсли;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
	      |	НастройкиОбмена.FILEКаталогОбмена КАК КаталогЗагрузки,
	      |	НастройкиОбмена.НастройкаОбмена,
	      |	НастройкиОбмена.FILEМаска КАК Маска,
	      |	НастройкиОбмена.Кодировка,
	      |	НастройкиОбмена.НастройкаОбмена.КоэффициентЦеныНаБазовыйПрайсПоставщика КАК КоэффициентНаБазовыйПрайс,
	      |	ЕСТЬNULL(КаталогПрайсЛистов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрайсЛиста,
	      |	НастройкиОбмена.НастройкаОбмена.КодПоставщика КАК КодПоставщика,
	      |	ВЫБОР
	      |		КОГДА НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок = ЗНАЧЕНИЕ(справочник.Поставщики.ПустаяСсылка)
	      |			ТОГДА НастройкиОбмена.НастройкаОбмена.Владелец
	      |		ИНАЧЕ НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок
	      |	КОНЕЦ КАК Поставщиксвязки
	      |ИЗ
	      |	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФорматаОбмена КАК НастройкиФорматаОбмена
	      |		ПО НастройкиОбмена.НастройкаОбмена = НастройкиФорматаОбмена.НастройкаОбмена
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	      |		ПО НастройкиОбмена.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	      |ГДЕ
	      |	НастройкиОбмена.УзелОбмена = ""Прайс""
	      |	И НастройкиФорматаОбмена.УзелОбмена = ""Прайс""
	      | " + ДопУсловие + "
	      |УПОРЯДОЧИТЬ ПО
	      |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("ПоОбъекту",ПоОбъекту);
	ТЗНастроек = Запрос.Выполнить().Выгрузить();
	
	
	ТЗпроблем = Новый ТаблицаЗначений;
	ТЗпроблем.Колонки.Добавить("Поставщик");
	ТЗпроблем.Колонки.Добавить("НастройкаОбмена");
	ТЗпроблем.Колонки.Добавить("Проблема");
	Колво = ТЗНастроек.Количество();
	ы=0;
	Для каждого стр из ТЗНастроек Цикл
		ы=ы+1;
		
		#Если Клиент Тогда
			Состояние(""+ы+" из " + КолВо);
			ОбработкаПрерыванияПользователя();	
		#КонецЕсли
		МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
		МЗ.НастройкаОбмена = стр.НастройкаОбмена;
		МЗ.УзелОбмена = "Прайс";
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
			СтруктураПолей = Новый Структура;
			СписокПолей = Новый СписокЗначений;
			Для каждого поле из ТаблицаПолей Цикл
				СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
				СписокПолей.Добавить(поле.ИмяПоляВФайле);
			КонецЦикла;
			
			КаталогЗагрузки = СокрЛП(стр.КаталогЗагрузки);
			Маска			= СокрЛП(стр.Маска);
			
			НайденныеФайлы  = НайтиФайлы(КаталогЗагрузки,Маска);
			КолВОФайлов = НайденныеФайлы.Количество();
			
			Если КолВОФайлов = 0 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Нет файла прайс-листа";
				Продолжить;
			КонецЕсли;
			
			Если КолВОФайлов > 1 Тогда
				
				ТЗВремФайлов = Новый ТаблицаЗначений;
				ТЗВремФайлов.Колонки.Добавить("ИндексМассива");
				ТЗВремФайлов.Колонки.Добавить("ДатаФайла");
				ИндексМассива = 0;
				Для каждого ф из НайденныеФайлы Цикл
					Новаястрока = ТЗВремФайлов.Добавить();
					НоваяСтрока.ИндексМассива = ИндексМассива;
					НоваяСтрока.ДатаФайла = ф.ПолучитьВремяИзменения();
					ИндексМассива = ИндексМассива + 1;
				КонецЦикла;
				ТЗВремФайлов.Сортировать("ДатаФайла Убыв");
				ИндексМассива = ТЗВремФайлов.Получить(0).ИндексМассива;
				
				ФайлОбъект = НайденныеФайлы.Получить(ИндексМассива);	
				ТЗВремФайлов = Неопределено;
				//Сообщить(""+стр.Поставщик + "  " + ФайлОбъект.ПолноеИмя);
			Иначе
				ФайлОбъект = НайденныеФайлы.Получить(0);
			КонецЕсли;
			
			Если ФайлОбъект.Размер() = 0 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Файла прайс-листа имеет нулевой размер";
				Продолжить;
			КонецЕсли;
			
			
			
			ДатаФайла = ФайлОбъект.ПолучитьВремяИзменения();
			
			Если НЕ ПерезагрузитьСуществующиеПрайсы Тогда
				Если стр.ДатаПрайсЛиста >= ДатаФайла Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ФайлЗагрузки = ФайлОбъект.ПолноеИмя;
			
			ЭтоПрайсДБФ = Найти(НРег(Маска),".dbf");
			Если ЭтоПрайсДБФ = 0 Тогда
				Если Найти(НРег(Маска),".sst") = 1 Тогда
					НовыйФайл = ОМ21_ЗаказыПоставщикам.ОМ21_ПреобразоватьТекстВДБФ(стр.Поставщик,ФайлЗагрузки);
					Если НовыйФайл = "" Тогда
						НоваяПроблема = ТЗпроблем.Добавить();
						НоваяПроблема.Поставщик = стр.Поставщик;
						НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
						НоваяПроблема.Проблема = "Не удалось преобразовать прайс в DBF: " + ФайлЗагрузки + "  >> " + стр.Поставщик;						
						Продолжить;
					Иначе
						ФайлЗагрузки = НовыйФайл;
					КонецЕсли;
				Иначе
					//СообщениеОбОшибке = "Тип прайса не DBF: " + ФайлЗагрузки + "  >> " + Поставщик;
					//Возврат Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			//Проверка на случай, когда поставщик еще файл не до конца выгрузил на сервер
			ОК = Ложь;
			Для к=0 по 5 Цикл
				Попытка
					ПереместитьФайл(ФайлЗагрузки,ФайлЗагрузки);
					ОК = Истина;
					Прервать;
				Исключение
					ОбщегоНазначения.Задержка(2);
				КонецПопытки;
			КонецЦикла;		
			
			Если ОК = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			//Промерим на длину 8 символов
			ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
			Длина = СтрДлина(ФайлОбъектНовый.Имя);
			ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
			
			Если Длина > 12 Тогда
				Уник = Новый УникальныйИдентификатор;
				Уник = Прав(Уник,8);
				НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
				Попытка
					КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
				Исключение
					Продолжить;
				КонецПопытки;
			Иначе
				НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
			КонецЕсли;	
			
			
			ДБФ= Новый  XBase;
			
			Попытка
				ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
			Исключение
				//СообщениеОбОшибке = "Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ";	
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! "	;	

				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
			
			Если СокрЛП(стр.Кодировка) = "OEM" или ПустаяСтрока(стр.Кодировка) Тогда
				ДБФ.Кодировка = КодировкаXBase.OEM;
			Иначе
				ДБФ.Кодировка = КодировкаXBase.ANSI;
			КонецЕсли;
			
			//Проверим файл прайса на наличие необходимых полей по списку
			Если ОМ20_Чернов.DBF_НаличиеПолей(ДБФ,СписокПолей,1) = Ложь Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не прошла проверка на наличие полей в прайсе поставщика " + стр.Поставщик;	
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			//Скопируем весь файл в таблицу значений
			ТЗ = Новый ТаблицаЗначений;
			
			Если ОМ20_Чернов.DBF_СкопироватьСтруктуруИДанныеВТЗ(ДБФ, ТЗ, СписокПолей,,,1) = Ложь Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось скопировать данные в ТЗ:  " + стр.Поставщик;	
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			//Обновление производителей
			//ЗначениеЭлемента = "";
			//Если СтруктураПолей.Свойство("Производитель",ЗначениеЭлемента) = Истина Тогда
			//	ОМ20_Чернов.ЗагрузитьНаименованияПроизводителей(ТЗ, ЗначениеЭлемента);
			//КонецЕсли;
			
			//Получим новый код прайс листа
			КодПрайсЛиста = ПолучитьКодПрайсЛиста();
			Если КодПрайсЛиста = -1 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось получить код прайс листа:  " + стр.Поставщик;	
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			 
			//Сформируем набор записей прайса
			НаборЗаписей = РегистрыСведений.ПрайсЛисты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КодПрайсЛиста.Установить(КодПрайсЛиста);
			ПрошлыйГод = Год(ТекущаяДата()) - 1;
			н=0;
			Для каждого стрТЗ из ТЗ Цикл 
				н=н+1;
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				Запись = НаборЗаписей.Добавить(); 
				Запись.КодПрайсЛиста = КодПрайсЛиста;
				Запись.ПоставщикСвязки = стр.ПоставщикСвязки;

				Запись.НомерЗаписи = н;
				Для каждого стрПоля из СтруктураПолей Цикл
					Если стрПоля.Ключ = "Код" Тогда
						Значение = Формат(стрТЗ[стрПоля.Значение],"ЧГ=0");
					ИначеЕсли стрПоля.Ключ = "Страна" Тогда
						Продолжить;
					ИначеЕсли стрПоля.Ключ = "СрокГодности" Тогда
						Значение = ОМ20_Чернов.Стр_ПолучитьДату(стрТЗ[стрПоля.Значение]);
						Если Год(Значение) <= ПрошлыйГод Тогда
							Значение = Дата('0001.01.01');	
						КонецЕсли;
					Иначе
						Значение = стрТЗ[стрПоля.Значение];
					КонецЕсли;
					
					Если ТипЗнч(Значение) = Тип("Строка") Тогда
						Значение = СокрЛП(Значение);
					КонецЕсли;
					Запись[стрПоля.Ключ] = Значение;
				КонецЦикла;
				Запись.Цена				= Запись.Цена;
				//Запись.ЦенаПриведенная	= Окр(Запись.Цена*(?(КоэффПриведения=0,1,КоэффПриведения)),2);
				
			КонецЦикла;
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Попытка
				НаборЗаписей.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось записать прайс лист:  " + стр.Поставщик + "	"+ ОписаниеОшибки();
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
						
			//Запишем теперь в каталог существующий прайс
			НачатьТранзакцию();
			Блокировка = Новый БлокировкаДанных;
			БлокировкаКаталога = Блокировка.Добавить("РегистрСведений.КаталогПрайсЛистов");
			БлокировкаКаталога.УстановитьЗначение("Настройка",стр.НастройкаОбмена);
			БлокировкаКаталога.УстановитьЗначение("КодПоставщика",стр.КодПоставщика);
			БлокировкаКаталога.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();			
			МЗ = РегистрыСведений.КаталогПрайсЛистов.СоздатьМенеджерЗаписи();
			МЗ.Настройка = стр.НастройкаОбмена;
			МЗ.КодПоставщика = стр.КодПоставщика;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				КодПрайсЛистаНаУдаление = МЗ.КодПрайсЛиста;    //Запомним код прайса, который надо удалить
				//МЗ.КодПрайсЛистаСтарый = МЗ.КодПрайсЛиста;
				//МЗ.ДатаДляУдаления = ТекущаяДата() + 5*60;
				МЗ.КодПрайсЛиста = КодПрайсЛиста;	
				МЗ.Дата = ДатаФайла;
				МЗ.Коэффициент = стр.КоэффициентНаБазовыйПрайс;
			Иначе
				МЗ.Настройка = стр.НастройкаОбмена;
				МЗ.КодПоставщика = стр.КодПоставщика;
				МЗ.КодПрайсЛиста = КодПрайсЛиста;	
				МЗ.Дата = ДатаФайла;
				МЗ.Коэффициент = стр.КоэффициентНаБазовыйПрайс;
			КонецЕсли;
			Попытка
				МЗ.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Не удалось обновить код прайс листа в каталоге:  " + стр.Поставщик + "	"+ ОписаниеОшибки();				
				ДБФ.ЗакрытьФайл();
				//Удаляем временный файлик
				Если Длина > 12 Тогда
					Попытка
						УдалитьФайлы(НовоеПолноеИмяФайла);
					Исключение
						//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
					КонецПопытки;                       
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
			
			ПометитьПрайсНаУдаление(КодПрайсЛистаНаУдаление);
			
			Попытка
				ДБФ.ЗакрытьФайл();
			Исключение
			КонецПопытки;			
			
			
			//Удаляем временный файлик
			Если Длина > 12 Тогда
				Попытка
					УдалитьФайлы(НовоеПолноеИмяФайла);
				Исключение
					//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
				КонецПопытки;                       
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	УдалитьСтарыеПрайсы();
	
	Возврат ТЗпроблем;
	
	
КонецФункции

Функция ЗагрузитьОтказыПоставщика() Экспорт
	
	ТХТ = "ВЫБРАТЬ
	      |	НастройкиОбмена.НастройкаОбмена.Владелец КАК Поставщик,
	      |	НастройкиОбмена.FILEКаталогОбмена КАК КаталогЗагрузки,
	      |	НастройкиОбмена.НастройкаОбмена,
	      |	НастройкиОбмена.FILEМаска КАК Маска,
	      |	НастройкиОбмена.Кодировка,
	      |	НастройкиОбмена.НастройкаОбмена.КодПоставщика КАК КодПоставщика,
	      |	ВЫБОР
	      |		КОГДА НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок = ЗНАЧЕНИЕ(справочник.Поставщики.ПустаяСсылка)
	      |			ТОГДА НастройкиОбмена.НастройкаОбмена.Владелец
	      |		ИНАЧЕ НастройкиОбмена.НастройкаОбмена.Владелец.ПоставщикСвязок
	      |	КОНЕЦ КАК Поставщиксвязки
	      |ИЗ
	      |	РегистрСведений.НастройкиОбмена КАК НастройкиОбмена
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФорматаОбмена КАК НастройкиФорматаОбмена
	      |		ПО НастройкиОбмена.НастройкаОбмена = НастройкиФорматаОбмена.НастройкаОбмена
	      |ГДЕ
	      |	НастройкиОбмена.УзелОбмена = ""Отказ""
	      |	И НастройкиФорматаОбмена.УзелОбмена = ""Отказ""
	      |УПОРЯДОЧИТЬ ПО
	      |	НастройкиОбмена.НастройкаОбмена.Владелец.Наименование";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	ТЗНастроек = Запрос.Выполнить().Выгрузить();
	
	
	ТЗпроблем = Новый ТаблицаЗначений;
	ТЗпроблем.Колонки.Добавить("Поставщик");
	ТЗпроблем.Колонки.Добавить("НастройкаОбмена");
	ТЗпроблем.Колонки.Добавить("Проблема");
	Колво = ТЗНастроек.Количество();
	НомСтр=0;
	Для каждого стр из ТЗНастроек Цикл
		НомСтр=НомСтр+1;
		
		#Если Клиент Тогда
			Состояние(""+НомСтр+" из " + КолВо);
			ОбработкаПрерыванияПользователя();	
		#КонецЕсли
		МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
		МЗ.НастройкаОбмена = стр.НастройкаОбмена;
		МЗ.УзелОбмена = "Отказ";
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
			СтруктураПолей = Новый Структура;
			СписокПолей = Новый СписокЗначений;
			Для каждого поле из ТаблицаПолей Цикл
				СтруктураПолей.Вставить(поле.ИмяПоляБД,поле.ИмяПоляВФайле);
				СписокПолей.Добавить(поле.ИмяПоляВФайле);
			КонецЦикла;
			
			КаталогЗагрузки = СокрЛП(стр.КаталогЗагрузки);
			КаталогБэкапа 	= КаталогЗагрузки + "\BackUp\";
			ОМ17_ПроверитьИСоздатьКаталог(КаталогБэкапа);
			Маска			= СокрЛП(стр.Маска);
			
			НайденныеФайлы  = НайтиФайлы(КаталогЗагрузки,Маска);
			Если НайденныеФайлы.Количество() = 0 Тогда
				НоваяПроблема = ТЗпроблем.Добавить();
				НоваяПроблема.Поставщик = стр.Поставщик;
				НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
				НоваяПроблема.Проблема = "Нет файла отказа";
				Продолжить;
			КонецЕсли;	
			
			ТаблицаОтказов = Новый ТаблицаЗначений;
			ТаблицаОтказов.Колонки.Добавить("Файл");
			ТаблицаОтказов.Колонки.Добавить("ДатаФайла");
			ТаблицаОтказов.Колонки.Добавить("ПолноеИмя");
			
			
			Для каждого Файло из НайденныеФайлы Цикл
				
				Если Файло.Существует() = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				Если (Файло.Размер() = 0) Тогда
					Попытка
						УдалитьФайлы(Файло.ПолноеИмя);
					Исключение
						#если Клиент Тогда
							НоваяПроблема = ТЗпроблем.Добавить();
							НоваяПроблема.Поставщик = стр.Поставщик;
							НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
							НоваяПроблема.Проблема = "Не удалось удалить файл: " + Файло.ПолноеИмя;
							Продолжить;
						#КонецЕсли
					КонецПопытки;
					Продолжить;
				КонецЕсли;
				
				ДатаФайла = Файло.ПолучитьВремяИзменения();
				Если СтрДлина(Файло.ИмяБезРасширения) > 8 Тогда
					ПереместитьФайл(Файло.ПолноеИмя,Файло.Путь + "" + Прав(Файло.Имя,12));
					ТекСтр = ТаблицаОтказов.Добавить();
					ТекСтр.Файл		= Прав(Файло.Имя,12);
					ТекСтр.ДатаФайла= ДатаФайла;
					ТекСтр.ПолноеИмя= Файло.Путь + "" + Прав(Файло.Имя,12);
				Иначе
					ТекСтр = ТаблицаОтказов.Добавить();
					ТекСтр.Файл		= Файло.Имя;
					ТекСтр.ДатаФайла= ДатаФайла;
					ТекСтр.ПолноеИмя= Файло.ПолноеИмя;
				КонецЕсли;			
			КонецЦикла;			
			
			
			Для каждого Файл из ТаблицаОтказов Цикл
				
				#если Клиент Тогда
					Сообщить("Загружается файл отказа: " + Файл.ПолноеИмя); 
				#КонецЕсли
				
				//Загружаем файл
				ДБФ= Новый  XBase;
				Попытка
					ДБФ.ОткрытьФайл(Файл.ПолноеИмя);
				Исключение
					//Сообщить("Файл: " + ЭлементыФормы.ТаблицаНакладных.ТекущаяСтрока.ПолноеИмя + " либо уже открыт, либо поврежден! Пропускаем его... ");	
					Продолжить;
				КонецПопытки;
				Попытка
					Если ДБФ.КоличествоЗаписей() = 0 Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить;
				КонецПопытки;
				Если СокрЛП(стр.Кодировка) = "OEM" или ПустаяСтрока(стр.Кодировка) Тогда
					ДБФ.Кодировка = КодировкаXBase.OEM;
				Иначе
					ДБФ.Кодировка = КодировкаXBase.ANSI;
				КонецЕсли;	
				
				ОтсутствующиеПоля = ПроверитьСоответствиеПолей(СписокПолей,ДБФ);
				Если НЕ ПустаяСтрока(ОтсутствующиеПоля) Тогда
					ДБФ.ЗакрытьФайл();
					НоваяПроблема = ТЗпроблем.Добавить();
					НоваяПроблема.Поставщик = стр.Поставщик;
					НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
					НоваяПроблема.Проблема = "Нет полей : " + ОтсутствующиеПоля + " в файле: " + Файл.ПолноеИмя;
					Продолжить;
				КонецЕсли;
				
				ДБФ.Перейти(1);
				НомерЗаказа = Число(СокрЛП(ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["НомерЗаказа"])));
				ДатаЗаказа = ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["ДатаЗаказа"]);
				КодПолучателя = СокрЛП(Формат(ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["КодПолучателя"]),"ЧГ=0"));
				
				Аптека = НайтиАптекуПоВнешнемуКоду(КодПолучателя,стр.Поставщик);
				Если Аптека = Неопределено Тогда
					ДБФ.ЗакрытьФайл();
					НоваяПроблема = ТЗпроблем.Добавить();
					НоваяПроблема.Поставщик = стр.Поставщик;
					НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
					НоваяПроблема.Проблема = "Не найдена аптека по внешн. коду : " + КодПолучателя + " файл: " + Файл.ПолноеИмя;
					Продолжить;
				КонецЕсли;
				
				//Найдем документ заказа
				ТХТ = "ВЫБРАТЬ
				|	Заказ.Ссылка КАК Заказ,
				|	Заказ.ДокОснование,
				|	Заказ.Склад,
				|	Заказ.НомерЗаявкиАптеки,
				|	Заказ.ТипЗаказа
				|ИЗ
				|	Документ.Заказ КАК Заказ
				|ГДЕ
				|	Заказ.Номер = &Номер
				|	И Заказ.Дата Между &НачДата и &КонДата";
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("Номер",НомерЗаказа);				  
				Запрос.УстановитьПараметр("НачДата",НачалоДня(ДатаЗаказа)-60*60*24);
				Запрос.УстановитьПараметр("КонДата",КонецДня(ДатаЗаказа));
				Рез = Запрос.Выполнить().Выгрузить();
				Если Рез.Количество() = 0 Тогда
					ДБФ.ЗакрытьФайл();
					НоваяПроблема = ТЗпроблем.Добавить();
					НоваяПроблема.Поставщик = стр.Поставщик;
					НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
					НоваяПроблема.Проблема = "Не найден заказ №: " + НомерЗаказа + " файл: " + Файл.ПолноеИмя;	
					Продолжить;
				КонецЕсли;
				
				Документ = Рез.Получить(0).Заказ;
				Если Рез.Получить(0).Склад <> Аптека Тогда
					ДБФ.ЗакрытьФайл();
					НоваяПроблема = ТЗпроблем.Добавить();
					НоваяПроблема.Поставщик = стр.Поставщик;
					НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
					НоваяПроблема.Проблема = "в файле: " + файл.ПолноеИмя + " код получателя не соответсвует аптеке в заказе";					
					Продолжить;
				КонецЕсли;
				
				НомерЗаявкиАптеки= Рез.Получить(0).НомерЗаявкиАптеки;
				ТипЗаказа = Рез.Получить(0).ТипЗаказа;
				ЗакрыватьСкладВПути = Истина;
				ТЗОтказовПоставщика = Новый ТаблицаЗначений;
				ТЗОтказовПоставщика.Колонки.Добавить("Дата");
				ТЗОтказовПоставщика.Колонки.Добавить("Документ");
				ТЗОтказовПоставщика.Колонки.Добавить("Поставщик");
				ТЗОтказовПоставщика.Колонки.Добавить("Склад");
				ТЗОтказовПоставщика.Колонки.Добавить("Товар");
				ТЗОтказовПоставщика.Колонки.Добавить("ПричинаОтказа");
				ТЗОтказовПоставщика.Колонки.Добавить("Количество");
				ТЗОтказовПоставщика.Колонки.Добавить("Цена");
				ТЗОтказовПоставщика.Колонки.Добавить("Сумма");
				ТЗОтказовПоставщика.Колонки.Добавить("НомерЗаявкиАптеки");
				ТЗОтказовПоставщика.Колонки.Добавить("КодТовараПоставщика");
				ТЗОтказовПоставщика.Колонки.Добавить("НаименованиеТовараПоставщика");			
				ТЗОтказовПоставщика.Колонки.Добавить("Комментарий");
				
				Для ы = 1 по ДБФ.КоличествоЗаписей() Цикл
					ДБФ.Перейти(ы);
					КодТовараПоставщика = СокрЛП(Формат(ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["КодТовараПоставщика"]),"ЧГ=0"));
					Количество = ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["Количество"]);
					Если Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					Попытка
						Цена = ДБФ.ПолучитьЗначениеПоля(СтруктураПолей["Цена"]);
					Исключение
						Цена = 0;
					КонецПопытки;
					
					//Здесь проверим, если интернет заказ, то только отправляем гет запросы
					//Если ТипЗаказа = Перечисления.ТипЗаявки.ИнтернетЗаказ Тогда
					//	ЗакрыватьСкладВПути = Ложь;
					//	WinHttp=Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
					//	WinHttp.Open("GET","http://aptekari.com/adm/a5.php?order="+Формат(НомерЗаявкиАптеки,"ЧГ=0")+"&status=0&err=2&contr=" + Формат(ТекПоставщик.Код,"ЧГ=0") + "&code=" + КодТовараПоставщика,0);
					//	WinHttp.Send();				
					//КонецЕсли;
					
					
					ТХТ = "ВЫБРАТЬ
					|	СвязкиТовараСПоставщиком.ТоварФирмы как Товар
					|ИЗ
					|	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
					|ГДЕ
					|	СвязкиТовараСПоставщиком.КодТовараПоставщика = &КодТовараПоставщика
					|	И СвязкиТовараСПоставщиком.Поставщик = &Поставщик";
					Запрос.Текст = ТХТ;	
					Запрос.Параметры.Очистить();
					Запрос.УстановитьПараметр("Поставщик",стр.ПоставщикСвязки);
					Запрос.УстановитьПараметр("КодТовараПоставщика",КодТовараПоставщика);
					Рез = Запрос.Выполнить().Выгрузить();
					Если Рез.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					ТоварСсылка = Рез.Получить(0).Товар;
					
					ТекСтрокаОтказа 		= ТЗОтказовПоставщика.Добавить();
					ТекСтрокаОтказа.Дата 	= ТекущаяДата();
					ТекСтрокаОтказа.Поставщик = стр.Поставщик;
					ТекСтрокаОтказа.Документ = Документ;
					ТекСтрокаОтказа.Склад 	= Аптека;
					ТекСтрокаОтказа.Товар 	= ТоварСсылка;
					ТекСтрокаОтказа.Количество = Количество;
					ТекСтрокаОтказа.Цена 	= Цена;
					ТекСтрокаОтказа.Сумма  	= Цена*Количество;
					ТекСтрокаОтказа.КодТовараПоставщика = КодТовараПоставщика;
					ТекСтрокаОтказа.НомерЗаявкиАптеки = НомерЗаявкиАптеки;
					ТекСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоставщика;
					
				КонецЦикла;
				
				Если ТЗОтказовПоставщика.Количество() > 0  Тогда
					//Надо получить остатки товара в пути, чтобы закрыть без минусов
					Если ЗакрыватьСкладВПути = Истина Тогда
						ТХТ = "ВЫБРАТЬ
						|	ЗаказПоставщикуОстатки.Поставщик КАК Поставщик,
						|	ЗаказПоставщикуОстатки.Товар КАК Товар,
						|	ЗаказПоставщикуОстатки.ДатаЗаказа КАК ДатаЗаказа,
						|	ЗаказПоставщикуОстатки.КоличествоОстаток КАК Количество
						|ИЗ
						|	РегистрНакопления.ЗаказПоставщику.Остатки(
						|			&Дата,
						|			НАЧАЛОПЕРИОДА(ДатаЗаказа, ДЕНЬ) = &ДатаЗаказа
						|				И Поставщик = &Поставщик
						|				И Склад = &Склад
						|				И Товар В (&СписокТовара)) КАК ЗаказПоставщикуОстатки
						|ГДЕ
						|	ЗаказПоставщикуОстатки.КоличествоОстаток > 0";	
						
						
						Запрос.Текст = ТХТ;
						Запрос.УстановитьПараметр("Склад",Аптека);
						Запрос.УстановитьПараметр("Дата",ТекущаяДата());
						Запрос.УстановитьПараметр("ДатаЗаказа",НачалоДня(ДатаЗаказа));
						Запрос.УстановитьПараметр("Поставщик",стр.Поставщик);
						Запрос.УстановитьПараметр("СписокТовара",ТЗОтказовПоставщика.ВыгрузитьКолонку("Товар"));
						
						Рез = Запрос.Выполнить().Выгрузить();
						Если Рез.Количество() > 0 Тогда //Есть что закрывать 	
							ДокЗакрытия = Документы.ЗакрытиеЗаказов.СоздатьДокумент();	
							ДокЗакрытия.Дата = ТекущаяДата();
							ДокЗакрытия.Склад = Аптека;
							ДокЗакрытия.ТипЗакрытияЗаказа = Перечисления.ТипыЗакрытияЗаказа.ОтказПоставщика;
							Для каждого ТекСтрокаОтказа из ТЗОтказовПоставщика Цикл
								Нашли = Рез.Найти(ТекСтрокаОтказа.Товар,"Товар");
								Если Нашли = Неопределено Тогда //Не нашли, значит кто то уже закрыл раньше
									Продолжить;
								КонецЕсли;
								ТекСтрТовар = ДокЗакрытия.Товар.Добавить();
								ТекСтрТовар.ДатаЗаказа = ДатаЗаказа;
								ТекСтрТовар.Количество = Мин(Нашли.Количество,ТекСтрокаОтказа.Количество);
								ТекСтрТовар.Поставщик = стр.Поставщик;
								ТекСтрТовар.Товар = ТекСтрокаОтказа.Товар;
							КонецЦикла;
							Проведен = Ложь;
							Для к = 0 по 5 Цикл
								Попытка	
									ДокЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
									Проведен = Истина;
									Прервать;
								Исключение
									НоваяПроблема = ТЗпроблем.Добавить();
									НоваяПроблема.Поставщик = стр.Поставщик;
									НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
									НоваяПроблема.Проблема = "Не удалось провести док: " + ОписаниеОшибки() + " файл: " + Файл.ПолноеИмя;									
									ОбщегоНазначения.Задержка(2);
								КонецПопытки;
							КонецЦикла;				
						КонецЕсли;
						
					КонецЕсли;
					
					Для каждого ТекСтрокаОтказа из ТЗОтказовПоставщика Цикл
						//НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись = РегистрыСведений.ОтказыПоЗаказам.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекСтрокаОтказа);
						
						Попытка
							НоваяЗапись.Записать();
						Исключение
							НоваяПроблема = ТЗпроблем.Добавить();
							НоваяПроблема.Поставщик = стр.Поставщик;
							НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
							НоваяПроблема.Проблема = "Не удалось записать отказ в регистр: " + ОписаниеОшибки() + " файл: " + Файл.ПолноеИмя;
						КонецПопытки;
						
					КонецЦикла;
					ТЗОтказовПоставщика.Очистить();
					
				КонецЕсли;
				ДБФ.ЗакрытьФайл();
				Попытка
					ПереместитьФайл(Файл.ПолноеИмя,КаталогБэкапа + "\" + файл.Файл);
				Исключение
					НоваяПроблема = ТЗпроблем.Добавить();
					НоваяПроблема.Поставщик = стр.Поставщик;
					НоваяПроблема.НастройкаОбмена = стр.НастройкаОбмена;
					НоваяПроблема.Проблема = "Не удалось переместить файл: " + Файл.ПолноеИмя + " в " + КаталогБэкапа + "\" + файл.Файл;
				КонецПопытки;
				
			КонецЦикла; // конец цикла по таблице отказа, содержащей файлы отказа
			
		КонецЕсли;
	КонецЦикла; // конец цикла по таблице настроек
	
	Возврат ТЗпроблем;
	
КонецФункции

Функция ПолучитьПотребностьSASНаДату(КодСклада,ДатаПотребности,Параметры = Неопределено)
	
	Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	МатрицаНЗ.Товар.Код КАК ТоварКод,
			               |	МАКСИМУМ(МатрицаНЗ.НЗ) КАК НЗ
			               |ПОМЕСТИТЬ втНЗ
			               |ИЗ
			               |	РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			               |ГДЕ
			               |	МатрицаНЗ.Аптека = &Склад
			               |	И МатрицаНЗ.ДатаНачалаАкции <= &Дата
			               |	И МатрицаНЗ.СрокДействияРекламы >= &Дата
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	МатрицаНЗ.Товар.Код
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	ТоварКод
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	SAS_ПотребностьАптек.ТоварКод КАК КодТовара,
			               |	SAS_ПотребностьАптек.ЧистаяПотребность КАК ЧистаяПотребностьSAS,
			               |	АП.МинимальныйЗаказ КАК МинимальныйЗаказ,
			               |	SAS_ПотребностьАптек.МаксимальныйЗапас КАК МаксимальныйЗапасSAS,
			               |	SAS_ПотребностьАптек.ТочкаЗаказа КАК ТочкаЗаказаSAS,
			               |	ЕСТЬNULL(втНЗ.НЗ, 0) КАК НЗ
			               |ИЗ
			               |	РегистрСведений.SAS_ПотребностьАптекАрхив КАК SAS_ПотребностьАптек
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			               |		ПО SAS_ПотребностьАптек.ТоварКод = АП.Код
			               |		ЛЕВОЕ СОЕДИНЕНИЕ втНЗ КАК втНЗ
			               |		ПО SAS_ПотребностьАптек.ТоварКод = втНЗ.ТоварКод
			               |ГДЕ
			               |	SAS_ПотребностьАптек.СкладКод = &СкладКод
			               |	И SAS_ПотребностьАптек.Дата МЕЖДУ &НачДата И &КонДата
			               //|	И SAS_ПотребностьАптек.ЧистаяПотребность > 0
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	SAS_ПотребностьАптек.ТоварКод
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ втНЗ";
			
			Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("НачДата",НачалоДня(ДатаПотребности));
			Запрос.УстановитьПараметр("КонДата",КонецДня(ДатаПотребности));
			Запрос.УстановитьПараметр("СкладКод",КодСклада);
			Если Параметры = Неопределено Тогда
				Запрос.УстановитьПараметр("Склад",Справочники.МестаХранения.НайтиПоКоду(КодСклада));
			Иначе
				Запрос.УстановитьПараметр("Склад",Параметры.Склад);
			КонецЕсли;
			Рез = Запрос.Выполнить();
			Если Рез.Пустой() Тогда
				Возврат Неопределено;
			Иначе
				Возврат Рез.Выгрузить();
			КонецЕсли;			
	
	
КонецФункции

Функция ПолучитьПотребностьSAS(КодСклада, Параметры)
	
	
	Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	МатрицаНЗ.Товар.Код КАК ТоварКод,
			               |	МАКСИМУМ(МатрицаНЗ.НЗ) КАК НЗ
			               |ПОМЕСТИТЬ втНЗ
			               |ИЗ
			               |	РегистрСведений.МатрицаНЗ КАК МатрицаНЗ
			               |ГДЕ
			               |	МатрицаНЗ.Аптека = &Склад
			               |	И МатрицаНЗ.ДатаНачалаАкции <= &Дата
			               |	И МатрицаНЗ.СрокДействияРекламы >= &Дата
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	МатрицаНЗ.Товар.Код
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	ТоварКод
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	SAS_ПотребностьАптек.ТоварКод КАК КодТовара,
			               |	SAS_ПотребностьАптек.ЧистаяПотребность КАК ЧистаяПотребностьSAS,
			               |	АП.МинимальныйЗаказ КАК МинимальныйЗаказ,
			               |	ЕСТЬNULL(ВтНЗ.НЗ, 0) КАК НЗ
			               |ИЗ
			               |	РегистрСведений.SAS_ПотребностьАптек КАК SAS_ПотребностьАптек
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.SAS_ДатыРасчетаПотребности КАК Выборка
			               |		ПО (Выборка.КодАптеки = SAS_ПотребностьАптек.СкладКод)
			               |			И (НАЧАЛОПЕРИОДА(Выборка.Дата, ДЕНЬ) = &Дата)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
			               |		ПО SAS_ПотребностьАптек.ТоварКод = АП.Код
			               |		ЛЕВОЕ СОЕДИНЕНИЕ втНЗ КАК ВтНЗ
			               |		ПО SAS_ПотребностьАптек.ТоварКод = ВтНЗ.НЗ
			               |ГДЕ
			               |	SAS_ПотребностьАптек.СкладКод = &СкладКод
			               |	И SAS_ПотребностьАптек.ЧистаяПотребность > 0
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	SAS_ПотребностьАптек.ТоварКод
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ втНЗ";
			
			Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("СкладКод",КодСклада);
			Запрос.УстановитьПараметр("Склад",Параметры.Склад);
			Рез = Запрос.Выполнить();
			Если Рез.Пустой() Тогда
				Если Параметры.ИспользоватьПрошлыйРасчетПриПустомТекущем = Истина Тогда
					ПрошлыйРасчет = ПолучитьПотребностьSASНаДату(КодСклада,НачалоДня(НачалоДня(ТекущаяДата())-1),Параметры);
					Если НЕ ПрошлыйРасчет = Неопределено Тогда
						Параметры.ПолученПрошлыйРасчетSAS = Истина;
					КонецЕсли;
					Возврат ПрошлыйРасчет;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				Возврат Рез.Выгрузить();
			КонецЕсли;
	
КонецФункции
		
Процедура КорректировкаПотребностиSAS(СохраненныйЗаказ,ПотребностьSAS, Параметры)
	
	Для каждого стр из СохраненныйЗаказ Цикл
		
		стр.ЗаказатьДоПривидения = стр.Заказать;
		
		стрПотр = ПотребностьSAS.Найти(стр.КодТовара,"КодТовара");
		Если НЕ стрПотр = Неопределено Тогда
			Если Параметры.ПолученПрошлыйРасчетSAS = Истина Тогда
				Если стр.Остаток < Макс(стрПотр.ТочкаЗаказаSAS,Макс(стрПотр.НЗ - стр.ВПути,0) ) или (стр.Остаток = 0 и  стрПотр.ТочкаЗаказаSAS = 0) Тогда //Было Если стр.Остаток < стрПотр.ТочкаЗаказаSAS или (стр.Остаток = 0 и  стрПотр.ТочкаЗаказаSAS = 0) Тогда
					стр.Заказать = Макс(Макс(стрПотр.МаксимальныйЗапасSAS,стрПотр.НЗ) - стр.ВПути - стр.Остаток , 0 );
					Если стр.Заказать > 0 Тогда
						стр.Заказать = Макс(стр.Заказать,стрПотр.МинимальныйЗаказ);
					КонецЕсли;
				Иначе
					стр.Заказать = 0;
				КонецЕсли;
			Иначе
				Если стрПотр.ЧистаяПотребностьSAS > 0 Тогда
					стр.Заказать = Макс(стрПотр.ЧистаяПотребностьSAS , стрПотр.МинимальныйЗаказ);
				Иначе
					стр.Заказать = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			стр.Заказать = 0;
			Если стр.НЗ > 0 Тогда
				Если стр.Остаток = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
					стр.Заказать = стр.НЗ;	
				КонецЕсли;
			Иначе
				Если стр.Остаток = 0  и стр.ДнейПродаж = 0 и стр.Продажи = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
					стр.Заказать = стр.КуМакс;	
				//ИначеЕсли стр.Остаток = 0 и стр.ВПути = 0 и стр.Активный = Истина и стр.Неликвид = Ложь и НЕ стр.ГруппаАП = "I" Тогда
				//	стр.Заказать = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		стр.Сумма = стр.Заказать*стр.Цена;
		
	КонецЦикла;	
	
КонецПроцедуры		

Процедура СоздатьЗаявкунаТовар(Параметры) Экспорт
	
	Если Параметры.Свойство("ИспользоватьПрошлыйРасчетПриПустомТекущем") = Ложь Тогда
		Параметры.Вставить("ИспользоватьПрошлыйРасчетПриПустомТекущем",Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ПолученПрошлыйРасчетSAS") = Ложь Тогда
		Параметры.Вставить("ПолученПрошлыйРасчетSAS",Ложь);
	КонецЕсли;
	
	УчитыватьПромоВЗаказе = Константы.УчитыватьПромоВЗаказе.Получить();
	
	
	Склад = Параметры.Склад;
	Сообщения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентныеЗаданияПараметры.Параметр,
	|	РегламентныеЗаданияПараметры.Значение
	|ИЗ
	|	Справочник.РегламентныеЗадания.Параметры КАК РегламентныеЗаданияПараметры
	|ГДЕ
	|	РегламентныеЗаданияПараметры.Ссылка = &Ссылка и РегламентныеЗаданияПараметры.Параметр = &ИмяПараметра";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.РегламентныеЗадания.НайтиПоКоду("РасчетАвтозаказа"));
	Запрос.УстановитьПараметр("ИмяПараметра","ОдинРасчетВДень");
	
	Рез =  Запрос.Выполнить();
	Если Рез.Пустой() Тогда 
		ОдинЗаказВДень = Истина;
	Иначе
		ВыборкаПараметров = Рез.Выбрать();	
		ВыборкаПараметров.Следующий();
		ОдинЗаказВДень = ВыборкаПараметров.Значение;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.СохраненныеРасчетыЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Параметры.ИдентификаторЗаписи);
	НаборЗаписей.Отбор.Период.Установить(Параметры.Период);
	//НаборЗаписей.Отбор.Пользователь.Установить(Параметры.Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Сообщения.Вставить("Сообщение1","по текущей позиции не найдена запись в регистре заказов. "+ Символы.ПС+ "Период: "+ Параметры.Период + Символы.ПС+ "Пользователь: " + Параметры.Пользователь + Символы.ПС+ "Аптека: " + Параметры.Склад);	
		Сообщения.Вставить("Сообщение2","Автозаказ не выгружен!");
		Параметры.Вставить("Сообщения",Сообщения);
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей[0];
	СохраненныйЗаказ = Запись.РасчетЗаказа.Получить();
	
	Если СохраненныйЗаказ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Если Склад.ЗаказSAS = Истина и Запись.ВыгрузитьЗаказ = Истина Тогда
	//	Сообщения.Вставить("Сообщение1","Из текущего расчета уже происходило создание заявки на пополнение. "+ Символы.ПС+ "Период: "+ Параметры.Период + Символы.ПС+ "Пользователь: " + Параметры.Пользователь + Символы.ПС+ "Аптека: " + Параметры.Склад);	
	//	Сообщения.Вставить("Сообщение2","Заявка не создана!");
	//	Параметры.Вставить("Сообщения",Сообщения);
	//	Возврат;		
	//КонецЕсли;
	
	Если Склад.ЗаказSAS = Истина и НЕ Запись.ПримененРасчетSAS Тогда
		ПотребностьSAS = ПолучитьПотребностьSAS(Склад.Код, Параметры);
		Если ПотребностьSAS = Неопределено Тогда
			Сообщения.Вставить("Сообщение1","Отсутствует потребность SAS. Аптека: " + Склад);	
			Сообщения.Вставить("Сообщение2","Заявка не создана!");
			Параметры.Вставить("Сообщения",Сообщения);
			Возврат;		
		КонецЕсли;

		ПотребностьSAS.Индексы.Добавить("КодТовара");
		
		КорректировкаПотребностиSAS(СохраненныйЗаказ,ПотребностьSAS, Параметры);
		
		Запись.ПримененРасчетSAS = Истина;
		
		Запись.РасчетЗаказа = Новый ХранилищеЗначения(СохраненныйЗаказ, Новый СжатиеДанных(3));
		
	КонецЕсли;
	
	
	Если Запись.СтатусРасчета = Перечисления.СтатусыРасчетовАвтозаказа.Выгрузить и Запись.НомерТаймСлота = - 1 Тогда
		Запись.НомерТаймСлота = 1;
	КонецЕсли;
	
	Запись.СтатусРасчета = Перечисления.СтатусыРасчетовАвтозаказа.Выгрузить;
	Запись.ВыгрузитьЗаказ = Истина;
	
	
	Если Запись.ПримененРасчетSAS Тогда
		ТипЗаявки = Перечисления.ТипЗаявки.АвтозаказSAS;
	Иначе
		ТипЗаявки = Перечисления.ТипЗаявки.АвтозаказОфиса;
	КонецЕсли;
	

	Если Параметры.Свойство("БезНедостоверных") = Истина Тогда
		Если Параметры.ВыгружатьБезНедостоверных Тогда
			БезНД = Новый Структура;
			БезНД.Вставить("НедостовернаяПозиция",Ложь);
			КопияЗаказа = СохраненныйЗаказ.Скопировать(БезНД,"КодТовара,Заказать,Товар,Исключение,ГруппаАП,Цена,Сумма");
		Иначе
			КопияЗаказа = СохраненныйЗаказ.Скопировать(,"КодТовара,Заказать,Товар,Исключение,ГруппаАП,Цена,Сумма");
		КонецЕсли;
	Иначе
		КопияЗаказа = СохраненныйЗаказ.Скопировать(,"КодТовара,Заказать,Товар,Исключение,ГруппаАП,Цена,Сумма");
	КонецЕсли;
	
	СохраненныйЗаказ = неопределено;
	
	
	
	ТХТ = "ВЫБРАТЬ  ПЕРВЫЕ 1
	      |	ЗаявкаНаТовар.НомерЗаявкиАптеки КАК НомерЗаявкиАптеки,
	      |	ЗаявкаНаТовар.Дата КАК Дата
	      |ИЗ
	      |	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
	      |ГДЕ
	      |	ЗаявкаНаТовар.Дата > &НачПериода
	      |	И ЗаявкаНаТовар.Склад = &Склад
	      |	И ЗаявкаНаТовар.ТипЗаявки В (ЗНАЧЕНИЕ(Перечисление.ТипЗаявки.АвтозаказSAS), ЗНАЧЕНИЕ(Перечисление.ТипЗаявки.АвтозаказОфиса))
	      |	И ЗаявкаНаТовар.НомерТаймСлота = &НомерТаймСлота
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	Дата УБЫВ,
	      |	НомерЗаявкиАптеки УБЫВ";
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	
	Запрос.УстановитьПараметр("НачПериода",Макс(НачалоГода(ТекущаяДата()),НачалоДня(ТекущаяДата())-24*60*60*60));
	Запрос.УстановитьПараметр("Склад",Параметры.Склад);
	Запрос.УстановитьПараметр("ТипЗаявки",ТипЗаявки);    
	Запрос.УстановитьПараметр("НомерТаймСлота",Параметры.НомерТаймСлота);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если РЕз.Количество() = 0 Тогда //Значит первый заказ будет
		НовыйНомер = "АЗ-0000001";
	Иначе
		Если НачалоДня(Рез.Получить(0).Дата) = НачалоДня(ТекущаяДата()) и ОдинЗаказВДень = Истина Тогда //Зачем два автозаказа в один день
			Сообщения.Вставить("Сообщение2","За текущей день уже имеется выгруженный автозаказ. Заказ не будет сформирован."+ Символы.ПС+ "Аптека: " + Параметры.Склад + ""+ Символы.ПС+ "------------------------");
			Параметры.Вставить("Сообщения",Сообщения);
			Возврат;
		КонецЕсли;
		ПредыдущийНомер = Рез.Получить(0).НомерЗаявкиАптеки;
		НовыйНомер = Формат(Число(Прав(ПредыдущийНомер,7)) + 1,"ЧГ=0");
		НовыйНомер = Лев("АЗ-0000000",10-СтрДлина(НовыйНомер)) + НовыйНомер;
	КонецЕсли;
	
	ТаймСлотСсылка = Справочники.ТаймСлотыЗаказов.НайтиПоРеквизиту("НомерТаймСлота",Параметры.НомерТаймСлота);
	Если ТаймСлотСсылка.ЕстьОграничениеПоТовару Тогда
		ТЗОтбораПоТовару = ПолучитьТаблицуОграниченийПоТоварам(ТаймСлотСсылка.НастройкиПостроителя);
	Иначе
		ТЗОтбораПоТовару = Неопределено;
	КонецЕсли;
	
	
	
	Если ТаймСлотСсылка.ЕстьОграничениеПоТовару и НЕ ТЗОтбораПоТовару = Неопределено Тогда
		ТХТ = "ВЫБРАТЬ
		      |	Т.КодТовара КАК Код,
		      |	Т.Заказать КАК Количество,
		      |	Т.Цена КАК Цена,
		      |	Т.Сумма КАК Сумма,
		      |	Т.Товар КАК ТоварНаименование,
		      |	Т.ГруппаАП КАК ГруппаАП
		      |ПОМЕСТИТЬ ВТКоды
		      |ИЗ
		      |	&Таб КАК Т
		      |ГДЕ
		      |	Т.Заказать > 0
		      |	И (Т.Исключение = 0
		      |			ИЛИ Т.Исключение = ЛОЖЬ)
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	Т.КодТовара КАК КодТовара
		      |ПОМЕСТИТЬ ОтборПоТовару
		      |ИЗ
		      |	&ТЗОтбораПоТовару КАК Т
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ВтКоды.Код КАК Код,
		      |	ВЫРАЗИТЬ(ВтКоды.Количество * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0)) КАК Количество,
		      |	ВтКоды.Цена КАК Цена,
		      |	ВтКоды.Цена * (ВЫРАЗИТЬ(ВтКоды.Количество * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) КАК Сумма,
		      |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
		      |	АССОРТИМЕНТНЫЙ_ПЛАН.ЕдиницаПоУмолчанию КАК ЕИТ
		      |ИЗ
		      |	ВТКоды КАК ВтКоды
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		      |		ПО ВтКоды.Код = АССОРТИМЕНТНЫЙ_ПЛАН.Код
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоТовару КАК ОтборПоТовару
		      |		ПО ВтКоды.Код = ОтборПоТовару.КодТовара
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТаймСлотыЗаказов.ГруппыАП КАК ТаймСлотыЗаказовГруппыАП
		      |		ПО ВтКоды.ГруппаАП = ТаймСлотыЗаказовГруппыАП.ГруппаАП
		      |			И (ТаймСлотыЗаказовГруппыАП.Включена = ИСТИНА)
		      |			И (ТаймСлотыЗаказовГруппыАП.Ссылка.НомерТаймСлота = &НомерТаймСлота)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		      |			КРП.ТоварКод КАК ТоварКод,
		      |			МАКСИМУМ(КРП.Коэффициент) КАК Коэффициент
		      |		ИЗ
		      |			РегистрСведений.КоэффициентРаспределенияПромоакции КАК КРП
		      |		ГДЕ
		      |			КРП.СкладКод = &СкладКод
		      |			И КРП.ДатаДействияС <= &ТекДата
		      |			И КРП.ДатаДействияПо >= &ТекДата
		      |			И ИСТИНА = &УчитыватьПромоВЗаказе
		      |		
		      |		СГРУППИРОВАТЬ ПО
		      |			КРП.ТоварКод) КАК Коэфф
		      |		ПО (Коэфф.ТоварКод = ВтКоды.Код)
		      |ГДЕ
		      |	(ВЫРАЗИТЬ(ВтКоды.Количество * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) >= 1
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	ВтКоды.ТоварНаименование
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ОтборПоТовару
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ВТКоды";
		
		
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("УчитыватьПромоВЗаказе",УчитыватьПромоВЗаказе);
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
		Запрос.УстановитьПараметр("СкладКод",Склад.Код);
		Запрос.УстановитьПараметр("Таб",КопияЗаказа);
		Запрос.УстановитьПараметр("ТЗОтбораПоТовару",ТЗОтбораПоТовару);

	Иначе
		ТХТ = "ВЫБРАТЬ
		      |	Т.КодТовара КАК Код,
		      |	Т.Заказать КАК Количество,
		      |	Т.Цена КАК Цена,
		      |	Т.Сумма КАК Сумма,
		      |	Т.Товар КАК ТоварНаименование,
		      |	Т.ГруппаАП КАК ГруппаАП
		      |ПОМЕСТИТЬ ВТКоды
		      |ИЗ
		      |	&Таб КАК Т
		      |ГДЕ
		      |	Т.Заказать > 0
		      |	И (Т.Исключение = 0
		      |			ИЛИ Т.Исключение = ЛОЖЬ)
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ВтКоды.Код КАК Код,
		      |	ВЫРАЗИТЬ(ВтКоды.Количество * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0)) КАК Количество,
		      |	ВтКоды.Цена КАК Цена,
		      |	ВтКоды.Цена * (ВЫРАЗИТЬ(ВтКоды.Количество * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) КАК Сумма,
		      |	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
		      |	АССОРТИМЕНТНЫЙ_ПЛАН.ЕдиницаПоУмолчанию КАК ЕИТ
		      |ИЗ
		      |	ВТКоды КАК ВтКоды
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		      |		ПО ВтКоды.Код = АССОРТИМЕНТНЫЙ_ПЛАН.Код
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТаймСлотыЗаказов.ГруппыАП КАК ТаймСлотыЗаказовГруппыАП
		      |		ПО ВтКоды.ГруппаАП = ТаймСлотыЗаказовГруппыАП.ГруппаАП
		      |			И (ТаймСлотыЗаказовГруппыАП.Включена = ИСТИНА)
		      |			И (ТаймСлотыЗаказовГруппыАП.Ссылка.НомерТаймСлота = &НомерТаймСлота)
		      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		      |			КРП.ТоварКод КАК ТоварКод,
		      |			МАКСИМУМ(КРП.Коэффициент) КАК Коэффициент
		      |		ИЗ
		      |			РегистрСведений.КоэффициентРаспределенияПромоакции КАК КРП
		      |		ГДЕ
		      |			КРП.СкладКод = &СкладКод
		      |			И КРП.ДатаДействияС <= &ТекДата
		      |			И КРП.ДатаДействияПо >= &ТекДата
		      |			И ИСТИНА = &УчитыватьПромоВЗаказе
		      |		
		      |		СГРУППИРОВАТЬ ПО
		      |			КРП.ТоварКод) КАК Коэфф
		      |		ПО (Коэфф.ТоварКод = ВтКоды.Код)
		      |ГДЕ
		      |	(ВЫРАЗИТЬ(ВтКоды.Количество * ЕСТЬNULL(Коэфф.Коэффициент, 1) КАК ЧИСЛО(12, 0))) >= 1
		      |
		      |УПОРЯДОЧИТЬ ПО
		      |	ВтКоды.ТоварНаименование
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |УНИЧТОЖИТЬ ВТКоды";
		
		
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("УчитыватьПромоВЗаказе",УчитыватьПромоВЗаказе);
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
		Запрос.УстановитьПараметр("СкладКод",Склад.Код);		
		Запрос.УстановитьПараметр("Таб",КопияЗаказа);
	КонецЕсли;
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Сообщения.Вставить("Сообщение3","По аптеке: " + Параметры.Склад + " таблица расчета не имеет записей."+ Символы.ПС+ "------------------------");
		Параметры.Вставить("Сообщения",Сообщения);		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Док = Документы.ЗаявкаНаТовар.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.Склад = Параметры.Склад;
	Док.ТипЗаявки = ТипЗаявки;
	
	Если Склад.НаПрямыхПоставках = Ложь Тогда
		Док.Статус = Перечисления.СтатусЗаказаПоставщику.Создан;
		Док.Комментарий = "Аптека исключена из автоматического распределения";
	Иначе
		Док.Статус = Перечисления.СтатусЗаказаПоставщику.ОжидаетРаспределения;
	КонецЕсли;
	Док.НомерЗаявкиАптеки = НовыйНомер;
	Док.Менеджер = Параметры.Пользователь;
	Док.Приоритет = Параметры.Приоритет;
	Док.ИдентификаторРасчета = Параметры.ИдентификаторЗаписи;
	Док.НомерТаймСлота = Параметры.НомерТаймСлота;
	
	Док.Товар.Загрузить(Рез.Выгрузить());
	Док.Записать(РежимЗаписиДокумента.Запись);
	НаборЗаписей.Записать();

	ЗафиксироватьТранзакцию();
	
	Сообщения.Вставить("Сообщение4","Заказ по " + Склад + " создан");
	Параметры.Вставить("Сообщения",Сообщения);
	Параметры.Результат = Истина;
	
	
	
	
КонецПроцедуры

Функция ВернутьСписокЗаявок(Параметры) Экспорт
	

	КоличествоОбрабатываемыхЗаявок = Формат(Параметры.КоличествоОбрабатываемыхЗаявок,"ЧГ=0");
	ТаймСлот = Параметры.ТаймСлот;
	
	Запрос = Новый Запрос;
	
	
		ТХТ = "ВЫБРАТЬ ПЕРВЫЕ "+ КоличествоОбрабатываемыхЗаявок +"
		|	ЗаявкаНаТовар.Ссылка,
		|	ЗаявкаНаТовар.Склад,
		|	ЗаявкаНаТовар.Склад.Регион КАК Регион,
		|	ЗаявкаНаТовар.Склад.РаботаЧерезКонвертер КАК РаботаЧерезКонвертер
		|ИЗ
		|	Документ.ЗаявкаНаТовар КАК ЗаявкаНаТовар
		|ГДЕ
		|	ЗаявкаНаТовар.Дата МЕЖДУ &НачДата И &КонДата  и ЗаявкаНаТовар.ПометкаУдаления = ЛОЖЬ
		|	И ЗаявкаНаТовар.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаказаПоставщику.ОжидаетРаспределения)
		|	И НомерТаймСлота = &НомерТаймСлота   И ЗаявкаНаТовар.Склад.СубъектРФ в (&СубъектыРФ) 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаНаТовар.Приоритет УБЫВ";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("НомерТаймСлота",ТаймСлот.НомерТаймСлота);
	Запрос.УстановитьПараметр("СубъектыРФ",РаботаСЗаказамиСервер.ПолучитьСубъектыРФТаймСлота(ТаймСлот));
	Запрос.УстановитьПараметр("НачДата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонДата",КонецДня(ТекущаяДата()));

		  
	Запрос.Текст = ТХТ;
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;		
	

	
КонецФункции

Процедура ОбновитьПревышенияЛимитовЗаказа() Экспорт
	
	НачалоДня = НачалоДня(ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Заказ.Поставщик,
	               |	СУММА(Заказ.СуммаДок) КАК СуммаЗаказа
	               |ПОМЕСТИТЬ Заказы
	               |ИЗ
	               |	Документ.Заказ КАК Заказ
	               |ГДЕ
	               |	Заказ.Дата >= &Дата
	               |	И Заказ.Проведен = ИСТИНА
	               |	И Заказ.Статус = &Статус
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Заказ.Поставщик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Заказы.Поставщик,
	               |	Заказы.СуммаЗаказа
	               |ИЗ
	               |	Заказы КАК Заказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыЛимитовПоставщиков КАК Лимиты
	               |		ПО (Лимиты.Поставщик = Заказы.Поставщик)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПревышенияЛимитаЗаказа КАК Превышения
	               |		ПО (Превышения.Дата = &Дата)
	               |			И (Превышения.Поставщик = Заказы.Поставщик)
	               |ГДЕ
	               |	Лимиты.ЛимитЗаказаНаДень > 0
	               |	И Лимиты.ЛимитЗаказаНаДень < Заказы.СуммаЗаказа
	               |	И Превышения.Поставщик ЕСТЬ NULL 
				   |; УНИЧТОЖИТЬ Заказы";
		Запрос.УстановитьПараметр("Дата",НачалоДня);
		Запрос.УстановитьПараметр("Статус",Перечисления.СтатусЗаказаПоставщику.ВыгруженПоставщику);
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			МЗ = РегистрыСведений.ПревышенияЛимитаЗаказа.СоздатьМенеджерЗаписи();
			МЗ.Дата = НачалоДня;
			МЗ.Поставщик = Выборка.Поставщик;
			МЗ.Прочитать();
			МЗ.Дата = НачалоДня;
			МЗ.Поставщик = Выборка.Поставщик;
			МЗ.СуммаЗаказа = Выборка.СуммаЗаказа;
			МЗ.Записать();
		КонецЦикла;
	
	
КонецПроцедуры

Процедура РаспределитьЗаявкуСервер(Заявка,РучнойРежим = Ложь) Экспорт
	
	//РегламентноеЗадание = Справочники.РегламентныеЗадания.НайтиПоКоду("РаспределениеЗаказов");
	
	//Параметры = Новый Структура("ЭксклюзивныйПоставщик");
	ЭксклюзивныйПоставщик = Неопределено;
	ОтфильтровыватьПоСпискуПоставщиков = Ложь;
	СтруктураКВыгрузке = Неопределено;
	
	Заявка.Свойство("ЭксклюзивныйПоставщик",ЭксклюзивныйПоставщик);
	
	
	//Если МодульРегламентныхЗаданий.ПолучитьПараметрыРегламентногоЗадания(РегламентноеЗадание, Параметры) Тогда
	//	
	//	Если НЕ Параметры.ЭксклюзивныйПоставщик.Пустая() Тогда
	//		ЭксклюзивныйПоставщик = Новый Массив;
	//		ЭксклюзивныйПоставщик.Добавить(Параметры.ЭксклюзивныйПоставщик);
	//		
	//		ОтфильтровыватьПоСпискуПоставщиков = Истина;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	Попытка
		НомерТаймСлота = Заявка.Ссылка.НомерТаймСлота; 
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НомерТаймСлота = -1 Тогда
		ТаймСлотСсылка = Справочники.ТаймСлотыЗаказов.МинусПервый;
	ИначеЕсли НомерТаймСлота = 1 Тогда
		ТаймСлотСсылка = Справочники.ТаймСлотыЗаказов.Первый;
	ИначеЕсли НомерТаймСлота = 2 Тогда
		ТаймСлотСсылка = Справочники.ТаймСлотыЗаказов.Второй;
	ИначеЕсли НомерТаймСлота = 3 Тогда
		ТаймСлотСсылка = Справочники.ТаймСлотыЗаказов.Третий;
	ИначеЕсли НомерТаймСлота = 4 Тогда
		ТаймСлотСсылка = Справочники.ТаймСлотыЗаказов.Четвертый;		
	КонецЕсли;
	
	
	Если НЕ ЭксклюзивныйПоставщик = Неопределено Тогда
		ОтфильтровыватьПоСпискуПоставщиков = Истина;
	Иначе	
		
		МассивЭксклюзивов = ТаймСлотСсылка.ЭксклюзивныеПоставщики.ВыгрузитьКолонку("Поставщик");
		Если МассивЭксклюзивов.Количество() > 0 Тогда
			ЭксклюзивныйПоставщик = МассивЭксклюзивов;
			ОтфильтровыватьПоСпискуПоставщиков = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	ПрисоединятьДозаказы = ТаймСлотСсылка.ПрисоединятьДозаказы;
	ПрисоединятьИндивидуальныеЗаказы = ТаймСлотСсылка.ПрисоединятьИндивидуальныеЗаказы;

	ОбновитьПревышенияЛимитовЗаказа();
	
	ОМ21_ЗаказыПоставщикам.ОМ21_ЗакрытьТоварыВПути(Заявка.Склад,ТекущаяДата());
	
	ТЗОтказов = Новый ТаблицаЗначений;
	
	ТЗОтказов.Колонки.Добавить("Дата");
	ТЗОтказов.Колонки.Добавить("Документ");
	ТЗОтказов.Колонки.Добавить("Поставщик");
	ТЗОтказов.Колонки.Добавить("Склад");
	ТЗОтказов.Колонки.Добавить("Товар");
	ТЗОтказов.Колонки.Добавить("ПричинаОтказа");
	ТЗОтказов.Колонки.Добавить("Количество");
	ТЗОтказов.Колонки.Добавить("Цена");
	ТЗОтказов.Колонки.Добавить("Сумма");
	ТЗОтказов.Колонки.Добавить("НомерЗаявкиАптеки");
	ТЗОтказов.Колонки.Добавить("КодТовараПоставщика");
	ТЗОтказов.Колонки.Добавить("НаименованиеТовараПоставщика");
	ТЗОтказов.Колонки.Добавить("Комментарий");	
	
	ТЗПревышений = ТЗОтказов.СкопироватьКолонки();

	
	ТЗЗаказа = Неопределено;
	
	//Если Константы.РаботаБезКонвертера.Получить() Тогда
		Если Заявка.Склад.РасчетАвтозаказаБезПересчетаСкоростей = Истина Тогда
			УчитыватьТоварВПути = Ложь;
		Иначе
			//Если Заявка.Ссылка.НомерТаймСлота > 1 Тогда
			//	УчитыватьТоварВПути = Истина; //УчитыватьТоварВПути = Ложь;  задумывалось
			//Иначе
			//	УчитыватьТоварВПути = Истина;
			//КонецЕсли;
			УчитыватьТоварВПути = НЕ Константы.НеУчитыватьТоварВПутиПриРаспределении.Получить();
		КонецЕсли;
		
		РаспределитьДокументПоПоставщикамБезКонвертера(Заявка.Ссылка,ТЗЗаказа,ТЗОтказов,ТЗПревышений,ЭксклюзивныйПоставщик,ОтфильтровыватьПоСпискуПоставщиков,УчитыватьТоварВПути, ,ПрисоединятьДозаказы);
		// Если есть индивидуальные отложенные позиции, то добавим их к заказу
		Если ПрисоединятьИндивидуальныеЗаказы Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Дозаказы.КодПозиции как КодИндПозиции,
			|	Дозаказы.Товар,
			|	Дозаказы.Поставщик,
			|	Дозаказы.КодТовараПоставщика,
			|	Дозаказы.НаименованиеТовараПоставщика,
			|	Дозаказы.Количество,
			|	Дозаказы.Цена,
			|	Дозаказы.Цена*Дозаказы.Количество как Сумма,
			|	Дозаказы.ЦенаРозн
			|ИЗ
			|	РегистрСведений.Дозаказы КАК Дозаказы
			|ГДЕ
			|	Дозаказы.Аптека = &Аптека
			|	И Дозаказы.Выгружена = ЛОЖЬ
			|	И Дозаказы.ДатаСоздания >= &ДатаСоздания
			|	И Дозаказы.Документ <> Значение(Документ.ИнтернетЗаказ.ПустаяСсылка)
			|	" + ?(ЭксклюзивныйПоставщик = Неопределено, "", " И Дозаказы.Поставщик в (&ПоставщикиТаймСлота) ") + "";
			
			Запрос.УстановитьПараметр("Аптека",Заявка.Склад);
			Запрос.УстановитьПараметр("ДатаСоздания",НачалоДня(ТекущаяДата()) - 24*60*60);
			Запрос.УстановитьПараметр("ПоставщикиТаймСлота",ЭксклюзивныйПоставщик);

			ИндЗаказ = Запрос.Выполнить();
			Если НЕ ИндЗаказ.Пустой() Тогда
				//ТЗЗаказа = Новый ТаблицаЗначений; //закоментировать строку
				Если ТЗЗаказа.Колонки.Найти("КодИндПозиции") = Неопределено Тогда
					ТЗЗаказа.Колонки.Добавить("КодИндПозиции");
				КонецЕсли;
				
				Если ТЗЗаказа.Колонки.Найти("ЦенаРозн") = Неопределено Тогда
					ТЗЗаказа.Колонки.Добавить("ЦенаРозн");
				КонецЕсли;			
				
				Выборка = ИндЗаказ.Выбрать();
				Пока Выборка.Следующий() Цикл
					Отбор = Новый Структура;
					Отбор.Вставить("Товар",Выборка.Товар);
					Отбор.Вставить("Поставщик",Выборка.Поставщик);
					НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(ТЗЗаказа.Добавить(),Выборка);
					Иначе
						ТекСтрока = НайденныеСтроки.Получить(0);  //Двух одинаковых товаров не может быть в ТЗзаказа
						ТекСтрока.Количество = Макс(ТекСтрока.Количество,Выборка.Количество); //Выбираем максимальное количество. По ТЗ Санакоева
						ТекСтрока.Сумма		 = ТекСтрока.Количество*ТекСтрока.Цена;
						ТекСтрока.КодИндПозиции = Выборка.КодИндПозиции;
						ТекСтрока.ЦенаРозн = Выборка.ЦенаРозн;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//Закончили добор заказа позициями из отложенного заказа
	//Иначе
	//	Если Заявка.РаботаЧерезКонвертер Тогда 
	//		РаспределитьДокументПоПоставщикам366(Заявка.Ссылка,ТЗЗаказа,ТЗОтказов,ТЗПревышений,"",Ложь);
	//	Иначе
	//		РаспределитьДокументПоПоставщикам(Заявка.Ссылка,ТЗЗаказа,ТЗОтказов,ТЗПревышений,Неопределено,Ложь);
	//	КонецЕсли;
	//КонецЕсли;	
	Если Заявка.Склад.ИнтернетАптека = Истина Тогда
		СтруктураКВыгрузке = СоздатьДокументыЗаказаПоКоробам(Заявка.Ссылка,ТЗЗаказа,ТЗПревышений);
	Иначе
		СтруктураКВыгрузке = СоздатьДокументыЗаказа(Заявка.Ссылка,ТЗЗаказа,ТЗПревышений);
	КонецЕсли;
	
	Если СтруктураКВыгрузке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьОтказыИЗаявку(Заявка.Ссылка,ТЗОтказов);	
	
	Если НЕ РучнойРежим Тогда
		ВыгрузитьДокументыПоставщику(СтруктураКВыгрузке);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПривестиККратности(Потребность,Объект,ЗначениеВВерх,ЗначениеВниз)
	
	Преобразовали = Ложь;
	
	Если Потребность > Объект Тогда
		КолЦелых = Цел(Потребность/Объект);
		
		ОстатокОтОбъекта = Потребность/Объект - КолЦелых;
		
		Если ОстатокОтОбъекта >= ЗначениеВВерх Тогда
			Потребность = (Колцелых+1)*Объект;
			Преобразовали = Истина;
		ИначеЕсли ОстатокОтОбъекта <= ЗначениеВниз Тогда
			Потребность = КолЦелых*Объект;
			Преобразовали = Истина;
		КонецЕсли;
	ИначеЕсли   Потребность < Объект Тогда
		
		ОстатокОтОбъекта = Потребность/Объект;
		
		Если ОстатокОтОбъекта >= ЗначениеВВерх Тогда
			Потребность = Объект;
			Преобразовали = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Преобразовали;
	
	
	
КонецФункции

Процедура ОбработатьСтрокуЗаказаСУчетомКратности(стр)
		Если стр.Кратность > 1 Тогда
			
			Если Окр(стр.Количество/стр.Кратность,0)*стр.Кратность  = стр.Количество Тогда
				стр.БылаКорректировкаКратности = Истина;
				Возврат;
			КонецЕсли;
			
			Если стр.Цена < 50 Тогда
				Отклонение = 0.3;
			ИначеЕсли стр.Цена >=50 и стр.Цена < 300 Тогда
				Отклонение = 0.4;
			ИначеЕсли стр.Цена >=300 Тогда
				Отклонение = 0.5;				
			КонецЕсли;
			
			стр.БылаКорректировкаКратности = ПривестиККратности(стр.Количество,стр.Кратность,Отклонение,Отклонение);
			
			Если стр.БылаКорректировкаКратности Тогда
				Если стр.Количество > стр.ОстатокПоставщика Тогда
					Если стр.Кратность > стр.ОстатокПоставщика Тогда //Добавлено условие 01.09.2016
						стр.Количество = стр.ОстатокПоставщика;
					Иначе
						стр.Количество = стр.Количество - стр.Кратность;
						стр.Количество = ?(стр.Количество <=0, 0 , стр.Количество);
					КонецЕсли;
				КОнецЕсли;
			КонецЕсли;
			стр.Сумма = стр.Цена*стр.Количество;
			
			//КоличествоИтоговое = Окр(стр.Количество/стр.Кратность,0)*стр.Кратность;
			//	Если КоличествоИтоговое = стр.Количество Тогда
			//		Возврат;
			//	КонецЕсли;
			//	
			//	Если КоличествоИтоговое <= стр.ОстатокПоставщика Тогда
			//		стр.Количество = КоличествоИтоговое;
			//	Иначе
			//		КоличествоИтоговое = КоличествоИтоговое - стр.Кратность;
			//		стр.Количество = ?(КоличествоИтоговое <=0,0,КоличествоИтоговое);
			//	КонецЕсли;
			//	стр.Сумма = стр.Цена*стр.Количество;
			//	стр.БылаКорректировкаКратности = Истина;
			//Иначе
			//	стр.Количество = 0;
			//	стр.Сумма = стр.Цена*стр.Количество;
			//КонецЕсли;
			//
			Если стр.Количество = 0 Тогда
				стр.ПерераспределитьПоКратности = Истина;
			КонецЕсли;
			
		КонецЕсли;
 КонецПроцедуры

Функция ПолучитьТаблицуОграниченийПоТоварам(НастройкиПостроителя,ТЗКодыТовара = Неопределено) 	Экспорт
	
	НастрПостроителя = ЗначениеИзСтрокиВнутр(НастройкиПостроителя);
	
	Построитель = Новый ПостроительОтчета;
	Если Не ТЗКодыТовара = Неопределено Тогда
		Построитель.Текст =
		"ВЫБРАТЬ
		|	АП.Ссылка КАК Товар,
		|	АП.Код КАК КодТовара
		|ИЗ
		|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		|ГДЕ АП.Код в (&КодыТовара)
		|{ГДЕ
		|	АП.Ссылка.* КАК Товар}
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодТовара";
	Иначе
		Построитель.Текст =
		"ВЫБРАТЬ
		|	АП.Ссылка КАК Товар,
		|	АП.Код КАК КодТовара
		|ИЗ
		|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		|{ГДЕ
		|	АП.Ссылка.* КАК Товар}
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодТовара";
	КонецЕсли;
	
	Попытка
		Построитель.УстановитьНастройки(НастрПостроителя);
		Если Не ТЗКодыТовара = Неопределено Тогда
			Построитель.Параметры.Вставить("КодыТовара",ТЗКодыТовара);
		КонецЕсли;
	Исключение
		//Сообщить("Ошибка загрузки правил анализа");
		Возврат Неопределено;
	КонецПопытки;
	
	Построитель.Выполнить();
	
	Возврат Построитель.Результат.Выгрузить();	
	
	 
КонецФункции


Функция ПолучитьТЗПутиОпт()
	
	ТЗПутиОпт = Новый ТаблицаЗначений;
	ТЗПутиОпт.Колонки.Добавить("КодТовара",Новый ОписаниеТипов("Число"));
	ТЗПутиОпт.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));	
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПрайсЛисты.Код КАК КодТовара,
		               |	СУММА(ПрайсЛисты.Количество) КАК Количество
		               |ИЗ
		               |	РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
		               |		ПО ПрайсЛисты.КодПрайсЛиста = КаталогПрайсЛистов.КодПрайсЛиста
		               |			И (КаталогПрайсЛистов.КодПоставщика = 3498)
		               |ГДЕ
		               |	ПрайсЛисты.Количество > 0
		               |	И КаталогПрайсЛистов.Настройка.Активность = Истина
		               |	И КаталогПрайсЛистов.Настройка.Владелец.ОсуществляетПрямыеПоставки = Истина
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПрайсЛисты.Код";
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗПутиОпт.Добавить();
		НоваяСтрока.КодТовара = Число(Выборка.КодТовара);
		НоваяСтрока.Количество = Выборка.Количество;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.КодТовара,
	               |	Т.Количество
	               |ПОМЕСТИТЬ Выборка1
	               |ИЗ
	               |	&Таб КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПрайсЛисты.Код,
	               |	ПрайсЛисты.Товар,
	               |	ПрайсЛисты.Количество,
	               |	КаталогПрайсЛистов.КодПоставщика,
	               |	Поставщики.ПоставщикСвязок
	               |ПОМЕСТИТЬ Выборка2
	               |ИЗ
	               |	РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики КАК Поставщики
	               |			ПО КаталогПрайсЛистов.КодПоставщика = Поставщики.Код
	               |		ПО ПрайсЛисты.КодПрайсЛиста = КаталогПрайсЛистов.КодПрайсЛиста
	               |			И (КаталогПрайсЛистов.КодПоставщика в (3499 , 3500 ))
	               |ГДЕ
	               |	ПрайсЛисты.Количество > 0
	               |	И КаталогПрайсЛистов.Настройка.Активность = ИСТИНА
	               |	И КаталогПрайсЛистов.Настройка.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Выборка3.Товар,
	               |	СУММА(Выборка3.Количество) КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СвязкиТовараСПоставщиком.ТоварФирмы КАК Товар,
	               |		СУММА(Выборка2.Количество) КАК Количество
	               |	ИЗ
	               |		Выборка2 КАК Выборка2
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	               |			ПО Выборка2.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	               |				И Выборка2.ПоставщикСвязок = СвязкиТовараСПоставщиком.Поставщик
	               //|				И (Выборка2.КодПоставщика = 3499)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СвязкиТовараСПоставщиком.ТоварФирмы
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АП.Ссылка,
	               |		СУММА(Выборка1.Количество)
	               |	ИЗ
	               |		Выборка1 КАК Выборка1
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
	               |			ПО Выборка1.КодТовара = АП.Код
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		АП.Ссылка) КАК Выборка3
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выборка3.Товар
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(Выборка3.Количество) > 10
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Выборка1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Выборка2";
				   
		Запрос.УстановитьПараметр("Таб",ТЗПутиОпт);
		
		Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//===================================================================================================================================
//Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков)
//
//ОПИСАНИЕ :
// 	По документу "заявка на товар", учитывая СписокПоставщиков, распределяется товар. Полученные данные проверяются на минимальную сумму
//	заказа и, если необходимо, то дозаказывается количество. Если дозаказать нельзя, тогда перераспределяется товар на других поставщиков.
//ПАРАМЕТРЫ : 
//  1. Док - Документ.ЗаявкаНаТовар
//  2. ТЗЗаказа - в эту переменную выгружается распределенный заказ
//  3. ТЗОтказов - в эту переменную выгружаются отказы 
//  4. СписокПоставщиков - Если надо распределять только по определенным поставщикам, то заполняется список
//	5. ОтфильтроватьПоСпискуПоставщиков - ИСТИНА/ЛОЖЬ , если надо распределить только по определенным поставщикам,
//		то передается ИСТИНА 
//===================================================================================================================================
Процедура РаспределитьДокументПоПоставщикамБезКонвертера(Док,
	ТЗЗаказа,
	ТЗОтказов,
	ТЗПревышений,
	ОбслуживаемыеПоставщики=Неопределено,
	ОтфильтроватьПоСпискуПоставщиков,
	УчитыватьТоварВПути = Истина,
	УчитыватьРанееВыгруженныеЗаказы = Ложь,
	ПрисоединятьДозаказы = Истина) Экспорт
	                                           
	УчитыватьЭксклюзив = Константы.УчитыватьЭксклюзивыПриЗаказе.Получить();
	УчитыватьИсключения = Константы.УчитыватьИсключенияПриЗаказе.Получить();
	УчитыватьОптовыеТоварыВПути = Константы.УчитыватьОптовыеТоварыВПути.Получить();
	
	Ориола = Справочники.Поставщики.НайтиПоКоду(582);
	
	Если ОбслуживаемыеПоставщики = Неопределено Тогда
		СписокПоставщиков = "";
	      Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                 |	ОбслуживаемыеАптеки.Владелец.Владелец КАК Поставщики
		                 |ИЗ
		                 |	Справочник.КонтрактыИАптеки КАК ОбслуживаемыеАптеки
		                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияАптекаПоставщик КАК Искл
		                 |		ПО (Искл.Поставщик = ОбслуживаемыеАптеки.Владелец.Владелец)
		                 |			И (Искл.Аптека = &Аптека)
		                 |ГДЕ
		                 |	ОбслуживаемыеАптеки.Аптека = &Аптека
		                 |	И ОбслуживаемыеАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
		                 |	И ОбслуживаемыеАптеки.Активность = ИСТИНА
		                 |	И ОбслуживаемыеАптеки.Владелец.Активность = ИСТИНА
		                 |	И ВЫБОР
		                 |			КОГДА ОбслуживаемыеАптеки.Владелец.Владелец.Код В (&СписокПоставщиков)
		                 |				ТОГДА ЛОЖЬ
		                 |			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
		                 |		КОНЕЦ = ЛОЖЬ
						 | И Искл.Поставщик есть NULL";
		  
		Запрос.УстановитьПараметр("Аптека",Док.Склад);
		Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
		Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
        ОбслуживаемыеПоставщики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Поставщики");
	  
	КонецЕсли;
	
	//ТЗТоваров = Док.Товар.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Ссылка как ТоварСсылка из Справочник.Ассортиментный_План как АП где АП.Производитель = &Производитель или АП.Бренд = &Бренд";
	Запрос.УстановитьПараметр("Производитель",Справочники.Производители.НайтиПоНаименованию("СОКОЛ КОМПАНИ"));
	Запрос.УстановитьПараметр("Бренд",Справочники.Брэнды.НайтиПоНаименованию("СТЭЛМАС",Истина));
	ИсключенияСроков = Запрос.Выполнить().Выгрузить();
	
	//ТЗПутиОпт = ПолучитьТЗПутиОпт();
	
	
	Запрос = Неопределено;
	
		  
	//ТХТ = "ВЫБРАТЬ
	//      |	Т.Товар,
	//      |	Т.Количество
	//      |ПОМЕСТИТЬ ТоварыВПутиОпт
	//      |ИЗ
	//      |	&Таб КАК Т ГДЕ Истина = &УчитыватьОптовыеТоварыВПути ; ";
	
	ТХТ =  "
		  |ВЫБРАТЬ
	      |	КаталогПрайсЛистов.Настройка.Владелец КАК Поставщик,
		  |	Выбор когда КаталогПрайсЛистов.Настройка.Владелец.ПоставщикСвязок = ЗНАЧЕНИЕ(Справочник.Поставщики.ПустаяСсылка) Тогда КаталогПрайсЛистов.Настройка.Владелец ИНАЧЕ КаталогПрайсЛистов.Настройка.Владелец.ПоставщикСвязок КОНЕЦ КАК ПоставщикСвязки,
	      |	КаталогПрайсЛистов.Настройка КАК Настройка,
	      |	КаталогПрайсЛистов.КодПрайсЛиста,
	      |	ВЫБОР
	      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	      |			ТОГДА 1
	      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	      |	КОНЕЦ КАК БазовыйКоэфф,
	      |	ВЫБОР
	      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены = 0
	      |			ТОГДА 1
	      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены
	      |	КОНЕЦ КАК КоэффПриведения,
	      |	ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, КаталогПрайсЛистов.Настройка.МинимальныйСрокГодности) КАК МинСрокГодности,
	      |	КаталогПрайсЛистов.Настройка.НеУчитыватьОтказыПриЗаказе КАК НеучитыватьОтказыПриЗаказе,
		  |	КаталогПрайсЛистов.Настройка.НаличиеЭДО как НаличиеЭДО,
		  |	КаталогПрайсЛистов.Настройка.ПреобразованиеКСпайкамКоробам как ПреобразованиеКСпайкамКоробам,
		  |	КаталогПрайсЛистов.Настройка.Владелец.ПринадлежитГруппеКомпаний как ПринадлежитГруппеКомпаний
	      |ПОМЕСТИТЬ Параметры
	      |ИЗ
	      |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	      |			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	      |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияАптекаПоставщик КАК Искл
	      |		ПО (Искл.Поставщик = КонтрактыИАптеки.Владелец.Владелец)
	      |			И (Искл.Аптека = &Аптека)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПревышенияЛимитаЗаказа КАК ЛимитЗаказа
	      |		ПО (ЛимитЗаказа.Дата = &НачДата)
	      |			И (ЛимитЗаказа.Поставщик = КонтрактыИАптеки.Владелец.Владелец)
	      |ГДЕ
	      |	КонтрактыИАптеки.Активность = ИСТИНА
	      |	И КонтрактыИАптеки.Аптека = &Аптека
	      |	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	      |	И КонтрактыИАптеки.Владелец.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |	И Искл.Поставщик ЕСТЬ NULL 
		  |	И ЛимитЗаказа.Поставщик ЕСТЬ NULL " + ?(ОтфильтроватьПоСпискуПоставщиков, " И КонтрактыИАптеки.Владелец.Владелец в (&ОбслуживаемыеПоставщики) ", "" )  + " 		  
	      |;
	      |
	      |ВЫБРАТЬ
	      |	АП.Ссылка КАК Товар,
	      |	СУММА(Выборка.КоличествоОстаток) КАК ВПути
	      |ПОМЕСТИТЬ ТоварыВПутиОпт
	      |ИЗ
	      |	(
		  |	
	      |	ВЫБРАТЬ
	      |		ПодтверждениеЗаказаОстатки.КодТовара,
	      |		ПодтверждениеЗаказаОстатки.КоличествоОстаток
	      |	ИЗ
	      |		РегистрНакопления.ПодтверждениеЗаказа.Остатки(, ) КАК ПодтверждениеЗаказаОстатки
	      |	
	      |	ОБЪЕДИНИТЬ ВСЕ
	      |	
	      |	ВЫБРАТЬ
	      |		ОжидаемыйТоварОстатки.КодТовара,
	      |		ОжидаемыйТоварОстатки.КоличествоОстаток
	      |	ИЗ
	      |		РегистрНакопления.ОжидаемыйТовар.Остатки(, ) КАК ОжидаемыйТоварОстатки) КАК Выборка
	      |    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АП
		  |						ПО (АП.Код = Выборка.КодТовара)
	      |СГРУППИРОВАТЬ ПО
	      |	АП.Ссылка
	      |
	      |ИМЕЮЩИЕ
	      |	СУММА(Выборка.КоличествоОстаток) > 0
		  |ИНДЕКСИРОВАТЬ ПО
		  |Товар
		  |;		  
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Остатки.Товар,
	      |	Остатки.КоличествоОстаток
	      |ПОМЕСТИТЬ ТоварыВПути
	      |ИЗ
	      |	РегистрНакопления.ЗаказПоставщику.Остатки(
	      |			,
	      |			Склад = &Аптека
	      |				И ИСТИНА = &УчитыватьТоварВПути) КАК Остатки
		  |ГДЕ Остатки.КоличествоОстаток > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ВыборкаПотребности.Товар,
	      |	МАКСИМУМ(ВыборкаПотребности.Количество) КАК Количество,
		  |	МАКСИМУМ(ВыборкаПотребности.КодИндПозиции) как КодИндПозиции
	      |ПОМЕСТИТЬ ПотребностьАптеки
	      |ИЗ
	      |	(ВЫБРАТЬ
	      |		ЗаявкаНаТоварТовар.Товар КАК Товар,
	      |		ЗаявкаНаТоварТовар.Количество КАК Количество,
	      |		0 КАК КодИндПозиции
	      |	ИЗ
	      |		Документ.ЗаявкаНаТовар.Товар КАК ЗаявкаНаТоварТовар
	      |	ГДЕ
	      |		ЗаявкаНаТоварТовар.Ссылка = &Документ
	      |	
	      |	ОБЪЕДИНИТЬ
	      |	
	      |	ВЫБРАТЬ
	      |		Дозаказы.Товар,
	      |		МИНИМУМ(Дозаказы.Количество),
	      |		МИНИМУМ(Дозаказы.КодПозиции)
	      |	ИЗ
	      |		РегистрСведений.Дозаказы КАК Дозаказы
	      |	ГДЕ
	      |		Дозаказы.Аптека = &Аптека
	      |		И Дозаказы.Выгружена = ЛОЖЬ
	      |		И Дозаказы.ДатаСоздания >= &ДатаСозданияОтложенногоЗаказа
	      |		И Дозаказы.Документ = ЗНАЧЕНИЕ(Документ.ИнтернетЗаказ.ПустаяСсылка)
		  |		И &ПрисоединятьДозаказы = Истина
	      |	
	      |	СГРУППИРОВАТЬ ПО
	      |		Дозаказы.Товар) КАК ВыборкаПотребности
	      |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВПути КАК ТоварыВПути
	      |		ПО (ТоварыВПути.Товар = ВыборкаПотребности.Товар)
	      |ГДЕ
	      |	ТоварыВПути.Товар ЕСТЬ NULL 
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	ВыборкаПотребности.Товар
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТоварыВПути
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ОтказыПоЗаказам.Поставщик КАК Поставщик,
	      |	ОтказыПоЗаказам.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ОтказыПоЗаказам КАК ОтказыПоЗаказам
	      |ГДЕ
		  |	ОтказыПоЗаказам.Дата >= &НачДата  и НЕ ОтказыПоЗаказам.Поставщик в (Выбрать Параметры.Поставщик из Параметры ГДЕ НеУчитыватьОтказыПриЗаказе = Истина)
	      //|	ОтказыПоЗаказам.Дата >= ДобавитьКДате(&НачДата,ДЕНЬ,-1)
	      |	И ОтказыПоЗаказам.ПричинаОтказа = ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.Отказпоставщика)  И ОтказыПоЗаказам.Документ.Дата >= &НачДата
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
	      |		Параметры.Поставщик КАК Поставщик,
		  |		Параметры.ПринадлежитГруппеКомпаний,
	      |		Прайсы.КодПрайсЛиста КАК КодПрайсЛиста,
	      |		Прайсы.НомерЗаписи КАК НомерЗаписи,
	      |		Прайсы.Код КАК Код,
	      |		Прайсы.Товар КАК ТоварПоставщика,
	      |		ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2)) КАК Цена,
	      |		ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф * Параметры.КоэффПриведения КАК ЧИСЛО(12, 2)) КАК ЦенаПриведенная,
	      |		Связки.ТоварФирмы КАК Товар,
	      |		Прайсы.Количество КАК Количество,
	      |		ПотребностьАптеки.Количество КАК КоличествоАптеки,
	      |		Связки.ТоварФирмы.МинимальныйЗаказ КАК МинЗаказ,
		  |		Связки.ТоварФирмы.ГруппаНаценки КАК ГруппаНаценки,
	      |		Прайсы.Кратность КАК Кратность,
	      |		Прайсы.СрокГодности КАК СрокГодности,
	      |		Параметры.Настройка КАК Настройка,
		  |		Параметры.НаличиеЭДО КАК НаличиеЭДО,
		  |		ПотребностьАптеки.КодИндПозиции КАК КодИндПозиции,
		  |		Выбор когда Параметры.ПреобразованиеКСпайкамКоробам = Истина Тогда Прайсы.КоличествоВСпайке Иначе 0 КОНЕЦ как Спайка,
		  |		Выбор когда Параметры.ПреобразованиеКСпайкамКоробам = Истина Тогда Прайсы.КоличествоВКоробе Иначе 0 КОНЕЦ как Короб
		  |ПОМЕСТИТЬ СводныйПрайсЛист
	      |	ИЗ
	      |		РегистрСведений.ПрайсЛисты КАК Прайсы
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	      |			ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	      |			ПО Прайсы.ПоставщикСвязки = Связки.Поставщик
	      |				И Прайсы.Код = Связки.КодТовараПоставщика
	      |				И (Связки.Блокировка = ЛОЖЬ)
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотребностьАптеки КАК ПотребностьАптеки
	      |			ПО (ПотребностьАптеки.Товар = Связки.ТоварФирмы)
	      |			ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |			ПО (РегПерезаказов.Поставщик = Связки.Поставщик)
	      |				И (РегПерезаказов.Товар = Связки.ТоварФирмы)
	      |	ГДЕ
	      |		Прайсы.Количество > 0  и  Прайсы.Количество >= Прайсы.Кратность
	      |		И Прайсы.Цена > 0
	      |		И (Прайсы.СрокГодности >= Параметры.МинСрокГодности
	      |				ИЛИ Прайсы.СрокГодности = ДАТАВРЕМЯ(1, 1, 1)
	      |				ИЛИ Связки.ТоварФирмы В (&ИсключенияСроков))
	      |		И РегПерезаказов.Поставщик ЕСТЬ NULL 
		  |ИНДЕКСИРОВАТЬ ПО Связки.ТоварФирмы
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СводныйПрайсЛист.КодПрайсЛиста,
	      |	СводныйПрайсЛист.НомерЗаписи,
	      |	СводныйПрайсЛист.Поставщик,
	      |	СводныйПрайсЛист.Код,
	      |	СводныйПрайсЛист.ТоварПоставщика,
	      |	СводныйПрайсЛист.Количество КАК Количество,
	      |	СводныйПрайсЛист.Цена,
	      |	СводныйПрайсЛист.ЦенаПриведенная*ЕСТЬNULL(Коэфф.Коэффициент,1) КАК ЦенаПриведенная,
	      |	СводныйПрайсЛист.Товар.Код КАК КодТовара,
	      |	СводныйПрайсЛист.Товар КАК Товар,
	      |	СводныйПрайсЛист.КоличествоАптеки,
	      |	СводныйПрайсЛист.МинЗаказ,
	      |	СводныйПрайсЛист.Кратность,
	      |	СводныйПрайсЛист.СрокГодности,
	      |	СводныйПрайсЛист.Настройка,
		  |	СводныйПрайсЛист.НаличиеЭДО,
		  |	СводныйПрайсЛист.КодИндПозиции,
	      |	ЕСТЬNULL(ЭксПост.flag, 0) КАК flag,
		  |	ВЫБОР КОГДА СводныйПрайсЛист.Поставщик = &Ориола ТОГДА СводныйПрайсЛист.СрокГодности ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ КАК СрокДляСортировки,
		  |	СводныйПрайсЛист.Спайка,
		  |	СводныйПрайсЛист.Короб
	      |ПОМЕСТИТЬ ИтоговыйЗаказ
	      |ИЗ
	      |	СводныйПрайсЛист КАК СводныйПрайсЛист
		  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбмена.КоэффициентыГруппНаценок  как Коэфф 
		  |							ПО Коэфф.Ссылка = СводныйПрайсЛист.Настройка
		  |							И  Коэфф.ГруппаНаценки = СводныйПрайсЛист.ГруппаНаценки и Коэфф.Коэффициент > 0
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						Параметры.Поставщик
	      |					ИЗ
	      |						Параметры)) КАК ЭксПостУник
	      |		ПО СводныйПрайсЛист.Товар = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						Параметры.Поставщик
	      |					ИЗ
	      |						Параметры)) КАК ЭксПост
	      |		ПО СводныйПрайсЛист.Товар = ЭксПост.Товар
	      |			И СводныйПрайсЛист.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СводныйПрайсЛист.Товар = Исключения.Товар
	      |			И СводныйПрайсЛист.Поставщик = Исключения.Поставщик
		  |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВПутиОпт как ТоварыВПутиОпт ПО ТоварыВПутиОпт.Товар = СводныйПрайсЛист.Товар и СводныйПрайсЛист.ПринадлежитГруппеКомпаний = Ложь  и &УчитыватьОптовыеТоварыВПути = Истина
	      |ГДЕ
	      |	(ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0   и  ТоварыВПутиОпт.Товар есть NULL
	      |;
		  |ВЫБРАТЬ 
	      |
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
		  |	Максимум(Выбор когда Связки.КодТовараПоставщика есть NULL Тогда ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ) как ЕстьСвязка
		  |ПОМЕСТИТЬ ВТДефектура
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки	
	      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК Связки
	      |			ПО Связки.Поставщик в (Выбрать различные ПоставщикСвязки из Параметры)
	      |				И Связки.ТоварФирмы = ПотребностьАптеки.Товар
	      |				И (Связки.Блокировка = ЛОЖЬ)		  
	      |ГДЕ
	      |	НЕ ПотребностьАптеки.Товар В
	      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |					ИтоговыйЗаказ.Товар
	      |				ИЗ
	      |					ИтоговыйЗаказ)
		  |СГРУППИРОВАТЬ ПО 
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество		  
	      |;
		  |
		  |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ 
	      |	&Дата КАК Дата,
	      |	ВТДефектура.Товар,
	      |	ВТДефектура.Количество,
	      |	0 КАК Цена,
	      |	0 КАК Сумма,
	      |	&Аптека КАК Склад,
	      |	&Документ КАК Документ,
	      |	"""" КАК КодТовараПоставщика,
	      |	"""" КАК НаименованиеТОвараПоставщика,
	      |	"""" КАК НомерЗаявкиАптеки,
	      |	ВЫБОР КОГДА ВТДефектура.ЕстьСвязка ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.ОтсутствиеОстатка) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.ОтсутствиеСвязки) КОНЕЦ КАК ПричинаОтказа,
	      |	"""" КАК Комментарий,
	      |	&ПустойПоставщик КАК Поставщик
	      |ИЗ
	      |	ВТДефектура КАК ВТДефектура
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИтоговыйЗаказ.КодПрайсЛиста КАК КаталогПрайса,
	      |	ИтоговыйЗаказ.НомерЗаписи,
		  |	ИтоговыйЗаказ.НаличиеЭДО,
		  |	ИтоговыйЗаказ.Настройка,
	      |	ИтоговыйЗаказ.Поставщик,
	      |	ИтоговыйЗаказ.Настройка.СуммаМинимальногоЗаказа КАК СуммаМинимальногоЗаказа,
	      |	ИтоговыйЗаказ.Настройка.СуммаПороговая КАК СуммаПороговаяЗаказа,
	      |	ИтоговыйЗаказ.Поставщик.НеПринимаетДозаказ КАК НеПринимаетДозаказ,
	      |	ИтоговыйЗаказ.Код КАК Код,
	      |	ИтоговыйЗаказ.ТоварПоставщика КАК ТоварПоставщика,
	      |	ИтоговыйЗаказ.Количество КАК Количество,
	      |	ИтоговыйЗаказ.Цена,
	      |	ИтоговыйЗаказ.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	ИтоговыйЗаказ.КодТовара,
	      |	ИтоговыйЗаказ.Товар,
	      |	ИтоговыйЗаказ.КоличествоАптеки,
	      |	ИтоговыйЗаказ.МинЗаказ КАК МинЗаказ,
	      |	ИтоговыйЗаказ.Кратность КАК Кратность,
	      |	ИтоговыйЗаказ.СрокГодности КАК СрокГодности,
	      |	ИтоговыйЗаказ.flag КАК flag,
	      |	Матрица.ГруппаАПИтог КАК ГруппаАП,
	      |	ВЫБОР
	      |		КОГДА ИсключенияДобора.Товар ЕСТЬ NULL 
	      |			ТОГДА ЛОЖЬ
	      |		ИНАЧЕ ИСТИНА
	      |	КОНЕЦ КАК ИсключитьИзДобора,
		  |	ИтоговыйЗаказ.КодИндПозиции как КодИндПозиции ,
		  |	ИтоговыйЗаказ.Спайка,
		  |	ИтоговыйЗаказ.Короб
	      |ИЗ
	      |	ИтоговыйЗаказ КАК ИтоговыйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
	      |		ПО (Матрица.Аптека = &Аптека)
	      |			И (Матрица.Товар = ИтоговыйЗаказ.Товар)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияДобора КАК ИсключенияДобора
	      |		ПО (ИсключенияДобора.Товар = ИтоговыйЗаказ.Товар)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИтоговыйЗаказ.Товар.Наименование,
	      |	flag УБЫВ,
	      |	ЦенаПриведенная,
		  |	СрокДляСортировки,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ПотребностьАптеки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ИтоговыйЗаказ
	      |;
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТДефектура
	      |;
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ СводныйПрайсЛист
	      |;
	      |УНИЧТОЖИТЬ ТоварыВПутиОпт
		  |;
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Параметры";		  

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаСозданияОтложенногоЗаказа",НачалоДня(ТекущаяДата())-24*60*60);
	Запрос.УстановитьПараметр("ПустаяСТрока","");
	Запрос.УстановитьПараметр("Документ",Док);
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",УчитыватьЭксклюзив);
	Запрос.УстановитьПараметр("УчитыватьИсключения",УчитыватьИсключения);
	Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
	Запрос.УстановитьПараметр("ОбслуживаемыеПоставщики",ОбслуживаемыеПоставщики);
	Запрос.УстановитьПараметр("УчитыватьТоварВПути",УчитыватьТоварВПути);
	Запрос.УстановитьПараметр("УчитыватьОптовыеТоварыВПути",УчитыватьОптовыеТоварыВПути);
	Запрос.УстановитьПараметр("НачДата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонДата",КонецДня(ТекущаяДата()));
	СрокГодности = НачалоДня(ТекущаяДата()) + 24*60*60*180;
	ПустойСрок = ОМ3_ПустаяДата();
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	Запрос.УстановитьПараметр("ИсключенияСроков",ИсключенияСроков.ВыгрузитьКолонку("ТоварСсылка"));
	Запрос.УстановитьПараметр("ПустойПоставщик",Справочники.Поставщики.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ориола",Ориола);
	Запрос.УстановитьПараметр("ПрисоединятьДозаказы",ПрисоединятьДозаказы);
	//Запрос.УстановитьПараметр("Таб",ТЗПутиОпт);


	
	//Сообщить("Время выполнения запроса начало:" + ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТЗОтказов = МассивРезультатов[9].Выгрузить();
	ТЗСводныйПрайс = МассивРезультатов[10].Выгрузить();
	//Сообщить("Время выполнения запроса конец:" + ТекущаяДата());
	
	ТЗЗаказа = Новый ТаблицаЗначений;
	ТЗЗаказа.Колонки.Добавить("КаталогПрайса",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("НомерЗаписи",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("КодТовара",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Товар",Новый ОписаниеТипов("СправочникСсылка.Ассортиментный_план"));
	ТЗЗаказа.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Поставщик",Новый ОписаниеТипов("СправочникСсылка.Поставщики"));
	ТЗЗаказа.Колонки.Добавить("Настройка",Новый ОписаниеТипов("СправочникСсылка.НастройкиОбмена"));
	ТЗЗаказа.Колонки.Добавить("НаличиеЭДО",Новый ОписаниеТипов("Булево"));
	ТЗЗаказа.Колонки.Добавить("КодТовараПоставщика",Новый ОписаниеТипов("Строка"));
	ТЗЗаказа.Колонки.Добавить("НаименованиеТовараПоставщика",Новый ОписаниеТипов("Строка"));
	ТЗЗаказа.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Сумма");
	ТЗЗаказа.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗЗаказа.Колонки.Добавить("Кратность");
	ТЗЗаказа.Колонки.Добавить("МинЗаказ");
	ТЗЗаказа.Колонки.Добавить("ГруппаАП");
	ТЗЗаказа.Колонки.Добавить("БылаКорректировкаКратности");
	ТЗЗаказа.Колонки.Добавить("ОстатокПоставщика");
	ТЗЗаказа.Колонки.Добавить("ПерераспределитьПоКратности");
	ТЗЗаказа.Колонки.Добавить("БылоПерераспределениеПоКратности");
	ТЗЗаказа.Колонки.Добавить("ПотребностьАптекиКоличество");
	ТЗЗаказа.Колонки.Добавить("СуммаМинимальногоЗаказа");
	ТЗЗаказа.Колонки.Добавить("СуммаПороговаяЗаказа");
	ТЗЗаказа.Колонки.Добавить("НеПринимаетДозаказ");
	ТЗЗаказа.Колонки.Добавить("Превышение");
	ТЗЗаказа.Колонки.Добавить("ПроверитьНаПревышение");
	ТЗЗаказа.Колонки.Добавить("ИсключитьИзДобора",Новый ОписаниеТипов("Булево"));
	ТЗЗаказа.Колонки.Добавить("КодИндПозиции",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Спайка",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Короб",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("ПривиденККоробу",Новый ОписаниеТипов("Число"));	

	Если УчитыватьРанееВыгруженныеЗаказы Тогда
		
		Если ТипЗнч(Док) = Тип("ДокументСсылка.Заказ") Тогда
			
			ТХТ = "ВЫБРАТЬ
			|	Заказ.Поставщик как Поставщик,
			|	СУММА(Заказ.СуммаДок) КАК СуммаДок
			|ИЗ
			|	Документ.Заказ КАК Заказ
			|ГДЕ
			|	Заказ.ПометкаУдаления = ЛОЖЬ
			|	И Заказ.Дата >= &Дата
			|	И Заказ.Склад = &Склад
			|	И НЕ Заказ.Ссылка = &Док
			|
			|СГРУППИРОВАТЬ ПО
			|	Заказ.Поставщик";
			
		Иначе
			ТХТ = "ВЫБРАТЬ
			|	Заказ.Поставщик как Поставщик,
			|	СУММА(Заказ.СуммаДок) КАК СуммаДок
			|ИЗ
			|	Документ.Заказ КАК Заказ
			|ГДЕ
			|	Заказ.ПометкаУдаления = ЛОЖЬ
			|	И Заказ.Дата >= &Дата
			|	И Заказ.Склад = &Склад
			|
			|СГРУППИРОВАТЬ ПО
			|	Заказ.Поставщик";		  
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Склад",Док.Склад);
		Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Док",Док);
		
		ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	

	//====== Вариант первый ======//
	СтарыйТовар = "";
	Потребность = 0;
	ТЗПоставщиковИсключенныхПоКратностям = Новый ТаблицаЗначений;
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Поставщик");
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Товар");
	СписокПоставщиков = Новый СписокЗначений;
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	СписокКратныхПозиций = Новый СписокЗначений;
	ПерваяЦена = 0;	
	//Сообщить("Первый вариант начало : " + ТекущаяДата());
	ДЛя каждого стр из ТЗСводныйПрайс Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если СтарыйТовар <> стр.Товар Тогда
			Потребность = стр.КоличествоАптеки;
			СтарыйТовар = стр.Товар;
		КонецЕсли;
		// Пропускаем , если уже все заказали и всего хватило
		Если Потребность <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.Количество >= Потребность Тогда
			Заказать = Потребность;
			Потребность = 0;
		Иначе
			Заказать = стр.Количество;
			Потребность = Потребность - стр.Количество;
		КонецЕсли;
		НоваяСтрока				= ТЗЗаказа.Добавить();	
		НоваяСтрока.КаталогПрайса= стр.КаталогПрайса;
		НоваяСтрока.Настройка = стр.Настройка;
		НоваяСтрока.НаличиеЭДО = стр.НаличиеЭДО;
		НоваяСтрока.НомерЗаписи	= стр.НомерЗаписи;
		НоваяСтрока.КодТовара	= стр.КодТовара;
		НоваяСтрока.Товар		= стр.Товар;
		НоваяСтрока.Количество	= Заказать;
		НоваяСтрока.ПотребностьАптекиКоличество	= Заказать;
		НоваяСтрока.Цена		= стр.Цена;
		НоваяСтрока.Сумма		= стр.Цена*Заказать;
		НоваяСтрока.Поставщик	= стр.поставщик;
		НоваяСтрока.КодТовараПоставщика = стр.Код;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
		НоваяСтрока.Кратность	= стр.Кратность;
		НоваяСтрока.СрокГодности= стр.СрокГодности;
		НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
		НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
		НоваяСтрока.ОстатокПоставщика = стр.Количество;
		НоваяСтрока.БылаКорректировкаКратности = Ложь;
		НоваяСтрока.ПерераспределитьПоКратности = Ложь;
		НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
		НоваяСтрока.СуммаМинимальногоЗаказа = стр.СуммаМинимальногоЗаказа;
		НоваяСтрока.СуммаПороговаяЗаказа = стр.СуммаПороговаяЗаказа;
		НоваяСтрока.НеПринимаетДозаказ = стр.НеПринимаетДозаказ;
		НоваяСтрока.ИсключитьИзДобора = стр.ИсключитьИзДобора;
		НоваяСтрока.КодИндПозиции = стр.КодИндПозиции;
		НоваяСтрока.Спайка = стр.Спайка;
		НоваяСтрока.Короб = стр.Короб;
		НоваяСтрока.Превышение = Ложь;
		НоваяСтрока.ПривиденККоробу = Ложь;
		
		Если стр.Кратность > 1 Тогда  //Проверяем на кратность 
			ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
			//Если по кратности не проходим, запоминаем связку товар-поставщик для исключения при дальнейшем перераспределении
			//и восстанавливаем потребность аптеки в исходное количество
			//Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда 
 			Если НоваяСтрока.БылаКорректировкаКратности = Ложь Тогда           // Это именно отказ по кратности
				Потребность = стр.КоличествоАптеки;	
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
				стрИсключения = ТЗПоставщиковИсключенныхПоКратностям.Добавить();
				стрИсключения.Поставщик = стр.Поставщик;
				стрИсключения.Товар = стр.Товар;
				
				НоваяСтрокаОтказа = ТЗОтказов.Добавить();
				НоваяСтрокаОтказа.Дата = Док.Дата;
				НоваяСтрокаОтказа.Документ = Док.Ссылка;
				НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
				НоваяСтрокаОтказа.Склад = Док.Склад;
				НоваяСтрокаОтказа.Товар = стр.Товар;
				НоваяСтрокаОтказа.Количество = Потребность;
				НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
				НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
				НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
				
				СписокКратныхПозиций.Добавить(НоваяСтрокаОтказа);
			ИначеЕсли НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда   // это именно отказ по нехватке остатка у поставщика после преобразования по кратности
				Потребность = стр.КоличествоАптеки;	
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
				стрИсключения = ТЗПоставщиковИсключенныхПоКратностям.Добавить();
				стрИсключения.Поставщик = стр.Поставщик;
				стрИсключения.Товар = стр.Товар;
				
				НоваяСтрокаОтказа = ТЗОтказов.Добавить();
				НоваяСтрокаОтказа.Дата = Док.Дата;
				НоваяСтрокаОтказа.Документ = Док.Ссылка;
				НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
				НоваяСтрокаОтказа.Склад = Док.Склад;
				НоваяСтрокаОтказа.Товар = стр.Товар;
				НоваяСтрокаОтказа.Количество = Потребность;
				НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтсутствиеОстатка;
				НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
				НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
				
				СписокКратныхПозиций.Добавить(НоваяСтрокаОтказа);				
			КонецЕсли;
			
			
		КонецЕсли;
		//Проверим на превышение цены от первой (минимальной) цены по текущему товару
		//Если ПерваяЦена > 0 и НоваяСтрока.ПерераспределитьПоКратности = Ложь Тогда
		//	Если ПроверитьНаПревышениеЦены(ПерваяЦена,стр.Цена) = Истина Тогда
		//		//НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		//		//НоваяСтрокаОтказа.Товар = НоваяСтрока.Товар;
		//		//НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;
		//		//НоваяСтрокаОтказа.ПричинаОтказа = "отказ по превышению второй цены";
		//		
		//		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		//		НоваяСтрокаОтказа.Дата = Док.Дата;
		//		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		//		НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
		//		НоваяСтрокаОтказа.Склад = Док.Склад;
		//		НоваяСтрокаОтказа.Товар = стр.Товар;
		//		НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;;
		//		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
		//		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
		//		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
		//		
		//		
		//		
		//		СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	//Удалим строки из таблицы заказа, которые не прошли по кратностям и превышениям цены
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	СписокУдаляемыхСтрок.Очистить();
	
	Для каждого стр из СписокКратныхПозиций Цикл
		стрТовар = стр.Значение.Товар;
		НайденнаяСтрока = ТЗЗаказа.Найти(стрТовар,"Товар");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			 ТЗОтказов.Удалить(стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Док.Склад.ИнтернетАптека = Истина Тогда
		ТЗПревышений = ПолучитьТаблицуПревышенияЦенБезКонвертераДляИнтернетАптеки(ТЗЗаказа,Док.Склад);
	Иначе
		ТЗПревышений = ПолучитьТаблицуПревышенияЦенБезКонвертера(ТЗЗаказа,Док.Склад);
	КонецЕсли;
	
	ЕстьПревышения = Ложь;
	Для каждого стр из ТЗПревышений Цикл
		ЕстьПревышения = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик",стр.Поставщик);
		Отбор.Вставить("Товар",стр.Товар);
		Отбор.Вставить("Цена",стр.Цена);
		НайденныеСтроки = ТЗзаказа.НайтиСтроки(Отбор);
		Для каждого ТекСтрока из НайденныеСтроки Цикл
			 ТекСтрока.Превышение = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьПревышения Тогда
		ТЗЗаказа = ТЗЗаказа.Скопировать(Новый Структура("Превышение",Ложь));
	КонецЕсли;

	
	//Конец обработки таблицы заказа с учетом кратности позиций у поставщика
	
	//Сообщить("Первый вариант конец : " + ТекущаяДата());
	ТЗЗаказа.Сортировать("Поставщик,Товар,ГруппаАП,Количество убыв");	
	ТЗЗаказаСводная = ТЗЗаказа.Скопировать(,"Поставщик,СуммаПороговаяЗаказа,СуммаМинимальногоЗаказа,НеПринимаетДозаказ,Сумма");
	ТЗЗаказаСводная.Свернуть("Поставщик,СуммаПороговаяЗаказа,СуммаМинимальногоЗаказа,НеПринимаетДозаказ,","Сумма");
	ТЗЗаказаСводная.Колонки.Добавить("НадоДобирать");
	ТЗЗаказаСводная.Колонки.Добавить("НадоПерераспределять");
		
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.Сумма >= стр.СуммаМинимальногоЗаказа Тогда
			СписокПоставщиков.Добавить(стр.Поставщик);
			Продолжить;
		Иначе
			Если УчитыватьРанееВыгруженныеЗаказы Тогда
				Если ТЗРанееВыгруженных.Количество() > 0 Тогда			
					НайденнаяСтрока = ТЗРанееВыгруженных.Найти(стр.Поставщик,"Поставщик");
					Если НайденнаяСтрока <> Неопределено Тогда
						Если НЕ стр.НеПринимаетДозаказ = Истина Тогда
							СписокПоставщиков.Добавить(стр.Поставщик);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если стр.Сумма >= стр.СуммаПороговаяЗаказа Тогда
				СписокПоставщиков.Добавить(стр.Поставщик);
				стр.НадоДобирать = Истина;
			Иначе
				стр.НадоПерераспределять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	                                                        
	Запрос = Новый Запрос;
	//МВТ = Новый МенеджерВременныхТаблиц;
	//Запрос.МенеджерВременныхТаблиц = МВТ;
	//Запрос.Текст = "ВЫБРАТЬ
	//      |	Т.Товар,
	//      |	Т.Количество
	//      |ПОМЕСТИТЬ ТоварыВПутиОпт
	//      |ИЗ
	//      |	&Таб КАК Т ГДЕ Истина = &УчитыватьОптовыеТоварыВПути ; ";
	//Запрос.УстановитьПараметр("Таб",ТЗПутиОпт);
	//Запрос.УстановитьПараметр("УчитыватьОптовыеТоварыВПути",УчитыватьОптовыеТоварыВПути);
	//Запрос.Выполнить();

	
	ТХТ = "ВЫБРАТЬ
	      |	КаталогПрайсЛистов.Настройка.Владелец КАК Поставщик,
	      |	КаталогПрайсЛистов.Настройка.Владелец.ПринадлежитГруппеКомпаний КАК ПринадлежитГруппеКомпаний,
	      |	КаталогПрайсЛистов.Настройка КАК Настройка,
	      |	КаталогПрайсЛистов.Настройка.НаличиеЭДО КАК НаличиеЭДО,
	      |	КаталогПрайсЛистов.КодПрайсЛиста КАК КодПрайсЛиста,
	      |	ВЫБОР
	      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика = 0
	      |			ТОГДА 1
	      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентЦеныНаБазовыйПрайсПоставщика
	      |	КОНЕЦ КАК БазовыйКоэфф,
	      |	ВЫБОР
	      |		КОГДА КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены = 0
	      |			ТОГДА 1
	      |		ИНАЧЕ КаталогПрайсЛистов.Настройка.КоэффициентПриведенияЦены
	      |	КОНЕЦ КАК КоэффПриведения,
	      |	ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, КаталогПрайсЛистов.Настройка.МинимальныйСрокГодности) КАК МинСрокГодности,
	      |	КаталогПрайсЛистов.Настройка.ПреобразованиеКСпайкамКоробам КАК ПреобразованиеКСпайкамКоробам
	      |ПОМЕСТИТЬ Параметры
	      |ИЗ
	      |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК КаталогПрайсЛистов
	      |			ПО КонтрактыИНастройки.НастройкаОбмена = КаталогПрайсЛистов.Настройка
	      |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияАптекаПоставщик КАК Искл
	      |		ПО (Искл.Поставщик = КонтрактыИАптеки.Владелец.Владелец)
	      |			И (Искл.Аптека = &Аптека)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПревышенияЛимитаЗаказа КАК ЛимитЗаказа
	      |		ПО (ЛимитЗаказа.Дата = &НачДата)
	      |			И (ЛимитЗаказа.Поставщик = КонтрактыИАптеки.Владелец.Владелец)
	      |ГДЕ
	      |	КонтрактыИАптеки.Активность = ИСТИНА
	      |	И КонтрактыИАптеки.Аптека = &Аптека
	      |	И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	      |	И КаталогПрайсЛистов.Настройка.Владелец В(&СписокПоставщиков)
	      |	И Искл.Поставщик ЕСТЬ NULL
	      |	И ЛимитЗаказа.Поставщик ЕСТЬ NULL
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка.КодТовара КАК КодТовара,
	      |	СУММА(Выборка.КоличествоОстаток) КАК ВПути
	      |ПОМЕСТИТЬ ТоварыВПутиОпт
	      |ИЗ
	      |	(ВЫБРАТЬ
	      |		ПодтверждениеЗаказаОстатки.КодТовара КАК КодТовара,
	      |		ПодтверждениеЗаказаОстатки.КоличествоОстаток КАК КоличествоОстаток
	      |	ИЗ
	      |		РегистрНакопления.ПодтверждениеЗаказа.Остатки(, КодТовара = &КодТовара) КАК ПодтверждениеЗаказаОстатки
	      |	
	      |	ОБЪЕДИНИТЬ ВСЕ
	      |	
	      |	ВЫБРАТЬ
	      |		ОжидаемыйТоварОстатки.КодТовара,
	      |		ОжидаемыйТоварОстатки.КоличествоОстаток
	      |	ИЗ
	      |		РегистрНакопления.ОжидаемыйТовар.Остатки(, КодТовара = &КодТовара) КАК ОжидаемыйТоварОстатки) КАК Выборка
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Выборка.КодТовара
	      |
	      |ИМЕЮЩИЕ
	      |	СУММА(Выборка.КоличествоОстаток) > 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Прайсы.КодПрайсЛиста КАК КаталогПрайса,
	      |	Прайсы.НомерЗаписи КАК НомерЗаписи,
	      |	Параметры.Поставщик КАК Поставщик,
	      |	Прайсы.Код КАК Код,
	      |	Прайсы.Товар КАК ТоварПоставщика,
	      |	ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф КАК ЧИСЛО(12, 2)) КАК Цена,
	      |	ВЫРАЗИТЬ(Прайсы.Цена * Параметры.БазовыйКоэфф * Параметры.КоэффПриведения КАК ЧИСЛО(12, 2)) КАК ЦенаПриведенная,
	      |	Прайсы.Количество КАК Количество,
	      |	Прайсы.Кратность КАК Кратность,
	      |	Прайсы.СрокГодности КАК СрокГодности,
	      |	Параметры.Настройка КАК Настройка,
	      |	Параметры.НаличиеЭДО КАК НаличиеЭДО,
	      |	ВЫБОР
	      |		КОГДА Параметры.ПреобразованиеКСпайкамКоробам = ИСТИНА
	      |			ТОГДА Прайсы.КоличествоВСпайке
	      |		ИНАЧЕ 0
	      |	КОНЕЦ КАК Спайка,
	      |	ВЫБОР
	      |		КОГДА Параметры.ПреобразованиеКСпайкамКоробам = ИСТИНА
	      |			ТОГДА Прайсы.КоличествоВКоробе
	      |		ИНАЧЕ 0
	      |	КОНЕЦ КАК Короб
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Параметры КАК Параметры
	      |			ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВПутиОпт КАК ТоварыВПутиОпт
	      |			ПО (ТоварыВПутиОпт.КодТовара = &КодТовара)
	      |				И (Параметры.ПринадлежитГруппеКомпаний = ЛОЖЬ)
	      |		ПО Прайсы.КодПрайсЛиста = Параметры.КодПрайсЛиста
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |		ПО Прайсы.ПоставщикСвязки = СвязкиТовараСПоставщиком.Поставщик
	      |			И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |			И (СвязкиТовараСПоставщиком.ТоварФирмы = &Товар)
	      |			И (СвязкиТовараСПоставщиком.Блокировка = ЛОЖЬ)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ОтказыПоЗаказам.Поставщик КАК Поставщик,
	      |			ОтказыПоЗаказам.Товар КАК Товар
	      |		ИЗ
	      |			РегистрСведений.ОтказыПоЗаказам КАК ОтказыПоЗаказам
	      |		ГДЕ
	      |			ОтказыПоЗаказам.Дата >= ДОБАВИТЬКДАТЕ(&НачДата, ДЕНЬ, -1)
	      |			И ОтказыПоЗаказам.ПричинаОтказа = ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.Отказпоставщика)
	      |			И ОтказыПоЗаказам.Документ.Дата >= &НачДата
	      |			И ОтказыПоЗаказам.Товар = &Товар) КАК РегПерезаказов
	      |		ПО (РегПерезаказов.Поставщик = СвязкиТовараСПоставщиком.Поставщик)
	      |			И (РегПерезаказов.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Товар = &Товар
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В(&ОбслуживаемыеПоставщики)) КАК ЭксПостУник
	      |		ПО (СвязкиТовараСПоставщиком.ТоварФирмы = ЭксПостУник.Товар)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Товар = &Товар
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В(&ОбслуживаемыеПоставщики)) КАК ЭксПост
	      |		ПО (СвязкиТовараСПоставщиком.ТоварФирмы = ЭксПост.Товар)
	      |			И (СвязкиТовараСПоставщиком.Поставщик = ЭксПост.Поставщик)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Товар = &Товар
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО (СвязкиТовараСПоставщиком.ТоварФирмы = Исключения.Товар)
	      |			И (СвязкиТовараСПоставщиком.Поставщик = Исключения.Поставщик)
	      |ГДЕ
	      |	СвязкиТовараСПоставщиком.Поставщик В(&СписокПоставщиков)
	      |	И РегПерезаказов.Поставщик ЕСТЬ NULL
	      |	И СвязкиТовараСПоставщиком.ТоварФирмы = &Товар
	      |	И Прайсы.Количество > 0
	      |	И Прайсы.Количество >= Прайсы.Кратность
	      |	И (Прайсы.СрокГодности >= Параметры.МинСрокГодности
	      |			ИЛИ Прайсы.СрокГодности = &ПустойСрок)
	      |	И (ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0
	      |	И ТоварыВПутиОпт.КодТовара ЕСТЬ NULL
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Параметры";
		  
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("НачДата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонДата",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	Запрос.УстановитьПараметр("ОбслуживаемыеПоставщики",ОбслуживаемыеПоставщики);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",УчитыватьЭксклюзив);
	Запрос.УстановитьПараметр("УчитыватьИсключения",УчитыватьИсключения);
	

	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.НадоДобирать = Истина Тогда  //Дозакажем, если надо
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			СуммаПоПоставщику = стр.Сумма;
			Для каждого Элемент из НайденныеСтроки Цикл
				Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
					Продолжить;	
				КонецЕсли;
				Если Элемент.ИсключитьИзДобора = Истина Тогда  //позиции исключенные из добора не добираем
					Продолжить;	
				КонецЕсли;				
				СтараяСумма = Элемент.Сумма;
				Если СуммаПоПоставщику >= стр.СуммаМинимальногоЗаказа Тогда
					Прервать;
				КонецЕсли;
				
				Если Элемент.ГруппаАП = "A" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Макс(Элемент.Количество*1.3,Элемент.Количество+2),0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 300 Тогда
						Элемент.Количество = Окр(Макс(Элемент.Количество*1.1,Элемент.Количество+1),0);
					КонецЕсли;
				ИначеЕсли Элемент.ГруппаАП = "B" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.1,0);
					КонецЕсли;
				КонецЕсли;
					
				Если Элемент.МинЗаказ > 0 Тогда					
					Если Элемент.Количество < Элемент.МинЗаказ Тогда
						Элемент.Количество = Элемент.МинЗаказ;
					Иначе
						Элемент.Количество = Окр(Элемент.Количество/Элемент.МинЗаказ,0)*Элемент.МинЗаказ;
					КонецЕсли;
				КонецЕсли;	
				
				Элемент.Сумма = Элемент.Количество*Элемент.Цена;
				Дельта = Элемент.Сумма - СтараяСумма;
				СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
				
			КонецЦикла;
			//Второй заход по ТЗ Санакоева. Пытаемся добрать еще разок 03.04.2014
			Если СуммаПоПоставщику < стр.СуммаМинимальногоЗаказа Тогда
				Для каждого Элемент из НайденныеСтроки Цикл
					Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
						Продолжить;	
					КонецЕсли;
					
					Если Элемент.ИсключитьИзДобора = Истина Тогда  //позиции исключенные из добора не добираем
						Продолжить;	
					КонецЕсли;		
					
					СтараяСумма = Элемент.Сумма;
					Если СуммаПоПоставщику >= стр.СуммаМинимальногоЗаказа Тогда
						Прервать;
					КонецЕсли;
					
					Если Элемент.ГруппаАП = "A" Тогда
						Элемент.Количество = Окр(Макс(Элемент.Количество*1.3,Элемент.Количество+1),0);
					ИначеЕсли Элемент.ГруппаАП = "B" Тогда
						Если  Элемент.Цена < 100 Тогда
							Элемент.Количество = Элемент.Количество + 1;
						КонецЕсли;
					КонецЕсли;
					
					Элемент.Сумма = Элемент.Количество*Элемент.Цена;
					Дельта = Элемент.Сумма - СтараяСумма;
					СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
					
				КонецЦикла;	
			КонецЕсли;
		ИначеЕсли стр.НадоПерераспределять = Истина Тогда  //Перераспределим на других поставщиков
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Для каждого Элемент из НайденныеСтроки Цикл
			    СписокПоставщиковДляЗапроса = СписокПоставщиков.Скопировать();  //Для корректировки с учетом кратности

				//Оказалось что отсекать не надо , ибо эксклюзивы регулируются справочником эксклюзивов. отключено 05.04.2014
				//Если Элемент.Товар.Поставщик <> Справочники.Поставщики.ПустаяСсылка() Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Если Элемент.Кратность > 1 Тогда
					СписокПоставщиковДляУдаления = Новый СписокЗначений;
					Для каждого стр из СписокПоставщиковДляЗапроса Цикл
						ОтборПТ = Новый Структура("Товар,Поставщик",Элемент.Товар,стр.Значение);
						НашлиСтроки = ТЗПоставщиковИсключенныхПоКратностям.НайтиСтроки(ОтборПТ);
						Если НашлиСтроки.Количество() > 0 Тогда
							СписокПоставщиковДляУдаления.Добавить(стр);							
						КонецЕсли;
					КонецЦикла;
					Для каждого стр из СписокПоставщиковДляУдаления Цикл
						СписокПоставщиковДляЗапроса.Удалить(стр.Значение);	
					КонецЦикла;
				КонецЕсли;				
				
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиковДляЗапроса);
				Запрос.УстановитьПараметр("Товар",Элемент.Товар);
				Запрос.УстановитьПараметр("КодТовара",Элемент.КодТовара);
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("БылаКорректировкаКратности");
				ТЗ.Колонки.Добавить("ОстатокПоставщика");
				ТЗ.Колонки.Добавить("ПерераспределитьПоКратности");
				ТЗ.Колонки.Добавить("БылоПерераспределениеПоКратности");
				ТЗ.Колонки.Добавить("ПотребностьАптекиКоличество");
				ТЗ.Колонки.Добавить("ПроверитьНаПревышение");

				Если Элемент.Количество = 0 Тогда
					Потребность = Элемент.ПотребностьАптекиКоличество;
				Иначе
					Потребность = Элемент.Количество;
				КонецЕсли;
				номер = 0;
				Для каждого стрТЗ из ТЗ цикл
					номер = номер + 1;
					Если Потребность <= 0 Тогда
						Прервать;
					КонецЕсли;
					Заказать = Мин(стрТЗ.Количество,Потребность);
					Потребность = Потребность - Заказать;
					
					Цена = стрТЗ.Цена;
					//-----------------Проверим цену на допустимое отклонение---------------------
					//Если ПроверитьНаПревышениеЦены(Элемент.Цена,Цена) = Истина Тогда
					//	Прервать;
					//КонецЕсли;						
					
					
					НоваяСтрока = ТЗЗаказа.Добавить();				
					НоваяСтрока.КаталогПрайса= стрТЗ.КаталогПрайса;
					НоваяСтрока.Настройка	= стрТЗ.Настройка;					
					НоваяСтрока.НаличиеЭДО	= стрТЗ.НаличиеЭДО;					
					НоваяСтрока.НомерЗаписи	= стрТЗ.НомерЗаписи;					
					НоваяСтрока.КодТовара	= Элемент.КодТовара;  // берем из верхнего цикла 
					НоваяСтрока.Товар		= Элемент.Товар;      // берем из верхнего цикла 
					НоваяСтрока.Количество	= Заказать;
					НоваяСтрока.Цена		= Цена;
					НоваяСтрока.Сумма		= Цена*Заказать;
					НоваяСтрока.Поставщик	= стрТЗ.поставщик;
					НоваяСтрока.КодТовараПоставщика = стрТЗ.Код;
					НоваяСтрока.НаименованиеТовараПоставщика = стрТЗ.ТоварПоставщика;	
					НоваяСтрока.МинЗаказ	= Элемент.МинЗаказ;    // берем из верхнего цикла 
					НоваяСтрока.ГруппаАП	= Элемент.ГруппаАП;    // берем из верхнего цикла 
					НоваяСтрока.Кратность	= стрТЗ.Кратность;
					НоваяСтрока.СрокГодности= стрТЗ.СрокГодности;
					НоваяСтрока.ОстатокПоставщика = стрТЗ.Количество;
					НоваяСтрока.БылаКорректировкаКратности = Ложь;
					НоваяСтрока.ПерераспределитьПоКратности = Ложь;
					НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
					НоваяСтрока.ПроверитьНаПревышение = Истина;
					НоваяСтрока.ИсключитьИзДобора = Ложь; //после перераспределния добор всё равно не осуществляется, поэтому ставим ложь
					НоваяСтрока.КодИндПозиции = Элемент.КодИндПозиции;  // берем из верхнего цикла 
					НоваяСтрока.Спайка = стрТЗ.Спайка;
					НоваяСтрока.Короб = стрТЗ.Короб;
					НоваяСтрока.ПривиденККоробу = Ложь;


					//Обработаем строку с учетом кратности.  Если и тут не прошла то, запоминаем новую строчку для удаления
					Если стрТЗ.Кратность > 1 Тогда
						ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
						Если НоваяСтрока.БылоПерераспределениеПоКратности = Ложь Тогда
							НоваяСтрокаОтказа = ТЗОтказов.Добавить();
							НоваяСтрокаОтказа.Дата = Док.Дата;
							НоваяСтрокаОтказа.Документ = Док.Ссылка;
							НоваяСтрокаОтказа.Поставщик = стрТЗ.Поставщик;
							НоваяСтрокаОтказа.Склад = Док.Склад;
							НоваяСтрокаОтказа.Товар = Элемент.Товар;
							НоваяСтрокаОтказа.Количество = Элемент.ПотребностьАптекиКоличество;   // берем из верхнего цикла 
							НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
							НоваяСтрокаОтказа.КодТовараПоставщика = стрТЗ.Код;
							НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стрТЗ.ТоварПоставщика;							
							СписокУдаляемыхСтрок.Добавить(НоваяСтрока);		
						ИначеЕсли НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда
							НоваяСтрокаОтказа = ТЗОтказов.Добавить();
							НоваяСтрокаОтказа.Дата = Док.Дата;
							НоваяСтрокаОтказа.Документ = Док.Ссылка;
							НоваяСтрокаОтказа.Поставщик = стрТЗ.Поставщик;
							НоваяСтрокаОтказа.Склад = Док.Склад;
							НоваяСтрокаОтказа.Товар = Элемент.Товар;
							НоваяСтрокаОтказа.Количество = Элемент.ПотребностьАптекиКоличество;   // берем из верхнего цикла 
							НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтсутствиеОстатка;
							НоваяСтрокаОтказа.КодТовараПоставщика = стрТЗ.Код;
							НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стрТЗ.ТоварПоставщика;
							СписокУдаляемыхСтрок.Добавить(НоваяСтрока);		
						КонецЕсли;
					КонецЕсли;
					
					Нашли = ТЗЗаказаСводная.Найти(стрТЗ.Поставщик,"Поставщик");
					Нашли.Сумма = Нашли.Сумма + НоваяСтрока.Сумма;
					Если Номер = 1 Тогда
						СписокУдаляемыхСтрок.Добавить(Элемент);
					КонецЕсли;
					
				КонецЦикла;
				
			
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
	//Запрос.МенеджерВременныхТаблиц.Закрыть();
	//МВТ.Закрыть();
	//Удалим перераспределенные строки
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	// Здесь удалим строки, которые надо было перераспределить по кратности, но не попавшие под общее перераспределение	
	СписокУдаляемыхСтрок.Очистить();
	Отбор = Новый Структура;
	Отбор.Вставить("ПерераспределитьПоКратности",Истина);
	ЕщеСтрокаДЛяУдаления = ТЗЗаказа.НайтиСтроки(Отбор);
	Для каждого стр из ЕщеСтрокаДЛяУдаления Цикл
		СписокУдаляемыхСтрок.Добавить(стр);	
	КонецЦикла;
	
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		
		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		НоваяСтрокаОтказа.Дата = Док.Дата;
		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		НоваяСтрокаОтказа.Поставщик = стр.Значение.Поставщик;
		НоваяСтрокаОтказа.Склад = Док.Склад;
		НоваяСтрокаОтказа.Товар = стр.Значение.Товар;
		НоваяСтрокаОтказа.Количество = стр.Значение.ПотребностьАптекиКоличество;
		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Значение.Код;
		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.Значение.ТоварПоставщика;
		
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	
	ТЗНаПроверку =  ТЗЗаказа.Скопировать(Новый Структура("ПроверитьНаПревышение",Истина));
	Если Док.Склад.ИнтернетАптека = Истина Тогда
		ТЗПревышений2 = ПолучитьТаблицуПревышенияЦенБезКонвертераДляИнтернетАптеки(ТЗНаПроверку,Док.Склад);
	Иначе
		ТЗПревышений2 = ПолучитьТаблицуПревышенияЦенБезКонвертера(ТЗНаПроверку,Док.Склад);
	КонецЕсли;
	
	ТЗНаПроверку = Неопределено;
	ЕстьПревышения = Ложь;
	Для каждого стр из ТЗПревышений2 Цикл
		ЕстьПревышения = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик",стр.Поставщик);
		Отбор.Вставить("Товар",стр.Товар);
		Отбор.Вставить("Цена",стр.Цена);
		НайденныеСтроки = ТЗзаказа.НайтиСтроки(Отбор);
		Для каждого ТекСтрока из НайденныеСтроки Цикл
			 ТекСтрока.Превышение = Истина;
		 КонецЦикла;
		 
		ЗаполнитьЗначенияСвойств(ТЗПревышений.Добавить(),стр);
		
	КонецЦикла;
	
	Если ЕстьПревышения Тогда
		ТЗЗаказа = ТЗЗаказа.Скопировать(Новый Структура("Превышение",Ложь));
	КонецЕсли;
	
	//Откорректируем заказ с учетом матрицы корректировки по поставщикам
	Если НЕ Док.Склад.РасчетАвтозаказаБезПересчетаСкоростей Тогда
		
		ШаблонАптеки = ПолучитьШаблонАптеки(Док.Склад);
		
		СписокУдаляемыхСтрок.Очистить();
		МК = Справочники.МатрицаКорректировкиЗаказа.Выбрать();
		Пока МК.Следующий() Цикл
			Если НЕ МК.Включен Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ МК.ИсключатьПоШаблону.Найти(ШаблонАптеки,"Шаблон") = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			Отбор =  Новый Структура;
			Отбор.Вставить("Поставщик",МК.Поставщик);			

			Если МК.ЕстьОграничениеПоТовару и ЗначениеЗаполнено(МК.НастройкиПостроителя) Тогда
				ТЗОтбораПоТовару = ПолучитьТаблицуОграниченийПоТоварам(МК.НастройкиПостроителя,ТЗЗаказа.Скопировать(Отбор,"КодТовара"));
				ТЗОтбораПоТовару.Индексы.Добавить("КодТовара");

			Иначе
				ТЗОтбораПоТовару = Неопределено;
			КонецЕсли;
			
			//Отбор.Вставить("Кратность",1);   //Позиции, имеющие кратность отгрузки, не надо увеличивать
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Если ТЗОтбораПоТовару = Неопределено Тогда
				Для каждого стрЗак из НайденныеСтроки Цикл
					Для каждого стрМатрица из МК.Матрица Цикл
						Если стрЗак.ГруппаАП = стрМатрица.ГруппаАП Тогда
							стрЗак.Количество = Окр(стрЗак.Количество*стрМатрица.Коэффициент,0);
							стрЗак.Сумма	  = стрЗак.Количество*стрЗак.Цена;
							Если стрЗак.Количество < 1 Тогда 
								СписокУдаляемыхСтрок.Добавить(стрЗак);
							Иначе
								ОбработатьСтрокуЗаказаСУчетомКратности(стрЗак);
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			Иначе
				Для каждого стрЗак из НайденныеСтроки Цикл
					НашлиВОтборе = ТЗОтбораПоТовару.Найти(стрЗак.КодТовара,"КодТовара");
					Если НЕ НашлиВОтборе = Неопределено Тогда
						Для каждого стрМатрица из МК.Матрица Цикл
							Если стрЗак.ГруппаАП = стрМатрица.ГруппаАП Тогда
								стрЗак.Количество = Окр(стрЗак.Количество*стрМатрица.Коэффициент,0);
								стрЗак.Сумма	  = стрЗак.Количество*стрЗак.Цена;
								Если стрЗак.Количество < 1 Тогда 
									СписокУдаляемыхСтрок.Добавить(стрЗак);
								Иначе
									ОбработатьСтрокуЗаказаСУчетомКратности(стрЗак);
								КонецЕсли;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого стр из СписокУдаляемыхСтрок Цикл
			ТЗЗаказа.Удалить(стр.Значение);	
		КонецЦикла;
	КонецЕсли;
	//Конец корректировки заказа по матрице корректировки по поставщикам
	Если Док.Склад.ИнтернетАптека = Истина Тогда
		ПреобразоватьККоробам(ТЗЗаказа,0.8,0.2);
		ПреобразоватьКСпайкам(ТЗЗаказа,0.6,0.3);
	Иначе
		ПреобразоватьККоробам(ТЗЗаказа,0.95,0.05);
		ПреобразоватьКСпайкам(ТЗЗаказа,0.7,0.3);
	КонецЕсли;
	
		  
КонецПроцедуры

					
Процедура ПреобразоватьКСпайкам(ТЗЗаказа, ЗначениеВВерх,ЗначениеВниз)
	
	Для каждого стр из ТЗЗаказа Цикл
		
		Если стр.Спайка > 0 Тогда
			
			Если стр.Количество > стр.Спайка Тогда
				КолЦелых = Цел(стр.Количество/стр.Спайка);
				
				ОстатокОтОбъекта = стр.Количество/стр.Спайка - КолЦелых;
				
				Если ОстатокОтОбъекта >= ЗначениеВВерх Тогда
					стр.Количество = (Колцелых+1)*стр.Спайка;

				ИначеЕсли ОстатокОтОбъекта <= ЗначениеВниз Тогда
					стр.Количество = КолЦелых*стр.Спайка;

				КонецЕсли;
			ИначеЕсли   стр.Количество < стр.Спайка Тогда
				
				ОстатокОтОбъекта = стр.Количество/стр.Спайка;
				
				Если ОстатокОтОбъекта >= ЗначениеВВерх Тогда
					стр.Количество = стр.Спайка;

				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПреобразоватьККоробам(ТЗЗаказа, ЗначениеВВерх,ЗначениеВниз)
	
	Для каждого стр из ТЗЗаказа Цикл
		
		Если стр.Короб > 0 Тогда
			
			Если стр.Количество > стр.Короб Тогда
				КолЦелых = Цел(стр.Количество/стр.Короб);
				
				ОстатокОтОбъекта = стр.Количество/стр.Короб - КолЦелых;
				
				Если ОстатокОтОбъекта >= ЗначениеВВерх Тогда
					стр.Количество = (Колцелых+1)*стр.Короб;
					стр.ПривиденККоробу = Истина;

				ИначеЕсли ОстатокОтОбъекта <= ЗначениеВниз Тогда
					стр.Количество = КолЦелых*стр.Короб;
					стр.ПривиденККоробу = Истина;

				КонецЕсли;
			ИначеЕсли   стр.Количество < стр.Короб Тогда
				
				ОстатокОтОбъекта = стр.Количество/стр.Короб;
				
				Если ОстатокОтОбъекта >= ЗначениеВВерх Тогда
					стр.Количество = стр.Короб;
					стр.ПривиденККоробу = Истина;

				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



//===================================================================================================================================
//Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков)
//
//ОПИСАНИЕ :
// 	По документу "заявка на товар", учитывая СписокПоставщиков, распределяется товар. Полученные данные проверяются на минимальную сумму
//	заказа и, если необходимо, то дозаказывается количество. Если дозаказать нельзя, тогда перераспределяется товар на других поставщиков.
//ПАРАМЕТРЫ : 
//  1. Док - Документ.ЗаявкаНаТовар
//  2. ТЗЗаказа - в эту переменную выгружается распределенный заказ
//  3. ТЗОтказов - в эту переменную выгружаются отказы 
//  4. СписокПоставщиков - Если надо распределять только по определенным поставщикам, то заполняется список
//	5. ОтфильтроватьПоСпискуПоставщиков - ИСТИНА/ЛОЖЬ , если надо распределить только по определенным поставщикам,
//		то передается ИСТИНА 
//===================================================================================================================================
Процедура РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,ТЗПревышений,ОбслуживаемыеПоставщики=Неопределено,ОтфильтроватьПоСпискуПоставщиков) Экспорт
	
	Если ОбслуживаемыеПоставщики = Неопределено Тогда
		СписокПоставщиков = "";
	      Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                 |	ОбслуживаемыеАптеки.Владелец КАК Поставщики
		                 |ИЗ
		                 |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
		                 |ГДЕ
		                 |	ОбслуживаемыеАптеки.Аптека = &Аптека
		                 |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
		                 |	И ВЫБОР
		                 |			КОГДА ОбслуживаемыеАптеки.Владелец.Код В (&СписокПоставщиков)
		                 |				ТОГДА ЛОЖЬ
		                 |			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
		                 |		КОНЕЦ = ЛОЖЬ";
		  
		Запрос.УстановитьПараметр("Аптека",Док.Склад);
		Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
		Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
        ОбслуживаемыеПоставщики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Поставщики");

		  
	КонецЕсли;
	
	//ТЗТоваров = Док.Товар.Выгрузить();
	
		  
	ТХТ = "ВЫБРАТЬ
	      |	Остатки.Товар,
	      |	Остатки.КоличествоОстаток
	      |ПОМЕСТИТЬ ТоварыВПути
	      |ИЗ
	      |	РегистрНакопления.ЗаказПоставщику.Остатки(, Склад = &Аптека) КАК Остатки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ЗаявкаНаТоварТовар.Товар,
	      |	ЗаявкаНаТоварТовар.Количество
		  |ПОМЕСТИТЬ ПотребностьАптеки
		  |ИЗ
	      |	Документ.ЗаявкаНаТовар.Товар КАК ЗаявкаНаТоварТовар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВПути КАК ТоварыВПути
	      |		ПО (ТоварыВПути.Товар = ЗаявкаНаТоварТовар.Товар)
	      |ГДЕ
	      |	ЗаявкаНаТоварТовар.Ссылка = &Документ
	      |	И ТоварыВПути.Товар ЕСТЬ NULL 
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТоварыВПути;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПерезаказОтказов.Поставщик КАК Поставщик,
	      |	ПерезаказОтказов.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |ГДЕ
	      |	НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |	И ПерезаказОтказов.Склад = &Аптека
	      |;
	      |
		  //|////////////////////////////////////////////////////////////////////////////////
		  //|ВЫБРАТЬ РАЗЛИЧНЫЕ
		  //|	ОбслуживаемыеАптеки.Владелец КАК Поставщики
		  //|ПОМЕСТИТЬ ТЗОбслуживаемыхПоставщиков
		  //|ИЗ
		  //|	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
		  //|ГДЕ
		  //|	ОбслуживаемыеАптеки.Аптека = &Аптека
		  //|	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
		  //|	И ВЫБОР
		  //|			КОГДА ОбслуживаемыеАптеки.Владелец.Код В (&СписокПоставщиков)
		  //|				ТОГДА ЛОЖЬ
		  //|			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
		  //|		КОНЕЦ = ЛОЖЬ
		  //|;
		  //|
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка.Поставщик,
	      |	Выборка.Код,
	      |	Выборка.Товар КАК ТоварПоставщика,
	      |	Выборка.Количество КАК Количество,
	      |	Выборка.Цена,
	      |	Выборка.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	Выборка.ТоварФирмы КАК Товар,
	      |	Выборка.КоличествоАптеки,
	      |	Выборка.МинЗаказ,
	      |	Выборка.Кратность,
	      |	Выборка.СрокГодности
	      |ПОМЕСТИТЬ СводныйПрайсЛист
	      |ИЗ
	      |	(ВЫБРАТЬ
	      |		Прайсы.Поставщик КАК Поставщик,
	      |		Прайсы.Код КАК Код,
	      |		Прайсы.Товар КАК Товар,
	      |		Прайсы.Цена КАК Цена,
	      |		ВЫБОР
	      |			КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |					И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ЛОЖЬ
	      |				ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |			ИНАЧЕ ВЫБОР
	      |					КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |							И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ИСТИНА
	      |						ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |					ИНАЧЕ Прайсы.ЦенаПриведенная
	      |				КОНЕЦ
	      |		КОНЕЦ КАК ЦенаПриведенная,
	      |		СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
	      |		Прайсы.Количество КАК Количество,
	      |		ПотребностьАптеки.Количество КАК КоличествоАптеки,
	      |		СвязкиТовараСПоставщиком.ТоварФирмы.МинимальныйЗаказ КАК МинЗаказ,
	      |		Прайсы.Кратность КАК Кратность,
	      |		Прайсы.СрокГодности КАК СрокГодности
	      |	ИЗ
	      |		РегистрСведений.Прайсы КАК Прайсы
		  //|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗОбслуживаемыхПоставщиков КАК ТЗОбслуживаемыхПоставщиков
		  //|			ПО Прайсы.Поставщик = ТЗОбслуживаемыхПоставщиков.Поставщики
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |			ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	      |				И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |				И (СвязкиТовараСПоставщиком.Блокировка = ЛОЖЬ) и Прайсы.Поставщик в (&ОбслуживаемыеПоставщики)
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотребностьАптеки КАК ПотребностьАптеки
	      |			ПО (ПотребностьАптеки.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |			ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |			ПО (РегПерезаказов.Поставщик = Прайсы.Поставщик)
	      |				И (РегПерезаказов.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |	ГДЕ
		  |		Прайсы.Поставщик  в (&ОбслуживаемыеПоставщики)
		  |		И Прайсы.Количество > 0
	      |		И Прайсы.Цена > 0
	      |		И (Прайсы.СрокГодности > &СрокГодности
	      |				ИЛИ Прайсы.СрокГодности = &ПустойСрок)
	      |		И РегПерезаказов.Поставщик ЕСТЬ NULL ) КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СводныйПрайсЛист.Поставщик,
	      |	СводныйПрайсЛист.Код,
	      |	СводныйПрайсЛист.ТоварПоставщика,
	      |	СводныйПрайсЛист.Количество КАК Количество,
	      |	СводныйПрайсЛист.Цена,
	      |	СводныйПрайсЛист.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	СводныйПрайсЛист.Товар.Код КАК КодТовара,
	      |	СводныйПрайсЛист.Товар КАК Товар,
	      |	СводныйПрайсЛист.КоличествоАптеки,
	      |	СводныйПрайсЛист.МинЗаказ,
	      |	СводныйПрайсЛист.Кратность,
	      |	СводныйПрайсЛист.СрокГодности,
	      |	ЕСТЬNULL(ЭксПост.flag, 0) КАК flag
	      |ПОМЕСТИТЬ ИтоговыйЗаказ
	      |ИЗ
	      |	СводныйПрайсЛист КАК СводныйПрайсЛист
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В (&ОбслуживаемыеПоставщики)) КАК ЭксПостУник
	      |		ПО СводныйПрайсЛист.Товар = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В (&ОбслуживаемыеПоставщики)) КАК ЭксПост
	      |		ПО СводныйПрайсЛист.Товар = ЭксПост.Товар
	      |			И СводныйПрайсЛист.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СводныйПрайсЛист.Товар = Исключения.Товар
	      |			И СводныйПрайсЛист.Поставщик = Исключения.Поставщик
	      |ГДЕ
	      |	(ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
		  | &Дата как Дата,
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	0 КАК Цена,
	      |	0 КАК Сумма,
		  |	&Аптека КАК Склад,
		  | &Документ как Документ,
	      |	"""" КАК КодТовараПоставщика,
	      |	"""" КАК НаименованиеТОвараПоставщика,
	      |	"""" КАК НомерЗаявкиАптеки,
	      |	ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.ОтсутствиеОстаткаСвязки) КАК ПричинаОтказа,
		  | """" КАК Комментарий,
		  |	"""" КАК Поставщик
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |ГДЕ
	      |	НЕ ПотребностьАптеки.Товар В
	      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |					ИтоговыйЗаказ.Товар
	      |				ИЗ
	      |					ИтоговыйЗаказ)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИтоговыйЗаказ.Поставщик,
		  |	ИтоговыйЗаказ.Поставщик.СуммаМинимальногоЗаказа как СуммаМинимальногоЗаказа,
		  |	ИтоговыйЗаказ.Поставщик.СуммаПороговаяЗаказа как СуммаПороговаяЗаказа,
		  |	ИтоговыйЗаказ.Поставщик.НеПринимаетДозаказ как НеПринимаетДозаказ,
	      |	ИтоговыйЗаказ.Код КАК Код,
	      |	ИтоговыйЗаказ.ТоварПоставщика КАК ТоварПоставщика,
	      |	ИтоговыйЗаказ.Количество КАК Количество,
	      |	ИтоговыйЗаказ.Цена,
	      |	ИтоговыйЗаказ.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	ИтоговыйЗаказ.КодТовара,
	      |	ИтоговыйЗаказ.Товар,
	      |	ИтоговыйЗаказ.КоличествоАптеки,
	      |	ИтоговыйЗаказ.МинЗаказ КАК МинЗаказ,
	      |	ИтоговыйЗаказ.Кратность КАК Кратность,
	      |	ИтоговыйЗаказ.СрокГодности КАК СрокГодности,
	      |	ИтоговыйЗаказ.flag КАК flag,
	      |	Матрица.ГруппаАПИтог КАК ГруппаАП
	      |ИЗ
	      |	ИтоговыйЗаказ КАК ИтоговыйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
	      |		ПО (Матрица.Аптека = &Аптека)
	      |			И (Матрица.Товар = ИтоговыйЗаказ.Товар)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИтоговыйЗаказ.Товар.Наименование,
	      |	flag УБЫВ,
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ПотребностьАптеки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
		  //|УНИЧТОЖИТЬ ТЗОбслуживаемыхПоставщиков
		  //|;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ИтоговыйЗаказ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ СводныйПрайсЛист";		  

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	//Запрос.УстановитьПараметр("ТЗТоваров",ТЗТоваров);
	Запрос.УстановитьПараметр("ПустаяСТрока","");
	Запрос.УстановитьПараметр("Документ",Док);
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",Константы.УчитыватьЭксклюзивыПриЗаказе.Получить());
	Запрос.УстановитьПараметр("УчитыватьИсключения",Константы.УчитыватьИсключенияПриЗаказе.Получить());
	Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
	Запрос.УстановитьПараметр("ОбслуживаемыеПоставщики",ОбслуживаемыеПоставщики);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	СрокГодности = НачалоДня(ТекущаяДата()) + 24*60*60*120;
	ПустойСрок = ОМ3_ПустаяДата();
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	
	//Сообщить("Время выполнения запроса начало:" + ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТЗОтказов = МассивРезультатов[6].Выгрузить();
	ТЗСводныйПрайс = МассивРезультатов[7].Выгрузить();
	//Сообщить("Время выполнения запроса конец:" + ТекущаяДата());
	
	ТЗЗаказа = Новый ТаблицаЗначений;
	ТЗЗаказа.Колонки.Добавить("КодТовара");
	ТЗЗаказа.Колонки.Добавить("Товар",Новый ОписаниеТипов("СправочникСсылка.Ассортиментный_план"));
	ТЗЗаказа.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Поставщик",Новый ОписаниеТипов("СправочникСсылка.Поставщики"));
	ТЗЗаказа.Колонки.Добавить("КодТовараПоставщика",Новый ОписаниеТипов("Строка"));
	ТЗЗаказа.Колонки.Добавить("НаименованиеТовараПоставщика",Новый ОписаниеТипов("Строка"));
	ТЗЗаказа.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Сумма");
	ТЗЗаказа.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗЗаказа.Колонки.Добавить("Кратность");
	ТЗЗаказа.Колонки.Добавить("МинЗаказ");
	ТЗЗаказа.Колонки.Добавить("ГруппаАП");
	ТЗЗаказа.Колонки.Добавить("БылаКорректировкаКратности");
	ТЗЗаказа.Колонки.Добавить("ОстатокПоставщика");
	ТЗЗаказа.Колонки.Добавить("ПерераспределитьПоКратности");
	ТЗЗаказа.Колонки.Добавить("БылоПерераспределениеПоКратности");
	ТЗЗаказа.Колонки.Добавить("ПотребностьАптекиКоличество");
	ТЗЗаказа.Колонки.Добавить("СуммаМинимальногоЗаказа");
	ТЗЗаказа.Колонки.Добавить("СуммаПороговаяЗаказа");
	ТЗЗаказа.Колонки.Добавить("НеПринимаетДозаказ");
	ТЗЗаказа.Колонки.Добавить("Превышение");
	ТЗЗаказа.Колонки.Добавить("ПроверитьНаПревышение");

	


	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.Заказ") Тогда
		
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|	И НЕ Заказ.Ссылка = &Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";
		
	Иначе
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";		  
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Док.Склад);
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Док",Док);

	ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
	
	

	//====== Вариант первый ======//
	СтарыйТовар = "";
	Потребность = 0;
	ТЗПоставщиковИсключенныхПоКратностям = Новый ТаблицаЗначений;
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Поставщик");
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Товар");
	СписокПоставщиков = Новый СписокЗначений;
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	ПерваяЦена = 0;	
	//Сообщить("Первый вариант начало : " + ТекущаяДата());
	ДЛя каждого стр из ТЗСводныйПрайс Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если СтарыйТовар <> стр.Товар Тогда
			Потребность = стр.КоличествоАптеки;
			СтарыйТовар = стр.Товар;
		КонецЕсли;
		// Пропускаем , если уже все заказали и всего хватило
		Если Потребность <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.Количество >= Потребность Тогда
			Заказать = Потребность;
			Потребность = 0;
		Иначе
			Заказать = стр.Количество;
			Потребность = Потребность - стр.Количество;
		КонецЕсли;
		НоваяСтрока				= ТЗЗаказа.Добавить();				
		НоваяСтрока.КодТовара	= стр.КодТовара;
		НоваяСтрока.Товар		= стр.Товар;
		НоваяСтрока.Количество	= Заказать;
		НоваяСтрока.ПотребностьАптекиКоличество	= Заказать;
		НоваяСтрока.Цена		= стр.Цена;
		НоваяСтрока.Сумма		= стр.Цена*Заказать;
		НоваяСтрока.Поставщик	= стр.поставщик;
		НоваяСтрока.КодТовараПоставщика = стр.Код;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
		НоваяСтрока.Кратность	= стр.Кратность;
		НоваяСтрока.СрокГодности= стр.СрокГодности;
		НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
		НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
		НоваяСтрока.ОстатокПоставщика = стр.Количество;
		НоваяСтрока.БылаКорректировкаКратности = Ложь;
		НоваяСтрока.ПерераспределитьПоКратности = Ложь;
		НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
		НоваяСтрока.СуммаМинимальногоЗаказа = стр.СуммаМинимальногоЗаказа;
		НоваяСтрока.СуммаПороговаяЗаказа = стр.СуммаПороговаяЗаказа;
		НоваяСтрока.НеПринимаетДозаказ = стр.НеПринимаетДозаказ;
		НоваяСтрока.Превышение = Ложь;
		
		Если стр.Кратность > 1 Тогда  //Проверяем на кратность 
			ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
			//Если по кратности не проходим, запоминаем связку товар-поставщик для исключения при дальнейшем перераспределении
			//и восстанавливаем потребность аптеки в исходное количество
			Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда 
				Потребность = стр.КоличествоАптеки;	
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
				стрИсключения = ТЗПоставщиковИсключенныхПоКратностям.Добавить();
				стрИсключения.Поставщик = стр.Поставщик;
				стрИсключения.Товар = стр.Товар;
			КонецЕсли;
		КонецЕсли;
		//Проверим на превышение цены от первой (минимальной) цены по текущему товару
		//Если ПерваяЦена > 0 и НоваяСтрока.ПерераспределитьПоКратности = Ложь Тогда
		//	Если ПроверитьНаПревышениеЦены(ПерваяЦена,стр.Цена) = Истина Тогда
		//		//НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		//		//НоваяСтрокаОтказа.Товар = НоваяСтрока.Товар;
		//		//НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;
		//		//НоваяСтрокаОтказа.ПричинаОтказа = "отказ по превышению второй цены";
		//		
		//		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		//		НоваяСтрокаОтказа.Дата = Док.Дата;
		//		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		//		НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
		//		НоваяСтрокаОтказа.Склад = Док.Склад;
		//		НоваяСтрокаОтказа.Товар = стр.Товар;
		//		НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;;
		//		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
		//		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
		//		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
		//		
		//		
		//		
		//		СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	//Удалим строки из таблицы заказа, которые не прошли по кратностям и превышениям цены
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	СписокУдаляемыхСтрок.Очистить();
	
	ТЗПревышений = ПолучитьТаблицуПревышенияЦен(ТЗЗаказа,Док.Склад);
	ЕстьПревышения = Ложь;
	Для каждого стр из ТЗПревышений Цикл
		ЕстьПревышения = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик",стр.Поставщик);
		Отбор.Вставить("Товар",стр.Товар);
		Отбор.Вставить("Цена",стр.Цена);
		НайденныеСтроки = ТЗзаказа.НайтиСтроки(Отбор);
		Для каждого ТекСтрока из НайденныеСтроки Цикл
			 ТекСтрока.Превышение = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьПревышения Тогда
		ТЗЗаказа = ТЗЗаказа.Скопировать(Новый Структура("Превышение",Ложь));
	КонецЕсли;

	
	//Конец обработки таблицы заказа с учетом кратности позиций у поставщика
	
	//Сообщить("Первый вариант конец : " + ТекущаяДата());
	ТЗЗаказа.Сортировать("Поставщик,Товар,ГруппаАП,Количество убыв");	
	ТЗЗаказаСводная = ТЗЗаказа.Скопировать();
	ТЗЗаказаСводная.Свернуть("Поставщик,СуммаПороговаяЗаказа,СуммаМинимальногоЗаказа,НеПринимаетДозаказ,","Сумма");
	ТЗЗаказаСводная.Колонки.Добавить("НадоДобирать");
	ТЗЗаказаСводная.Колонки.Добавить("НадоПерераспределять");
	
	
	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.Сумма >= стр.СуммаМинимальногоЗаказа Тогда
			СписокПоставщиков.Добавить(стр.Поставщик);
			Продолжить;
		Иначе
			Если ТЗРанееВыгруженных.Количество() > 0 Тогда			
				НайденнаяСтрока = ТЗРанееВыгруженных.Найти(стр.Поставщик,"Поставщик");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НЕ стр.НеПринимаетДозаказ = Истина Тогда
						СписокПоставщиков.Добавить(стр.Поставщик);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если стр.Сумма >= стр.СуммаПороговаяЗаказа Тогда
				СписокПоставщиков.Добавить(стр.Поставщик);
				стр.НадоДобирать = Истина;
			Иначе
				стр.НадоПерераспределять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТХТ = "
	      |
		  |ВЫБРАТЬ
	      |	Прайсы.Поставщик,
	      |	Прайсы.Код,
	      |	Прайсы.Товар КАК ТоварПоставщика,
	      |	Прайсы.Цена,
	      |		ВЫБОР
	      |			КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |					И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ЛОЖЬ
	      |				ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |			ИНАЧЕ ВЫБОР
	      |					КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |							И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ИСТИНА
	      |						ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |					ИНАЧЕ Прайсы.ЦенаПриведенная
	      |				КОНЕЦ
	      |		КОНЕЦ КАК ЦенаПриведенная,
	      |	Прайсы.Количество КАК Количество,
		  |	Прайсы.Кратность как Кратность,
		  |	Прайсы.СрокГодности как СрокГодности,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК КодТовара,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы КАК Товар,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.МинимальныйЗаказ КАК МинЗаказ,
	      |	МатрицаТовара.ГруппаАПИтог КАК ГруппаАП
	      |ИЗ
	      |	РегистрСведений.Прайсы КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |		ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	      |			И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |			И (Прайсы.Поставщик В (&СписокПоставщиков))
	      |			И (СвязкиТовараСПоставщиком.ТоварФирмы = &Товар)  и  СвязкиТовараСПоставщиком.Блокировка = Ложь
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК МатрицаТовара
	      |		ПО (МатрицаТовара.Аптека = &Аптека)
	      |			И (МатрицаТовара.Товар = &Товар)
	      |			И (МатрицаТовара.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |				ПерезаказОтказов.Поставщик КАК Поставщик,
	      |				ПерезаказОтказов.Товар КАК Товар
	      |			ИЗ
	      |				РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |			ГДЕ
	      |				НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |				И ПерезаказОтказов.Склад = &Аптека) КАК РегПерезаказов
	      |			ПО (РегПерезаказов.Поставщик = Прайсы.Поставщик)
	      |				И (РегПерезаказов.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)	
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
		  |			И ЭксклюзивныеПоставщикиНоменклатуры.Товар = &Товар
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В (&ОбслуживаемыеПоставщики)) КАК ЭксПостУник
	      |		ПО СвязкиТовараСПоставщиком.ТоварФирмы = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
		  |		    И ЭксклюзивныеПоставщикиНоменклатуры.Товар = &Товар
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В (&ОбслуживаемыеПоставщики)) КАК ЭксПост
	      |		ПО СвязкиТовараСПоставщиком.ТоварФирмы = ЭксПост.Товар
	      |			И СвязкиТовараСПоставщиком.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
		  |			И Исключения.Товар = &Товар
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СвязкиТовараСПоставщиком.ТоварФирмы = Исключения.Товар
	      |			И СвязкиТовараСПоставщиком.Поставщик = Исключения.Поставщик
	      |ГДЕ
	      |	Прайсы.Поставщик В(&СписокПоставщиков)
	      |	И СвязкиТовараСПоставщиком.Поставщик В(&СписокПоставщиков)
		  |	И РегПерезаказов.Поставщик ЕСТЬ NULL
	      |	И СвязкиТовараСПоставщиком.ТоварФирмы = &Товар
	      |	И Прайсы.Количество > 0
		  | И (Прайсы.СрокГодности > &СрокГодности или Прайсы.СрокГодности = &ПустойСрок)
	      | И 
	      |	((ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1))
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0	
		  |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ";
		  
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	Запрос.УстановитьПараметр("ОбслуживаемыеПоставщики",ОбслуживаемыеПоставщики);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",Константы.УчитыватьЭксклюзивыПриЗаказе.Получить());
	Запрос.УстановитьПараметр("УчитыватьИсключения",Константы.УчитыватьИсключенияПриЗаказе.Получить());
	

	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.НадоДобирать = Истина Тогда  //Дозакажем, если надо
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			СуммаПоПоставщику = стр.Сумма;
			Для каждого Элемент из НайденныеСтроки Цикл
				Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
					Продолжить;	
				КонецЕсли;
				СтараяСумма = Элемент.Сумма;
				Если СуммаПоПоставщику >= стр.СуммаМинимальногоЗаказа Тогда
					Прервать;
				КонецЕсли;
				
				Если Элемент.ГруппаАП = "A" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.3,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 300 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=300 и Элемент.Цена < 800 Тогда
						Элемент.Количество = Элемент.Количество + 2;
					Иначе
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				ИначеЕсли Элемент.ГруппаАП = "B" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 500 Тогда
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				КонецЕсли;
					
				Если Элемент.МинЗаказ > 0 Тогда					
					Если Элемент.Количество < Элемент.МинЗаказ Тогда
						Элемент.Количество = Элемент.МинЗаказ;
					Иначе
						Элемент.Количество = Окр(Элемент.Количество/Элемент.МинЗаказ,0)*Элемент.МинЗаказ;
					КонецЕсли;
				КонецЕсли;	
				
				Элемент.Сумма = Элемент.Количество*Элемент.Цена;
				Дельта = Элемент.Сумма - СтараяСумма;
				СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
				
			КонецЦикла;
			//Второй заход по ТЗ Санакоева. Пытаемся добрать еще разок 03.04.2014
			Если СуммаПоПоставщику < стр.СуммаМинимальногоЗаказа Тогда
				Для каждого Элемент из НайденныеСтроки Цикл
					Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
						Продолжить;	
					КонецЕсли;
					СтараяСумма = Элемент.Сумма;
					Если СуммаПоПоставщику >= стр.СуммаМинимальногоЗаказа Тогда
						Прервать;
					КонецЕсли;
					
					Если Элемент.ГруппаАП = "A" Тогда
						Элемент.Количество = Окр(Элемент.Количество + Элемент.Количество/2,0);
					ИначеЕсли Элемент.ГруппаАП = "B" Тогда
						Если  Элемент.Цена < 100 Тогда
							Элемент.Количество = Элемент.Количество + 3;
						ИначеЕсли Элемент.Цена >=100 и Элемент.Цена < 500 Тогда
							Элемент.Количество = Элемент.Количество + 2;
						ИначеЕсли Элемент.Цена >=500 Тогда
							Элемент.Количество = Элемент.Количество + 1;							
						КонецЕсли;
					КонецЕсли;
					
					Элемент.Сумма = Элемент.Количество*Элемент.Цена;
					Дельта = Элемент.Сумма - СтараяСумма;
					СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
					
				КонецЦикла;	
			КонецЕсли;
		ИначеЕсли стр.НадоПерераспределять = Истина Тогда  //Перераспределим на других поставщиков
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Для каждого Элемент из НайденныеСтроки Цикл
			    СписокПоставщиковДляЗапроса = СписокПоставщиков.Скопировать();  //Для корректировки с учетом кратности

				//Оказалось что отсекать не надо , ибо эксклюзивы регулируются справочником эксклюзивов. отключено 05.04.2014
				//Если Элемент.Товар.Поставщик <> Справочники.Поставщики.ПустаяСсылка() Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Если Элемент.Кратность > 1 Тогда
					СписокПоставщиковДляУдаления = Новый СписокЗначений;
					Для каждого стр из СписокПоставщиковДляЗапроса Цикл
						ОтборПТ = Новый Структура("Товар,Поставщик",Элемент.Товар,стр.Значение);
						НашлиСтроки = ТЗПоставщиковИсключенныхПоКратностям.НайтиСтроки(ОтборПТ);
						Если НашлиСтроки.Количество() > 0 Тогда
							СписокПоставщиковДляУдаления.Добавить(стр);							
						КонецЕсли;
					КонецЦикла;
					Для каждого стр из СписокПоставщиковДляУдаления Цикл
						СписокПоставщиковДляЗапроса.Удалить(стр.Значение);	
					КонецЦикла;
				КонецЕсли;				
				
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиковДляЗапроса);
				Запрос.УстановитьПараметр("Товар",Элемент.Товар);
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("БылаКорректировкаКратности");
				ТЗ.Колонки.Добавить("ОстатокПоставщика");
				ТЗ.Колонки.Добавить("ПерераспределитьПоКратности");
				ТЗ.Колонки.Добавить("БылоПерераспределениеПоКратности");
				ТЗ.Колонки.Добавить("ПотребностьАптекиКоличество");
				ТЗ.Колонки.Добавить("ПроверитьНаПревышение");

				Если Элемент.Количество = 0 Тогда
					Потребность = Элемент.ПотребностьАптекиКоличество;
				Иначе
					Потребность = Элемент.Количество;
				КонецЕсли;
				номер = 0;
				Для каждого стр из ТЗ цикл
					номер = номер + 1;
					Если Потребность <= 0 Тогда
						Прервать;
					КонецЕсли;
					Заказать = Мин(стр.Количество,Потребность);
					Потребность = Потребность - Заказать;
					
					Цена = стр.Цена;
					//-----------------Проверим цену на допустимое отклонение---------------------
					//Если ПроверитьНаПревышениеЦены(Элемент.Цена,Цена) = Истина Тогда
					//	Прервать;
					//КонецЕсли;						
					
					
					НоваяСтрока = ТЗЗаказа.Добавить();				
					НоваяСтрока.КодТовара	= стр.КодТовара;
					НоваяСтрока.Товар		= стр.Товар;
					НоваяСтрока.Количество	= Заказать;
					НоваяСтрока.Цена		= Цена;
					НоваяСтрока.Сумма		= Цена*Заказать;
					НоваяСтрока.Поставщик	= стр.поставщик;
					НоваяСтрока.КодТовараПоставщика = стр.Код;
					НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
					НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
					НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
					НоваяСтрока.Кратность	= стр.Кратность;
					НоваяСтрока.СрокГодности= стр.СрокГодности;
					НоваяСтрока.ОстатокПоставщика = стр.Количество;
					НоваяСтрока.БылаКорректировкаКратности = Ложь;
					НоваяСтрока.ПерераспределитьПоКратности = Ложь;
					НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
					НоваяСтрока.ПроверитьНаПревышение = Истина;

					//Обработаем строку с учетом кратности.  Если и тут не прошла то, запоминаем новую строчку для удаления
					Если стр.Кратность > 1 Тогда
						ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
						Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда
							НоваяСтрокаОтказа = ТЗОтказов.Добавить();
							НоваяСтрокаОтказа.Дата = Док.Дата;
							НоваяСтрокаОтказа.Документ = Док.Ссылка;
							НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
							НоваяСтрокаОтказа.Склад = Док.Склад;
							НоваяСтрокаОтказа.Товар = стр.Товар;
							НоваяСтрокаОтказа.Количество = Элемент.ПотребностьАптекиКоличество;
							НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
							НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
							НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
							СписокУдаляемыхСтрок.Добавить(НоваяСтрока);		
						КонецЕсли;
					КонецЕсли;
					
					Нашли = ТЗЗаказаСводная.Найти(стр.Поставщик,"Поставщик");
					Нашли.Сумма = Нашли.Сумма + НоваяСтрока.Сумма;
					Если Номер = 1 Тогда
						СписокУдаляемыхСтрок.Добавить(Элемент);
					КонецЕсли;
					
				КонецЦикла;
				
			
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
	//Удалим перераспределенные строки
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	// Здесь удалим строки, которые надо было перераспределить по кратности, но не попавшие под общее перераспределение	
	СписокУдаляемыхСтрок.Очистить();
	Отбор = Новый Структура;
	Отбор.Вставить("ПерераспределитьПоКратности",Истина);
	ЕщеСтрокаДЛяУдаления = ТЗЗаказа.НайтиСтроки(Отбор);
	Для каждого стр из ЕщеСтрокаДЛяУдаления Цикл
		СписокУдаляемыхСтрок.Добавить(стр);	
	КонецЦикла;
	
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		
		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		НоваяСтрокаОтказа.Дата = Док.Дата;
		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		НоваяСтрокаОтказа.Поставщик = стр.Значение.Поставщик;
		НоваяСтрокаОтказа.Склад = Док.Склад;
		НоваяСтрокаОтказа.Товар = стр.Значение.Товар;
		НоваяСтрокаОтказа.Количество = стр.Значение.ПотребностьАптекиКоличество;
		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Значение.Код;
		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.Значение.ТоварПоставщика;
		
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	
	ТЗНаПроверку =  ТЗЗаказа.Скопировать(Новый Структура("ПроверитьНаПревышение",Истина));
	ТЗПревышений2 = ПолучитьТаблицуПревышенияЦен(ТЗНаПроверку,Док.Склад);
	ТЗНаПроверку = Неопределено;
	ЕстьПревышения = Ложь;
	Для каждого стр из ТЗПревышений2 Цикл
		ЕстьПревышения = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик",стр.Поставщик);
		Отбор.Вставить("Товар",стр.Товар);
		Отбор.Вставить("Цена",стр.Цена);
		НайденныеСтроки = ТЗзаказа.НайтиСтроки(Отбор);
		Для каждого ТекСтрока из НайденныеСтроки Цикл
			 ТекСтрока.Превышение = Истина;
		 КонецЦикла;
		 
		ЗаполнитьЗначенияСвойств(ТЗПревышений.Добавить(),стр);
		
	КонецЦикла;
	
	Если ЕстьПревышения Тогда
		ТЗЗаказа = ТЗЗаказа.Скопировать(Новый Структура("Превышение",Ложь));
	КонецЕсли;
	
		  
КонецПроцедуры

//===================================================================================================================================
//Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков)
//
//ОПИСАНИЕ :
// 	По документу "заявка на товар", учитывая СписокПоставщиков, распределяется товар. Полученные данные проверяются на минимальную сумму
//	заказа и, если необходимо, то дозаказывается количество. Если дозаказать нельзя, тогда перераспределяется товар на других поставщиков.
//ПАРАМЕТРЫ : 
//  1. Док - Документ.ЗаявкаНаТовар
//  2. ТЗЗаказа - в эту переменную выгружается распределенный заказ
//  3. ТЗОтказов - в эту переменную выгружаются отказы 
//  4. СписокПоставщиков - Если надо распределять только по определенным поставщикам, то заполняется список
//	5. ОтфильтроватьПоСпискуПоставщиков - ИСТИНА/ЛОЖЬ , если надо распределить только по определенным поставщикам,
//		то передается ИСТИНА 
//===================================================================================================================================
Процедура РаспределитьДокументПоПоставщикам366(Док,ТЗЗаказа,ТЗОтказов,ТЗПревышений,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков) Экспорт
	
	
	
	//ТЗТоваров = Док.Товар.Выгрузить();
	КодФирмы = Док.Склад.Фирма.Код366;
		  
	ТХТ = "ВЫБРАТЬ
	      |	Остатки.Товар,
	      |	Остатки.КоличествоОстаток
	      |ПОМЕСТИТЬ ТоварыВПути
	      |ИЗ
	      |	РегистрНакопления.ЗаказПоставщику.Остатки(, Склад = &Аптека) КАК Остатки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ТЧ.Товар,
	      |	ТЧ.Количество,
	      |	ТЧ.Товар.МинимальныйЗаказ КАК МинЗаказ,
	      |	ТЧ.Товар.ЖНВЛС КАК ЖНВЛС		  
		  |ПОМЕСТИТЬ ПотребностьАптеки
		  |ИЗ
	      |	Документ.ЗаявкаНаТовар.Товар КАК ТЧ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВПути КАК ТоварыВПути
	      |		ПО (ТоварыВПути.Товар = ТЧ.Товар)
	      |ГДЕ
	      |	ТЧ.Ссылка = &Документ
	      |	И ТоварыВПути.Товар ЕСТЬ NULL 
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТоварыВПути
		  |;
		  |ВЫБРАТЬ
	      |	ОбслуживаемыеАптеки.Владелец КАК Поставщик,
	      |	ОбслуживаемыеАптеки.Владелец.Код366 КАК Код366,
	      |	ОбслуживаемыеАптеки.Владелец.КоэффициентПриведенияЦеныКромеЖНВЛС КАК КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	ОбслуживаемыеАптеки.Владелец.КоэффициентПриведенияЦеныДляЖНВЛС КАК КоэффициентПриведенияЦеныДляЖНВЛС
	      |ПОМЕСТИТЬ ТЗПоставщиков
	      |ИЗ
	      |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	      |ГДЕ
	      |	ОбслуживаемыеАптеки.Аптека = &Аптека
	      |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |	И ВЫБОР
	      |			КОГДА ОбслуживаемыеАптеки.Владелец.Код В (&СписокПоставщиков)
	      |				ТОГДА ЛОЖЬ
	      |			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
	      |		КОНЕЦ = ЛОЖЬ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПерезаказОтказов.Поставщик КАК Поставщик,
	      |	ПерезаказОтказов.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |ГДЕ
	      |	НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |	И ПерезаказОтказов.Склад = &Аптека
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	ПотребностьАптеки.МинЗаказ,
	      |	ПотребностьАптеки.ЖНВЛС,
	      |	Связки366.КодИндивидуальный
	      |ПОМЕСТИТЬ Потребность366
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Связки366 КАК Связки366
	      |		ПО ПотребностьАптеки.Товар.Код = Связки366.КодАП
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Поставщики.Поставщик,
	      |	Поставщики.КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	Поставщики.КоэффициентПриведенияЦеныДляЖНВЛС,
	      |	Поставщики.Код366,
	      |	Каталог.КодПрайсЛиста
	      |ПОМЕСТИТЬ ВТ
	      |ИЗ
	      |	ТЗПоставщиков КАК Поставщики
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов366 КАК Каталог
	      |		ПО Поставщики.Код366 = Каталог.КодПоставщика
	      |			И (Каталог.КодФирмы = &КодФирмы)
	      |ГДЕ
	      |	Поставщики.Код366 > 0
	      |
	      |ИНДЕКСИРОВАТЬ ПО
	      |	Каталог.КодПрайсЛиста
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ПрайсЛисты366.КодИндивидуальный КАК Код,
	      |	ПрайсЛисты366.Наименование КАК ТоварПоставщика,
	      |	ПрайсЛисты366.Цена,
	      |	ВЫБОР
	      |		КОГДА ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |				И Потребность366.ЖНВЛС = ЛОЖЬ
	      |			ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА ВТ.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |						И Потребность366.ЖНВЛС = ИСТИНА
	      |					ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |				ИНАЧЕ ПрайсЛисты366.Цена
	      |			КОНЕЦ
	      |	КОНЕЦ КАК ЦенаПриведенная,
	      |	ПрайсЛисты366.Остаток КАК Количество,
	      |	ПрайсЛисты366.СрокГодности,
	      |	Потребность366.Количество КАК КоличествоАптеки,
	      |	ВТ.Поставщик КАК Поставщик,
	      |	Потребность366.Товар КАК Товар,
	      |	Потребность366.МинЗаказ,
	      |	1 КАК Кратность
	      |ПОМЕСТИТЬ СводныйПрайсЛист
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты366 КАК ПрайсЛисты366
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность366 КАК Потребность366
	      |		ПО ПрайсЛисты366.КодИндивидуальный = Потребность366.КодИндивидуальный
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	      |		ПО (ВТ.КодПрайсЛиста = ПрайсЛисты366.КодПрайсЛиста)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |		ПО (РегПерезаказов.Поставщик = ВТ.Поставщик)
	      |			И (РегПерезаказов.Товар = Потребность366.Товар)
	      |ГДЕ
	      |	ПрайсЛисты366.Остаток > 0
	      |	И ПрайсЛисты366.Цена > 0
	      |	И (ПрайсЛисты366.СрокГодности > &СрокГодности
	      |			ИЛИ ПрайсЛисты366.СрокГодности = &ПустойСрок)
	      |	И РегПерезаказов.Поставщик ЕСТЬ NULL 
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СводныйПрайсЛист.Поставщик,
	      |	СводныйПрайсЛист.Код,
	      |	СводныйПрайсЛист.ТоварПоставщика,
	      |	СводныйПрайсЛист.Количество КАК Количество,
	      |	СводныйПрайсЛист.Цена,
	      |	СводныйПрайсЛист.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	СводныйПрайсЛист.Товар.Код КАК КодТовара,
	      |	СводныйПрайсЛист.Товар КАК Товар,
	      |	СводныйПрайсЛист.КоличествоАптеки,
	      |	СводныйПрайсЛист.МинЗаказ,
	      |	СводныйПрайсЛист.Кратность,
	      |	СводныйПрайсЛист.СрокГодности,
	      |	ЕСТЬNULL(ЭксПост.flag, 0) КАК flag
	      |ПОМЕСТИТЬ ИтоговыйЗаказ
	      |ИЗ
	      |	СводныйПрайсЛист КАК СводныйПрайсЛист
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗПоставщиков.Поставщик
	      |					ИЗ
	      |						ТЗПоставщиков)) КАК ЭксПостУник
	      |		ПО СводныйПрайсЛист.Товар = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗПоставщиков.Поставщик
	      |					ИЗ
	      |						ТЗПоставщиков)) КАК ЭксПост
	      |		ПО СводныйПрайсЛист.Товар = ЭксПост.Товар
	      |			И СводныйПрайсЛист.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СводныйПрайсЛист.Товар = Исключения.Товар
	      |			И СводныйПрайсЛист.Поставщик = Исключения.Поставщик
	      |ГДЕ
	      |	(ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	&Дата КАК Дата,
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	0 КАК Цена,
	      |	0 КАК Сумма,
	      |	&Аптека КАК Склад,
	      |	&Документ КАК Документ,
	      |	"""" КАК КодТовараПоставщика,
	      |	"""" КАК НаименованиеТОвараПоставщика,
	      |	"""" КАК НомерЗаявкиАптеки,
	      |	ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.ОтсутствиеОстаткаСвязки) КАК ПричинаОтказа,
	      |	"""" КАК Комментарий,
	      |	"""" КАК Поставщик
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |ГДЕ
	      |	НЕ ПотребностьАптеки.Товар В
	      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |					ИтоговыйЗаказ.Товар
	      |				ИЗ
	      |					ИтоговыйЗаказ)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИтоговыйЗаказ.Поставщик,
		  |	ИтоговыйЗаказ.Поставщик.СуммаМинимальногоЗаказа как СуммаМинимальногоЗаказа,
		  |	ИтоговыйЗаказ.Поставщик.СуммаПороговаяЗаказа как СуммаПороговаяЗаказа,
		  |	ИтоговыйЗаказ.Поставщик.НеПринимаетДозаказ как НеПринимаетДозаказ,
	      |	ИтоговыйЗаказ.Код КАК Код,
	      |	ИтоговыйЗаказ.ТоварПоставщика КАК ТоварПоставщика,
	      |	ИтоговыйЗаказ.Количество КАК Количество,
	      |	ИтоговыйЗаказ.Цена,
	      |	ИтоговыйЗаказ.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	ИтоговыйЗаказ.КодТовара,
	      |	ИтоговыйЗаказ.Товар,
	      |	ИтоговыйЗаказ.КоличествоАптеки,
	      |	ИтоговыйЗаказ.МинЗаказ КАК МинЗаказ,
	      |	ИтоговыйЗаказ.Кратность КАК Кратность,
	      |	ИтоговыйЗаказ.СрокГодности КАК СрокГодности,
	      |	ИтоговыйЗаказ.flag КАК flag,
	      |	Матрица.ГруппаАПИтог КАК ГруппаАП
	      |ИЗ
	      |	ИтоговыйЗаказ КАК ИтоговыйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
	      |		ПО (Матрица.Аптека = &Аптека)
	      |			И (Матрица.Товар = ИтоговыйЗаказ.Товар)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИтоговыйЗаказ.Товар.Наименование,
	      |	flag УБЫВ,
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ПотребностьАптеки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗпоставщиков
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ СводныйПрайсЛист
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Потребность366
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ИтоговыйЗаказ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТ";		  

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	//Запрос.УстановитьПараметр("ТЗТоваров",ТЗТоваров);
	Запрос.УстановитьПараметр("ПустаяСТрока","");
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("КодФирмы",КодФирмы);
	Запрос.УстановитьПараметр("Документ",Док);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",Константы.УчитыватьЭксклюзивыПриЗаказе.Получить());
	Запрос.УстановитьПараметр("УчитыватьИсключения",Константы.УчитыватьИсключенияПриЗаказе.Получить());
	Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
	Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	СрокГодности = НачалоДня(ТекущаяДата()) + 24*60*60*120;
	ПустойСрок = ОМ3_ПустаяДата();
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	
	//Сообщить("Время выполнения запроса начало:" + ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТЗОтказов = МассивРезультатов[9].Выгрузить();
	ТЗСводныйПрайс = МассивРезультатов[10].Выгрузить();
	//Сообщить("Время выполнения запроса конец:" + ТекущаяДата());
	
	ТЗЗаказа = Новый ТаблицаЗначений;
	ТЗЗаказа.Колонки.Добавить("КодТовара");
	ТЗЗаказа.Колонки.Добавить("Товар",Новый ОписаниеТипов("СправочникСсылка.Ассортиментный_план"));
	ТЗЗаказа.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Поставщик",Новый ОписаниеТипов("СправочникСсылка.Поставщики"));
	ТЗЗаказа.Колонки.Добавить("КодТовараПоставщика",Новый ОписаниеТипов("Строка"));
	ТЗЗаказа.Колонки.Добавить("НаименованиеТовараПоставщика",Новый ОписаниеТипов("Строка"));
	ТЗЗаказа.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТЗЗаказа.Колонки.Добавить("Сумма");
	ТЗЗаказа.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата"));
	ТЗЗаказа.Колонки.Добавить("Кратность");
	ТЗЗаказа.Колонки.Добавить("МинЗаказ");
	ТЗЗаказа.Колонки.Добавить("ГруппаАП");
	ТЗЗаказа.Колонки.Добавить("БылаКорректировкаКратности");
	ТЗЗаказа.Колонки.Добавить("ОстатокПоставщика");
	ТЗЗаказа.Колонки.Добавить("ПерераспределитьПоКратности");
	ТЗЗаказа.Колонки.Добавить("БылоПерераспределениеПоКратности");
	ТЗЗаказа.Колонки.Добавить("ПотребностьАптекиКоличество");
	ТЗЗаказа.Колонки.Добавить("СуммаМинимальногоЗаказа");
	ТЗЗаказа.Колонки.Добавить("СуммаПороговаяЗаказа");
	ТЗЗаказа.Колонки.Добавить("НеПринимаетДозаказ");
	ТЗЗаказа.Колонки.Добавить("Превышение");
	ТЗЗаказа.Колонки.Добавить("ПроверитьНаПревышение");	


	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.Заказ") Тогда
		
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|	И НЕ Заказ.Ссылка = &Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";
		
	Иначе
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";		  
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Док.Склад);
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Док",Док);

	ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
	
	

	//====== Вариант первый ======//
	СтарыйТовар = "";
	Потребность = 0;
	ТЗПоставщиковИсключенныхПоКратностям = Новый ТаблицаЗначений;
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Поставщик");
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Товар");
	СписокПоставщиков = Новый СписокЗначений;
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	ПерваяЦена = 0;	
	//Сообщить("Первый вариант начало : " + ТекущаяДата());
	ДЛя каждого стр из ТЗСводныйПрайс Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если СтарыйТовар <> стр.Товар Тогда
			Потребность = стр.КоличествоАптеки;
			СтарыйТовар = стр.Товар;
		КонецЕсли;
		// Пропускаем , если уже все заказали и всего хватило
		Если Потребность <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.Количество >= Потребность Тогда
			Заказать = Потребность;
			Потребность = 0;
		Иначе
			Заказать = стр.Количество;
			Потребность = Потребность - стр.Количество;
		КонецЕсли;
		НоваяСтрока				= ТЗЗаказа.Добавить();				
		НоваяСтрока.КодТовара	= стр.КодТовара;
		НоваяСтрока.Товар		= стр.Товар;
		НоваяСтрока.Количество	= Заказать;
		НоваяСтрока.ПотребностьАптекиКоличество	= Заказать;
		НоваяСтрока.Цена		= стр.Цена;
		НоваяСтрока.Сумма		= стр.Цена*Заказать;
		НоваяСтрока.Поставщик	= стр.поставщик;
		НоваяСтрока.КодТовараПоставщика = стр.Код;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
		НоваяСтрока.Кратность	= стр.Кратность;
		НоваяСтрока.СрокГодности= стр.СрокГодности;
		НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
		НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
		НоваяСтрока.ОстатокПоставщика = стр.Количество;
		НоваяСтрока.СуммаМинимальногоЗаказа = стр.СуммаМинимальногоЗаказа;
		НоваяСтрока.СуммаПороговаяЗаказа = стр.СуммаПороговаяЗаказа;
		НоваяСтрока.НеПринимаетДозаказ = стр.НеПринимаетДозаказ;
		
		НоваяСтрока.БылаКорректировкаКратности = Ложь;
		НоваяСтрока.ПерераспределитьПоКратности = Ложь;
		НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
		НоваяСтрока.ПроверитьНаПревышение = Ложь;
		НоваяСтрока.Превышение = Ложь;

		Если стр.Кратность > 1 Тогда  //Проверяем на кратность 
			ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
			//Если по кратности не проходим, запоминаем связку товар-поставщик для исключения при дальнейшем перераспределении
			//и восстанавливаем потребность аптеки в исходное количество
			Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда 
				Потребность = стр.КоличествоАптеки;	
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
				стрИсключения = ТЗПоставщиковИсключенныхПоКратностям.Добавить();
				стрИсключения.Поставщик = стр.Поставщик;
				стрИсключения.Товар = стр.Товар;
			КонецЕсли;
		КонецЕсли;
		//Проверим на превышение цены от первой (минимальной) цены по текущему товару
		//Если ПерваяЦена > 0 и НоваяСтрока.ПерераспределитьПоКратности = Ложь Тогда
		//	Если ПроверитьНаПревышениеЦены(ПерваяЦена,стр.Цена) = Истина Тогда
		//		//НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		//		//НоваяСтрокаОтказа.Товар = НоваяСтрока.Товар;
		//		//НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;
		//		//НоваяСтрокаОтказа.ПричинаОтказа = "отказ по превышению второй цены";
		//		
		//		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		//		НоваяСтрокаОтказа.Дата = Док.Дата;
		//		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		//		НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
		//		НоваяСтрокаОтказа.Склад = Док.Склад;
		//		НоваяСтрокаОтказа.Товар = стр.Товар;
		//		НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;;
		//		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
		//		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
		//		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
		//		
		//		
		//		
		//		СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	//Удалим строки из таблицы заказа, которые не прошли по кратностям и превышениям цены
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	СписокУдаляемыхСтрок.Очистить();

	ТЗПревышений = ПолучитьТаблицуПревышенияЦен(ТЗЗаказа,Док.Склад);
	ЕстьПревышения = Ложь;
	Для каждого стр из ТЗПревышений Цикл
		ЕстьПревышения = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик",стр.Поставщик);
		Отбор.Вставить("Товар",стр.Товар);
		Отбор.Вставить("Цена",стр.Цена);
		НайденныеСтроки = ТЗзаказа.НайтиСтроки(Отбор);
		Для каждого ТекСтрока из НайденныеСтроки Цикл
			 ТекСтрока.Превышение = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьПревышения Тогда
		ТЗЗаказа = ТЗЗаказа.Скопировать(Новый Структура("Превышение",Ложь));
	КонецЕсли;
	
	
	//Конец обработки таблицы заказа с учетом кратности позиций у поставщика
	
	//Сообщить("Первый вариант конец : " + ТекущаяДата());
	ТЗЗаказа.Сортировать("Поставщик,Товар,ГруппаАП,Количество убыв");	
	ТЗЗаказаСводная = ТЗЗаказа.Скопировать();
	ТЗЗаказаСводная.Свернуть("Поставщик,СуммаПороговаяЗаказа,СуммаМинимальногоЗаказа,НеПринимаетДозаказ,","Сумма");
	ТЗЗаказаСводная.Колонки.Добавить("НадоДобирать");
	ТЗЗаказаСводная.Колонки.Добавить("НадоПерераспределять");
	
	
	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.Сумма >= стр.СуммаМинимальногоЗаказа Тогда
			СписокПоставщиков.Добавить(стр.Поставщик);
			Продолжить;
		Иначе
			Если ТЗРанееВыгруженных.Количество() > 0 Тогда			
				НайденнаяСтрока = ТЗРанееВыгруженных.Найти(стр.Поставщик,"Поставщик");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НЕ стр.НеПринимаетДозаказ = Истина Тогда
						СписокПоставщиков.Добавить(стр.Поставщик);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если стр.Сумма >= стр.СуммаПороговаяЗаказа Тогда
				СписокПоставщиков.Добавить(стр.Поставщик);
				стр.НадоДобирать = Истина;
			Иначе
				стр.НадоПерераспределять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТХТ = "ВЫБРАТЬ
	      |	Поставщики.Ссылка КАК Поставщик,
	      |	Поставщики.Код366 КАК Код366,
	      |	Поставщики.КоэффициентПриведенияЦеныКромеЖНВЛС КАК КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	Поставщики.КоэффициентПриведенияЦеныДляЖНВЛС КАК КоэффициентПриведенияЦеныДляЖНВЛС
	      |ПОМЕСТИТЬ ТЗПоставщиков
	      |ИЗ
	      |	Справочник.Поставщики КАК Поставщики
	      |ГДЕ
	      |	Поставщики.Ссылка В(&СписокПоставщиков)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПерезаказОтказов.Поставщик КАК Поставщик,
	      |	ПерезаказОтказов.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |ГДЕ
	      |	НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |	И ПерезаказОтказов.Склад = &Аптека
	      |	И ПерезаказОтказов.Товар = &Товар
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Поставщики.Поставщик,
	      |	Поставщики.КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	Поставщики.КоэффициентПриведенияЦеныДляЖНВЛС,
	      |	Поставщики.Код366,
	      |	Каталог.КодПрайсЛиста
	      |ПОМЕСТИТЬ ВТ
	      |ИЗ
	      |	ТЗПоставщиков КАК Поставщики
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов366 КАК Каталог
	      |		ПО Поставщики.Код366 = Каталог.КодПоставщика
	      |			И (Каталог.КодФирмы = &КодФирмы)
	      |ГДЕ
	      |	Поставщики.Код366 > 0
	      |
	      |ИНДЕКСИРОВАТЬ ПО
	      |	Каталог.КодПрайсЛиста
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ПрайсЛисты366.КодИндивидуальный КАК Код,
	      |	ПрайсЛисты366.Наименование КАК ТоварПоставщика,
	      |	ПрайсЛисты366.Цена,
	      |	ВЫБОР
	      |		КОГДА ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |				И &ЖНВЛС = ЛОЖЬ
	      |			ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА ВТ.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |						И &ЖНВЛС = ИСТИНА
	      |					ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |				ИНАЧЕ ПрайсЛисты366.Цена
	      |			КОНЕЦ
	      |	КОНЕЦ КАК ЦенаПриведенная,
	      |	ПрайсЛисты366.Остаток КАК Количество,
	      |	ПрайсЛисты366.СрокГодности,
	      |	ВТ.Поставщик КАК Поставщик,
	      |	&Товар КАК Товар,
		  |	&КодТовара как КодТовара,
	      |	&МинЗаказ,
	      |	1 КАК Кратность,
	      |	МатрицаТовара.ГруппаАПИтог как ГруппаАП
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты366 КАК ПрайсЛисты366
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	      |		ПО (ВТ.КодПрайсЛиста = ПрайсЛисты366.КодПрайсЛиста)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |		ПО (РегПерезаказов.Поставщик = ВТ.Поставщик)
	      |			И (РегПерезаказов.Товар = &Товар)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК МатрицаТовара
	      |		ПО (МатрицаТовара.Аптека = &Аптека)
	      |			И (МатрицаТовара.Товар = &Товар)
	      |ГДЕ
	      |	ПрайсЛисты366.КодИндивидуальный = &КодИндивидуальный
	      |	И ПрайсЛисты366.Остаток > 0
	      |	И ПрайсЛисты366.Цена > 0
	      |	И (ПрайсЛисты366.СрокГодности > &СрокГодности
	      |			ИЛИ ПрайсЛисты366.СрокГодности = &ПустойСрок)
	      |	И РегПерезаказов.Поставщик ЕСТЬ NULL 
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗпоставщиков
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТ";
		  
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("КодФирмы",КодФирмы);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);

	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.НадоДобирать = Истина Тогда  //Дозакажем, если надо
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			СуммаПоПоставщику = стр.Сумма;
			Для каждого Элемент из НайденныеСтроки Цикл
				Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
					Продолжить;	
				КонецЕсли;
				СтараяСумма = Элемент.Сумма;
				Если СуммаПоПоставщику >= стр.СуммаМинимальногоЗаказа Тогда
					Прервать;
				КонецЕсли;
				
				Если Элемент.ГруппаАП = "A" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.3,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 300 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=300 и Элемент.Цена < 800 Тогда
						Элемент.Количество = Элемент.Количество + 2;
					Иначе
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				ИначеЕсли Элемент.ГруппаАП = "B" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 500 Тогда
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				КонецЕсли;
					
				Если Элемент.МинЗаказ > 0 Тогда					
					Если Элемент.Количество < Элемент.МинЗаказ Тогда
						Элемент.Количество = Элемент.МинЗаказ;
					Иначе
						Элемент.Количество = Окр(Элемент.Количество/Элемент.МинЗаказ,0)*Элемент.МинЗаказ;
					КонецЕсли;
				КонецЕсли;	
				
				Элемент.Сумма = Элемент.Количество*Элемент.Цена;
				Дельта = Элемент.Сумма - СтараяСумма;
				СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
				
			КонецЦикла;
			//Второй заход по ТЗ Санакоева. Пытаемся добрать еще разок 03.04.2014
			Если СуммаПоПоставщику < стр.СуммаМинимальногоЗаказа Тогда
				Для каждого Элемент из НайденныеСтроки Цикл
					Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
						Продолжить;	
					КонецЕсли;
					СтараяСумма = Элемент.Сумма;
					Если СуммаПоПоставщику >= стр.СуммаМинимальногоЗаказа Тогда
						Прервать;
					КонецЕсли;
					
					Если Элемент.ГруппаАП = "A" Тогда
						Элемент.Количество = Окр(Элемент.Количество + Элемент.Количество/2,0);
					ИначеЕсли Элемент.ГруппаАП = "B" Тогда
						Если  Элемент.Цена < 100 Тогда
							Элемент.Количество = Элемент.Количество + 3;
						ИначеЕсли Элемент.Цена >=100 и Элемент.Цена < 500 Тогда
							Элемент.Количество = Элемент.Количество + 2;
						ИначеЕсли Элемент.Цена >=500 Тогда
							Элемент.Количество = Элемент.Количество + 1;							
						КонецЕсли;
					КонецЕсли;
					
					Элемент.Сумма = Элемент.Количество*Элемент.Цена;
					Дельта = Элемент.Сумма - СтараяСумма;
					СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
					
				КонецЦикла;	
			КонецЕсли;
			
		ИначеЕсли стр.НадоПерераспределять = Истина Тогда  //Перераспределим на других поставщиков
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Для каждого Элемент из НайденныеСтроки Цикл
			    СписокПоставщиковДляЗапроса = СписокПоставщиков.Скопировать();  //Для корректировки с учетом крастности

				//Если Элемент.Товар.Поставщик <> Справочники.Поставщики.ПустаяСсылка() Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Если Элемент.Кратность > 1 Тогда
					СписокПоставщиковДляУдаления = Новый СписокЗначений;
					Для каждого стр из СписокПоставщиковДляЗапроса Цикл
						ОтборПТ = Новый Структура("Товар,Поставщик",Элемент.Товар,стр.Значение);
						НашлиСтроки = ТЗПоставщиковИсключенныхПоКратностям.НайтиСтроки(ОтборПТ);
						Если НашлиСтроки.Количество() > 0 Тогда
							СписокПоставщиковДляУдаления.Добавить(стр);							
						КонецЕсли;
					КонецЦикла;
					Для каждого стр из СписокПоставщиковДляУдаления Цикл
						СписокПоставщиковДляЗапроса.Удалить(стр.Значение);	
					КонецЦикла;
				КонецЕсли;				
				
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиковДляЗапроса);
				Запрос.УстановитьПараметр("МинЗаказ",Элемент.МинЗаказ);
				Запрос.УстановитьПараметр("ЖНВЛС",Элемент.Товар.ЖНВЛС);
				Запрос.УстановитьПараметр("КодИндивидуальный",Элемент.КодТовараПоставщика);
				Запрос.УстановитьПараметр("Товар",Элемент.Товар);
				Запрос.УстановитьПараметр("КодТовара",Элемент.КодТовара);
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("БылаКорректировкаКратности");
				ТЗ.Колонки.Добавить("ОстатокПоставщика");
				ТЗ.Колонки.Добавить("ПерераспределитьПоКратности");
				ТЗ.Колонки.Добавить("БылоПерераспределениеПоКратности");
				ТЗ.Колонки.Добавить("ПотребностьАптекиКоличество");

				Если Элемент.Количество = 0 Тогда
					Потребность = Элемент.ПотребностьАптекиКоличество;
				Иначе
					Потребность = Элемент.Количество;
				КонецЕсли;
				номер = 0;
				Для каждого стр из ТЗ цикл
					номер = номер + 1;
					Если Потребность <= 0 Тогда
						Прервать;
					КонецЕсли;
					Заказать = Мин(стр.Количество,Потребность);
					Потребность = Потребность - Заказать;
					
					Цена = стр.Цена;
					//-----------------Проверим цену на допустимое отклонение---------------------
					//Если ПроверитьНаПревышениеЦены(Элемент.Цена,Цена) = Истина Тогда
					//	Прервать;
					//КонецЕсли;						
					
					
					НоваяСтрока = ТЗЗаказа.Добавить();				
					НоваяСтрока.КодТовара	= стр.КодТовара;
					НоваяСтрока.Товар		= стр.Товар;
					НоваяСтрока.Количество	= Заказать;
					НоваяСтрока.Цена		= Цена;
					НоваяСтрока.Сумма		= Цена*Заказать;
					НоваяСтрока.Поставщик	= стр.поставщик;
					НоваяСтрока.КодТовараПоставщика = стр.Код;
					НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
					НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
					НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
					НоваяСтрока.Кратность	= стр.Кратность;
					НоваяСтрока.СрокГодности= стр.СрокГодности;
					НоваяСтрока.ОстатокПоставщика = стр.Количество;
					НоваяСтрока.БылаКорректировкаКратности = Ложь;
					НоваяСтрока.ПерераспределитьПоКратности = Ложь;
					НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
					НоваяСтрока.ПроверитьНаПревышение = Истина;
					//Обработаем строку с учетом кратности.  Если и тут не прошла то, запоминаем новую строчку для удаления
					Если стр.Кратность > 1 Тогда
						ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
						Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда
							НоваяСтрокаОтказа = ТЗОтказов.Добавить();
							НоваяСтрокаОтказа.Дата = Док.Дата;
							НоваяСтрокаОтказа.Документ = Док.Ссылка;
							НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
							НоваяСтрокаОтказа.Склад = Док.Склад;
							НоваяСтрокаОтказа.Товар = стр.Товар;
							НоваяСтрокаОтказа.Количество = Элемент.ПотребностьАптекиКоличество;
							НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
							НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
							НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
							СписокУдаляемыхСтрок.Добавить(НоваяСтрока);		
						КонецЕсли;
					КонецЕсли;
					
					Нашли = ТЗЗаказаСводная.Найти(стр.Поставщик,"Поставщик");
					Нашли.Сумма = Нашли.Сумма + НоваяСтрока.Сумма;
					Если Номер = 1 Тогда
						СписокУдаляемыхСтрок.Добавить(Элемент);
					КонецЕсли;
					
				КонецЦикла;
				
			
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
	//Удалим перераспределенные строки
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	// Здесь удалим строки, которые надо было перераспределить по кратности, но не попавшие под общее перераспределение	
	СписокУдаляемыхСтрок.Очистить();
	Отбор = Новый Структура;
	Отбор.Вставить("ПерераспределитьПоКратности",Истина);
	ЕщеСтрокаДЛяУдаления = ТЗЗаказа.НайтиСтроки(Отбор);
	Для каждого стр из ЕщеСтрокаДЛяУдаления Цикл
		СписокУдаляемыхСтрок.Добавить(стр);	
	КонецЦикла;
	
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		
		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		НоваяСтрокаОтказа.Дата = Док.Дата;
		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		НоваяСтрокаОтказа.Поставщик = стр.Значение.Поставщик;
		НоваяСтрокаОтказа.Склад = Док.Склад;
		НоваяСтрокаОтказа.Товар = стр.Значение.Товар;
		НоваяСтрокаОтказа.Количество = стр.Значение.ПотребностьАптекиКоличество;
		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Значение.Код;
		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.Значение.ТоварПоставщика;
		
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	
	ТЗНаПроверку =  ТЗЗаказа.Скопировать(Новый Структура("ПроверитьНаПревышение",Истина));
	ТЗПревышений2 = ПолучитьТаблицуПревышенияЦен(ТЗНаПроверку,Док.Склад);
	ТЗНаПроверку = Неопределено;
	ЕстьПревышения = Ложь;
	Для каждого стр из ТЗПревышений2 Цикл
		ЕстьПревышения = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик",стр.Поставщик);
		Отбор.Вставить("Товар",стр.Товар);
		Отбор.Вставить("Цена",стр.Цена);
		НайденныеСтроки = ТЗзаказа.НайтиСтроки(Отбор);
		Для каждого ТекСтрока из НайденныеСтроки Цикл
			 ТекСтрока.Превышение = Истина;
		 КонецЦикла;
		 
		ЗаполнитьЗначенияСвойств(ТЗПревышений.Добавить(),стр);
		
	КонецЦикла;
	
	Если ЕстьПревышения Тогда
		ТЗЗаказа = ТЗЗаказа.Скопировать(Новый Структура("Превышение",Ложь));
	КонецЕсли;


	
		  
КонецПроцедуры


Функция СоздатьДокументыЗаказа(РаспределяемыйДокумент,ТЗЗаказа,ТЗПревышений)
	
	Если ТЗЗаказа.Количество() = 0 Тогда
	СтруктураКВыгрузке = Новый Структура;
	СтруктураКВыгрузке.Вставить("СписокДокументов",новый списокЗначений);
	СтруктураКВыгрузке.Вставить("Склад",РаспределяемыйДокумент.Склад);
	СтруктураКВыгрузке.Вставить("СписокПоставщиков",новый Массив());
		
		Возврат СтруктураКВыгрузке;
	КонецЕсли;
	
	//ПроверитьПревышенияЦен(ТЗЗаказа,РаспределяемыйДокумент.Склад);
	
	
	НомерЗаявки = РаспределяемыйДокумент.НомерЗаявкиАптеки;
	
	//ТЗОтказовПоПревышению = Новый ТаблицаЗначений;
	//ТЗОтказовПоПревышению.Колонки.Добавить("Дата");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Документ");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Поставщик");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Склад");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Товар");
	//ТЗОтказовПоПревышению.Колонки.Добавить("ПричинаОтказа");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Количество");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Цена");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Сумма");
	//ТЗОтказовПоПревышению.Колонки.Добавить("НомерЗаявкиАптеки");
	//ТЗОтказовПоПревышению.Колонки.Добавить("КодТовараПоставщика");
	//ТЗОтказовПоПревышению.Колонки.Добавить("НаименованиеТовараПоставщика");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Комментарий");
	
	ТЗПоставщиков = ТЗЗаказа.Скопировать(,"Поставщик");	
	ТЗПоставщиков.Свернуть("Поставщик","");
	
	

	УспешноеЗавершение = Ложь;
	Для н=0 по 2 Цикл
		Попытка
			СписокДокументов = Новый СписокЗначений;
			НачатьТранзакцию(); //начали транзакцию
			Для каждого стр из ТЗПоставщиков Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("Поставщик",стр.Поставщик);
				//Отбор.Вставить("Превышение",0);
				ЗаказПоПоставщику = ТЗЗаказа.Скопировать(Отбор);
				
				ОтборПревышений = Новый Структура;
				ОтборПревышений.Вставить("Поставщик",стр.Поставщик);
				//ОтборПревышений.Вставить("Превышение",1);
				ПревышениеПоПоставщику = ТЗПревышений.Скопировать(ОтборПревышений);
				
				
				Док=Документы.Заказ.СоздатьДокумент();
				Док.Поставщик=стр.Поставщик;
				Док.Склад = РаспределяемыйДокумент.Склад;
				Док.Статус=Перечисления.СтатусЗаказаПоставщику.Создан;
				Док.НомерЗаявкиАптеки = РаспределяемыйДокумент.НомерЗаявкиАптеки;
				Док.ДокОснование = РаспределяемыйДокумент.Ссылка;
				Док.ТипЗаказа = РаспределяемыйДокумент.ТипЗаявки;
				Док.Дата=ТекущаяДата();
				
				СтрИзм=Док.Изменения.Добавить();
				СтрИзм.Дата=ТекущаяДата();
				СтрИзм.КомментарийИзменения="Создан документ при распределении из регл. задания";
				СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
				СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.ВводНового;		
				
				Док.Товар.Загрузить(ЗаказПоПоставщику);
				Док.СуммаДок = Док.Товар.Итог("Сумма");
				Док.Записать(РежимЗАписиДокумента.Запись);
				
				СтруктураСписка = Новый Структура;
				СтруктураСписка.Вставить("Док",Док.Ссылка);
				СтруктураСписка.Вставить("ДокОбъект",Док);
				
				//Запомни документ и превышение по нему
				Если ПревышениеПоПоставщику.Количество() > 0 Тогда
					ПревышениеПоПоставщику.Колонки.Добавить("Комментарий");
					Для каждого ы из ПревышениеПоПоставщику Цикл
						ы.Комментарий = "Превышение: " + ы.Цена + " > " + Окр(ы.ПрошлаяЦена,2) + " на " + Окр(ы.ПроцентПревышения,2);
					КонецЦикла;
					СтруктураСписка.Вставить("ТЗПревышений",ПревышениеПоПоставщику);

				КонецЕсли;
				
				СтруктураСписка.Вставить("Поставщик",стр.Поставщик);
				СписокДокументов.Добавить(СтруктураСписка);				
				
			КонецЦикла;
			ЗафиксироватьТранзакцию();  //зафиксировали транзакцию
			УспешноеЗавершение = Истина;
			Прервать;
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	
	Если УспешноеЗавершение Тогда
		Для каждого стр из СписокДокументов Цикл
			СтруктураСписка = стр.Значение;
			Если СтруктураСписка.Свойство("ТЗПревышений") Тогда
				НаборЗаписей = РегистрыСведений.ОтказыПоЗаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(СтруктураСписка.Док); 
				НаборЗаписей.Загрузить(СтруктураСписка.ТЗПревышений);
				Для каждого СтрокаНабора из НаборЗаписей Цикл
					СтрокаНабора.Дата = ТекущаяДата();	
					СтрокаНабора.Документ = СтруктураСписка.Док;
					СтрокаНабора.Склад = РаспределяемыйДокумент.Склад;
					СтрокаНабора.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
					СтрокаНабора.НомерЗаявкиАптеки = НомерЗаявки;
				КонецЦикла;
				Попытка
					НаборЗаписей.Записать();
				Исключение
					#Если Клиент Тогда
						Сообщить(ОписаниеОшибки());
					#КонецЕсли
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураКВыгрузке = Новый Структура;
	СтруктураКВыгрузке.Вставить("СписокДокументов",СписокДокументов);
	СтруктураКВыгрузке.Вставить("Склад",РаспределяемыйДокумент.Склад);
	СтруктураКВыгрузке.Вставить("СписокПоставщиков",ТЗПоставщиков.ВыгрузитьКолонку("Поставщик"));
	Возврат СтруктураКВыгрузке;
	

КонецФункции  //СоздатьДокументыЗаказа()

Функция СоздатьДокументыЗаказаПоКоробам(РаспределяемыйДокумент,ТЗЗаказа,ТЗПревышений)
	
	Если ТЗЗаказа.Количество() = 0 Тогда
	СтруктураКВыгрузке = Новый Структура;
	СтруктураКВыгрузке.Вставить("СписокДокументов",новый списокЗначений);
	СтруктураКВыгрузке.Вставить("Склад",РаспределяемыйДокумент.Склад);
	СтруктураКВыгрузке.Вставить("СписокПоставщиков",новый Массив());
		
		Возврат СтруктураКВыгрузке;
	КонецЕсли;
	
	//ПроверитьПревышенияЦен(ТЗЗаказа,РаспределяемыйДокумент.Склад);
	
	
	НомерЗаявки = РаспределяемыйДокумент.НомерЗаявкиАптеки;
	
	//ТЗОтказовПоПревышению = Новый ТаблицаЗначений;
	//ТЗОтказовПоПревышению.Колонки.Добавить("Дата");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Документ");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Поставщик");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Склад");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Товар");
	//ТЗОтказовПоПревышению.Колонки.Добавить("ПричинаОтказа");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Количество");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Цена");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Сумма");
	//ТЗОтказовПоПревышению.Колонки.Добавить("НомерЗаявкиАптеки");
	//ТЗОтказовПоПревышению.Колонки.Добавить("КодТовараПоставщика");
	//ТЗОтказовПоПревышению.Колонки.Добавить("НаименованиеТовараПоставщика");
	//ТЗОтказовПоПревышению.Колонки.Добавить("Комментарий");
	
	ТЗПоставщиков = ТЗЗаказа.Скопировать(,"Поставщик,ПривиденККоробу");	
	ТЗПоставщиков.Свернуть("Поставщик,ПривиденККоробу","");
	
	ПревышениеОбработано = Новый Соответствие;

	УспешноеЗавершение = Ложь;
	Для н=0 по 2 Цикл
		Попытка
			СписокДокументов = Новый СписокЗначений;
			НачатьТранзакцию(); //начали транзакцию
			Для каждого стр из ТЗПоставщиков Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("Поставщик",стр.Поставщик);
				Отбор.Вставить("ПривиденККоробу",стр.ПривиденККоробу);
				ЗаказПоПоставщику = ТЗЗаказа.Скопировать(Отбор);
				

				
				
				Док=Документы.Заказ.СоздатьДокумент();
				Док.Поставщик=стр.Поставщик;
				Док.Склад = РаспределяемыйДокумент.Склад;
				Док.Статус=Перечисления.СтатусЗаказаПоставщику.Создан;
				Док.НомерЗаявкиАптеки = РаспределяемыйДокумент.НомерЗаявкиАптеки;
				Док.ДокОснование = РаспределяемыйДокумент.Ссылка;
				Док.ТипЗаказа = РаспределяемыйДокумент.ТипЗаявки;
				Док.Дата=ТекущаяДата();
				
				СтрИзм=Док.Изменения.Добавить();
				СтрИзм.Дата=ТекущаяДата();
				СтрИзм.КомментарийИзменения="Создан документ при распределении из регл. задания";
				СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
				СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.ВводНового;		
				
				Док.Товар.Загрузить(ЗаказПоПоставщику);
				Док.СуммаДок = Док.Товар.Итог("Сумма");
				Док.Записать(РежимЗАписиДокумента.Запись);
				
				СтруктураСписка = Новый Структура;
				СтруктураСписка.Вставить("Док",Док.Ссылка);
				СтруктураСписка.Вставить("ДокОбъект",Док);
				СтруктураСписка.Вставить("Поставщик",стр.Поставщик);
				
				Если ПревышениеОбработано.Получить(стр.Поставщик) = Неопределено Тогда
					ОтборПревышений = Новый Структура;
					ОтборПревышений.Вставить("Поставщик",стр.Поставщик);
					//ОтборПревышений.Вставить("Превышение",1);
					ПревышениеПоПоставщику = ТЗПревышений.Скопировать(ОтборПревышений);				
					//Запомни документ и превышение по нему
					Если ПревышениеПоПоставщику.Количество() > 0 Тогда
						ПревышениеПоПоставщику.Колонки.Добавить("Комментарий");
						Для каждого ы из ПревышениеПоПоставщику Цикл
							ы.Комментарий = "Превышение: " + ы.Цена + " > " + Окр(ы.ПрошлаяЦена,2) + " на " + Окр(ы.ПроцентПревышения,2);
						КонецЦикла;
						СтруктураСписка.Вставить("ТЗПревышений",ПревышениеПоПоставщику);
						ПревышениеОбработано.Вставить(стр.Поставщик,Истина); 
					КонецЕсли;
				КонецЕсли;
				
				СписокДокументов.Добавить(СтруктураСписка);				
				
			КонецЦикла;
			ЗафиксироватьТранзакцию();  //зафиксировали транзакцию
			УспешноеЗавершение = Истина;
			Прервать;
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	
	Если УспешноеЗавершение Тогда
		Для каждого стр из СписокДокументов Цикл
			СтруктураСписка = стр.Значение;
			Если СтруктураСписка.Свойство("ТЗПревышений") Тогда
				НаборЗаписей = РегистрыСведений.ОтказыПоЗаказам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(СтруктураСписка.Док); 
				НаборЗаписей.Загрузить(СтруктураСписка.ТЗПревышений);
				Для каждого СтрокаНабора из НаборЗаписей Цикл
					СтрокаНабора.Дата = ТекущаяДата();	
					СтрокаНабора.Документ = СтруктураСписка.Док;
					СтрокаНабора.Склад = РаспределяемыйДокумент.Склад;
					СтрокаНабора.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
					СтрокаНабора.НомерЗаявкиАптеки = НомерЗаявки;
				КонецЦикла;
				Попытка
					НаборЗаписей.Записать();
				Исключение
					#Если Клиент Тогда
						Сообщить(ОписаниеОшибки());
					#КонецЕсли
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураКВыгрузке = Новый Структура;
	СтруктураКВыгрузке.Вставить("СписокДокументов",СписокДокументов);
	СтруктураКВыгрузке.Вставить("Склад",РаспределяемыйДокумент.Склад);
	СтруктураКВыгрузке.Вставить("СписокПоставщиков",ТЗПоставщиков.ВыгрузитьКолонку("Поставщик"));
	Возврат СтруктураКВыгрузке;
	

КонецФункции  //СоздатьДокументыЗаказа()

Функция ПолучитьТаблицуПревышенияЦенБезКонвертера(ТЗЗаказа,Склад)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Код КАК Код,
	               |	АлгоритмыПревышенияУсловияПрименения.НомерСтроки,
	               |	АлгоритмыПревышенияУсловияПрименения.ЛеваяЧасть,
	               |	АлгоритмыПревышенияУсловияПрименения.ТипУсловия,
	               |	АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть,
	               |	ТИПЗНАЧЕНИЯ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть) КАК ТипПравойЧасти,
	               |	ПРЕДСТАВЛЕНИЕ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть),
	               |	АлгоритмыПревышенияУсловияПрименения.ОбъединятьСоСледующим,
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.ФормулаРасчетаЦены КАК Формула
	               |ИЗ
	               |	Справочник.АлгоритмыПревышения.УсловияПрименения КАК АлгоритмыПревышенияУсловияПрименения
	               |ГДЕ
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				АлгоритмыПревышенияРегионы.Ссылка
	               |			ИЗ
	               |				Справочник.АлгоритмыПревышения.Регионы КАК АлгоритмыПревышенияРегионы
	               |			ГДЕ
	               |				АлгоритмыПревышенияРегионы.Ссылка.Субъект = &Субъект
	               |				И АлгоритмыПревышенияРегионы.Регион = &Регион)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Приоритет УБЫВ,
	               |	АлгоритмыПревышенияУсловияПрименения.ПорядокФормированияУсловия
	               |ИТОГИ ПО
	               |	Код ИЕРАРХИЯ";
	
    Запрос.УстановитьПараметр("Субъект",Склад.СубъектРФ);
	Запрос.УстановитьПараметр("Регион", Склад.Регион );

	Рез = Запрос.Выполнить();
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
	Выборка = Рез.Выбрать(СпособВыборки);
	Т="";
	ПервыйЗаход = Истина;
	Параметры = Новый Структура;
	НомерПараметра = 0;
	
	Т = "ВЫБРАТЬ
		|	Т.КаталогПрайса,
		|	Т.НомерЗаписи,
	    |	Т.Поставщик,
	    |	Т.Товар,
	    |	Т.Цена,
	    |	Т.КодТовараПоставщика,
		|	Т.НаименованиеТовараПоставщика,
	    |	Т.Количество,
	    |	Т.СрокГодности,
		|	Т.ИсключитьИзДобора
	    |ПОМЕСТИТЬ ВТВрем
	    |ИЗ
	    |	&Таб КАК Т
	    |;
	    |
		|ВЫБРАТЬ
		|	ВТВрем.КаталогПрайса,
		|	ВТВрем.НомерЗаписи,
	    |	ВТВрем.Поставщик,
	    |	ВТВрем.Товар,
	    |	ВТВрем.Цена,
	    |	ВТВрем.КодТовараПоставщика,
		|	ВТВрем.НаименованиеТовараПоставщика,
	    |	ВТВрем.Количество,
	    |	ВТВрем.СрокГодности,
		|	ВТВрем.ИсключитьИзДобора,
		|	ВТВрем.Поставщик.ПринадлежитГруппеКомпаний как ПринадлежитГруппеКомпаний,
		|	ВТВрем.Поставщик.ИгнорироватьПревышенияЗакупочнойЦены как ИгнорироватьПревышенияЗакупочнойЦены
	    |ПОМЕСТИТЬ ВТ
		|ИЗ ВТВрем как ВТВрем
		|;
		|УНИЧТОЖИТЬ ВТВрем
		|;
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
		|	ВТ.КаталогПрайса,
		|	ВТ.НомерЗаписи,		
	    |	ВТ.Поставщик,
	    |	ВТ.Товар,
	    |	ВТ.Цена,
	    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)) как КодТовараПоставщика,
		|	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)) как НаименованиеТовараПоставщика,
	    |	ВТ.Количество,
	    |	ВТ.СрокГодности,
	    |	СРЕДНЕЕ(ВЫбор когда ВТ.ИгнорироватьПревышенияЗакупочнойЦены = Истина Тогда 0 Иначе ЕСТЬNULL(ИЗСП.Цена,ИсторияЗакупочнойЦены.Цена) КОНЕЦ) КАК ПрошлаяЦена,
		|	ВТ.ИсключитьИзДобора
		|ПОМЕСТИТЬ ЗаказСИсторией
	    |ИЗ
	    |	ВТ КАК ВТ
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
	    |		ПО (ИсторияЗакупочнойЦены.Товар = ВТ.Товар)  и ИсторияЗакупочнойЦены.СубъектРФ = &СубъектРФ
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦеныСП КАК ИЗСП
	    |		ПО (ИЗСП.Товар = ВТ.Товар)  и ИЗСП.СубъектРФ = &СубъектРФ И ВТ.ПринадлежитГруппеКомпаний = Истина		
	    |
	    |СГРУППИРОВАТЬ ПО
		|	ВТ.КаталогПрайса,
		|	ВТ.НомерЗаписи,			
	    |	ВТ.Поставщик,
	    |	ВТ.Товар,
	    |	ВТ.Цена,
	    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)),
		|	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)),
	    |	ВТ.Количество,
	    |	ВТ.СрокГодности,
		|	ВТ.ИсключитьИзДобора
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |УНИЧТОЖИТЬ ВТ;
		|
		|Выбрать 
		|	ЗаказСИсторией.КаталогПрайса,
		|	ЗаказСИсторией.НомерЗаписи,			
	    |	ЗаказСИсторией.Поставщик,
	    |	ЗаказСИсторией.Товар,
	    |	ЗаказСИсторией.Цена,
	    |	ЗаказСИсторией.КодТовараПоставщика,
		|	ЗаказСИсторией.НаименованиеТовараПоставщика,
	    |	ЗаказСИсторией.Количество,
	    |	ЗаказСИсторией.СрокГодности,
		|	ЗаказСИсторией.ИсключитьИзДобора,
	    |	ЕСТЬNULL(ЗаказСИсторией.ПрошлаяЦена,0) КАК ПрошлаяЦена, ";
	Если Выборка.Количество() > 0 Тогда	
		Пока Выборка.Следующий() Цикл
			Если ПервыйЗаход = Истина Тогда
				Т = Т + Символы.ПС + "ВЫБОР КОГДА ";
				ПервыйЗаход = Ложь;
			Иначе
				Т = Т + Символы.ПС + " КОГДА ";
			КонецЕсли;

			Выборка2 = Выборка.Выбрать(СпособВыборки);
			Формула = "";
			Пока Выборка2.Следующий() Цикл
				Формула = Выборка2.Формула;
				Если Найти(XMLТипЗнч(Выборка2.ПраваяЧасть).ИмяТипа,"Ref") Тогда
					 ПраваяЧасть = "Параметр"+Формат(НомерПараметра,"ЧН=0; ЧГ=0");
					 Параметры.Вставить(ПраваяЧасть,Выборка2.ПраваяЧасть);
					 НомерПараметра = НомерПараметра + 1;
				 Иначе
					 ПраваяЧасть = Формат(Выборка2.ПраваяЧасть,"ЧГ=0");
				КонецЕсли;
				
				Т = Т + Символы.ПС + Выборка2.ЛеваяЧасть + " " + Выборка2.ТипУсловия + " " + ПраваяЧасть + " " + Выборка2.ОбъединятьСоСледующим;
			КонецЦикла;
			Т = Т + Символы.ПС + " ТОГДА " + Формула ;
		КонецЦикла;
		Т = Т + Символы.ПС + " КОНЕЦ КАК Процент";
	Иначе
		Т = Т + Символы.ПС + " 0 КАК Процент";
	КонецЕсли;
	
	Т = Т + "
	|ПОМЕСТИТЬ ТЗСПроцентом
	|ИЗ ЗаказСИсторией как ЗаказСИсторией
	|;
	|Выбрать 
	|	ТЗСПроцентом.КаталогПрайса,
	|	ТЗСПроцентом.НомерЗаписи,	
	|	ТЗСПроцентом.Поставщик,
	|	ТЗСПроцентом.Товар,
	|	ТЗСПроцентом.Цена,
	|	ТЗСПроцентом.КодТовараПоставщика,
	|	ТЗСПроцентом.НаименованиеТовараПоставщика,
	|	ТЗСПроцентом.Количество,
	|	ТЗСПроцентом.Количество*ТЗСПроцентом.Цена как Сумма,	
	|	ТЗСПроцентом.СрокГодности,
	|	ТЗСПроцентом.ПрошлаяЦена,
	|	ТЗСПроцентом.ИсключитьИзДобора,
	|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ Как Превышение,
	|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 ТОГДА -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 ИНАЧЕ 0 КОНЕЦ как ПроцентПревышения
	//|	"""" как Комментарий
	|ИЗ ТЗСПроцентом
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенныеЦены как РЦ 
	|					ПО РЦ.Товар = ТЗСПроцентом.Товар и РЦ.СубъектРФ = &СубъектРФ и РЦ.БрендАптеки = &БрендАптеки и РЦ.Цена = ТЗСПроцентом.Цена
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенныеЦеныНаПериод КАК РЦП
	|	ПО (РЦП.Товар = ТЗСПроцентом.Товар)
	|		И (РЦП.СубъектРФ = &СубъектРФ)
	|		И (РЦП.БрендАптеки = &БрендАптеки)
	|		И (РЦП.ДатаНачалаПериода <= &ТекДата)
	|		И (РЦП.ДатаОкончанияПериода >= &ТекДата)
	|
	|ГДЕ Выбор 
	|		КОГДА ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена 
	|				и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 
	|				и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) 
	|				и РЦ.Товар ЕСТЬ NULL
	|				и (РЦП.Цена ЕСТЬ NULL или (НЕ РЦП.Цена ЕСТЬ NULL и РЦП.Цена < ТЗСПроцентом.Цена ))
	|		ТОГДА 1 
	|		ИНАЧЕ 0 КОНЕЦ = 1
	|;
	|УНИЧТОЖИТЬ ТЗСПроцентом; УНИЧТОЖИТЬ ЗаказСИсторией;";
	
	Т = СтрЗаменить(Т,"Параметр","&Параметр");
	Т = СтрЗаменить(Т,"Склад.Регион","&Регион");
	Запрос.Текст = Т;
	
	//Сообщить(Т);
	Для каждого стр из Параметры Цикл
		//Сообщить("Запрос.УстановитьПараметр(""" + стр.Ключ + ""","+ "" + стр.Значение + ")");
		Запрос.УстановитьПараметр("" + стр.Ключ + "", стр.Значение );
	КонецЦикла;

	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );
	Запрос.УстановитьПараметр("Таб", ТЗЗаказа );
	Запрос.УстановитьПараметр("СубъектРФ", Склад.СубъектРФ );
	Запрос.УстановитьПараметр("Регион", Склад.Регион );
	Запрос.УстановитьПараметр("БрендАптеки", Склад.Бренд );

	Возврат Запрос.Выполнить().Выгрузить();
	//Возврат ТЗЗаказа;
	
КонецФункции

Функция ПолучитьТаблицуПревышенияЦенБезКонвертераДляИнтернетАптеки(ТЗЗаказа,Склад)
	
	//============== Было реализовано по ТЗ , но бизнес вдруг понял , что нужно по другому. Ниже код по новому ТЗ
	//по заявке SKD-164 вернул старый вариант для интернет: в отказы должны попадать только те товары, по которым Цена выше ПредельнаяЦенаЗакупки

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.КаталогПрайса КАК КаталогПрайса,
	               |	Т.НомерЗаписи КАК НомерЗаписи,
	               |	Т.Поставщик КАК Поставщик,
	               |	Т.Товар КАК Товар,
	               |	Т.Цена КАК Цена,
	               |	Т.КодТовара КАК КодТовара,
	               |	Т.КодТовараПоставщика КАК КодТовараПоставщика,
	               |	Т.НаименованиеТовараПоставщика КАК НаименованиеТовараПоставщика,
	               |	Т.Количество КАК Количество,
	               |	Т.СрокГодности КАК СрокГодности,
	               |	Т.ИсключитьИзДобора КАК ИсключитьИзДобора
	               |ПОМЕСТИТЬ ВТВрем
	               |ИЗ
	               |	&Таб КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.КаталогПрайса КАК КаталогПрайса,
	               |	ВТ.НомерЗаписи КАК НомерЗаписи,
	               |	ВТ.Поставщик КАК Поставщик,
				   //|	ВТ.КодТовара КАК КодТовара,
	               |	ВТ.Товар КАК Товар,
	               |	ВТ.Цена КАК Цена,
	               |	ВЫРАЗИТЬ(ВТ.КодТовараПоставщика КАК СТРОКА(40)) КАК КодТовараПоставщика,
	               |	ВЫРАЗИТЬ(ВТ.НаименованиеТовараПоставщика КАК СТРОКА(150)) КАК НаименованиеТовараПоставщика,
	               |	ВТ.Количество КАК Количество,
	               |	ВТ.Цена * ВТ.Количество КАК Сумма,
	               |	ВТ.СрокГодности КАК СрокГодности,
	               |	ПЦ.ПредельнаяЦенаЗакупки КАК ПрошлаяЦена,
	               //|	ПЦ.ПредельнаяЦенаЗакупки КАК ПредельнаяЦена,
	               |	ВТ.ИсключитьИзДобора КАК ИсключитьИзДобора,
	               |	ИСТИНА КАК Превышение,
	               |	ВЫРАЗИТЬ((ВТ.Цена / ПЦ.ПредельнаяЦенаЗакупки - 1) * 100 КАК ЧИСЛО(12, 2)) КАК ПроцентПревышения
	               |ИЗ
	               |	ВТВрем КАК ВТ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредельныеЦеныЗакупкиПоАссортименту КАК ПЦ
	               |		ПО (ПЦ.КодТовар = ВТ.КодТовара)
	               |			И (ПЦ.ДатаНачалаДействияЦены <= &ТекущаяДата)
	               |			И (&ТекущаяДата <= ПЦ.ДатаОкончанияДействияЦены)
	               |ГДЕ
	               |	ВТ.Цена > ПЦ.ПредельнаяЦенаЗакупки
	               |	И ПЦ.ПредельнаяЦенаЗакупки > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТВрем";
	
	

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата() );
	Запрос.УстановитьПараметр("Таб", ТЗЗаказа );
	Возврат Запрос.Выполнить().Выгрузить();
	//по заявке SKD-164 вернул старый вариант для интернет: в отказы должны попадать только те товары, по которым Цена выше ПредельнаяЦенаЗакупки
    //Ниже закомментировал код который работал
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Код КАК Код,
	//               |	АлгоритмыПревышенияУсловияПрименения.НомерСтроки,
	//               |	АлгоритмыПревышенияУсловияПрименения.ЛеваяЧасть,
	//               |	АлгоритмыПревышенияУсловияПрименения.ТипУсловия,
	//               |	АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть,
	//               |	ТИПЗНАЧЕНИЯ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть) КАК ТипПравойЧасти,
	//               |	ПРЕДСТАВЛЕНИЕ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть),
	//               |	АлгоритмыПревышенияУсловияПрименения.ОбъединятьСоСледующим,
	//               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.ФормулаРасчетаЦены КАК Формула
	//               |ИЗ
	//               |	Справочник.АлгоритмыПревышения.УсловияПрименения КАК АлгоритмыПревышенияУсловияПрименения
	//               |ГДЕ
	//               |	АлгоритмыПревышенияУсловияПрименения.Ссылка В
	//               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |				АлгоритмыПревышенияРегионы.Ссылка
	//               |			ИЗ
	//               |				Справочник.АлгоритмыПревышения.Регионы КАК АлгоритмыПревышенияРегионы
	//               |			ГДЕ
	//               |				АлгоритмыПревышенияРегионы.Ссылка.Субъект = &Субъект
	//               |				И АлгоритмыПревышенияРегионы.Регион = &Регион)
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Приоритет УБЫВ,
	//               |	АлгоритмыПревышенияУсловияПрименения.ПорядокФормированияУсловия
	//               |ИТОГИ ПО
	//               |	Код ИЕРАРХИЯ";
	//
	//Запрос.УстановитьПараметр("Субъект",Склад.СубъектРФ);
	//Запрос.УстановитьПараметр("Регион", Склад.Регион );

	//Рез = Запрос.Выполнить();
	//СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
	//Выборка = Рез.Выбрать(СпособВыборки);
	//Т="";
	//ПервыйЗаход = Истина;
	//Параметры = Новый Структура;
	//НомерПараметра = 0;
	//
	//Т = "ВЫБРАТЬ
	//	|	Т.КаталогПрайса,
	//	|	Т.НомерЗаписи,
	//    |	Т.Поставщик,
	//    |	Т.Товар,
	//	|	Т.КодТовара,
	//    |	Т.Цена,
	//    |	Т.КодТовараПоставщика,
	//	|	Т.НаименованиеТовараПоставщика,
	//    |	Т.Количество,
	//    |	Т.СрокГодности,
	//	|	Т.ИсключитьИзДобора
	//    |ПОМЕСТИТЬ ВТВрем
	//    |ИЗ
	//    |	&Таб КАК Т
	//    |;
	//    |
	//	|ВЫБРАТЬ
	//	|	ВТВрем.КаталогПрайса,
	//	|	ВТВрем.НомерЗаписи,
	//    |	ВТВрем.Поставщик,
	//    |	ВТВрем.Товар,
	//	|	ВТВрем.КодТовара,
	//    |	ВТВрем.Цена,
	//    |	ВТВрем.КодТовараПоставщика,
	//	|	ВТВрем.НаименованиеТовараПоставщика,
	//    |	ВТВрем.Количество,
	//    |	ВТВрем.СрокГодности,
	//	|	ВТВрем.ИсключитьИзДобора,
	//	|	ВТВрем.Поставщик.ПринадлежитГруппеКомпаний как ПринадлежитГруппеКомпаний,
	//	|	ВТВрем.Поставщик.ИгнорироватьПревышенияЗакупочнойЦены как ИгнорироватьПревышенияЗакупочнойЦены
	//    |ПОМЕСТИТЬ ВТ
	//	|ИЗ ВТВрем как ВТВрем
	//	|;
	//	|УНИЧТОЖИТЬ ВТВрем
	//	|;
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//	|	ВТ.КаталогПрайса,
	//	|	ВТ.НомерЗаписи,		
	//    |	ВТ.Поставщик,
	//    |	ВТ.Товар,
	//	|	ВТ.КодТовара,
	//    |	ВТ.Цена,
	//    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)) как КодТовараПоставщика,
	//	|	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)) как НаименованиеТовараПоставщика,
	//    |	ВТ.Количество,
	//    |	ВТ.СрокГодности,
	//    |	СРЕДНЕЕ(ВЫбор когда ВТ.ИгнорироватьПревышенияЗакупочнойЦены = Истина Тогда 0 Иначе ЕСТЬNULL(ИЗСП.Цена,ИсторияЗакупочнойЦены.Цена) КОНЕЦ) КАК ПрошлаяЦена,
	//	|	ВТ.ИсключитьИзДобора
	//	|ПОМЕСТИТЬ ЗаказСИсторией
	//    |ИЗ
	//    |	ВТ КАК ВТ
	//    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
	//    |		ПО (ИсторияЗакупочнойЦены.Товар = ВТ.Товар)  и ИсторияЗакупочнойЦены.СубъектРФ = &СубъектРФ
	//    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦеныСП КАК ИЗСП
	//    |		ПО (ИЗСП.Товар = ВТ.Товар)  и ИЗСП.СубъектРФ = &СубъектРФ И ВТ.ПринадлежитГруппеКомпаний = Истина		
	//    |
	//    |СГРУППИРОВАТЬ ПО
	//	|	ВТ.КаталогПрайса,
	//	|	ВТ.НомерЗаписи,			
	//    |	ВТ.Поставщик,
	//    |	ВТ.Товар,
	//	|	ВТ.КодТовара,
	//    |	ВТ.Цена,
	//    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)),
	//	|	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)),
	//    |	ВТ.Количество,
	//    |	ВТ.СрокГодности,
	//	|	ВТ.ИсключитьИзДобора
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |УНИЧТОЖИТЬ ВТ;
	//	|
	//	|Выбрать 
	//	|	ЗаказСИсторией.КаталогПрайса,
	//	|	ЗаказСИсторией.НомерЗаписи,			
	//    |	ЗаказСИсторией.Поставщик,
	//    |	ЗаказСИсторией.Товар,
	//	|	ЗаказСИсторией.КодТовара,
	//    |	ЗаказСИсторией.Цена,
	//    |	ЗаказСИсторией.КодТовараПоставщика,
	//	|	ЗаказСИсторией.НаименованиеТовараПоставщика,
	//    |	ЗаказСИсторией.Количество,
	//    |	ЗаказСИсторией.СрокГодности,
	//	|	ЗаказСИсторией.ИсключитьИзДобора,
	//    |	ЕСТЬNULL(ЗаказСИсторией.ПрошлаяЦена,0) КАК ПрошлаяЦена, ";
	//Если Выборка.Количество() > 0 Тогда	
	//	Пока Выборка.Следующий() Цикл
	//		Если ПервыйЗаход = Истина Тогда
	//			Т = Т + Символы.ПС + "ВЫБОР КОГДА ";
	//			ПервыйЗаход = Ложь;
	//		Иначе
	//			Т = Т + Символы.ПС + " КОГДА ";
	//		КонецЕсли;

	//		Выборка2 = Выборка.Выбрать(СпособВыборки);
	//		Формула = "";
	//		Пока Выборка2.Следующий() Цикл
	//			Формула = Выборка2.Формула;
	//			Если Найти(XMLТипЗнч(Выборка2.ПраваяЧасть).ИмяТипа,"Ref") Тогда
	//				 ПраваяЧасть = "Параметр"+Формат(НомерПараметра,"ЧН=0; ЧГ=0");
	//				 Параметры.Вставить(ПраваяЧасть,Выборка2.ПраваяЧасть);
	//				 НомерПараметра = НомерПараметра + 1;
	//			 Иначе
	//				 ПраваяЧасть = Формат(Выборка2.ПраваяЧасть,"ЧГ=0");
	//			КонецЕсли;
	//			
	//			Т = Т + Символы.ПС + Выборка2.ЛеваяЧасть + " " + Выборка2.ТипУсловия + " " + ПраваяЧасть + " " + Выборка2.ОбъединятьСоСледующим;
	//		КонецЦикла;
	//		Т = Т + Символы.ПС + " ТОГДА " + Формула ;
	//	КонецЦикла;
	//	Т = Т + Символы.ПС + " КОНЕЦ КАК Процент";
	//Иначе
	//	Т = Т + Символы.ПС + " 0 КАК Процент";
	//КонецЕсли;
	//
	//Т = Т + "
	//|ПОМЕСТИТЬ ТЗСПроцентом
	//|ИЗ ЗаказСИсторией как ЗаказСИсторией
	//|;
	//|Выбрать 
	//|	ТЗСПроцентом.КаталогПрайса,
	//|	ТЗСПроцентом.НомерЗаписи,	
	//|	ТЗСПроцентом.Поставщик,
	//|	ТЗСПроцентом.Товар,
	//|	ТЗСПроцентом.Цена,
	//|	ТЗСПроцентом.КодТовараПоставщика,
	//|	ТЗСПроцентом.НаименованиеТовараПоставщика,
	//|	ТЗСПроцентом.Количество,
	//|	ТЗСПроцентом.Количество*ТЗСПроцентом.Цена как Сумма,	
	//|	ТЗСПроцентом.СрокГодности,
	//|	ТЗСПроцентом.ПрошлаяЦена,
	//|	ТЗСПроцентом.ИсключитьИзДобора,
	//|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ Как Превышение,
	//|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 ТОГДА -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 ИНАЧЕ 0 КОНЕЦ как ПроцентПревышения
	////|	"""" как Комментарий
	//|ИЗ ТЗСПроцентом
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенныеЦены как РЦ 
	//|					ПО РЦ.Товар = ТЗСПроцентом.Товар и РЦ.СубъектРФ = &СубъектРФ и РЦ.БрендАптеки = &БрендАптеки и РЦ.Цена = ТЗСПроцентом.Цена
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенныеЦеныНаПериод КАК РЦП
	//|	ПО (РЦП.Товар = ТЗСПроцентом.Товар)
	//|		И (РЦП.СубъектРФ = &СубъектРФ)
	//|		И (РЦП.БрендАптеки = &БрендАптеки)
	//|		И (РЦП.ДатаНачалаПериода <= &ТекДата)
	//|		И (РЦП.ДатаОкончанияПериода >= &ТекДата)
	//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельныеЦеныЗакупкиПоАссортименту КАК ПЦ
	//|		ПО (ПЦ.КодТовар = ТЗСПроцентом.КодТовара)
	//|			И (ПЦ.ДатаНачалаДействияЦены <= &ТекДата)
	//|			И (&ТекДата <= ПЦ.ДатаОкончанияДействияЦены)
	//|
	//|ГДЕ Выбор 
	//|		КОГДА ТЗСПроцентом.Цена > ЕСТЬNULL(ПЦ.ПредельнаяЦенаЗакупки,0) и ЕСТЬNULL(ПЦ.ПредельнаяЦенаЗакупки,0) > 0 Тогда
	//|			1
	//|		КОГДА ТЗСПроцентом.Цена < ЕСТЬNULL(ПЦ.ПредельнаяЦенаЗакупки,0) Тогда
	//|			0
	//|		КОГДА ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена 
	//|				и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 
	//|				и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) 
	//|				и РЦ.Товар ЕСТЬ NULL
	//|				и (РЦП.Цена ЕСТЬ NULL или (НЕ РЦП.Цена ЕСТЬ NULL и РЦП.Цена < ТЗСПроцентом.Цена ))
	//|		ТОГДА 1 
	//|		ИНАЧЕ 0 КОНЕЦ = 1
	//|;
	//|УНИЧТОЖИТЬ ТЗСПроцентом; УНИЧТОЖИТЬ ЗаказСИсторией;";
	//
	//Т = СтрЗаменить(Т,"Параметр","&Параметр");
	//Т = СтрЗаменить(Т,"Склад.Регион","&Регион");
	//Запрос.Текст = Т;
	//
	////Сообщить(Т);
	//Для каждого стр из Параметры Цикл
	//	//Сообщить("Запрос.УстановитьПараметр(""" + стр.Ключ + ""","+ "" + стр.Значение + ")");
	//	Запрос.УстановитьПараметр("" + стр.Ключ + "", стр.Значение );
	//КонецЦикла;

	//Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );
	//Запрос.УстановитьПараметр("Таб", ТЗЗаказа );
	//Запрос.УстановитьПараметр("СубъектРФ", Склад.СубъектРФ );
	//Запрос.УстановитьПараметр("Регион", Склад.Регион );
	//Запрос.УстановитьПараметр("БрендАптеки", Склад.Бренд );

	//Возврат Запрос.Выполнить().Выгрузить();

	
КонецФункции


Функция ПолучитьТаблицуПревышенияЦен(ТЗЗаказа,Склад)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Код КАК Код,
	               |	АлгоритмыПревышенияУсловияПрименения.НомерСтроки,
	               |	АлгоритмыПревышенияУсловияПрименения.ЛеваяЧасть,
	               |	АлгоритмыПревышенияУсловияПрименения.ТипУсловия,
	               |	АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть,
	               |	ТИПЗНАЧЕНИЯ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть) КАК ТипПравойЧасти,
	               |	ПРЕДСТАВЛЕНИЕ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть),
	               |	АлгоритмыПревышенияУсловияПрименения.ОбъединятьСоСледующим,
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.ФормулаРасчетаЦены КАК Формула
	               |ИЗ
	               |	Справочник.АлгоритмыПревышения.УсловияПрименения КАК АлгоритмыПревышенияУсловияПрименения
	               |ГДЕ
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				АлгоритмыПревышенияРегионы.Ссылка
	               |			ИЗ
	               |				Справочник.АлгоритмыПревышения.Регионы КАК АлгоритмыПревышенияРегионы
	               |			ГДЕ
	               |				АлгоритмыПревышенияРегионы.Ссылка.Субъект = &Субъект
	               |				И АлгоритмыПревышенияРегионы.Регион = &Регион)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Приоритет УБЫВ,
	               |	АлгоритмыПревышенияУсловияПрименения.ПорядокФормированияУсловия
	               |ИТОГИ ПО
	               |	Код ИЕРАРХИЯ";
	
    Запрос.УстановитьПараметр("Субъект",Склад.СубъектРФ);
	Запрос.УстановитьПараметр("Регион", Склад.Регион );

	Рез = Запрос.Выполнить();
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
	Выборка = Рез.Выбрать(СпособВыборки);
	Т="";
	ПервыйЗаход = Истина;
	Параметры = Новый Структура;
	НомерПараметра = 0;
	
	Т = "ВЫБРАТЬ
	    |	Т.Поставщик,
	    |	Т.Товар,
	    |	Т.Цена,
	    |	Т.КодТовараПоставщика,
		|	Т.НаименованиеТовараПоставщика,
	    |	Т.Количество,
	    |	Т.СрокГодности
	    |ПОМЕСТИТЬ ВТВрем
	    |ИЗ
	    |	&Таб КАК Т
	    |;
	    |
		|ВЫБРАТЬ
	    |	ВТВрем.Поставщик,
	    |	ВТВрем.Товар,
	    |	ВТВрем.Цена,
	    |	ВТВрем.КодТовараПоставщика,
		|	ВТВрем.НаименованиеТовараПоставщика,
	    |	ВТВрем.Количество,
	    |	ВТВрем.СрокГодности,
		|	ВТВрем.Поставщик.ПринадлежитГруппеКомпаний как ПринадлежитГруппеКомпаний,
		|	ВТВрем.Поставщик.ИгнорироватьПревышенияЗакупочнойЦены как ИгнорироватьПревышенияЗакупочнойЦены
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТВрем как ВТВрем
		|
		|;
		|УНИЧТОЖИТЬ ВТВрем
		|;
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ВТ.Поставщик,
	    |	ВТ.Товар,
	    |	ВТ.Цена,
	    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)) как КодТовараПоставщика,
		|	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)) как НаименованиеТовараПоставщика,
	    |	ВТ.Количество,
	    |	ВТ.СрокГодности,
	    |	СРЕДНЕЕ(ВЫбор когда ВТ.ИгнорироватьПревышенияЗакупочнойЦены = Истина Тогда 0 Иначе ЕСТЬNULL(ИЗСП.Цена,ИсторияЗакупки.Цена) конец ) КАК ПрошлаяЦена
		|ПОМЕСТИТЬ ЗаказСИсторией
	    |ИЗ
	    |	ВТ КАК ВТ
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупки
	    |		ПО (ИсторияЗакупки.Товар = ВТ.Товар)  и ИсторияЗакупки.СубъектРФ = &СубъектРФ и 
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦеныСП КАК ИЗСП
	    |		ПО (ИЗСП.Товар = ВТ.Товар)  и ИЗСП.СубъектРФ = &СубъектРФ И ВТ.ПринадлежитГруппеКомпаний = Истина
	    |
		|СГРУППИРОВАТЬ ПО
	    |	ВТ.Поставщик,
	    |	ВТ.Товар,
	    |	ВТ.Цена,
	    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)),
		|	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)),
	    |	ВТ.Количество,
	    |	ВТ.СрокГодности
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |УНИЧТОЖИТЬ ВТ;
		| 
		|Выбрать 
	    |	ЗаказСИсторией.Поставщик,
	    |	ЗаказСИсторией.Товар,
	    |	ЗаказСИсторией.Цена,
	    |	ЗаказСИсторией.КодТовараПоставщика,
		|	ЗаказСИсторией.НаименованиеТовараПоставщика,
	    |	ЗаказСИсторией.Количество,
	    |	ЗаказСИсторией.СрокГодности,
	    |	ЕСТЬNULL(ЗаказСИсторией.ПрошлаяЦена,0) КАК ПрошлаяЦена, ";
	Пока Выборка.Следующий() Цикл
		Если ПервыйЗаход = Истина Тогда
			Т = Т + Символы.ПС + "ВЫБОР КОГДА ";
			ПервыйЗаход = Ложь;
		Иначе
			Т = Т + Символы.ПС + " КОГДА ";
		КонецЕсли;

		Выборка2 = Выборка.Выбрать(СпособВыборки);
		Формула = "";
		Пока Выборка2.Следующий() Цикл
			Формула = Выборка2.Формула;
			Если Найти(XMLТипЗнч(Выборка2.ПраваяЧасть).ИмяТипа,"Ref") Тогда
				 ПраваяЧасть = "Параметр"+Формат(НомерПараметра,"ЧН=0; ЧГ=0");
				 Параметры.Вставить(ПраваяЧасть,Выборка2.ПраваяЧасть);
				 НомерПараметра = НомерПараметра + 1;
			 Иначе
				 ПраваяЧасть = Формат(Выборка2.ПраваяЧасть,"ЧГ=0");
			КонецЕсли;
			
			Т = Т + Символы.ПС + Выборка2.ЛеваяЧасть + " " + Выборка2.ТипУсловия + " " + ПраваяЧасть + " " + Выборка2.ОбъединятьСоСледующим;
		КонецЦикла;
		Т = Т + Символы.ПС + " ТОГДА " + Формула ;
	КонецЦикла;
	Т = Т + Символы.ПС + " КОНЕЦ КАК Процент";
	
	Т = Т + "
	|ПОМЕСТИТЬ ТЗСПроцентом
	|ИЗ ЗаказСИсторией как ЗаказСИсторией
	|;
	|Выбрать 
	|	ТЗСПроцентом.Поставщик,
	|	ТЗСПроцентом.Товар,
	|	ТЗСПроцентом.Цена,
	|	ТЗСПроцентом.КодТовараПоставщика,
	|	ТЗСПроцентом.НаименованиеТовараПоставщика,
	|	ТЗСПроцентом.Количество,
	|	ТЗСПроцентом.Количество*ТЗСПроцентом.Цена как Сумма,	
	|	ТЗСПроцентом.СрокГодности,
	|	ТЗСПроцентом.ПрошлаяЦена,
	|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ Как Превышение,
	|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 ТОГДА -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 ИНАЧЕ 0 КОНЕЦ как ПроцентПревышения
	//|	"""" как Комментарий
	|ИЗ ТЗСПроцентом
	|ГДЕ Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ = 1
	|;
	|УНИЧТОЖИТЬ ТЗСПроцентом; УНИЧТОЖИТЬ ЗаказСИсторией;";
	
	Т = СтрЗаменить(Т,"Параметр","&Параметр");
	Т = СтрЗаменить(Т,"Склад.Регион","&Регион");
	Запрос.Текст = Т;
	
	//Сообщить(Т);
	Для каждого стр из Параметры Цикл
		//Сообщить("Запрос.УстановитьПараметр(""" + стр.Ключ + ""","+ "" + стр.Значение + ")");
		Запрос.УстановитьПараметр("" + стр.Ключ + "", стр.Значение );
	КонецЦикла;

	Запрос.УстановитьПараметр("Таб", ТЗЗаказа );
	Запрос.УстановитьПараметр("СубъектРФ", Склад.СубъектРФ );
	Запрос.УстановитьПараметр("Регион", Склад.Регион );

	Возврат Запрос.Выполнить().Выгрузить();
	//Возврат ТЗЗаказа;
	
КонецФункции



Процедура ПроверитьПревышенияЦен(ТЗЗаказа,Склад)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Код КАК Код,
	               |	АлгоритмыПревышенияУсловияПрименения.НомерСтроки,
	               |	АлгоритмыПревышенияУсловияПрименения.ЛеваяЧасть,
	               |	АлгоритмыПревышенияУсловияПрименения.ТипУсловия,
	               |	АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть,
	               |	ТИПЗНАЧЕНИЯ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть) КАК ТипПравойЧасти,
	               |	ПРЕДСТАВЛЕНИЕ(АлгоритмыПревышенияУсловияПрименения.ПраваяЧасть),
	               |	АлгоритмыПревышенияУсловияПрименения.ОбъединятьСоСледующим,
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.ФормулаРасчетаЦены КАК Формула
	               |ИЗ
	               |	Справочник.АлгоритмыПревышения.УсловияПрименения КАК АлгоритмыПревышенияУсловияПрименения
	               |ГДЕ
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				АлгоритмыПревышенияРегионы.Ссылка
	               |			ИЗ
	               |				Справочник.АлгоритмыПревышения.Регионы КАК АлгоритмыПревышенияРегионы
	               |			ГДЕ
	               |				АлгоритмыПревышенияРегионы.Ссылка.Субъект = &Субъект
	               |				И АлгоритмыПревышенияРегионы.Регион = &Регион)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АлгоритмыПревышенияУсловияПрименения.Ссылка.Приоритет УБЫВ,
	               |	АлгоритмыПревышенияУсловияПрименения.ПорядокФормированияУсловия
	               |ИТОГИ ПО
	               |	Код ИЕРАРХИЯ";
	
    Запрос.УстановитьПараметр("Субъект",Склад.СубъектРФ);
	Запрос.УстановитьПараметр("Регион", Склад.Регион );

	Рез = Запрос.Выполнить();
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
	Выборка = Рез.Выбрать(СпособВыборки);
	Т="";
	ПервыйЗаход = Истина;
	Параметры = Новый Структура;
	НомерПараметра = 0;
	
	Т = "ВЫБРАТЬ
	    |	Т.Поставщик,
	    |	Т.Товар,
	    |	Т.Цена,
	    |	Т.КодТовараПоставщика,
	    |	Т.НаименованиеТовараПоставщика,
	    |	Т.Количество,
	    |	Т.СрокГодности
	    |ПОМЕСТИТЬ ВТ
	    |ИЗ
	    |	&Таб КАК Т
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ВТ.Поставщик,
	    |	ВТ.Товар,
	    |	ВТ.Цена,
	    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)) как КодТовараПоставщика,
	    |	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)) как НаименованиеТовараПоставщика,
	    |	ВТ.Количество,
	    |	ВТ.СрокГодности,
	    |	СРЕДНЕЕ(ИсторияЗакупочнойЦены.Цена) КАК ПрошлаяЦена
		|ПОМЕСТИТЬ ЗаказСИсторией
	    |ИЗ
	    |	ВТ КАК ВТ
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
	    |		ПО (ИсторияЗакупочнойЦены.Товар = ВТ.Товар)  и СубъектРФ = &СубъектРФ
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ВТ.Поставщик,
	    |	ВТ.Товар,
	    |	ВТ.Цена,
	    |	Выразить(ВТ.КодТовараПоставщика как Строка(40)),
	    |	Выразить(ВТ.НаименованиеТовараПоставщика как Строка(150)),
	    |	ВТ.Количество,
	    |	ВТ.СрокГодности
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |УНИЧТОЖИТЬ ВТ;
		|
		|Выбрать 
	    |	ЗаказСИсторией.Поставщик,
	    |	ЗаказСИсторией.Товар,
	    |	ЗаказСИсторией.Цена,
	    |	ЗаказСИсторией.КодТовараПоставщика,
	    |	ЗаказСИсторией.НаименованиеТовараПоставщика,
	    |	ЗаказСИсторией.Количество,
	    |	ЗаказСИсторией.СрокГодности,
	    |	ЕСТЬNULL(ЗаказСИсторией.ПрошлаяЦена,0) КАК ПрошлаяЦена, ";
	Пока Выборка.Следующий() Цикл
		Если ПервыйЗаход = Истина Тогда
			Т = Т + Символы.ПС + "ВЫБОР КОГДА ";
			ПервыйЗаход = Ложь;
		Иначе
			Т = Т + Символы.ПС + " КОГДА ";
		КонецЕсли;

		Выборка2 = Выборка.Выбрать(СпособВыборки);
		Формула = "";
		Пока Выборка2.Следующий() Цикл
			Формула = Выборка2.Формула;
			Если Найти(XMLТипЗнч(Выборка2.ПраваяЧасть).ИмяТипа,"Ref") Тогда
				 ПраваяЧасть = "Параметр"+Формат(НомерПараметра,"ЧН=0; ЧГ=0");
				 Параметры.Вставить(ПраваяЧасть,Выборка2.ПраваяЧасть);
				 НомерПараметра = НомерПараметра + 1;
			 Иначе
				 ПраваяЧасть = Формат(Выборка2.ПраваяЧасть,"ЧГ=0");
			КонецЕсли;
			
			Т = Т + Символы.ПС + Выборка2.ЛеваяЧасть + " " + Выборка2.ТипУсловия + " " + ПраваяЧасть + " " + Выборка2.ОбъединятьСоСледующим;
		КонецЦикла;
		Т = Т + Символы.ПС + " ТОГДА " + Формула ;
	КонецЦикла;
	Т = Т + Символы.ПС + " КОНЕЦ КАК Процент";
	
	Т = Т + "
	|ПОМЕСТИТЬ ТЗСПроцентом
	|ИЗ ЗаказСИсторией как ЗаказСИсторией
	|;
	|Выбрать 
	|	ТЗСПроцентом.Поставщик,
	|	ТЗСПроцентом.Товар,
	|	ТЗСПроцентом.Цена,
	|	ТЗСПроцентом.КодТовараПоставщика,
	|	ТЗСПроцентом.НаименованиеТовараПоставщика,
	|	ТЗСПроцентом.Количество,
	|	ТЗСПроцентом.Количество*ТЗСПроцентом.Цена как Сумма,	
	|	ТЗСПроцентом.СрокГодности,
	|	ТЗСПроцентом.ПрошлаяЦена,
	|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 и -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 > ЕСТЬNULL(Процент,0) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ Как Превышение,
	|	Выбор когда ТЗСПроцентом.Цена > ТЗСПроцентом.ПрошлаяЦена и ЕСТЬNULL(Процент,0) > 0 и ТЗСПроцентом.ПрошлаяЦена > 0 ТОГДА -1*(1-ТЗСПроцентом.Цена/ТЗСПроцентом.ПрошлаяЦена)*100 ИНАЧЕ 0 КОНЕЦ как ПроцентПревышения
	//|	"""" как Комментарий
	|ИЗ ТЗСПроцентом
	|;
	|УНИЧТОЖИТЬ ТЗСПроцентом; УНИЧТОЖИТЬ ЗаказСИсторией;";
	
	Т = СтрЗаменить(Т,"Параметр","&Параметр");
	Т = СтрЗаменить(Т,"Склад.Регион","&Регион");
	Запрос.Текст = Т;
	
	//Сообщить(Т);
	Для каждого стр из Параметры Цикл
		//Сообщить("Запрос.УстановитьПараметр(""" + стр.Ключ + ""","+ "" + стр.Значение + ")");
		Запрос.УстановитьПараметр("" + стр.Ключ + "", стр.Значение );
	КонецЦикла;

	Запрос.УстановитьПараметр("Таб", ТЗЗаказа );
	Запрос.УстановитьПараметр("СубъектРФ", Склад.СубъектРФ );
	Запрос.УстановитьПараметр("Регион", Склад.Регион );

	ТЗЗаказа = Запрос.Выполнить().Выгрузить();
	//Возврат ТЗЗаказа;
	
КонецПроцедуры

Процедура ЗаписатьОтказыВРегистр(Док,ТаблицаОтказов)
	
	НомерЗаявкиАптеки = Док.НомерЗаявкиАптеки;
	Если ТаблицаОтказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтказов.ЗаполнитьЗначения(Док,"Документ");
	
	НаборЗаписей = РегистрыСведений.ОтказыПоЗаказам.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Документ.Установить(Док); 

	НаборЗаписей.Загрузить(ТаблицаОтказов);
	

	Для н=0 По 1 Цикл
		//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			
		//	ТекБлокировка = Новый БлокировкаДанных;
		//	БлокировкаРегистра = ТекБлокировка.Добавить("РегистрСведений.ОтказыПоЗаказам");
		//	БлокировкаРегистра.УстановитьЗначение("Документ",Док);
		//	БлокировкаРегистра.Режим = РежимБлокировкиДанных.Исключительный;
		//	ТекБлокировка.Заблокировать();
			
			НаборЗаписей.Записать();
		//	ЗафиксироватьТранзакцию();
			Прервать;
		Исключение
		//	ОтменитьТранзакцию();
			ОбщегоНазначения.Задержка(2);
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;
	ТаблицаОтказов.Очистить();
	
КонецПроцедуры


Процедура ЗаписатьОтказыИЗаявку(Док,ТЗОтказов)
	
   	Записан = Ложь;
	Для н=0 По 1 Цикл
		Попытка
			ДокОбъект = Док.ПолучитьОбъект();
			ДокОбъект.Комментарий = "";
			ДокОбъект.Статус = Перечисления.СтатусЗаказаПоставщику.Проведен;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Записан = Истина;
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки; 
	КонецЦикла;
	
	Если Записан = Истина Тогда
		Если ТЗОтказов.Количество() > 0 Тогда
			ТЗОтказов.Свернуть("Дата,Документ,Поставщик,Склад,Товар,НомерЗаявкиАптеки,ПричинаОтказа,Комментарий","Количество");				
			//ТЗОтказов.Свернуть("Дата,Документ,Поставщик,Склад,Товар,Цена,Сумма,КодТовараПоставщика,НаименованиеТОвараПоставщика,НомерЗаявкиАптеки,ПричинаОтказа,Комментарий","Количество");				
		КонецЕсли;
		ЗаписатьОтказыВРегистр(Док,ТЗОтказов);
	КонецЕсли;
	
	
КонецПроцедуры //СоздатьДокументНераспределенногоЗаказа()

//================= Процедрура выгрузки распределенных документов поставщику ================================
// Действия : 
//				1. Проверяем на мин. заказ, если мин.зак меньше, то помечаем документ на удаление
//				2. Если сумма дока больше мин. заказа, то проверяем на Автовыгрузку документа и соответственно, либо выгружаем, либо нет
Процедура ВыгрузитьДокументыПоставщику(СтруктураКВыгрузке,УчитыватьРанееВыгруженные = Ложь)
	
	
		  
	ТХТ = "ВЫБРАТЬ
	      |	КонтрактыИНастройки.НастройкаОбмена.АвтоВыгрузкаЗаказов КАК АвтоматическаяВыгрузкаЗаказов,
	      |	КонтрактыИНастройки.НастройкаОбмена.СуммаПороговая КАК СуммаПороговаяЗаказа,
	      |	КонтрактыИНастройки.НастройкаОбмена.СуммаМинимальногоЗаказа КАК СуммаМинимальногоЗаказа,
	      |	КонтрактыИНастройки.НастройкаОбмена.Владелец.НеПринимаетДозаказ КАК НеПринимаетДозаказ,
	      |	КонтрактыИНастройки.НастройкаОбмена.Владелец КАК Поставщик,
	      |	КонтрактыИНастройки.НастройкаОбмена.НаличиеЭДО как НаличиеЭДО,
	      |	КонтрактыИНастройки.НастройкаОбмена.ЮЛДляКроссДокинга  как ЮЛДляКроссДокинга
	      |ИЗ
	      |	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрактыИНастройки КАК КонтрактыИНастройки
	      |		ПО КонтрактыИАптеки.Владелец = КонтрактыИНастройки.Контракт
	      |ГДЕ
	      |	КонтрактыИНастройки.НастройкаОбмена.Владелец В(&СписокПоставщиков)
	      |	И КонтрактыИАптеки.Аптека = &Аптека" ;	  
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("СписокПоставщиков",СтруктураКВыгрузке.СписокПоставщиков);
	Запрос.УстановитьПараметр("Аптека",СтруктураКВыгрузке.Склад);
	ТЗПоставщиков = Запрос.Выполнить().Выгрузить();
	
		
	
	Для каждого стр из СтруктураКВыгрузке.СписокДокументов Цикл
		СтруктураСписка = стр.Значение;
		Док = СтруктураСписка.ДокОбъект;   //ошибки
		ДокСсылка = СтруктураСписка.Док;
		Поставщик = СтруктураСписка.Поставщик;
		РеквизитыПоставщика = ТЗПоставщиков.Найти(Поставщик,"Поставщик");
		
		Если РеквизитыПоставщика.НаличиеЭДО Тогда
			Док.ПризнакЭДО = Истина;
			Док.СтатусВСистемеЭДО = Перечисления.СтатусыВСистемеЭДО.ОжидаетВыгрузки;
		Иначе
			Док.ПризнакЭДО = Ложь;
			Док.СтатусВСистемеЭДО = Перечисления.СтатусыВСистемеЭДО.НеТребуетВыгрузки;				
		КонецЕсли;
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		
		Если Док.СуммаДок < РеквизитыПоставщика.СуммаМинимальногоЗаказа Тогда 
			Если УчитыватьРанееВыгруженные Тогда
				ТХТ = "ВЫБРАТЬ
				|	Заказ.Поставщик как Поставщик,
				|	СУММА(Заказ.СуммаДок) КАК СуммаДок
				|ИЗ
				|	Документ.Заказ КАК Заказ
				|ГДЕ
				|	Заказ.ПометкаУдаления = ЛОЖЬ
				|	И Заказ.Дата > &Дата
				|	И Заказ.Склад = &Склад
				|	И НЕ Заказ.Ссылка = &Док
				|	И Заказ.Поставщик = &Поставщик
				|СГРУППИРОВАТЬ ПО
				|	Заказ.Поставщик";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("Склад",Док.Склад);
				Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
				Запрос.УстановитьПараметр("Док",ДокСсылка);
				Запрос.УстановитьПараметр("Поставщик",Док.Поставщик);
				
				ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
				Если ТЗРанееВыгруженных.Количество() = 0 Тогда
					Док.УстановитьПометкуУдаления(Истина);
					Продолжить;
				Иначе
					Если РеквизитыПоставщика.НеПринимаетДозаказ = Истина Тогда
						Док.УстановитьПометкуУдаления(Истина);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			Иначе  //Если не учитывать ранее выгруженные заказы за сегодня
				Док.УстановитьПометкуУдаления(Истина);
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		Если (РеквизитыПоставщика.АвтоматическаяВыгрузкаЗаказов = Истина) Тогда
			Если Док.ВыгрузитьПоставщику() = Истина Тогда
				Для к = 1 по 2 Цикл
					Попытка
						Док.Записать(РежимЗаписиДокумента.Проведение);
						Прервать;
					Исключение
						ОбщегоНазначения.Задержка(2);
					КонецПопытки;
				КонецЦикла;
				
				ОМ21_ЗаказыПоставщикам.ОМ21_УменьшитьКоличестваВПрайсе_pg(Док); //Васильченко
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
//===========================================================================================================

Функция ПолучитьСубъектыРФТаймСлота(ТаймСлот) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаймСлотыЗаказовСубъектыРФ.СубъектРФ КАК СубъектРФ
	               |ИЗ
	               |	Справочник.ТаймСлотыЗаказов.СубъектыРФ КАК ТаймСлотыЗаказовСубъектыРФ
	               |ГДЕ
	               |	ТаймСлотыЗаказовСубъектыРФ.Ссылка = &ТаймСлот
	               |	И ТаймСлотыЗаказовСубъектыРФ.Включен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ТаймСлот",ТаймСлот);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции



