// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт

	Возврат РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));

КонецФункции // ПолучитьКурсВалюты()

Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // ()
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено) Экспорт

	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		
		Если НЕ ЗначениеНеЗаполнено(Заголовок) Тогда
			ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
			Заголовок = "";
		КонецЕсли;
		#Если Клиент Тогда
			ВызватьИсключение (ТекстСообщения);
		#Иначе
			Отказ = Истина;
		#КонецЕсли
		
	#Иначе
		
		Если НЕ ЗначениеНеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		#Если Клиент Тогда
			Сообщить(ТекстСообщения, Статус);
		#КонецЕсли
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()

Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

 Функция ЕстьЭлементыВСправочнике(ИмяСправочника) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Спр";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

// Проверяет наличие установленного курс аи кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт

	ДатаКурса = Дата(1980, 1, 1);
	СтруктураКурса = ПолучитьКурсВалюты(Валюта, ДатаКурса);

	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда

		// установим курс и кратность = 1 на 01.01.1980, чтобы не было ошибок при создании документов

		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();

		РегистрКурсыВалют.Период    = ДатаКурса;
		РегистрКурсыВалют.Валюта    = Валюта;
		РегистрКурсыВалют.Курс      = 1;
		РегистрКурсыВалют.Кратность = 1;
		РегистрКурсыВалют.Записать();

	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьКурсаНа01_01_1980()


// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
//  Истина - значение не заполнено, ложь - иначе.
//
Функция ЗначениеНеЗаполнено(Значение) Экспорт

	Результат   = Ложь;
	ТипЗначения = ТипЗнч(Значение);

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;

	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;

	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли;

	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли;

	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли;

	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым

		//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда

		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;

		// Для остальных будем считать значение пустым, если оно равно
		// дефолтному значению своего типа

	Иначе

		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗначениеНеЗаполнено()


//============================================================================ GtG ===
Функция ОМ2_ПересчетВалют  (Сумма,ИсхВал,КонВал,ДатаКурса) Экспорт
    // Назначение:
	// Пересчитывает сумму из исходной валюты в конечную по курсу на указанную дату
	// 
    // 
	//--------------------------------------------------------------------------------
	Рез=Сумма; // Типа без пересчета
	КурсДляПересчетаИсх=ПолучитьКурсВалюты(ИсхВал, ДатаКурса).Курс;
	КурсДляПересчетаКон=ПолучитьКурсВалюты(КонВал, ДатаКурса).Курс;
	
	Если КурсДляПересчетаИсх=1 Тогда
		//----------------------------< Пересчет из рублей во что-то еще >--------------------------------GtG---
		Если КурсДляПересчетаКон<>0 Тогда
			Рез=Сумма/КурсДляПересчетаКон;
		иначе
			#Если Клиент Тогда
			Сообщить("Курс валюты  "+КонВал+" на дату "+  ДатаКурса+" равен 0 !
			| при пересчете суммы возникает ошибка деления на 0!
			| необходимо задать курс валюты "+ КонВал+" на дату "+ДатаКурса,15);
			#КонецЕсли
			Возврат Сумма;				
		КонецЕсли;
		
	КонецЕсли; 
	
	Если (КурсДляПересчетаИсх<>1) и (КурсДляПересчетаКон=1) Тогда
		//----------------------------< Пересчет из чего-то еще в рубли >--------------------------------GtG---
		Рез=КурсДляПересчетаИсх*Сумма;
	КонецЕсли; 
	
	//============================< Пересчет из НеРублей в другие НЕРубли >================================GtG===
	// Нужен Кросс-курс
	
	
	Если (КурсДляПересчетаИсх<>1) и (КурсДляПересчетаКон<>1) Тогда
		Если КурсДляПересчетаКон<>0 Тогда
			Рез= (КурсДляПересчетаИсх/КурсДляПересчетаКон)*Сумма;	// (КроссКурс)*Сумма
		иначе
			#Если Клиент Тогда
			Сообщить("Курс валюты  "+КонВал+" на дату "+  ДатаКурса+" равен 0 !
			| при пересчете суммы возникает ошибка деления на 0!
			| необходимо задать курс валюты "+ КонВал+" на дату "+ДатаКурса,15);
			#КонецЕсли

			Возврат Сумма;				
		КонецЕсли;
	КонецЕсли;
	

     Возврат Рез;
КонецФункции
//============================================================================ GtG ===



 
