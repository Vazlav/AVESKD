
 Процедура ОМ21_ЗакрытьТоварыВПути(Склад,ДатаЗакрытия) Экспорт
	
	Если Константы.НеЗакрыватьТоварВПути.Получить() = Истина Тогда
		Возврат;
	КонецЕсли;	 
	 
	 Если Склад.ИнтернетАптека = Истина Тогда
		 ТХТ = "ВЫБРАТЬ
		 |	Остатки.Поставщик КАК Поставщик,
		 |	Остатки.Товар КАК Товар,
		 |	Остатки.ДатаЗаказа КАК ДатаЗаказа,
		 |	Остатки.КоличествоОстаток КАК Количество,
		 |	РАЗНОСТЬДАТ(Остатки.ДатаЗаказа, &Дата, ДЕНЬ) КАК разностьдат
		 |ИЗ
		 |	РегистрНакопления.ЗаказПоставщику.Остатки(, Склад = &Склад) КАК Остатки
		 |ГДЕ
		 |	РАЗНОСТЬДАТ(Остатки.ДатаЗаказа, &Дата, ДЕНЬ) > Остатки.Поставщик.КоличествоДнейДоставкиИА + ВЫБОР
		 |			КОГДА Остатки.Поставщик.ПрибавлятьВыходныеКДнямДоставки = ИСТИНА
		 |				ТОГДА ВЫРАЗИТЬ((ДЕНЬНЕДЕЛИ(Остатки.ДатаЗаказа) + Остатки.Поставщик.КоличествоДнейДоставкиИА) / 7 - 0.5 КАК ЧИСЛО(10, 0))
		 |			ИНАЧЕ 0
		 |		КОНЕЦ
		 |
		 |УПОРЯДОЧИТЬ ПО
		 |	Остатки.Поставщик.Наименование,
		 |	Остатки.Товар.Наименование";	
	 Иначе
			ТХТ = "ВЫБРАТЬ
			      |	Поставщики.Ссылка КАК Поставщик,
		//ENT-1199|	ЕСТЬNULL(_ДниДоставки.ДнейДоставки, Поставщики.КоличествоДнейДоставки) КАК КоличествоДнейДоставки
				  |	(Выбор Когда ЕСТЬNULL(КонтрактыИАптеки.КоличествоДнейДоставки,0) > 0 Тогда КонтрактыИАптеки.КоличествоДнейДоставки
				  |		Иначе ЕСТЬNULL(_ДниДоставки.ДнейДоставки, Поставщики.КоличествоДнейДоставки) Конец) КАК КоличествоДнейДоставки
			      |ПОМЕСТИТЬ ВТДниДоставки
			      |ИЗ
			      |	Справочник.Поставщики КАК Поставщики
			      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Поставщики.ДниДоставки КАК _ДниДоставки
			      |		ПО (_ДниДоставки.Ссылка = Поставщики.Ссылка)
			      |			И (_ДниДоставки.СубъектРФ = &СубъектРФ)
				  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки ПО КонтрактыИАптеки.Аптека = &Склад
				  |			и КонтрактыИАптеки.Владелец.Владелец.Ссылка = Поставщики.Ссылка
				  |				 И КонтрактыИАптеки.Активность = ИСТИНА И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
			      |ГДЕ
			      |	Поставщики.КоличествоДнейДоставки > 0
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |ВЫБРАТЬ
			      |	Остатки.Поставщик КАК Поставщик,
			      |	Остатки.Товар КАК Товар,
			      |	Остатки.ДатаЗаказа КАК ДатаЗаказа,
			      |	Остатки.КоличествоОстаток КАК Количество,
			      |	РАЗНОСТЬДАТ(Остатки.ДатаЗаказа, &Дата, ДЕНЬ) КАК разностьдат
			      |ИЗ
			      |	РегистрНакопления.ЗаказПоставщику.Остатки(, Склад = &Склад) КАК Остатки
			      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниДоставки КАК ВТДниДоставки
			      |		ПО (ВТДниДоставки.Поставщик = Остатки.Поставщик)
			      |ГДЕ
			      |	РАЗНОСТЬДАТ(Остатки.ДатаЗаказа, &Дата, ДЕНЬ) > ЕСТЬNULL(ВТДниДоставки.КоличествоДнейДоставки, 0) + ВЫБОР
			      |			КОГДА Остатки.Поставщик.ПрибавлятьВыходныеКДнямДоставки = ИСТИНА
			      |				ТОГДА ВЫРАЗИТЬ((ДЕНЬНЕДЕЛИ(Остатки.ДатаЗаказа) + ЕСТЬNULL(ВТДниДоставки.КоличествоДнейДоставки, 0)) / 7 - 0.5 КАК ЧИСЛО(10, 0))
			      |			ИНАЧЕ 0
			      |		КОНЕЦ
			      |
			      |УПОРЯДОЧИТЬ ПО
			      |	Остатки.Поставщик.Наименование,
			      |	Остатки.Товар.Наименование
			      |;
			      |
			      |////////////////////////////////////////////////////////////////////////////////
			      |УНИЧТОЖИТЬ ВТДниДоставки";	
	 КонецЕсли;	 
	 
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("СубъектРФ",Склад.СубъектРФ);
	Запрос.УстановитьПараметр("Дата",ДатаЗакрытия);
	
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Док = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
	Док.Дата = ДатаЗакрытия;
	Док.Склад = Склад;
	Док.ТипЗакрытияЗаказа = Перечисления.ТипыЗакрытияЗаказа.ИстечениеСрокаПоставки;
	Док.РегистрЗакрытияЗаказа = Перечисления.РегистрЗакрытияЗаказа.ЗаказПоставщику;

	Док.Товар.Загрузить(ТЗ);
	Записан = Ложь;
	Для н=0 по 3 Цикл 
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Записан = Истина;
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(3);
		КонецПопытки;
	КонецЦикла;
	
	
	ТХТ = "ВЫБРАТЬ
	      |	ИндивидуальныеЗаказы.Поставщик КАК Поставщик,
	      |	ИндивидуальныеЗаказы.Товар КАК Товар,
	      |	ИндивидуальныеЗаказы.ДатаЗаказа КАК ДатаЗаказа,
	      |	ИндивидуальныеЗаказы.КоличествоОстаток КАК Количество,
	      |	РАЗНОСТЬДАТ(ИндивидуальныеЗаказы.ДатаЗаказа, &Дата, ДЕНЬ) КАК разностьдат,
	      |	ИндивидуальныеЗаказы.ЦенаРозн
	      |ИЗ
	      |	РегистрНакопления.ИндивидуальныеЗаказы.Остатки(&Дата, Склад = &Склад) КАК ИндивидуальныеЗаказы
		  |		  ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки ПО КонтрактыИАптеки.Аптека = &Склад
		  |				 и КонтрактыИАптеки.Владелец.Владелец.Ссылка = ИндивидуальныеЗаказы.Поставщик
		  |				 И КонтрактыИАптеки.Активность = ИСТИНА И КонтрактыИАптеки.Владелец.Активность = ИСТИНА
	      |ГДЕ
//ENT-1199|	РАЗНОСТЬДАТ(ИндивидуальныеЗаказы.ДатаЗаказа, &Дата, ДЕНЬ) > ИндивидуальныеЗаказы.Поставщик.КоличествоДнейДоставки
		  | РАЗНОСТЬДАТ(ИндивидуальныеЗаказы.ДатаЗаказа, &Дата, ДЕНЬ) >
		  | (Выбор Когда ЕСТЬNULL(КонтрактыИАптеки.КоличествоДнейДоставки,0) > 0 Тогда КонтрактыИАптеки.КоличествоДнейДоставки
		  |	Иначе ИндивидуальныеЗаказы.Поставщик.КоличествоДнейДоставки Конец)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИндивидуальныеЗаказы.Поставщик.Наименование,
	      |	ИндивидуальныеЗаказы.Товар.Наименование";	
		  
		  
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Дата",ДатаЗакрытия);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Док = Документы.ЗакрытиеЗаказов.СоздатьДокумент();
	Док.Дата = ДатаЗакрытия;
	Док.Склад = Склад;
	Док.ТипЗакрытияЗаказа = Перечисления.ТипыЗакрытияЗаказа.ИстечениеСрокаПоставки;
	Док.РегистрЗакрытияЗаказа = Перечисления.РегистрЗакрытияЗаказа.ИндивидуальныеЗаказы;

	Док.Товар.Загрузить(ТЗ);
	Записан = Ложь;
	Для к=1 по 3 Цикл
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Записан = Истина;
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;	
	
	
КонецПроцедуры


Функция ОМ21_ПолучитьОстаткиТоварыВПути(Склад,ДатаОстатков) Экспорт
	
	ТХТ = "ВЫБРАТЬ
	      |	ЗаказПоставщикуОстатки.Поставщик как Поставщик,
	      |	ЗаказПоставщикуОстатки.Товар как Товар,
		  |	ЗаказПоставщикуОстатки.Товар.Код как КодТовара,
	      |	ЗаказПоставщикуОстатки.ДатаЗаказа как ДатаЗаказа,
	      |	ЗаказПоставщикуОстатки.КоличествоОстаток как Количество
	      |ИЗ
	      |	РегистрНакопления.ЗаказПоставщику.Остатки(&Дата, Склад = &Склад) КАК ЗаказПоставщикуОстатки
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЗаказПоставщикуОстатки.Поставщик.Наименование,
		  | ЗаказПоставщикуОстатки.Товар.Наименование";	
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Дата",ДатаОстатков);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Индексы.Добавить("КодТовара");
	
	Возврат ТЗ;
		  
	
КонецФункции

Функция ОМ21_ПолучитьОстаткиТоварыВПутиПоСпискуТоваров(Склад,ДатаОстатков,СписокТоваровТекстом,Поставщик) Экспорт
	
	ТХТ = "ВЫБРАТЬ
	      |	ЗаказПоставщикуОстатки.Поставщик КАК Поставщик,
	      |	ЗаказПоставщикуОстатки.Товар КАК Товар,
	      |	ЗаказПоставщикуОстатки.Товар.Код КАК КодТовара,
	      |	ЗаказПоставщикуОстатки.ДатаЗаказа КАК ДатаЗаказа,
	      |	ЗаказПоставщикуОстатки.КоличествоОстаток КАК Количество
	      |ИЗ
	      |	РегистрНакопления.ЗаказПоставщику.Остатки(
	      |			&Дата,
	      |			Склад = &Склад
	      |				И Товар В (&СписокТоваров)
	      |				И Поставщик = &Поставщик) КАК ЗаказПоставщикуОстатки
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЗаказПоставщикуОстатки.Поставщик.Наименование,
	      |	ЗаказПоставщикуОстатки.Товар.Наименование";	
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Дата",ДатаОстатков);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	СписокТоваров= Новый СписокЗначений;
	СписокТоваров.ЗагрузитьЗначения(ЗначениеИзСтрокиВнутр(СписокТоваровТекстом));
	Запрос.УстановитьПараметр("СписокТОВАРОВ",СписокТоваров);	
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
		  
	
КонецФункции

//===================================================================================================================================
//Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков)
//
//ОПИСАНИЕ :
// 	По документу "заявка на товар", учитывая СписокПоставщиков, распределяется товар. Полученные данные проверяются на минимальную сумму
//	заказа и, если необходимо, то дозаказывается количество. Если дозаказать нельзя, тогда перераспределяется товар на других поставщиков.
//ПАРАМЕТРЫ : 
//  1. Док - Документ.ЗаявкаНаТовар
//  2. ТЗЗаказа - в эту переменную выгружается распределенный заказ
//  3. ТЗОтказов - в эту переменную выгружаются отказы 
//  4. СписокПоставщиков - Если надо распределять только по определенным поставщикам, то заполняется список
//	5. ОтфильтроватьПоСпискуПоставщиков - ИСТИНА/ЛОЖЬ , если надо распределить только по определенным поставщикам,
//		то передается ИСТИНА 
//===================================================================================================================================
Процедура ОМ21_РаспределитьДокументПоПоставщикам_старая_до_16032011(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков) Экспорт
	
	
	
	ТЗТоваров = Док.Товар.Выгрузить();
	
		  
	ТХТ = "ВЫБРАТЬ
	      |	ТЗ.Товар,
	      |	ТЗ.Количество
	      |ПОМЕСТИТЬ ПотребностьАптеки
	      |ИЗ
	      |	&ТЗТоваров КАК ТЗ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ОбслуживаемыеАптеки.Владелец КАК Поставщики
	      |ПОМЕСТИТЬ ТЗОбслуживаемыхПоставщиков
	      |ИЗ
	      |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	      |ГДЕ
	      |	ОбслуживаемыеАптеки.Аптека = &Аптека
	      |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |	И ВЫБОР
	      |			КОГДА ОбслуживаемыеАптеки.Владелец.Код В (&СписокПоставщиков)
	      |				ТОГДА ЛОЖЬ
	      |			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
	      |		КОНЕЦ = ЛОЖЬ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка.Поставщик,
	      |	Выборка.Код,
	      |	Выборка.Товар КАК ТоварПоставщика,
	      |	Выборка.Количество КАК Количество,
	      |	Выборка.Цена,
	      |	Выборка.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	Выборка.ТоварФирмы КАК Товар,
	      |	Выборка.КоличествоАптеки
	      |ПОМЕСТИТЬ СводныйПрайсЛист
	      |ИЗ
	      |	(ВЫБРАТЬ
	      |		Прайсы.Поставщик КАК Поставщик,
	      |		ВЫБОР
	      |			КОГДА Прайсы.Поставщик.Код = 287
	      |				ТОГДА Прайсы.Код + ""-"" + Прайсы.ПартияПоставщика
	      |			ИНАЧЕ Прайсы.Код
	      |		КОНЕЦ КАК Код,
	      |		Прайсы.Товар КАК Товар,
	      |		Прайсы.Цена КАК Цена,
	      |		ВЫБОР
	      |			КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |					И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ЛОЖЬ
	      |				ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |			ИНАЧЕ Прайсы.ЦенаПриведенная
	      |		КОНЕЦ КАК ЦенаПриведенная,
	      |		СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
	      |		Прайсы.Количество КАК Количество,
	      |		ПотребностьАптеки.Количество КАК КоличествоАптеки
	      |	ИЗ
	      |		РегистрСведений.Прайсы КАК Прайсы
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |			ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	      |				И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотребностьАптеки КАК ПотребностьАптеки
	      |			ПО (ПотребностьАптеки.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |	ГДЕ
	      |		Прайсы.Количество > 0
	      |		И Прайсы.Цена > 0
	      |		И Прайсы.Поставщик В
	      |				(ВЫБРАТЬ
	      |					ТЗОбслуживаемыхПоставщиков.Поставщики
	      |				ИЗ
	      |					ТЗОбслуживаемыхПоставщиков)) КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СводныйПрайсЛист.Поставщик,
	      |	СводныйПрайсЛист.Код,
	      |	СводныйПрайсЛист.ТоварПоставщика,
	      |	СводныйПрайсЛист.Количество КАК Количество,
	      |	СводныйПрайсЛист.Цена,
	      |	СводныйПрайсЛист.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	СводныйПрайсЛист.Товар.Код КАК КодТовара,
	      |	СводныйПрайсЛист.Товар КАК Товар,
	      |	СводныйПрайсЛист.КоличествоАптеки
	      |ПОМЕСТИТЬ ИтоговыйЗаказ
	      |ИЗ
	      |	СводныйПрайсЛист КАК СводныйПрайсЛист
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗОбслуживаемыхПоставщиков.Поставщики
	      |					ИЗ
	      |						ТЗОбслуживаемыхПоставщиков)) КАК ЭксПостУник
	      |		ПО СводныйПрайсЛист.Товар = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗОбслуживаемыхПоставщиков.Поставщики
	      |					ИЗ
	      |						ТЗОбслуживаемыхПоставщиков)) КАК ЭксПост
	      |		ПО СводныйПрайсЛист.Товар = ЭксПост.Товар
	      |			И СводныйПрайсЛист.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СводныйПрайсЛист.Товар = Исключения.Товар
	      |			И СводныйПрайсЛист.Поставщик = Исключения.Поставщик
	      |ГДЕ
	      |	ЕСТЬNULL(ЭксПостУник.flag, 0) = ЕСТЬNULL(ЭксПост.flag, 0)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	0 КАК Цена,
	      |	0 КАК Сумма,
	      |	"""" КАК КодТовараПоставщика,
	      |	"""" КАК НаименованиеТОвараПоставщика,
	      |	"""" КАК НомерЗаявкиАптеки,
	      |	""нет связки/нет в прайсе"" КАК ПричинаОтказа
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |ГДЕ
	      |	(НЕ ПотребностьАптеки.Товар В
	      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |					ИтоговыйЗаказ.Товар
	      |				ИЗ
	      |					ИтоговыйЗаказ))
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИтоговыйЗаказ.Поставщик,
	      |	ИтоговыйЗаказ.Код,
	      |	ИтоговыйЗаказ.ТоварПоставщика,
	      |	ИтоговыйЗаказ.Количество КАК Количество,
	      |	ИтоговыйЗаказ.Цена,
	      |	ИтоговыйЗаказ.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	ИтоговыйЗаказ.КодТовара,
	      |	ИтоговыйЗаказ.Товар,
	      |	ИтоговыйЗаказ.КоличествоАптеки
	      |ИЗ
	      |	ИтоговыйЗаказ КАК ИтоговыйЗаказ
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИтоговыйЗаказ.Товар.Наименование,
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ПотребностьАптеки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗОбслуживаемыхПоставщиков
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ИтоговыйЗаказ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ СводныйПрайсЛист";		  
		  
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗТоваров",ТЗТоваров);
	Запрос.УстановитьПараметр("ПустаяСТрока","");
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",Константы.УчитыватьЭксклюзивыПриЗаказе.Получить());
	Запрос.УстановитьПараметр("УчитыватьИсключения",Константы.УчитыватьИсключенияПриЗаказе.Получить());
	Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
	Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
	
	//Сообщить("Время выполнения запроса начало:" + ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТЗОтказов = МассивРезультатов[4].Выгрузить();
	ТЗСводныйПрайс = МассивРезультатов[5].Выгрузить();
	//Сообщить("Время выполнения запроса конец:" + ТекущаяДата());
	
	ТЗЗаказа = Новый ТаблицаЗначений;
	ТЗЗаказа.Колонки.Добавить("КодТовара");
	ТЗЗаказа.Колонки.Добавить("Товар");
	ТЗЗаказа.Колонки.Добавить("Количество");
	ТЗЗаказа.Колонки.Добавить("Поставщик");
	ТЗЗаказа.Колонки.Добавить("КодТовараПоставщика");
	ТЗЗаказа.Колонки.Добавить("НаименованиеТовараПоставщика");
	ТЗЗаказа.Колонки.Добавить("Цена");
	ТЗЗаказа.Колонки.Добавить("Сумма");
	
	Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.Заказ") Тогда
		
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И НАЧАЛОПЕРИОДА(Заказ.Дата, ДЕНЬ) = &Дата
		|	И Заказ.Склад = &Склад
		|	И Заказ.Ссылка <> &Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";
		
	Иначе
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И НАЧАЛОПЕРИОДА(Заказ.Дата, ДЕНЬ) = &Дата
		|	И Заказ.Склад = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";		  
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Док.Склад);
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Док",Док.Ссылка);

	ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
	
	

	//====== Вариант первый ======//
	СтарыйТовар = "";
	Потребность = 0;
	//Сообщить("Первый вариант начало : " + ТекущаяДата());
	ДЛя каждого стр из ТЗСводныйПрайс Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если СтарыйТовар <> стр.Товар Тогда
			Потребность = стр.КоличествоАптеки;
			СтарыйТовар = стр.Товар;
		КонецЕсли;
		// Пропускаем , если уже все заказали и всего хватило
		Если Потребность <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.Количество >= Потребность Тогда
			Заказать = Потребность;
			Потребность = 0;
		Иначе
			Заказать = стр.Количество;
			Потребность = Потребность - стр.Количество;
		КонецЕсли;
		НоваяСтрока = ТЗЗаказа.Добавить();				
		НоваяСтрока.КодТовара = стр.КодТовара;
		НоваяСтрока.Товар = стр.Товар;
		НоваяСтрока.Количество = Заказать;
		НоваяСтрока.Цена = стр.Цена;
		НоваяСтрока.Сумма = стр.Цена*Заказать;
		НоваяСтрока.Поставщик = стр.поставщик;
		НоваяСтрока.КодТовараПоставщика = стр.Код;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;			
	КонецЦикла;
	//Сообщить("Первый вариант конец : " + ТекущаяДата());
	
	ТЗЗаказаСводная = ТЗЗаказа.Скопировать();
	ТЗЗаказаСводная.Свернуть("Поставщик","Сумма");
	ТЗЗаказаСводная.Колонки.Добавить("НадоДобирать");
	ТЗЗаказаСводная.Колонки.Добавить("НадоПерераспределять");
	
	//Проверим на минимальную сумму заказа по поставщикам
	СписокПоставщиков = Новый СписокЗначений;
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	
	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.Сумма >= стр.Поставщик.СуммаМинимальногоЗаказа Тогда
			СписокПоставщиков.Добавить(стр.Поставщик);
			Продолжить;
		Иначе
			Если ТЗРанееВыгруженных.Количество() > 0 Тогда			
				НайденнаяСтрока = ТЗРанееВыгруженных.Найти(стр.Поставщик,"Поставщик");
				Если НайденнаяСтрока <> Неопределено Тогда
					СписокПоставщиков.Добавить(стр.Поставщик);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если стр.Сумма >= стр.Поставщик.СуммаПороговаяЗаказа Тогда
				СписокПоставщиков.Добавить(стр.Поставщик);
				стр.НадоДобирать = Истина;
			Иначе
				стр.НадоПерераспределять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТХТ = "ВЫБРАТЬ
	      |	Прайсы.Поставщик,
	      |	Прайсы.Код,
	      |	Прайсы.Товар КАК ТоварПоставщика,
	      |	Прайсы.Цена,
	      |	ВЫБОР
	      |		КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |				И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ЛОЖЬ
	      |			ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |		ИНАЧЕ Прайсы.ЦенаПриведенная
	      |	КОНЕЦ КАК ЦенаПриведенная,
	      |	Прайсы.Количество КАК Количество,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК КодТовара,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы КАК Товар
	      |ИЗ
	      |	РегистрСведений.Прайсы КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |		ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	      |			И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |			И (Прайсы.Поставщик В (&СписокПоставщиков))
	      |			И (СвязкиТовараСПоставщиком.ТоварФирмы = &Товар)
	      |ГДЕ
	      |	Прайсы.Поставщик В(&СписокПоставщиков)
	      |	И СвязкиТовараСПоставщиком.Поставщик В(&СписокПоставщиков)
	      |	И СвязкиТовараСПоставщиком.ТоварФирмы = &Товар
	      |	И Прайсы.Количество > 0
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ";
	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.НадоДобирать = Истина Тогда  //Дозакажем, если надо
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			СуммаПоПоставщику = стр.Сумма;
			Для каждого Элемент из НайденныеСтроки Цикл
				СтараяСумма = Элемент.Сумма;
				Если СуммаПоПоставщику >= стр.Поставщик.СуммаМинимальногоЗаказа Тогда
					Прервать;
				КонецЕсли;
				Элемент.Количество = Элемент.Количество + 1;
				Элемент.Сумма = Элемент.Количество*Элемент.Цена;
				Дельта = Элемент.Сумма - СтараяСумма;
				СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
			КонецЦикла;
		ИначеЕсли стр.НадоПерераспределять = Истина Тогда  //Перераспределим на других поставщиков
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Для каждого Элемент из НайденныеСтроки Цикл
			
				Если Элемент.Товар.Поставщик <> Справочники.Поставщики.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
				Запрос.УстановитьПараметр("Товар",Элемент.Товар);
				ТЗ = Запрос.Выполнить().Выгрузить();
				Потребность = Элемент.Количество;
				номер = 0;
				Для каждого стр из ТЗ цикл
					номер = номер + 1;
					Если Потребность <= 0 Тогда
						Прервать;
					КонецЕсли;
					Заказать = Мин(стр.Количество,Потребность);
					Потребность = Потребность - Заказать;
					
					Цена = стр.Цена;
					//-----------------Проверим цену на допустимое отклонение---------------------
					Процент = Окр(((Цена/Элемент.Цена)-1)*100,2);
					ЕстьПревышение = Ложь;
					Если Цена < 50 и Процент >= 10 Тогда
						ЕстьПревышение = Истина;
					ИначеЕсли ((Цена >= 50) и (Цена < 100)) и (Процент >= 5) Тогда
						ЕстьПревышение = Истина;
					ИначеЕсли ((Цена >= 100) и (Цена < 300)) и (Процент >= 3) Тогда
						ЕстьПревышение = Истина;
					ИначеЕсли (Цена >= 300) и (Процент >= 2) Тогда
						ЕстьПревышение = Истина;
					КонецЕсли;
					
					Если ЕстьПревышение Тогда
						Прервать;
					КонецЕсли;						
					
					
					НоваяСтрока = ТЗЗаказа.Добавить();				
					НоваяСтрока.КодТовара = стр.КодТовара;
					НоваяСтрока.Товар = стр.Товар;
					НоваяСтрока.Количество = Заказать;
					НоваяСтрока.Цена = Цена;
					НоваяСтрока.Сумма = Цена*Заказать;
					НоваяСтрока.Поставщик = стр.поставщик;
					НоваяСтрока.КодТовараПоставщика = стр.Код;
					НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;					
					Если Номер = 1 Тогда
						СписокУдаляемыхСтрок.Добавить(Элемент);
					КонецЕсли;
					
				КонецЦикла;
				
			
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
	//Удалим перераспределенные строки
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	
		  
КонецПроцедуры

Процедура ОбработатьСтрокуЗаказаСУчетомКратности(стр)
		Если стр.Кратность > 1 Тогда
			Если стр.Цена < 50 Тогда
				Отклонение = 0.5;
			ИначеЕсли стр.Цена >=50 и стр.Цена < 300 Тогда
				Отклонение = 0.7;
			ИначеЕсли стр.Цена >=300 Тогда
				Отклонение = 0.8;				
			КонецЕсли;
			
			Если стр.Количество/стр.Кратность > Отклонение Тогда
				КоличествоИтоговое = Окр(стр.Количество/стр.Кратность,0)*стр.Кратность;
				Если КоличествоИтоговое = стр.Количество Тогда
					Возврат;
				КонецЕсли;
				
				Если КоличествоИтоговое <= стр.ОстатокПоставщика Тогда
					стр.Количество = КоличествоИтоговое;
				Иначе
					КоличествоИтоговое = КоличествоИтоговое - стр.Кратность;
					стр.Количество = ?(КоличествоИтоговое <=0,0,КоличествоИтоговое);
				КонецЕсли;
				стр.Сумма = стр.Цена*стр.Количество;
				стр.БылаКорректировкаКратности = Истина;
			Иначе
				стр.Количество = 0;
				стр.Сумма = стр.Цена*стр.Количество;
			КонецЕсли;
			
			Если стр.Количество = 0 Тогда
				стр.ПерераспределитьПоКратности = Истина;
			КонецЕсли;
			
		КонецЕсли;
 КонецПроцедуры


Функция ПроверитьНаПревышениеЦены(СтараяЦена,НоваяЦена)
	
	Процент = Окр(((НоваяЦена/СтараяЦена)-1)*100,2);
	ЕстьПревышение = Ложь;
	Если НоваяЦена < 50 и Процент >= 30 Тогда							ЕстьПревышение = Истина;
	ИначеЕсли ((НоваяЦена >= 50) и (НоваяЦена < 100)) и (Процент >= 12) Тогда	ЕстьПревышение = Истина;
	ИначеЕсли ((НоваяЦена >= 100) и (НоваяЦена < 300)) и (Процент >= 6) Тогда ЕстьПревышение = Истина;
	ИначеЕсли ((НоваяЦена >= 300) и (НоваяЦена < 500)) и (Процент >= 5) Тогда ЕстьПревышение = Истина;
	ИначеЕсли ((НоваяЦена >= 500) и (НоваяЦена < 1000)) и (Процент >= 3) Тогда ЕстьПревышение = Истина;
	ИначеЕсли (НоваяЦена >= 1000) и (Процент >= 2) Тогда					ЕстьПревышение = Истина;
	КонецЕсли;
	
	Возврат ЕстьПревышение;
	
КонецФункции 
 
//===================================================================================================================================
//Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков)
//
//ОПИСАНИЕ :
// 	По документу "заявка на товар", учитывая СписокПоставщиков, распределяется товар. Полученные данные проверяются на минимальную сумму
//	заказа и, если необходимо, то дозаказывается количество. Если дозаказать нельзя, тогда перераспределяется товар на других поставщиков.
//ПАРАМЕТРЫ : 
//  1. Док - Документ.ЗаявкаНаТовар
//  2. ТЗЗаказа - в эту переменную выгружается распределенный заказ
//  3. ТЗОтказов - в эту переменную выгружаются отказы 
//  4. СписокПоставщиков - Если надо распределять только по определенным поставщикам, то заполняется список
//	5. ОтфильтроватьПоСпискуПоставщиков - ИСТИНА/ЛОЖЬ , если надо распределить только по определенным поставщикам,
//		то передается ИСТИНА 
//===================================================================================================================================
Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков) Экспорт
	
	
	
	ТЗТоваров = Док.Товар.Выгрузить();
	
		  
	ТХТ = "ВЫБРАТЬ
	      |	ТЗ.Товар,
	      |	ТЗ.Количество
	      |ПОМЕСТИТЬ ПотребностьАптеки
	      |ИЗ
	      |	&ТЗТоваров КАК ТЗ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПерезаказОтказов.Поставщик КАК Поставщик,
	      |	ПерезаказОтказов.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |ГДЕ
	      |	НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |	И ПерезаказОтказов.Склад = &Аптека
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ОбслуживаемыеАптеки.Владелец КАК Поставщики
	      |ПОМЕСТИТЬ ТЗОбслуживаемыхПоставщиков
	      |ИЗ
	      |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	      |ГДЕ
	      |	ОбслуживаемыеАптеки.Аптека = &Аптека
	      |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |	И ВЫБОР
	      |			КОГДА ОбслуживаемыеАптеки.Владелец.Код В (&СписокПоставщиков)
	      |				ТОГДА ЛОЖЬ
	      |			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
	      |		КОНЕЦ = ЛОЖЬ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Выборка.Поставщик,
	      |	Выборка.Код,
	      |	Выборка.Товар КАК ТоварПоставщика,
	      |	Выборка.Количество КАК Количество,
	      |	Выборка.Цена,
	      |	Выборка.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	Выборка.ТоварФирмы КАК Товар,
	      |	Выборка.КоличествоАптеки,
	      |	Выборка.МинЗаказ,
	      |	Выборка.Кратность,
	      |	Выборка.СрокГодности
	      |ПОМЕСТИТЬ СводныйПрайсЛист
	      |ИЗ
	      |	(ВЫБРАТЬ
	      |		Прайсы.Поставщик КАК Поставщик,
	      |		Прайсы.Код КАК Код,
	      |		Прайсы.Товар КАК Товар,
	      |		Прайсы.Цена КАК Цена,
	      |		ВЫБОР
	      |			КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |					И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ЛОЖЬ
	      |				ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |			ИНАЧЕ ВЫБОР
	      |					КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |							И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ИСТИНА
	      |						ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |					ИНАЧЕ Прайсы.ЦенаПриведенная
	      |				КОНЕЦ
	      |		КОНЕЦ КАК ЦенаПриведенная,
	      |		СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
	      |		Прайсы.Количество КАК Количество,
	      |		ПотребностьАптеки.Количество КАК КоличествоАптеки,
	      |		СвязкиТовараСПоставщиком.ТоварФирмы.МинимальныйЗаказ КАК МинЗаказ,
	      |		Прайсы.Кратность КАК Кратность,
	      |		Прайсы.СрокГодности КАК СрокГодности
	      |	ИЗ
	      |		РегистрСведений.Прайсы КАК Прайсы
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗОбслуживаемыхПоставщиков КАК ТЗОбслуживаемыхПоставщиков
	      |			ПО Прайсы.Поставщик = ТЗОбслуживаемыхПоставщиков.Поставщики
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |			ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	      |				И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |				И (СвязкиТовараСПоставщиком.Блокировка = ЛОЖЬ)
	      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотребностьАптеки КАК ПотребностьАптеки
	      |			ПО (ПотребностьАптеки.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |			ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |			ПО (РегПерезаказов.Поставщик = Прайсы.Поставщик)
	      |				И (РегПерезаказов.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |	ГДЕ
	      |		Прайсы.Количество > 0
	      |		И Прайсы.Цена > 0
	      |		И (Прайсы.СрокГодности > &СрокГодности
	      |				ИЛИ Прайсы.СрокГодности = &ПустойСрок)
	      |		И РегПерезаказов.Поставщик ЕСТЬ NULL ) КАК Выборка
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СводныйПрайсЛист.Поставщик,
	      |	СводныйПрайсЛист.Код,
	      |	СводныйПрайсЛист.ТоварПоставщика,
	      |	СводныйПрайсЛист.Количество КАК Количество,
	      |	СводныйПрайсЛист.Цена,
	      |	СводныйПрайсЛист.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	СводныйПрайсЛист.Товар.Код КАК КодТовара,
	      |	СводныйПрайсЛист.Товар КАК Товар,
	      |	СводныйПрайсЛист.КоличествоАптеки,
	      |	СводныйПрайсЛист.МинЗаказ,
	      |	СводныйПрайсЛист.Кратность,
	      |	СводныйПрайсЛист.СрокГодности,
	      |	ЕСТЬNULL(ЭксПост.flag, 0) КАК flag
	      |ПОМЕСТИТЬ ИтоговыйЗаказ
	      |ИЗ
	      |	СводныйПрайсЛист КАК СводныйПрайсЛист
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗОбслуживаемыхПоставщиков.Поставщики
	      |					ИЗ
	      |						ТЗОбслуживаемыхПоставщиков)) КАК ЭксПостУник
	      |		ПО СводныйПрайсЛист.Товар = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗОбслуживаемыхПоставщиков.Поставщики
	      |					ИЗ
	      |						ТЗОбслуживаемыхПоставщиков)) КАК ЭксПост
	      |		ПО СводныйПрайсЛист.Товар = ЭксПост.Товар
	      |			И СводныйПрайсЛист.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СводныйПрайсЛист.Товар = Исключения.Товар
	      |			И СводныйПрайсЛист.Поставщик = Исключения.Поставщик
	      |ГДЕ
	      |	(ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
		  | &Дата как Дата,
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	0 КАК Цена,
	      |	0 КАК Сумма,
		  |	&Аптека КАК Склад,
		  | &Документ как Документ,
	      |	"""" КАК КодТовараПоставщика,
	      |	"""" КАК НаименованиеТОвараПоставщика,
	      |	"""" КАК НомерЗаявкиАптеки,
	      |	ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.ОтсутствиеОстаткаСвязки) КАК ПричинаОтказа,
		  | """" КАК Комментарий,
		  |	"""" КАК Поставщик
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |ГДЕ
	      |	НЕ ПотребностьАптеки.Товар В
	      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |					ИтоговыйЗаказ.Товар
	      |				ИЗ
	      |					ИтоговыйЗаказ)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИтоговыйЗаказ.Поставщик,
	      |	ИтоговыйЗаказ.Код КАК Код,
	      |	ИтоговыйЗаказ.ТоварПоставщика КАК ТоварПоставщика,
	      |	ИтоговыйЗаказ.Количество КАК Количество,
	      |	ИтоговыйЗаказ.Цена,
	      |	ИтоговыйЗаказ.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	ИтоговыйЗаказ.КодТовара,
	      |	ИтоговыйЗаказ.Товар,
	      |	ИтоговыйЗаказ.КоличествоАптеки,
	      |	ИтоговыйЗаказ.МинЗаказ КАК МинЗаказ,
	      |	ИтоговыйЗаказ.Кратность КАК Кратность,
	      |	ИтоговыйЗаказ.СрокГодности КАК СрокГодности,
	      |	ИтоговыйЗаказ.flag КАК flag,
	      |	Матрица.ГруппаАПИтог КАК ГруппаАП
	      |ИЗ
	      |	ИтоговыйЗаказ КАК ИтоговыйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
	      |		ПО (Матрица.Аптека = &Аптека)
	      |			И (Матрица.Товар = ИтоговыйЗаказ.Товар)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИтоговыйЗаказ.Товар.Наименование,
	      |	flag УБЫВ,
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ПотребностьАптеки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗОбслуживаемыхПоставщиков
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ИтоговыйЗаказ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ СводныйПрайсЛист";		  

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ТЗТоваров",ТЗТоваров);
	Запрос.УстановитьПараметр("ПустаяСТрока","");
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("Документ",Док.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",Константы.УчитыватьЭксклюзивыПриЗаказе.Получить());
	Запрос.УстановитьПараметр("УчитыватьИсключения",Константы.УчитыватьИсключенияПриЗаказе.Получить());
	Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
	Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	СрокГодности = НачалоДня(ТекущаяДата()) + 24*60*60*120;
	ПустойСрок = ОМ3_ПустаяДата();
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	
	//Сообщить("Время выполнения запроса начало:" + ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТЗОтказов = МассивРезультатов[5].Выгрузить();
	ТЗСводныйПрайс = МассивРезультатов[6].Выгрузить();
	//Сообщить("Время выполнения запроса конец:" + ТекущаяДата());
	
	ТЗЗаказа = Новый ТаблицаЗначений;
	ТЗЗаказа.Колонки.Добавить("КодТовара");
	ТЗЗаказа.Колонки.Добавить("Товар");
	ТЗЗаказа.Колонки.Добавить("Количество");
	ТЗЗаказа.Колонки.Добавить("Поставщик");
	ТЗЗаказа.Колонки.Добавить("КодТовараПоставщика");
	ТЗЗаказа.Колонки.Добавить("НаименованиеТовараПоставщика");
	ТЗЗаказа.Колонки.Добавить("Цена");
	ТЗЗаказа.Колонки.Добавить("Сумма");
	ТЗЗаказа.Колонки.Добавить("СрокГодности");
	ТЗЗаказа.Колонки.Добавить("Кратность");
	ТЗЗаказа.Колонки.Добавить("МинЗаказ");
	ТЗЗаказа.Колонки.Добавить("ГруппаАП");
	ТЗЗаказа.Колонки.Добавить("БылаКорректировкаКратности");
	ТЗЗаказа.Колонки.Добавить("ОстатокПоставщика");
	ТЗЗаказа.Колонки.Добавить("ПерераспределитьПоКратности");
	ТЗЗаказа.Колонки.Добавить("БылоПерераспределениеПоКратности");
	ТЗЗаказа.Колонки.Добавить("ПотребностьАптекиКоличество");


	
	Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.Заказ") Тогда
		
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|	И НЕ Заказ.Ссылка = &Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";
		
	Иначе
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";		  
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Док.Склад);
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Док",Док.Ссылка);

	ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
	
	

	//====== Вариант первый ======//
	СтарыйТовар = "";
	Потребность = 0;
	ТЗПоставщиковИсключенныхПоКратностям = Новый ТаблицаЗначений;
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Поставщик");
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Товар");
	СписокПоставщиков = Новый СписокЗначений;
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	ПерваяЦена = 0;	
	//Сообщить("Первый вариант начало : " + ТекущаяДата());
	ДЛя каждого стр из ТЗСводныйПрайс Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если СтарыйТовар <> стр.Товар Тогда
			Потребность = стр.КоличествоАптеки;
			СтарыйТовар = стр.Товар;
		КонецЕсли;
		// Пропускаем , если уже все заказали и всего хватило
		Если Потребность <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.Количество >= Потребность Тогда
			Заказать = Потребность;
			Потребность = 0;
		Иначе
			Заказать = стр.Количество;
			Потребность = Потребность - стр.Количество;
		КонецЕсли;
		НоваяСтрока				= ТЗЗаказа.Добавить();				
		НоваяСтрока.КодТовара	= стр.КодТовара;
		НоваяСтрока.Товар		= стр.Товар;
		НоваяСтрока.Количество	= Заказать;
		НоваяСтрока.ПотребностьАптекиКоличество	= Заказать;
		НоваяСтрока.Цена		= стр.Цена;
		НоваяСтрока.Сумма		= стр.Цена*Заказать;
		НоваяСтрока.Поставщик	= стр.поставщик;
		НоваяСтрока.КодТовараПоставщика = стр.Код;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
		НоваяСтрока.Кратность	= стр.Кратность;
		НоваяСтрока.СрокГодности= стр.СрокГодности;
		НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
		НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
		НоваяСтрока.ОстатокПоставщика = стр.Количество;
		НоваяСтрока.БылаКорректировкаКратности = Ложь;
		НоваяСтрока.ПерераспределитьПоКратности = Ложь;
		НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
		Если стр.Кратность > 1 Тогда  //Проверяем на кратность 
			ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
			//Если по кратности не проходим, запоминаем связку товар-поставщик для исключения при дальнейшем перераспределении
			//и восстанавливаем потребность аптеки в исходное количество
			Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда 
				Потребность = стр.КоличествоАптеки;	
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
				стрИсключения = ТЗПоставщиковИсключенныхПоКратностям.Добавить();
				стрИсключения.Поставщик = стр.Поставщик;
				стрИсключения.Товар = стр.Товар;
			КонецЕсли;
		КонецЕсли;
		//Проверим на превышение цены от первой (минимальной) цены по текущему товару
		Если ПерваяЦена > 0 и НоваяСтрока.ПерераспределитьПоКратности = Ложь Тогда
			Если ПроверитьНаПревышениеЦены(ПерваяЦена,стр.Цена) = Истина Тогда
				//НоваяСтрокаОтказа = ТЗОтказов.Добавить();
				//НоваяСтрокаОтказа.Товар = НоваяСтрока.Товар;
				//НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;
				//НоваяСтрокаОтказа.ПричинаОтказа = "отказ по превышению второй цены";
				
				НоваяСтрокаОтказа = ТЗОтказов.Добавить();
				НоваяСтрокаОтказа.Дата = Док.Дата;
				НоваяСтрокаОтказа.Документ = Док.Ссылка;
				НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
				НоваяСтрокаОтказа.Склад = Док.Склад;
				НоваяСтрокаОтказа.Товар = стр.Товар;
				НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;;
				НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
				НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
				НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
				
				
				
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим строки из таблицы заказа, которые не прошли по кратностям и превышениям цены
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	СписокУдаляемыхСтрок.Очистить();

	
	
	//Конец обработки таблицы заказа с учетом кратности позиций у поставщика
	
	//Сообщить("Первый вариант конец : " + ТекущаяДата());
	ТЗЗаказа.Сортировать("Поставщик,Товар,ГруппаАП,Количество убыв");	
	ТЗЗаказаСводная = ТЗЗаказа.Скопировать();
	ТЗЗаказаСводная.Свернуть("Поставщик","Сумма");
	ТЗЗаказаСводная.Колонки.Добавить("НадоДобирать");
	ТЗЗаказаСводная.Колонки.Добавить("НадоПерераспределять");
	
	
	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.Сумма >= стр.Поставщик.СуммаМинимальногоЗаказа Тогда
			СписокПоставщиков.Добавить(стр.Поставщик);
			Продолжить;
		Иначе
			Если ТЗРанееВыгруженных.Количество() > 0 Тогда			
				НайденнаяСтрока = ТЗРанееВыгруженных.Найти(стр.Поставщик,"Поставщик");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НЕ стр.Поставщик.НеПринимаетДозаказ = Истина Тогда
						СписокПоставщиков.Добавить(стр.Поставщик);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если стр.Сумма >= стр.Поставщик.СуммаПороговаяЗаказа Тогда
				СписокПоставщиков.Добавить(стр.Поставщик);
				стр.НадоДобирать = Истина;
			Иначе
				стр.НадоПерераспределять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТХТ = "ВЫБРАТЬ
	      |	Прайсы.Поставщик,
	      |	Прайсы.Код,
	      |	Прайсы.Товар КАК ТоварПоставщика,
	      |	Прайсы.Цена,
	      |		ВЫБОР
	      |			КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |					И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ЛОЖЬ
	      |				ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |			ИНАЧЕ ВЫБОР
	      |					КОГДА Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |							И СвязкиТовараСПоставщиком.ТоварФирмы.ЖНВЛС = ИСТИНА
	      |						ТОГДА ВЫРАЗИТЬ(Прайсы.ЦенаПриведенная * Прайсы.Поставщик.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |					ИНАЧЕ Прайсы.ЦенаПриведенная
	      |				КОНЕЦ
	      |		КОНЕЦ КАК ЦенаПриведенная,
	      |	Прайсы.Количество КАК Количество,
		  |	Прайсы.Кратность как Кратность,
		  |	Прайсы.СрокГодности как СрокГодности,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК КодТовара,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы КАК Товар,
	      |	СвязкиТовараСПоставщиком.ТоварФирмы.МинимальныйЗаказ КАК МинЗаказ,
	      |	МатрицаТовара.ГруппаАПИтог КАК ГруппаАП
	      |ИЗ
	      |	РегистрСведений.Прайсы КАК Прайсы
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
	      |		ПО Прайсы.Поставщик = СвязкиТовараСПоставщиком.Поставщик
	      |			И Прайсы.Код = СвязкиТовараСПоставщиком.КодТовараПоставщика
	      |			И (Прайсы.Поставщик В (&СписокПоставщиков))
	      |			И (СвязкиТовараСПоставщиком.ТоварФирмы = &Товар)  и  СвязкиТовараСПоставщиком.Блокировка = Ложь
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК МатрицаТовара
	      |		ПО (МатрицаТовара.Аптека = &Аптека)
	      |			И (МатрицаТовара.Товар = &Товар)
	      |			И (МатрицаТовара.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)
	      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |				ПерезаказОтказов.Поставщик КАК Поставщик,
	      |				ПерезаказОтказов.Товар КАК Товар
	      |			ИЗ
	      |				РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |			ГДЕ
	      |				НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |				И ПерезаказОтказов.Склад = &Аптека) КАК РегПерезаказов
	      |			ПО (РегПерезаказов.Поставщик = Прайсы.Поставщик)
	      |				И (РегПерезаказов.Товар = СвязкиТовараСПоставщиком.ТоварФирмы)		  
	      |ГДЕ
	      |	Прайсы.Поставщик В(&СписокПоставщиков)
	      |	И СвязкиТовараСПоставщиком.Поставщик В(&СписокПоставщиков)
		  |	И РегПерезаказов.Поставщик ЕСТЬ NULL
	      |	И СвязкиТовараСПоставщиком.ТоварФирмы = &Товар
	      |	И Прайсы.Количество > 0
		  | И (Прайсы.СрокГодности > &СрокГодности или Прайсы.СрокГодности = &ПустойСрок)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ";
		  
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);

	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.НадоДобирать = Истина Тогда  //Дозакажем, если надо
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			СуммаПоПоставщику = стр.Сумма;
			Для каждого Элемент из НайденныеСтроки Цикл
				Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
					Продолжить;	
				КонецЕсли;
				СтараяСумма = Элемент.Сумма;
				Если СуммаПоПоставщику >= стр.Поставщик.СуммаМинимальногоЗаказа Тогда
					Прервать;
				КонецЕсли;
				
				Если Элемент.ГруппаАП = "A" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.3,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 300 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=300 и Элемент.Цена < 800 Тогда
						Элемент.Количество = Элемент.Количество + 2;
					Иначе
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				ИначеЕсли Элемент.ГруппаАП = "B" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 500 Тогда
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				КонецЕсли;
					
				Если Элемент.МинЗаказ > 0 Тогда					
					Если Элемент.Количество < Элемент.МинЗаказ Тогда
						Элемент.Количество = Элемент.МинЗаказ;
					Иначе
						Элемент.Количество = Окр(Элемент.Количество/Элемент.МинЗаказ,0)*Элемент.МинЗаказ;
					КонецЕсли;
				КонецЕсли;	
				
				Элемент.Сумма = Элемент.Количество*Элемент.Цена;
				Дельта = Элемент.Сумма - СтараяСумма;
				СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
				
			КонецЦикла;
		ИначеЕсли стр.НадоПерераспределять = Истина Тогда  //Перераспределим на других поставщиков
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Для каждого Элемент из НайденныеСтроки Цикл
			    СписокПоставщиковДляЗапроса = СписокПоставщиков.Скопировать();  //Для корректировки с учетом крастности

				Если Элемент.Товар.Поставщик <> Справочники.Поставщики.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
				Если Элемент.Кратность > 1 Тогда
					СписокПоставщиковДляУдаления = Новый СписокЗначений;
					Для каждого стр из СписокПоставщиковДляЗапроса Цикл
						ОтборПТ = Новый Структура("Товар,Поставщик",Элемент.Товар,стр.Значение);
						НашлиСтроки = ТЗПоставщиковИсключенныхПоКратностям.НайтиСтроки(ОтборПТ);
						Если НашлиСтроки.Количество() > 0 Тогда
							СписокПоставщиковДляУдаления.Добавить(стр);							
						КонецЕсли;
					КонецЦикла;
					Для каждого стр из СписокПоставщиковДляУдаления Цикл
						СписокПоставщиковДляЗапроса.Удалить(стр.Значение);	
					КонецЦикла;
				КонецЕсли;				
				
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиковДляЗапроса);
				Запрос.УстановитьПараметр("Товар",Элемент.Товар);
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("БылаКорректировкаКратности");
				ТЗ.Колонки.Добавить("ОстатокПоставщика");
				ТЗ.Колонки.Добавить("ПерераспределитьПоКратности");
				ТЗ.Колонки.Добавить("БылоПерераспределениеПоКратности");
				ТЗ.Колонки.Добавить("ПотребностьАптекиКоличество");

				Если Элемент.Количество = 0 Тогда
					Потребность = Элемент.ПотребностьАптекиКоличество;
				Иначе
					Потребность = Элемент.Количество;
				КонецЕсли;
				номер = 0;
				Для каждого стр из ТЗ цикл
					номер = номер + 1;
					Если Потребность <= 0 Тогда
						Прервать;
					КонецЕсли;
					Заказать = Мин(стр.Количество,Потребность);
					Потребность = Потребность - Заказать;
					
					Цена = стр.Цена;
					//-----------------Проверим цену на допустимое отклонение---------------------
					Если ПроверитьНаПревышениеЦены(Элемент.Цена,Цена) = Истина Тогда
						Прервать;
					КонецЕсли;						
					
					
					НоваяСтрока = ТЗЗаказа.Добавить();				
					НоваяСтрока.КодТовара	= стр.КодТовара;
					НоваяСтрока.Товар		= стр.Товар;
					НоваяСтрока.Количество	= Заказать;
					НоваяСтрока.Цена		= Цена;
					НоваяСтрока.Сумма		= Цена*Заказать;
					НоваяСтрока.Поставщик	= стр.поставщик;
					НоваяСтрока.КодТовараПоставщика = стр.Код;
					НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
					НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
					НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
					НоваяСтрока.Кратность	= стр.Кратность;
					НоваяСтрока.СрокГодности= стр.СрокГодности;
					НоваяСтрока.ОстатокПоставщика = стр.Количество;
					НоваяСтрока.БылаКорректировкаКратности = Ложь;
					НоваяСтрока.ПерераспределитьПоКратности = Ложь;
					НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
					//Обработаем строку с учетом кратности.  Если и тут не прошла то, запоминаем новую строчку для удаления
					Если стр.Кратность > 1 Тогда
						ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
						Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда
							НоваяСтрокаОтказа = ТЗОтказов.Добавить();
							НоваяСтрокаОтказа.Дата = Док.Дата;
							НоваяСтрокаОтказа.Документ = Док.Ссылка;
							НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
							НоваяСтрокаОтказа.Склад = Док.Склад;
							НоваяСтрокаОтказа.Товар = стр.Товар;
							НоваяСтрокаОтказа.Количество = Элемент.ПотребностьАптекиКоличество;
							НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
							НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
							НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
							СписокУдаляемыхСтрок.Добавить(НоваяСтрока);		
						КонецЕсли;
					КонецЕсли;
					
					Нашли = ТЗЗаказаСводная.Найти(стр.Поставщик,"Поставщик");
					Нашли.Сумма = Нашли.Сумма + НоваяСтрока.Сумма;
					Если Номер = 1 Тогда
						СписокУдаляемыхСтрок.Добавить(Элемент);
					КонецЕсли;
					
				КонецЦикла;
				
			
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
	//Удалим перераспределенные строки
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	// Здесь удалим строки, которые надо было перераспределить по кратности, но не попавшие под общее перераспределение	
	СписокУдаляемыхСтрок.Очистить();
	Отбор = Новый Структура;
	Отбор.Вставить("ПерераспределитьПоКратности",Истина);
	ЕщеСтрокаДЛяУдаления = ТЗЗаказа.НайтиСтроки(Отбор);
	Для каждого стр из ЕщеСтрокаДЛяУдаления Цикл
		СписокУдаляемыхСтрок.Добавить(стр);	
	КонецЦикла;
	
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		
		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		НоваяСтрокаОтказа.Дата = Док.Дата;
		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		НоваяСтрокаОтказа.Поставщик = стр.Значение.Поставщик;
		НоваяСтрокаОтказа.Склад = Док.Склад;
		НоваяСтрокаОтказа.Товар = стр.Значение.Товар;
		НоваяСтрокаОтказа.Количество = стр.Значение.ПотребностьАптекиКоличество;
		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Значение.Код;
		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.Значение.ТоварПоставщика;
		
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	
		  
КонецПроцедуры

//===================================================================================================================================
//Процедура ОМ21_РаспределитьДокументПоПоставщикам(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков)
//
//ОПИСАНИЕ :
// 	По документу "заявка на товар", учитывая СписокПоставщиков, распределяется товар. Полученные данные проверяются на минимальную сумму
//	заказа и, если необходимо, то дозаказывается количество. Если дозаказать нельзя, тогда перераспределяется товар на других поставщиков.
//ПАРАМЕТРЫ : 
//  1. Док - Документ.ЗаявкаНаТовар
//  2. ТЗЗаказа - в эту переменную выгружается распределенный заказ
//  3. ТЗОтказов - в эту переменную выгружаются отказы 
//  4. СписокПоставщиков - Если надо распределять только по определенным поставщикам, то заполняется список
//	5. ОтфильтроватьПоСпискуПоставщиков - ИСТИНА/ЛОЖЬ , если надо распределить только по определенным поставщикам,
//		то передается ИСТИНА 
//===================================================================================================================================
Процедура ОМ21_РаспределитьДокументПоПоставщикам366(Док,ТЗЗаказа,ТЗОтказов,СписокПоставщиков,ОтфильтроватьПоСпискуПоставщиков) Экспорт
	
	
	
	ТЗТоваров = Док.Товар.Выгрузить();
	КодФирмы = Док.Склад.Фирма.Код366;
		  
	ТХТ = "ВЫБРАТЬ
	      |	ОбслуживаемыеАптеки.Владелец КАК Поставщик,
	      |	ОбслуживаемыеАптеки.Владелец.Код366 КАК Код366,
	      |	ОбслуживаемыеАптеки.Владелец.КоэффициентПриведенияЦеныКромеЖНВЛС КАК КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	ОбслуживаемыеАптеки.Владелец.КоэффициентПриведенияЦеныДляЖНВЛС КАК КоэффициентПриведенияЦеныДляЖНВЛС
	      |ПОМЕСТИТЬ ТЗПоставщиков
	      |ИЗ
	      |	Справочник.ОбслуживаемыеАптеки КАК ОбслуживаемыеАптеки
	      |ГДЕ
	      |	ОбслуживаемыеАптеки.Аптека = &Аптека
	      |	И ОбслуживаемыеАптеки.Владелец.ОсуществляетПрямыеПоставки = ИСТИНА
	      |	И ВЫБОР
	      |			КОГДА ОбслуживаемыеАптеки.Владелец.Код В (&СписокПоставщиков)
	      |				ТОГДА ЛОЖЬ
	      |			ИНАЧЕ &ОтфильтроватьПоСпискуПоставщиков
	      |		КОНЕЦ = ЛОЖЬ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПерезаказОтказов.Поставщик КАК Поставщик,
	      |	ПерезаказОтказов.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |ГДЕ
	      |	НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |	И ПерезаказОтказов.Склад = &Аптека
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ТЧ.Товар,
	      |	ТЧ.Товар.МинимальныйЗаказ КАК МинЗаказ,
	      |	ТЧ.Товар.ЖНВЛС КАК ЖНВЛС,
	      |	ТЧ.Количество
	      |ПОМЕСТИТЬ ПотребностьАптеки
	      |ИЗ
	      |	Документ.ЗаявкаНаТовар.Товар КАК ТЧ
	      |ГДЕ
	      |	ТЧ.Ссылка = &Документ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	ПотребностьАптеки.МинЗаказ,
	      |	ПотребностьАптеки.ЖНВЛС,
	      |	Связки366.КодИндивидуальный
	      |ПОМЕСТИТЬ Потребность366
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Связки366 КАК Связки366
	      |		ПО ПотребностьАптеки.Товар.Код = Связки366.КодАП
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Поставщики.Поставщик,
	      |	Поставщики.КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	Поставщики.КоэффициентПриведенияЦеныДляЖНВЛС,
	      |	Поставщики.Код366,
	      |	Каталог.КодПрайсЛиста
	      |ПОМЕСТИТЬ ВТ
	      |ИЗ
	      |	ТЗПоставщиков КАК Поставщики
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов366 КАК Каталог
	      |		ПО Поставщики.Код366 = Каталог.КодПоставщика
	      |			И (Каталог.КодФирмы = &КодФирмы)
	      |ГДЕ
	      |	Поставщики.Код366 > 0
	      |
	      |ИНДЕКСИРОВАТЬ ПО
	      |	Каталог.КодПрайсЛиста
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ПрайсЛисты366.КодИндивидуальный КАК Код,
	      |	ПрайсЛисты366.Наименование КАК ТоварПоставщика,
	      |	ПрайсЛисты366.Цена,
	      |	ВЫБОР
	      |		КОГДА ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |				И Потребность366.ЖНВЛС = ЛОЖЬ
	      |			ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА ВТ.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |						И Потребность366.ЖНВЛС = ИСТИНА
	      |					ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |				ИНАЧЕ ПрайсЛисты366.Цена
	      |			КОНЕЦ
	      |	КОНЕЦ КАК ЦенаПриведенная,
	      |	ПрайсЛисты366.Остаток КАК Количество,
	      |	ПрайсЛисты366.СрокГодности,
	      |	Потребность366.Количество КАК КоличествоАптеки,
	      |	ВТ.Поставщик КАК Поставщик,
	      |	Потребность366.Товар КАК Товар,
	      |	Потребность366.МинЗаказ,
	      |	1 КАК Кратность
	      |ПОМЕСТИТЬ СводныйПрайсЛист
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты366 КАК ПрайсЛисты366
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность366 КАК Потребность366
	      |		ПО ПрайсЛисты366.КодИндивидуальный = Потребность366.КодИндивидуальный
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	      |		ПО (ВТ.КодПрайсЛиста = ПрайсЛисты366.КодПрайсЛиста)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |		ПО (РегПерезаказов.Поставщик = ВТ.Поставщик)
	      |			И (РегПерезаказов.Товар = Потребность366.Товар)
	      |ГДЕ
	      |	ПрайсЛисты366.Остаток > 0
	      |	И ПрайсЛисты366.Цена > 0
	      |	И (ПрайсЛисты366.СрокГодности > &СрокГодности
	      |			ИЛИ ПрайсЛисты366.СрокГодности = &ПустойСрок)
	      |	И РегПерезаказов.Поставщик ЕСТЬ NULL 
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	СводныйПрайсЛист.Поставщик,
	      |	СводныйПрайсЛист.Код,
	      |	СводныйПрайсЛист.ТоварПоставщика,
	      |	СводныйПрайсЛист.Количество КАК Количество,
	      |	СводныйПрайсЛист.Цена,
	      |	СводныйПрайсЛист.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	СводныйПрайсЛист.Товар.Код КАК КодТовара,
	      |	СводныйПрайсЛист.Товар КАК Товар,
	      |	СводныйПрайсЛист.КоличествоАптеки,
	      |	СводныйПрайсЛист.МинЗаказ,
	      |	СводныйПрайсЛист.Кратность,
	      |	СводныйПрайсЛист.СрокГодности,
	      |	ЕСТЬNULL(ЭксПост.flag, 0) КАК flag
	      |ПОМЕСТИТЬ ИтоговыйЗаказ
	      |ИЗ
	      |	СводныйПрайсЛист КАК СводныйПрайсЛист
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |			ВЫБОР
	      |				КОГДА ЭксклюзивныеПоставщикиНоменклатуры.СуперЭксклюзив = ИСТИНА
	      |					ТОГДА 2
	      |				ИНАЧЕ 1
	      |			КОНЕЦ КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗПоставщиков.Поставщик
	      |					ИЗ
	      |						ТЗПоставщиков)) КАК ЭксПостУник
	      |		ПО СводныйПрайсЛист.Товар = ЭксПостУник.Товар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Товар КАК Товар,
	      |			ЭксклюзивныеПоставщикиНоменклатуры.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ЭксклюзивныеПоставщикиНоменклатуры.Эксклюзивы КАК ЭксклюзивныеПоставщикиНоменклатуры
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьЭксклюзив
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Ссылка.Включено = ИСТИНА
	      |			И ЭксклюзивныеПоставщикиНоменклатуры.Поставщик В
	      |					(ВЫБРАТЬ
	      |						ТЗПоставщиков.Поставщик
	      |					ИЗ
	      |						ТЗПоставщиков)) КАК ЭксПост
	      |		ПО СводныйПрайсЛист.Товар = ЭксПост.Товар
	      |			И СводныйПрайсЛист.Поставщик = ЭксПост.Поставщик
	      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	      |			1 КАК flag,
	      |			Исключения.Товар КАК Товар,
	      |			Исключения.Поставщик КАК Поставщик
	      |		ИЗ
	      |			Справочник.ИсключенияПоставщикиНоменклатуры.Исключения КАК Исключения
	      |		ГДЕ
	      |			ИСТИНА = &УчитыватьИсключения
	      |			И Исключения.Ссылка.Включено = ИСТИНА) КАК Исключения
	      |		ПО СводныйПрайсЛист.Товар = Исключения.Товар
	      |			И СводныйПрайсЛист.Поставщик = Исключения.Поставщик
	      |ГДЕ
	      |	(ЕСТЬNULL(ЭксПостУник.flag, 0) < 2
	      |			ИЛИ ЕСТЬNULL(ЭксПост.flag, 0) = 1)
	      |	И ЕСТЬNULL(Исключения.flag, 0) = 0
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	&Дата КАК Дата,
	      |	ПотребностьАптеки.Товар,
	      |	ПотребностьАптеки.Количество,
	      |	0 КАК Цена,
	      |	0 КАК Сумма,
	      |	&Аптека КАК Склад,
	      |	&Документ КАК Документ,
	      |	"""" КАК КодТовараПоставщика,
	      |	"""" КАК НаименованиеТОвараПоставщика,
	      |	"""" КАК НомерЗаявкиАптеки,
	      |	ЗНАЧЕНИЕ(Перечисление.ПричинаОтказа.ОтсутствиеОстаткаСвязки) КАК ПричинаОтказа,
	      |	"""" КАК Комментарий,
	      |	"""" КАК Поставщик
	      |ИЗ
	      |	ПотребностьАптеки КАК ПотребностьАптеки
	      |ГДЕ
	      |	НЕ ПотребностьАптеки.Товар В
	      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |					ИтоговыйЗаказ.Товар
	      |				ИЗ
	      |					ИтоговыйЗаказ)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ИтоговыйЗаказ.Поставщик,
	      |	ИтоговыйЗаказ.Код КАК Код,
	      |	ИтоговыйЗаказ.ТоварПоставщика КАК ТоварПоставщика,
	      |	ИтоговыйЗаказ.Количество КАК Количество,
	      |	ИтоговыйЗаказ.Цена,
	      |	ИтоговыйЗаказ.ЦенаПриведенная КАК ЦенаПриведенная,
	      |	ИтоговыйЗаказ.КодТовара,
	      |	ИтоговыйЗаказ.Товар,
	      |	ИтоговыйЗаказ.КоличествоАптеки,
	      |	ИтоговыйЗаказ.МинЗаказ КАК МинЗаказ,
	      |	ИтоговыйЗаказ.Кратность КАК Кратность,
	      |	ИтоговыйЗаказ.СрокГодности КАК СрокГодности,
	      |	ИтоговыйЗаказ.flag КАК flag,
	      |	Матрица.ГруппаАПИтог КАК ГруппаАП
	      |ИЗ
	      |	ИтоговыйЗаказ КАК ИтоговыйЗаказ
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК Матрица
	      |		ПО (Матрица.Аптека = &Аптека)
	      |			И (Матрица.Товар = ИтоговыйЗаказ.Товар)
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ИтоговыйЗаказ.Товар.Наименование,
	      |	flag УБЫВ,
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ПотребностьАптеки
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗпоставщиков
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ СводныйПрайсЛист
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ Потребность366
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ИтоговыйЗаказ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТ";		  

		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("ТЗТоваров",ТЗТоваров);
	Запрос.УстановитьПараметр("ПустаяСТрока","");
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("КодФирмы",КодФирмы);
	Запрос.УстановитьПараметр("Документ",Док.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьЭксклюзив",Константы.УчитыватьЭксклюзивыПриЗаказе.Получить());
	Запрос.УстановитьПараметр("УчитыватьИсключения",Константы.УчитыватьИсключенияПриЗаказе.Получить());
	Запрос.УстановитьПараметр("ОтфильтроватьПоСпискуПоставщиков",ОтфильтроватьПоСпискуПоставщиков);
	Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиков);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	СрокГодности = НачалоДня(ТекущаяДата()) + 24*60*60*120;
	ПустойСрок = ОМ3_ПустаяДата();
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);
	
	//Сообщить("Время выполнения запроса начало:" + ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТЗОтказов = МассивРезультатов[7].Выгрузить();
	ТЗСводныйПрайс = МассивРезультатов[8].Выгрузить();
	//Сообщить("Время выполнения запроса конец:" + ТекущаяДата());
	
	ТЗЗаказа = Новый ТаблицаЗначений;
	ТЗЗаказа.Колонки.Добавить("КодТовара");
	ТЗЗаказа.Колонки.Добавить("Товар");
	ТЗЗаказа.Колонки.Добавить("Количество");
	ТЗЗаказа.Колонки.Добавить("Поставщик");
	ТЗЗаказа.Колонки.Добавить("КодТовараПоставщика");
	ТЗЗаказа.Колонки.Добавить("НаименованиеТовараПоставщика");
	ТЗЗаказа.Колонки.Добавить("Цена");
	ТЗЗаказа.Колонки.Добавить("Сумма");
	ТЗЗаказа.Колонки.Добавить("СрокГодности");
	ТЗЗаказа.Колонки.Добавить("Кратность");
	ТЗЗаказа.Колонки.Добавить("МинЗаказ");
	ТЗЗаказа.Колонки.Добавить("ГруппаАП");
	ТЗЗаказа.Колонки.Добавить("БылаКорректировкаКратности");
	ТЗЗаказа.Колонки.Добавить("ОстатокПоставщика");
	ТЗЗаказа.Колонки.Добавить("ПерераспределитьПоКратности");
	ТЗЗаказа.Колонки.Добавить("БылоПерераспределениеПоКратности");
	ТЗЗаказа.Колонки.Добавить("ПотребностьАптекиКоличество");


	
	Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.Заказ") Тогда
		
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|	И НЕ Заказ.Ссылка = &Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";
		
	Иначе
		ТХТ = "ВЫБРАТЬ
		|	Заказ.Поставщик как Поставщик,
		|	СУММА(Заказ.СуммаДок) КАК СуммаДок
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.ПометкаУдаления = ЛОЖЬ
		|	И Заказ.Дата >= &Дата
		|	И Заказ.Склад = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Поставщик";		  
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Док.Склад);
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Док",Док.Ссылка);

	ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
	
	

	//====== Вариант первый ======//
	СтарыйТовар = "";
	Потребность = 0;
	ТЗПоставщиковИсключенныхПоКратностям = Новый ТаблицаЗначений;
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Поставщик");
	ТЗПоставщиковИсключенныхПоКратностям.Колонки.Добавить("Товар");
	СписокПоставщиков = Новый СписокЗначений;
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	ПерваяЦена = 0;	
	//Сообщить("Первый вариант начало : " + ТекущаяДата());
	ДЛя каждого стр из ТЗСводныйПрайс Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если СтарыйТовар <> стр.Товар Тогда
			Потребность = стр.КоличествоАптеки;
			СтарыйТовар = стр.Товар;
		КонецЕсли;
		// Пропускаем , если уже все заказали и всего хватило
		Если Потребность <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр.Количество >= Потребность Тогда
			Заказать = Потребность;
			Потребность = 0;
		Иначе
			Заказать = стр.Количество;
			Потребность = Потребность - стр.Количество;
		КонецЕсли;
		НоваяСтрока				= ТЗЗаказа.Добавить();				
		НоваяСтрока.КодТовара	= стр.КодТовара;
		НоваяСтрока.Товар		= стр.Товар;
		НоваяСтрока.Количество	= Заказать;
		НоваяСтрока.ПотребностьАптекиКоличество	= Заказать;
		НоваяСтрока.Цена		= стр.Цена;
		НоваяСтрока.Сумма		= стр.Цена*Заказать;
		НоваяСтрока.Поставщик	= стр.поставщик;
		НоваяСтрока.КодТовараПоставщика = стр.Код;
		НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
		НоваяСтрока.Кратность	= стр.Кратность;
		НоваяСтрока.СрокГодности= стр.СрокГодности;
		НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
		НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
		НоваяСтрока.ОстатокПоставщика = стр.Количество;
		НоваяСтрока.БылаКорректировкаКратности = Ложь;
		НоваяСтрока.ПерераспределитьПоКратности = Ложь;
		НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
		Если стр.Кратность > 1 Тогда  //Проверяем на кратность 
			ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
			//Если по кратности не проходим, запоминаем связку товар-поставщик для исключения при дальнейшем перераспределении
			//и восстанавливаем потребность аптеки в исходное количество
			Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда 
				Потребность = стр.КоличествоАптеки;	
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
				стрИсключения = ТЗПоставщиковИсключенныхПоКратностям.Добавить();
				стрИсключения.Поставщик = стр.Поставщик;
				стрИсключения.Товар = стр.Товар;
			КонецЕсли;
		КонецЕсли;
		//Проверим на превышение цены от первой (минимальной) цены по текущему товару
		Если ПерваяЦена > 0 и НоваяСтрока.ПерераспределитьПоКратности = Ложь Тогда
			Если ПроверитьНаПревышениеЦены(ПерваяЦена,стр.Цена) = Истина Тогда
				//НоваяСтрокаОтказа = ТЗОтказов.Добавить();
				//НоваяСтрокаОтказа.Товар = НоваяСтрока.Товар;
				//НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;
				//НоваяСтрокаОтказа.ПричинаОтказа = "отказ по превышению второй цены";
				
				НоваяСтрокаОтказа = ТЗОтказов.Добавить();
				НоваяСтрокаОтказа.Дата = Док.Дата;
				НоваяСтрокаОтказа.Документ = Док.Ссылка;
				НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
				НоваяСтрокаОтказа.Склад = Док.Склад;
				НоваяСтрокаОтказа.Товар = стр.Товар;
				НоваяСтрокаОтказа.Количество = НоваяСтрока.Количество;;
				НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
				НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
				НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
				
				
				
				СписокУдаляемыхСтрок.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим строки из таблицы заказа, которые не прошли по кратностям и превышениям цены
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	СписокУдаляемыхСтрок.Очистить();

	
	
	//Конец обработки таблицы заказа с учетом кратности позиций у поставщика
	
	//Сообщить("Первый вариант конец : " + ТекущаяДата());
	ТЗЗаказа.Сортировать("Поставщик,Товар,ГруппаАП,Количество убыв");	
	ТЗЗаказаСводная = ТЗЗаказа.Скопировать();
	ТЗЗаказаСводная.Свернуть("Поставщик","Сумма");
	ТЗЗаказаСводная.Колонки.Добавить("НадоДобирать");
	ТЗЗаказаСводная.Колонки.Добавить("НадоПерераспределять");
	
	
	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.Сумма >= стр.Поставщик.СуммаМинимальногоЗаказа Тогда
			СписокПоставщиков.Добавить(стр.Поставщик);
			Продолжить;
		Иначе
			Если ТЗРанееВыгруженных.Количество() > 0 Тогда			
				НайденнаяСтрока = ТЗРанееВыгруженных.Найти(стр.Поставщик,"Поставщик");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НЕ стр.Поставщик.НеПринимаетДозаказ = Истина Тогда
						СписокПоставщиков.Добавить(стр.Поставщик);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если стр.Сумма >= стр.Поставщик.СуммаПороговаяЗаказа Тогда
				СписокПоставщиков.Добавить(стр.Поставщик);
				стр.НадоДобирать = Истина;
			Иначе
				стр.НадоПерераспределять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТХТ = "ВЫБРАТЬ
	      |	Поставщики.Ссылка КАК Поставщик,
	      |	Поставщики.Код366 КАК Код366,
	      |	Поставщики.КоэффициентПриведенияЦеныКромеЖНВЛС КАК КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	Поставщики.КоэффициентПриведенияЦеныДляЖНВЛС КАК КоэффициентПриведенияЦеныДляЖНВЛС
	      |ПОМЕСТИТЬ ТЗПоставщиков
	      |ИЗ
	      |	Справочник.Поставщики КАК Поставщики
	      |ГДЕ
	      |	Поставщики.Ссылка В(&СписокПоставщиков)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      |	ПерезаказОтказов.Поставщик КАК Поставщик,
	      |	ПерезаказОтказов.Товар КАК Товар
	      |ПОМЕСТИТЬ РегПерезаказов
	      |ИЗ
	      |	РегистрСведений.ПерезаказОтказов КАК ПерезаказОтказов
	      |ГДЕ
	      |	НАЧАЛОПЕРИОДА(ПерезаказОтказов.Дата, ДЕНЬ) = &ДатаСегодня
	      |	И ПерезаказОтказов.Склад = &Аптека
	      |	И ПерезаказОтказов.Товар = &Товар
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Поставщики.Поставщик,
	      |	Поставщики.КоэффициентПриведенияЦеныКромеЖНВЛС,
	      |	Поставщики.КоэффициентПриведенияЦеныДляЖНВЛС,
	      |	Поставщики.Код366,
	      |	Каталог.КодПрайсЛиста
	      |ПОМЕСТИТЬ ВТ
	      |ИЗ
	      |	ТЗПоставщиков КАК Поставщики
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов366 КАК Каталог
	      |		ПО Поставщики.Код366 = Каталог.КодПоставщика
	      |			И (Каталог.КодФирмы = &КодФирмы)
	      |ГДЕ
	      |	Поставщики.Код366 > 0
	      |
	      |ИНДЕКСИРОВАТЬ ПО
	      |	Каталог.КодПрайсЛиста
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ПрайсЛисты366.КодИндивидуальный КАК Код,
	      |	ПрайсЛисты366.Наименование КАК ТоварПоставщика,
	      |	ПрайсЛисты366.Цена,
	      |	ВЫБОР
	      |		КОГДА ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС > 0
	      |				И &ЖНВЛС = ЛОЖЬ
	      |			ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныКромеЖНВЛС КАК ЧИСЛО(12, 2))
	      |		ИНАЧЕ ВЫБОР
	      |				КОГДА ВТ.КоэффициентПриведенияЦеныДляЖНВЛС > 0
	      |						И &ЖНВЛС = ИСТИНА
	      |					ТОГДА ВЫРАЗИТЬ(ПрайсЛисты366.Цена * ВТ.КоэффициентПриведенияЦеныДляЖНВЛС КАК ЧИСЛО(12, 2))
	      |				ИНАЧЕ ПрайсЛисты366.Цена
	      |			КОНЕЦ
	      |	КОНЕЦ КАК ЦенаПриведенная,
	      |	ПрайсЛисты366.Остаток КАК Количество,
	      |	ПрайсЛисты366.СрокГодности,
	      |	ВТ.Поставщик КАК Поставщик,
	      |	&Товар КАК Товар,
		  |	&КодТовара как КодТовара,
	      |	&МинЗаказ,
	      |	1 КАК Кратность,
	      |	МатрицаТовара.ГруппаАПИтог как ГруппаАП
	      |ИЗ
	      |	РегистрСведений.ПрайсЛисты366 КАК ПрайсЛисты366
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	      |		ПО (ВТ.КодПрайсЛиста = ПрайсЛисты366.КодПрайсЛиста)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегПерезаказов КАК РегПерезаказов
	      |		ПО (РегПерезаказов.Поставщик = ВТ.Поставщик)
	      |			И (РегПерезаказов.Товар = &Товар)
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Матрица КАК МатрицаТовара
	      |		ПО (МатрицаТовара.Аптека = &Аптека)
	      |			И (МатрицаТовара.Товар = &Товар)
	      |ГДЕ
	      |	ПрайсЛисты366.КодИндивидуальный = &КодИндивидуальный
	      |	И ПрайсЛисты366.Остаток > 0
	      |	И ПрайсЛисты366.Цена > 0
	      |	И (ПрайсЛисты366.СрокГодности > &СрокГодности
	      |			ИЛИ ПрайсЛисты366.СрокГодности = &ПустойСрок)
	      |	И РегПерезаказов.Поставщик ЕСТЬ NULL 
	      |
	      |УПОРЯДОЧИТЬ ПО
	      |	ЦенаПриведенная,
	      |	Количество УБЫВ
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ТЗпоставщиков
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ РегПерезаказов
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |УНИЧТОЖИТЬ ВТ";
		  
	Запрос.УстановитьПараметр("Аптека",Док.Склад);
	Запрос.УстановитьПараметр("КодФирмы",КодФирмы);
	Запрос.УстановитьПараметр("ДатаСегодня",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СрокГодности",СрокГодности);
	Запрос.УстановитьПараметр("ПустойСрок",ПустойСрок);

	
	Для каждого стр из ТЗЗаказаСводная Цикл
		Если стр.НадоДобирать = Истина Тогда  //Дозакажем, если надо
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			СуммаПоПоставщику = стр.Сумма;
			Для каждого Элемент из НайденныеСтроки Цикл
				Если Элемент.Кратность > 1 Тогда  //позиции с кратностью не добираем
					Продолжить;	
				КонецЕсли;
				СтараяСумма = Элемент.Сумма;
				Если СуммаПоПоставщику >= стр.Поставщик.СуммаМинимальногоЗаказа Тогда
					Прервать;
				КонецЕсли;
				
				Если Элемент.ГруппаАП = "A" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.3,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 300 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=300 и Элемент.Цена < 800 Тогда
						Элемент.Количество = Элемент.Количество + 2;
					Иначе
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				ИначеЕсли Элемент.ГруппаАП = "B" Тогда
					Если  Элемент.Цена < 50 Тогда
						Элемент.Количество = Окр(Элемент.Количество*1.2,0);
					ИначеЕсли Элемент.Цена >=50 и Элемент.Цена < 500 Тогда
						Элемент.Количество = Элемент.Количество + 1;
					КонецЕсли;
				КонецЕсли;
					
				Если Элемент.МинЗаказ > 0 Тогда					
					Если Элемент.Количество < Элемент.МинЗаказ Тогда
						Элемент.Количество = Элемент.МинЗаказ;
					Иначе
						Элемент.Количество = Окр(Элемент.Количество/Элемент.МинЗаказ,0)*Элемент.МинЗаказ;
					КонецЕсли;
				КонецЕсли;	
				
				Элемент.Сумма = Элемент.Количество*Элемент.Цена;
				Дельта = Элемент.Сумма - СтараяСумма;
				СуммаПоПоставщику = СуммаПоПоставщику + Дельта;
				
			КонецЦикла;
		ИначеЕсли стр.НадоПерераспределять = Истина Тогда  //Перераспределим на других поставщиков
			Отбор = Новый Структура;
			Отбор.Вставить("Поставщик",стр.Поставщик);
			НайденныеСтроки = ТЗЗаказа.НайтиСтроки(Отбор);
			
			Для каждого Элемент из НайденныеСтроки Цикл
			    СписокПоставщиковДляЗапроса = СписокПоставщиков.Скопировать();  //Для корректировки с учетом крастности

				Если Элемент.Товар.Поставщик <> Справочники.Поставщики.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
				Если Элемент.Кратность > 1 Тогда
					СписокПоставщиковДляУдаления = Новый СписокЗначений;
					Для каждого стр из СписокПоставщиковДляЗапроса Цикл
						ОтборПТ = Новый Структура("Товар,Поставщик",Элемент.Товар,стр.Значение);
						НашлиСтроки = ТЗПоставщиковИсключенныхПоКратностям.НайтиСтроки(ОтборПТ);
						Если НашлиСтроки.Количество() > 0 Тогда
							СписокПоставщиковДляУдаления.Добавить(стр);							
						КонецЕсли;
					КонецЦикла;
					Для каждого стр из СписокПоставщиковДляУдаления Цикл
						СписокПоставщиковДляЗапроса.Удалить(стр.Значение);	
					КонецЦикла;
				КонецЕсли;				
				
				Запрос.Текст = ТХТ;
				Запрос.УстановитьПараметр("СписокПоставщиков",СписокПоставщиковДляЗапроса);
				Запрос.УстановитьПараметр("МинЗаказ",Элемент.МинЗаказ);
				Запрос.УстановитьПараметр("ЖНВЛС",Элемент.Товар.ЖНВЛС);
				Запрос.УстановитьПараметр("КодИндивидуальный",Элемент.КодТовараПоставщика);
				Запрос.УстановитьПараметр("Товар",Элемент.Товар);
				Запрос.УстановитьПараметр("КодТовара",Элемент.КодТовара);
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("БылаКорректировкаКратности");
				ТЗ.Колонки.Добавить("ОстатокПоставщика");
				ТЗ.Колонки.Добавить("ПерераспределитьПоКратности");
				ТЗ.Колонки.Добавить("БылоПерераспределениеПоКратности");
				ТЗ.Колонки.Добавить("ПотребностьАптекиКоличество");

				Если Элемент.Количество = 0 Тогда
					Потребность = Элемент.ПотребностьАптекиКоличество;
				Иначе
					Потребность = Элемент.Количество;
				КонецЕсли;
				номер = 0;
				Для каждого стр из ТЗ цикл
					номер = номер + 1;
					Если Потребность <= 0 Тогда
						Прервать;
					КонецЕсли;
					Заказать = Мин(стр.Количество,Потребность);
					Потребность = Потребность - Заказать;
					
					Цена = стр.Цена;
					//-----------------Проверим цену на допустимое отклонение---------------------
					Если ПроверитьНаПревышениеЦены(Элемент.Цена,Цена) = Истина Тогда
						Прервать;
					КонецЕсли;						
					
					
					НоваяСтрока = ТЗЗаказа.Добавить();				
					НоваяСтрока.КодТовара	= стр.КодТовара;
					НоваяСтрока.Товар		= стр.Товар;
					НоваяСтрока.Количество	= Заказать;
					НоваяСтрока.Цена		= Цена;
					НоваяСтрока.Сумма		= Цена*Заказать;
					НоваяСтрока.Поставщик	= стр.поставщик;
					НоваяСтрока.КодТовараПоставщика = стр.Код;
					НоваяСтрока.НаименованиеТовараПоставщика = стр.ТоварПоставщика;	
					НоваяСтрока.МинЗаказ	= стр.МинЗаказ;
					НоваяСтрока.ГруппаАП	= стр.ГруппаАП;
					НоваяСтрока.Кратность	= стр.Кратность;
					НоваяСтрока.СрокГодности= стр.СрокГодности;
					НоваяСтрока.ОстатокПоставщика = стр.Количество;
					НоваяСтрока.БылаКорректировкаКратности = Ложь;
					НоваяСтрока.ПерераспределитьПоКратности = Ложь;
					НоваяСтрока.БылоПерераспределениеПоКратности = Ложь;
					//Обработаем строку с учетом кратности.  Если и тут не прошла то, запоминаем новую строчку для удаления
					Если стр.Кратность > 1 Тогда
						ОбработатьСтрокуЗаказаСУчетомКратности(НоваяСтрока);
						Если НоваяСтрока.ПерераспределитьПоКратности = Истина Тогда
							НоваяСтрокаОтказа = ТЗОтказов.Добавить();
							НоваяСтрокаОтказа.Дата = Док.Дата;
							НоваяСтрокаОтказа.Документ = Док.Ссылка;
							НоваяСтрокаОтказа.Поставщик = стр.Поставщик;
							НоваяСтрокаОтказа.Склад = Док.Склад;
							НоваяСтрокаОтказа.Товар = стр.Товар;
							НоваяСтрокаОтказа.Количество = Элемент.ПотребностьАптекиКоличество;
							НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
							НоваяСтрокаОтказа.КодТовараПоставщика = стр.Код;
							НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.ТоварПоставщика;
							СписокУдаляемыхСтрок.Добавить(НоваяСтрока);		
						КонецЕсли;
					КонецЕсли;
					
					Нашли = ТЗЗаказаСводная.Найти(стр.Поставщик,"Поставщик");
					Нашли.Сумма = Нашли.Сумма + НоваяСтрока.Сумма;
					Если Номер = 1 Тогда
						СписокУдаляемыхСтрок.Добавить(Элемент);
					КонецЕсли;
					
				КонецЦикла;
				
			
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
	//Удалим перераспределенные строки
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	// Здесь удалим строки, которые надо было перераспределить по кратности, но не попавшие под общее перераспределение	
	СписокУдаляемыхСтрок.Очистить();
	Отбор = Новый Структура;
	Отбор.Вставить("ПерераспределитьПоКратности",Истина);
	ЕщеСтрокаДЛяУдаления = ТЗЗаказа.НайтиСтроки(Отбор);
	Для каждого стр из ЕщеСтрокаДЛяУдаления Цикл
		СписокУдаляемыхСтрок.Добавить(стр);	
	КонецЦикла;
	
	Для каждого стр из СписокУдаляемыхСтрок Цикл
		
		НоваяСтрокаОтказа = ТЗОтказов.Добавить();
		НоваяСтрокаОтказа.Дата = Док.Дата;
		НоваяСтрокаОтказа.Документ = Док.Ссылка;
		НоваяСтрокаОтказа.Поставщик = стр.Значение.Поставщик;
		НоваяСтрокаОтказа.Склад = Док.Склад;
		НоваяСтрокаОтказа.Товар = стр.Значение.Товар;
		НоваяСтрокаОтказа.Количество = стр.Значение.ПотребностьАптекиКоличество;
		НоваяСтрокаОтказа.ПричинаОтказа = Перечисления.ПричинаОтказа.ОтказПоКратности;
		НоваяСтрокаОтказа.КодТовараПоставщика = стр.Значение.Код;
		НоваяСтрокаОтказа.НаименованиеТовараПоставщика = стр.Значение.ТоварПоставщика;
		
		ТЗЗаказа.Удалить(стр.Значение);	
	КонецЦикла;
	
		  
КонецПроцедуры



Функция ОМ21_ПреобразоватьТекстВДБФ(Поставщик,ФайлСтрока)
	НовыйФайл = "";
	Файл = Новый ТекстовыйДокумент;
	Попытка
		Файл.Прочитать(ФайлСтрока);
	Исключение
		//Сообщить("Файл: " + ФайлСтрока + " не прочитан! Пропускаем его... ");	
		Возврат НовыйФайл;
	КонецПопытки;
	
	ФайлОбъект = Новый Файл(ФайлСтрока);
	ДБФ = Новый XBASE;
	//Формируем структуру DBF
	ДБФ.поля.Добавить("CODEPST","S",15);
	ДБФ.поля.Добавить("PRICE","N",12,2);
	ДБФ.поля.Добавить("QNT","N",12,2);
	ДБФ.поля.Добавить("NAME","S",150);
	ДБФ.поля.Добавить("Firm","S",50);
	//Конец формирования структуры dbf
	ДБФ.СоздатьФайл(ФайлОбъект.Путь+"price.dbf");
	ДБФ.Кодировка = КодировкаXBase.OEM;
	
	
	КолСтрок = Файл.КоличествоСтрок();
	
	
	
	Вхождение = Истина;
	Для номер = 11 По КолСтрок Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		ТекСтрока = Файл.ПолучитьСтроку(номер); //Получили строку
		ТекСтрока = СтрЗаменить(ТекСтрока,";",Символы.ПС); //Развернули ее по вертикали
		
		КодТовара		= СтрПолучитьСтроку(ТекСтрока,1);	
		Товар			= СтрПолучитьСтроку(ТекСтрока,2);
		Производитель			= СтрПолучитьСтроку(ТекСтрока,3);
		Количество		= Число(СтрПолучитьСтроку(ТекСтрока,5));	
		Цена			= Число(СтрПолучитьСтроку(ТекСтрока,6));
		ДБФ.Добавить();
		ДБФ.CODEPST = СокрЛП(Кодтовара);
		ДБФ.NAME = СокрЛП(Товар);
		ДБФ.QNT = Количество;
		ДБФ.Firm = СокрЛП(Производитель);
		ДБФ.PRICE = Цена;
		ДБФ.Записать();
    КонецЦикла;
	ДБФ.ЗакрытьФайл();
	НовыйФайл = ФайлОбъект.Путь+"price.dbf";
	Возврат НовыйФайл;
	
	
КонецФункции


Процедура ОМ21_УменьшитьКоличестваВПрайсе(Док) Экспорт
	
	//Возврат;
	
	//Если Док.Склад.РаботаЧерезКонвертер = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	Поставщик = Док.Поставщик;
	Если Поставщик.КонтролироватьОстатокВПрайсе Тогда	
		
		//ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	Прайсы.Поставщик,
		//|	Прайсы.Код,
		//|	Прайсы.Товар,
		//|	Прайсы.СрокГодности,
		//|	Прайсы.Производитель,
		//|	Прайсы.ПартияПоставщика,
		//|	Прайсы.Цена,
		//|	Прайсы.ЦенаПриведенная,
		//|	Прайсы.Кратность,
		//|	ЗаказТовар.Количество КАК КоличествоЗаказа
		//|ИЗ
		//|	Документ.Заказ.Товар КАК ЗаказТовар
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Прайсы КАК Прайсы
		//|		ПО ЗаказТовар.Ссылка.Поставщик = Прайсы.Поставщик
		//|			И ЗаказТовар.КодТовараПоставщика = Прайсы.Код
		//|			И ЗаказТовар.СрокГодности = Прайсы.СрокГодности
		//|			И ЗаказТовар.Цена = Прайсы.Цена
		//|ГДЕ
		//|	ЗаказТовар.Ссылка = &Ссылка
		//|	И Прайсы.Количество > 0";
		
		ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	ЗаказТовар.Количество КАК КоличествоЗаказа,
		      |	ЗаказТовар.КаталогПрайса как КодПрайсЛиста,
		      |	ЗаказТовар.НомерЗаписи
		      |ИЗ
		      |	Документ.Заказ.Товар КАК ЗаказТовар
		      |ГДЕ
		      |	ЗаказТовар.Ссылка = &Ссылка";
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Док.Ссылка);
		Источник = Запрос.Выполнить().Выгрузить();
		Если Источник.Количество() Тогда
			
			//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			//
			Попытка
			//	// Блокировка данных
			//	текБлокировка = Новый БлокировкаДанных;
			//	БлокРегистра = текБлокировка.Добавить("РегистрСведений.ПрайсЛисты");
			//	БлокРегистра.Режим = РежимБлокировкиДанных.Исключительный;
			//	БлокРегистра.ИсточникДанных = Источник;
			//	БлокРегистра.ИспользоватьИзИсточникаДанных("КодПрайсЛиста", "КодПрайсЛиста");
			//	БлокРегистра.ИспользоватьИзИсточникаДанных("НомерЗаписи", "НомерЗаписи");
			//	
			//	// Заблокировать
			//	текБлокировка.Заблокировать();
				
				Для каждого стр из Источник цикл
					текЗапись = РегистрыСведений.ПрайсЛисты.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(текЗапись, стр);
					текЗапись.Прочитать();
					Если ТекЗапись.Выбран() Тогда
						ТекЗапись.Количество = ТекЗапись.Количество - стр.КоличествоЗаказа;
						ТекЗапись.Записать();
					КонецЕсли;
				КонецЦикла;	
			//	ЗафиксироватьТранзакцию();
			Исключение
			//	ОтменитьТранзакцию();
				#Если Клиент Тогда
					Сообщить("не удалось изменить записи в прайсе. Ошибка:  " + ОписаниеОшибки() );	
				#КонецЕсли
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМ21_УменьшитьКоличестваВПрайсе_pg(Док) Экспорт
	
	
	Поставщик = Док.Поставщик;
	Если Поставщик.КонтролироватьОстатокВПрайсе Тогда	
		
		
		ТХТ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		      |	СУММА(ЗаказТовар.Количество) КАК Количество,
		      |	ЗаказТовар.КаталогПрайса КАК КодПрайсЛиста,
		      |	ЗаказТовар.НомерЗаписи КАК НомерЗаписи
		      |ИЗ
		      |	Документ.Заказ.Товар КАК ЗаказТовар
		      |ГДЕ
		      |	ЗаказТовар.Ссылка = &Ссылка
		      |	И ЗаказТовар.КаталогПрайса > 0
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	ЗаказТовар.КаталогПрайса,
		      |	ЗаказТовар.НомерЗаписи";
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТХТ;
		Запрос.УстановитьПараметр("Ссылка",Док.Ссылка);
		Источник = Запрос.Выполнить().Выгрузить();
		
		
		Если Источник.Количество() > 0 Тогда
			НЗ = РегистрыСведений.КорректировкаКоличествВПрайсе.СоздатьНаборЗаписей();
			НЗ.ОбменДанными.Загрузка = Истина;
			НЗ.Отбор.КодПрайсЛиста.Установить(Источник.Получить(0).КодПрайсЛиста);
			НЗ.Загрузить(Источник);
			НЗ.Записать(Ложь);
		КонецЕсли;
	                
	КонецЕсли;
		
КонецПроцедуры

//=====================================================================================================================================
 
Процедура ВыгрузитьДокументыПоставщику(СписокДокументовЗаказа)
//================= Процедрура выгрузки распределенных документов поставщику ================================
// Действия : 
//				1. Проверяем на мин. заказ, если мин.зак меньше, то помечаем документ на удаление
//				2. Если сумма дока больше мин. заказа, то проверяем на Автовыгрузку документа и соответственно, либо выгружаем, либо нет	

	Для каждого стр из СписокДокументовЗаказа Цикл
		Док = стр.Значение;
		
		Если Док.СуммаДок < Док.Поставщик.СуммаМинимальногоЗаказа Тогда 
			ТХТ = "ВЫБРАТЬ
			|	Заказ.Поставщик как Поставщик,
			|	СУММА(Заказ.СуммаДок) КАК СуммаДок
			|ИЗ
			|	Документ.Заказ КАК Заказ
			|ГДЕ
			|	Заказ.ПометкаУдаления = ЛОЖЬ
			|	И Заказ.Дата >= &Дата
			|	И Заказ.Склад = &Склад
			|	И НЕ Заказ.Ссылка = &Док
			|	И Заказ.Поставщик = &Поставщик
			|СГРУППИРОВАТЬ ПО
			|	Заказ.Поставщик";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТХТ;
			Запрос.УстановитьПараметр("Склад",Док.Склад);
			Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("Док",Док.Ссылка);
			Запрос.УстановитьПараметр("Поставщик",Док.Поставщик);
			
			ТЗРанееВыгруженных = Запрос.Выполнить().Выгрузить();
			Если ТЗРанееВыгруженных.Количество() = 0 Тогда
				Док.УстановитьПометкуУдаления(Истина);
				Продолжить;
			Иначе
				Если Док.Поставщик.НеПринимаетДозаказ Тогда
					Док.УстановитьПометкуУдаления(Истина);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Нашли = Справочники.КодыАптек.НайтиПоРеквизиту("Аптека",Док.Склад,,Док.Поставщик);
		Если Нашли = Справочники.КодыАптек.ПустаяСсылка() Тогда
			//Предупреждение("На эту аптеку нет кода поставщика! Документ не выгружен!");
			Продолжить;
		КонецЕсли;
		
		Если (Док.Поставщик.АвтоматическаяВыгрузкаЗаказов = Истина) Тогда
			Если Док.ВыгрузитьПоставщику() = Истина Тогда
				Для к = 1 по 3 Цикл
					Попытка
						Док.Записать(РежимЗаписиДокумента.Проведение);
						Прервать;
					Исключение
						//#Если Клиент Тогда
						//	Предупреждение("Ожидание блокировки проведения заказа...1 сек.",1);
						//#Иначе
							ОбщегоНазначения.Задержка(2);
						//#КонецЕсли
					КонецПопытки;
				КонецЦикла;
				ОМ21_ЗаказыПоставщикам.ОМ21_УменьшитьКоличестваВПрайсе(Док);
			КонецЕсли;
		КонецЕсли;
		
		
		
	КонецЦикла;

КонецПроцедуры


Процедура ЗаписатьОтказыВРегистр(ДокЗаказ,ТаблицаОтказов)
	
	
	ДокСсылка = ДокЗаказ.Ссылка;
	Если ТаблицаОтказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтказов.ЗаполнитьЗначения(ДокСсылка,"Документ");
	
	НаборЗаписей = РегистрыСведений.ОтказыПоЗаказам.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Документ.Установить(ДокСсылка); 

	НаборЗаписей.Загрузить(ТаблицаОтказов);
	

	Для н=0 По 3 Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			
			ТекБлокировка = Новый БлокировкаДанных;
			БлокировкаРегистра = ТекБлокировка.Добавить("РегистрСведений.ОтказыПоЗаказам");
			БлокировкаРегистра.УстановитьЗначение("Документ",ДокСсылка);
			БлокировкаРегистра.Режим = РежимБлокировкиДанных.Исключительный;
			ТекБлокировка.Заблокировать();
			
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
			Прервать;
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.Задержка(2);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	ТаблицаОтказов.Очистить();	
	
	
КонецПроцедуры


Функция СоздатьТаблицуСреднихЗакупочныхЦен(ТЗКодыАП)
	
		//ТХТ = "ВЫБРАТЬ
		//	  |	Т.КодТовара
		//	  |ПОМЕСТИТЬ ВТ1
		//	  |ИЗ
		//	  |	&Таб КАК Т
		//	  |;
		//	  |
		//	  |////////////////////////////////////////////////////////////////////////////////
		//	  |ВЫБРАТЬ
		//	  |	ПоступлениеТовараТовар.Товар.Код как КодТовара,
		//	  |	СРЕДНЕЕ(ПоступлениеТовараТовар.ЦенаЗакуп) КАК ЦенаЗакуп
		//	  |ИЗ
		//	  |	Документ.ПоступлениеТовара.Товар КАК ПоступлениеТовараТовар
		//	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
		//	  |		ПО (ВТ1.КодТовара = ПоступлениеТовараТовар.Товар.Код)
		//	  |ГДЕ
		//	  |	ПоступлениеТовараТовар.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
		//	  |	И ПоступлениеТовараТовар.Ссылка.Проведен = ИСТИНА
		//	  |
		//	  |СГРУППИРОВАТЬ ПО
		//	  |	ПоступлениеТовараТовар.Товар.Код
		//	  |;
		//	  |
		//	  |////////////////////////////////////////////////////////////////////////////////
		//	  |УНИЧТОЖИТЬ ВТ1";
			  
		ТХТ = "ВЫБРАТЬ
		      |	Т.КодТовара
		      |ПОМЕСТИТЬ ВТ1
		      |ИЗ
		      |	&Таб КАК Т
		      |;
		      |
		      |////////////////////////////////////////////////////////////////////////////////
		      |ВЫБРАТЬ
		      |	ИсторияЗакупочнойЦены.Товар.Код КАК КодТовара,
		      |	СРЕДНЕЕ(ИсторияЗакупочнойЦены.Цена) КАК ЦенаЗакуп
		      |ИЗ
		      |	РегистрСведений.ИсторияЗакупочнойЦены КАК ИсторияЗакупочнойЦены
		      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
		      |		ПО (ВТ1.КодТовара = ИсторияЗакупочнойЦены.Товар.Код)
		      |
		      |СГРУППИРОВАТЬ ПО
		      |	ИсторияЗакупочнойЦены.Товар.Код";
			  
			  
	Запрос = Новый Запрос;
	//НачалоПериода = НачалоДня(ТекущаяДата()) - 60*60*24*10 ;
	//КонецПериода =  КонецДня(ТекущаяДата()) - 60*60*24 ;	
	Запрос.Текст = ТХТ;	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таб",ТЗКодыАП);
	//Запрос.УстановитьПараметр("НачДата",НачалоПериода);
	//Запрос.УстановитьПараметр("КонДата",КонецПериода);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции



Функция ПроверитьЦенуНаПревышение(Товар,Цена,КодТовара,ТЗСреднихЦен)
	
	Расхождение = "";
	
	НайденнаяСтрока = ТЗСреднихЦен.Найти(КодТовара,"КодТовара");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Расхождение;
	Иначе
		НайденнаяЦена = Окр(НайденнаяСтрока.ЦенаЗакуп,2);
	КонецЕсли;
	
	Процент = Окр(((Цена/НайденнаяЦена)-1)*100,2);
	
	Если Цена < 50  и Процент >= 20 Тогда
		Расхождение = "Превышает цену " + НайденнаяЦена + " на " + Процент + "% > 20%";
	ИначеЕсли (Цена >= 50) и (Цена < 100) и (Процент >= 8) Тогда
		Расхождение = "Превышает цену " + НайденнаяЦена + " на " + Процент + "% > 8%";
	ИначеЕсли ((Цена >= 100) и (Цена < 300)) и (Процент >= 4) Тогда
		Расхождение = "Превышает цену " + НайденнаяЦена + " на " + Процент + "% > 4%";
	ИначеЕсли ((Цена >= 300) и (Цена < 500)) и (Процент >= 3) Тогда
		Расхождение = "Превышает цену " + НайденнаяЦена + " на " + Процент + "% > 3%";		
	ИначеЕсли (Цена >= 500) и (Процент >= 2) Тогда
		Расхождение = "Превышает цену " + НайденнаяЦена + " на " + Процент + "% > 2%";
	КонецЕсли;
	
	Возврат Расхождение;	
	
КонецФункции


Процедура ЗаполнитьШапкуДокументаЗаказа(ДокЗаказ,Поставщик,РаспределяемыйДокумент)
	

	ДокЗаказ.Поставщик=Поставщик;
	ДокЗаказ.Склад = РаспределяемыйДокумент.Склад;
	ДокЗаказ.Статус=Перечисления.СтатусЗаказаПоставщику.Создан;
	ДокЗаказ.НомерЗаявкиАптеки = РаспределяемыйДокумент.НомерЗаявкиАптеки;
	ДокЗаказ.ДокОснование = РаспределяемыйДокумент.Ссылка;
	ДокЗаказ.Дата=ТекущаяДата();
		
	СтрИзм=ДокЗаказ.Изменения.Добавить();
	СтрИзм.Дата=ТекущаяДата();
	СтрИзм.КомментарийИзменения="Создан документ при распределении из " + ДокЗаказ;
	СтрИзм.Сотрудник=ПараметрыСеанса.ТекущийСотр;
	СтрИзм.ТипИзм=Перечисления.ДействияНадДокументами.ВводНового;
	
КонецПроцедуры


Процедура ЗаписатьОтказыИЗаявку_новая_версия(ДокЗаявка,ТЗОтказов)
	
   	Записан = Ложь;
	Пока Записан = Ложь Цикл
		Попытка
			ДокЗаявка.Комментарий = "";
			ДокЗаявка.Записать(РежимЗАписиДокумента.Проведение);
			Записан = Истина;
			Если ТЗОтказов.Количество() > 0 Тогда
				ТЗОтказов.Свернуть("Дата,Документ,Поставщик,Склад,Товар,Цена,Сумма,КодТовараПоставщика,НаименованиеТОвараПоставщика,НомерЗаявкиАптеки,ПричинаОтказа,Комментарий","Количество");				
			КонецЕсли;
			ЗаписатьОтказыВРегистр(ДокЗаявка,ТЗОтказов);
		Исключение
			Записан = Ложь;
		КонецПопытки; 
	КонецЦикла;
	
	
КонецПроцедуры


Процедура СоздатьДокументыЗаказа(РаспределяемыйДокумент,ТЗЗаказа,СписокДокументовЗаказа,ТЗСреднихЦен)
	
	Если ТЗЗаказа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗЗаказа.Сортировать("Поставщик");
	
	НомерЗаявки = РаспределяемыйДокумент.НомерЗаявкиАптеки;
	
	ТЗОтказовПоПревышению = Новый ТаблицаЗначений;
	ТЗОтказовПоПревышению.Колонки.Добавить("Дата");
	ТЗОтказовПоПревышению.Колонки.Добавить("Документ");
	ТЗОтказовПоПревышению.Колонки.Добавить("Склад");
	ТЗОтказовПоПревышению.Колонки.Добавить("Поставщик");
	ТЗОтказовПоПревышению.Колонки.Добавить("Товар");
	ТЗОтказовПоПревышению.Колонки.Добавить("Количество");
	ТЗОтказовПоПревышению.Колонки.Добавить("Цена");
	ТЗОтказовПоПревышению.Колонки.Добавить("Сумма");
	ТЗОтказовПоПревышению.Колонки.Добавить("КодТовараПоставщика");
	ТЗОтказовПоПревышению.Колонки.Добавить("НаименованиеТовараПоставщика");
	ТЗОтказовПоПревышению.Колонки.Добавить("НомерЗаявкиАптеки");
	ТЗОтказовПоПревышению.Колонки.Добавить("ПричинаОтказа");	
	ТЗОтказовПоПревышению.Колонки.Добавить("Комментарий");
	
	СписокДокументовЗаказа.Очистить(); //Очищаем список созданных ранее заказов
		
	
	ДокЗаказ=Документы.Заказ.СоздатьДокумент();
	ВремПоставщик = Справочники.Поставщики.ПустаяСсылка(); 
	Для каждого стр из ТЗЗаказа Цикл
		
		Поставщик=стр.Поставщик;
		КодТовара = стр.КодТовара;
		Товар = стр.Товар;
		Количество = стр.Количество;
		Цена = стр.Цена;
		Сумма = стр.Сумма;
		КодТовараПоставщика = стр.КодТовараПоставщика;
		ТоварПоставщика = стр.НаименованиеТовараПоставщика;
		СрокГодности = стр.СрокГодности;
		
		Если (ВремПоставщик <> Поставщик)  Тогда
			Если НЕ ВремПоставщик.Пустая() Тогда
				Записан = Ложь;
				Для н=0 по 3 Цикл
					Попытка
						ДокЗаказ.СуммаДок = ДокЗаказ.Товар.Итог("Сумма");
						ДокЗаказ.Записать(РежимЗАписиДокумента.Запись);
						//ЭлементыФормы.Лог.ДобавитьСтроку("- " + Док);
						СписокДокументовЗаказа.Добавить(ДокЗаказ,ДокЗаказ);   // Запоминаем документ. Потом будем сверять и выгружать
						Записан = Истина;
						ЗаписатьОтказыВРегистр(ДокЗаказ,ТЗОтказовПоПревышению);
						Прервать;
					Исключение
						Записан = Ложь;
						ОбщегоНазначения.Задержка(2);
					КонецПопытки; 
				КонецЦикла;				
				//СообщитьЛог("Создан: "+ Док.Метаданные().Представление()+" №"+Док.Номер+" от "+Док.Дата+"");
				ТЗОтказовПоПревышению.Очистить();
				ДокЗаказ=Документы.Заказ.СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьШапкуДокументаЗаказа(ДокЗаказ,Поставщик,РаспределяемыйДокумент);
			ВремПоставщик = Поставщик;
		КонецЕсли;
		
		//==================< Проверим цену на превышение и если оно есть, то выкидываем в отказы > ===========
		Расхождение = ПроверитьЦенуНаПревышение(Товар,Цена,КодТовара,ТЗСреднихЦен);
		
		Если Расхождение = "" Тогда 
			//------- Заполняем табл. часть документа		
			Стр = ДокЗаказ.Товар.Добавить();
			Стр.Товар=Товар;
			Стр.Количество=Количество;
			Стр.Цена = Цена;
			Стр.Сумма = Сумма;
			Стр.КодТовараПоставщика = КодТовараПоставщика;
			Стр.НаименованиеТовараПоставщика = ТоварПоставщика;
			Стр.НомерЗаявкиАптеки = НомерЗаявки;
			Стр.СрокГодности = СрокГодности;
		Иначе //------ Есть превышение цены, значит в отказы закидываем
			Стр = ТЗОтказовПоПревышению.Добавить();
			Стр.Дата=ТекущаяДата();
			Стр.Товар=Товар;
			Стр.Поставщик=Поставщик;
			Стр.Склад=РаспределяемыйДокумент.Склад;
			Стр.Количество=Количество;
			Стр.Цена = Цена;
			Стр.Сумма = Сумма;
			Стр.КодТовараПоставщика = КодТовараПоставщика;
			Стр.НаименованиеТовараПоставщика = ТоварПоставщика;
			Стр.НомерЗаявкиАптеки = НомерЗаявки;
			Стр.ПричинаОтказа = Перечисления.ПричинаОтказа.ПревышениеЦены;
			Стр.Комментарий = Расхождение;

		Конецесли;
	КонецЦикла;
	
	Записан = Ложь;
	Для н=0 по 3 Цикл
		Попытка
			ДокЗаказ.СуммаДок = ДокЗаказ.Товар.Итог("Сумма");
			ДокЗаказ.Записать(РежимЗАписиДокумента.Запись);	
			СписокДокументовЗаказа.Добавить(ДокЗаказ,ДокЗаказ); // Запоминаем документ. Потом будем сверять и выгружать
			Записан = Истина;
			ЗаписатьОтказыВРегистр(ДокЗаказ,ТЗОтказовПоПревышению);
			Прервать;
			//ЭлементыФормы.Лог.ДобавитьСтроку("- " + Док);
		Исключение
			Записан = Ложь;
			ОбщегоНазначения.Задержка(2);
		КонецПопытки; 
		
	КонецЦикла;				

КонецПроцедуры  //СоздатьДокументыЗаказа()


Процедура ОМ21_СоздатьЗаказыПоставщикам(ДокЗаявка,ТЗСреднихЦен = Неопределено) Экспорт
	
	
	
		ТЗЗаказа="";
		ТЗОтказов="";
		СписокДокументовЗаказа = Новый СписокЗначений;
		
		Если ТЗСреднихЦен = Неопределено Тогда
			//надо получить таблицу средних цен	  !!!!!!!!!!!!!!!!!!!!!
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ЗаявкаНаТоварТовар.Товар.Код как КодТовара
			               |ИЗ
			               |	Документ.ЗаявкаНаТовар.Товар КАК ЗаявкаНаТоварТовар
			               |ГДЕ
			               |	ЗаявкаНаТоварТовар.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка",ДокЗаявка.Ссылка);
			ТЗКодыАП = Запрос.Выполнить().Выгрузить();
			ТЗСреднихЦен = СоздатьТаблицуСреднихЗакупочныхЦен(ТЗКодыАП);
		КонецЕсли;
		
		
		
		ОМ21_РаспределитьДокументПоПоставщикам(ДокЗаявка,ТЗЗаказа,ТЗОтказов,"",Ложь);
		
		СоздатьДокументыЗаказа(ДокЗаявка,ТЗЗаказа,СписокДокументовЗаказа,ТЗСреднихЦен);
		
		ЗаписатьОтказыИЗаявку_новая_версия(ДокЗаявка,ТЗОтказов);

		ВыгрузитьДокументыПоставщику(СписокДокументовЗаказа);	
	
	
	
КонецПроцедуры



//=====================================================================================================================================

#Область НЕАКТУАЛЬНЫЕПРОЦЕДУРЫ

Функция ОМ21_ЗагрузитьПрайсПоставщика(Поставщик,ПараметрыСоединенияСВнешнимИсточником,СообщениеОбОшибке="") Экспорт
	
	КоэффПриведения =  Поставщик.КоэффициентПриведенияЦены;
	КоэффЦеныНаБазовыйПрайс = Поставщик.КоэффициентЦеныНаБазовыйПрайсПоставщика;
	
	Если Поставщик.РаботаетЧерезТорговуюПлощадку = Истина Тогда
		//ИдСессии	= ПараметрыСоединенияСВнешнимИсточником["ИдСессии"];
		Ключ		= ПараметрыСоединенияСВнешнимИсточником["КлючСессии"];
		ИННФирмы	= ПараметрыСоединенияСВнешнимИсточником["ИННФирмы"];
		Соединение	= ПараметрыСоединенияСВнешнимИсточником["Соединение"];
		
		ТХТ = "select * from users.get_last_price('"+Ключ+"', '"+ИННФирмы+"', '"+Поставщик.ИНН+"')";
		RecordSet = ОМ_ТП.ВыполнитьЗапросНаВнешнемИсточнике(Соединение,ТХТ);
		Если RecordSet = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТЗВрем = Новый ТаблицаЗначений;
		ТЗВрем.Колонки.Добавить("Код");
		ТЗВрем.Колонки.Добавить("Товар");
		ТЗВрем.Колонки.Добавить("Производитель");
		ТЗВрем.Колонки.Добавить("Количество");
		ТЗВрем.Колонки.Добавить("СрокГодности");
		ТЗВрем.Колонки.Добавить("ПартияПоставщика");
		ТЗВрем.Колонки.Добавить("Кратность");
		ТЗВрем.Колонки.Добавить("Цена");
		ТЗВрем.Колонки.Добавить("ЦенаПриведенная");
	                                                        
		Пока Не RecordSet.EOF() Цикл
			стр = ТЗВрем.Добавить();
			стр.Код				=RecordSet.Fields("code").VAlue;
			стр.Товар			=RecordSet.Fields("name").VAlue;
			стр.Производитель	=RecordSet.Fields("vendor").VAlue;
			стр.Количество		=RecordSet.Fields("qnt").VAlue;
			стр.СрокГодности	=RecordSet.Fields("date_valid").VAlue;
			стр.ПартияПоставщика=RecordSet.Fields("part").VAlue;
			стр.Кратность		=RecordSet.Fields("qnt_krat").VAlue;
			Цена = RecordSet.Fields("cena_s_nds").VAlue;
			стр.Цена			= Окр(Цена*(?(КоэффЦеныНаБазовыйПрайс=0,1,КоэффЦеныНаБазовыйПрайс)),2);
			стр.ЦенаПриведенная	= Окр(Цена*(?(КоэффПриведения=0,1,КоэффПриведения)),2);			
			RecordSet.MoveNext();
		КонецЦикла;		
		
		Если ТЗВрем.Количество() = 0 Тогда
			СообщениеОбОшибке = "В прайс-листе поставщика " + Поставщик + " отсутствуют записи.";
			Возврат Ложь;	
		КонецЕсли;
		
		ТЗВрем.Свернуть("Код,Товар,Производитель,СрокГодности,ПартияПоставщика,Кратность,Цена,ЦенаПриведенная","Количество");
		
		НаборЗаписей = РегистрыСведений.Прайсы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Поставщик.Установить(Поставщик); 
		
		Для каждого стр из ТЗВрем Цикл
			
			Запись = НаборЗаписей.Добавить(); 
			Запись.Поставщик = Поставщик;
			
			Запись.Код				= стр.Код;
			Запись.Товар			= стр.Товар;
			Запись.Производитель	= стр.Производитель;
			Запись.Количество		= стр.Количество;
			Запись.СрокГодности		= стр.СрокГодности;
			Запись.ПартияПоставщика	= стр.ПартияПоставщика;
			Запись.Кратность		= стр.Кратность;
			Запись.Цена				= стр.Цена;
			Запись.ЦенаПриведенная	= стр.ЦенаПриведенная;			

		КонецЦикла;	
		
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Прайсы");
			БлокировкаМатрицы.УстановитьЗначение("Поставщик",Поставщик);
			Блокировка.Заблокировать();	

			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		
	Иначе
		СписокПолей = Новый СписокЗначений;
		СтруктураПолей = Новый Структура;
		Выборка = Справочники.СтруктураФайлов.Выбрать(, Поставщик);
		РультатВыборкиСледующего=Выборка.Следующий();
		
		Для каждого поля из Выборка.Прайс Цикл
			СтруктураПолей.Вставить(поля.ПолеТЧ,поля.ИмяПоля);
			СписокПолей.Добавить(поля.ИмяПоля);
		КонецЦикла;
		
		ФайлЗагрузки = СокрЛП(Поставщик.ФайлПрайсЛиста);
		
		ФайлОбъект = Новый Файл(ФайлЗагрузки);
		Если НЕ ФайлОбъект.Существует() Тогда
			СообщениеОбОшибке = "Не существует файла прайса: " + ФайлЗагрузки + "  >> " + Поставщик;	
			Возврат Ложь;
		КонецЕсли;
		
		Если Выборка.ТипФайлаПрайса <> Перечисления.РасширенияФайлов.dbf Тогда
			Если Выборка.ТипФайлаПрайса = Перечисления.РасширенияФайлов.sst Тогда
				НовыйФайл = ОМ21_ПреобразоватьТекстВДБФ(Поставщик,ФайлЗагрузки);
				Если НовыйФайл = "" Тогда
					СообщениеОбОшибке = "Не удалось преобразовать прайс в DBF: " + ФайлЗагрузки + "  >> " + Поставщик;
					Возврат Ложь;
				Иначе
					ФайлЗагрузки = НовыйФайл;
				КонецЕсли;
			Иначе
				СообщениеОбОшибке = "Тип прайса не DBF: " + ФайлЗагрузки + "  >> " + Поставщик;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//Проверка на случай, когда поставщик еще файл не до конца выгрузил на сервер
		ОК = Ложь;
		Для к=0 по 5 Цикл
			Попытка
				ПереместитьФайл(ФайлЗагрузки,ФайлЗагрузки);
				ОК = Истина;
				Прервать;
			Исключение
				ОбщегоНазначения.Задержка(2);
			КонецПопытки;
		КонецЦикла;		
		
		Если ОК = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		//конец проверки на недовыгруженный файл	
		
		//Промерим на длину 8 символов
		ФайлОбъектНовый = Новый Файл(ФайлЗагрузки);
		Длина = СтрДлина(ФайлОбъектНовый.Имя);
		ИсходноеПолноеИмяФайла = ФайлОбъектНовый.ПолноеИмя;
		
		Если Длина > 12 Тогда
			Уник = Новый УникальныйИдентификатор;
			Уник = Прав(Уник,8);
			НовоеПолноеИмяФайла = ФайлОбъектНовый.Путь + "\" + Уник + "" + ФайлОбъектНовый.Расширение;
			Попытка
				КопироватьФайл(ИсходноеПолноеИмяФайла,НовоеПолноеИмяФайла);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			НовоеПолноеИмяФайла = ИсходноеПолноеИмяФайла;
		КонецЕсли;	
		
		
		
		ДБФ= Новый  XBase;
		
		Попытка
			ДБФ.ОткрытьФайл(НовоеПолноеИмяФайла,,Истина);	
		Исключение
			СообщениеОбОшибке = "Файл: " + ФайлЗагрузки + " либо уже открыт, либо поврежден! ";	
			Возврат Ложь;
		КонецПопытки;
		
		Если СокрЛП(Выборка.КодировкаПрайса) = "OEM" или ПустаяСтрока(Выборка.КодировкаПрайса) Тогда
			ДБФ.Кодировка = КодировкаXBase.OEM;
		Иначе
			ДБФ.Кодировка = КодировкаXBase.ANSI;
		КонецЕсли;
		
		//Проверим файл прайса на наличие необходимых полей по списку
		Если ОМ20_Чернов.DBF_НаличиеПолей(ДБФ,СписокПолей,1) = Ложь Тогда
			СообщениеОбОшибке = "Не прошла проверка на наличие полей в прайсе поставщика " + Поставщик;	
			Возврат Ложь;
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		
		Если ОМ20_Чернов.DBF_СкопироватьСтруктуруИДанныеВТЗ(ДБФ, ТЗ, СписокПолей,,,1) = Ложь Тогда
			СообщениеОбОшибке = "Не удалось скопировать данные в ТЗ:  " + Поставщик;	
			Возврат Ложь;	
		КонецЕсли;
		
		НашлиПоле=СписокПолей.НайтиПоЗначению(СтруктураПолей["Количество"]);
		Если НашлиПоле = Неопределено Тогда
			СообщениеОбОшибке = "Где-то потерялось поле <Количество> в настройках " + Поставщик;	
			Возврат Ложь;	
		Иначе
			СписокПолей.Удалить(НашлиПоле);
		КонецЕсли;
		
		ТЗ.Свернуть(ОМ20_Чернов.СЗ_ВСтрокуСРазделителем(СписокПолей),СтруктураПолей["Количество"]);
		
		// 20.10.2010 17:00 Чернов
		Для каждого стр из СтруктураПолей Цикл
			Если стр.Ключ = "Производитель" Тогда
				ОМ20_Чернов.ЗагрузитьНаименованияПроизводителей(ТЗ, СокрЛП(стр.Значение));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// 20.10.2010 17:00 Чернов
		
		НаборЗаписей = РегистрыСведений.Прайсы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Поставщик.Установить(Поставщик); 
		ПрошлыйГод = Год(ТекущаяДата()) - 1;
		Для каждого стрТЗ из ТЗ Цикл 
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			Запись = НаборЗаписей.Добавить(); 
			Запись.Поставщик = Поставщик;
			Для каждого стр из СтруктураПолей Цикл
				Если стр.Ключ = "Код" Тогда
					Значение = Формат(стрТЗ[стр.Значение],"ЧГ=0");
				ИначеЕсли стр.Ключ = "СрокГодности" Тогда
					Значение = ОМ20_Чернов.Стр_ПолучитьДату(стрТЗ[стр.Значение]);
					Если Год(Значение) <= ПрошлыйГод Тогда
						Значение = Дата('0001.01.01');	
					КонецЕсли;
				Иначе
					Значение = стрТЗ[стр.Значение];
				КонецЕсли;
				
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					Значение = СокрЛП(Значение);
				КонецЕсли;
				Запись[стр.Ключ] = Значение;
			КонецЦикла;
			Запись.Цена				= Окр(Запись.Цена*(?(КоэффЦеныНаБазовыйПрайс=0,1,КоэффЦеныНаБазовыйПрайс)),2);
			Запись.ЦенаПриведенная	= Окр(Запись.Цена*(?(КоэффПриведения=0,1,КоэффПриведения)),2);
			
		КонецЦикла;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			БлокировкаМатрицы = Блокировка.Добавить("РегистрСведений.Прайсы");
			БлокировкаМатрицы.УстановитьЗначение("Поставщик",Поставщик);
			БлокировкаМатрицы.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();	

			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		
		
		Попытка
			ДБФ.ЗакрытьФайл();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Длина > 12 Тогда
		Попытка
			УдалитьФайлы(НовоеПолноеИмяФайла);
		Исключение
			//Сообщить("Не удалось удалить: " + НовоеПолноеИмяФайла);
		КонецПопытки;                       
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 