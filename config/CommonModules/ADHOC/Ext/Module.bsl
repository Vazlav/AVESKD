Функция СформироватьИнвойсНаОснованииРеализацииОптом(ДокОснование = Неопределено, ДатаС = Неопределено, ДатаПо =  Неопределено, ДокРезультат = Неопределено, Интерактив = Ложь, Покупатель = Неопределено, Проводить = Ложь, МассивОшибок = Неопределено) Экспорт
	Перем ТекстОшибки;
	Если
		ТипЗнч(МассивОшибок) = "Массив"
	Тогда
		;
	ИначеЕсли
		МассивОшибок = Неопределено
	Тогда
		МассивОшибок = Новый Массив;
	Иначе
		ВызватьИсключение  "Неверные параметры при вызове процедуры СформироватьИнвойсНаОснованииРеализацииОптом: МассивОшибок должен иметь тип [массив] или иметь значение [Неопределено]!";
	КонецЕсли;
	
	Если
		(НЕ ЗначениеЗаполнено(ДокОснование))
		И
		(ЗначениеЗаполнено(ДокРезультат))
	Тогда
		ВызватьИсключение  "Неверные параметры при вызове процедуры СформироватьИнвойсНаОснованииРеализацииОптом: если документ-основание не задан, документ результат также должен быть неопределен!";
	Конецесли;
	
	Если
		//Метаданные.Документы.Инвойс.ВводитсяНаОсновании.Содержит(ТипЗнч(ДокОснование))
		Метаданные.НайтиПоТипу(ТипЗнч(ДокОснование)) = Метаданные.Документы.РеализацияОптом
		ИЛИ
		Метаданные.НайтиПоТипу(ТипЗнч(ДокОснование)) = Метаданные.Документы.УЗ_МелкооптоваяРеализация
		ИЛИ
		ДокОснование = Неопределено
	Тогда
		;
	Иначе
		ВызватьИсключение  "Неверный тип параметра при вызове процедуры СформироватьИнвойсНаОснованииРеализацииОптом: документ-основание имеет неверный тип (НЕ Метаданные.Документы.РеализацияОптом)!";
	КонецЕсли;
	
	Если
		Метаданные.НайтиПоТипу(ТипЗнч(ДокРезультат)) = Метаданные.Документы.Инвойс
		ИЛИ
		ДокРезультат = Неопределено
	Тогда
		;
	Иначе
		ВызватьИсключение  "Неверный тип параметра при вызове процедуры СформироватьИнвойсНаОснованииРеализацииОптом: документ-результат имеет неверный тип (НЕ Метаданные.Документы.Инвойс)!";
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контракты.Владелец КАК Владелец,
		|	Контракты.Фирма,
		|	КонтрактыИАптеки.Аптека,
		|	МАКСИМУМ(КонтрактыИАптеки.КодАптекиВнешн) КАК КодАптекиВнешн
		|ПОМЕСТИТЬ АптекиКодыВнешние
		|ИЗ
		|	Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контракты КАК Контракты
		|		ПО КонтрактыИАптеки.Владелец = Контракты.Ссылка
		|ГДЕ
		|	Контракты.Активность = ИСТИНА
		|	И КонтрактыИАптеки.Активность = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Контракты.Владелец,
		|	Контракты.Фирма,
		|	КонтрактыИАптеки.Аптека
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтрактыИАптеки.КодАптекиВнешн) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияОптом.Ссылка,
		|	РеализацияОптом.Дата КАК Дата,
		|	МИНИМУМ(РеализацияОптом.СуммаСкидки) КАК СкидкаМинимум,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА КодыТоваровПоставщиков.КодТовараПоставщика ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КодТовараОтсутствие,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА АптекиКодыВнешние.КодАптекиВнешн ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КодАптекиВнешнОтсутствие
		|ИЗ
		|	Документ.РеализацияОптом КАК РеализацияОптом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОптом.Товар КАК РеализацияОптомТовар
		|		ПО (РеализацияОптомТовар.Ссылка = РеализацияОптом.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|		(
		|		ВЫБРАТЬ
		|			КодыТоваровПоставщиковАкт.КодТовараПоставщика
		|			,
		|			КодыТоваровПоставщиковАкт.ТоварФирмы
		|			,
		|			КодыТоваровПоставщиковАкт.Поставщик
		|		ИЗ
		|			Справочник.СвязкиТовараСПоставщиком КАК КодыТоваровПоставщиковАкт
		|		ГДЕ
		|			(КодыТоваровПоставщиковАкт.Поставщик = &ПоставщикСвязок)
		|			И (КодыТоваровПоставщиковАкт.ПометкаУдаления = ЛОЖЬ)		
		|		ОБЪЕДИНИТЬ
		|		ВЫБРАТЬ
		|			КодыТоваровПоставщиковАрхив.КодТовараПоставщика
		|			,
		|			КодыТоваровПоставщиковАрхив.ТоварФирмы
		|			,
		|			КодыТоваровПоставщиковАрхив.Поставщик
		|		ИЗ
		|			Справочник.СвязкиТовараСПоставщиком_Архив КАК КодыТоваровПоставщиковАрхив
		|		ГДЕ
		|			(КодыТоваровПоставщиковАрхив.Поставщик = &ПоставщикСвязок)
		|		) КАК КодыТоваровПоставщиков
		|		ПО РеализацияОптомТовар.Товар = КодыТоваровПоставщиков.ТоварФирмы
		|		ЛЕВОЕ СОЕДИНЕНИЕ АптекиКодыВнешние КАК АптекиКодыВнешние
		|		ПО (АптекиКодыВнешние.Владелец = РеализацияОптом.Покупатель)
		|			И (АптекиКодыВнешние.Фирма = РеализацияОптом.Фирма)
		|			И (АптекиКодыВнешние.Аптека = РеализацияОптом.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвойс КАК Инвойс
		|		ПО РеализацияОптом.Ссылка = Инвойс.ДокументОснование
		|			И (Инвойс.ПометкаУдаления = ЛОЖЬ)
		|ЛЕВОЕ СОЕДИНЕНИЕ 		
		|	РегистрСведений.НомераЗаявокЛК КАК НомераЗаявокЛК
		|ПО
		|	НомераЗаявокЛК.Объект = РеализацияОптом.Ссылка
		|ГДЕ
		|	(РеализацияОптом.Ссылка = &Ссылка
		|			ИЛИ &Ссылка ЕСТЬ NULL )
		|	И ( ЕСТЬNULL(  НомераЗаявокЛК.НомерЗаявки, РеализацияОптом.НомерЗаявкиЛК)) <> """"
//		|	И РеализацияОптом.Ссылка.Проведен = ИСТИНА
		|	И РеализацияОптом.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (РеализацияОптом.Покупатель = &Покупатель
		|			ИЛИ &Покупатель ЕСТЬ NULL )
		|	И РеализацияОптом.Дата >= НАЧАЛОПЕРИОДА(&ДатаС, ДЕНЬ)
		|	И РеализацияОптом.Дата <= КОНЕЦПЕРИОДА(&ДатаПо, ДЕНЬ)
		|	И Инвойс.ДокументОснование ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияОптом.Ссылка,
		|	РеализацияОптом.Дата
		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Дата
//		|;
//		|////////////////////////////////////////////////////////////////////////////////
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	УЗ_МелкооптоваяРеализация.Ссылка,
		|	УЗ_МелкооптоваяРеализация.Дата КАК Дата,
		|	МИНИМУМ(1) КАК СкидкаМинимум,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА КодыТоваровПоставщиков.КодТовараПоставщика ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КодТовараОтсутствие,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА АптекиКодыВнешние.КодАптекиВнешн ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КодАптекиВнешнОтсутствие
		|ИЗ
		|	Документ.УЗ_МелкооптоваяРеализация КАК УЗ_МелкооптоваяРеализация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЗ_МелкооптоваяРеализация.Товар КАК УЗ_МелкооптоваяРеализацияТовар
		|		ПО (УЗ_МелкооптоваяРеализацияТовар.Ссылка = УЗ_МелкооптоваяРеализация.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|		(
		|		ВЫБРАТЬ
		|			КодыТоваровПоставщиковАкт.КодТовараПоставщика
		|			,
		|			КодыТоваровПоставщиковАкт.ТоварФирмы
		|			,
		|			КодыТоваровПоставщиковАкт.Поставщик
		|		ИЗ
		|			Справочник.СвязкиТовараСПоставщиком КАК КодыТоваровПоставщиковАкт
		|		ГДЕ
		|			(КодыТоваровПоставщиковАкт.Поставщик = &ПоставщикСвязок)
		|			И (КодыТоваровПоставщиковАкт.ПометкаУдаления = ЛОЖЬ)		
		|		ОБЪЕДИНИТЬ
		|		ВЫБРАТЬ
		|			КодыТоваровПоставщиковАрхив.КодТовараПоставщика
		|			,
		|			КодыТоваровПоставщиковАрхив.ТоварФирмы
		|			,
		|			КодыТоваровПоставщиковАрхив.Поставщик
		|		ИЗ
		|			Справочник.СвязкиТовараСПоставщиком_Архив КАК КодыТоваровПоставщиковАрхив
		|		ГДЕ
		|			(КодыТоваровПоставщиковАрхив.Поставщик = &ПоставщикСвязок)
		|		) КАК КодыТоваровПоставщиков
		|		ПО УЗ_МелкооптоваяРеализацияТовар.Товар = КодыТоваровПоставщиков.ТоварФирмы
		|		ЛЕВОЕ СОЕДИНЕНИЕ АптекиКодыВнешние КАК АптекиКодыВнешние
		|		ПО (АптекиКодыВнешние.Владелец = УЗ_МелкооптоваяРеализация.Поставщик)
		|			И (АптекиКодыВнешние.Фирма = УЗ_МелкооптоваяРеализация.Склад.Фирма)
		|			И (АптекиКодыВнешние.Аптека = УЗ_МелкооптоваяРеализация.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвойс КАК Инвойс
		|		ПО УЗ_МелкооптоваяРеализация.Ссылка = Инвойс.ДокументОснование
		|			И (Инвойс.ПометкаУдаления = ЛОЖЬ)
		|ЛЕВОЕ СОЕДИНЕНИЕ 		
		|	РегистрСведений.НомераЗаявокЛК КАК НомераЗаявокЛК
		|ПО
		|	НомераЗаявокЛК.Объект = УЗ_МелкооптоваяРеализация.Ссылка
		|ГДЕ
		|	(УЗ_МелкооптоваяРеализация.Ссылка = &Ссылка
		|			ИЛИ &Ссылка ЕСТЬ NULL )
		|	И ( ЕСТЬNULL(  НомераЗаявокЛК.НомерЗаявки, УЗ_МелкооптоваяРеализация.НомерЗаявкиЛК)) <> """"
		|	И УЗ_МелкооптоваяРеализация.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (УЗ_МелкооптоваяРеализация.Поставщик = &Покупатель
		|			ИЛИ &Покупатель ЕСТЬ NULL )
		|	И УЗ_МелкооптоваяРеализация.Дата >= НАЧАЛОПЕРИОДА(&ДатаС, ДЕНЬ)
		|	И УЗ_МелкооптоваяРеализация.Дата <= КОНЕЦПЕРИОДА(&ДатаПо, ДЕНЬ)
		|	И Инвойс.ДокументОснование ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	УЗ_МелкооптоваяРеализация.Ссылка,
		|	УЗ_МелкооптоваяРеализация.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

		
		
	
	Запрос.Параметры.Вставить("ДатаС",  ?(ЗначениеЗаполнено(ДатаС) , ДатаС , ДАТА(2000,01,01)));
	Запрос.Параметры.Вставить("ДатаПо", ?(ЗначениеЗаполнено(ДатаПо), ДатаПо, ДАТА(2030,12,31)));
	Запрос.УстановитьПараметр("ПоставщикСвязок", Справочники.Поставщики.НайтиПоКоду(582));	
	
	Если
		ДокОснование = Неопределено
	Тогда
		Запрос.Параметры.Вставить("Ссылка", NULL);
		Запрос.Параметры.Вставить("Покупатель", ?(Покупатель = Неопределено, NULL, Покупатель));
	Иначе
		Запрос.Параметры.Вставить("Ссылка", ДокОснование);
		Запрос.Параметры.Вставить
		(
			"Покупатель"
			, 
			?
			(
				Метаданные.НайтиПоТипу(ТипЗнч(ДокОснование)) = Метаданные.Документы.РеализацияОптом
				,
				ДокОснование.Покупатель
				,
				ДокОснование.Поставщик
			)
		);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	//МассивРезультатов = Запрос.ВыполнитьПакет();
	//Сообщить("Всего результатов: " + МассивРезультатов.Количество());
	//Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		//НачатьТранзакцию();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			#Если Клиент Тогда
				Сообщить("Обработка: " + ВыборкаДетальныеЗаписи.Ссылка);
			#КонецЕсли
			ДанныеЗаполнения_ = ВыборкаДетальныеЗаписи.Ссылка;
			ДокИнвойс = ?(ДокРезультат = Неопределено, Документы.Инвойс.СоздатьДокумент(), ДокРезультат);
			ТекстОшибки = "";
			Попытка
				Если
					//Метаданные.НайтиПоТипу(ТипЗнч(ДанныеЗаполнения)) = Метаданные.Документы.РеализацияОптом
					(ВыборкаДетальныеЗаписи.СкидкаМинимум > 0)
					И
					(ВыборкаДетальныеЗаписи.КодТовараОтсутствие > 0)
					И
					(ВыборкаДетальныеЗаписи.КодАптекиВнешнОтсутствие > 0)
				Тогда
					//ДокИнвойс = Документы.Инвойс.СоздатьДокумент();
					ДокИнвойс.Производитель = ДанныеЗаполнения_.Склад;
					ДокИнвойс.Дата = ДанныеЗаполнения_.Дата;
					ДокИнвойс.ДатаОплаты = ДанныеЗаполнения_.Дата + 90*24*60*60;
					ДокИнвойс.СтатусОплатыИнвойса = Перечисления.СтатусыОплатыИнвойса.ОжидаетОплаты;
					ДокИнвойс.ДокументОснование = ДанныеЗаполнения_.Ссылка; 
					Для каждого стр_ из ДанныеЗаполнения_.Товар Цикл
						стр = ДокИнвойс.Товар.Добавить();
						стр.Товар = стр_.Товар;
						стр.КодТовара = стр_.Товар.Код;
						стр.Количество = 
						?
						(
							Метаданные.НайтиПоТипу(ТипЗнч(ДанныеЗаполнения_)) = Метаданные.Документы.РеализацияОптом
							,
							стр_.КоличествоФакт
							,
							стр_.Количество
						);
						стр.Сумма = 
						?
						(
							Метаданные.НайтиПоТипу(ТипЗнч(ДанныеЗаполнения_)) = Метаданные.Документы.РеализацияОптом
							,
							стр_.СуммаСоСкидкой
							,
							стр_.СуммаРеализации
						);
						стр.Цена = стр.Сумма / стр.Количество;
					КонецЦикла;
					Если
						Интерактив = Истина
					Тогда
						Форма = ДокИнвойс.ПолучитьФорму(); Форма.ОткрытьМодально();
					Иначе
						Если
							ДокРезультат = Неопределено
						Тогда
							ДокИнвойс.Записать(РежимзаписиДокумента.Запись);
							Если
								Проводить
							Тогда
								ДокИнвойс.Записать(РежимзаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
				Иначе
					
					Если
						(ВыборкаДетальныеЗаписи.СкидкаМинимум = 0)
					Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС + "ОШИБКИ НУЛЕВОЙ СКИДКИ" + Символы.ПС;
						Для каждого строка_ ИЗ ДанныеЗаполнения_.Товар Цикл
							ТекстОшибки = ТекстОшибки + "В строке [" + строка_.НомерСтроки + "] документа-основания (" + ДанныеЗаполнения_ + ") СуммаСкидки равна нулю!"+Символы.ПС;
						КонецЦикла;
						//ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
					Если
						(ВыборкаДетальныеЗаписи.КодТовараОтсутствие = 0)
					Тогда
						ЗапросОшибки = Новый Запрос;
						ЗапросОшибки.Текст = "
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	РеализацияОптом.Ссылка,
						|	РеализацияОптом.Дата КАК Дата,
						|	РеализацияОптомТовар.Товар.Код КАК Код,
						|	РеализацияОптомТовар.Товар.Наименование КАК Наименование
						|ИЗ
//						|	Документ.РеализацияОптом 
						|	Документ." +
						ДанныеЗаполнения_.Ссылка.Метаданные().Имя +
						"
						|КАК РеализацияОптом
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + ДанныеЗаполнения_.Ссылка.Метаданные().Имя +".Товар КАК РеализацияОптомТовар
						|		ПО (РеализацияОптомТовар.Ссылка = РеализацияОптом.Ссылка)
						|		ЛЕВОЕ СОЕДИНЕНИЕ
						|		(
						|		ВЫБРАТЬ
						|			КодыТоваровПоставщиковАкт.КодТовараПоставщика
						|			,
						|			КодыТоваровПоставщиковАкт.ТоварФирмы
						|			,
						|			КодыТоваровПоставщиковАкт.Поставщик
						|		ИЗ
						|			Справочник.СвязкиТовараСПоставщиком КАК КодыТоваровПоставщиковАкт
						|		ГДЕ
						|			(КодыТоваровПоставщиковАкт.Поставщик = &ПоставщикСвязок)
						|			И (КодыТоваровПоставщиковАкт.ПометкаУдаления = ЛОЖЬ)		
						|		ОБЪЕДИНИТЬ
						|		ВЫБРАТЬ
						|			КодыТоваровПоставщиковАрхив.КодТовараПоставщика
						|			,
						|			КодыТоваровПоставщиковАрхив.ТоварФирмы
						|			,
						|			КодыТоваровПоставщиковАрхив.Поставщик
						|		ИЗ
						|			Справочник.СвязкиТовараСПоставщиком_Архив КАК КодыТоваровПоставщиковАрхив
						|		ГДЕ
						|			(КодыТоваровПоставщиковАрхив.Поставщик = &ПоставщикСвязок)
						|		) КАК КодыТоваровПоставщиков
						|		ПО РеализацияОптомТовар.Товар = КодыТоваровПоставщиков.ТоварФирмы
						|ГДЕ
						|	(РеализацияОптом.Ссылка = &Ссылка) И (КодыТоваровПоставщиков.КодТовараПоставщика ЕСТЬ NULL)
						|";
						
						ЗапросОшибки.Параметры.Вставить("Ссылка", ДанныеЗаполнения_.Ссылка);
						ЗапросОшибки.Параметры.Вставить("ПоставщикСвязок", Запрос.Параметры.ПоставщикСвязок);
						РезультатЗапросаОшибки = ЗапросОшибки.Выполнить();
						//ТекстОшибки = "" + Символы.ПС;
						ВыборкаОшибки = РезультатЗапросаОшибки.Выбрать();
						
						Если
							НЕ РезультатЗапросаОшибки.Пустой()
						Тогда
							ТекстОшибки = ТекстОшибки + Символы.ПС + "ОШИБКИ ПЕРЕКОДИРОВКИ В НОМЕНКЛАТУРУ ПОСТАВЩИКА" + Символы.ПС;
							Пока ВыборкаОшибки.Следующий() Цикл
								ТекстОшибки = ТекстОшибки 
												//+ "В строке [" + ВыборкаОшибки.НомерСтроки + "] "
												+ "В документе-основании [" + ДанныеЗаполнения_ + "] для товара ["+ ВыборкаОшибки.Код +"] [" + ВыборкаОшибки.Наименование + "] отсутствует перекодировка товара с поставщиком [" + Запрос.Параметры.ПоставщикСвязок.Код + "; " + Запрос.Параметры.ПоставщикСвязок + "] (Справочник.СвязкиТовараСПоставщиком)!" + Символы.ПС;
							КонецЦикла; //ВыборкаОшибки.Следующий() Цикл
						КонецЕсли; //НЕ РезультатЗапросаОшибки.Пустой()
						//ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
					Если
						(ВыборкаДетальныеЗаписи.КодАптекиВнешнОтсутствие = 0)
					Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС + "ОШИБКИ ПЕРЕКОДИРОВКИ АПТЕКИ-ОТПРАВИТЕЛЯ В КОНТРАГЕНТА ПОСТАВЩИКА" + Символы.ПС;
						ТекстОшибки = ТекстОшибки + "Ошибка! Для документа-основания (" + ДанныеЗаполнения_ + ") либо отсутствует действующий, либо не может быть определен однозначно код аптеки в системе поставщика (Справочники.КонтрактыИАптеки)!";
					КонецЕсли; //(ВыборкаДетальныеЗаписи.КодАптекиВнешнОтсутствие = 0)
					
					Если
						СтрДлина(ТекстОшибки) > 1
					Тогда
						ВызватьИсключение ТекстОшибки;
					КонецЕсли; //СтрДлина(ТекстОшибки) > 1
				КонецЕсли;
			Исключение
				
			    Инфо = ИнформацияОбОшибке();
				МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, ДокИнвойс.Метаданные(), ?(ДокИнвойс.ЭтоНовый(), ДанныеЗаполнения_.Ссылка, ДокИнвойс.Ссылка)));
				счп= 0;
				Пока
					(Инфо.Причина <> Неопределено)
					И
					(счп < 5)
				Цикл
					счп= счп + 1;
					Инфо = Инфо.Причина;
				    МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, ДокИнвойс.Метаданные(), ?(ДокИнвойс.ЭтоНовый(), ДанныеЗаполнения_.Ссылка, ДокИнвойс.Ссылка)));
				КонецЦикла;
				
			КонецПопытки;
			
		КонецЦикла;
	//КонецЦикла; //Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
	//ОтменитьТранзакцию();
	Возврат МассивОшибок;
КонецФункции


Процедура РегламентСформироватьИнвойсНаОснованииРеализацииОптом(Поставщик, ДатаС, ДатаПо, СтрокаСписокРассылки) Экспорт
	Рез = ADHOC.СформироватьИнвойсНаОснованииРеализацииОптом( ,ДатаС, ДатаПо,,Ложь,Поставщик, Истина);
	МассивРассылки = Новый Массив;
	Если
		Рез.Количество() > 0
	Тогда
	
		Пока
			(Найти(СтрокаСписокРассылки, ";") > 0 )
			И
			СтрДлина(СтрокаСписокРассылки) > 3
		Цикл
		     МассивРассылки.Добавить(Лев(СтрокаСписокРассылки, Найти(СтрокаСписокРассылки, ";")-1));
			 СтрокаСписокРассылки = Прав
			 (
			 	СтрокаСписокРассылки
				,
				СтрДлина(СтрокаСписокРассылки) - СтрДлина(МассивРассылки[МассивРассылки.Количество()-1]+1)
			 )
			 
		КонецЦикла;
		
		//МассивРассылки = СтрРазделить(СтрокаСписокРассылки, ";", Ложь);
		МПочтец = Обработки.Почтарь;
		Почтец = МПочтец.Создать();
		
		Почтец.Автоотправка = Истина;
		
		Почтец.Рассылка.Очистить();			
		Для каждого м из МассивРассылки Цикл
			Почтец.Рассылка.Добавить(м);
		КонецЦикла;
		
		Почтец.Тема = "Уведомление об ошибках процедуры генерации инвойсов по мелкооптовой реализации в рамках обработки ""Управление неликвидами.""";
		Для каждого м из Рез Цикл
			//Почтец.ТекстПисьма = Почтец.ТекстПисьма + м.ИмяСобытия + ";" + м.Уровень + ";" + м.ОбъектМетаданных + ";" + м.Данные + ";" + м.Комментарий + Символы.ПС + Символы.ПС;
			Почтец.ТекстПисьма = Почтец.ТекстПисьма + Символы.ПС + м.Данные + ";" + м.Комментарий + Символы.ПС;
		КонецЦикла;
		
		Почтец.Функция_Послать();
		
		Почтец = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
	
Функция ОповещениеОбОшибке(ИнформацияОбОшибке_, ОбъектМетаданных, Ссылка) Экспорт
	Подробности = 
			"Описание [" + Символы.ПС + Символы.ВК  + ИнформацияОбОшибке_.Описание + "];" + Символы.ПС + Символы.ВК
    		+ "ИмяМодуля=[" + ИнформацияОбОшибке_.ИмяМодуля + "];" + Символы.ПС + Символы.ВК
    		+ "НомерСтроки=[" + ИнформацияОбОшибке_.НомерСтроки + "];"
    		//+ "ИсходнаяСтрока=[" + ИнформацияОбОшибке_.ИсходнаяСтрока + "];"
			;
	#Если Клиент Тогда
	    Сообщить("Возникла ошибка! " + Подробности, СтатусСообщения.Важное);
	#КонецЕсли
	ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, Ссылка, Подробности);
	Возврат Новый Структура
	(
		"ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий"
		, 
		"Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, Ссылка, Подробности
	);
КонецФункции

Процедура ОтправитьОшибкиПочтой(МассивОшибок, Знач СтрокаСписокРассылки, ТемаПисьма, Вложения = Неопределено) Экспорт
	МассивРассылки = Новый Массив;
	Пока
		(Найти(СтрокаСписокРассылки, ";") > 0 )
		И
		СтрДлина(СтрокаСписокРассылки) > 3
	Цикл
	     МассивРассылки.Добавить(Лев(СтрокаСписокРассылки, Найти(СтрокаСписокРассылки, ";")-1));
		 СтрокаСписокРассылки = Прав
		 (
		 	СтрокаСписокРассылки
			,
			СтрДлина(СтрокаСписокРассылки) - СтрДлина(МассивРассылки[МассивРассылки.Количество()-1]+1)
		 )
	КонецЦикла;
	Если НЕ
	(
		ЗначениеЗаполнено(МассивОшибок)
		И
		ЗначениеЗаполнено(МассивРассылки)
	)
	Тогда
		Возврат;
	КонецЕсли;
	
	МПочтец = Обработки.Почтарь;
	Почтец = МПочтец.Создать();
	
	Почтец.Автоотправка = Истина;
	Почтец.Рассылка.Очистить();			
	Для каждого м из МассивРассылки Цикл
		Почтец.Рассылка.Добавить(м);
	КонецЦикла;
	
	Почтец.Тема = ТемаПисьма;
	
	Для каждого м из МассивОшибок Цикл
		Почтец.ТекстПисьма = Почтец.ТекстПисьма + Символы.ПС + Символы.ВК + м.Данные + ";" + м.Комментарий + Символы.ПС + Символы.ВК;
		//Почтец.ТекстПисьма = "This is a test message";
	КонецЦикла;
	
	Если
		НЕ (Вложения = Неопределено)
	Тогда	
		Для каждого м из Вложения Цикл
			Почтец.СписокВложений.Добавить(м);
		КонецЦикла;
	КонецЕсли;
	
	Почтец.Функция_Послать();
	Почтец = Неопределено;
КонецПроцедуры
	
Процедура ФормированиеИнвойсовПоНакладнымКатрен(Каталог, СтрокаСписокРассылки, Проводить = Ложь, МассивОшибок = Неопределено) Экспорт
Перем Док;
	Если
		ТипЗнч(МассивОшибок) = "Массив"
	Тогда
		;
	ИначеЕсли
		МассивОшибок = Неопределено
	Тогда
		МассивОшибок = Новый Массив;
	Иначе
		ВызватьИсключение  "Неверные параметры при вызове процедуры СформироватьИнвойсНаОснованииРеализацииОптом: МассивОшибок должен иметь тип [массив] или иметь значение [Неопределено]!";
	КонецЕсли;
	
	Каталог = СокрЛП(Каталог);	
	Если Прав(Каталог, 1) = "\" Или Прав(Каталог, 1) = "/" Тогда
		Каталог = Сред(Каталог, 1, СтрДлина(Каталог)-1);
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(Каталог, "*.DBF");  
	Если НайденныеФайлы.Количество() > 0 Тогда
		//НачатьТранзакцию();
		Для Каждого Файл Из НайденныеФайлы Цикл
			Попытка
				СформироватьИнвойсПоНакладнойКатрен(Файл, Проводить, Ложь, Док, МассивОшибок);
				#Если Клиент Тогда
					Сообщить("Док = " + Док);
				#КонецЕсли
			Исключение
			    Инфо = ИнформацияОбОшибке();
				МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, Неопределено, ));
				счп= 0;
				Пока
					(Инфо.Причина <> Неопределено)
					И
					(счп < 5)
				Цикл
					счп= счп + 1;
					Инфо = Инфо.Причина;
				    МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо,, ));
				КонецЦикла;
			КонецПопытки; //Для Каждого Файл Из НайденныеФайлы Цикл
		КонецЦикла;
		//ЗафиксироватьТранзакцию();
		ADHOC.ОтправитьОшибкиПочтой(МассивОшибок, СтрокаСписокРассылки, "Ошибки создания инвойсов по электронным накладным КАТРЕН - ДжиДиПи");
	Иначе
		#Если Клиент Тогда
			Сообщить("Файлы не найдены");
		#КонецЕсли
		ЗаписьЖурналаРегистрации("ФормированиеИнвойсовПоНакладнымКатрен: Файлы для обработки не найдены в папке " + Каталог, УровеньЖурналаРегистрации.Предупреждение, , , );
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьИнвойсПоНакладнойКатрен(Файл, Проводить = Ложь, Интерактив = Ложь, Док, МассивОшибок = Неопределено) Экспорт
Перем ВнешняяТранзакция;	
	Док = Неопределено;	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если
		НЕ ВнешняяТранзакция
	Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ВремФайл = КаталогВременныхФайлов() + Формат(ТекущаяДата(), "ДФ=ddHHmmss") + ".DBF";
	КопироватьФайл(Файл.ПолноеИмя, ВремФайл);
	
	Производитель = Справочники.Производители.НайтиПоКоду(5459);
	// поиск заказа производителю - основания для инвойса
	// основанием считается самый ранний заказ, который не имеет признака "ТоварОприходован",
	// и при этом по составу ассортимента полностью покрывает состав электронной накладной
	// никакого контроля по соответствиям количества, так как во-первых, предполагается отношение "один заказ - несколько инвойсов",
	// во-вторых, оказалось, практика допускает превышение количеством по накладной заказов.
	
	ТЗ_подбор = Новый ТаблицаЗначений;
	//ТЗ_подбор.Колонки.Добавить("КодПроизводителя", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	//ТЗ_подбор.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("СправочникСсылка.АССОРТИМЕНТНЫЙ_ПЛАН"));
	КЧ = Новый КвалификаторыЧисла(10,0);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТЗ_подбор.Колонки.Добавить("КодПроизводителя", ОписаниеТипов);
	ТЗ_подбор.Колонки.Добавить("КодТовараПоставщика", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	ТЗ_подбор.Колонки.Добавить("Количество_", ОписаниеТипов);
	ТЗ_подбор.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(12,4)));
	ТЗ_подбор.Колонки.Добавить("Сумма_", Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(12,4)));
	ДБФ = Новый XBase; 	
	ДБФ.ОткрытьФайл(ВремФайл);
	Для й=1 По ДБФ.КоличествоЗаписей() Цикл
		ДБФ.Перейти(й);
		//Товар = НайтиТоварПоКодуПоставщика(КодТовара);
		стр = ТЗ_подбор.Добавить();
		стр.КодПроизводителя = Производитель.Код;
		стр.КодТовараПоставщика = ДБФ.ПолучитьЗначениеПоля(35);
		Стр.Количество_	= ДБФ.ПолучитьЗначениеПоля(7); 		
		Стр.Цена			= ДБФ.ПолучитьЗначениеПоля(5);
		Стр.Сумма_		= Стр.Количество_ * Стр.Цена;
	КонецЦикла;
	ДБФ.ЗакрытьФайл();
	//ТЗ_подбор.Свернуть("КодПроизводителя, КодТовара, Товар");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_подбор.КодПроизводителя,
		|	ТЗ_подбор.КодТовараПоставщика,
		|	ТЗ_подбор.Количество_,
		|	ТЗ_подбор.Цена,
		|	ТЗ_подбор.Сумма_
		|ПОМЕСТИТЬ ВТ_подбор
		|ИЗ
		|	&ТЗ_подбор КАК ТЗ_подбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_подбор.КодПроизводителя,
		|	ВТ_подбор.КодТовараПоставщика,
		|	МИНИМУМ(СвязкиТовараСПоставщиком.ТоварФирмы.Код) КАК КодТовара
		|ПОМЕСТИТЬ ВТ_подбор_связка
		|ИЗ
		|	ВТ_подбор КАК ВТ_подбор
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
		|ПО
		|	СвязкиТовараСПоставщиком.Поставщик = &Поставщик
		|	И СвязкиТовараСПоставщиком.КодТовараПоставщика = ВТ_подбор.КодТовараПоставщика
		|	И СвязкиТовараСПоставщиком.Блокировка = ЛОЖЬ
		|СГРУППИРОВАТЬ ПО
		|	ВТ_подбор.КодПроизводителя,
		|	ВТ_подбор.КодТовараПоставщика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВТ_подбор_связка.КодТовараПоставщика) КАК ПОЗИЦИЙ_НАКЛАДНАЯ,
		|	КОЛИЧЕСТВО(ВТ_подбор_связка.КодТовара) КАК ПОЗИЦИЙ_НАКЛАДНАЯ_СВЯЗКА
		|ПОМЕСТИТЬ ВТ_ПОЗИЦИЙ_НАКЛАДНАЯ
		|ИЗ
		|	ВТ_подбор_связка КАК ВТ_подбор_связка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_подбор.*,
		|	ВТ_подбор_связка.КодТовара,
		|	АССОРТИМЕНТНЫЙ_ПЛАН.Ссылка КАК Товар,
		|	ПодборЗаказ.ЗаказДата,
		|	ПодборЗаказ.Заказ
		|ИЗ
		|	ВТ_подбор КАК ВТ_подбор
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ВТ_подбор_связка КАК ВТ_подбор_связка
		|ПО
		|	ВТ_подбор_связка.КодТовараПоставщика = ВТ_подбор.КодТовараПоставщика 
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК АССОРТИМЕНТНЫЙ_ПЛАН
		|	ПО АССОРТИМЕНТНЫЙ_ПЛАН.Код = ВТ_подбор_связка.КодТовара
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|    ВЫБРАТЬ ПЕРВЫЕ 1
		|		ПОЗИЦИЙ_НАКЛАДНАЯ,
		|		ПОЗИЦИЙ_НАКЛАДНАЯ_СВЯЗКА,
		|		КодПроизводителя, Заказ,
		|		ЗаказДата,
		|       СУММА(ВЫБОР КОГДА ПодборЗаказТовар.КоличествоОстаток > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ВСЕГО_ЗАКАЗ
		|    ИЗ
		|    	ВТ_ПОЗИЦИЙ_НАКЛАДНАЯ КАК ВТ_ПОЗИЦИЙ_НАКЛАДНАЯ
		|    ЛЕВОЕ СОЕДИНЕНИЕ
		|    (
		|            ВЫБРАТЬ
		|            	ВТ_подбор.КодПроизводителя,
		|        		ВТ_подбор.КодТовараПоставщика,
		|            	ЗаказПроизводителюОстатки.КодТовара,
		|            	ЗаказПроизводителюОстатки.Заказ,
		|            	ЕСТЬNULL(СУММА(ЗаказПроизводителюОстатки.КоличествоОстаток), 0) КАК КоличествоОстаток,
		|            	ЗаказПроизводителюОстатки.Заказ.Дата КАК ЗаказДата
		|            ИЗ
		|            	ВТ_подбор_связка КАК ВТ_подбор
		|            		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказПроизводителю.Остатки КАК ЗаказПроизводителюОстатки
		|            		ПО ВТ_подбор.КодПроизводителя = ЗаказПроизводителюОстатки.КодПроизводителя
		|            			И ВТ_подбор.КодТовара = ЗаказПроизводителюОстатки.КодТовара
		|            			И ЗаказПроизводителюОстатки.Заказ.ТоварОприходован = ЛОЖЬ
		|            СГРУППИРОВАТЬ ПО
		|            	ВТ_подбор.КодПроизводителя,
		|        		ВТ_подбор.КодТовараПоставщика,		
		|            	ЗаказПроизводителюОстатки.КодТовара,
		|            	ЗаказПроизводителюОстатки.Заказ,
		|            	ЗаказПроизводителюОстатки.Заказ.Дата
		|			ИМЕЮЩИЕ
		|				СУММА(ЗаказПроизводителюОстатки.КоличествоОстаток) > 0
		|    ) КАК ПодборЗаказТовар
		|	ПО
		|		1 = 1
		|	СГРУППИРОВАТЬ ПО
		|        ПОЗИЦИЙ_НАКЛАДНАЯ, ПОЗИЦИЙ_НАКЛАДНАЯ_СВЯЗКА, КодПроизводителя, ПодборЗаказТовар.Заказ,
		|        ПодборЗаказТовар.ЗаказДата
		|    ИМЕЮЩИЕ
		|       ПОЗИЦИЙ_НАКЛАДНАЯ -
		|       СУММА(ВЫБОР КОГДА ПодборЗаказТовар.КоличествоОстаток > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) = 0
		|	УПОРЯДОЧИТЬ ПО
		|		ЗаказДата ВОЗР,
		|		Заказ ВОЗР
		|) КАК ПодборЗаказ
		|ПО
		|    1 = 1
		|    
		|УПОРЯДОЧИТЬ ПО
		|	ПодборЗаказ.ЗаказДата ВОЗР,
		|	ПодборЗаказ.Заказ ВОЗР
		|";
	Запрос.Параметры.Вставить("ТЗ_подбор",ТЗ_подбор);
	ПоставщикСвязок = Справочники.Поставщики.НайтиПоКоду(12);
	Запрос.УстановитьПараметр("Поставщик", ПоставщикСвязок);
	
	РезультатЗапроса = Запрос.Выполнить();
	//ТЗРез = РезультатЗапроса.Выгрузить();
	//ТЗРез.ВыбратьСтроку();
	//Возврат;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если
		НЕ РезультатЗапроса.Пустой()
	Тогда
		//как только нашли заказ производителю, полностью покрывающий полноту ассортимента (именно по составу, а не по количеству!)
		//формируем документ - инвойс, и завершаем эту шарабозию.
		Док = Документы.Инвойс.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.Производитель = Производитель.Ссылка;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//Сообщить(" ВыборкаДетальныеЗаписи.Заказ = " + ВыборкаДетальныеЗаписи.Заказ + "; ВСЕГО_ПОСТАВКА = " + ВыборкаДетальныеЗаписи.ВСЕГО_ПОСТАВКА + "; ВСЕГО_ЗАКАЗ = " + ВыборкаДетальныеЗаписи.ВСЕГО_ЗАКАЗ);
			Док.ДокументОснование = ВыборкаДетальныеЗаписи.Заказ;
			НовСтр = Док.Товар.Добавить();
			НовСтр.КодТовара	= ВыборкаДетальныеЗаписи.КодТовара;
			НовСтр.Количество	= ВыборкаДетальныеЗаписи.Количество_; 		
			НовСтр.Сумма		= ВыборкаДетальныеЗаписи.Сумма_;
			НовСтр.Товар		= ВыборкаДетальныеЗаписи.Товар;
			НовСтр.ЦенаПроизводителяБезНДС			= ВыборкаДетальныеЗаписи.Цена;
		КонецЦикла; //Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Док.ДатаОплаты = ДобавитьМесяц(Док.Дата, 3);
		//Док.ДатаОприходования = Док.Дата;
		Если
			Интерактив = Истина
		Тогда
			Форма = Док.ПолучитьФорму(); Форма.ОткрытьМодально();
		Иначе
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		#Если Клиент Тогда
			Сообщить(" * Создан документ " + Док.Ссылка);
		#КонецЕсли
		ПереместитьФайл(Файл.ПолноеИмя, Файл.Путь + "\BackUp\" + Файл.Имя);
		
		Если
			НЕ ЗначениеЗаполнено(Док.ДокументОснование)
		Тогда
			//Сообщить(" * Для документа " + Док + " не найден соответствующий заказ производелю!", СтатусСообщения.ОченьВажное);
			Попытка
				ВызватьИсключение " * Для документа " + Док + " не найден соответствующий заказ производелю! Инвойс создан, но не проведен!";
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если
					ТипЗнч(МассивОшибок) = "Массив"
				Тогда
					МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, Неопределено, ));
				Иначе
					ADHOC.ОповещениеОбОшибке(Инфо, Док.Метаданные(), Док.Ссылка);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли; //ЕСЛИ НЕ ЗначениеЗаполнено(Док.ДокументОснование)
		
		Если
			НЕ ВнешняяТранзакция
		Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		Если
//			ЗначениеЗаполнено(Док)
//			И
			Проводить
		Тогда
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
			Сообщить("НЕ найден соответствующий заказ производелю");
		#КонецЕсли
	КонецЕсли; //	Если НЕ РезультатЗапроса.Пустой()

КонецПроцедуры

Процедура ПривязкаНакладныхДжиДиПиКИнвойсам(Каталог, СтрокаСписокРассылки, РежимОткатить = Ложь) Экспорт
Перем МассивОшибок;
	МассивОшибок = Новый Массив;
	// Вставить содержимое обработчика.
	Каталог = СокрЛП(Каталог);	
	Если Прав(Каталог, 1) = "\" Или Прав(Каталог, 1) = "/" Тогда
		Каталог = Сред(Каталог, 1, СтрДлина(Каталог)-1);
	КонецЕсли;
	ТекстДок = Новый ТекстовыйДокумент;
	
	
	НайденныеФайлы = НайтиФайлы(Каталог, "*.txt");  
	Если НайденныеФайлы.Количество() > 0 Тогда
		Если
			РежимОткатить
			И
			(НЕ ТранзакцияАктивна())
		Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		Для Каждого Файл Из НайденныеФайлы Цикл
			Попытка
				ТекстДок.Прочитать(Файл.ПолноеИмя,КодировкаТекста.ANSI);
				Для индекс_строка = 1 по ТекстДок.КоличествоСтрок() Цикл
					строка_связки = СтрЗаменить(ТекстДок.ПолучитьСтроку(индекс_строка), ";",Символы.ПС);
					Если СтрЧислоСтрок(строка_связки) = 3 Тогда
						ИнвойсНомер = СтрПолучитьСтроку(строка_связки, 1);
						НакладнаяНомер = СтрПолучитьСтроку(строка_связки, 2);
						НакладнаяДатаСтрока = СтрПолучитьСтроку(строка_связки, 3);
						//Сообщить("НакладнаяДатаСтрока = " + НакладнаяДатаСтрока);
						НакладнаяДата = Дата(НакладнаяДатаСтрока);
						ДокСсылка = Документы.Инвойс.НайтиПоНомеру(ИнвойсНомер);
						Если ЗначениеЗаполнено(ДокСсылка) Тогда
							Если
								НЕ ЗначениеЗаполнено(ДокСсылка.ДатаОприходования)
							Тогда
								Док = ДокСсылка.ПолучитьОбъект();
								Док.ДатаОприходования = Макс(Док.Дата, НакладнаяДата);
								Попытка
									Док.Записать(РежимЗаписиДокумента.Проведение);
								Исключение
									Док.Записать(РежимЗаписиДокумента.Запись);
								КонецПопытки;
							КонецЕсли;
							Если
								ЗначениеЗаполнено(ДокСсылка.ДокументОснование)
								И
								Метаданные.НайтиПоТипу(ТипЗнч(ДокСсылка.ДокументОснование)) = Метаданные.Документы.ЗаказПроизводителю
							Тогда
								Док = ДокСсылка.ДокументОснование.ПолучитьОбъект();
								Если
									НЕ Док.ТоварОприходован
								Тогда
									Док.ТоварОприходован = Истина;
									Док.Записать(РежимЗаписиДокумента.Запись);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли; //Если СтрЧислоСтрок(МногострочнаяСтрока) = 3 Тогда
					КонецЕсли; //Если СтрЧислоСтрок(МногострочнаяСтрока) = 3 Тогда
				КонецЦикла; //Для индекс_строка = 1 по ТекстДок.КоличествоСтрок() Цикл
				Если
					НЕ РежимОткатить
				Тогда
					ПереместитьФайл(Файл.ПолноеИмя, Файл.Путь + "done\" + Файл.Имя);
				КонецЕсли; //Если НЕ РежимОткатить
			Исключение
			    Инфо = ИнформацияОбОшибке();
				МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, , ));
				счп= 0;
				Пока
					(Инфо.Причина <> Неопределено)
					И
					(счп < 5)
				Цикл
					счп= счп + 1;
					Инфо = Инфо.Причина;
				    МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо,, ));
				КонецЦикла;
			КонецПопытки;
		КонецЦикла; //Для Каждого Файл Из НайденныеФайлы Цикл
		
		Если
			РежимОткатить
		Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ADHOC.ОтправитьОшибкиПочтой(МассивОшибок, СтрокаСписокРассылки, "Привязка накладных ИС Ориола к инвойсам: ошибки!");
	Иначе
		#Если Клиент Тогда
			Сообщить("Файлы не найдены");
		#КонецЕсли
	КонецЕсли;//Если НайденныеФайлы.Количество() > 0 Тогда
	
	//зачистка истории
	НайденныеФайлы = НайтиФайлы(Каталог + "\done", "*.txt");
	Для Каждого Файл Из НайденныеФайлы Цикл
		//Сообщить(Файл.ПолноеИмя);
		Если
			Файл.ПолучитьВремяИзменения() < (ТекущаяДата() - (15 * 24 * 3600)) 
		Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла; //Для Каждого Файл Из НайденныеФайлы Цикл
	
КонецПроцедуры	

Процедура КонтрольНаличияСвязокВСрочныхИнвойсах(СтрокаСписокРассылки, разница_заказ_инвойс_часов = 0, глубина_ретроспективы = 30) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Связки.ТоварФирмы КАК ТоварФирмы
		|ПОМЕСТИТЬ
		|	КодТовараПоставщика
		|ИЗ
		|	Справочник.СвязкиТовараСПоставщиком КАК Связки
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Поставщики КАК Поставщики
		|ПО
		|	Поставщики.Код = 3055
		|	И
		|	(
		|		Связки.Поставщик = Поставщики.Ссылка
		|		ИЛИ
		|		Связки.Поставщик = Поставщики.ПоставщикСвязок
		|	)
		|ГДЕ
		|	Связки.Блокировка = ЛОЖЬ
		|СГРУППИРОВАТЬ ПО
		|	Связки.ТоварФирмы
		|;

		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//		|	Подзапрос01.*
		|	Номенклатура.Код КАК Код_товара
		|	,
		|	Номенклатура.Наименование КАК Наименование_товара
		|	,
		|	Номенклатура.Производитель КАК Производитель
		|	,
		|	Номенклатура.Страна КАК Страна
		|	,
		|	Номенклатура.ЖНВЛС КАК ЖНВЛС
		|	,
		|	Номенклатура.СтавкаНДС КАК Ставка_НДС
		|	,
		|	ЗаказПроизводителю.Номер КАК Номер_Заказа
		|	,
		|	ЗаказПроизводителю.Дата КАК Дата_Заказа
		|ИЗ
		|(
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказПроизводителю.Ссылка КАК ЗаказПроизводителюСсылка,
		|		Инвойс.Ссылка КАК ИнвойсСсылка,
		|		ИнвойсТовар.Товар КАК Товар,
		|		КодТовараПоставщика.ТоварФирмы КАК СвязкаТоварФирмы,
		|		МИНИМУМ(ЗаказПроизводителюИзменения.ТипИзм) КАК ЗаказПроизводителю_ТипИзм,
		|		МИНИМУМ(ЗаказПроизводителюИзменения.Дата) КАК ЗаказПроизводителю_Дата,
		|		МИНИМУМ(ИнвойсИзменения.ТипИзм) КАК ИнвойсИзменения_ТипИзм,
		|		МИНИМУМ(ИнвойсИзменения.Дата) КАК ИнвойсИзменения_Дата,
		|		РАЗНОСТЬДАТ(МИНИМУМ(ЗаказПроизводителюИзменения.Дата), МИНИМУМ(ИнвойсИзменения.Дата), ЧАС) КАК Дельта
		|	ИЗ
		|		Документ.ЗаказПроизводителю КАК ЗаказПроизводителю
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Инвойс КАК Инвойс
		|			ПО (Инвойс.ДокументОснование = ЗаказПроизводителю.Ссылка)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПроизводителю.Изменения КАК ЗаказПроизводителюИзменения
		|			ПО (ЗаказПроизводителюИзменения.Ссылка = ЗаказПроизводителю.Ссылка)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Инвойс.Изменения КАК ИнвойсИзменения
		|			ПО (ИнвойсИзменения.Ссылка = Инвойс.Ссылка)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Инвойс.Товар КАК ИнвойсТовар
		|			ПО (ИнвойсТовар.Ссылка = Инвойс.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				КодТовараПоставщика КАК КодТовараПоставщика
		|			ПО
		|				КодТовараПоставщика.ТоварФирмы = ИнвойсТовар.Товар 
		|	ГДЕ
		|		Инвойс.ПометкаУдаления = Ложь
		|		И
		|		РАЗНОСТЬДАТ(Инвойс.Дата, &ТекДата , ДЕНЬ) < &глубина_ретроспективы
		|		И		
		|		КодТовараПоставщика.ТоварФирмы ЕСТЬ NULL
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПроизводителю.Ссылка,
		|		Инвойс.Ссылка,
		|		ИнвойсТовар.Товар,
		|		КодТовараПоставщика.ТоварФирмы
		|	ИМЕЮЩИЕ
		|		РАЗНОСТЬДАТ(МИНИМУМ(ЗаказПроизводителюИзменения.Дата), МИНИМУМ(ИнвойсИзменения.Дата), ЧАС) < &разница_заказ_инвойс_часов
		|) КАК Подзапрос01
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.АССОРТИМЕНТНЫЙ_ПЛАН КАК Номенклатура
		|ПО
		|	Номенклатура.Ссылка = Подзапрос01.Товар
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.ЗаказПроизводителю КАК ЗаказПроизводителю
		|ПО
		|	ЗаказПроизводителю.Ссылка = Подзапрос01.ЗаказПроизводителюСсылка
		|УПОРЯДОЧИТЬ ПО
		|	Код_товара,
		|	Номер_Заказа
		|";
		
	Запрос.УстановитьПараметр("разница_заказ_инвойс_часов", ?(разница_заказ_инвойс_часов = 0, 8, разница_заказ_инвойс_часов));
	Запрос.УстановитьПараметр("глубина_ретроспективы", глубина_ретроспективы);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если
		НЕ РезультатЗапроса.Пустой()
	Тогда
		ЗаписьЖурналаРегистрации("КонтрольНаличияСвязокВСрочныхИнвойсах" ,УровеньЖурналаРегистрации .Предупреждение,,,"найдены позиции без связок",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//КонецЦикла;
		
		ПО_ = Новый ПостроительОтчета;
		ПО_.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапроса);
		ПО_.ВыводитьЗаголовокОтчета = Ложь;
		ПО_.ВыводитьОбщиеИтоги = Ложь;
		ПО_.ВыводитьПодвалОтчета = Ложь;
		ПО_.ВыводитьПодвалТаблицы = Ложь;
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.ИтогиСнизу = Ложь;
		ТабДок.ИтогиСправа = Ложь;
		ТабДок.ФиксацияСлева = 0;
		ТабДок.ФиксацияСверху = 0;
		
		ПО_.Вывести(ТабДок);
		
		//ТабДок.показать();
		ТабДок.Записать(КаталогВременныхФайлов() + "\реестр_товаров.XLSX", ТипФайлаТабличногоДокумента.XLSX);
		
		МассивОшибок = Новый Массив;
		МассивОшибок.Добавить
		(
			Новый Структура
			(
				"ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий"
				, "Проверка наличия связок для срочных заказов производителю."
				, УровеньЖурналаРегистрации.Предупреждение
				, Неопределено, Неопределено
				, "На текущий момент имеются позиции товара, по которым в 1С созданы срочные заказы товара производителям, " + Символы.ПС
				+ " товар уже поступил на склад, создаются инвойсы, но отсутствует перекодировка товара с поставщиком GDP." + Символы.ПС
				+ " Необходимо проверить в номенклатуре ПО [Зеленая Ориола] наличие соответствующих позиций товара." + Символы.ПС
				+ " если таких позиций в номенклатуре нет, то необходимо срочно добавить в номенклатуру новые позиции. (см. таблицу товара во вложении)." + Символы.ПС
				+ " После осуществления привязок необходимо переслать это перечень товара с кодами налоговой ставки сотрудникам отдела " + Символы.ПС
				+ " ассортиментного планирования, осуществляющим дальнейшие связки в 1С с пометкой [Срочно!] " + Символы.ПС
			)
		);
		
		Вложения = Новый Массив;
		Вложения.Добавить(КаталогВременныхФайлов() + "реестр_товаров.XLSX");
		ADHOC.ОтправитьОшибкиПочтой(МассивОшибок, СтрокаСписокРассылки, "Отсутствие перекодировок товара по срочным заказам производителям", Вложения);
		ЗаписьЖурналаРегистрации("КонтрольНаличияСвязокВСрочныхИнвойсах" ,УровеньЖурналаРегистрации .Предупреждение,,,"уведомление отправлено",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;
КонецПроцедуры

Процедура DBF_в_заказ_производителю(Каталог_, Производитель_, Поставщик_, РежимОткатить_, РежимПросмотрДокумента_ = ложь, СтрокаСписокРассылки_ = "") Экспорт
	
	КаталогНаДиске = Новый Файл(Каталог_);
	Если НЕ КаталогНаДиске.Существует() Тогда
        ВызватьИсключение "Указанный каталог [" + Каталог_ + "] не существует! Укажите правильный путь к файлам!";
    КонецЕсли;

	//ТаблицаПолей = Новый ТаблицаЗначений;
	ЗаписьЖурналаРегистрации("DBF_в_заказ_производителю" ,УровеньЖурналаРегистрации .Предупреждение,,,"начало обработки " + Каталог_,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	//нюансы линукс - поиск файлов в линукс по умолчанию чувствителен к регистру, штатная функци поиска 1С отработает, соответственно, также
	//на вин - не чувствителен. Но в случае линукса поступать в обработку могут файлы в различных регистрах.
	ИменаФайлов = Новый Соответствие;
	
	НайденныеФайлы = НайтиФайлы(Каталог_, "*.dbf");
	Для каждого файл ИЗ НайденныеФайлы Цикл
		Если
			Лев(файл.Имя,1) = "#"
		Тогда
			;
		Иначе
			ИменаФайлов.Вставить(файл.ПолноеИмя, файл);
		КонецЕсли;
	КонецЦикла;
	
	НайденныеФайлы = НайтиФайлы(Каталог_, "*.DBF");
	
	Для каждого файл ИЗ НайденныеФайлы Цикл
		Если
			Лев(файл.Имя,1) = "#"
		Тогда
			;
		Иначе
			ИменаФайлов.Вставить(файл.ПолноеИмя, файл);
		КонецЕсли;
	КонецЦикла;
	
	НайденныеФайлы.Очистить();
	Для каждого файл ИЗ ИменаФайлов Цикл
		НайденныеФайлы.Добавить(файл.Значение);
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Найдено файлов для обработки:" + НайденныеФайлы.Количество());
	#КонецЕсли
	Если НайденныеФайлы.Количество() > 0 Тогда
		ЗаписьЖурналаРегистрации("DBF_в_заказ_производителю" ,УровеньЖурналаРегистрации .Предупреждение,,,"найдены файлы для обработки!" + НайденныеФайлы.Количество(), РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		// получение связок кодов товаров для целевой сисетмы - ДжиДиПи 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
			|	СвязкиТовараСПоставщиком.ТоварФирмыКод,
			|	ПрайсЛисты.Код КАК ПрайсЛистКод,
			|	СвязкиТовараСПоставщиком.КодТовараПоставщика
			|ИЗ
			|	Справочник.Поставщики КАК Поставщики
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			| 		(
			|		ВЫБРАТЬ 
			|			СвязкиТовараСПоставщиком.Поставщик,
			|			СвязкиТовараСПоставщиком.ТоварФирмы,
			|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
			|			СвязкиТовараСПоставщиком.КодТовараПоставщика,
			|			СвязкиТовараСПоставщиком.ПометкаУдаления
			|		ИЗ
			|			Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
			|		ОБЪЕДИНИТЬ
			|		ВЫБРАТЬ 
			|			СвязкиТовараСПоставщиком.Поставщик,
			|			СвязкиТовараСПоставщиком.ТоварФирмы,
			|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
			|			СвязкиТовараСПоставщиком.КодТовараПоставщика,
			|			СвязкиТовараСПоставщиком.ПометкаУдаления
			|		ИЗ
			|			Справочник.СвязкиТовараСПоставщиком_Архив КАК СвязкиТовараСПоставщиком
			|		ГДЕ
			|			СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ
			|		) КАК СвязкиТовараСПоставщиком
			|		ПО (СвязкиТовараСПоставщиком.Поставщик В (Поставщики.Ссылка, Поставщики.ПоставщикСвязок.Ссылка))
			|			И (СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК Каталог
			|		ПО (Каталог.КодПоставщика = Поставщики.Код)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
			|		ПО (Каталог.КодПрайсЛиста = ПрайсЛисты.КодПрайсЛиста)
			|			И (СвязкиТовараСПоставщиком.КодТовараПоставщика = ПрайсЛисты.Код)
			|ГДЕ
			|	Поставщики.Ссылка = &ПараметрПоставщик
//			|	И
//			|	НЕ (СвязкиТовараСПоставщиком.КодТовараПоставщика ПОДОБНО ""%[^0-9]%"")
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	NULL,
			|	"""",
			|	&ПустаяСтрокаМаксДлины,
			|	&ПустаяСтрокаМаксДлины
			//|УПОРЯДОЧИТЬ ПО СвязкиТовараСПоставщиком.ТоварФирмы.Код
			|";
		ПустаяСтрокаМаксДлины = "";
		Для сч = 1 По 50 Цикл
			ПустаяСтрокаМаксДлины = ПустаяСтрокаМаксДлины + " ";
		КонецЦикла;
		Запрос.Параметры.Вставить("ПустаяСтрокаМаксДлины", ПустаяСтрокаМаксДлины);
		Запрос.УстановитьПараметр("ПараметрПоставщик", Поставщик_); 
		
		РезультатЗапроса = Запрос.Выполнить();
		ТЗ_связки_кодов = РезультатЗапроса.Выгрузить();
		ТЗ_связки_кодов.Сортировать("КодТовараПоставщика ВОЗР, ПрайсЛистКод УБЫВ, ТоварФирмыКод УБЫВ");
		
		//ТЗ_связки_кодов.ВыбратьСтроку("связки_кодов");
		НастройкаОбмена = Неопределено;
		НастройкаОбменаВыборка = Справочники.НастройкиОбмена.Выбрать(,Поставщик_,,);
		
		Пока НастройкаОбменаВыборка.Следующий() Цикл
			Если
				НастройкаОбменаВыборка.Активность
			Тогда
				НастройкаОбмена = НастройкаОбменаВыборка.Ссылка;
				//НастройкаОбмена.ПолучитьФорму().ОткрытьМодально();
				
				МЗ = РегистрыСведений.НастройкиФорматаОбмена.СоздатьМенеджерЗаписи();
				МЗ.НастройкаОбмена = НастройкаОбмена;
				МЗ.УзелОбмена = "Накладная";
				МЗ.Прочитать();
				МЗРесурсы = Метаданные.РегистрыСведений.НастройкиФорматаОбмена.Ресурсы;
				Если МЗ.Выбран() Тогда
					ТаблицаПолей = МЗ.ТаблицаПолей.Получить();
					//ТаблицаПолей.ВыбратьСтроку();
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Файл Из НайденныеФайлы Цикл
		
			#Если Клиент Тогда
				Сообщить(">> Обработка файла:" + Файл.ПолноеИмя);
			#КонецЕсли
			DBF = Новый xBase();
			DBF.Кодировка = КодировкаXBase.OEM;
			//КопироватьФайл(Файл.ПолноеИмя, Файл.Путь + Лев(Файл.Имя, 8) + ".db#"); //Файл.Расширение);
			//DBF.ОткрытьФайл(Файл.Путь + Лев(Файл.Имя, 8) + ".db#",,истина);
			DBF.ОткрытьФайл(Файл.ПолноеИмя,,истина);
			
			
			Попытка
				ФайлПеремещен = 0;
				Если
					НастройкаОбмена = Неопределено
				Тогда
					ВызватьИсключение "Не найдена активная настройка формата обмена накладных для указанного поставщика [" + Поставщик_.Код + "/" + Поставщик_.Наименование + "]! " + Символы.ПС +" Обработка файла " + Файл.ПолноеИмя + " невозможна!";
				КонецЕсли;
				
				НачатьТранзакцию();
				Док = Документы.ЗаказПроизводителю.СоздатьДокумент();
				Док.Производитель = Производитель_;
				DBF.Перейти(1);
				Док.Дата = DBF.ПолучитьЗначениеПоля("DATEDOC");
				
				Изменения = Док.Изменения.Добавить();
				Изменения.Дата = ТекущаяДата();
				Изменения.КомментарийИзменения = "Создание нового заказа на основании импорта файла электронной накладной(dbf)" + Файл.Имя;
				Изменения.Сотрудник = ПараметрыСеанса.ТекущийСотр;
				Изменения.ТипИзм = Перечисления.ДействияНадДокументами.ВводНового;
				
				СтрокаОшибок = "";
				
				Для сч = 1 ПО DBF.КоличествоЗаписей() Цикл
					DBF.Перейти(сч);
					
					НоваяСтрока = Док.Товар.Добавить();
					//определить товар:
					ЕСЛИ
						ТЗ_связки_кодов.Найти(СокрЛП(DBF.ПолучитьЗначениеПоля(ТаблицаПолей.Найти("Код", "ИмяПоляБД").ИмяПоляВФайле)), "КодТовараПоставщика") <> Неопределено
					Тогда	
						НоваяСтрока.КодТовара	= ТЗ_связки_кодов.Найти(СокрЛП(DBF.ПолучитьЗначениеПоля(ТаблицаПолей.Найти("Код", "ИмяПоляБД").ИмяПоляВФайле)), "КодТовараПоставщика").ТоварФирмы.Код;
						НоваяСтрока.Товар		= Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(НоваяСтрока.КодТовара);
					Иначе
						СтрокаОшибок = СтрокаОшибок + "Поставщик [" + Поставщик_.Код + "/" + Поставщик_.Наименование + "]! " + " Обработка файла " + Файл.ПолноеИмя + Символы.ПС + ": Не задано соответствие кода номенклатуры поставщика собственному коду, для товара ["+ СокрЛП(DBF.ПолучитьЗначениеПоля(ТаблицаПолей.Найти("Наименование", "ИмяПоляБД").ИмяПоляВФайле)) +"], код поставщика [" + СокрЛП(DBF.ПолучитьЗначениеПоля(ТаблицаПолей.Найти("Код", "ИмяПоляБД").ИмяПоляВФайле)) + "]" + Символы.ПС + Символы.ВК;
					КонецЕсли;
					НоваяСтрока.Количество	= DBF.ПолучитьЗначениеПоля(ТаблицаПолей.Найти("Количество", "ИмяПоляБД").ИмяПоляВФайле);
					//НоваяСтрока.КоличествоВКоробе = стр.КоличествоВКоробе;
					НоваяСтрока.Цена		= DBF.ПолучитьЗначениеПоля(ТаблицаПолей.Найти("ЦенаЗакуп", "ИмяПоляБД").ИмяПоляВФайле);
					НоваяСтрока.Сумма		= НоваяСтрока.Цена * НоваяСтрока.Количество;
					//НоваяСтрока.ЛучшаяЦенаПоставщика = стр.МинЦенаАВЕ;
				КонецЦикла;	
				Если
					СтрДлина(СтрокаОшибок) > 0
				Тогда
					ВызватьИсключение СтрокаОшибок
				КонецЕСли;
				
				сч = 0;
				Док.Записать(РежимЗаписиДокумента.Запись);
				#Если Клиент Тогда
					Сообщить("Создан документ: " + Док.Ссылка);
				#КонецЕсли
				DBF.ЗакрытьФайл();
				
				Если
					РежимПросмотрДокумента_ = Истина
				Тогда
					Док.ПолучитьФорму().Открыть();
				КонецЕсли;
				
				Если
					РежимОткатить_ = истина
				Тогда
					 ОтменитьТранзакцию();
				 Иначе
					ПереместитьФайл(Файл.ПолноеИмя, Файл.Путь + "#" + Файл.Имя);
					ФайлПеремещен = 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				//ПереместитьФайл(Файл.ПолноеИмя, Файл.Путь + "#" + Файл.Имя);
			Исключение
				Если
					ФайлПеремещен = 1
				Тогда
					//транзакция не была зафиксирована по какой-либо причине, однако файл был помечен как обработанный.
					//нужно вернуть файл в обработку.
					ПереместитьФайл(Файл.Путь + "#" + Файл.Имя, Файл.ПолноеИмя);
				Иначе
					DBF.ЗакрытьФайл();
				КонецЕсли;	
				//Инфо = ИнформацияОбОшибке();
				//Пока Инфо <> Неопределено Цикл
				//	Сообщить(" ОШИБКА! При обработке накладной [" + Файл.Имя + "]" + ?(сч = 0, "", " строка  [" + сч + "]") + " : " + Инфо.Описание + "; обработка накладной прервана!", СтатусСообщения.ОченьВажное);
				//	Инфо = Инфо.Причина;
				//КонецЦикла;
				МассивОшибок = Новый Массив;
				
			    Инфо = ИнформацияОбОшибке();
				МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, Неопределено, Неопределено));
				счп= 0;
				Пока
					(Инфо.Причина <> Неопределено)
					И
					(счп < 5)
				Цикл
					счп= счп + 1;
					Инфо = Инфо.Причина;
				    МассивОшибок.Добавить(ADHOC.ОповещениеОбОшибке(Инфо, Неопределено, Неопределено));
				КонецЦикла;
				ADHOC.ОтправитьОшибкиПочтой(МассивОшибок, СтрокаСписокРассылки_, "Ошибки создания заказов производителям по электронным накладным");
				
			КонецПопытки;
			
		КонецЦикла;	//Для Каждого Файл Из НайденныеФайлы Цикл
	КонецЕсли; //Если НайденныеФайлы.Количество() > 0 Тогда

КонецПроцедуры


Процедура ВыгрузитьПрайсПоНеоприходованнымИнвойсам(ИмяФайлаВыгрузки, Давность = 15, ГруппироватьПоТоварномуКоду = Ложь) Экспорт
	
//	Выгрузка содержимого проведенных инвойсов с открытой датой оприходования в формате прайс-листа.
//  Коды товаров берутся по кодификактору А.В.Е
//  Проведение инвойса означает, что он ГОТОВ К ВЫГРУЗКЕ в ИС Ориола.
//	Признаком того, что поступление товара в ДжиДиПи фактически состоялось, является непустое значение
//  реквизита "Дата оприходования". Хотя данный реквизит доступен для изменения пользователем,
//  в текущей практике он регулярно заполняется специальной процедурой ADHOC.ПривязкаНакладныхДжиДиПиКИнвойсам, 
//  которая получает из ИС Ориола данные об инвойсах, которые были успешно импортированы в ИС Ориола 
//  и на основании которых были созданы поступления товара; дата оприходования устанавливается равной дате учета поступления 
//  товара в ИС Ориола. 
//  Параметр [Давность] - ограничивает ретроспективную глубину обрабатываемых инвойсов, так как достаточно много
//  инвойсов за пределами разумной давности не имеют даты оприходования, [Давность] позоляет отсечь очевидно неактуальные
//  и "прокисшие" инвойсы.
//  параметр [ГруппироватьПоТоварномуКоду] - выгружать прайс либо по принципу строка инвойса - строка прайса,
//  либо с группировкой по коду товара.
//
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
//	Поле	Тип	Длина	Точность	Описание
//1	CODEPST	CHARACTER	36	0	Код товара или артикул (в кодировке поставщика)
//2	NAME	CHARACTER	200	0	Наименование товара
//3	CNTR	CHARACTER	100	0	Страна (наименование страны)
//4	FIRM	CHARACTER	150	0	Фирма производитель (наименование фирмы)
//5	QNTPACK	NUMERIC	8	0	Количество в упаковке
//6	EAN13	CHARACTER	13	0	Заводской бар-код
//7	GDATE	DATE	8	0	Срок годности (если есть)
//8	QNT	NUMERIC	10	2	Количество (если нет, то любое число; например, "10000")
//9	PRICE	NUMERIC	10	2	Цена, руб./уп.
//10	RATEPACK	NUMERIC	10	0	Кратность заказываемых упаковок
	
	
	ФайлДБФ.Поля.Добавить("CODEPST", "S", 36);
	ФайлДБФ.Поля.Добавить("NAME", "S", 200);
	ФайлДБФ.Поля.Добавить("CNTR", "S", 100);
	ФайлДБФ.Поля.Добавить("FIRM", "S", 150);
	ФайлДБФ.Поля.Добавить("QNTPACK", "N", 8, 0);
	ФайлДБФ.Поля.Добавить("EAN13", "S", 13);
	ФайлДБФ.Поля.Добавить("GDATE", "D");
	ФайлДБФ.Поля.Добавить("QNT", "N", 10, 0);
	ФайлДБФ.Поля.Добавить("PRICE", "N", 10, 2);
	ФайлДБФ.Поля.Добавить("RATEPACK", "N", 10, 0);
	
	ФайлДБФ.СоздатьФайл(ИмяФайлаВыгрузки); 


	Запрос = Новый Запрос;
	Запрос.Текст =
	?(
		ГруппироватьПоТоварномуКоду
		,
		"ВЫБРАТЬ
		//|	Инвойс.Ссылка КАК Ссылка,
		//|	Инвойс.Номер КАК Номер,
		//|	Инвойс.Дата КАК Дата,
		|	ИнвойсТовар.Товар КАК Товар,
		|	СУММА(ИнвойсТовар.Количество) КАК Количество,
		|	МАКСИМУМ(ИнвойсТовар.ЦенаОтпускнаяСНДС) КАК Цена
		//|	ИнвойсТовар.Сумма КАК Сумма,
		//|	Инвойс.ДатаОприходования,
		//|	Инвойс.ДокументОснование
		|ИЗ
		|	Документ.Инвойс.Товар КАК ИнвойсТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвойс КАК Инвойс
		|		ПО ИнвойсТовар.Ссылка = Инвойс.Ссылка
		|ГДЕ
		|	Инвойс.ДатаОприходования = ДАТАВРЕМЯ(1, 1, 1)
		|	И РАЗНОСТЬДАТ(Инвойс.Дата, &ТекДата, ДЕНЬ) < &Давность
		|	И Инвойс.Проведен = ИСТИНА
		|СГРУППИРОВАТЬ ПО
		|	ИнвойсТовар.Товар
		|
		|"
		,
		"ВЫБРАТЬ
		|	Инвойс.Ссылка КАК Ссылка,
		|	Инвойс.Номер КАК Номер,
		|	Инвойс.Дата КАК Дата,
		|	ИнвойсТовар.Товар КАК Товар,
		|	ИнвойсТовар.Количество КАК Количество,
		|	ИнвойсТовар.ЦенаОтпускнаяСНДС КАК Цена,
		|	ИнвойсТовар.СуммаОтпускнаяСНДС КАК Сумма,
		|	Инвойс.ДатаОприходования,
		|	Инвойс.ДокументОснование
		|ИЗ
		|	Документ.Инвойс.Товар КАК ИнвойсТовар
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвойс КАК Инвойс
		|		ПО ИнвойсТовар.Ссылка = Инвойс.Ссылка
		|ГДЕ
		|	Инвойс.ДатаОприходования = ДАТАВРЕМЯ(1, 1, 1)
		|	И РАЗНОСТЬДАТ(Инвойс.Дата, &ТекДата, ДЕНЬ) < &Давность
		|	И Инвойс.Проведен = ИСТИНА
		|"
	);		
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Давность", Давность);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФайлДБФ.Добавить();
		ФайлДБФ.CODEPST = Формат(ВыборкаДетальныеЗаписи.Товар.Код, "ЧДЦ=; ЧГ=0");
		ФайлДБФ.NAME = ВыборкаДетальныеЗаписи.Товар.Наименование;
		ФайлДБФ.CNTR = ВыборкаДетальныеЗаписи.Товар.Страна.Наименование;
		ФайлДБФ.FIRM = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Товар.Производитель), ВыборкаДетальныеЗаписи.Товар.Производитель.Наименование, ?(ГруппироватьПоТоварномуКоду, "", ВыборкаДетальныеЗаписи.Ссылка.Производитель.Наименование));
		ФайлДБФ.FIRM = ВыборкаДетальныеЗаписи.Товар.Производитель;
		ФайлДБФ.PRICE = ВыборкаДетальныеЗаписи.Цена;
		ФайлДБФ.QNT = ВыборкаДетальныеЗаписи.Количество;
		ФайлДБФ.Записать(); 

	КонецЦикла;
	ФайлДБФ.ЗакрытьФайл();
	
КонецПроцедуры

Функция экспортНакладнойКроссДокинг_Старая(ДокСсылка, КодПоставщикаВоВнешнейСистеме) Экспорт
	
Перем Начало, Окончание;

	УЗ_ПоступлениеТовара_ = Документы.УЗ_ПоступлениеТовара.ПустаяСсылка();
	Если
		ТипЗнч(УЗ_ПоступлениеТовара_) <> ТипЗнч(ДокСсылка)
	Тогда
		ВызватьИсключение "Допускается обработка только ссылки на документ [" + УЗ_ПоступлениеТовара_.Метаданные().Имя + "]";
	КонецЕсли;
	
	Если
		ДокСсылка.Поставщик.Код <> 3055
	Тогда
		ВызватьИсключение "Допускается обработка только документов от поставщика с кодом 3055!";
	КонецЕсли;
	
	//КодПоставщикаВоВнешнейСистеме = 8746;
	ОтсрочкаОплатыДней = ДокСсылка.ОтсрочкаПлатежа;

	ТекстДок = Новый ТекстовыйДокумент;

	МассивЗначений = Новый Массив;
	ТЗ_результат = Новый ТаблицаЗначений;
	ТЗ_ошибки_экспорта = Новый ТаблицаЗначений;
	
	СтруктРезультат = Новый Структура;
	СтруктРезультат.Вставить("Результат",ТЗ_результат);
	СтруктРезультат.Вставить("Ошибки",ТЗ_ошибки_экспорта);
	
	Начало = ТекущаяДата();
	Сообщить(" Начало: " + ТекущаяДата());

	Conn = Новый COMОбъект ("ADODB.Connection");
	Conn.Open
	(
		"Provider=SQLNCLI10.1;Password=wsx098;Persist Security Info=True;User ID=gme_1c;Initial Catalog=whl;Data Source=SQLSERVERA2.fc-moron.ru\ORIOLA;MultipleActiveResultSets=true;"
	);

	RS = Новый COMОбъект ("ADODB.RecordSet");
	RS.CursorLocation = 2;
	RS.CursorType = 0;
	RS.LockType = 1;
	
	Conn.Execute
	(
		"
		|SELECT B.*
		|INTO
		| #preload
		|FROM [Whl].[ave].[KatrenCrossdocking] as A LEFT JOIN [Whl].[ave].[KatrenCrossdocking] as B ON 1=0
		|  WHERE 1=0
		|;
		|ALTER TABLE #preload DROP COLUMN ID
		|;
		|ALTER TABLE #preload Add Id Int Identity(1,1)
		|;
		|ALTER TABLE #preload Add [Номер документа АВЕ] int
		|;
		|ALTER TABLE #preload Add [Код аптеки АВЕ] int
		|;
		|ALTER TABLE #preload Add [Код товара АВЕ] int
		|;
		|ALTER TABLE #preload Add [Наименование товара АВЕ] varchar(150)
		|;
		|ALTER TABLE #preload Add [Производитель] varchar(100)
		|;
		|CREATE TABLE #CrossdockingError
		|(
		|[anId] [int] NOT NULL,
		|[OrderNo] varchar(50) NOT NULL,
		|[errcode] [int] NOT NULL,
		|[errdescr] [varchar](2000) NOT NULL
		|)
		|;
	    |"
	);
	
	ПустаяСтрокаМаксДлины = "";
	Для сч = 1 По 50 Цикл
		ПустаяСтрокаМаксДлины = ПустаяСтрокаМаксДлины + " ";
	КонецЦикла;
	
	// получение связок кодов товаров для целевой сисетмы - ДжиДиПи 
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =  МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
		|	СвязкиТовараСПоставщиком.ТоварФирмыКод,
		|	ПрайсЛисты.Код,
		|	СвязкиТовараСПоставщиком.КодТовараПоставщика
		|ИЗ
		|	Справочник.Поставщики КАК Поставщики
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		| 		(
		|		ВЫБРАТЬ 
		|			СвязкиТовараСПоставщиком.Поставщик,
		|			СвязкиТовараСПоставщиком.ТоварФирмы,
		|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
		|			СвязкиТовараСПоставщиком.КодТовараПоставщика,
		|			СвязкиТовараСПоставщиком.ПометкаУдаления
		|		ИЗ
		|			Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.УЗ_ПоступлениеТовара.Товар КАК УЗ_ПоступлениеТовараТовар
		|		ПО
		|			УЗ_ПоступлениеТовараТовар.Товар = СвязкиТовараСПоставщиком.ТоварФирмы
		|			И УЗ_ПоступлениеТовараТовар.Ссылка = &ДокСсылка
		//|		ОБЪЕДИНИТЬ
		//|		ВЫБРАТЬ 
		//|			СвязкиТовараСПоставщиком.Поставщик,
		//|			СвязкиТовараСПоставщиком.ТоварФирмы,
		//|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
		//|			СвязкиТовараСПоставщиком.КодТовараПоставщика,
		//|			СвязкиТовараСПоставщиком.ПометкаУдаления
		//|		ИЗ
		//|			Справочник.СвязкиТовараСПоставщиком_Архив КАК СвязкиТовараСПоставщиком
		//|		ГДЕ
		//|			СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ
		|		) КАК СвязкиТовараСПоставщиком
		|		ПО (СвязкиТовараСПоставщиком.Поставщик В (Поставщики.Ссылка, Поставщики.ПоставщикСвязок.Ссылка))
		|			И (СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК Каталог
		|			ПО (Каталог.КодПоставщика = Поставщики.Код)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
		|			ПО (Каталог.КодПрайсЛиста = ПрайсЛисты.КодПрайсЛиста)
		|			И (СвязкиТовараСПоставщиком.КодТовараПоставщика = ПрайсЛисты.Код)
		|ГДЕ
		|	Поставщики.Код = 3055
		|	И
		|	НЕ (СвязкиТовараСПоставщиком.КодТовараПоставщика ПОДОБНО ""%[^0-9]%"")
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	NULL,
		|	"""",
		|	&ПустаяСтрокаМаксДлины,
		|	&ПустаяСтрокаМаксДлины
		|";
	Запрос.Параметры.Вставить("ПустаяСтрокаМаксДлины", ПустаяСтрокаМаксДлины);
	Запрос.Параметры.Вставить("ДокСсылка", ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_связки_кодов = РезультатЗапроса.Выгрузить();
	
	Для каждого Стр ИЗ ТЗ_связки_кодов Цикл
		Стр.Код = Лев(ПустаяСтрокаМаксДлины, СтрДлина(ПустаяСтрокаМаксДлины) - СтрДлина(Стр.Код)) + Стр.Код;
		ЕСЛИ СтрДлина(СокрЛП(Стр.Код)) = 0 Тогда Стр.Код = NULL Конецесли;
		Стр.КодТовараПоставщика = Лев(ПустаяСтрокаМаксДлины, СтрДлина(ПустаяСтрокаМаксДлины) - СтрДлина(Стр.КодТовараПоставщика)) + Стр.КодТовараПоставщика;
		//Сообщить(" Стр.Код = " + Стр.Код + " ; Стр.КодТовараПоставщика = " + Стр.КодТовараПоставщика);
	КонецЦикла;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	ТЗ_связки_кодов.ТоварФирмы,
		|	ТЗ_связки_кодов.Код,
		|	ТЗ_связки_кодов.КодТовараПоставщика
		|ПОМЕСТИТЬ
		|	коды_поставщика
		|ИЗ
		|	&ТЗ_связки_кодов КАК ТЗ_связки_кодов
		|ИНДЕКСИРОВАТЬ ПО ТЗ_связки_кодов.ТоварФирмы
		|";
	Запрос.Параметры.Вставить("ТЗ_связки_кодов", ТЗ_связки_кодов);	
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	УЗ_ПоступлениеТовара.ВхНомерНакл КАК ВхНомерНакл,
//		|	УЗ_ПоступлениеТовара.Дата,
		|	УЗ_ПоступлениеТовара.ВхДатаНакл КАК Дата,
		|	КонтрактыИАптеки.КодАптекиВнешн,
//		|	ДокТовар.ЦенаЗакуп КАК ЦенаПоставщик,
//		|	ДокТовар.ЦенаЗакупБезНДС КАК ЦенаПоставщикБезНДС,
		|	ЕСТЬNULL(ДокТоварИсточник.ЦенаЗакуп, ДокТовар.ЦенаЗакуп) КАК ЦенаПоставщик,
		|	ЕСТЬNULL(ДокТоварИсточник.ЦенаЗакупБезНДС, ДокТовар.ЦенаЗакупБезНДС) КАК ЦенаПоставщикБезНДС,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокТовар.СтавкаНДСЗакуп) КАК СтавкаНДС,
		|	ДокТовар.Баркод,
		|	ДокТовар.Количество,
		|	ДокТовар.Серия,
		|	ДокТовар.СрокГодности,
		|	ДокТовар.ЦенаГосРегистрации,
		|	ДокТовар.ЦенаПроизводителя,
		|	ДокТовар.ЦенаЗакуп,
		|	ДокТовар.ЦенаЗакупБезНДС,
		|	коды_ориола.КодТовараПоставщика,
		|	&КодПоставщикаВоВнешнейСистеме КАК КодПоставщикаВоВнешнейСистеме,
		|	ДокТовар.СтавкаНДСЗакуп,
		|	УЗ_ПоступлениеТовара.Номер,
		|	УЗ_ПоступлениеТовара.Склад.Код КАК КодАптекиАВЕ,
		|	ДокТовар.Товар.Код КАК КодТовараАВЕ,
		|	ДокТовар.Товар.Наименование КАК НаименованиеТовараАВЕ,
//		|	"""" КАК Производитель,
		|	ДокТовар.Производитель.Наименование КАК Производитель,
		|	УЗ_ПоступлениеТовара.Ссылка КАК ДокСсылка,
		|	УЗ_ПоступлениеТовара.Поставщик КАК Поставщик,
//		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(УЗ_ПоступлениеТовара.ВхДатаНакл, УЗ_ПоступлениеТовара.Дата), ДЕНЬ, &ОтсрочкаОплатыДней) КАК ДатаОплаты
		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(УЗ_ПоступлениеТовара.ВхДатаНакл, УЗ_ПоступлениеТовара.Дата), ДЕНЬ, ЕСТЬNULL(НастройкиОбмена.ОстрочкаПлатежа, &ОтсрочкаОплатыДней)) КАК ДатаОплаты
		|ИЗ
		|	Документ.УЗ_ПоступлениеТовара КАК УЗ_ПоступлениеТовара
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЗ_ПоступлениеТовара.Товар КАК ДокТовар
		|	ПО (ДокТовар.Ссылка = УЗ_ПоступлениеТовара.Ссылка)
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЗ_ПоступлениеТовара.ИсходныеДанныеКД КАК ДокТоварИсточник
		|	ПО (ДокТовар.Ссылка = УЗ_ПоступлениеТовара.Ссылка) И (ДокТоварИсточник.КодПартии = ДокТовар.КодПартии)
		//|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контракты КАК Контракты
		//|	ПО УЗ_ПоступлениеТовара.Поставщик = Контракты.Владелец
		//|	И (Контракты.Фирма = УЗ_ПоступлениеТовара.Склад.Фирма)
		//|	И (Контракты.Активность = Истина)
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
		|	ПО (1=1)
//		|	И (Контракты.Ссылка = КонтрактыИАптеки.Владелец)
		|	И (КонтрактыИАптеки.Аптека = УЗ_ПоступлениеТовара.Склад)
//		|	И (КонтрактыИАптеки.Активность = Истина)
		//
		|	И КонтрактыИАптеки.Владелец.Фирма = УЗ_ПоступлениеТовара.Склад.Фирма
		|	И КонтрактыИАптеки.Владелец.Владелец = УЗ_ПоступлениеТовара.Поставщик
		|	И КонтрактыИАптеки.Владелец.Активность = Истина
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|(
		|	ВЫБРАТЬ
		|		коды_поставщика.ТоварФирмы КАК ТоварФирмы,
		|		ЕСТЬNULL(МАКСИМУМ(Код), МАКСИМУМ(КодТовараПоставщика)) КАК КодТовараПоставщика
		|	ИЗ
		|		коды_поставщика
		|	СГРУППИРОВАТЬ ПО
		|		коды_поставщика.ТоварФирмы	
		|) КАК коды_ориола
		|		ПО (ДокТовар.Товар = коды_ориола.ТоварФирмы)
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.Заказ КАК Зак
		|ПО
		|	Зак.Номер = ДокТовар.НомерЗаказа
		|	И
		|	РАЗНОСТЬДАТ(Зак.Дата, УЗ_ПоступлениеТовара.Дата, ДЕНЬ) МЕЖДУ -3 И 30
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.НастройкиОбмена КАК НастройкиОбмена
		|ПО
		|	НастройкиОбмена.Владелец = Зак.Поставщик
		|	И
		|	НастройкиОбмена.Активность = ИСТИНА
		|	И
		|	НастройкиОбмена.ЮЛДляКроссДокинга = УЗ_ПоступлениеТовара.Поставщик
		|ГДЕ
		|	УЗ_ПоступлениеТовара.Ссылка = &ДокСсылка
		|";

	Запрос.Параметры.Вставить("КодПоставщикаВоВнешнейСистеме", КодПоставщикаВоВнешнейСистеме);
	Запрос.Параметры.Вставить("ДокСсылка", ДокСсылка);
	Запрос.Параметры.Вставить("ОтсрочкаОплатыДней", ОтсрочкаОплатыДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_документ = РезультатЗапроса.Выгрузить();
	//ТЗ_документ.ВыбратьСтроку();
	
	МассивСтрокиОшибок = Новый Массив;
			
	Conn.Execute("DELETE FROM #preload");
	Conn.Execute("DELETE FROM #CrossdockingError");
	
	Попытка
		стр_экспорт = Неопределено;
		Если
			(ТЗ_документ[0].ДокСсылка.Товар.Количество() <> ТЗ_документ.Количество())
		Тогда
			ВызватьИсключение "ОШИБКА! " + " Для документа [" + ДокСсылка + "] в результате обработки число строк результата[" + ТЗ_документ.Количество()  + "] не равно числу строк документа [" + ДокСсылка.Товар.Количество() + "]!";
		КонецЕсли;
		
		Для каждого стр_экспорт из ТЗ_документ Цикл
			sql =
				"INSERT INTO #preload("
				+
				"[OrderNo]
				|,[OrderDT]
				|,[InKodAptek]
				|,[OutKodAptek]
				|,[KodTax2]
				|,[BatchNo]
				|,[LifeDT]
				|,[PriceReg]
				|,[PriceMnf]
				|,[PriceInVatExcl]
				|,[PriceInVatIncl]
				|,[PriceOutVatExcl]
				|,[PriceOutVatIncl]
				|,[VAT]
				|,[Qty]
				|,[EAN]
				|,[Номер документа АВЕ]
				|,[Код аптеки АВЕ]
				|,[Код товара АВЕ]
				|,[Наименование товара АВЕ]
				|,[Производитель]
				|,[DatePay]"
				+ ") "
				+ " VALUES (" 
				+
				ЗначениеSQL(стр_экспорт.ВхНомерНакл) + "," + 
				ЗначениеSQL(стр_экспорт.Дата) + "," + 
				ЗначениеSQL(стр_экспорт.КодПоставщикаВоВнешнейСистеме) + "," + 
				ЗначениеSQL(стр_экспорт.КодАптекиВнешн) + "," +
				//ЗначениеSQL(стр_экспорт.КодТовараПоставщика) + "," + 
				ЗначениеSQL(СокрЛП(стр_экспорт.КодТовараПоставщика)) + "," + 
				//ЗначениеSQL(СокрЛП("990099")) + "," + 
				ЗначениеSQL(стр_экспорт.Серия) + "," + 
				ЗначениеSQL(стр_экспорт.СрокГодности) + "," + 
				
				ЗначениеSQL(стр_экспорт.ЦенаГосРегистрации) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаПроизводителя) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаПоставщикБезНДС) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаПоставщик) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаЗакупБезНДС) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаЗакуп) + "," + 
				ЗначениеSQL(стр_экспорт.СтавкаНДС) + "," + 
				
				ЗначениеSQL(стр_экспорт.Количество) + "," + 
				ЗначениеSQL(стр_экспорт.Баркод) + "," + 
				
				ЗначениеSQL(стр_экспорт.Номер) + "," + 
				ЗначениеSQL(стр_экспорт.КодАптекиАВЕ) + "," + 
				ЗначениеSQL(стр_экспорт.КодТовараАВЕ) + "," + 
				ЗначениеSQL(стр_экспорт.НаименованиеТовараАВЕ) + "," + 
				ЗначениеSQL(стр_экспорт.Производитель) + "," + 
				ЗначениеSQL(стр_экспорт.ДатаОплаты)
				+")";
			Conn.Execute(sql);
		КонецЦикла;
		
		sql = "EXEC ave.P_import_data_Crossdocking;";
		//sql = "EXEC ave.P_import_data_Crossdocking_rollback;";
		RS = Conn.Execute(sql);
		
		Если
			(ТЗ_результат.Колонки.Количество() = 0)
			//И
			//(НЕ (RS.EOF))
		Тогда
			Для каждого Поле ИЗ  RS.Fields Цикл
				Попытка
					ТЗ_результат.Колонки.Добавить(Поле.Name , , );
				Исключение
					ТЗ_результат.Колонки.Добавить("Поле" + Строка(ТЗ_результат.Колонки.Количество()+1) , , Поле.Name);
				КонецПопытки;
			КонецЦикла;				
		Конецесли;
		
		Пока НЕ (RS.EOF) Цикл
			стр_ТЗ_результат = ТЗ_результат.Добавить();
			сч_полей = 0;
			Для каждого Поле ИЗ  RS.Fields Цикл
				сч_полей = сч_полей + 1;
				стр_ТЗ_результат[сч_полей-1] = RS.Fields(сч_полей-1).Value;
			КонецЦикла;				
			RS.MoveNext();
		КонецЦикла;
		RS.Close();
	Исключение
		МассивСтрокиОшибок.Добавить(стр_экспорт);
		Если
			стр_экспорт = Неопределено
		Тогда
			стр_экспорт = Новый Структура("Номер,ВхНомерНакл", ДокСсылка.Номер, ДокСсылка.ВхНомерНакл);
			sql = " ";
		КонецЕсли;
		
		//sql = "INSERT INTO #CrossdockingError VALUES(" + Формат(стр_экспорт.Номер, "ЧДЦ=; ЧРГ=; ЧН=; ЧГ=") + ", " + ЗначениеSQL(стр_экспорт.ВхНомерНакл) + ", 0, " + ЗначениеSQL(sql) + ")";
		//Сообщить("sql = " + sql);
		//Conn.Execute(sql);
		
		Инфо = ИнформацияОбОшибке();
		Пока Инфо <> Неопределено Цикл
			sql = "INSERT INTO #CrossdockingError VALUES(" + Формат(стр_экспорт.Номер, "ЧДЦ=; ЧРГ=; ЧН=; ЧГ=")  + ", " + ЗначениеSQL(стр_экспорт.ВхНомерНакл) + ", 0, " + ЗначениеSQL(Инфо.Описание) + ")";
			//Сообщить("sql (*) = " + sql);
			Conn.Execute(sql);
			Инфо = Инфо.Причина;
		КонецЦикла;
	КонецПопытки;
	//На этом закончим транзакцию
	
	// и грабим ошибки, а также делаем в гарантированно поглощаемом исключении все некритические действия 
	// поскольку если процедура отработала успешно, то есть экспорт в БД опта прошел удачно,
	// то нужно обеспечить "корректное" завершение и во внешнем контексте (вызывающем экспорт),
	// иначе, если размещенный ниже "некритический" код вызовет ошибку, то внешний контекст, из-за ошибки
	// выполнения нонкритикал секции не получит
	// сведения об успешном завершении экспорта накладной и будет пробовать экспортировать её повторно,
	// вызывая циклическую ошибку.
	Попытка
		RS = Conn.Execute
		(
			"SELECT DISTINCT  " + ЗначениеSQL(стр_экспорт.Номер) + " as [Номер документа АВЕ] , e.*, p.* FROM #CrossdockingError e LEFT JOIN #preload p ON e.OrderNo = p.OrderNo AND e.anId = p.Id ORDER BY e.OrderNo, e.anId"
		);
		
		Если
			(ТЗ_ошибки_экспорта.Колонки.Количество() = 0)
			И
			(НЕ (RS.EOF))
		Тогда
			Сообщить("Инициализация колонок!");
			Для каждого Поле ИЗ  RS.Fields Цикл
				Попытка
					ТЗ_ошибки_экспорта.Колонки.Добавить(Поле.Name);
				Исключение
					ТЗ_ошибки_экспорта.Колонки.Добавить("Поле" + Строка(ТЗ_ошибки_экспорта.Колонки.Количество()+1) , , Поле.Name);
				КонецПопытки;
			КонецЦикла;				
			//ТЗ_ошибки_экспорта.ВыбратьСтроку();
		Конецесли;
		
		Пока НЕ (RS.EOF) Цикл
			стр_ТЗ_ошибки_экспорта = ТЗ_ошибки_экспорта.Добавить();
			сч_полей = 0;
			Для каждого Поле ИЗ  RS.Fields Цикл
				
				сч_полей = сч_полей + 1;
				//Попытка
				//	стр_ТЗ_ошибки_экспорта[RS.Fields(сч_полей-1).Name] = RS.Fields(сч_полей-1).Value;
				//Исключение
				//	стр_ТЗ_ошибки_экспорта["Поле" + Строка(сч_полей)] = RS.Fields(сч_полей-1).Value;
				//КонецПопытки;	
				стр_ТЗ_ошибки_экспорта[сч_полей-1] = RS.Fields(сч_полей-1).Value;
			КонецЦикла;				
			
			RS.MoveNext();
		КонецЦикла;
		//ТЗ_ошибки_экспорта.ВыбратьСтроку();
		RS.Close();
		Окончание = ТекущаяДата();
		Сообщить(" Окончание: " + Формат(Окончание, "ДФ='yyyyMMdd HHmmss'"));
		Сообщить(" Продолжительность: " + Формат(Окончание - Начало, "ДФ='yyyyMMdd HHmmss'"));
		Conn.Close();
		Conn = Неопределено;
		
	Исключение
		Conn.Close();
		Conn = Неопределено;
		
		ИнфоОшибка = ИнформацияОбОшибке();
		Сообщить("Ошибка при выполнении некритической секции кода! " + ИнфоОшибка.Описание);
		Если
			(ТЗ_ошибки_экспорта.Колонки.Количество() = 0)
		Тогда
			ТЗ_ошибки_экспорта.Колонки.Добавить("anId");
			ТЗ_ошибки_экспорта.Колонки.Добавить("OrderNo", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
			ТЗ_ошибки_экспорта.Колонки.Добавить("errcode");
			ТЗ_ошибки_экспорта.Колонки.Добавить("errdescr", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
		КонецЕсли;
		стр_ТЗ_ошибки_экспорта = ТЗ_ошибки_экспорта.Добавить();
		стр_ТЗ_ошибки_экспорта.OrderNo = ДокСсылка.ВхНомерНакл;
		стр_ТЗ_ошибки_экспорта.errdescr = ИнфоОшибка.Описание;
	КонецПопытки;
	
	// поскольку если процедура отработала успешно, то есть экспорт в БД опта прошел удачно,
	// то нужно обеспечить "корректное" завершение и во внешнем контексте (вызывающем экспорт),
	// иначе, если размещенный ниже "некритический" код вызовет ошибку, то внешний контекст, из-за ошибки
	// выполнения нонкритикал секции не получит
	// сведения об успешном завершении экспорта накладной и будет пробовать экспортировать её повторно,
	// вызывая циклическую ошибку.
	// ну а если экспорт прошел неудачно, но что-то случилось после транзакции экспорта, например, на стадии
	//получения описания ошибок, закрытия соединения с БД и т.д., то потеря этих данных неприятна, но некритична.
	
	//Попытка
	//	Если
	//		ТЗ_ошибки_экспорта.Количество() > 0
	//	Тогда
	//		ДокументОшибки =  Новый ТабличныйДокумент;
	//		ДокументОшибки.ИтогиСнизу = Ложь;
	//		ДокументОшибки.ИтогиСправа = Ложь;
	//		ДокументОшибки.ФиксацияСлева = 0;
	//		ДокументОшибки.ФиксацияСверху = 0;
	//		
	//		Построитель_ = Новый ПостроительОтчета;
	//		ИсточникДанных_ = Новый ОписаниеИсточникаДанных(ТЗ_ошибки_экспорта);
	//		Построитель_.ИсточникДанных = ИсточникДанных_;
	//		Построитель_.ВыводитьЗаголовокОтчета = Ложь;
	//		Построитель_.ВыводитьОбщиеИтоги = Ложь;
	//		Построитель_.ВыводитьПодвалОтчета = Ложь;
	//		Построитель_.ВыводитьПодвалТаблицы = Ложь;
	//		Построитель_.Вывести(ДокументОшибки);
	//		ДокументОшибки.Область(1,1,ДокументОшибки.ВысотаТаблицы,1).ШиринаКолонки = 20;
	//		ДокументОшибки.УдалитьОбласть(ДокументОшибки.Область(1,1,ДокументОшибки.ВысотаТаблицы,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	//		сч_полей = 0;
		//	Для каждого кол ИЗ ТЗ_связки_кодов.Колонки Цикл
		//		сч_полей = сч_полей + 1;
		//		ДокументОшибки.Область(1,сч_полей, 1, сч_полей).Текст = ?(СтрДлина(Кол.Заголовок) = 0, Кол.Имя, Кол.Заголовок);
		//		//ТЗ_связки_кодов.Колонки.Добавить("Поле" + Строка(ТЗ_связки_кодов.Колонки.Количество()+1) , , Поле.Name);
		//	КонецЦикла;				
	//		//Если ПоказыватьТабДоки Тогда 
	//		//	ДокументОшибки.Показать(); 
	//		//КонецЕсли;
	//		//ДокументОшибки.Записать(папкаОбмена + "ошибки_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss") + ".xls", ТипФайлаТабличногоДокумента.XLS);
	//		//ДокументОшибки.Записать(папкаОбмена + ТекущаяНакладная + ".txt", ТипФайлаТабличногоДокумента.ANSITXT);
	//	КонецЕсли;
	//	
	//	Окончание = ТекущаяДата();
	//	Сообщить(" Окончание: " + Формат(Окончание, "ДФ='yyyyMMdd HHmmss'"));
	//	Сообщить(" Продолжительность: " + Формат(Окончание - Начало, "ДФ='yyyyMMdd HHmmss'"));
	//Исключение
	//	ИнфоОшибка = ИнформацияОбОшибке();
	//	Сообщить("Ошибка при выполнении некритической секции кода! " + ИнфоОшибка.Описание);
	//	Если
	//		(ТЗ_ошибки_экспорта.Колонки.Количество() = 0)
	//	Тогда
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("anId");
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("OrderNo", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("errcode");
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("errdescr", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
	//	КонецЕсли;
	//	стр_ТЗ_ошибки_экспорта.errdescr = ИнфоОшибка.Описание;
	//КонецПопытки;
	
	Возврат СтруктРезультат;
	
КонецФункции

Функция экспортНакладнойКроссДокинг(ДокСсылка, КодПоставщикаВоВнешнейСистеме) Экспорт
	
Перем Начало, Окончание;

	УЗ_ПоступлениеТовара_ = Документы.УЗ_ПоступлениеТовара.ПустаяСсылка();
	Если
		ТипЗнч(УЗ_ПоступлениеТовара_) <> ТипЗнч(ДокСсылка)
	Тогда
		ВызватьИсключение "Допускается обработка только ссылки на документ [" + УЗ_ПоступлениеТовара_.Метаданные().Имя + "]";
	КонецЕсли;
	
	Если
		ДокСсылка.Поставщик.Код <> 3055
	Тогда
		ВызватьИсключение "Допускается обработка только документов от поставщика с кодом 3055!";
	КонецЕсли;
	
	//КодПоставщикаВоВнешнейСистеме = 8746;
	ОтсрочкаОплатыДней = ДокСсылка.ОтсрочкаПлатежа;

	ТекстДок = Новый ТекстовыйДокумент;

	МассивЗначений = Новый Массив;
	ТЗ_результат = Новый ТаблицаЗначений;
	ТЗ_ошибки_экспорта = Новый ТаблицаЗначений;
	
	СтруктРезультат = Новый Структура;
	СтруктРезультат.Вставить("Результат",ТЗ_результат);
	СтруктРезультат.Вставить("Ошибки",ТЗ_ошибки_экспорта);
	СтруктРезультат.Вставить("ОшибкаОтправки", Ложь); //Самсонов ENT-432 +++
	
	Начало = ТекущаяДата();
	Сообщить(" Начало: " + ТекущаяДата());

	МенЗап = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	МенЗап.ИмяОбъекта = "строка_соединения_БД_опт_sqlncli";
	МенЗап.НаименованиеНастройки = "строка_соединения_БД_опт_sqlncli";
	МенЗап.Прочитать();
	Если
		МенЗап.Выбран()
	Тогда
		СтрокаСоединения = Мензап.СохраненнаяНастройка.Получить();
	Иначе
		ВызватьИсключение "Не задана СохраненнаяНастройка - строка соединения с БД оптового учета в формате sqlncli!"
		+ Символы.ПС + Символы.ВК
		+"(запись [строка_соединения_БД_опт_sqlncli] в регистре СохраненныеНастройки)";
	КонецЕсли;
	
	//+Самсонов ENT-432 Добавили Попытку/Исключение в узких местах кода для решения проблемы с приостановкой работы из-за бага + таймаут в 3 сек м/д попытками и 2 перезапуска
	Для сч = 1 по 3 Цикл
		Попытка
			Conn = Новый COMОбъект ("ADODB.Connection");
			Conn.Open(СтрокаСоединения);
			Прервать;
		Исключение
			Если СЧ = 3 Тогда
				ЗаписьЛогаОшибок = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
				ЗаписьЛогаОшибок.Объект = "Загрузка накладных (робот)";
				ЗаписьЛогаОшибок.ДатаОшибки = ТекущаяДата();
				ЗаписьЛогаОшибок.ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЛогаОшибок.МестоВозникновения = "Экспорт-кроссдокинг.Документ № " + ДокСсылка.Номер +  ",поставщик: " + ДокСсылка.ПоставщикКД;
				ЗаписьЛогаОшибок.Записать();
				СтруктРезультат.Вставить("ОшибкаОтправки",Истина);
				возврат СтруктРезультат;
			Иначе
				ОбщегоНазначения.Задержка(3);
			КонецЕсли;
			Продолжить;	
		КонецПопытки;	
	КонецЦикла;
	
	
	RS = Новый COMОбъект ("ADODB.RecordSet");
	RS.CursorLocation = 2;
	RS.CursorType = 0;
	RS.LockType = 1;
	
	
	Для сч = 1 по 3 Цикл
		Попытка
			Conn.Execute
			(
			"
			|SELECT B.*
			|INTO
			| #preload
			|FROM [Whl].[ave].[KatrenCrossdocking] as A LEFT JOIN [Whl].[ave].[KatrenCrossdocking] as B ON 1=0
			|  WHERE 1=0
			|;
			|ALTER TABLE #preload DROP COLUMN ID
			|;
			|ALTER TABLE #preload Add Id Int Identity(1,1)
			|;
			|ALTER TABLE #preload Add [Номер документа АВЕ] int
			|;
			|ALTER TABLE #preload Add [Код аптеки АВЕ] int
			|;
			|ALTER TABLE #preload Add [Код товара АВЕ] int
			|;
			|ALTER TABLE #preload Add [Наименование товара АВЕ] varchar(150)
			|;
			|ALTER TABLE #preload Add [Производитель] varchar(100)
			|;
			|CREATE TABLE #CrossdockingError
			|(
			|[anId] [int] NOT NULL,
			|[OrderNo] varchar(50) NOT NULL,
			|[errcode] [int] NOT NULL,
			|[errdescr] [varchar](2000) NOT NULL
			|)
			|;
			|"
			);
			
			Прервать;
		Исключение
			Если СЧ = 3 Тогда
				ЗаписьЛогаОшибок = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
				ЗаписьЛогаОшибок.Объект = "Загрузка накладных (робот)";
				ЗаписьЛогаОшибок.ДатаОшибки = ТекущаяДата();
				ЗаписьЛогаОшибок.ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЛогаОшибок.МестоВозникновения = "Экспорт-кроссдокинг.Документ № " + ДокСсылка.Номер +  ",поставщик: " + ДокСсылка.ПоставщикКД;
				ЗаписьЛогаОшибок.Записать();
				СтруктРезультат.Вставить("ОшибкаОтправки",Истина);
				возврат СтруктРезультат;
			Иначе
				ОбщегоНазначения.Задержка(3);
			КонецЕсли;
			Продолжить;	
		КонецПопытки;
	КонецЦикла;
	//---	
	
		
	ПустаяСтрокаМаксДлины = "";
	Для сч = 1 По 50 Цикл
		ПустаяСтрокаМаксДлины = ПустаяСтрокаМаксДлины + " ";
	КонецЦикла;
	
	// получение связок кодов товаров для целевой системы - ДжиДиПи 
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =  МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
		|	СвязкиТовараСПоставщиком.ТоварФирмыКод,
		|	ПрайсЛисты.Код,
		|	СвязкиТовараСПоставщиком.КодТовараПоставщика
		|ИЗ
		|	Справочник.Поставщики КАК Поставщики
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		| 		(
		|		ВЫБРАТЬ 
		|			СвязкиТовараСПоставщиком.Поставщик,
		|			СвязкиТовараСПоставщиком.ТоварФирмы,
		|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
		|			СвязкиТовараСПоставщиком.КодТовараПоставщика,
		|			СвязкиТовараСПоставщиком.ПометкаУдаления
		|		ИЗ
		|			Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.УЗ_ПоступлениеТовара.Товар КАК УЗ_ПоступлениеТовараТовар
		|		ПО
		|			УЗ_ПоступлениеТовараТовар.Товар = СвязкиТовараСПоставщиком.ТоварФирмы
		|			И УЗ_ПоступлениеТовараТовар.Ссылка = &ДокСсылка
		//|		ОБЪЕДИНИТЬ
		//|		ВЫБРАТЬ 
		//|			СвязкиТовараСПоставщиком.Поставщик,
		//|			СвязкиТовараСПоставщиком.ТоварФирмы,
		//|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
		//|			СвязкиТовараСПоставщиком.КодТовараПоставщика,
		//|			СвязкиТовараСПоставщиком.ПометкаУдаления
		//|		ИЗ
		//|			Справочник.СвязкиТовараСПоставщиком_Архив КАК СвязкиТовараСПоставщиком
		//|		ГДЕ
		//|			СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ
		|		) КАК СвязкиТовараСПоставщиком
		|		ПО (СвязкиТовараСПоставщиком.Поставщик В (Поставщики.Ссылка, Поставщики.ПоставщикСвязок.Ссылка))
		|			И (СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КаталогПрайсЛистов КАК Каталог
		|			ПО (Каталог.КодПоставщика = Поставщики.Код)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛисты КАК ПрайсЛисты
		|			ПО (Каталог.КодПрайсЛиста = ПрайсЛисты.КодПрайсЛиста)
		|			И (СвязкиТовараСПоставщиком.КодТовараПоставщика = ПрайсЛисты.Код)
		|ГДЕ
		|	Поставщики.Код = 3055
		|	И
		|	НЕ (СвязкиТовараСПоставщиком.КодТовараПоставщика ПОДОБНО ""%[^0-9]%"")
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ
		|	NULL,
		|	"""",
		|	&ПустаяСтрокаМаксДлины,
		|	&ПустаяСтрокаМаксДлины
		|";
	Запрос.Параметры.Вставить("ПустаяСтрокаМаксДлины", ПустаяСтрокаМаксДлины);
	Запрос.Параметры.Вставить("ДокСсылка", ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_связки_кодов = РезультатЗапроса.Выгрузить();
	
	Для каждого Стр ИЗ ТЗ_связки_кодов Цикл
		Стр.Код = Лев(ПустаяСтрокаМаксДлины, СтрДлина(ПустаяСтрокаМаксДлины) - СтрДлина(Стр.Код)) + Стр.Код;
		ЕСЛИ СтрДлина(СокрЛП(Стр.Код)) = 0 Тогда Стр.Код = NULL Конецесли;
		Стр.КодТовараПоставщика = Лев(ПустаяСтрокаМаксДлины, СтрДлина(ПустаяСтрокаМаксДлины) - СтрДлина(Стр.КодТовараПоставщика)) + Стр.КодТовараПоставщика;
		//Сообщить(" Стр.Код = " + Стр.Код + " ; Стр.КодТовараПоставщика = " + Стр.КодТовараПоставщика);
	КонецЦикла;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	ТЗ_связки_кодов.ТоварФирмы,
		|	ТЗ_связки_кодов.Код,
		|	ТЗ_связки_кодов.КодТовараПоставщика
		|ПОМЕСТИТЬ
		|	коды_поставщика
		|ИЗ
		|	&ТЗ_связки_кодов КАК ТЗ_связки_кодов
		|ИНДЕКСИРОВАТЬ ПО ТЗ_связки_кодов.ТоварФирмы
		|";
	Запрос.Параметры.Вставить("ТЗ_связки_кодов", ТЗ_связки_кодов);	
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	УЗ_ПоступлениеТовара.ВхНомерНакл КАК ВхНомерНакл,
		|	УЗ_ПоступлениеТовара.ВхДатаСФ КАК ВхДатаСФ,
//		|	УЗ_ПоступлениеТовара.Дата,
        |	УЗ_ПоступлениеТовара.ВхДатаНакл КАК ВхДатаНакл,
		|	УЗ_ПоступлениеТовара.ВхДатаНакл КАК Дата,
		|	КонтрактыИАптеки.КодАптекиВнешн,
//		|	ДокТовар.ЦенаЗакуп КАК ЦенаПоставщик,
//		|	ДокТовар.ЦенаЗакупБезНДС КАК ЦенаПоставщикБезНДС,
		|	ЕСТЬNULL(ДокТоварИсточник.ЦенаЗакуп, ДокТовар.ЦенаЗакуп) КАК ЦенаПоставщик,
		|	ЕСТЬNULL(ДокТоварИсточник.ЦенаЗакупБезНДС, ДокТовар.ЦенаЗакупБезНДС) КАК ЦенаПоставщикБезНДС,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокТовар.СтавкаНДСЗакуп) КАК СтавкаНДС,
		|	ДокТовар.Баркод,
		|	ДокТовар.Количество,
		|	ДокТовар.Серия,
		|	ДокТовар.СрокГодности,
		|	ДокТовар.ЦенаГосРегистрации,
		|	ДокТовар.ЦенаПроизводителя,
		|	ДокТовар.ЦенаЗакуп,
		|	ДокТовар.ЦенаЗакупБезНДС,
		|	коды_ориола.КодТовараПоставщика,
		|	&КодПоставщикаВоВнешнейСистеме КАК КодПоставщикаВоВнешнейСистеме,
		|	ДокТовар.СтавкаНДСЗакуп,
		|	УЗ_ПоступлениеТовара.Номер,
		|	УЗ_ПоступлениеТовара.Склад.Код КАК КодАптекиАВЕ,
		|	ДокТовар.Товар.Код КАК КодТовараАВЕ,
		|	ДокТовар.Товар.Наименование КАК НаименованиеТовараАВЕ,
//		|	"""" КАК Производитель,
		|	ДокТовар.Производитель.Наименование КАК Производитель,
		|	УЗ_ПоступлениеТовара.Ссылка КАК ДокСсылка,
		|	УЗ_ПоступлениеТовара.Поставщик КАК Поставщик,
//		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(УЗ_ПоступлениеТовара.ВхДатаНакл, УЗ_ПоступлениеТовара.Дата), ДЕНЬ, &ОтсрочкаОплатыДней) КАК ДатаОплаты
		|	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(УЗ_ПоступлениеТовара.ВхДатаНакл, УЗ_ПоступлениеТовара.Дата), ДЕНЬ, ЕСТЬNULL(НастройкиОбмена.ОстрочкаПлатежа, &ОтсрочкаОплатыДней)) КАК ДатаОплаты
		|ИЗ
		|	Документ.УЗ_ПоступлениеТовара КАК УЗ_ПоступлениеТовара
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЗ_ПоступлениеТовара.Товар КАК ДокТовар
		|	ПО (ДокТовар.Ссылка = УЗ_ПоступлениеТовара.Ссылка)
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЗ_ПоступлениеТовара.ИсходныеДанныеКД КАК ДокТоварИсточник
		|	ПО (ДокТовар.Ссылка = УЗ_ПоступлениеТовара.Ссылка) И (ДокТоварИсточник.КодПартии = ДокТовар.КодПартии)
		//|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контракты КАК Контракты
		//|	ПО УЗ_ПоступлениеТовара.Поставщик = Контракты.Владелец
		//|	И (Контракты.Фирма = УЗ_ПоступлениеТовара.Склад.Фирма)
		//|	И (Контракты.Активность = Истина)
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтрактыИАптеки КАК КонтрактыИАптеки
		|	ПО (1=1)
//		|	И (Контракты.Ссылка = КонтрактыИАптеки.Владелец)
		|	И (КонтрактыИАптеки.Аптека = УЗ_ПоступлениеТовара.Склад)
//		|	И (КонтрактыИАптеки.Активность = Истина)
		//
		|	И КонтрактыИАптеки.Владелец.Фирма = УЗ_ПоступлениеТовара.Склад.Фирма
		|	И КонтрактыИАптеки.Владелец.Владелец = УЗ_ПоступлениеТовара.Поставщик
		|	И КонтрактыИАптеки.Владелец.Активность = Истина
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|(
		|	ВЫБРАТЬ
		|		коды_поставщика.ТоварФирмы КАК ТоварФирмы,
		|		ЕСТЬNULL(МАКСИМУМ(Код), МАКСИМУМ(КодТовараПоставщика)) КАК КодТовараПоставщика
		|	ИЗ
		|		коды_поставщика
		|	СГРУППИРОВАТЬ ПО
		|		коды_поставщика.ТоварФирмы	
		|) КАК коды_ориола
		|		ПО (ДокТовар.Товар = коды_ориола.ТоварФирмы)
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.НастройкиОбмена КАК НастройкиОбмена
		|ПО
		|	НастройкиОбмена.Владелец = УЗ_ПоступлениеТовара.ПоставщикКД
		|	И
		|	НастройкиОбмена.Активность = ИСТИНА
		|	И
		|	НастройкиОбмена.ЮЛДляКроссДокинга = УЗ_ПоступлениеТовара.Поставщик
		|ГДЕ
		|	УЗ_ПоступлениеТовара.Ссылка = &ДокСсылка
		|";

	Запрос.Параметры.Вставить("КодПоставщикаВоВнешнейСистеме", КодПоставщикаВоВнешнейСистеме);
	Запрос.Параметры.Вставить("ДокСсылка", ДокСсылка);
	Запрос.Параметры.Вставить("ОтсрочкаОплатыДней", ОтсрочкаОплатыДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_документ = РезультатЗапроса.Выгрузить();
	//ТЗ_документ.ВыбратьСтроку();
	
	МассивСтрокиОшибок = Новый Массив;
			
	Conn.Execute("DELETE FROM #preload");
	Conn.Execute("DELETE FROM #CrossdockingError");
	
	Попытка
		стр_экспорт = Неопределено;
		Если
			(ТЗ_документ[0].ДокСсылка.Товар.Количество() <> ТЗ_документ.Количество())
		Тогда
			ВызватьИсключение "ОШИБКА! " + " Для документа [" + ДокСсылка + "] в результате обработки число строк результата[" + ТЗ_документ.Количество()  + "] не равно числу строк документа [" + ДокСсылка.Товар.Количество() + "]!";
		КонецЕсли;
		
		Для каждого стр_экспорт из ТЗ_документ Цикл
			sql =
				"INSERT INTO #preload("
				+
				"[OrderNo]
				|,[OrderDT]
				|,[InKodAptek]
				|,[OutKodAptek]
				|,[KodTax2]
				|,[BatchNo]
				|,[LifeDT]
				|,[PriceReg]
				|,[PriceMnf]
				|,[PriceInVatExcl]
				|,[PriceInVatIncl]
				|,[PriceOutVatExcl]
				|,[PriceOutVatIncl]
				|,[VAT]
				|,[Qty]
				|,[EAN]
				|,[Номер документа АВЕ]
				|,[Код аптеки АВЕ]
				|,[Код товара АВЕ]
				|,[Наименование товара АВЕ]
				|,[Производитель]
				|,[DatePay]
				//ENT-1256 +++
				|,[InvoiceDt]
				|,[SalesDocDt]"
				//---
				+ ") "
				+ " VALUES (" 
				+
				ЗначениеSQL(стр_экспорт.ВхНомерНакл) + "," + 
				ЗначениеSQL(стр_экспорт.Дата) + "," + 
				ЗначениеSQL(стр_экспорт.КодПоставщикаВоВнешнейСистеме) + "," + 
				ЗначениеSQL(стр_экспорт.КодАптекиВнешн) + "," +
				//ЗначениеSQL(стр_экспорт.КодТовараПоставщика) + "," + 
				ЗначениеSQL(СокрЛП(стр_экспорт.КодТовараПоставщика)) + "," + 
				//ЗначениеSQL(СокрЛП("990099")) + "," + 
				ЗначениеSQL(стр_экспорт.Серия) + "," + 
				ЗначениеSQL(стр_экспорт.СрокГодности) + "," + 
				
				ЗначениеSQL(стр_экспорт.ЦенаГосРегистрации) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаПроизводителя) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаПоставщикБезНДС) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаПоставщик) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаЗакупБезНДС) + "," + 
				ЗначениеSQL(стр_экспорт.ЦенаЗакуп) + "," + 
				ЗначениеSQL(стр_экспорт.СтавкаНДС) + "," + 
				
				ЗначениеSQL(стр_экспорт.Количество) + "," + 
				ЗначениеSQL(стр_экспорт.Баркод) + "," + 
				
				ЗначениеSQL(стр_экспорт.Номер) + "," + 
				ЗначениеSQL(стр_экспорт.КодАптекиАВЕ) + "," + 
				ЗначениеSQL(стр_экспорт.КодТовараАВЕ) + "," + 
				ЗначениеSQL(стр_экспорт.НаименованиеТовараАВЕ) + "," + 
				ЗначениеSQL(стр_экспорт.Производитель) + "," + 
				ЗначениеSQL(стр_экспорт.ДатаОплаты) + "," + 
				//ENT-1256 +++
				ЗначениеSQL(стр_экспорт.ВхДатаСФ) + "," + 
				ЗначениеSQL(стр_экспорт.ВхДатаНакл)
				//---
				+")";
			Conn.Execute(sql);
		КонецЦикла;
		
		sql = "EXEC ave.P_import_data_Crossdocking;";
		//sql = "EXEC ave.P_import_data_Crossdocking_rollback;";
		RS = Conn.Execute(sql);
		
		Если
			(ТЗ_результат.Колонки.Количество() = 0)
			//И
			//(НЕ (RS.EOF))
		Тогда
			Для каждого Поле ИЗ  RS.Fields Цикл
				Попытка
					ТЗ_результат.Колонки.Добавить(Поле.Name , , );
				Исключение
					ТЗ_результат.Колонки.Добавить("Поле" + Строка(ТЗ_результат.Колонки.Количество()+1) , , Поле.Name);
				КонецПопытки;
			КонецЦикла;				
		Конецесли;
		
		Пока НЕ (RS.EOF) Цикл
			стр_ТЗ_результат = ТЗ_результат.Добавить();
			сч_полей = 0;
			Для каждого Поле ИЗ  RS.Fields Цикл
				сч_полей = сч_полей + 1;
				стр_ТЗ_результат[сч_полей-1] = RS.Fields(сч_полей-1).Value;
			КонецЦикла;				
			RS.MoveNext();
		КонецЦикла;
		RS.Close();
		
		Если ТЗ_результат.Количество() = 0 Тогда
			ЗаписьЛогаОшибок = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
			ЗаписьЛогаОшибок.Объект = "Загрузка накладных (робот)";
			ЗаписьЛогаОшибок.ДатаОшибки = ТекущаяДата();
			ЗаписьЛогаОшибок.ОписаниеОшибки = "Из Ориолы вернулось 0 строк";
			ЗаписьЛогаОшибок.МестоВозникновения = "Экспорт-кроссдокинг.Документ № " + ДокСсылка.Номер +  ",поставщик: " + ДокСсылка.ПоставщикКД;
			ЗаписьЛогаОшибок.Записать();
			СтруктРезультат.Вставить("ОшибкаОтправки",Истина);
			возврат СтруктРезультат;
		КонецЕсли;
		
	Исключение
		МассивСтрокиОшибок.Добавить(стр_экспорт);
		Если
			стр_экспорт = Неопределено
		Тогда
			стр_экспорт = Новый Структура("Номер,ВхНомерНакл", ДокСсылка.Номер, ДокСсылка.ВхНомерНакл);
			sql = " ";
		КонецЕсли;
		
		//sql = "INSERT INTO #CrossdockingError VALUES(" + Формат(стр_экспорт.Номер, "ЧДЦ=; ЧРГ=; ЧН=; ЧГ=") + ", " + ЗначениеSQL(стр_экспорт.ВхНомерНакл) + ", 0, " + ЗначениеSQL(sql) + ")";
		//Сообщить("sql = " + sql);
		//Conn.Execute(sql);
		
		Инфо = ИнформацияОбОшибке();
		Пока Инфо <> Неопределено Цикл
			//ENT-1420 +++
			сч = 1;
			sql = "INSERT INTO #CrossdockingError VALUES(isnull(" + Формат(?(ЗначениеЗаполнено(стр_экспорт.Номер),стр_экспорт.Номер,0), "ЧДЦ=; ЧРГ=; ЧН=; ЧГ=")  + ",0), isnull(" + ЗначениеSQL(?(ЗначениеЗАполнено(стр_экспорт.ВхНомерНакл),стр_экспорт.ВхНомерНакл,"")) + ",""), 0, isnull(" + ЗначениеSQL(?(ЗначениеЗаполнено(Инфо.Описание),Инфо.Описание,"")) + ", ""))";
			//Сообщить("sql (*) = " + sql);
			Для сч = 1 по 3 цикл
				Попытка
					Conn.Execute(sql);
					Прервать;
				Исключение
					ОбщегоНазначения.Задержка(2);
				КонецПопытки;
			КонецЦикла;
			Если Сч = 3 тогда
				Продолжить;
			КонецЕсли; 
			//ENT-1420---
			Инфо = Инфо.Причина;
		КонецЦикла;
	КонецПопытки;
	//На этом закончим транзакцию
	
	// и грабим ошибки, а также делаем в гарантированно поглощаемом исключении все некритические действия 
	// поскольку если процедура отработала успешно, то есть экспорт в БД опта прошел удачно,
	// то нужно обеспечить "корректное" завершение и во внешнем контексте (вызывающем экспорт),
	// иначе, если размещенный ниже "некритический" код вызовет ошибку, то внешний контекст, из-за ошибки
	// выполнения нонкритикал секции не получит
	// сведения об успешном завершении экспорта накладной и будет пробовать экспортировать её повторно,
	// вызывая циклическую ошибку.
	Попытка
		RS = Conn.Execute
		(
			"SELECT DISTINCT  " + ЗначениеSQL(стр_экспорт.Номер) + " as [Номер документа АВЕ] , e.*, p.* FROM #CrossdockingError e LEFT JOIN #preload p ON e.OrderNo = p.OrderNo AND e.anId = p.Id ORDER BY e.OrderNo, e.anId"
		);
		
		Если
			(ТЗ_ошибки_экспорта.Колонки.Количество() = 0)
			И
			(НЕ (RS.EOF))
		Тогда
			Сообщить("Инициализация колонок!");
			Для каждого Поле ИЗ  RS.Fields Цикл
				Попытка
					ТЗ_ошибки_экспорта.Колонки.Добавить(Поле.Name);
				Исключение
					ТЗ_ошибки_экспорта.Колонки.Добавить("Поле" + Строка(ТЗ_ошибки_экспорта.Колонки.Количество()+1) , , Поле.Name);
				КонецПопытки;
			КонецЦикла;				
			//ТЗ_ошибки_экспорта.ВыбратьСтроку();
		Конецесли;
		
		Пока НЕ (RS.EOF) Цикл
			стр_ТЗ_ошибки_экспорта = ТЗ_ошибки_экспорта.Добавить();
			сч_полей = 0;
			Для каждого Поле ИЗ  RS.Fields Цикл
				
				сч_полей = сч_полей + 1;
				//Попытка
				//	стр_ТЗ_ошибки_экспорта[RS.Fields(сч_полей-1).Name] = RS.Fields(сч_полей-1).Value;
				//Исключение
				//	стр_ТЗ_ошибки_экспорта["Поле" + Строка(сч_полей)] = RS.Fields(сч_полей-1).Value;
				//КонецПопытки;	
				стр_ТЗ_ошибки_экспорта[сч_полей-1] = RS.Fields(сч_полей-1).Value;
			КонецЦикла;				
			
			RS.MoveNext();
		КонецЦикла;
		//ТЗ_ошибки_экспорта.ВыбратьСтроку();
		RS.Close();
		Окончание = ТекущаяДата();
		Сообщить(" Окончание: " + Формат(Окончание, "ДФ='yyyyMMdd HHmmss'"));
		Сообщить(" Продолжительность: " + Формат(Окончание - Начало, "ДФ='yyyyMMdd HHmmss'"));
		Conn.Close();
		Conn = Неопределено;
		
	Исключение
		Conn.Close();
		Conn = Неопределено;
		
		ИнфоОшибка = ИнформацияОбОшибке();
		Сообщить("Ошибка при выполнении некритической секции кода! " + ИнфоОшибка.Описание);
		Если
			(ТЗ_ошибки_экспорта.Колонки.Количество() = 0)
		Тогда
			ТЗ_ошибки_экспорта.Колонки.Добавить("anId");
			ТЗ_ошибки_экспорта.Колонки.Добавить("OrderNo", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
			ТЗ_ошибки_экспорта.Колонки.Добавить("errcode");
			ТЗ_ошибки_экспорта.Колонки.Добавить("errdescr", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
		КонецЕсли;
		стр_ТЗ_ошибки_экспорта = ТЗ_ошибки_экспорта.Добавить();
		стр_ТЗ_ошибки_экспорта.OrderNo = ДокСсылка.ВхНомерНакл;
		стр_ТЗ_ошибки_экспорта.errdescr = ИнфоОшибка.Описание;
	КонецПопытки;
	
	// поскольку если процедура отработала успешно, то есть экспорт в БД опта прошел удачно,
	// то нужно обеспечить "корректное" завершение и во внешнем контексте (вызывающем экспорт),
	// иначе, если размещенный ниже "некритический" код вызовет ошибку, то внешний контекст, из-за ошибки
	// выполнения нонкритикал секции не получит
	// сведения об успешном завершении экспорта накладной и будет пробовать экспортировать её повторно,
	// вызывая циклическую ошибку.
	// ну а если экспорт прошел неудачно, но что-то случилось после транзакции экспорта, например, на стадии
	//получения описания ошибок, закрытия соединения с БД и т.д., то потеря этих данных неприятна, но некритична.
	
	//Попытка
	//	Если
	//		ТЗ_ошибки_экспорта.Количество() > 0
	//	Тогда
	//		ДокументОшибки =  Новый ТабличныйДокумент;
	//		ДокументОшибки.ИтогиСнизу = Ложь;
	//		ДокументОшибки.ИтогиСправа = Ложь;
	//		ДокументОшибки.ФиксацияСлева = 0;
	//		ДокументОшибки.ФиксацияСверху = 0;
	//		
	//		Построитель_ = Новый ПостроительОтчета;
	//		ИсточникДанных_ = Новый ОписаниеИсточникаДанных(ТЗ_ошибки_экспорта);
	//		Построитель_.ИсточникДанных = ИсточникДанных_;
	//		Построитель_.ВыводитьЗаголовокОтчета = Ложь;
	//		Построитель_.ВыводитьОбщиеИтоги = Ложь;
	//		Построитель_.ВыводитьПодвалОтчета = Ложь;
	//		Построитель_.ВыводитьПодвалТаблицы = Ложь;
	//		Построитель_.Вывести(ДокументОшибки);
	//		ДокументОшибки.Область(1,1,ДокументОшибки.ВысотаТаблицы,1).ШиринаКолонки = 20;
	//		ДокументОшибки.УдалитьОбласть(ДокументОшибки.Область(1,1,ДокументОшибки.ВысотаТаблицы,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	//		сч_полей = 0;
		//	Для каждого кол ИЗ ТЗ_связки_кодов.Колонки Цикл
		//		сч_полей = сч_полей + 1;
		//		ДокументОшибки.Область(1,сч_полей, 1, сч_полей).Текст = ?(СтрДлина(Кол.Заголовок) = 0, Кол.Имя, Кол.Заголовок);
		//		//ТЗ_связки_кодов.Колонки.Добавить("Поле" + Строка(ТЗ_связки_кодов.Колонки.Количество()+1) , , Поле.Name);
		//	КонецЦикла;				
	//		//Если ПоказыватьТабДоки Тогда 
	//		//	ДокументОшибки.Показать(); 
	//		//КонецЕсли;
	//		//ДокументОшибки.Записать(папкаОбмена + "ошибки_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss") + ".xls", ТипФайлаТабличногоДокумента.XLS);
	//		//ДокументОшибки.Записать(папкаОбмена + ТекущаяНакладная + ".txt", ТипФайлаТабличногоДокумента.ANSITXT);
	//	КонецЕсли;
	//	
	//	Окончание = ТекущаяДата();
	//	Сообщить(" Окончание: " + Формат(Окончание, "ДФ='yyyyMMdd HHmmss'"));
	//	Сообщить(" Продолжительность: " + Формат(Окончание - Начало, "ДФ='yyyyMMdd HHmmss'"));
	//Исключение
	//	ИнфоОшибка = ИнформацияОбОшибке();
	//	Сообщить("Ошибка при выполнении некритической секции кода! " + ИнфоОшибка.Описание);
	//	Если
	//		(ТЗ_ошибки_экспорта.Колонки.Количество() = 0)
	//	Тогда
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("anId");
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("OrderNo", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("errcode");
	//		ТЗ_ошибки_экспорта.Колонки.Добавить("errdescr", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСТроки(255)));
	//	КонецЕсли;
	//	стр_ТЗ_ошибки_экспорта.errdescr = ИнфоОшибка.Описание;
	//КонецПопытки;
	
	Возврат СтруктРезультат;
	
КонецФункции



Функция ЗначениеSQL(парам) Экспорт
	Если
		ТипЗнч(парам) = Тип("Строка")
	Тогда
		//Возврат ?(СтрДлина(парам) > 0,  "'" + СтрЗаменить(парам, "'", "''") + "'", "NULL" );
		Возврат "'" + СтрЗаменить(парам, "'", "''") + "'";
	ИначеЕсли                                                                   
		ТипЗнч(парам) = Тип("Дата")
	Тогда
		 Возврат ?(ЗначениеЗаполнено(парам),  "'" + Формат(парам, "ДФ=yyyyMMdd") + "'", "NULL" );
	ИначеЕсли
		ТипЗнч(парам) = Тип("Число")
	Тогда
		 Возврат ?(ЗначениеЗаполнено(парам),  Формат(парам,"ЧДЦ=4; ЧРД=.; ЧН=; ЧГ=" ), "0" );
	ИначеЕсли
		парам = неопределено
	Тогда
		Возврат "NULL";
	ИначеЕсли
		парам = NULL
	Тогда
		Возврат "NULL";
	Иначе
		 Возврат парам;
	КонецЕсли;
КонецФункции

Процедура ОптОстаткиПродажиИнтернетЗаказы(режимОткатить = Ложь, режимПоказатьДанные = Ложь) Экспорт
	
	ЗаписьЖурналаРегистрации("ОптОстаткиПродажиИнтернетЗаказы", УровеньЖурналаРегистрации.Информация,,"Начало","Начало");

	Conn = Новый COMОбъект ("ADODB.Connection");
	Conn.CommandTimeout = 2400;

	МенЗап = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();

	МенЗап.ИмяОбъекта = "строка_соединения_БД_опт_sqlncli";
	МенЗап.НаименованиеНастройки = "строка_соединения_БД_опт_sqlncli";
	МенЗап.Прочитать();
	Если
		МенЗап.Выбран()
	Тогда
		СтрокаСоединения = Мензап.СохраненнаяНастройка.Получить();
	Иначе
		ВызватьИсключение "Не задана СохраненнаяНастройка - строка соединения с БД оптового учета в формате sqlncli!"
		+ Символы.ПС + Символы.ВК
		+"(запись [строка_соединения_БД_опт_sqlncli] в регистре СохраненныеНастройки)";
	КонецЕсли;

	Conn.Open(СтрокаСоединения);

	Conn.Execute
	(
		"
		|SELECT
		|	99999999 as KodTax2,
		|	99999999 retailitemcode,
		|	CAST('' as varchar(255)) retailitemname
		|INTO #wholesaleretailcodes
		|WHERE
		|	1 = 0		
	    |"
	);
	
	// получение связок кодов товаров для целевой сисетмы - ДжиДиПи 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
		|	СвязкиТовараСПоставщиком.ТоварФирмыКод КАК ТоварФирмыКод,
		|	СвязкиТовараСПоставщиком.КодТовараПоставщика КАК КодТовараПоставщика
		|ИЗ
		|	Справочник.Поставщики КАК Поставщики
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|(
		|	ВЫБРАТЬ
		|			СвязкиТовараСПоставщиком.Поставщик КАК Поставщик,
		|			СвязкиТовараСПоставщиком.ТоварФирмы КАК ТоварФирмы,
		|			СвязкиТовараСПоставщиком.ТоварФирмы.Код КАК ТоварФирмыКод,
		|			СвязкиТовараСПоставщиком.КодТовараПоставщика КАК КодТовараПоставщика,
		|			СвязкиТовараСПоставщиком.ПометкаУдаления КАК ПометкаУдаления
		|	ИЗ
		|		Справочник.СвязкиТовараСПоставщиком КАК СвязкиТовараСПоставщиком
		|) КАК СвязкиТовараСПоставщиком
		|ПО
		|	(СвязкиТовараСПоставщиком.Поставщик В (Поставщики.Ссылка, Поставщики.ПоставщикСвязок.Ссылка))
		|	И
		|	(СвязкиТовараСПоставщиком.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	Поставщики.Код = 3055
		|	И НЕ СвязкиТовараСПоставщиком.КодТовараПоставщика ПОДОБНО ""%[^0-9]%""
//		|	И СвязкиТовараСПоставщиком.ТоварФирмы.Код = 20575
//		|	И СвязкиТовараСПоставщиком.КодТовараПоставщика = ""114334""
		//|УПОРЯДОЧИТЬ ПО СвязкиТовараСПоставщиком.ТоварФирмы.Код
		|";
	Сообщить(" НачалоПередачаКодовРозницы: " + ТекущаяДата());	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ_связки_кодов = РезультатЗапроса.Выгрузить();
	Сообщить("ТЗ_связки_кодов.Количество()" + ТЗ_связки_кодов.Количество());
	//ТЗ_связки_кодов.ВыбратьСтроку("ТЗ_связки_кодов");
	sql_prefix = "INSERT INTO #wholesaleretailcodes SELECT X.* FROM (VALUES  ";
	sql = sql_prefix;
	ТД = Новый ТекстовыйДокумент;
	ТД.ДобавитьСтроку(sql_prefix);
	ДлинаСтр = 0;
	Для каждого Стр Из ТЗ_связки_кодов Цикл
		Если
			ДлинаСтр >= 16000
		Тогда
			sql = ТД.ПолучитьТекст();
			sql = Лев(sql, СтрДлина(sql)-4);
			sql = sql + ") AS X (A, B, C)";
			Conn.Execute(sql);
			ТД.Очистить();
			ТД.ДобавитьСтроку(sql_prefix);
			ДлинаСтр = 0;
		Иначе
			Если
				СтрДлина(стр.КодТовараПоставщика) > 0
			Тогда
				с = 
					"(" 
					+ стр.КодТовараПоставщика + ","
					//+ ADHOC.ЗначениеSQL(стр.ТоварФирмыКод) + "," + 
					+ Формат(стр.ТоварФирмыКод, "ЧДЦ=; ЧРГ=' '; ЧН=; ЧГ=0") + ","
					//ADHOC.ЗначениеSQL(стр.ТоварФирмы.Наименование)
					+"NULL"
					+")," + Символы.ВК + Символы.ПС;
				ТД.ДобавитьСтроку(с);
				ДлинаСтр = ДлинаСтр + СтрДлина(с);
			КонецЕсли;//
		КонецЕсли;	
		//ОбработкаПрерыванияПользователя();
	КонецЦикла; //Для каждого Стр Из ДанныеТЗ Цикл
	Если
		(СтрДлина(sql) < 16000)
		И
		(СтрДлина(sql) > СтрДлина(sql_prefix))
	Тогда	
		sql = Лев(sql, СтрДлина(sql)-3);
		sql = sql + ") AS X (A, B, C)";
		Сообщить(" sql: " + sql);
		Сообщить(" Начало запроса: " + ТекущаяДата());
		Conn.Execute(sql);
		Сообщить(" Окончание запроса: " + ТекущаяДата());
		sql = sql_prefix;
	КонецЕсли;
	#Если Клиент Тогда
		Сообщить(" ОкончаниеПередачаКодовРозницы: " + ТекущаяДата());
	#КонецЕсли

	ТЗ_результат = Новый ТаблицаЗначений;
	
	Начало = ТекущаяДата();
	#Если Клиент Тогда
		Сообщить(" Начало: " + ТекущаяДата());
	#КонецЕсли

	RS = Новый COMОбъект ("ADODB.RecordSet");
	RS.CursorLocation = 2;
	RS.CursorType = 0;
	RS.LockType = 1;
	
	sql = "EXEC [WebStore].[GetWebStockDailyDataFullHist_];";
	Сообщить("sql:" + sql);
	RS = Conn.Execute(sql);
	
	
	Если
		(ТЗ_результат.Колонки.Количество() = 0)
		//И
		//(НЕ (RS.EOF))
	Тогда
		Массив = Новый Массив;
		Для каждого Поле ИЗ  RS.Fields Цикл
			//Сообщить("Поле.Name = " + Поле.Name + "; Type = " + Поле.Type);
			
			Если Поле.Type = 200 Тогда
				Массив.Очистить();
				КС = Новый КвалификаторыСтроки(20);
				Массив.Добавить(Тип("Строка"));
				ОписаниеТипов = Новый ОписаниеТипов(Массив, , ,КС);
			ИначеЕсли
				Поле.Type = 3
			Тогда
				КЧ = Новый КвалификаторыЧисла(6,0);
				Массив.Очистить();
				Массив.Добавить(Тип("Число"));
				ОписаниеТипов = Новый ОписаниеТипов(Массив, , ,КЧ);				
			ИначеЕсли
				Поле.Type = 131
			Тогда
				КЧ = Новый КвалификаторыЧисла(12,4);
				Массив.Очистить();
				Массив.Добавить(Тип("Число"));
				ОписаниеТипов = Новый ОписаниеТипов(Массив, , ,КЧ);				
			ИначеЕсли
				Поле.Type = 135
			Тогда
				Массив.Очистить();
				КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
				Массив.Добавить(Тип("Дата"));
				ОписаниеТипов = Новый ОписаниеТипов(Массив, , ,КД);				
			КонецЕсли;
					
			Попытка
				ТЗ_результат.Колонки.Добавить(Поле.Name , ОписаниеТипов, );
			Исключение
				ТЗ_результат.Колонки.Добавить("Поле" + Строка(ТЗ_результат.Колонки.Количество()+1) , ОписаниеТипов, Поле.Name);
			КонецПопытки;
		КонецЦикла;				
	Конецесли;
		
	Пока НЕ (RS.EOF) Цикл
		стр_ТЗ_результат = ТЗ_результат.Добавить();
		сч_полей = 0;
		Для каждого Поле ИЗ  RS.Fields Цикл
			сч_полей = сч_полей + 1;
			Попытка
				стр_ТЗ_результат[RS.Fields(сч_полей-1).Name] = RS.Fields(сч_полей-1).Value;
			Исключение
				стр_ТЗ_результат["Поле" + Строка(сч_полей)] = RS.Fields(сч_полей-1).Value;
			КонецПопытки;
		КонецЦикла;				
		RS.MoveNext();
	КонецЦикла;
	RS.Close();
	//ТЗ_результат.ВыбратьСтроку("ТЗ_результат");
	#Если Клиент Тогда
		Если
			режимПоказатьДанные
		Тогда
			ДокументРезультат =  Новый ТабличныйДокумент;
			ДокументРезультат.ИтогиСнизу = Ложь;
			ДокументРезультат.ИтогиСправа = Ложь;
			ДокументРезультат.ФиксацияСлева = 0;
			ДокументРезультат.ФиксацияСверху = 0;
			
			Построитель_ = Новый ПостроительОтчета;
			ИсточникДанных_ = Новый ОписаниеИсточникаДанных(ТЗ_результат);
			Построитель_.ИсточникДанных = ИсточникДанных_;
			Построитель_.ВыводитьЗаголовокОтчета = Ложь;
			Построитель_.ВыводитьОбщиеИтоги = Ложь;
			Построитель_.ВыводитьПодвалОтчета = Ложь;
			Построитель_.ВыводитьПодвалТаблицы = Ложь;
			Построитель_.Вывести(ДокументРезультат);
			ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1).ШиринаКолонки = 20;
			
			//ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			сч_полей = 0;
			Для каждого кол ИЗ ТЗ_результат.Колонки Цикл
				сч_полей = сч_полей + 1;
				ДокументРезультат.Область(1,сч_полей, 1, сч_полей).Текст = ?(СтрДлина(Кол.Заголовок) = 0, Кол.Имя, Кол.Заголовок);
			КонецЦикла;				
			ДокументРезультат.Показать("ТЗ_результат");
		КонецЕсли; //режимПоказатьДанные	
	#КонецЕсли
	//Conn.Close();
	//Conn = Неопределено;
	
	Окончание = ТекущаяДата();
	Сообщить(" Окончание: " + Формат(Окончание, "ДФ='yyyyMMdd HHmmss'"));
	Сообщить(" Продолжительность: " + Формат(Окончание - Начало, "ДФ='yyyyMMdd HHmmss'"));
	//ТЗ_результат.ВыбратьСтроку("РЕЗУЛЬТАТ");	
	
	ЗапросОстаткиТовараИнтернетАптек = Новый Запрос;
	ЗапросОстаткиТовараИнтернетАптек.Текст = 
	
	"
	|ВЫБРАТЬ
	|	retailitemcode
	|	,KodTax2
	|	,QtyStock
	|	,QtySale
	|	,QtyStockIn
	|	,QtyStockOut
	|	,QtyStockChange
	|	,TotalCost
	|	,TotalRevenue
	|	,DT
	|	,UpdateDT
	|ПОМЕСТИТЬ ВТОстаткиТовараОпт
	|ИЗ
	|	&ТЗОстаткиТовараОпт КАК ТЗОстаткиТовараОпт
	|ИНДЕКСИРОВАТЬ ПО retailitemcode, DT, KodTax2
	|;
	|ВЫБРАТЬ
	|    ЕСТЬNULL(ОстаткиТовараИнтернетАптек.Период, ПродажиПоИнтернетАптекам.Период) КАК Период,
	|    ЕСТЬNULL(ОстаткиТовараИнтернетАптек.КодАптеки, ПродажиПоИнтернетАптекам.КодАптеки) КАК КодАптеки,
	|    ЕСТЬNULL(ОстаткиТовараИнтернетАптек.КодТовара, ПродажиПоИнтернетАптекам.КодТовара) КАК КодТовараРозница,
	|    ЕСТЬNULL(ОстаткиТовараИнтернетАптек.Регистратор, ПродажиПоИнтернетАптекам.Регистратор) КАК Регистратор,
	|    ОстаткиТовараИнтернетАптек.КоличествоОборот КАК КоличествоОстатки,
	|    ПродажиПоИнтернетАптекам.КоличествоОборот КАК КоличествоПродажи,
	|    ПродажиПоИнтернетАптекам.СуммаПродажЗакупСНДСОборот КАК СуммаПродажЗакупСНДСОборот,
	|    ПродажиПоИнтернетАптекам.СуммаПродажРознОборот КАК СуммаПродажРознОборот
	|ПОМЕСТИТЬ
	|	ВТОстаткиТовараИнтернетАптек
	|ИЗ
	|    РегистрНакопления.ОстаткиТовараИнтернетАптек.Обороты(, , Регистратор, ) КАК ОстаткиТовараИнтернетАптек	
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|    РегистрНакопления.ПродажиПоИнтернетАптекам.Обороты(, , Регистратор, ) КАК ПродажиПоИнтернетАптекам	
	|ПО
	|    ПродажиПоИнтернетАптекам.КодАптеки = ОстаткиТовараИнтернетАптек.КодАптеки
	|    И ПродажиПоИнтернетАптекам.КодТовара = ОстаткиТовараИнтернетАптек.КодТовара
	|    И ПродажиПоИнтернетАптекам.Период = ОстаткиТовараИнтернетАптек.Период
	|ГДЕ
	|	ЕСТЬNULL(ОстаткиТовараИнтернетАптек.КодАптеки, ПродажиПоИнтернетАптекам.КодАптеки) = 4622	
//	|	И
//	|	ЕСТЬNULL(ОстаткиТовараИнтернетАптек.Регистратор.Номер, ПродажиПоИнтернетАптекам.Регистратор.Номер) = ""000000443""
	
	 
//	|   И
//	|	ЕСТЬNULL(ОстаткиТовараИнтернетАптек.КодТовара, ПродажиПоИнтернетАптекам.КодТовара) = 20575
	|ИНДЕКСИРОВАТЬ ПО Период, КодТовараРозница
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(DT, Период) КАК ДатаУчета
	|	,
	|	ЕСТЬNULL(retailitemcode, КодТовараРозница) КАК КодТовара
	|	,
	|	ВТОстаткиТовараИнтернетАптек.*
	|	,
	|	ВТОстаткиТовараОпт.*
	|	,
	|	ВЫБОР
	|		КОГДА
	|			(ЕСТЬNULL(QtyStockChange, 0) = ЕСТЬNULL(КоличествоОстатки, 0))
	|			И
	|			(ЕСТЬNULL(QtySale, 0) = ЕСТЬNULL(КоличествоПродажи, 0))
	|		ТОГДА 0 
	|		ИНАЧЕ 1 
	|	КОНЕЦ КАК Несовпадение
	|ИЗ
	|	ВТОстаткиТовараИнтернетАптек
	|ПОЛНОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
//	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ
	|		retailitemcode
	|		,DT
	|		,СУММА(QtyStock) КАК QtyStock 
	|		,СУММА(QtySale) КАК QtySale
	|		,СУММА(QtyStockIn) КАК QtyStockIn
	|		,СУММА(QtyStockOut) КАК QtyStockOut
	|		,СУММА(QtyStockChange) КАК QtyStockChange
	|		,СУММА(TotalCost) КАК TotalCost
	|		,СУММА(TotalRevenue) КАК TotalRevenue
	|	ИЗ
	|		ВТОстаткиТовараОпт
	|	СГРУППИРОВАТЬ ПО
	|		retailitemcode
	|		,DT
	|) КАК ВТОстаткиТовараОпт
	|ПО
	|	ВТОстаткиТовараИнтернетАптек.Период = ВТОстаткиТовараОпт.DT
	|	И
	|   ВТОстаткиТовараИнтернетАптек.КодТовараРозница = ВТОстаткиТовараОпт.retailitemcode
	|ГДЕ
	//|	ВЫБОР КОГДА ЕСТЬNULL(QtyStockChange, 0) = ЕСТЬNULL(КоличествоОстатки, 0) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ = 1
	|	ВЫБОР
	|		КОГДА
	|			(ЕСТЬNULL(QtyStockChange, 0) = ЕСТЬNULL(КоличествоОстатки, 0))
	|			И
	|			(ЕСТЬNULL(QtySale, 0) = ЕСТЬNULL(КоличествоПродажи, 0))
	|		ТОГДА 0 
	|		ИНАЧЕ 1 
	|	КОНЕЦ = 1
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(DT, Период), ЕСТЬNULL(КодТовараРозница, retailitemcode)
	|
	|
	|";
	
	ЗапросОстаткиТовараИнтернетАптек.УстановитьПараметр("ТЗОстаткиТовараОпт", ТЗ_результат);
	РезультатЗапроса = ЗапросОстаткиТовараИнтернетАптек.Выполнить();
	ТЗ_расхождения = РезультатЗапроса.Выгрузить();
	Сообщить("ТЗ_расхождения.Количество()" + ТЗ_расхождения.Количество());
	//ТЗ_расхождения.ВыбратьСтроку("ЗапросОстаткиТовараИнтернетАптек");
	#Если Клиент Тогда
		Если
			режимПоказатьДанные
		Тогда
		
			ДокументРезультат =  Новый ТабличныйДокумент;
			ДокументРезультат.ИтогиСнизу = Ложь;
			ДокументРезультат.ИтогиСправа = Ложь;
			ДокументРезультат.ФиксацияСлева = 0;
			ДокументРезультат.ФиксацияСверху = 0;
			
			Построитель_ = Новый ПостроительОтчета;
			ИсточникДанных_ = Новый ОписаниеИсточникаДанных(ТЗ_расхождения);
			Построитель_.ИсточникДанных = ИсточникДанных_;
			Построитель_.ВыводитьЗаголовокОтчета = Ложь;
			Построитель_.ВыводитьОбщиеИтоги = Ложь;
			Построитель_.ВыводитьПодвалОтчета = Ложь;
			Построитель_.ВыводитьПодвалТаблицы = Ложь;
			Построитель_.Вывести(ДокументРезультат);
			ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1).ШиринаКолонки = 20;
			ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			сч_полей = 0;
			Для каждого кол ИЗ ТЗ_расхождения.Колонки Цикл
				сч_полей = сч_полей + 1;
				ДокументРезультат.Область(1,сч_полей, 1, сч_полей).Текст = ?(СтрДлина(Кол.Заголовок) = 0, Кол.Имя, Кол.Заголовок);
			КонецЦикла;				
			ДокументРезультат.Показать("ТЗ_расхождения ДО");
		КонецЕсли; //режимПоказатьДанные
	#КонецЕсли

	ЗапросДатаУчетаРегистратор = Новый Запрос;
	ЗапросДатаУчетаРегистратор.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатаУчета
	|	,
	|	Регистратор
	|ПОМЕСТИТЬ ТЗ_ДатаУчетаРегистратор 	
	|ИЗ
	|	&ТЗ_расхождения КАК ТЗ_ДатаУчетаРегистратор_
	|;
	|ВЫБРАТЬ
	|	ТЗ_ДатаУчетаРегистратор01.ДатаУчета
	|	,
	|	ТЗ_ДатаУчетаРегистратор02.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ДатаУчета ИЗ ТЗ_ДатаУчетаРегистратор) КАК ТЗ_ДатаУчетаРегистратор01
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТЗ_ДатаУчетаРегистратор КАК ТЗ_ДатаУчетаРегистратор02
	|ПО
	|	ТЗ_ДатаУчетаРегистратор02.ДатаУчета = ТЗ_ДатаУчетаРегистратор01.ДатаУчета
	|	И
	|	(НЕ ТЗ_ДатаУчетаРегистратор02.Регистратор ЕСТЬ NULL)
//	|ГДЕ
//	|	ТЗ_ДатаУчетаРегистратор01.ДатаУчета = ДАТАВРЕМЯ (2017,08,22)
	|УПОРЯДОЧИТЬ ПО
	|	ТЗ_ДатаУчетаРегистратор01.ДатаУчета, ТЗ_ДатаУчетаРегистратор02.Регистратор
	|";
	ЗапросДатаУчетаРегистратор.УстановитьПараметр("ТЗ_расхождения", ТЗ_расхождения);
	РезультатЗапроса = ЗапросДатаУчетаРегистратор.Выполнить();
	ТЗ_ДатаУчетаРегистратор = РезультатЗапроса.Выгрузить();	
	
	#Если Клиент Тогда
		Сообщить("Начало обработки изменений данных: " + ТекущаяДата());
	#КонецЕсли

	НачатьТранзакцию();
	Для каждого Стр Из ТЗ_ДатаУчетаРегистратор Цикл
		Если
			Стр.Регистратор = NULL
		Тогда
			Сообщить(">>" + Стр.ДатаУчета);
			Док = Документы.ДвижениеТовараПоИнтернетАптекам.СоздатьДокумент();
			Док.Дата = Стр.ДатаУчета;
			Док.Аптека = Справочники.МестаХранения.НайтиПоКоду(4622);
			
			ТЗТ = Док.Товар;
			//ОтборРегистратор = Новый Структура("Регистратор", Стр.Регистратор);
			Отбор_ТЗ_расхождения = Новый Структура("ДатаУчета", Стр.ДатаУчета);
			Массив_ТЗ_расхождения = ТЗ_расхождения.НайтиСтроки(Отбор_ТЗ_расхождения);
			Для Каждого элемент_ТЗ_расхождения из Массив_ТЗ_расхождения Цикл
				ОтборКодТовара = Новый Структура("КодТовара", элемент_ТЗ_расхождения.КодТовара);
				МассивТовар = ТЗТ.НайтиСтроки(ОтборКодТовара);
				Для Каждого элементТовар из МассивТовар Цикл
					ТЗТ.Удалить(элементТовар);
				КонецЦикла;
				
				ОтборДанныеОптовогоУчета = Новый Структура("DT, retailitemcode", Стр.ДатаУчета, элемент_ТЗ_расхождения.КодТовара);
				МассивДанныеОптовогоУчета = ТЗ_результат.НайтиСтроки(ОтборДанныеОптовогоУчета);
				Для Каждого элементДанныеОптовогоУчета из МассивДанныеОптовогоУчета Цикл
					стрТовар =  ТЗТ.Добавить();
					стрТовар.КодТовара = элементДанныеОптовогоУчета.retailitemcode;
					стрТовар.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(элементДанныеОптовогоУчета.retailitemcode);
					стрТовар.КодТовараGDP = элементДанныеОптовогоУчета.KodTax2;
					стрТовар.КоличествоОборот = элементДанныеОптовогоУчета.QtyStockChange;
					стрТовар.КоличествоПродаж = элементДанныеОптовогоУчета.QtySale;
					стрТовар.СуммаПродажЗакупСНДС = элементДанныеОптовогоУчета.TotalCost;
					стрТовар.СуммаПродажРозн = элементДанныеОптовогоУчета.TotalRevenue;
				КонецЦикла;
			КонецЦикла;
			Док.Записать(РежимЗаписиДокумента.Проведение);
			//Ф = Док.ПолучитьФорму();
			//Ф.Открыть();
			
			
		Иначе
			Док = Стр.Регистратор.ПолучитьОбъект();
			Сообщить(">>>" + Стр.ДатаУчета + " / " + Док.Ссылка);
			//Док = Документы.ДвижениеТовараПоИнтернетАптекам.СоздатьДокумент();
			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ТЗТ = Док.Товар;
			//ОтборРегистратор = Новый Структура("Регистратор", Стр.Регистратор);
			Отбор_ТЗ_расхождения = Новый Структура("ДатаУчета", Стр.ДатаУчета);
			Массив_ТЗ_расхождения = ТЗ_расхождения.НайтиСтроки(Отбор_ТЗ_расхождения);
			Для Каждого элемент_ТЗ_расхождения из Массив_ТЗ_расхождения Цикл
				ОтборКодТовара = Новый Структура("КодТовара", элемент_ТЗ_расхождения.КодТовара);
				МассивТовар = ТЗТ.НайтиСтроки(ОтборКодТовара);
				Для Каждого элементТовар из МассивТовар Цикл
					ТЗТ.Удалить(элементТовар);
				КонецЦикла;
				
				ОтборДанныеОптовогоУчета = Новый Структура("DT, retailitemcode", Стр.ДатаУчета, элемент_ТЗ_расхождения.КодТовара);
				МассивДанныеОптовогоУчета = ТЗ_результат.НайтиСтроки(ОтборДанныеОптовогоУчета);
				Для Каждого элементДанныеОптовогоУчета из МассивДанныеОптовогоУчета Цикл
					стрТовар =  ТЗТ.Добавить();
					стрТовар.КодТовара = элементДанныеОптовогоУчета.retailitemcode;
					стрТовар.Товар = Справочники.АССОРТИМЕНТНЫЙ_ПЛАН.НайтиПоКоду(элементДанныеОптовогоУчета.retailitemcode);
					стрТовар.КодТовараGDP = элементДанныеОптовогоУчета.KodTax2;
					стрТовар.КоличествоОборот = элементДанныеОптовогоУчета.QtyStockChange;
					стрТовар.КоличествоПродаж = элементДанныеОптовогоУчета.QtySale;
					стрТовар.СуммаПродажЗакупСНДС = элементДанныеОптовогоУчета.TotalCost;
					стрТовар.СуммаПродажРозн = элементДанныеОптовогоУчета.TotalRevenue;
				КонецЦикла;
			КонецЦикла;
			Док.Записать(РежимЗаписиДокумента.Проведение);
			//Ф = Док.ПолучитьФорму();
			//Ф.Открыть();
			
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
		Сообщить(" Окончание обработки изменений данных: " + ТекущаяДата());
	#КонецЕсли
	
	#Если Клиент Тогда
	Если
		режимПоказатьДанные 
	Тогда
		ЗапросОстаткиТовараИнтернетАптек.УстановитьПараметр("ТЗОстаткиТовараОпт", ТЗ_результат);
		РезультатЗапроса = ЗапросОстаткиТовараИнтернетАптек.Выполнить();
		ТЗ_расхождения = РезультатЗапроса.Выгрузить();
		Сообщить("ТЗ_расхождения.Количество()" + ТЗ_расхождения.Количество());
		//ТЗ_расхождения.ВыбратьСтроку("ЗапросОстаткиТовараИнтернетАптек");
		
		ДокументРезультат =  Новый ТабличныйДокумент;
		ДокументРезультат.ИтогиСнизу = Ложь;
		ДокументРезультат.ИтогиСправа = Ложь;
		ДокументРезультат.ФиксацияСлева = 0;
		ДокументРезультат.ФиксацияСверху = 0;
		
		Построитель_ = Новый ПостроительОтчета;
		ИсточникДанных_ = Новый ОписаниеИсточникаДанных(ТЗ_расхождения);
		Построитель_.ИсточникДанных = ИсточникДанных_;
		Построитель_.ВыводитьЗаголовокОтчета = Ложь;
		Построитель_.ВыводитьОбщиеИтоги = Ложь;
		Построитель_.ВыводитьПодвалОтчета = Ложь;
		Построитель_.ВыводитьПодвалТаблицы = Ложь;
		Построитель_.Вывести(ДокументРезультат);
		ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1).ШиринаКолонки = 20;
		ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		сч_полей = 0;
		Для каждого кол ИЗ ТЗ_расхождения.Колонки Цикл
			сч_полей = сч_полей + 1;
			ДокументРезультат.Область(1,сч_полей, 1, сч_полей).Текст = ?(СтрДлина(Кол.Заголовок) = 0, Кол.Имя, Кол.Заголовок);
		КонецЦикла;				
		ДокументРезультат.Показать("ТЗ_расхождения ПОСЛЕ");
	КонецЕсли; //режимПоказатьДанные
	#КонецЕсли
//-------------------
	
	Если режимОткатить Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	ЗаписьЖурналаРегистрации("ОптОстаткиПродажиИнтернетЗаказы", УровеньЖурналаРегистрации.Информация,,"Окончание","Окончание");
	Сообщить(" Окончание: " + ТекущаяДата());	
	
КонецПроцедуры
