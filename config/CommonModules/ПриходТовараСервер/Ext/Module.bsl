Процедура СоздатьЗаказПокупателю(Док,Шапка)
	
	//Если ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",Док.Ссылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ЗаказПокупателя = Документы.ЗаказПокупателя.СоздатьДокумент();
		ЗаказПокупателя.Дата				= Док.Дата;
		Если Шапка.Свойство("ДатаЗаказа") Тогда     //добавлено по WO 43771  24.07.2017
			Если НЕ Шапка.ДатаЗаказа = Дата(1,1,1) Тогда
				ЗаказПокупателя.Дата = Шапка.ДатаЗаказа + (ТекущаяДата() - НачалоДня(ТекущаяДата()));
			КонецЕсли;
		КонецЕсли;
		//ЗаказПокупателя.Дата				= Док.Дата;
		ЗаказПокупателя.ДокументОснование	= Док.Ссылка;
		ЗаказПокупателя.ИсточникИнтернетЗаказа = Док.ИсточникИнтернетЗаказа;
		ЗаказПокупателя.КлиентИнтернетЗаказа = Док.КлиентИнтернетЗаказа;
		ЗаказПокупателя.НомерИнтернетЗаказа = Док.НомерИнтернетЗаказа;
		ЗаказПокупателя.СтатусДокАптеки		= Перечисления.СтатусДокАптеки.Неопределено;
		//ENT-647+++
			ЗаказПокупателя.ТорговоеПриложение = Шапка.ТорговоеПриложение;
		//---
		
		ЗаказПокупателя.Склад				= Док.Склад;
		ЗаказПокупателя.СуммаАванса			= Шапка.СуммаАванса;
		ЗаказПокупателя.Телефон				= Док.КлиентИнтернетЗаказа.Телефон;
		ЗаказПокупателя.ТипЗаказа			= Перечисления.ИЗ_Типы.ПрямойЧерезСклад;
		ЗаказПокупателя.ДатаОкончанияЖизниЗаказа = ТекущаяДата() + Док.ИсточникИнтернетЗаказа.ВремяЖизниЗаказа*60*60;
		ЗаказПокупателя.СтатусЗаказаПокупателя = Справочники.СтатусыЗаказаПокупателя.SHIPPED;
		ДокСсылка = ЗаказПокупателя.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			ДокСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку();
			ЗаказПокупателя.УстановитьСсылкуНового(ДокСсылка);
		КонецЕсли;
		ЗаказПокупателя.ИДДокументаАптеки	= XMLСтрока(ДокСсылка);
		ЗаказПокупателя.УстановитьНовыйНомер();
		
		КодБезКС = "22"+Формат(Число(ЗаказПокупателя.Номер), "ЧЦ=10; ЧВН=; ЧГ=0");

		Если ЗначениеЗаполнено(ЗаказПокупателя.ИсточникИнтернетЗаказа) Тогда
			ЗаказПокупателя.ПодборПартийВАРМ = ЗаказПокупателя.ИсточникИнтернетЗаказа.ПодборПартийВАРМ;
		КонецЕсли;
		ЗаказПокупателя.ШКЗаказа = ВычислитьКонтрольнуюСумму(КодБезКС);
		
		//==>ENT-1352.Коробка. 2019.03.26
		Если Шапка.Свойство("КурьерскаяДоставка") Тогда
			
			Если НРег(Шапка.КурьерскаяДоставка) = "курьерская доставка" Тогда
				
				ЗаказПокупателя.КурьерскаяДоставка = Истина;
				
			КонецЕсли; 
		
		КонецЕсли;
		//<==ENT-1352.Коробка. 2019.03.26
		
		ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	//КонецЕсли;
	
	          
КонецПроцедуры


Процедура УЗ_ПроверитьИОбновитьДанныеПартии(ДокОбъект,Отказ=Ложь, ОбновлятьСрокиСерии = Истина) Экспорт
	
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	// Нельзя её запускать для документов, которые не создают новых партий
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	Если НЕ (ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.УЗ_ПоступлениеТовара") или 
	       ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.УЗ_ВводОстатков")) ТОгда
		   ВОЗВРАТ;
	КонецЕсли;	   
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокОбъект.Ссылка);
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.УЗ_ПоступлениеТовара") тогда
		
		
		Поставщик = ДокОбъект.Поставщик.Код;
		ПоставщикИсходный = Поставщик;
		ПоставщикКомитентВнутренний = 0;
		Если ЗначениеЗаполнено(ДокОбъект.ПоставщикКомитент) Тогда
			ПоставщикКомитентВнутренний = ДокОбъект.ПоставщикКомитент.Код;
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.Индекс(ДокОбъект.ДоговорПоставкиКомитент.ВидПоступленияТовара);
			
			ВидПоступленияИсходный = Перечисления.ВидыПоступленияТоваров.Индекс(ДокОбъект.ДоговорПоставки.ВидПоступленияТовара);
		Иначе
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.Индекс(ДокОбъект.ВидПоступленияТовара);
			ВидПоступленияИсходный = ВидПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокОбъект.ФирмаКомитент) Тогда
			ФирмаИсходная = ДокОбъект.ФирмаКомитент.Код;
		Иначе
			ФирмаИсходная = ДокОбъект.Фирма.Код;
		КонецЕсли;
		
		Если ДокОбъект.ТипНакладной  = Перечисления.ТипыНакладной.ИнтернетЗаказ Тогда
			ТипПартии = "I";
		Иначе
			ТипПартии = "";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипПартии",ТипПартии);
		Запрос.УстановитьПараметр("ПоставщикКомитентВнутренний",ПоставщикКомитентВнутренний);
		Запрос.УстановитьПараметр("Поставщик",Поставщик);
		Запрос.УстановитьПараметр("ПоставщикИсходный",ПоставщикИсходный);
		Запрос.УстановитьПараметр("ВидПоступления",ВидПоступления);
		Запрос.УстановитьПараметр("ВидПоступленияИсходный",ВидПоступленияИсходный);		
		Запрос.УстановитьПараметр("ФирмаИсходная",ФирмаИсходная);	
		Запрос.УстановитьПараметр("ДатаПоступления",ДокОбъект.Дата);
		Если ОбновлятьСрокиСерии Тогда
			ТХТ = "ВЫБРАТЬ
			|	&ДатаПоступления КАК ДатаПоступления,
			|	&ВидПоступления КАК ВидПоступления,
			|	&ВидПоступленияИсходный КАК ВидПоступленияИсходный,
			|	&ФирмаИсходная КАК ФирмаИсходная,
			|	&Поставщик КАК Поставщик,
			|	&ПоставщикИсходный КАК ПоставщикИсходный,
			|	&ПоставщикКомитентВнутренний КАК ПоставщикКомитентВнутренний,
			|	&ТипПартии КАК ТипПартии,
			|	Партии.Ссылка КАК Партия,
			|	ТЧ.КодТовара,
			|	ТЧ.СрокГодности,
			|	ТЧ.Серия,
			|	ТЧ.КоэффициентРазбивки КАК К,
			|	ТЧ.Производитель,
			|	ТЧ.ЦенаГосРегистрации,
			|	ТЧ.СтавкаНДСЗакуп,
			|	ТЧ.СтавкаНДСРозн,
			|	ТЧ.Баркод,
			|	ТЧ.НомерГТД,
			|	ТЧ.ЦенаПроизводителя КАК ЦенаПроизводителяБезНДС,
			|	ТЧ.Ссылка КАК ДокументПоступления,
			|	ТЧ.ЦенаЗакуп * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакуп,
			|	ТЧ.ЦенаЗакупБезНДС * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакупБезНДС,
			|	ТЧ.ЦенаЗакупБезНДСРасчет * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакупБезНДСРасчет
			|ИЗ
			|	Документ.УЗ_ПоступлениеТовара.Товар КАК ТЧ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			|		ПО (Партии.Код = ТЧ.КодПартии)
			|ГДЕ
			|	ТЧ.Ссылка = &Ссылка
			|	И (
			|			ТЧ.СрокГодности <> Партии.СрокГодности
			|			ИЛИ ТЧ.Серия <> Партии.Серия
			|			ИЛИ НАЧАЛОПЕРИОДА(&ДатаПоступления, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Партии.ДатаПоступления, ДЕНЬ)
			|			ИЛИ ТЧ.КоэффициентРазбивки <> Партии.К
			|			ИЛИ &ТипПартии <> Партии.ТипПартии
			|			ИЛИ ТЧ.КодТовара <> Партии.КодТовара
			|			ИЛИ &ВидПоступления <> Партии.ВидПоступления
			|			ИЛИ &ВидПоступленияИсходный <> Партии.ВидПоступленияИсходный
			|			ИЛИ &Поставщик <> Партии.Поставщик
			|			ИЛИ &ПоставщикИсходный <> Партии.ПоставщикИсходный
			|			ИЛИ &ФирмаИсходная <> Партии.ФирмаИсходная
			|			ИЛИ &ПоставщикКомитентВнутренний <> Партии.ПоставщикКомитентВнутренний
			|			ИЛИ ТЧ.Производитель <> Партии.Производитель
			|			ИЛИ ТЧ.СтавкаНДСЗакуп <> Партии.СтавкаНДСЗакуп
			|			ИЛИ ТЧ.СтавкаНДСРозн <> Партии.СтавкаНДСРозн
			|			ИЛИ ТЧ.Баркод <> Партии.Баркод
			|			ИЛИ ТЧ.НомерГТД <> Партии.НомерГТД
			|			ИЛИ ТЧ.ЦенаГосРегистрации <> Партии.ЦенаГосРегистрации
			|			ИЛИ ТЧ.ЦенаПроизводителя <> Партии.ЦенаПроизводителяБезНДС
			|			ИЛИ ТЧ.ЦенаЗакуп * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф <> Партии.ЦенаЗакуп
			|			ИЛИ ТЧ.ЦенаЗакупБезНДСРасчет * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф <> Партии.ЦенаЗакупБезНДСРасчет)";
		Иначе
			ТХТ = "ВЫБРАТЬ
			|	&ДатаПоступления КАК ДатаПоступления,
			|	&ВидПоступления КАК ВидПоступления,
			|	&ВидПоступленияИсходный КАК ВидПоступленияИсходный,
			|	&ФирмаИсходная КАК ФирмаИсходная,
			|	&Поставщик КАК Поставщик,
			|	&ПоставщикИсходный КАК ПоставщикИсходный,
			|	&ПоставщикКомитентВнутренний КАК ПоставщикКомитентВнутренний,
			|	&ТипПартии КАК ТипПартии,
			|	Партии.Ссылка КАК Партия,
			|	ТЧ.КодТовара,
			|	ТЧ.КоэффициентРазбивки КАК К,
			|	ТЧ.Производитель,
			|	ТЧ.ЦенаГосРегистрации,
			|	ТЧ.СтавкаНДСЗакуп,
			|	ТЧ.СтавкаНДСРозн,
			|	ТЧ.Баркод,
			|	ТЧ.НомерГТД,
			|	ТЧ.ЦенаПроизводителя КАК ЦенаПроизводителяБезНДС,
			|	ТЧ.Ссылка КАК ДокументПоступления,
			|	ТЧ.ЦенаЗакуп * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакуп,
			|	ТЧ.ЦенаЗакупБезНДС * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакупБезНДС,
			|	ТЧ.ЦенаЗакупБезНДСРасчет * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакупБезНДСРасчет
			|ИЗ
			|	Документ.УЗ_ПоступлениеТовара.Товар КАК ТЧ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
			|		ПО (Партии.Код = ТЧ.КодПартии)
			|ГДЕ
			|	ТЧ.Ссылка = &Ссылка
			|	И (
			|			НАЧАЛОПЕРИОДА(&ДатаПоступления, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Партии.ДатаПоступления, ДЕНЬ)
			|			ИЛИ ТЧ.КоэффициентРазбивки <> Партии.К
			|			ИЛИ &ТипПартии <> Партии.ТипПартии			
			|			ИЛИ ТЧ.КодТовара <> Партии.КодТовара
			|			ИЛИ &ВидПоступления <> Партии.ВидПоступления
			|			ИЛИ &ВидПоступленияИсходный <> Партии.ВидПоступленияИсходный
			|			ИЛИ &Поставщик <> Партии.Поставщик
			|			ИЛИ &ПоставщикИсходный <> Партии.ПоставщикИсходный
			|			ИЛИ &ФирмаИсходная <> Партии.ФирмаИсходная
			|			ИЛИ &ПоставщикКомитентВнутренний <> Партии.ПоставщикКомитентВнутренний
			|			ИЛИ ТЧ.Производитель <> Партии.Производитель
			|			ИЛИ ТЧ.СтавкаНДСЗакуп <> Партии.СтавкаНДСЗакуп
			|			ИЛИ ТЧ.СтавкаНДСРозн <> Партии.СтавкаНДСРозн
			|			ИЛИ ТЧ.Баркод <> Партии.Баркод
			|			ИЛИ ТЧ.НомерГТД <> Партии.НомерГТД
			|			ИЛИ ТЧ.ЦенаГосРегистрации <> Партии.ЦенаГосРегистрации
			|			ИЛИ ТЧ.ЦенаПроизводителя <> Партии.ЦенаПроизводителяБезНДС
			|			ИЛИ ТЧ.ЦенаЗакуп * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф <> Партии.ЦенаЗакуп
			|			ИЛИ ТЧ.ЦенаЗакупБезНДСРасчет * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф <> Партии.ЦенаЗакупБезНДСРасчет)";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОбъект)=Тип("ДокументОбъект.УЗ_ВводОстатков") тогда
		ПоставщикКомитентВнутренний = 0;
		Если ЗначениеЗаполнено(ДокОбъект.ПоставщикКомитент) Тогда
			
			Поставщик = ДокОбъект.ПоставщикКомитент.Код;
			ПоставщикИсходный = Поставщик;
			ПоставщикКомитентВнутренний = Поставщик;
			
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.Индекс(Перечисления.ВидыПоступленияТоваров.Комиссия);
			ВидПоступленияИсходный = Перечисления.ВидыПоступленияТоваров.Индекс(Перечисления.ВидыПоступленияТоваров.Покупка);
		Иначе
			
			Поставщик = ДокОбъект.Фирма.ФирмаКакПоставщик.Код;
			ПоставщикИсходный = Поставщик;
			
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.Индекс(Перечисления.ВидыПоступленияТоваров.Покупка);
			ВидПоступленияИсходный = ВидПоступления;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокОбъект.ФирмаКомитент) Тогда
			ФирмаИсходная = ДокОбъект.ФирмаКомитент.Код;
		Иначе
			ФирмаИсходная = ДокОбъект.Фирма.Код;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Поставщик",Поставщик);
		Запрос.УстановитьПараметр("ПоставщикИсходный",ПоставщикИсходный);
		Запрос.УстановитьПараметр("ПоставщикКомитентВнутренний",ПоставщикКомитентВнутренний);
		Запрос.УстановитьПараметр("ВидПоступления",ВидПоступления);
		Запрос.УстановитьПараметр("ВидПоступленияИсходный",ВидПоступленияИсходный);		
		Запрос.УстановитьПараметр("ФирмаИсходная",ФирмаИсходная);	
		Запрос.УстановитьПараметр("ДатаПоступления",ДокОбъект.Дата);
		
		ТХТ = "ВЫБРАТЬ
		      |	&ДатаПоступления КАК ДатаПоступления,
		      |	&ВидПоступления КАК ВидПоступления,
		      |	&ВидПоступленияИсходный КАК ВидПоступленияИсходный,
		      |	&ФирмаИсходная КАК ФирмаИсходная,
		      |	&Поставщик КАК Поставщик,
		      |	&ПоставщикИсходный КАК ПоставщикИсходный,
			  |	&ПоставщикКомитентВнутренний КАК ПоставщикКомитентВнутренний,
		      |	Партии.Ссылка КАК Партия,
		      |	ТЧ.КодТовара,
		      |	ТЧ.СрокГодности,
		      |	ТЧ.Серия,
		      |	ТЧ.КоэффициентРазбивки КАК К,
		      |	ТЧ.Производитель,
		      |	ТЧ.ЦенаГосРегистрации,
		      |	ТЧ.СтавкаНДСЗакуп,
		      |	ТЧ.СтавкаНДСРозн,
		      |	ТЧ.Баркод,
		      |	ТЧ.НомерГТД,
		      |	ТЧ.ЦенаПроизводителя КАК ЦенаПроизводителяБезНДС,
		      |	ТЧ.Ссылка КАК ДокументПоступления,
		      |	ТЧ.ЦенаЗакуп * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакуп,
		      |	ТЧ.ЦенаЗакупБезНДС * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакупБезНДС,
		      |	ТЧ.ЦенаЗакупБезНДСРасчет * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф КАК ЦенаЗакупБезНДСРасчет
		      |ИЗ
		      |	Документ.УЗ_ВводОстатков.Товар КАК ТЧ
		      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УЗ_Партии КАК Партии
		      |		ПО (Партии.Код = ТЧ.КодПартии)
		      |ГДЕ
		      |	ТЧ.Ссылка = &Ссылка
		      |	И (ТЧ.СрокГодности <> Партии.СрокГодности
		      |			ИЛИ ТЧ.Серия <> Партии.Серия
		      |			ИЛИ НАЧАЛОПЕРИОДА(&ДатаПоступления, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Партии.ДатаПоступления, ДЕНЬ)
		      |			ИЛИ ТЧ.КоэффициентРазбивки <> Партии.К
		      |			ИЛИ ТЧ.КодТовара <> Партии.КодТовара
		      |			ИЛИ &ВидПоступления <> Партии.ВидПоступления
		      |			ИЛИ &ВидПоступленияИсходный <> Партии.ВидПоступленияИсходный
		      |			ИЛИ &Поставщик <> Партии.Поставщик
		      |			ИЛИ &ПоставщикИсходный <> Партии.ПоставщикИсходный
			  |			ИЛИ &ПоставщикКомитентВнутренний <> Партии.ПоставщикКомитентВнутренний
		      |			ИЛИ &ФирмаИсходная <> Партии.ФирмаИсходная
		      |			ИЛИ ТЧ.Производитель <> Партии.Производитель
		      |			ИЛИ ТЧ.СтавкаНДСЗакуп <> Партии.СтавкаНДСЗакуп
		      |			ИЛИ ТЧ.СтавкаНДСРозн <> Партии.СтавкаНДСРозн
		      |			ИЛИ ТЧ.Баркод <> Партии.Баркод
		      |			ИЛИ ТЧ.НомерГТД <> Партии.НомерГТД
			  |			ИЛИ ТЧ.ЦенаГосРегистрации <> Партии.ЦенаГосРегистрации
		      |			ИЛИ ТЧ.ЦенаПроизводителя <> Партии.ЦенаПроизводителяБезНДС
		      |			ИЛИ ТЧ.ЦенаЗакуп * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф <> Партии.ЦенаЗакуп
		      |			ИЛИ ТЧ.ЦенаЗакупБезНДСРасчет * ТЧ.КоэффициентРазбивки / ТЧ.Коэфф <> Партии.ЦенаЗакупБезНДСРасчет)";		
		
	КонецЕсли;
	
	Запрос.Текст = ТХТ;
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Рез.Выгрузить();
	
	Для каждого стр из ТЗ Цикл
		
		Объект = стр.Партия.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект,стр);
		Записан = Ложь;
		Для н = 0 по 2 Цикл
			Попытка
				Объект.Записать();
				Записан = Истина;
				Прервать;
			Исключение
				#Если Клиент Тогда
					Сообщить("Ошибка записи партии: " + ОписаниеОшибки());
				#КонецЕсли
				ОбщегоНазначения.Задержка(2);
			КонецПопытки;
		КонецЦикла;
		
		Если Записан=Ложь Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуРознЦенИзПоступления(Док)
	
	ТЗЦен = Новый ТаблицаЗначений;
	ТЗЦен.Колонки.Добавить("КодТовара");
	ТЗЦен.Колонки.Добавить("КодПартии");
	ТЗЦен.Колонки.Добавить("КоэффЕит");
	ТЗЦен.Колонки.Добавить("СтавкаНДС");
	ТЗЦен.Колонки.Добавить("ЦенаРозн");
	ТЗЦен.Колонки.Добавить("ЭтоИндивидуальнаяЦена");
	
	Для каждого стр из Док.Товар Цикл
		НС = ТЗЦен.Добавить();
		НС.КодТовара = стр.КодТовара;
		НС.КодПартии = стр.КодПартии;
		НС.КоэффЕит  = стр.КоэффициентРазбивки;
		НС.СтавкаНДС = стр.СтавкаНДСРозн;
		НС.ЦенаРозн  = стр.ЦенаРозн;
		НС.ЭтоИндивидуальнаяЦена = Истина;
	КонецЦикла;
	
	Возврат ТЗЦен;
	
КонецФункции

Процедура ОбновитьРозничныеЦеныВРегистреЦенПоАптеке(АптекаКод,ТаблицаЦен,ДокументСсылка) Экспорт
	
	ТекДата = ТекущаяДата();
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоИндивидуальнаяЦена",Истина);
	НайденныеСтроки = ТаблицаЦен.НайтиСтроки(Отбор);
	
	РЦП = РегистрыСведений.РозничныеЦеныПоПартиям.СоздатьМенеджерЗаписи();
	РЦПО = РегистрыСведений.РозничныеЦеныПоПартиямОтложенные.СоздатьМенеджерЗаписи();

	Для каждого стр из НайденныеСтроки Цикл
		РЦП.АптекаКод = АптекаКод;
		РЦП.ТоварКод = стр.КодТовара;
		РЦП.ПартияКод = стр.КодПартии;
		РЦП.Прочитать();
		Если РЦП.Выбран() Тогда
			Если РЦП.Цена <> стр.ЦенаРозн Тогда
				РЦП.Цена = стр.ЦенаРозн;
				РЦП.Коэффициент = стр.КоэффЕит;
				РЦП.ДатаУстановки = ТекДата;
				РЦП.СтавкаНДС = стр.СтавкаНДС;
				РЦП.Документ = ДокументСсылка;
				РЦП.Уценка = Ложь;
				РЦП.Записать();
			КонецЕсли;
		Иначе
			РЦП.АптекаКод = АптекаКод;
			РЦП.ТоварКод = стр.КодТовара;
			РЦП.ПартияКод = стр.КодПартии;
			РЦП.Цена = стр.ЦенаРозн;
			РЦП.Коэффициент = стр.КоэффЕит;
			РЦП.ДатаУстановки = ТекДата;
			РЦП.СтавкаНДС = стр.СтавкаНДС;
			РЦП.Документ = ДокументСсылка;
			РЦП.Уценка = Ложь;
			РЦП.Записать();
		КонецЕсли;
		
		РЦПО.АптекаКод = АптекаКод;
		РЦПО.ТоварКод = стр.КодТовара;
		РЦПО.ПартияКод = стр.КодПартии;
		РЦПО.Прочитать();
		Если РЦПО.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(РЦПО,РЦП);
			РЦПО.Записать();
		КонецЕсли;

				
	КонецЦикла;
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоИндивидуальнаяЦена",Ложь);
	НайденныеСтроки = ТаблицаЦен.НайтиСтроки(Отбор);
	
	РЦП = РегистрыСведений.РозничныеЦены.СоздатьМенеджерЗаписи();
	РЦПО = РегистрыСведений.РозничныеЦеныОтложенные.СоздатьМенеджерЗаписи();
	Для каждого стр из НайденныеСтроки Цикл
		РЦП.АптекаКод = АптекаКод;
		РЦП.ТоварКод = стр.КодТовара;
		РЦП.Прочитать();
		Если РЦП.Выбран() Тогда
			Если РЦП.Цена <> стр.ЦенаРозн Тогда
				РЦП.Цена = стр.ЦенаРозн;
				РЦП.Коэффициент = стр.КоэффЕит;
				РЦП.ДатаУстановки = ТекДата;
				РЦП.СтавкаНДС = стр.СтавкаНДС;
				РЦП.Документ = ДокументСсылка;
				РЦП.Записать();
			КонецЕсли;
		Иначе
			РЦП.АптекаКод = АптекаКод;
			РЦП.ТоварКод = стр.КодТовара;
			РЦП.Цена = стр.ЦенаРозн;
			РЦП.Коэффициент = стр.КоэффЕит;
			РЦП.ДатаУстановки = ТекДата;
			РЦП.СтавкаНДС = стр.СтавкаНДС;
			РЦП.Документ = ДокументСсылка;
			РЦП.Записать();
		КонецЕсли;
		
		РЦПО.АптекаКод = АптекаКод;
		РЦПО.ТоварКод = стр.КодТовара;
		РЦПО.Прочитать();
		Если РЦПО.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(РЦПО,РЦП);
			РЦПО.Записать();
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Функция РасценитьДокумент(Документ,Параметры)
	
	ИгнорироватьПревышенияЗакупочнойЦены = Параметры.ИгнорироватьПревышенияЗакупочнойЦены;
	ОбновлятьПартии = Параметры.ОбновлятьПартии;
	
	Отказ = Ложь;
	
	КодСклада = Документ.Склад.Код;
	
	Если ОбновлятьПартии Тогда
		УЗ_ПроверитьИОбновитьДанныеПартии(Документ,Отказ);
	КонецЕсли;
	
	ПараметрыРасценки = Новый Структура;
	
	ПараметрыРасценки.Вставить("Авторасценка",Истина) ;
	ПараметрыРасценки.Вставить("Склад",Документ.СКЛАД);
	ПараметрыРасценки.Вставить("Документ",Документ.Ссылка) ;
	ПараметрыРасценки.Вставить("ТипДокумента",ТипЗнч(Документ.Ссылка)) ;
	ПараметрыРасценки.Вставить("ВидДокумента",Документ.Метаданные().Имя) ;
	ПараметрыРасценки.Вставить("Комментировать",Ложь);
	ПараметрыРасценки.Вставить("ВыводитьНеРасцененные",Ложь);
	ПараметрыРасценки.Вставить("Регион",Документ.Склад.Регион);	
	ПараметрыРасценки.Вставить("МинимальныйПроцентНаценкиКромеТопов",0);
	ПараметрыРасценки.Вставить("ЗаписыватьЦеныВРегистрЦен",Ложь);
	ПараметрыРасценки.Вставить("УстановитьрозничныеЦеныВДокументе",Истина);
	ПараметрыРасценки.Вставить("ИспользоватьЦеныКонкурентов",Ложь);
	ПараметрыРасценки.Вставить("ПроверятьЗакупкуИРозницу",Истина);
	ПараметрыРасценки.Вставить("ИгнорироватьПревышенияЗакупочнойЦены",ИгнорироватьПревышенияЗакупочнойЦены);
	ПараметрыРасценки.Вставить("УскореннаяРасценка",Истина);

	
	СтруктураРезультата = Расценка.УЗ_Расценить(ПараметрыРасценки);
	ТЗ = СтруктураРезультата.ТП;
	ТЗКосяков = СтруктураРезультата.ТЗКосяков;
	Результат = СтруктураРезультата.Результат;
	КоличествоОшибокРасценки = СтруктураРезультата.КоличествоОшибокРасценки;
	
	ТЧ = Документ.Товар;
	Для каждого стр из ТЗ Цикл
		Если стр.ЦенаРозн = 0 Тогда
			//ENT-1194
			СтрокаТЗКосяков  = ТЗКосяков.Найти(стр.КодПартии,"КодПартии");
			Если СтрокаТЗКосяков = Неопределено Тогда 
				Косяк=ТЗКосяков.Добавить();
				Косяк.КодПартии=Стр.КодПартии;
				Косяк.Товар=Стр.Товар;
				Косяк.Косяк="Не рассчиталась розничная цена!";
			КонецЕсли;//ENT-1194	
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ  = ТЧ.Найти(стр.КодПартии,"КодПартии");
		Если НЕ СтрокаТЧ = Неопределено Тогда
			Если стр.ТоварРасфасован Тогда
				СтрокаТЧ.ЦенаРозн=стр.ЦенаРозн/стр.КоэффЕит;	
			Иначе
				СтрокаТЧ.ЦенаРозн=стр.ЦенаРозн;	
			КонецЕсли;
			СтрокаТЧ.СуммаРозн=СтрокаТЧ.ЦенаРозн*СтрокаТЧ.Количество;
			Если СтрокаТЧ.ЦенаЗакуп > 0 Тогда
				СтрокаТЧ.ПроцентРознНац = Окр((СтрокаТЧ.ЦенаРозн/СтрокаТЧ.ЦенаЗакуп - 1)*100,2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТЗКосяков.Количество()>0 или Результат = Ложь ТОгда
		Документ.Статус=Перечисления.СтатусПрихода.ПроблемыСРасценкой;
		Для каждого Стр из ТЗКосяков Цикл
			СтрОп=Документ.ОшибкиРасценки.Добавить();
			СтрОП.Товар 	= Стр.Товар;
			СтрОП.КодПартии 	= Стр.КодПартии;
			СтрОП.ОписаниеОшибки= Стр.Косяк;
			СтрОП.ЦенаПоРасценке= Стр.ЦенаПоРасценке;
		КонецЦикла;
	Иначе
		Документ.Статус=Перечисления.СтатусПрихода.Расценен;
	КонецЕсли;

	Документ.ДатаРасценки = ТекущаяДата();
	Документ.СтатусДокАптеки = Перечисления.СтатусДокАптеки.Неопределено;
	
	ДокументЗаписан = Ложь;
	Для н = 0 По 5 Цикл
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Запись);
			ДокументЗаписан = Истина;
			ОбщегоНазначения.ЗаписатьИсториюИзмененияДокумента(Документ.Ссылка,"Авторасценка",ПараметрыСеанса.ТекущийСотр,"Ошибок при расценке "+КоличествоОшибокРАсценки+ТЗКосяков.Количество());
			Прервать;
		Исключение
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	
	Если Документ.Статус = Перечисления.СтатусПрихода.Расценен и ДокументЗаписан Тогда //ENT-1194 
		ОбновитьРозничныеЦеныВРегистреЦенПоАптеке(КодСклада,ТЗ,Документ.Ссылка);
	КонецЕсли;
	

	Возврат Результат;
	
КонецФункции


Процедура ПровестиИВыгрузитьДокументВАптеку(Док)
	
	ДокументПровелся=Ложь;
	Для к = 1 по 2 Цикл
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			ДокументПровелся=Истина;
			Прервать;
		Исключение
			ДокументПровелся=Ложь;
			ОбщегоНазначения.Задержка(2);
		КонецПопытки;
	КонецЦикла;
	
	Если (ДокументПровелся = Истина) и (Док.Склад.НеВыгружатьНакладныеАвтоматически = Ложь) Тогда
		Док.ВыгрузитьВАптеку();
	КонецЕсли;
	
	
КонецПроцедуры

//Функция ПроверитьДокументНаНаличиеТовараВПути(Док)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	Док.Товар,
//	               |	ЗаказПоставщикуОстатки.КоличествоОстаток как КоличествоВПути
//	               |ИЗ
//	               |	Документ.УЗ_ПоступлениеТовара.Товар КАК Док
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказПоставщику.Остатки(
//	               |				,
//	               |				Склад = &Склад
//	               |					И Поставщик = &Поставщик
//	               |					И ДатаЗаказа <= &ДатаПоставщика) КАК ЗаказПоставщикуОстатки
//	               |		ПО (ЗаказПоставщикуОстатки.Товар = Док.Товар)
//	               |ГДЕ
//	               |	Док.Ссылка = &Поступление
//	               |	И Док.НомерЗаказа > 0
//	               |	И ЗаказПоставщикуОстатки.КоличествоОстаток ЕСТЬ NULL ";
//				   
//	Запрос.УстановитьПараметр("Склад",Док.Склад);
//	Запрос.УстановитьПараметр("Поставщик",Док.Поставщик);
//	Запрос.УстановитьПараметр("Поступление",Док.Ссылка);
//	Запрос.УстановитьПараметр("ДатаПоставщика",Док.ВхДатаНакл);
//	Рез = Запрос.Выполнить();
//	Если Рез.Пустой() Тогда
//		Возврат Истина;
//	Иначе
//		Выборка = Рез.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			НоваяСтрока = Док.ТоварыБезЗаказа.Добавить();	
//			НоваяСтрока.Товар = Выборка.Товар;
//			НоваяСтрока.КоличествоВПути = Выборка.КоличествоВПути;
//		КонецЦикла;
//		Док.Состояние = Справочники.СостояниеДокумента.НайтиПоКоду(8);	
//		Док.Комментарий = "По документу нет товара в пути";
//		Док.Записать(РежимЗаписиДокумента.Запись);
//		Возврат Ложь;
//	КонецЕсли;
//	
//	
//КонецФункции


Функция ПолучитьТаблицуИндивидуальныхЗаказов(Поставщик,Склад,Ссылка)
	
	ТХТ = "ВЫБРАТЬ
	      |	ИндивидуальныеЗаказы.Товар КАК Товар,
	      |	ПоступлениеТовараТовар.Количество,
	      |	ИндивидуальныеЗаказы.ДатаЗаказа,
	      |	ЕСТЬNULL(ИндивидуальныеЗаказы.ЦенаРозн, 0) КАК ЦенаРозн
	      |ИЗ
	      |	Документ.УЗ_ПоступлениеТовара.Товар КАК ПоступлениеТовараТовар
	      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИндивидуальныеЗаказы.Остатки(
	      |				,
	      |				Склад = &Склад
	      |					И Поставщик = &Поставщик) КАК ИндивидуальныеЗаказы
	      |		ПО (ИндивидуальныеЗаказы.Товар = ПоступлениеТовараТовар.Товар)
	      |ГДЕ
	      |	ПоступлениеТовараТовар.Ссылка = &Ссылка
	      |	И ЕСТЬNULL(ИндивидуальныеЗаказы.ЦенаРозн, 0) > 0";	
		  
		  
	Запрос = Новый Запрос;
	Запрос.Текст = ТХТ;
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
	   Возврат Неопределено;
	Иначе 
		Возврат Рез.Выгрузить();
	КонецЕсли;
	
КонецФункции

Функция ПровестиДокументПоСхемеКроссДокинга(Док, Шапка, ЗаказСсылка)
	
		Рез = ADHOC.экспортНакладнойКроссДокинг(Док.Ссылка, Шапка.КодПоставщикаВДДП);
		//ENT-1425 +++ По всей видимости, из ДДП иногда не возвращаются данные. Для этого проверяем,пришли ли они и если нет - создаем записб в регистре как при ошибке
		Попытка
			НомДДП = Рез.Результат.Получить(0).Номер_GDP;
		Исключение
			МЗ = РегистрыСведений.ЦепочкиПоКроссДокингу.СоздатьМенеджерЗаписи();
			МЗ.Накладная = Док.Ссылка;
			МЗ.Заказ = ЗаказСсылка;
			МЗ.НомерВхПоставщика = Шапка.ВхНомерНакл;
			МЗ.НомерВхПосредника = "Номер не получен";
			МЗ.ДатаВхПоставщика = Док.ВхДатаНакл;;
			МЗ.ПоставщикКод = Док.ПоставщикКД.Код;
			МЗ.ПосредникКод = 3055;
			МЗ.ДатаЗаписи = ТекущаяДата();
			МЗ.Записать();
			Возврат Ложь;
		КонецПопытки;
		//---
		
		Если Рез.Ошибки.Количество() = 0 и не Рез.ОшибкаОтправки Тогда 
			Док.КД_ЭДО = Истина;
			Док.Комментарий = "" + Строка(Док.ПоставщикКД) + " № " + Док.ВхНомерНакл;
			Док.ВхНомерНакл = Рез.Результат.Получить(0).Номер_GDP;
			Док.ВхНомерСФ = Док.ВхНомерНакл;
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			МЗ = РегистрыСведений.ЦепочкиПоКроссДокингу.СоздатьМенеджерЗаписи();
			МЗ.Накладная = Док.Ссылка;
			МЗ.Заказ = ЗаказСсылка;
			МЗ.НомерВхПоставщика = Шапка.ВхНомерНакл;
			МЗ.НомерВхПосредника = Док.ВхНомерНакл;
			МЗ.ДатаВхПоставщика = Док.ВхДатаНакл;;
			МЗ.ПоставщикКод = Док.ПоставщикКД.Код;
			МЗ.ПосредникКод = 3055;
			МЗ.ДатаЗаписи = ТекущаяДата();
			МЗ.Записать();
			Возврат Истина;
		Иначе
			МЗ = РегистрыСведений.ЦепочкиПоКроссДокингу.СоздатьМенеджерЗаписи();
			МЗ.Накладная = Док.Ссылка;
			МЗ.Заказ = ЗаказСсылка;
			МЗ.НомерВхПоставщика = Шапка.ВхНомерНакл;
			МЗ.НомерВхПосредника = "Номер не получен";
			МЗ.ДатаВхПоставщика = Док.ВхДатаНакл;;
			МЗ.ПоставщикКод = Док.ПоставщикКД.Код;
			МЗ.ПосредникКод = 3055;
			МЗ.ДатаЗаписи = ТекущаяДата();
			МЗ.Записать();
			Возврат Ложь;
		КонецЕсли;	
	
КонецФункции

Функция ПолучитьКлиента(КодКлиента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Поставщики.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Поставщики КАК Поставщики
	               |ГДЕ
	               |	Поставщики.КодДДП = &КодДДП";
	
	Запрос.УстановитьПараметр("КодДДП",КодКлиента);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьТаблицуТовараДляПродажи(ДокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.КодТовара КАК КодТовара,
	               |	Товары.Товар КАК Товар,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Коэфф КАК Коэфф,
	               |	Товары.КоэффициентРазбивки КАК КоэффициентРазбивки,
	               |	Товары.СтавкаНДСРозн КАК СтавкаНДС,
	               |	Товары.ЦенаЗакупБезНДСРасчет КАК ЦенаЗакупБезНДС,
	               |	Товары.СуммаЗакупБезНДСРасчет КАК СуммаЗакупБезНДС,
	               |	Товары.НДСЗакуп КАК СуммаНДСРеализации,
	               |	Товары.СуммаЗакуп КАК СуммаРеализации,
	               |	Товары.КодПартии КАК КодПартии
	               |ИЗ
	               |	Документ.УЗ_ПоступлениеТовара.Товар КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &докСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товары.Товар.Наименование";
	Запрос.УстановитьПараметр("ДокСсылка",ДокСсылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
	
	
	
	
	
КонецФункции

Процедура ОформитьПродажу(КодКлиента,ДокСсылка) Экспорт
	
	Клиент = ПолучитьКлиента(КодКлиента);
	Если Клиент = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары = ПолучитьТаблицуТовараДляПродажи(ДокСсылка);
	
	Продажа = Документы.УЗ_МелкооптоваяРеализация.СоздатьДокумент();
	Продажа.Дата = ТекущаяДата();
	Продажа.ДокументОснования = ДокСсылка;
	Продажа.Склад = ДокСсылка.Склад;
	Продажа.Фирма = ДокСсылка.Фирма;
	Продажа.НомДокАптеки = ДокСсылка.ВхНомерСФ;
	Продажа.ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоКоду(17); //МОР прямая продажа
	Продажа.СтатусДокАптеки = Перечисления.СтатусДокАптеки.Проведен;
	Продажа.Поставщик = Клиент;
	Продажа.ВидОперацииМелкооптовойРеализации = Перечисления.ВидыОперацийМелкооптовойРеализации.ВнешнемуПокупателю;
	Продажа.Статус = Перечисления.СтатусыСписания.Завершен;
	Продажа.СтатусВСистемеЭДО = Перечисления.СтатусыВСистемеЭДО.ОжидаетВыгрузки;
	Продажа.СтатусВыгрузкиОпт = Перечисления.СтатусыВыгрузки.НеТребуетВыгрузки;
	Продажа.Товар.Загрузить(Товары);
	Продажа.Записать(РежимЗаписиДокумента.Запись);
	Попытка 
		Продажа.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
	КонецПопытки;
	
	
	
	
КонецПроцедуры

Функция ПолучитьКодБудущейПартииНесопоставленногоТовара(КодТовара,НомерСтроки, НомерДокумента) Экспорт

	ПраваяЧастьНомераДокумента = Число(Прав(Строка(НомерДокумента),3));      
	КодБудущейПартииСтрока = "9"+Строка(Формат(ПраваяЧастьНомераДокумента,"ЧЦ=3; ЧВН="))+Строка(Формат(КодТовара,"ЧЦ=6; ЧВН="))+ Строка(Формат(НомерСтроки,"ЧЦ=2; ЧВН="));
	Возврат Число(КодБудущейПартииСтрока)

КонецФункции // ПолучитьКодБудущейПартииНесопоставленногоТовара()
 

Процедура СоздатьПоступлениеТовара(Параметры, СтруктураПоступления) Экспорт
	
	Шапка = СтруктураПоступления.Шапка;
	НесопоставленныйТовар = СтруктураПоступления.НесопоставленныйТовар;
	
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		НачатьТранзакцию();
		
		Док = Документы.УЗ_ПоступлениеТовара.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(Док,Шапка);
		Док.СтатусДокАптеки = Перечисления.СтатусДокАптеки.Неопределено;

		
		Док.Товар.Загрузить(СтруктураПоступления.Товар);
		Док.НесопоставленныйТовар.Загрузить(НесопоставленныйТовар);
		Док.ОшибкиРасценки.Загрузить(СтруктураПоступления.ОшибкиРасценки);
		Док.ИсходныеДанныеКД.Загрузить(СтруктураПоступления.ИсходныеДанныеКД);
		
		
		ДокСсылка = Док.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			ДокСсылка = Документы.УЗ_ПоступлениеТовара.ПолучитьСсылку();
			Док.УстановитьСсылкуНового(ДокСсылка);
		КонецЕсли;
		
		Поставщик = Шапка.Поставщик.Код;
		ПоставщикИсходный = Поставщик;
		ПоставщикКомитентКод = 0;
		Если ЗначениеЗаполнено(Шапка.ПоставщикКомитент) Тогда
			ПоставщикКомитентКод = Шапка.ПоставщикКомитент.Код;
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.Индекс(Шапка.ДоговорПоставкиКомитент.ВидПоступленияТовара);
			ВидПоступленияИсходный = Перечисления.ВидыПоступленияТоваров.Индекс(Шапка.ДоговорПоставки.ВидПоступленияТовара);
		Иначе
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.Индекс(Шапка.ВидПоступленияТовара);
			ВидПоступленияИсходный = ВидПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ФирмаКомитент) Тогда
			ФирмаИсходная = Док.ФирмаКомитент.Код;
		Иначе
			ФирмаИсходная = Док.Фирма.Код;
		КонецЕсли;
		
		Если Док.ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ Тогда
			ЭтоИнтернетНакладная = Истина;
		Иначе
			ЭтоИнтернетНакладная = Ложь;
		КонецЕсли;
		
		Для каждого стр из Док.Товар Цикл
			НоваяПартия = Справочники.УЗ_Партии.СоздатьЭлемент();
			НоваяПартия.УстановитьНовыйКод();
			Если НоваяПартия.Код = 0 Тогда // иногда не срабатывает УстановитьНовыйКод() и далее вылетает ошибка.  на 8.2 такой картины никогда не было
				#Если Клиент Тогда
					Сообщить("не сработал метод Партия.УстановитьНовыйКод(). Вызваем его повторно.");
				#КонецЕсли
				НоваяПартия.УстановитьНовыйКод();
			КонецЕсли;
			
			Если НоваяПартия.Код = 0 Тогда
				ВызватьИсключение "Код партии = 0";
			КонецЕсли;
			
			КодБезКС = "24"+Формат(Число(НоваяПартия.Код), "ЧЦ=10; ЧВН=; ЧГ=0");
			
			Если стр.Коэфф = 1 и стр.КоэффициентРазбивки > 1 Тогда
				Коэфф = стр.КоэффициентРазбивки;
			Иначе
				Коэфф = 1;
			КонецЕсли;
			
			НоваяПартия.Наименование        = ВычислитьКонтрольнуюСумму(КодБезКС);
			НоваяПартия.Баркод				= стр.Баркод;
			НоваяПартия.ДатаПоступления		= Док.Дата;
			НоваяПартия.ДокументПоступления = ДокСсылка;
			НоваяПартия.КодТовара			= стр.КодТовара;
			НоваяПартия.К					= стр.КоэффициентРазбивки;
			НоваяПартия.НомерГТД			= стр.НомерГТД;
			НоваяПартия.Серия				= стр.Серия;
			НоваяПартия.СрокГодности		= стр.СрокГодности;
			НоваяПартия.СтавкаНДСЗакуп		= стр.СтавкаНДСЗакуп;
			НоваяПартия.СтавкаНДСРозн		= стр.СтавкаНДСРозн;
			НоваяПартия.ЦенаГосРегистрации	= стр.ЦенаГосРегистрации;
			НоваяПартия.ЦенаЗакуп			= стр.ЦенаЗакуп*Коэфф;
			НоваяПартия.ЦенаЗакупБезНДСРасчет = стр.ЦенаЗакупБезНДСРасчет*Коэфф;
			НоваяПартия.ЦенаПроизводителяБезНДС = стр.ЦенаПроизводителя;
			НоваяПартия.Производитель		= стр.Производитель;
			НоваяПартия.Поставщик			= Поставщик;
			НоваяПартия.ПоставщикИсходный	= ПоставщикИсходный;
			НоваяПартия.ВидПоступления		= ВидПоступления;
			НоваяПартия.ВидПоступленияИсходный = ВидПоступленияИсходный;
			НоваяПартия.ФирмаИсходная		= ФирмаИсходная;
			Если ЗначениеЗаполнено(Шапка.ПоставщикКомитент) Тогда
				НоваяПартия.ПоставщикКомитентВнутренний		= ПоставщикКомитентКод;	
			КонецЕсли;
			Если ЭтоИнтернетНакладная Тогда
				НоваяПартия.ТипПартии = "I";
			КонецЕсли;
			НоваяПартия.БэкМаржа			= стр.БэкМаржа;
			НоваяПартия.Записать();
			
			стр.КодПартии = НоваяПартия.Код;
			Если Поставщик = 3055 Тогда //ENT-1245
				
				//==>ЕНТ-1337.Коробка.2019.02.21 
				// Вместо закомментированного кода добавлен новый
				
				////+++ENT-798
				//Запись = РегистрыСведений.УЗ_Партии_КодНС.СоздатьМенеджерЗаписи();
				//Запись.КодПартии = НоваяПартия.Код;
				//СтрокаНС = СтруктураПоступления.товар.Найти(стр.КодТовара, "КодТовара");
				//Если СтрокаНС = Неопределено Тогда  Продолжить;	КонецЕсли;
				//Если СтрокаНС.КодНС = Неопределено Тогда  Продолжить;	КонецЕсли; //ENT-1245
				//Если СтрокаНС.КодНС = 0 Тогда  Продолжить;	КонецЕсли;  //ENT-1245
				//
				//Запись.КодНС = СтрокаНС.КодНС;
				//Запись.Записать();
				////---
				
				Запись = РегистрыСведений.УЗ_Партии_КодНС.СоздатьМенеджерЗаписи();
				Запись.КодПартии = НоваяПартия.Код;
				СтрокаНС = СтруктураПоступления.товар.Найти(стр.КодТовара, "КодТовара");
				Если СтрокаНС = Неопределено Тогда  Продолжить;	КонецЕсли;
				ЗаписьНеобходима = ЛОЖЬ;
				
				Если СтрокаНС.КодНС <> Неопределено Тогда
					Запись.КодНС = СтрокаНС.КодНС;
					ЗаписьНеобходима = Истина;
				КонецЕсли; 
				Если СтрокаНС.КодПриходнойПартииОриола <> Неопределено Тогда
					Запись.КодПриходнойПартииОриола = СтрокаНС.КодПриходнойПартииОриола;
					ЗаписьНеобходима = Истина;
				КонецЕсли;	
				Если СтрокаНС.КодРасходнойПартииОриола <> Неопределено Тогда
					Запись.КодРасходнойПартииОриола = СтрокаНС.КодРасходнойПартииОриола;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				Если СтрокаНС.ДатаПриходаОриола <> Неопределено Тогда
					Запись.ДатаПриходаОриола = СтрокаНС.ДатаПриходаОриола;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				Если СтрокаНС.ИсходныйПоставщикНомерНакладной <> Неопределено Тогда
					Запись.ИсходныйПоставщикНомерНакладной = СтрокаНС.ИсходныйПоставщикНомерНакладной;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				Если СтрокаНС.ИсходныйПоставщикДатаНакладной <> Неопределено Тогда
					Запись.ИсходныйПоставщикДатаНакладной = СтрокаНС.ИсходныйПоставщикДатаНакладной;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				Если СтрокаНС.ИсходныйПоставщикНомерСчФ <> Неопределено Тогда
					Запись.ИсходныйПоставщикНомерСчФ = СтрокаНС.ИсходныйПоставщикНомерСчФ;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				Если СтрокаНС.ИсходныйПоставщикДатаСчФ <> Неопределено Тогда
					Запись.ИсходныйПоставщикДатаСчФ = СтрокаНС.ИсходныйПоставщикДатаСчФ;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				Если СтрокаНС.КодТовараОриола <> Неопределено Тогда
					Запись.КодТовараОриола = СтрокаНС.КодТовараОриола;
					ЗаписьНеобходима = Истина;
				КонецЕсли;
				
				Если ЗаписьНеобходима Тогда
					Запись.Записать();
				КонецЕсли; 
				//<==ЕНТ-1337.Коробка.2019.02.21
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураПоступления.ПризнакЭДО = истина Тогда
			Для каждого стрИсх из Док.ИсходныеДанныеКД Цикл
				стрИсх.КодПартии = Док.Товар.Получить(стрИсх.НомерСтрокиТЧТовар - 1).КодПартии;	
			КонецЦикла;
		КонецЕсли;
		
		//Если НесопоставленныйТовар.Количество() > 0 Тогда
		//	Док.Комментарий = "В документе присутствует несопоставленный товар";
		//КонецЕсли;
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		//==>ЕНТ-1386.Коробка.2019.02.25
		// Если есть несопоставленный товар, то его также запишем в РС.УЗ_Партии_КодНС
		Если НесопоставленныйТовар.Количество() > 0 и Поставщик = 3055 Тогда
		
			Для каждого СтрокаНесопоставленныйТовар Из НесопоставленныйТовар Цикл 
			
				Запись = РегистрыСведений.УЗ_Партии_КодНС.СоздатьМенеджерЗаписи();
				Запись.КодПартии	= ПолучитьКодБудущейПартииНесопоставленногоТовара(Число(СтрокаНесопоставленныйТовар.Код), НесопоставленныйТовар.Индекс(СтрокаНесопоставленныйТовар)+1, Док.Номер);
				Если СтрокаНесопоставленныйТовар.КодНС <> Неопределено Тогда
					Запись.КодНС = СтрокаНесопоставленныйТовар.КодНС;
				КонецЕсли; 
				Если СтрокаНесопоставленныйТовар.КодПриходнойПартииОриола <> Неопределено Тогда
					Запись.КодПриходнойПартииОриола = СтрокаНесопоставленныйТовар.КодПриходнойПартииОриола;
				КонецЕсли;	
				Если СтрокаНесопоставленныйТовар.КодРасходнойПартииОриола <> Неопределено Тогда
					Запись.КодРасходнойПартииОриола = СтрокаНесопоставленныйТовар.КодРасходнойПартииОриола;
				КонецЕсли;
				Если СтрокаНесопоставленныйТовар.ДатаПриходаОриола <> Неопределено Тогда
					Запись.ДатаПриходаОриола = СтрокаНесопоставленныйТовар.ДатаПриходаОриола;
				КонецЕсли;
				Если СтрокаНесопоставленныйТовар.ИсходныйПоставщикНомерНакладной <> Неопределено Тогда
					Запись.ИсходныйПоставщикНомерНакладной = СтрокаНесопоставленныйТовар.ИсходныйПоставщикНомерНакладной;
				КонецЕсли;
				Если СтрокаНесопоставленныйТовар.ИсходныйПоставщикДатаНакладной <> Неопределено Тогда
					Запись.ИсходныйПоставщикДатаНакладной = СтрокаНесопоставленныйТовар.ИсходныйПоставщикДатаНакладной;
				КонецЕсли;
				Если СтрокаНесопоставленныйТовар.ИсходныйПоставщикНомерСчФ <> Неопределено Тогда
					Запись.ИсходныйПоставщикНомерСчФ = СтрокаНесопоставленныйТовар.ИсходныйПоставщикНомерСчФ;
				КонецЕсли;
				Если СтрокаНесопоставленныйТовар.ИсходныйПоставщикДатаСчФ <> Неопределено Тогда
					Запись.ИсходныйПоставщикДатаСчФ = СтрокаНесопоставленныйТовар.ИсходныйПоставщикДатаСчФ;
				КонецЕсли;
				Если СтрокаНесопоставленныйТовар.КодТовараОриола <> Неопределено Тогда
					Запись.КодТовараОриола = СтрокаНесопоставленныйТовар.КодТовараОриола;
				КонецЕсли;
				Запись.ГУИДДокумента = Док.Ссылка.УникальныйИдентификатор();
				
				Запись.Записать();
				
			КонецЦикла; 
		
		КонецЕсли; 
		//<==ЕНТ-1386.Коробка.2019.02.25
		
		Если Док.ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ и Док.ИсточникИнтернетЗаказа.СоздаватьЗаказПокупателю Тогда
			СоздатьЗаказПокупателю(Док,Шапка);	
		КонецЕсли;
		
		Если СтруктураПоступления.КодКлиентаДляПродажи > 0 Тогда
			ОформитьПродажу(СтруктураПоступления.КодКлиентаДляПродажи,Док.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);

		#Если Клиент Тогда
			Сообщить("Не удалось создать документ поступления. Ошибка: " + ОписаниеОшибки());
		#КонецЕсли
		Возврат;
	КонецПопытки;
	
	НеПровели = Ложь;//Самсонов ENT-432 +++
	Если СтруктураПоступления.ПризнакЭДО = истина и НесопоставленныйТовар.Количество() = 0 Тогда
		Для пытка = 0 по 2 Цикл
			Если ПровестиДокументПоСхемеКроссДокинга(Док, Шапка, СтруктураПоступления.ЗаказСсылка) = Истина Тогда
				Прервать;
			Иначе
				ОбщегоНазначения.Задержка(3);
				Если пытка = 2 Тогда НеПровели  = Истина; КонецЕсли; //Самсонов ENT-432 +++				
			КонецЕсли;
		КонецЦикла;
		//Рез = ADHOC.экспортНакладнойКроссДокинг(Док.Ссылка, Шапка.КодПоставщикаВДДП);
		//Если Рез.Ошибки.Количество() =0 Тогда
		//	Док.КД_ЭДО = Истина;
		//	Док.Комментарий = "" + Строка(Док.ПоставщикКД) + " № " + Док.ВхНомерНакл;
		//	Док.ВхНомерНакл = Рез.Результат.Получить(0).Номер_GDP;
		//	Док.ВхНомерСФ = Док.ВхНомерНакл;
		//	Док.Записать(РежимЗаписиДокумента.Запись);
		//	
		//	МЗ = РегистрыСведений.ЦепочкиПоКроссДокингу.СоздатьМенеджерЗаписи();
		//	МЗ.Накладная = Док.Ссылка;
		//	МЗ.Заказ = СтруктураПоступления.ЗаказСсылка;
		//	МЗ.НомерВхПоставщика = Шапка.ВхНомерНакл;
		//	МЗ.НомерВхПосредника = Док.ВхНомерНакл;
		//	МЗ.ДатаВхПоставщика = Док.ВхДатаНакл;;
		//	МЗ.ПоставщикКод = Док.ПоставщикКД.Код;
		//	МЗ.ПосредникКод = 3055;
		//	МЗ.ДатаЗаписи = ТекущаяДата();
		//	МЗ.Записать();
		//КонецЕсли;
	КонецЕсли;
	//Самсонов ENT-432 +++
	Если НеПровели Тогда
		ЗаписьЛогаОшибок = РегистрыСведений.ЛогОшибокОбработок.СоздатьМенеджерЗаписи();
		ЗаписьЛогаОшибок.Объект = "Загрузка накладных (робот)";
		ЗаписьЛогаОшибок.ДатаОшибки = ТекущаяДата();
		ЗаписьЛогаОшибок.ОписаниеОшибки = "Не удалось провести документ " + Строка(Док.Ссылка) + " по схеме кроссдокинга";
		ЗаписьЛогаОшибок.МестоВозникновения = Строка(Параметры.ПутьКФайлу);
		ЗаписьЛогаОшибок.Записать();
				
	КонецЕсли;
	//---
		
	Если Шапка.ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ или Шапка.ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ Тогда //Если накладная вся интернетовская
		ТЗИндЗаказов = Неопределено;
	Иначе
		Если СтруктураПоступления.ПризнакЭДО = истина Тогда
			ТЗИндЗаказов = ПолучитьТаблицуИндивидуальныхЗаказов(Док.ПоставщикКД,Шапка.Склад,Док.Ссылка);
		Иначе
			ТЗИндЗаказов = ПолучитьТаблицуИндивидуальныхЗаказов(Шапка.Поставщик,Шапка.Склад,Док.Ссылка);
		КонецЕсли;
		Если НЕ ТЗИндЗаказов = неопределено Тогда
			Док.ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ;
			Док.ИндивидуальныеЦены.Загрузить(ТЗИндЗаказов);
			Для х = 1 по 5 Цикл
				Попытка
					Док.Записать(РежимЗаписиДокумента.Запись);
					Прервать;
				Исключение
					ОбщегоНазначения.Задержка(2);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПрошлиКонтрольНДС18 = КонтрольСтавокНДС(Док);
	Если ПрошлиКонтрольНДС18 = Ложь Тогда
		#Если Клиент Тогда
			Сообщить("В документе обнаружены строки с некорректным НДС!");
		#КонецЕсли
		НоваяОшибка = Док.ОшибкиРасценки.Добавить();	
		НоваяОшибка.ОписаниеОшибки = "В документе обнаружены строки с некорректным НДС.";
		//Док.Комментарий = "В документе обнаружены строки с некорректным НДС.";
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	//Начало НЭТИ Барданов А.Ю. 27.02.2019 ENT-1323 
	ПройденаПроверкаСроковГодности = Истина;
	Если Параметры.Свойство("ПройденаПроверкаСроковГодности") И Параметры.ПройденаПроверкаСроковГодности = Ложь Тогда
		ПройденаПроверкаСроковГодности = Ложь;
		Док.Статус = Перечисления.СтатусПрихода.Черновик;
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;  
	//Конец НЭТИ Барданов А.Ю. 27.02.2019 ENT-1323 
	
	Если (НесопоставленныйТовар.Количество() = 0) и (ПрошлиКонтрольНДС18 = Истина) 
		//Начало НЭТИ Барданов А.Ю. 27.02.2019 ENT-1323 
		И ПройденаПроверкаСроковГодности
		//Конец НЭТИ Барданов А.Ю. 27.02.2019 ENT-1323 
		Тогда
		
		Если Док.ТипНакладной = Перечисления.ТипыНакладной.ИндивидуальныйЗаказ и ТЗИндЗаказов = неопределено Тогда
			ПровестиИВыгрузитьДокументВАптеку(Док);	
		ИначеЕсли Док.ТипНакладной = Перечисления.ТипыНакладной.ИнтернетЗаказ или Док.СнятСОтветХранения = Истина Тогда  //Для интернет-заказа расценку не производим
			ТЗЦен = ПолучитьТаблицуРознЦенИзПоступления(Док);
			ОбновитьРозничныеЦеныВРегистреЦенПоАптеке(Док.Склад.Код,ТЗЦен,Док.Ссылка);
			ПровестиИВыгрузитьДокументВАптеку(Док);
		Иначе
			Если Док.ВидПоступленияТовара = Перечисления.ВидыПоступленияТоваров.БонусныйТовар или Док.Склад.НеВыгружатьНакладныеАвтоматически = Истина Тогда
				Док.Комментарий = "Автопроведение и выгрузка отключены.";
				Док.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				Если РасценитьДокумент(Док,Параметры)= Истина Тогда
					ПровестиИВыгрузитьДокументВАптеку(Док);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	УстановитьПривилегированныйРежим(Ложь);

	
	
КонецПроцедуры

Процедура СоздатьИнвойс(Параметры, СтруктураПоступления) Экспорт
	
	Шапка = СтруктураПоступления.Шапка;
	//НесопоставленныйТовар = СтруктураПоступления.НесопоставленныйТовар;
	
	Док = Документы.Инвойс.СоздатьДокумент();
	Док.Дата = ТекущаяДата();
	Док.Производитель = Справочники.Производители.НайтиПоРеквизиту("Поставщик",Шапка.Поставщик);
	Док.ДатаОплаты = Шапка.ВхДатаСф + (Шапка.ОтсрочкаПлатежа*24*60*60);
	Док.ДатаСчетФактуры = Шапка.ВхДатаСФ;
	Док.НомерСчетФактуры = Шапка.ВхНомерСФ;
	Док.ДокументОснование =  СтруктураПоступления.ЗаказСсылка;
	Док.СтатусВыгрузки = Перечисления.СтатусыВыгрузки.ОжидаетВыгрузки;
	// --> ENT-793. 16.10.2018
	// Добавлено условие. Если существует документ основание и в нем проставлены определенные аптеки,
	// тогда тип поставки в инвойсе - "Поставка под индивидуальный заказ"
	Если СтруктураПоступления.ЗаказСсылка <> Неопределено 
		И СтруктураПоступления.ЗаказСсылка.Склад.Код = 4976  Тогда
		
		Док.ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоКоду(23);
	
	Иначе
	// <-- ENT-793. 16.10.2018
	
		Если Шапка.Склад.СубъектРФ.Наименование = "Москва" или Шапка.Склад.СубъектРФ.Наименование = "Московская область" Тогда
			Док.ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоКоду(5);
		ИначеЕсли  Шапка.Склад.СубъектРФ.Наименование = "Санкт-Петербург" или Шапка.Склад.СубъектРФ.Наименование = "Ленинградская область" Тогда
			Док.ТипПоставки = Справочники.ТипыПоставокНаСклад.НайтиПоКоду(6);
		КонецЕсли;
	
	КонецЕсли; 
	
	Для каждого стр из СтруктураПоступления.Товар Цикл
		НС = Док.Товар.Добавить();
		НС.Баркод		= стр.Баркод;
		НС.Товар		= стр.Товар;
		НС.КодТовара	= стр.КодТовара;
		НС.НомерГТД 	= стр.НомерГТД;
		НС.СтавкаНДС	= Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",стр.СтавкаНДСЗакуп);
		НС.Серия		= стр.Серия;
		НС.Количество	= стр.Количество;
		НС.СуммаНДС		= стр.НДСЗакуп;
		НС.Производитель = стр.Производитель;
		НС.ЦенаОтпускнаяСНДС = стр.ЦенаЗакуп;
		НС.СуммаОтпускнаяСНДС = стр.ЦенаЗакуп*стр.Количество;
		НС.ЦенаОтпускнаяБезНДС = стр.ЦенаЗакупБезНДС;
		НС.ЦенаГосРегистрации = стр.ЦенаГосРегистрации;
		НС.ЦенаПроизводителяБезНДС = стр.ЦенаПроизводителя;
	КонецЦикла;
	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	
	
КонецПроцедуры


Процедура УстановитьСтатусЗаказаПокупателя(ДокПоступления,СтатусЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",ДокПоступления);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	ЗаказПокупателя = Выборка.Ссылка;
	ЗаказПокупателяОбъект = ЗаказПокупателя.ПолучитьОбъект();
	ЗаказПокупателяОбъект.СтатусЗаказаПокупателя = СтатусЗаказа;
	Если СтатусЗаказа = Справочники.СтатусыЗаказаПокупателя.DELIVERED Тогда //Проведена накладная по заказу в аптеке
		Если ЗначениеЗаполнено(ЗаказПокупателяОбъект.ИсточникИнтернетЗаказа) Тогда
			ЗаказПокупателяОбъект.ДатаОкончанияЖизниЗаказа = ТекущаяДата() +  ЗаказПокупателяОбъект.ИсточникИнтернетЗаказа.ВремяЖизниЗаказа*60*60;
		КонецЕсли;
	КонецЕсли;
	ЗаказПокупателяОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	
	
КонецПроцедуры

Функция КонтрольСтавокНДС(ДокОбъект) Экспорт //ENT-921
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.УЗ_ПоступлениеТовара") тогда

		Поставщик = ДокОбъект.Поставщик;
		ДатаПроверки = ДАТА(1,1,1);
		ДатаКонтроль = Дата("20190101000000");//Дата перехода на НДС 20%
		Если НЕ Поставщик.КонтрагентНаУСН Тогда 
			Если ДокОбъект.ВхДатаСФ = ДАТА(1,1,1) Тогда
				//невозможно провести проверку
				#Если Клиент Тогда
					Сообщить("Входящая дата с/ф поставщика пустая!",СтатусСообщения.ОченьВажное);	 
				#КонецЕсли
				Возврат Ложь;
			КонецЕсли;
			ДатаПроверки = ДокОбъект.ВхДатаСФ; 
		Иначе//Поставщики на УСН должны присылать накладные с 0, если не присылают, то в модуле загрузки уже есть отказ загрузки
			Возврат Истина;
		КонецЕсли;	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Поступление.НомерСтроки,
		|	Поступление.СтавкаНДСЗакуп КАК СтавкаНДСЗакуп,
		|	Поступление.СтавкаНДСРозн КАК СтавкаНДСРозн
		|ИЗ
		|	Документ.УЗ_ПоступлениеТовара.Товар КАК Поступление
		|ГДЕ
		|	Поступление.Ссылка = &Ссылка  И (Поступление.СтавкаНДСЗакуп = &СтавкаКонтрольНДС ИЛИ Поступление.СтавкаНДСРозн = &СтавкаКонтрольНДС)
		|";
		Если ДатаПроверки < ДатаКонтроль Тогда
			//Если поставщик присылает 20% до НГ, тоже оставляем черновиком.
			СтавкаКонтрольНДС = 20;
		Иначе
			СтавкаКонтрольНДС = 18;
		КонецЕсли;	
				
		Запрос.УстановитьПараметр("Ссылка",ДокОбъект.Ссылка);
		Запрос.УстановитьПараметр("СтавкаКонтрольНДС",СтавкаКонтрольНДС);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		#Если Клиент Тогда
		Выборка = Рез.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СтавкаНДСЗакуп = СтавкаКонтрольНДС Тогда
				Сообщить("В строке: " + Выборка.НомерСтроки + " некорректная ставка НДС Закуп = "+СтавкаКонтрольНДС+"%");
			КонецЕсли;
			Если Выборка.СтавкаНДСРозн = СтавкаКонтрольНДС Тогда
				Сообщить("В строке: " + Выборка.НомерСтроки + " некорректная ставка НДС Розн ="+СтавкаКонтрольНДС+"%");
			КонецЕсли;
		КонецЦикла;
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;	
	Возврат Истина;
КонецФункции

//Процедура ЗафиксироватьВремяИсполненияЗаказа(ДокументПоступления,АптекаКод, ДатаПроведенияАптекой) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |	П.КодТовара как ТоварКод,
//	               |	П.НомерЗаказа,
//	               |	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(Заказ.Дата, &ДатаПроведенияАптекой, ЧАС) / 24 КАК ЧИСЛО(12, 2)) КАК LT
//	               |ИЗ
//	               |	Документ.УЗ_ПоступлениеТовара.Товар КАК П
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
//	               |		ПО П.НомерЗаказа = Заказ.Номер
//	               |			И (Заказ.Дата > &ДатаЗаказа)
//	               |ГДЕ
//	               |	П.Ссылка = &ДокументПоступления";
//				   
//	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
//	Запрос.УстановитьПараметр("ДатаПроведенияАптекой", ДатаПроведенияАптекой);
//	Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(ДатаПроведенияАптекой - 10*24*60*60));
//	Рез = Запрос.Выполнить();
//	Если Рез.Пустой() Тогда
//		Возврат;
//	КонецЕсли;
//	                     
//	Выборка = Рез.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		МЗ = РегистрыСведений.ВремяИсполненияЗаказов.СоздатьМенеджерЗаписи();
//		МЗ.АптекаКод = АптекаКод;
//		МЗ.ТоварКод = Выборка.ТоварКод;
//		МЗ.Прочитать();
//		Если МЗ.Выбран() Тогда
//			МЗ.АптекаКод = АптекаКод;
//			МЗ.ТоварКод = Выборка.ТоварКод;				
//			МЗ.LT7 = МЗ.LT6;
//			МЗ.LT6 = МЗ.LT5;
//			МЗ.LT5 = МЗ.LT4;
//			МЗ.LT4 = МЗ.LT3;
//			МЗ.LT3 = МЗ.LT2;
//			МЗ.LT2 = МЗ.LT1;
//			МЗ.LT1 = Выборка.LT;
//			МЗ.LTAVG = (МЗ.LT1 + МЗ.LT2 + МЗ.LT3 + МЗ.LT4 + МЗ.LT5 + МЗ.LT6 + МЗ.LT7)/ (Число(Булево(МЗ.LT1)) + Число(Булево(МЗ.LT2)) + Число(Булево(МЗ.LT3)) + Число(Булево(МЗ.LT4)) + Число(Булево(МЗ.LT5)) + Число(Булево(МЗ.LT6)) + Число(Булево(МЗ.LT7)));
//		Иначе
//			МЗ.АптекаКод = АптекаКод;
//			МЗ.ТоварКод = Выборка.ТоварКод;				
//			МЗ.LT7 = МЗ.LT6;
//			МЗ.LT6 = МЗ.LT5;
//			МЗ.LT5 = МЗ.LT4;
//			МЗ.LT4 = МЗ.LT3;
//			МЗ.LT3 = МЗ.LT2;
//			МЗ.LT2 = МЗ.LT1;
//			МЗ.LT1 = Выборка.LT;
//			МЗ.LTAVG = Выборка.LT;
//		КонецЕсли;
//		МЗ.Записать();
//	КонецЦикла;
//	
//	
//	

//	
//	
//КонецПроцедуры
