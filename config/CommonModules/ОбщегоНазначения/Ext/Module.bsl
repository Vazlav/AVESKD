//функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) Экспорт
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;	
	
КонецФункции

// Функция выполняет приведение строки к дате
Функция ПривестиСтрокуКДате(ДатаСтрокой) Экспорт
	
	ОписаниеТипаДаты = Новый ОписаниеТипов("Дата");
	ЗначениеДаты = ОписаниеТипаДаты.ПривестиЗначение(ДатаСтрокой);
	
	Возврат ЗначениеДаты;
	
КонецФункции

// Функция выполняет приведение строки к булево
Функция ПривестиСтрокуКБулево(БулевоСтрокой) Экспорт
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ЗначениеБулево = ОписаниеТипаБулево.ПривестиЗначение(БулевоСтрокой);
	
	Возврат ЗначениеБулево;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

//Удалает повторяющиеся элементы массива.
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 

	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМасссиве = Новый Соответствие; 
		БылоНеопределено = Ложь;
		
		КолвоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл 
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента = ТипЗнч(ЭлементМассива); 
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) Тогда
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМасссиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМасссиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// функция определяет есть ли хотя бы одна не цифра в строке
Функция ЕстьНеЦифрыВСтроке(Знач СтрокаПроверки) Экспорт
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Ложь;
	
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);
	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
	Иначе
		Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры: 
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЕстьТабЧастьДокумента()

Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим поля
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	// создадим индексы таблицы для поиска
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса + "," + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаИндекса<>"" Тогда
		ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
	КонецЕсли;
	
	// Проверим записи
	Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы2.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	// создадим индексы таблицы для поиска
	СтрокаИндекса = "";
	Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
		Если СтрокаИндекса = "" Тогда
			СтрокаИндекса = Колонка.Имя;
		Иначе
			СтрокаИндекса = СтрокаИндекса + "," + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаИндекса<>"" Тогда
		ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы1.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

//Функция возвращает список доступных назначений для "Свойств и категорий объектов" 
//по переданной ссылке
// Параметры:
//Ссылка - Ссылка на справочник или документ
//
// Возвращаемое значение:
// Список значений: доступные назначения для свойств и категорий
Функция ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(Ссылка) Экспорт

	Результат = Новый СписокЗначений;

	ТипСсылки = ТипЗнч(Ссылка);

	Запрос = Новый Запрос;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Назначения.Ссылка КАК Ссылка,
	|	Назначения.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ПометкаУдаления
	|	И НЕ Назначения.ЭтоГруппа
	|";

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗначения.СодержитТип(ТипСсылки) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке()

// Формирует структуру, содержащую значения реквизитов шапки документа.
//
// Параметры: 
//  ДокументОбъект - объект документа для формирования структуры шапки, 
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт

	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокументОбъект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата", ДокументОбъект.Дата);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
	КонецЦикла;
	СтруктураШапкиДокумента.Вставить("ВидДокумента", МетаданныеДокумента.Имя);
	СтруктураШапкиДокумента.Вставить("ПредставлениеДокумента", СокрЛП(ДокументОбъект));

	Возврат СтруктураШапкиДокумента;

КонецФункции // СформироватьСтруктуруШапкиДокумента()

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры:
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента) Экспорт

	Если СтруктураШапкиДокумента.Свойство("ВидОперации") Тогда
		ВидОперацииСтр = " (" + СтруктураШапкиДокумента.ВидОперации + ")";
	Иначе
		ВидОперацииСтр = "";
	КонецЕсли;

	Возврат "Проведение документа: " + СтруктураШапкиДокумента.ПредставлениеДокумента + ВидОперацииСтр;

КонецФункции // ПредставлениеДокументаПриПроведении()

Функция ОпределитьТекущийРежимРаботыМонопольный() Экспорт
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	НомерТекущегоСоединения = НомерСоединенияИнформационнойБазы();
	
	Для каждого Соединение ИЗ МассивСоединений Цикл
		
		Если Соединение.ИмяПриложения <> "Designer" 
			И Соединение.НомерСоединения <> НомерТекущегоСоединения Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
	
КонецФункции // ПолучитьОписаниеТиповСтроки()	 

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
	
КонецФункции	// ПолучитьОписаниеТиповЧисла() 

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);
	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);
	
КонецФункции	// ПолучитьОписаниеТиповДаты() 

Процедура Задержка(ЧислоСекунд = 1)  Экспорт
	
    Инфо = Новый СистемнаяИнформация();
    Если 
        Инфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ 
        Инфо.ТипПлатформы = ТипПлатформы.Windows_x86_64
    Тогда
 		WshShell = Новый COMОбъект("WScript.Shell");
		WshShell.Run("cmd.exe /c ping -n " + (числоСекунд + 1) + " 127.0.0.1 > NUL", 0, 1);
	Иначе
		Попытка
			ЗапуститьПриложение("ping -c " + (числоСекунд + 1) + " 127.0.0.1", , Истина); // linux
		Исключение
			#Если Клиент тогда
				Сообщить("Не удалось сделать паузу на Linux-е. " + ОписаниеОшибки());
			#КонецЕсли	
		КонецПопытки;
    КонецЕсли;	
	
	//Попытка
	//	WshShell = Новый COMОбъект("WScript.Shell");
	//	WshShell.Run("cmd.exe /c ping -n " + числоСекунд + " 127.0.0.1 > NUL", 0, 1);
	//Исключение
	//	// если не сработало и дело происходит на клиенте
	//	#Если Клиент тогда
	//		Предупреждение("Пауза " +ЧислоСекунд+" сек.",ЧислоСекунд);
	//	#КонецЕсли	
	//КонецПопытки;
	
КонецПроцедуры


Функция ЗаписьОбъекта(Объект,ЧислоПопыток,ЗадержкаМеждуПопытками,РежимЗаписиДокумента=Неопределено) Экспорт
	
	Записан = Ложь;
	Для Х=1 По ЧислоПопыток Цикл
		Попытка
			Если РежимЗаписиДокумента=Неопределено ТОгда
				Объект.Записать();
			Иначе
				Объект.Записать(РежимЗаписиДокумента);
			КонецЕсли;
			Записан=Истина;
			Прервать;
		Исключение
			Задержка(ЗадержкаМеждуПопытками);
		КонецПопытки;	
	КОнецЦикла;
	Возврат Записан;
	
КонецФункции	

Процедура ЗаписатьИсториюИзмененияДокумента(ДокСсылка,ВидИзменения,Пользователь,Комментарий = "",СНИЛС = "", СотрудникАптеки = "") Экспорт
	
	Изменение = Справочники.ИсторияИзмененийДокументов.СоздатьЭлемент();
	Изменение.Объект		= ДокСсылка;
	Изменение.ВидИзменения	= ВидИзменения;
	Изменение.ДатаИзменения = ТекущаяДата();
	Изменение.Пользователь	= Пользователь;
	Изменение.ИмяКомпьютера = ИмяКомпьютера();
	Изменение.Комментарий	= Комментарий;
	Изменение.СНИЛС			= СНИЛС;
	Изменение.СотрудникАптеки = СотрудникАптеки;
	Изменение.Записать();
	
	
КонецПроцедуры

Процедура ЗаписатьСменуСостоянияДокумента(ДокСсылка,РежимЗаписи,ПометкаУдаления) Экспорт
	
	
	Если ПометкаУдаления = Истина Тогда
		Изменение = Справочники.ИсторияИзмененийДокументов.СоздатьЭлемент();
		Изменение.Объект = ДокСсылка;
		Изменение.ДатаИзменения = ТекущаяДата();
		Изменение.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Изменение.ИмяКомпьютера = ИмяКомпьютера();
		Изменение.ВидИзменения	= "Пометка на удаление";
		Изменение.Комментарий	= "Помечен на удаление";
		Изменение.Записать();
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Изменение = Справочники.ИсторияИзмененийДокументов.СоздатьЭлемент();
		Изменение.Объект = ДокСсылка;
		Изменение.ДатаИзменения = ТекущаяДата();
		Изменение.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Изменение.ИмяКомпьютера = ИмяКомпьютера();
		Изменение.ВидИзменения	= "Проведение";
		Изменение.Комментарий	= "Проведен";	
		Изменение.Записать();
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда		
		Изменение = Справочники.ИсторияИзмененийДокументов.СоздатьЭлемент();
		Изменение.Объект = ДокСсылка;
		Изменение.ДатаИзменения = ТекущаяДата();
		Изменение.Пользователь = ПараметрыСеанса.ТекущийСотр;
		Изменение.ИмяКомпьютера = ИмяКомпьютера();
		Изменение.ВидИзменения	= "Отмена проведения";
		Изменение.Комментарий	= "Отмена проведения";	
		Изменение.Записать();
		
	КонецЕсли;
	
		
КонецПроцедуры

Функция ПолучитьИсториюИзмененийДокумента(ДокСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсторияИзмененийДокументов.ДатаИзменения КАК ДатаИзменения,
	               |	ИсторияИзмененийДокументов.Пользователь,
	               |	ИсторияИзмененийДокументов.ИмяКомпьютера,
	               |	ИсторияИзмененийДокументов.СНИЛС,
	               |	ИсторияИзмененийДокументов.ВидИзменения,
	               |	ИсторияИзмененийДокументов.Комментарий,
	               |	ИсторияИзмененийДокументов.СотрудникАптеки,
	               |	ИсторияИзмененийДокументов.Представление,
	               |	ИсторияИзмененийДокументов.ДатаИзмененияВАптеке
	               |ИЗ
	               |	Справочник.ИсторияИзмененийДокументов КАК ИсторияИзмененийДокументов
	               |ГДЕ
	               |	ИсторияИзмененийДокументов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаИзменения";
				   
	Запрос.УстановитьПараметр("Объект",ДокСсылка);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Рез.Выгрузить();
	КонецЕсли;
	
	
КонецФункции

Функция СгенерироватьПароль(ДлинаПароля = 7) Экспорт
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Пароль = "";
	ИспользуемыеСимволы = "=1243456789AQWERTYUPASDFGHJKLZXCVBNMqwertyuiopasdfghjkzxcvbnm";
	Н = СтрДлина(ИспользуемыеСимволы );
	Пока СтрДлина(Пароль) < ДлинаПароля Цикл
		НекийСимвол = Сред(ИспользуемыеСимволы ,(ГСЧ.СлучайноеЧисло(1, Н)),1);
		Пароль = Пароль + НекийСимвол;
	КонецЦикла;	
	
	Возврат Пароль;
	
КонецФункции


#Область ВзаимодействиеСTelegram

Процедура ПослатьСообщениеВТелеграм(ПосылаемыйТекст,КодПроцедуры=999) Экспорт
	
	//ENT-1584 +++ переходим к "выполяемым процедурам"
	ПараметрыПроц = ОМ_ТСО.ИнициализироватьВыполняемуюПроцедуру(КодПроцедуры);		
	Если ПараметрыПроц <> Неопределено Тогда 
		ТокенБота = ПараметрыПроц.ТокенБота;
		IDЧата = ПараметрыПроц.IDЧата;
	//---
		Соединение = Новый HTTPСоединение("api.telegram.org",,,,,Истина);
		Запрос = Новый HTTPЗапрос("bot"+ТокенБота+"/sendMessage?chat_id=-"+IDЧата+"&text=" + ПосылаемыйТекст);
		Ответ   = Соединение.ОтправитьДляОбработки(Запрос);  
	КонецЕсли;
	
	//токен бота AVE_SKD 629320858:AAHtus_X8wFn9MkI7gf6O4Dpuae1mqhnYQ8
		
КонецПроцедуры

#КонецОбласти