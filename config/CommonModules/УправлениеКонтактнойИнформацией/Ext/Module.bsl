// Этот модуль предназначен для реализации алгоритмов работы 
// с контактной информацией.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции // ПроверкаПустойСтроки()

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;
	
	ТипДома = Неопределено;
	ТипКорпуса = Неопределено;
	ТипКвартиры = Неопределено;
	Если ТипЗнч(Запись) = Тип("Структура") Тогда
		Запись.Свойство("ТипДома",     ТипДома);
		Запись.Свойство("ТипКорпуса",  ТипКорпуса);
		Запись.Свойство("ТипКвартиры", ТипКвартиры);
	Иначе
		ТипДома     = Запись.ТипДома;
		ТипКорпуса  = Запись.ТипКорпуса;
		ТипКвартиры = Запись.ТипКвартиры;
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипДома), ТипДома, "дом") + " № " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКорпуса), ТипКорпуса, "корпус") + " " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв.") + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

//Функция по структуре с адресом возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) Экспорт
	
	ТекПредставление = "";
	
	Если СтруктураАдреса = Неопределено Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	АдресЗаПределамиРФ = Неопределено;
	СтруктураАдреса.Свойство("ЗаПределамиРФ", АдресЗаПределамиРФ);
	Если АдресЗаПределамиРФ = Неопределено Тогда
		АдресЗаПределамиРФ = Ложь;
	КонецЕсли;
	
	Если Не АдресЗаПределамиРФ Тогда
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Индекс), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Регион), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Район), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Город), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.НаселенныйПункт), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Улица), ", ");
		
		ТипДома = Неопределено;
		ТипКорпуса = Неопределено;
		ТипКвартиры = Неопределено;
		СтруктураАдреса.Свойство("ТипДома", ТипДома);
		СтруктураАдреса.Свойство("ТипКорпуса", ТипКорпуса);
		СтруктураАдреса.Свойство("ТипКвартиры", ТипКвартиры);
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Дом), ", "      + ?(ЗначениеЗаполнено(ТипДома),     ТипДома,     "дом") + " № ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Корпус), ", "   + ?(ЗначениеЗаполнено(ТипКорпуса),  ТипКорпуса,  "корпус") + " ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Квартира), ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв."));
		
		Если СтрДлина(ТекПредставление) > 2 Тогда
			ТекПредставление = Сред(ТекПредставление, 3);
		КонецЕсли;
	
	Иначе
		
		ТекПредставление = СтруктураАдреса.Представление;
	
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле3)),"");
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + "доб. " + ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4)),"");
	Иначе
		НаборПолей.Представление = ПривестиНомерТелефонаКШаблону(НаборПолей.Поле4);
	КонецЕсли; 

КонецПроцедуры // СформироватьПредставление()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ КИ В ФОРМАХ ОБЪЕКТОВ

// Процедура заполняет поля объекта редактирования адреса по структуре
Процедура ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(Объект, СтруктураАдреса) Экспорт
	
	Если СтруктураАдреса = Неопределено Тогда
		
		Объект.Поле1 = "";
		Объект.Поле2 = "";
		Объект.Поле3 = "";
		Объект.Поле4 = "";
		Объект.Поле5 = "";
		Объект.Поле6 = "";
		Объект.Поле7 = "";
		Объект.Поле8 = "";
		Объект.Поле9 = "";
		Объект.Представление = "";
	
		Возврат;
	КонецЕсли;
	
	Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда			
		Объект.Поле1 = СтруктураАдреса.Страна;
		Объект.Представление = СтруктураАдреса.Представление;		
	Иначе
		Объект.Поле1 = СтруктураАдреса.Индекс;
		Объект.Поле2 = СтруктураАдреса.Регион;
		Объект.Поле3 = СтруктураАдреса.Район;
		Объект.Поле4 = СтруктураАдреса.Город;
		Объект.Поле5 = СтруктураАдреса.НаселенныйПункт;
		Объект.Поле6 = СтруктураАдреса.Улица;
		Объект.Поле7 = СтруктураАдреса.Дом;
		Объект.Поле8 = СтруктураАдреса.Корпус;
		Объект.Поле9 = СтруктураАдреса.Квартира;
		
		//Определяем представление сразу же
		Объект.Представление = ПолучитьПредставлениеАдреса(Объект);
	КонецЕсли;
  
КонецПроцедуры

//Процедура дополняет представление адреса строкой 
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
  	
КонецПроцедуры

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьПолныйАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьПредставлениеАдреса(Запись) = Запись.Представление Тогда	
		Результат = "," + 
		СокрЛП(Запись.Поле1) + ", " +
		СокрЛП(Запись.Поле2) + ", " +
		СокрЛП(Запись.Поле3) + ", " +
		СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет "преобразование" строкового представления адреса в структуру
Функция ПолучитьСтруктуруАдресаИзСтроки(Знач СтроковыйАдрес) Экспорт
	
	Если ПустаяСтрока(СтроковыйАдрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧислоВхожденийЗапятойВАдрес = СтрЧислоВхождений(СтроковыйАдрес, ","); 
	
	Если (ЧислоВхожденийЗапятойВАдрес = 9) ИЛИ (ЧислоВхожденийЗапятойВАдрес = 12) Тогда
		
		СтруктураАдреса = РазложитьАдрес(СтроковыйАдрес);
		
	ИначеЕсли ЧислоВхожденийЗапятойВАдрес >= 1 Тогда
		
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", СокрЛП(Лев(СтроковыйАдрес, Найти(СтроковыйАдрес, ",") - 1)));
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);			
		
	Иначе
		// вообще запятых нет в представлении - значит необычный Российский Адрес
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", Справочники.КлассификаторСтранМира.Россия.Наименование);
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);
		
	КонецЕсли;
		
	Возврат СтруктураАдреса;	
	
КонецФункции

// Процедура считывает контактную информацию из ИБ в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо заполнить КИ
//
Процедура ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка) Экспорт
	
	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Вид КАК Вид,
	|	ВложенныйЗапрос.Тип КАК Тип,
	|	ВложенныйЗапрос.Объект КАК Объект,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле1) КАК Поле1,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле2) КАК Поле2,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле3) КАК Поле3,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле4) КАК Поле4,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле5) КАК Поле5,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле6) КАК Поле6,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле7) КАК Поле7,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле8) КАК Поле8,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле9) КАК Поле9,
	|	МАКСИМУМ(ВложенныйЗапрос.Поле10) КАК Поле10,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипДома) КАК ТипДома,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипКорпуса) КАК ТипКорпуса,
	|	МАКСИМУМ(ВложенныйЗапрос.ТипКвартиры) КАК ТипКвартиры,
	|	МАКСИМУМ(ВложенныйЗапрос.Представление) КАК Представление,
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий) КАК Комментарий,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗначениеПоУмолчанию) КАК ЗначениеПоУмолчанию
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Объект КАК Объект,
	|		ВидыКонтактнойИнформации.Тип КАК Тип,
	|		ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|		"""" КАК Представление,
	|		"""" КАК Поле1,
	|		"""" КАК Поле2,
	|		"""" КАК Поле3,
	|		"""" КАК Поле4,
	|		"""" КАК Поле5,
	|		"""" КАК Поле6,
	|		"""" КАК Поле7,
	|		"""" КАК Поле8,
	|		"""" КАК Поле9,
	|		"""" КАК Поле10,
	|		"""" КАК ТипДома,
	|		"""" КАК ТипКорпуса,
	|		"""" КАК ТипКвартиры,
	|		"""" КАК Комментарий,
	|		"""" КАК ЗначениеПоУмолчанию
	|	ИЗ
	|		Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|	ГДЕ
	|		(НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|		И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РегистрСведенийКонтактнаяИнформация.Объект,
	|		РегистрСведенийКонтактнаяИнформация.Тип,
	|		РегистрСведенийКонтактнаяИнформация.Вид,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Представление КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.Поле1,
	|		РегистрСведенийКонтактнаяИнформация.Поле2,
	|		РегистрСведенийКонтактнаяИнформация.Поле3,
	|		РегистрСведенийКонтактнаяИнформация.Поле4,
	|		РегистрСведенийКонтактнаяИнформация.Поле5,
	|		РегистрСведенийКонтактнаяИнформация.Поле6,
	|		РегистрСведенийКонтактнаяИнформация.Поле7,
	|		РегистрСведенийКонтактнаяИнформация.Поле8,
	|		РегистрСведенийКонтактнаяИнформация.Поле9,
	|		РегистрСведенийКонтактнаяИнформация.Поле10,
	|		РегистрСведенийКонтактнаяИнформация.ТипДома,
	|		РегистрСведенийКонтактнаяИнформация.ТипКорпуса,
	|		РегистрСведенийКонтактнаяИнформация.ТипКвартиры,
	|		ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Комментарий КАК СТРОКА(1000)),
	|		РегистрСведенийКонтактнаяИнформация.ЗначениеПоУмолчанию
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК РегистрСведенийКонтактнаяИнформация
	|	ГДЕ
	|		РегистрСведенийКонтактнаяИнформация.Объект = &Объект) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Вид,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление УБЫВ,
	|	ВложенныйЗапрос.Тип.Порядок,
	|	Вид";
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Представление = СокрП(стр.Представление);
		стр.Комментарий   = СокрП(стр.Комментарий);
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТабЗн);
	
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации = Неопределено) Экспорт
	
	Если КопияНабораКонтактнойИнформации = Неопределено Тогда
		ЗаписатьКонтактнуюИнформациюКакНабор(НаборЗаписей, Ссылка, Отказ);
	Иначе
		ЗаписатьКонтактнуюИнформациюСравниваяСКопией(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформациюКакНабор(НаборЗаписей, Ссылка, Отказ)

	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		
		Запись = НаборЗаписей[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = Ссылка;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	КопияНабора = НаборЗаписей.Выгрузить();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаНабораЗаписей Из КопияНабора Цикл
		НаборЗаписей.Отбор.Вид.Установить(СтрокаНабораЗаписей.Вид);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаНабораЗаписей);
		
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
		
КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформациюСравниваяСКопией(НаборЗаписей, Ссылка, Отказ, КопияНабораКонтактнойИнформации)
	
	ТабКопия = КопияНабораКонтактнойИнформации.Выгрузить();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Запись.Объект = Ссылка;
		
		Отбор = Новый Структура("Объект,Тип,Вид", Запись.Объект, Запись.Тип, Запись.Вид);
		Строки = ТабКопия.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Отличаются = Не ПустаяСтрока(Запись.Представление);
		Иначе
			Отличаются = Ложь;
			СтрКопия = Строки[0];
			
			Для Каждого Колонка Из ТабКопия.Колонки Цикл
				Если СтрКопия[Колонка.Имя] <> Запись[Колонка.Имя] Тогда
					Отличаются = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Отличаются Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Отбор.Тип.Установить(Запись.Тип);
		Набор.Отбор.Вид.Установить(Запись.Вид);
		
		Если Не ПустаяСтрока(Запись.Представление) Тогда
			новЗапись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(новЗапись, Запись);
		КонецЕсли;
		
		Попытка
			Набор.Записать();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка);
	
КонецПроцедуры

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция ПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		Для а = 1 По 10 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		
		СтруктураЗаписи.Вставить("ТипДома"  ,     Запись.ТипДома);
		СтруктураЗаписи.Вставить("ТипКорпуса"  ,  Запись.ТипКорпуса);
		СтруктураЗаписи.Вставить("ТипКвартиры"  , Запись.ТипКвартиры);

		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура переносит строку из таблицы в Структуру
Процедура ПеренестиСтрокуТаблицыВСтруктуру(Таблица, СтрокаТаблицы, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ СтрокаТаблицы = Неопределено 
		ИЛИ Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из Таблица.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента)Экспорт 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиСтрокуВыборкиВСтруктуру()

// Функция возвращает пустое значение определенного типа,
//  в соответствии с видом объекта контактной информации
//
// Параметры
//  ВидОбъектаКонтактнойИнформации - ПеречислениеСсылка.ВидыОбъектовКонтактнойИнформации
//
// Возвращаемое значение:
//   СправочникСсылка (пустая) или Неопределено
//
Функция ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации(ВидОбъектаКонтактнойИнформации) Экспорт

	Если ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.МестаХранения Тогда
		Возврат Справочники.МестаХранения.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ОрганизацииЭДО Тогда
		Возврат Справочники.ОрганизацииЭДО.ПустаяСсылка();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьПустоеЗначениеОбъектаКонтактнойИнформации()

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.МестаХранения") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.МестаХранения;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ОрганизацииЭДО") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ОрганизацииЭДО;
	Иначе
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ВидОбъектаКИ()

// Функция вызывается при начале выбора объекта контактной информации
//
// Параметры
//  ФормаЗаписи - форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент формы записи регистра сведений КонтактнаяИнформация,
//  значение которого выбирается.
//
// Возвращаемое значение:
//   Булево - продолжить стандартную операцию выбора или нет.
//
Функция НачалоВыбораОбъектаКИ(ФормаЗаписи, Элемент) Экспорт

	Если Элемент.Значение <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокТиповОбъектов = Новый СписокЗначений;

	МассивТипов = ?(Элемент.ОграничениеТипа.Типы().Количество()>0, Элемент.ОграничениеТипа.Типы(), Элемент.ТипЗначения.Типы());
	Для каждого Тип Из МассивТипов Цикл
		НовыйТип = Новый(Тип);
		СписокТиповОбъектов.Добавить(НовыйТип.Ссылка.Метаданные().Имя, НовыйТип.Ссылка.Метаданные().Синоним);
	КонецЦикла;

	Если СписокТиповОбъектов.Количество() = 1 Тогда
		ВыбранноеЗначениеСписка = СписокТиповОбъектов[0];
	Иначе
		ВыбранноеЗначениеСписка = ФормаЗаписи.ВыбратьИзСписка(СписокТиповОбъектов, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначениеСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Элемент.Значение = Справочники[ВыбранноеЗначениеСписка.Значение].ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

   	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();
	АдресноеСокращение = "";

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
  	
КонецФункции

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезанную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которого необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется дополнение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классификатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитьКодАдресногоЭлементаНаСоставляющие(Знач Код, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;
	
	КодРегиона = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();

	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры // РазложитьКодАдресногоЭлементаНаСоставляющие()

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
Функция ПолучитьПолноеНазвание(Знач КодЭлемента, НачальныйУровеньДетализации = 1, КонечныйУровеньДетализации = 6) Экспорт
	
	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;

	РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);
	
	Название = "";
	НовыйКод = 0;

	Если (КодРегиона > 0) Тогда
		НовыйКод = КодРегиона * МаскаРегиона();
		Если (1 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 1) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодРайона > 0) Тогда
		НовыйКод = НовыйКод + КодРайона * МаскаРайона();
		Если (2 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 2) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодГорода > 0) Тогда
		НовыйКод = НовыйКод + КодГорода * МаскаГорода();
		Если (3 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 3) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодНаселенногоПункта > 0) Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта * МаскаНасПункта();
		Если (4 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 4) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодУлицы > 0) Тогда
		НовыйКод = НовыйКод + КодУлицы * МаскаУлицы();
		Если (5 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 5) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодДома > 0) Тогда
		НовыйКод = НовыйКод + КодДома * МаскаДома();
		Если (6 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 6) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции // ПолучитьПолноеНазвание()

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населнный пункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт
	
	КодРазбора = КодЭлемента;
	ТипАдресногоЭлемента = ПолучитьТипАдресногоЭлемента(КодРазбора);
	
	КодРегиона = Цел(КодРазбора / МаскаРегиона());
	КодРазбора = КодРазбора % МаскаРегиона();

	КодРайона = Цел(КодРазбора / МаскаРайона());
	КодРазбора = КодРазбора % МаскаРайона();

	КодГорода = Цел(КодРазбора / МаскаГорода());
	КодРазбора = КодРазбора % МаскаГорода();

	КодНаселенногоПункта = Цел(КодРазбора / МаскаНасПункта());
	КодРазбора = КодРазбора % МаскаНасПункта();

	КодУлицы = Цел(КодРазбора / МаскаУлицы());
	
	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	              |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегиона И
	              |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайона И
	              |	АдресныйКлассификатор.КодГородаВКоде = &КодГорода И
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПункта И
	              |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицы И
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипАдресногоЭлемента);
	Запрос.УстановитьПараметр("КодРегиона", КодРегиона);
	Запрос.УстановитьПараметр("КодРайона", КодРайона);
	Запрос.УстановитьПараметр("КодГорода", КодГорода);
	Запрос.УстановитьПараметр("КодНаселенногоПункта", КодНаселенногоПункта);
	Запрос.УстановитьПараметр("КодУлицы", КодУлицы);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
		                         Выборка.Код,
		                         Выборка.Наименование,
		                         Выборка.Сокращение,
		                         Выборка.ТипАдресногоЭлемента,
		                         Выборка.Индекс,
		                         Выборка.КодРегионаВКоде,
		                         Выборка.КодРайонаВКоде,
		                         Выборка.КодГородаВКоде,
		                         Выборка.КодНаселенногоПунктаВКоде,
		                         Выборка.КодУлицыВКоде);

	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат ПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Структура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справочника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0) Экспорт

	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		ТипАдрЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлементаРодителя);
		МаскаРодителя = ПолучитьМаскуПоТипу(ТипАдрЭлемента);
		
		Если ТипАдрЭлемента <= 5 Тогда
			
			КодЭлемента = КодЭлементаРодителя;
			
			РазложитьКодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);

			Если КодРегиона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде)";
				Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегиона);
			КонецЕсли;
			
			Если КодРайона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", КодРайона);
			КонецЕсли;
			
			Если КодГорода <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", КодГорода);
			КонецЕсли;
			
			Если КодНаселенногоПункта <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
			КонецЕсли;
			
			Если КодУлицы <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
			КонецЕсли;
		
		Иначе
			// ограничиваем по коду элемента
			КонечноеЗначениеКода = КодЭлементаРодителя + МаскаРодителя - 1; 
			
			ОграничениеПоКоду = Символы.ПС + "  И (АдресныйКлассификатор.Код Между &НачальноеЗначениеКода И &КонечноеЗначениеКода)";
			Запрос.УстановитьПараметр("НачальноеЗначениеКода", КодЭлементаРодителя);
			Запрос.УстановитьПараметр("КонечноеЗначениеКода", КонечноеЗначениеКода);
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				  |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде

	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Наименование = &Наименование И
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента " +
				  ОграничениеПоКоду;
	

	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Структура = СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	Иначе 
		Структура =  ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		Возврат ВРЕГ(СтрЗаменить("" + Номер, " ", "")) = ВРЕГ(СтрЗаменить("" + Интервал, " ", ""));
	КонецЕсли;

	Номер = Число(Номер);

	ТолькоЧислоИнтервал = ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = ВыделитьЧислоИЗСтроки(Лев(Интервал, Позиция - 1));
		МаксЗначение = ВыделитьЧислоИЗСтроки(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

Функция ВыделитьЧислоИЗСтроки(СтрокаСимволов)
	
	Набор = "0";
	
	Для Индекс = 1 По СтрДлина(СтрокаСимволов) Цикл
		Если КодСимвола(СтрокаСимволов, Индекс) >= 48 И КодСимвола(СтрокаСимволов, Индекс) <= 57 Тогда
			Набор = Набор + Сред(СтрокаСимволов, Индекс, 1);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Число(Набор);
	
КонецФункции

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", 6);
	Запрос.УстановитьПараметр("НижнийКод", Цел(Улица.Код / 10000000000) * 10000000000);
	Запрос.УстановитьПараметр("ВерхнийКод", Цел(Улица.Код / 10000000000 + 1) * 10000000000);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &Уровень И
	|	АдресныйКлассификатор.Код МЕЖДУ &НижнийКод И &ВерхнийКод";

	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	Пока Выборка.Следующий() Цикл

		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ИндексДома) Тогда
		Возврат Улица.Индекс;
	Иначе
		Возврат ИндексДома;
	КонецЕсли;
	
КонецФункции

// Функция определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которого необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса) Экспорт

	РодительИндекса = ПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
        РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса.Код);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса.Код);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса.Код);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса.Код);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ГГГ ППП УУУУ ДДДД КККК АА
//
//        СС   - код региона
//        РРР  - код района
//        ГГГ  - код города
//        ППП  - код населенного пункта
//        УУУУ - код улицы
//        ДДДД - код дома
//        КККК - код квартиры
//        АА   - код актуальности

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона() Экспорт
	Возврат 100000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода() Экспорт
	Возврат 100000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта() Экспорт
	Возврат 100000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы() Экспорт
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома() Экспорт
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры() Экспорт
	Возврат 100;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ - СТАНДАРТНЫЕ ОБРАБОТЧИКИ ПРИ РАБОТЕ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Процедура устанавливает последние значения тайпинга для адресныхЭлементов
Процедура УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов(Регион, Район, Город, НаселенныйПункт, Улица,
							ПоследнееЗначениеРегион, ПоследнееЗначениеРайон, ПоследнееЗначениеГород, ПоследнееЗначениеНаселенныйПункт, ПоследнееЗначениеУлица) Экспорт
	
	ПоследнееЗначениеРегион          = Регион;
	ПоследнееЗначениеРайон           = Район;
	ПоследнееЗначениеГород           = Город;
	ПоследнееЗначениеНаселенныйПункт = НаселенныйПункт;
	ПоследнееЗначениеУлица           = Улица;
	
КонецПроцедуры // УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов()

// Процедура модального редактирования адреса
Процедура РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма = Неопределено, КлючФормы = Неопределено) Экспорт
	
	ОбработкаРедактированияАдреса = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактированияАдреса.мВозвратСтруктуры = Истина;	
	ОбработкаРедактированияАдреса.РедактироватьМодальноЭлементАдресаРазделенногоЗапятыми(Элемент, ЭтаФорма, КлючФормы);
	
КонецПроцедуры

// Стандартный обработчик "Начало выбора из списка" для выпадающего списка сокращений адресного элемента
Процедура АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень) Экспорт
	
	СтандартнаяОбработка = Ложь;
	НазваниеТерриториальнойЕдиницы = СокрЛП(ОбрезатьСокращение(ПолеРедактирования));
	СписокСокращений = ПолучитьСписокСокращений(НазваниеТерриториальнойЕдиницы, Уровень);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ЭтаФорма.ВыбратьИзСписка(СписокСокращений, Элемент);
		Если Сокращение <> Неопределено Тогда
			ПолеРедактирования = НазваниеТерриториальнойЕдиницы + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // АдресныйЭлементПриВыбореИзСпискаСокращений()

// Процедура автоподбора текста для адресного элемента
Процедура АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента, СтруктураЭлемента) Экспорт
	
	МассивПоиска = Новый Массив();
	МассивПоиска.Добавить("Наименование");
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
		
	СтруктураЭлемента = АвтоПодборТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураОграничений, 
												  "АдресныйКлассификатор", МассивПоиска, "Наименование");
	
КонецПроцедуры

// Функция определяет необходимый уровень для детализации имени адресного элемента
Функция ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
	
	НачальныйУровеньАдреса = 1;
	
	Если ЗначениеЗаполнено(ПолеРегиона) И (УровеньЭлемента >= 2) Тогда
		НачальныйУровеньАдреса = 2;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеРайона) И (УровеньЭлемента >= 3) Тогда
		НачальныйУровеньАдреса = 3;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеГорода) И (УровеньЭлемента >= 4) Тогда
		НачальныйУровеньАдреса = 4;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеНаселенногоПункта) И (УровеньЭлемента >= 5) Тогда
		НачальныйУровеньАдреса = 5;	
	КонецЕсли;
	
	Возврат НачальныйУровеньАдреса;		
КонецФункции
											  
// Процедура обработки окончания ввода текста для адресного элемента
Процедура АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента) Экспорт
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, "", УровеньЭлемента);
	НачальныйУровеньДетализацииАдреса = ОпределитьУровеньДетализацииДляАдресногоЭлемента(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента);
	
	СтруктураЭлемента = Новый Структура();
	
	ОкончаниеВводаТекстаВЭлементеУправленияПоАдресномуКлассификатору(Элемент, Текст, Значение, СтандартнаяОбработка, 
		СтруктураОграничений, ЭтаФорма,  
		ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке, ,
		СтруктураЭлемента, НачальныйУровеньДетализацииАдреса, УровеньЭлемента - 1);
		
КонецПроцедуры

// функция возвращает результат запроса для поиска города
Функция ВернутьРезультатЗапросаПоискаГорода(ИмяГорода, КоличествоСтрокВыборки) Экспорт
	
	ОграничениеПоИмени = СформироватьОграничениеПоПолюВхождениеВНачало("АдресныйКлассификатор.Наименование", Тип("Строка"));
	
	НачалоЗапроса = "ВЫБРАТЬ ПЕРВЫЕ " + Строка(КоличествоСтрокВыборки) + " 
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
				  | " + ОграничениеПоИмени + "
				  |	И "; 
				  
	ТекстЗапроса = НачалоЗапроса + " (АдресныйКлассификатор.ТипАдресногоЭлемента = 3 ) 
					| Объединить ВСЕ 
					| 
					|" + НачалоЗапроса + "  			  
	 			  	|	  (АдресныйКлассификатор.ТипАдресногоЭлемента = 1) 
				  	| 	И (АдресныйКлассификатор.КодРегионаВКоде В (77, 78, 92)) 
				  	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", ИмяГорода + "%");
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Возврат РезультатЗапроса;
	
КонецФункции

// функция возвращает результат запроса для поиска улицы города
Функция ВернутьРезультатЗапросаПоискаУлицыГорода(ИмяГорода, ИмяУлицы, КоличествоСтрокВыборки) Экспорт
	
	МассивИменПоиска = Новый Массив();
	МассивИменПоиска.Добавить("Наименование");
	
	СтруктураОграничений = СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода);
	РезультатПодбора = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(ИмяУлицы, СтруктураОграничений, "АдресныйКлассификатор", МассивИменПоиска, КоличествоСтрокВыборки);
	
	Возврат РезультатПодбора;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ДРУГИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	//СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить(); //!!!
	//Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	//КонецЕсли; 
	//ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	//
	//Если ПолученныйШаблон = Неопределено Тогда
	//	Возврат НомерТЛФ;
	//КонецЕсли;
	//
	//ПриведенныйНомер = "";
	//НомерЦифры = 0;
	//
	//Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
	//	Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
	//		НомерЦифры = НомерЦифры + 1;
	//		ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
	//	Иначе
	//		ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
	//	КонецЕсли;
	//КонецЦикла; 

	//Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиКШаблону()

// Процедура по коду адресного элемента возвращает строковые представления его иерархии
Процедура ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, Дом) Экспорт
	
	Элемент = ПолучитьСтруктуруАдресногоЭлемента(КодАдресногоЭлемента);
	
	Если Элемент.ТипАдресногоЭлемента >= 6 Тогда
		Дом = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаДома(), 6);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 5 Тогда
		Улица = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаУлицы(), 5);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 4 Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаНасПункта(), 4);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 3 Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаГорода(), 3);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 2 Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРайона(), 2);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 1 Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРегиона(), 1);
	КонецЕсли;	
	
КонецПроцедуры

// Стандартный обработчик "При Изменении" адресного элемента
Процедура АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, 
			ПоследнееЗначениеЭлементаТайпинга) Экспорт
	
	ПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	Если ПустаяСтрока(Поле1) Тогда
		Поле1 = ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КонецЕсли;
	
КонецПроцедуры

//  Процедура формирует строковое представление адресных элементов -
// "родителей" переданного в переданных параметрах
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, Элемент) Экспорт

	Если (Элемент.ТипАдресногоЭлемента > 4) И НЕ ЗначениеЗаполнено(НаселенныйПункт) Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаНасПункта(), 4);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 3) И НЕ ЗначениеЗаполнено(Город) Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаГорода(), 3);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 2) И НЕ ЗначениеЗаполнено(Район) Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРайона(), 2);
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента > 1) И НЕ ЗначениеЗаполнено(Регион) Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(Элемент.Код - Элемент.Код%МаскаРегиона(), 1);
	КонецЕсли;
		
КонецПроцедуры

// Функция возвращает имя адресного элемента определенного уровня по коду
Функция ПолучитьИмяАдресногоЭлементаПоКоду(КодЭлемента, ТипАдресногоЭлемента) Экспорт
	
	ИмяАдресногоЭлемента = "";
	// сначала по коду определим уровень элемента, если не совпадет с требуемым, то к БД не обращаемся
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлемента);
	Если  ТипЭлемента <> ТипАдресногоЭлемента Тогда
		Возврат ИмяАдресногоЭлемента;
	КонецЕсли;
	
	АдресныйЭлемент = ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента);
	Если АдресныйЭлемент.ТипАдресногоЭлемента = ТипАдресногоЭлемента Тогда
		ИмяАдресногоЭлемента = ПолучитьНазвание(АдресныйЭлемент);
	КонецЕсли;
	
	Возврат ИмяАдресногоЭлемента;
	
КонецФункции

//  Процедура проверяет правильность заполнения потомков определенного адресного элемента
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//
Процедура АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Регион, Район, Город, НаселенныйПункт, Улица, Элемент) Экспорт
	
	КодЭлемента = Неопределено;
	
	ИмяРегиона = ?(Элемент.ТипАдресногоЭлемента = 1, Элемент.Наименование, Регион);
	ИмяРайона = ?(Элемент.ТипАдресногоЭлемента = 2, Элемент.Наименование, Район);
	ИмяГорода = ?(Элемент.ТипАдресногоЭлемента = 3, Элемент.Наименование, Город);
	ИмяНаселенногоПункта = ?(Элемент.ТипАдресногоЭлемента = 4, Элемент.Наименование, НаселенныйПункт);
	ИмяУлицы = ?(Элемент.ТипАдресногоЭлемента = 5, Элемент.Наименование, Улица);
	
	Если (Элемент.ТипАдресногоЭлемента < 2) И ЗначениеЗаполнено(ИмяРайона) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, "", "", "", 2);
		СтруктураОграничений.Свойство("КодРайонаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) Тогда
			// очищаем элемент и все что ниже него по иерархии
			Район = "";	
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если (Элемент.ТипАдресногоЭлемента < 3) И ЗначениеЗаполнено(ИмяГорода) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, "", "", 3);
		СтруктураОграничений.Свойство("КодГородаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Город = "";
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 4) И ЗначениеЗаполнено(ИмяНаселенногоПункта) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, "", 4);
		СтруктураОграничений.Свойство("КодНаселенногоПунктаВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1) 	Тогда
			НаселенныйПункт = "";
			Улица = "";
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТипАдресногоЭлемента < 5) И ЗначениеЗаполнено(ИмяУлицы) Тогда
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(ИмяРегиона, ИмяРайона, ИмяГорода, ИмяНаселенногоПункта, ИмяУлицы, 5);
		СтруктураОграничений.Свойство("КодУлицыВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Улица = "";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция по адресу возвращает структуру ограничений	
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) Экспорт 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, КодРодителя);
			
	Иначе
		СтруктураОграничений = Новый Структура();
	КонецЕсли;
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Функция возвращает строку адресного классификатора по значениям адресных элементов
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы)
											
	РодительскийЭлемент = Неопределено;
	КодРодителяРодителя = 0;

	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
		КодРодителяРодителя = Регион.Код;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, КодРодителяРодителя);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, КодРодителяРодителя);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
		КодРодителяРодителя = НаселенныйПункт.Код;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, КодРодителяРодителя);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
		КодРодителяРодителя = Улица.Код;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции

// Функция возвращает структуру ограничений по переданным параметрам
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона, НазваниеГорода, 
											НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодРодителя);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРегионаВКоде", Цел(КодРодителя / МаскаРегиона()), ТипЭлемента, 1);
    ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде", Цел(КодРодителя / МаскаРайона()) % 1000, ТипЭлемента, 2);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде", Цел(КодРодителя / МаскаГорода()) % 1000, ТипЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде", Цел(КодРодителя / МаскаНасПункта()) % 1000, ТипЭлемента, 4);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", Цел(КодРодителя / МаскаУлицы())% 10000, ТипЭлемента, 5);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик "Обработка выбора" адресного элемента
Процедура АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись) Экспорт
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Процедура открывает форму справочника ВидыКонтактнойИнформации для выбора.
//
// Параметры:
//  РежимВыбора - булево, задает режим выбора для открываемой формы.
//  ВладелецФормы - задает владельца для открываемой формы.
//  ЗначениеОтбораПоТипу - задает значение отбора по типу конт.инф.
//  ЗначениеОтбораПоВидуОбъектаКИ - задает значение отбора по виду объекта конт.инф.
Процедура ОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено,
                                     ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаВыбора", ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	
	Если ЗначениеОтбораПоТипу <> Неопределено Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	
	Если ЗначениеОтбораПоВидуОбъектаКИ <> Неопределено Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ЗначениеЗаполнено(ВладелецФормы.Значение) Тогда
		ВыбФорма.ПараметрТекущаяСтрока = ВладелецФормы.Значение;
	КонецЕсли; 
	
	ВыбФорма.Открыть();
	
КонецПроцедуры

// Процедура формирует представление для Адреса за пределами РФ
Функция СформироватьПредставлениеАдресаЗаПределамиРФ(Страна, Представление) Экспорт

	ТекущееПредставлениеАдреса = Представление;	
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
			
		ПозицияСтраныВАдресе = Найти(Представление, Страна);
		// добавляем страну в самое начало представления, если ее там еще нет
		Если ПозицияСтраныВАдресе <> 1 Тогда
			ТекущееПредставлениеАдреса = Страна + ", " + Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Функция возвращает структуру ограничений улицы по городу
Функция СформироватьСтруктуруОграниченийУлицыПоГороду(ИмяГорода) Экспорт
	
	ОбрезанноеИмяГорода = ВРег(ОбрезатьСокращение(ИмяГорода));
	
	Если ОбрезанноеИмяГорода = "МОСКВА" ИЛИ ОбрезанноеИмяГорода = "САНКТ-ПЕТЕРБУРГ" ИЛИ ОбрезанноеИмяГорода = "СЕВАСТОПОЛЬ" Тогда
		//это вот и есть исключение
		СтруктураОграничений = Новый Структура();
		
		Если ОбрезанноеИмяГорода = "МОСКВА" Тогда
			КодРегионаВКоде = 77;
		ИначеЕсли ОбрезанноеИмяГорода = "САНКТ-ПЕТЕРБУРГ" Тогда
			КодРегионаВКоде = 78;
		Иначе
			КодРегионаВКоде = 92;
		КонецЕсли;
		СтруктураОграничений.Вставить("КодРегионаВКоде", КодРегионаВКоде);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", 5);
		
	Иначе
		// ищем только для города
		СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу("", "", ОбрезанноеИмяГорода, "", "", 5);
		СтруктураОграничений.Вставить("КодНаселенногоПунктаВКоде", 0);
		
	КонецЕсли;

	Возврат СтруктураОграничений;
	
КонецФункции

// Функция возвращает представление адреса за пределами РФ без Страны
Функция ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(Страна, Представление) Экспорт
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
		
		ИмяСтраны = Страна + ", ";
		ПозицияСтраныВАдресе = Найти(Представление, ИмяСтраны);
		// Если только страна в начале, то удаляем ее, иначе не трогаем
		Если ПозицияСтраныВАдресе = 1 Тогда
			ТекущееПредставлениеАдреса = Сред(Представление, СтрДлина(ИмяСтраны) + 1);	
		КонецЕсли;
		
	Иначе
		ТекущееПредставлениеАдреса = Представление;
	КонецЕсли;

	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ КОНТАКТНОЙ ИНФОРМАЦИИ В ДИАЛОГЕ

// Редактировать контактную информацию в диалоге
Функция РедактироватьКонтактнуюИнформациюВДиалоге(Запись, НаборЗаписей, ФормаВладелец) Экспорт

	Если Запись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.Вид                     = Запись.Вид;
	ОбработкаРедактирования.Тип                     = Запись.Тип;
	ОбработкаРедактирования.ДоступностьОбъекта      = Ложь;
	ОбработкаРедактирования.ОтключитьКнопкуЗаписать = Истина;
	ОбработкаРедактирования.ТолькоПросмотрФормы     = ФормаВладелец.ТолькоПросмотр;
	
	Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		СоответствиеПредставлений = Новый Соответствие;
		
		Для Каждого ЗаписьИзНабора Из НаборЗаписей Цикл
			Если ЗаписьИзНабора.Тип = Запись.Тип И Не ПустаяСтрока(ЗаписьИзНабора.Представление) Тогда
				Если СоответствиеПредставлений.Получить(ЗаписьИзНабора.Представление) = Неопределено Тогда
					ОбработкаРедактирования.АдресаДляКопирования.Добавить(ЗаписьИзНабора, ЗаписьИзНабора.Представление);
					СоответствиеПредставлений.Вставить(ЗаписьИзНабора.Представление, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаРедактирования.РедактироватьЗапись(Запись, , ФормаВладелец, , Истина);

КонецФункции // РедактироватьКонтактнуюИнформациюВДиалоге()

// Заполнить значения полей ввода на основной форме и установить картинку в надписи "Прочая КИ"
Процедура ЗаполнитьЗначенияКИ(СтруктураДляРедактирования) Экспорт
	// очистим сначала все поля ввода
	Для Каждого Стр из СтруктураДляРедактирования.Элементы Цикл
		Стр.ПолеВвода.Значение = "";
	КонецЦикла;
	
	Если СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
		СтруктураДляРедактирования.ПолеВводаПрочейКИ.Значение = "";
	КонецЕсли;
	
	КолвоПрочейКИ = 0;
	Для Каждого Запись Из СтруктураДляРедактирования.НаборКонтактнойИнформации Цикл
		Если Не ПустаяСтрока(Запись.Представление) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Вид", Запись.Вид);
			Отбор.Вставить("Тип", Запись.Тип);
			Строки = СтруктураДляРедактирования.Настройки.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				КолвоПрочейКИ = КолвоПрочейКИ + 1;
				Продолжить;
			КонецЕсли;
			
			Стр = СтруктураДляРедактирования.Элементы.Найти(Строки[0], "СтрНастройки");
			Если Стр<>Неопределено Тогда
				Стр.ПолеВвода.Значение = Запись.Представление;
			Иначе
				Если Запись.Вид = СтруктураДляРедактирования.ВидПрочейКИ Тогда
					Если СтруктураДляРедактирования.ПолеВводаПрочейКИ <> Неопределено Тогда
						СтруктураДляРедактирования.ПолеВводаПрочейКИ.Значение = Запись.Представление;
					КонецЕсли;
				Иначе
					КолвоПрочейКИ = КолвоПрочейКИ + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДляРедактирования.НадписьПрочаяКИ <> Неопределено Тогда
		СтруктураДляРедактирования.НадписьПрочаяКИ.Заголовок = "Прочая контактная информация (" + ?(КолвоПрочейКИ = 0, "пусто", КолвоПрочейКИ) + ")";
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАБОРОМ ЗАПИСЕЙ КОНТАКТНОЙ ИНФОРМАЦИИ

// Очистить поля хранящие контактную информацию в записи из набора
Процедура ОчиститьЗаписьКонтактнойИнформации(Запись) Экспорт

	Если Запись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись.Представление = "";
	Запись.Комментарий   = "";
	Запись.Поле1 = "";
	Запись.Поле2 = "";
	Запись.Поле3 = "";
	Запись.Поле4 = "";
	Запись.Поле5 = "";
	Запись.Поле6 = "";
	Запись.Поле7 = "";
	Запись.Поле8 = "";
	Запись.Поле9 = "";
	Запись.Поле10= "";
	Запись.ТипДома     = Неопределено;
	Запись.ТипКорпуса  = Неопределено;
	Запись.ТипКвартиры = Неопределено;

КонецПроцедуры

// Скопировать данные из одной записи в другую
Процедура СкопироватьДанныеКИИзЗаписиВДругую(Откуда, Куда) Экспорт

	Куда.Представление = Откуда.Представление;
	Куда.Поле1         = Откуда.Поле1;
	Куда.Поле2         = Откуда.Поле2;
	Куда.Поле3         = Откуда.Поле3;
	Куда.Поле4         = Откуда.Поле4;
	Куда.Поле5         = Откуда.Поле5;
	Куда.Поле6         = Откуда.Поле6;
	Куда.Поле7         = Откуда.Поле7;
	Куда.Поле8         = Откуда.Поле8;
	Куда.Поле9         = Откуда.Поле9;
	Куда.Поле10        = Откуда.Поле10;
	Куда.ТипДома       = Откуда.ТипДома;
	Куда.ТипКорпуса    = Откуда.ТипКорпуса;
	Куда.ТипКвартиры   = Откуда.ТипКвартиры;
	Куда.Комментарий   = Откуда.Комментарий;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи
Процедура ЗаполнитьПоляВЗаписиПоПредставлению(Запись, Представление) Экспорт

	Если Запись = Неопределено Тогда
		Возврат;
	ИначеЕсли Запись.Представление = Представление Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЗаписьКонтактнойИнформации(Запись);
	Запись.Представление = Представление;
		
	Если ПустаяСтрока(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Если Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		// Для телефона попробуем разобрать составляющие
		ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Запись, Представление);
		
	ИначеЕсли Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		  ЗаполнитьПоляВЗаписиПоПредставлениюАдрес(Запись, Представление);
		  
	КонецЕсли;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи для телефона
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюТелефон(Запись, Представление)

	текСтр = СокрЛП(Представление);
	Запись.Поле1 = "";
	Запись.Поле2 = "";
	Запись.Поле3 = "";
	Запись.Поле4 = "";
	
	// вырежем добавочный номер
	Поз = Найти(ВРЕГ(текСтр), "ДОБ.");
	Если Поз <> 0 Тогда
		Запись.Поле4 = СокрЛП(Сред(текСтр, Поз+4));
		текСтр = СокрЛП(Лев(текСтр, Поз-1));
		
		Если Прав(текСтр, 1) = "," Тогда
			текСтр = Лев(текСтр, СтрДлина(текСтр)-1);
		КонецЕсли;
	КонецЕсли;
	
	// вырежем код города
	Поз = Найти(текСтр, "(");
	Если Поз <> 0 Тогда
		Запись.Поле1 = СокрЛП(Лев(текСтр, Поз-1));
		
		текСтр = СокрЛП(Сред(текСтр, Поз+1));
		Поз = Найти(текСтр, ")");
		
		Если Поз <> 0 Тогда
			Запись.Поле2 = СокрЛП(Лев(текСтр, Поз-1));
			текСтр = СокрЛП(Сред(текСтр, Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	// все оставшееся это номер
	Запись.Поле3 = ПривестиНомерТелефонаКШаблону(текСтр);
	
	// Поправим представление
	СформироватьПредставлениеТелефона(Запись);
	Представление = Запись.Представление;

КонецПроцедуры

// По полю Представление заполнить остальные поля в записи для адреса
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюАдрес(Запись, Представление)

	Стр = СокрЛП(Представление);
	предУровень = 0;
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Поз = Найти(Стр, ",");
		текСтр = СокрЛП(?(Поз=0, Стр, Лев(Стр, Поз-1)));
		Стр = СокрЛП(?(Поз=0, "", Сред(Стр, Поз+1)));
		текВ = ВРег(текСтр);
		
		Если СтрДлина(текСтр) = 6 И ТолькоЦифрыВСтроке(текСтр) Тогда
			// это индекс
			Запись.Поле1 = текСтр;
			Продолжить;
			
		ИначеЕсли Лев(текВ,6) = "ДОМ № " Тогда
			// это номер дома
			Запись.Поле7 = СокрЛП(Сред(текСтр,7));
			Запись.ТипДома = Перечисления.ТипыДомов.Дом;
			Продолжить;
			
		ИначеЕсли Лев(текВ,11) = "ВЛАДЕНИЕ № " Тогда
			// это номер дома
			Запись.Поле7 = СокрЛП(Сред(текСтр,12));
			Запись.ТипДома = Перечисления.ТипыДомов.Владение;
			Продолжить;
			
		ИначеЕсли Лев(текВ,7) = "КОРПУС " Тогда
			// это номер корпуса
			Запись.Поле8 = СокрЛП(Сред(текСтр,8));
			Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
			Продолжить;
			
		ИначеЕсли Лев(текВ,9) = "СТРОЕНИЕ " Тогда
			// это номер корпуса
			Запись.Поле8 = СокрЛП(Сред(текСтр,10));
			Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Строение;
			Продолжить;
			
		ИначеЕсли Лев(текВ,3) = "КВ." Тогда
			// это номер квартиры
			Запись.Поле9 = СокрЛП(Сред(текСтр,4));
			Запись.ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
			Продолжить;
			
		ИначеЕсли Лев(текВ,3) = "ОФ." Тогда
			// это номер офиса
			Запись.Поле9 = СокрЛП(Сред(текСтр,4));
			Запись.ТипКвартиры = Перечисления.ТипыКвартир.Офис;
			Продолжить;
			
		КонецЕсли;
		
		// попробуем найти адресное сокращение и по нему определить тип поля
		Поз=0;
		Для Сч=1 По СтрДлина(текСтр) Цикл
			Если Сред(текСтр,Сч,1) = " " Тогда
				Поз = Сч;
			КонецЕсли;
		КонецЦикла;
		
		Если Поз=0 Тогда
			Продолжить;
		КонецЕсли;
		
		АдрСокр = СокрЛП(Сред(текСтр, Поз+1));
		ТЗ = "ВЫБРАТЬ
		|	МИНИМУМ(АдресныеСокращения.Уровень) Как Уровень
		|ИЗ
		|	Справочник.АдресныеСокращения КАК АдресныеСокращения
		|ГДЕ
		|	АдресныеСокращения.Сокращение = &Сокращение
		|	И АдресныеСокращения.Уровень > &предУровень";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТЗ;
		Запрос.УстановитьПараметр("Сокращение",  АдрСокр);
		Запрос.УстановитьПараметр("предУровень", предУровень);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		Уровень = Выборка.Уровень;
		предУровень = Уровень;
		
		Если Уровень=1 Тогда
			Запись.Поле2 = текСтр;
		ИначеЕсли Уровень=2 Тогда
			Запись.Поле3 = текСтр;
		ИначеЕсли Уровень=3 Тогда
			Запись.Поле4 = текСтр;
		ИначеЕсли Уровень=4 Тогда
			Запись.Поле5 = текСтр;
		ИначеЕсли Уровень=5 Тогда
			Запись.Поле6 = текСтр;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Получить запись в наборе записей по типу и виду
Функция ПолучитьЗаписьВНаборе(Набор, Вид, Тип) Экспорт

	Для Каждого Запись Из Набор Цикл
		
		Если (Запись.Тип = Тип) И (Запись.Вид = Вид) Тогда
			Возврат Запись;
		КонецЕсли;
		
	КонецЦикла;
	
	Запись = Набор.Добавить();
	Запись.Вид = Вид;
	Запись.Тип = Тип;
	
	Возврат Запись;

КонецФункции // ПолучитьЗаписьВНаборе()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ВВОДА ПО СТРОКЕ В ПОЛЕ ВВОДА

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, 
	ОбработкаПоискаПоСтроке = Неопределено, ТекстПоискаПоСтроке = Неопределено, ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено, 
	ПриОтсутствииЗначенияОставлятьТекст = Истина, Знач СообщатьПользователюОбОшибкеВводаДанных = Истина) Экспорт

	Если ПустаяСтрока(Текст) Тогда
		Значение = Новый(ТипСправочника);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
	
	ПоляПоиска = СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника);

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
	
	// определим способ основного представления справочника
	ОсновноеПредставлениеВВидеКода = Ложь;
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипСправочника);
	Если ОбъектМетаданных <> Неопределено Тогда
		Если ОбъектМетаданных.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
			ОсновноеПредставлениеВВидеКода = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаПоискаПоСтроке, 
										ПриОтсутствииЗначенияОставлятьТекст, ПоляПоиска, "Ссылка", , ОсновноеПредставлениеВВидеКода,
										СообщатьПользователюОбОшибкеВводаДанных);
	
КонецПроцедуры

// Процедура организует выбор элементов по результату запроса
Процедура ВыбратьЭлементОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено, 
											ПриОтсутствииЗначенияОставлятьТекст = Истина, ПоляПоиска, ПолеВыбора, 
											СтруктураВыбранногоЭлемента = Неопределено, ОсновноеПредставлениеВВидеКода = Ложь,
											Знач СообщатьПользователюОбОшибкеВводаДанных = Истина)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		Значение = Текст;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ТаблицаВыборки = РезультатЗапроса.Выгрузить();
	Значение = СформироватьСписокВыбораЗначенийПоискаПоСтроке(ТаблицаВыборки, Текст, ПоляПоиска, ОсновноеПредставлениеВВидеКода);
	
КонецПроцедуры

// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
//
// Параметры
//  РезультатЗапроса - РезультатЗапроса при поиске по строке
//  Текст - Строка, текст поиска по строке
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  ОсновноеПредставлениеВВидеКода - Булево, является ли представление в виде кода основным для справочника
//
// Возвращаемое значение:
//   Список значений
//
Функция СформироватьСписокВыбораЗначенийПоискаПоСтроке(ТаблицаЗапроса, Знач Текст, ПоляПоиска, ОсновноеПредставлениеВВидеКода)

	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
	ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
	
	НужноИскатьПоКоду 		  = (ВернутьИндексВМассиве(ПоляПоиска, "Код") <> -1);
	НужноИскатьПоНаименованию = (ВернутьИндексВМассиве(ПоляПоиска, "Наименование") <> -1);

	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		Если ЕстьНаименование И НужноИскатьПоНаименованию И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			Если ОсновноеПредставлениеВВидеКода И ЕстьКод Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Код + " (" + Строка(СтрокаТаблицы.Наименование) + ")");
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + Строка(СтрокаТаблицы.Код) + ")"), "")));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ЕстьКод И НужноИскатьПоКоду И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
			Если ЕстьНаименование Тогда
				Если ОсновноеПредставлениеВВидеКода И ЕстьКод Тогда
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Код + " (" + Строка(СтрокаТаблицы.Наименование) + ")");
				Иначе
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + " (" + Строка(СтрокаТаблицы.Код) + ")"));
				КонецЕсли;
			Иначе
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, Строка(СтрокаТаблицы.Код));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
			Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли; 
		
			Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
				Прервать;
			КонецЕсли
			
		КонецЦикла; 
	
	КонецЦикла;	 

	Возврат СписокВозврата;
	
КонецФункции

// Функция формирует массив имен полей по которым организованн ввод по строке
Функция СформироватьМассивПоКоллекцииВводаПоСтроке(ТипСправочника) Экспорт
	
	ПоляПоиска = Новый Массив();
	ПустаяСсылка = Новый(ТипСправочника);
	КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
		ПоляПоиска.Добавить(ЭлементКоллекции.Имя)
	КонецЦикла;
	
	Возврат ПоляПоиска;
	
КонецФункции

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ПустаяСсылка = Новый(ТипСправочника);
			КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
			Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
				Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
					Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
						ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Функция формирует ограничение для запроса по полю 
Функция СформироватьОграничениеПоПолюВхождениеВНачало(ИмяПоля, ТипЗначенияПоиска) Экспорт
	
	Ограничение = ИмяПоля + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло"));
	Возврат "(" + Ограничение + ") ";
	
КонецФункции

//Функция Определяет тип ограничений по полю
Функция ОпределитьТипОграниченийПоПолю(ИмяЭлемента, МетаданныеОбъекта, ДляСправочника = Истина)
	
	Если ДляСправочника Тогда
		
		Если ИмяЭлемента <> "Наименование" И ИмяЭлемента <> "Код" Тогда
	    	ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ИмяЭлемента].Тип.Типы()[0];
		Иначе
			Если ИмяЭлемента = "Наименование" Тогда
				ТипЗначенияПоиска = Тип("Строка");
			Иначе
				Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					ТипЗначенияПоиска = Тип("Число");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	Иначе
		// тип определяем для регистра сведений
		Объект = МетаданныеОбъекта.Измерения.Найти(ИмяЭлемента);
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Ресурсы.Найти(ИмяЭлемента);
		КонецЕсли;
		Если Объект = Неопределено Тогда
			Объект = МетаданныеОбъекта.Реквизиты.Найти(ИмяЭлемента);
			Если Объект = Неопределено Тогда
				ТипЗначенияПоиска = Тип("Строка");
			КонецЕсли;	
		КонецЕсли;
		ТипЗначенияПоиска = Объект.Тип.Типы()[0];
		
	КонецЕсли;
	
	Возврат  ТипЗначенияПоиска;
	
КонецФункции

// Функция создает объект запрос и устанавливает у него параметры ТекстАвтоПодбора и ТекстАвтоПодбораЧисло
// убирает лишние символы в строке поиска
Функция СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	
	СтрокаПоиска = СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
		
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (СтрокаПоиска + "%"));
	Попытка
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(СтрокаПоиска));
	Исключение
		Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
	КонецПопытки;
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
        Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
		|		И
		|		" + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
	
КонецФункции

// функция по типу возвращает наименование ветки метаданных
Функция ПолучитьВеткуМетаданныхПоТипу(ТипДанных)
	
	ВеткаМетаданных = "";
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "Справочник"
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовРасчета"
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланВидовХарактеристик"
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипДанных) Тогда
		ВеткаМетаданных = "ПланСчетов"
	КонецЕсли;
	
	Возврат ВеткаМетаданных;

КонецФункции

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт
    	
	ВеткаМетаданных = ПолучитьВеткуМетаданныхПоТипу(ТипСправочника);
	
	Если ВеткаМетаданных = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПустаяСсылкаТипа = Новый(ТипСправочника);

	МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
	
	КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
	Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
	ИмяТаблицыОграничений = ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса", "ТаблицаСправочника");
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений);
	
	СтрокаПолей = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
	|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
	|";
	
	Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
	КонецЕсли;
	
	Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
		СтрокаПолей = СтрокаПолей + "
		|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
	КонецЕсли; 
	
	Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
		
		ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
		
		Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;

		КонецЕсли;
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|	" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
		|ГДЕ ";
		
		ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
		
		ОграничениеПоПолю = ОграничениеПоПолю + "
		|	И НЕ ТаблицаВложенногоЗапроса.ПометкаУдаления ";
		
		Запрос.Текст = Запрос.Текст +"
		|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;
	
	Иначе
		
		ПервыйЭлемент = Истина;
		СтрокаТаблиц = "";
		Для Каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
			
			ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ЭлементКоллекции.Имя, МетаданныеОбъекта);
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";

			КонецЕсли;
			
			Если НЕ ПервыйЭлемент Тогда
				СтрокаТаблиц = СтрокаТаблиц + "
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли; 
			ПервыйЭлемент = Ложь;
			
			СтрокаТаблиц = СтрокаТаблиц + "
			|	ВЫБРАТЬ  ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
			|		ТаблицаСправочника.Ссылка КАК Ссылка
			|	ИЗ
			|		" + ВеткаМетаданных + "." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|	ГДЕ ";
			
			ОграничениеПоПолю = СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаСправочника." + ЭлементКоллекции.Имя, ТипЗначенияПоиска);
			
			ОграничениеПоПолю = ОграничениеПоПолю + "
			|	И НЕ ТаблицаСправочника.ПометкаУдаления ";
			
			СтрокаТаблиц = СтрокаТаблиц +"
			|	" + ОграничениеПоПолю + СтрокаОтборовПоСтруктуре;		
		КонецЦикла; 
		
		Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
		|ИЗ
		|
		|	(
		|" + СтрокаТаблиц + "
		|	) КАК ТаблицаВложенногоЗапроса";
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();

	
	
КонецФункции

// Функция подбирает значения по выборке
Функция ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПоляПоиска, Знач ПолеВыбора = "") Экспорт
	
	СтруктураНайденногоЭлемента = Новый Структура;
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли;
	
	ВрегТекст =	ВРег(Текст);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат СтруктураНайденногоЭлемента;
	КонецЕсли;

	// выбран только один элемент - его и подставляем
	Выборка.Следующий();
	Для Каждого ИмяПоляПоиска Из ПоляПоиска Цикл
		ВрегЗначение = Врег(Выборка[ИмяПоляПоиска]);
		
		Если Лев(ВрегЗначение, СтрДлина(ВрегТекст)) = ВрегТекст Тогда
			Если ВрегТекст <> ВрегЗначение Тогда
				
				Если ПустаяСтрока(ПолеВыбора) Тогда			
					ТекстАвтоподбора = Выборка[ИмяПоляПоиска];
				Иначе
					ТекстАвтоподбора = Выборка[ПолеВыбора];
				КонецЕсли;
				
				УправлениеКонтактнойИнформацией.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураНайденногоЭлемента);
			КонецЕсли;
			
			Возврат СтруктураНайденногоЭлемента;
		КонецЕсли; 
		
	КонецЦикла;  
		
КонецФункции

// Функция обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  ТекстАвтоПодбора - текст автоподбора в поле Вид
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - строка, имя регистра в котором ищется информация
//	ПоляПоиска - массивы полей для Поиска
//
Функция АвтоПодборТекстаВЭлементеУправленияПоРегистру(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, 
														ИмяРегистра, ПоляПоиска, ПолеВыбора) Экспорт

	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураПараметров, ИмяРегистра, ПоляПоиска, 2);
	//МассивПолеВыбора = Новый Массив();
	//МассивПолеВыбора.Добавить(ПолеВыбора);
	СтруктураНайденногоЭлемента = ПолучитьАвтоподборПоВыборке(РезультатЗапроса, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПоляПоиска, ПолеВыбора);
	Возврат СтруктураНайденногоЭлемента;
	
КонецФункции

//Функция Строит запрос автоподбора для регистра
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, ИмяРегистра, ПоляДляПоиска, КоличествоЭлементов) Экспорт
	
	Если (ПоляДляПоиска = Неопределено) ИЛИ ПоляДляПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Объект = Метаданные.РегистрыСведений[ИмяРегистра];
    	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
				  	|	ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + "
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК ТаблицаРегистра
		|ГДЕ ";

	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = "";
	Для Каждого ПолеПоиска из ПоляДляПоиска Цикл
		
		ТипЗначенияПоиска = ОпределитьТипОграниченийПоПолю(ПолеПоиска, Объект, Ложь);
		Если (ОграничениеПоПолю <> "") Тогда
			ОграничениеПоПолю = ОграничениеПоПолю + "
				| ИЛИ ";
		КонецЕсли;
		ОграничениеПоПолю = ОграничениеПоПолю + СформироватьОграничениеПоПолюВхождениеВНачало("ТаблицаРегистра." + ПолеПоиска, ТипЗначенияПоиска);

	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст +"
		|	(" + ОграничениеПоПолю + ") " + СтрокаОтборовПоСтруктуре;

	Возврат Запрос.Выполнить();
 	
КонецФункции

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления По Адресному Классификатору
Процедура ОкончаниеВводаТекстаВЭлементеУправленияПоАдресномуКлассификатору(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, 
															ОбработкаПоискаПоСтроке = Неопределено, ТекстПоискаПоСтроке = Неопределено, 
															ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина,
															СтруктураВыбранногоЭлемента = Неопределено, 
															НачальныйУровеньДетализацииАдреса, КонечныйУровеньДетализацииАдреса) Экспорт                                               

	Если ПустаяСтрока(Текст) Тогда
		Значение = "";
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	МассивПоиска = Новый Массив();
    МассивПоиска.Добавить("Наименование");

	СокращенныйТекстТерритории = СокрЛП(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Текст));
	СообщатьОбОшибкеПриОтсутствииЭлементов = (СокращенныйТекстТерритории = Текст);

  	// пробуем найти адресный элемент без обрезания потенциального сокращения
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураПараметров, "АдресныйКлассификатор", МассивПоиска, 51);
	Если РезультатЗапроса.Пустой() И НЕ СообщатьОбОшибкеПриОтсутствииЭлементов Тогда
		
		// Ничего найти не удалось. Обрезаем сокращения и пытаемся еще раз
		РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(СокращенныйТекстТерритории, СтруктураПараметров, "АдресныйКлассификатор", МассивПоиска, 51);
		
	КонецЕсли;
	
	ВыбратьЭлементОкончаниеВводаАдресногоКлассификатора(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, РезультатЗапроса, 
										ЭтаФорма, ПоследнееЗначениеЭлементаПоискаПоСтроке, ПриОтсутствииЗначенияОставлятьТекст, 
										МассивПоиска, "Наименование", СтруктураВыбранногоЭлемента, НачальныйУровеньДетализацииАдреса, КонечныйУровеньДетализацииАдреса);
	
КонецПроцедуры

// Процедура организует выбор элементов по результату запроса
Процедура ВыбратьЭлементОкончаниеВводаАдресногоКлассификатора(Элемент, Текст, Значение, СтандартнаяОбработка, ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, РезультатЗапроса, ЭтаФорма, ПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено, 
											ПриОтсутствииЗначенияОставлятьТекст = Истина, ПоляПоиска, ПолеВыбора, 
											СтруктураВыбранногоЭлемента = Неопределено, НачальныйУровеньДетализации = 0, КонечныйУровеньДетализации = 5)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
		Значение = Текст;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоЭлементовВыборки = Выборка.Количество();
	
	Если КоличествоЭлементовВыборки = 1 Тогда
		
		// единственный элемент в выборке - переносим значение в структуру
		ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);	
		Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки > 50 Тогда
		
		ПредупредитьНайденоБолееПятидесятиЭлементов();
		// то что пользователь ввел то и оставляем
		Значение = Текст;
        Возврат;
		
	ИначеЕсли КоличествоЭлементовВыборки = 0 Тогда
		ЭлементВыбран = Ложь;
	Иначе
		
		// из выпадающего списка предлагаем выбрать элемент
		ТаблицаВыборки = РезультатЗапроса.Выгрузить();
		СписокВыбора = СформироватьСписокВыбораАдресногоКлассификатора(ТаблицаВыборки, Текст, 
																			НачальныйУровеньДетализации, КонечныйУровеньДетализации);
		
		ЭлементВыбран = ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента);
		
	КонецЕсли; 
	
	Если ЭлементВыбран Тогда
		Возврат;
	КонецЕсли;
	
	// то что пользователь ввел то и оставляем
	Значение = Текст;
		
КонецПроцедуры

// процедура переносит значение из выборки в структуру
Процедура ОбработатьЕдинственныйЭлементВыбора(РезультатЗапроса, Выборка, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента)
	
	Выборка.Следующий();
	Значение = Выборка[ПолеВыбора];
	УправлениеКонтактнойИнформацией.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, Выборка, СтруктураВыбранногоЭлемента);	
	
КонецПроцедуры

// функция возвращает был ли выбран пользователем элемент из выпадающего списка выбора
Функция ОпределитьВыборПользователяИзСписка(Элемент, ЭтаФорма, СписокВыбора, ТаблицаВыборки, Значение, ПолеВыбора, СтруктураВыбранногоЭлемента)
	
	// а содержит ли список строки
	Если СписокВыбора.Количество() > 0 Тогда
		// список отсортируем в алфавитном порядке
		СписокВыбора.СортироватьПоПредставлению();
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	Иначе
		ВыбранныйЭлемент = Неопределено; // если список пустой - выбирать не из чего
	КонецЕсли;
		
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыбраннаяСтрока = ТаблицаВыборки.Найти(ВыбранныйЭлемент.Значение, "УникальныйНомерСтроки");
		Значение = ВыбраннаяСтрока[ПолеВыбора];
		// структуру надо вернуть
		ПеренестиСтрокуТаблицыВСтруктуру(ТаблицаВыборки, ВыбраннаяСтрока, СтруктураВыбранногоЭлемента);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура предупреждает пользователя что найдено более 50 элементов для подбора
Процедура ПредупредитьНайденоБолееПятидесятиЭлементов()
	
	Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
				   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
				   
КонецПроцедуры

// Функция формирует список выбора значений, для АдресногоКлассификатора
Функция СформироватьСписокВыбораАдресногоКлассификатора(ТаблицаЗапроса, Знач Текст, НачальныйУровеньДетализации, КонечныйУровеньДетализации)

	КЧ = Новый КвалификаторыЧисла(12,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаЗапроса.Колонки.Добавить("УникальныйНомерСтроки", ОписаниеТиповЧ);
	
	СписокВозврата = Новый СписокЗначений;
	
	Текст = ВРег(Текст);
	ДлинаТекста = СтрДлина(Текст);
	
	НомерЭлемента = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		СтрокаТаблицы.УникальныйНомерСтроки = НомерЭлемента;
		НомерЭлемента = НомерЭлемента + 1;
				
		Если ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
			
			// Нужно сформировать полное наименование адресного элемента
			// Смотрим какой уровень детализации и такое наименование и строим
			НаименованиеЭлемента = УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(СтрокаТаблицы.Код, НачальныйУровеньДетализации, КонечныйУровеньДетализации);
			НаименованиеТекущегоУровня = СтрокаТаблицы.Наименование + " " + СтрокаТаблицы.Сокращение;
			ПолноеНаименованиеЭлемента = ?(НЕ ЗначениеЗаполнено(НаименованиеЭлемента), НаименованиеТекущегоУровня, 
											НаименованиеТекущегоУровня + " (" + НаименованиеЭлемента + ")");
			СписокВозврата.Добавить(СтрокаТаблицы["УникальныйНомерСтроки"], ПолноеНаименованиеЭлемента);
			
		КонецЕсли;
					
	КонецЦикла; 

	Возврат СписокВозврата;
	
КонецФункции

//Представляет адрес в "удобочитаемом" виде	для отражения в формах
//
//	Параметры: 
//		АдреснаяСтрока (строка), адрес представление которого нужно вернуть.
//		Способ - способ представления адреса (если=1, то возвращает представление адреса без индекса)
//
//	Возвращаемое значение:
//		строку - представление адреса
//
//	Описание:
//		Предназначена для формирования адресной строки в "удобочитаемом" виде
//		для отражения в формах.
//
Функция ПредставлениеАдреса(Знач АдреснаяСтрока, Способ = 0, ПредставлениеПустого = "<<Адрес не задан>>") Экспорт

	Если НЕ ЗначениеЗаполнено(СтрЗаменить(АдреснаяСтрока,",","")) Тогда
		Возврат ПредставлениеПустого;
	КонецЕсли;

	СтруктураАдрес = РазложитьАдрес(АдреснаяСтрока);
	Если АдресСоответствуетТребованиям(СтруктураАдрес) Тогда
		Адрес = "";
		Если ЗначениеЗаполнено(СтруктураАдрес.Страна) Тогда
			СсылкаНаСтрану = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтруктураАдрес.Страна);
			Если НЕ СсылкаНаСтрану.Пустая() Тогда
				Адрес = Адрес +", "+ СсылкаНаСтрану.Наименование;
			Иначе
				Адрес = Адрес +", "+ СтруктураАдрес.Страна;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтруктураАдрес.Индекс)и(Способ<>1) тогда
			Адрес = Адрес + СтруктураАдрес.Индекс;
		КонецЕсли;	 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Регион),", "+СтруктураАдрес.Регион,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Район),", "+СтруктураАдрес.Район,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Город),", "+СтруктураАдрес.Город,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.НаселенныйПункт),", "+СтруктураАдрес.НаселенныйПункт,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Улица),", "+СтруктураАдрес.Улица,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Дом),", д."+СтруктураАдрес.Дом,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Корпус),", корп. "+СтруктураАдрес.Корпус,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Квартира),", кв. "+СтруктураАдрес.Квартира,""); 

		Адрес = Сред(Адрес,1);//Убрали первую запятую
	Иначе
		Адрес = СтрЗаменить(АдреснаяСтрока, Символы.ПС, ", ");
	КонецЕсли;
	Возврат Адрес;
КонецФункции	// глПредставлениеАдреса

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";
	
	ТипДома ="";
	ТипКорпуса ="";
	ТипКвартиры ="";

	МассивАдрес	=	РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;
	
    //Расширенное представление
	Если ЭлементовВМассиве	>	10	тогда
		ТипДома	    = СокрЛП(МассивАдрес[10]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	11	тогда
		ТипКорпуса	= СокрЛП(МассивАдрес[11]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	12	тогда
		ТипКвартиры = СокрЛП(МассивАдрес[12]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);
	СтруктураВозврата.Вставить("ТипДома",ТипДома);
	СтруктураВозврата.Вставить("ТипКорпуса",ТипКорпуса);
	СтруктураВозврата.Вставить("ТипКвартиры",ТипКвартиры);

	Возврат СтруктураВозврата;
	
КонецФункции	 

//Определяет соответствие основных параметров адреса требованиям ФНС
//
Функция АдресСоответствуетТребованиям(Знач СтруктураАдрес) Экспорт
	
	Город = СтруктураАдрес.Город;
	Город = СтрЗаменить(Город,"с/с","");
	Город = СтрЗаменить(Город,"с/а","");  
	Город = СтрЗаменить(Город,"с/мо","");
	Город = СтрЗаменить(Город,"с/о",""); 
	Город = СтрЗаменить(Город,"с/п",""); 
	Город = СтрЗаменить(Город,"/",""); 
	НаселенныйПункт = СтруктураАдрес.НаселенныйПункт;
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д_","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д","");  
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/р","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/ст",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/о",""); 

	// Элементы классификатора KLADR. Встречаются элементы с "/". "(", ")".
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"/","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"(",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,")",""); 

	Улица = СтруктураАдрес.Улица; 

	// Элементы классификатора сокращений.
	Улица = СтрЗаменить(Улица,"ж/д_","");
	Улица = СтрЗаменить(Улица,"ж/д","");  
	Улица = СтрЗаменить(Улица,"п/о","");
	Улица = СтрЗаменить(Улица,"п/ст",""); 
	Улица = СтрЗаменить(Улица,"п/р","");

	// Элементы классификатора STREET. Встречаются улицы с "/". "(", ")". 
	Улица = СтрЗаменить(Улица,"/","");
	Улица = СтрЗаменить(Улица,"(","");
	Улица = СтрЗаменить(Улица,")","");

	Если (СтруктураАдрес.Количество()<>10) И (СтруктураАдрес.Количество()<>13) Тогда // должно быть 10 элементов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Страна) > 3  Тогда   // код страны не > 3 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СокрЛП(СтруктураАдрес.Индекс)) <> 6  Тогда   // в индексе ровно 6 символов
		Возврат Ложь;
	ИначеЕсли Не ТолькоЦифрыВСтроке(СтруктураАдрес.Индекс) Тогда   // индекс состоит из цифр
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Регион) > 50 Тогда   // наим.региона не > 45 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Район) > 50 Тогда   // наим.района не > 35 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(СтруктураАдрес.Район) Тогда   // наим.района написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Город) > 50 Тогда   // наим.города не > 35 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(Город) Тогда   // наим.города написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.НаселенныйПункт) > 50 Тогда   // наим.нас.пункта не > 45 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(НаселенныйПункт) Тогда   // наим.нас.пункта написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Улица) > 50 Тогда   // наим.улицы не > 45 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(Улица) Тогда   // наим.улицы написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Дом) > 10 Тогда   // номер дома не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Корпус) > 10 Тогда   // номер корпуса не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Квартира)> 10 Тогда   // номер квартиры не > 10 символов
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	

Функция ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(Знач СтрокаПараметр) 
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	
	
	СписокДопустимыхЗначений = Новый Массив;
	СписокДопустимыхЗначений.Добавить(184); 
	СписокДопустимыхЗначений.Добавить(168);
	СписокДопустимыхЗначений.Добавить(44);
	СписокДопустимыхЗначений.Добавить(45);
	СписокДопустимыхЗначений.Добавить(46);
	СписокДопустимыхЗначений.Добавить(32);
	СписокДопустимыхЗначений.Добавить(48);
	СписокДопустимыхЗначений.Добавить(49);
	СписокДопустимыхЗначений.Добавить(50);
	СписокДопустимыхЗначений.Добавить(51);
	СписокДопустимыхЗначений.Добавить(52);
	СписокДопустимыхЗначений.Добавить(53);
	СписокДопустимыхЗначений.Добавить(54);
	СписокДопустимыхЗначений.Добавить(55);
	СписокДопустимыхЗначений.Добавить(56);
	СписокДопустимыхЗначений.Добавить(57);
	СписокДопустимыхЗначений.Добавить(95);
	
	НайденыРусскиеБуквы = Ложь;
	НайденыЛатинскиеБуквы = ЛОжь;
	Для ИндексСимвола = 1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимвола(СтрокаПараметр, ИндексСимвола);
		Если (Код >= 1040 И Код <= 1103) ИЛИ Код = 1105 ИЛИ Код = 1025  Тогда
			// русские буквы
			НайденыРусскиеБуквы = Истина;
		ИначеЕсли (Код >= 65 И Код <= 90) ИЛИ (Код >= 97 И Код <= 122) Тогда
			// Латинские буквы
			НайденыЛатинскиеБуквы = Истина;
		ИначеЕсли (СписокДопустимыхЗначений.Найти(Код) = Неопределено) Тогда
			// неразрешенные символы
			Возврат Истина;
		Иначе				
			НайденыРусскиеБуквы = Ложь;
			НайденыЛатинскиеБуквы = Ложь;	
		КонецЕсли;		
		Если НайденыРусскиеБуквы И НайденыЛатинскиеБуквы Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ ввода по строке.
//
// Параметры
//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент управления в котором производится ввод по строке
//
Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт

	Если ОбработкаТайпинга Тогда
		ЭтаФорма.ТекущийЭлемент = Элемент;
		Элемент.ВыделенныйТекст = ТекстТайпинга;
		ОбработкаТайпинга = Ложь;
		ТекстТайпинга = "";
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		Элемент.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПодсказки; //!!! ТекстИнформационнойНадписи
	Иначе
		Элемент.ЦветТекстаПоля = Новый Цвет;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает пользовательское представление адреса в формате "9 запятых" по переданному в качестве
// параметра внутреннему представлению.
// Параметры:
//		АдресВФормате9Запятых - строка, внутренне представление адреса в формате "9 запятых".
// Возвращаемое значение:
//		Строка - пользовательское представление адреса в формате "9 запятых".
//		АнализироватьРегион - если Истина, то анализируется переданный регион, на предмет
//				             содержания цифр в коде региона, если цифры есть то вместо них
//				             подставляется текст региона, если не цифры, то остается как есть.
//				             если Ложь, то регион не анализируется.
//
Функция ПредставлениеАдресаВФормате9Запятых(Знач АдресВФормате9Запятых, АнализироватьРегион = Ложь) Экспорт
	
	Если (СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 И СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 12) ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда
		Возврат АдресВФормате9Запятых;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = Найти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	ТекПредставление = "";
	
	ТипДома     = "дом";
    Если КоличествоЗапятых > 9 Тогда
		ТипДома = ?(ПустаяСтрока(СоставляющиеАдреса[10]), ТипДома, СоставляющиеАдреса[10]);
	КонецЕсли;	
	ТипКорпуса  = "корпус";
    Если КоличествоЗапятых > 10 Тогда
		ТипКорпуса = ?(ПустаяСтрока(СоставляющиеАдреса[11]), ТипКорпуса, СоставляющиеАдреса[11]);
	КонецЕсли;	
	ТипКвартиры = "кв.";
    Если КоличествоЗапятых > 11 Тогда
		ТипКвартиры = ?(ПустаяСтрока(СоставляющиеАдреса[12]), ТипКвартиры, СоставляющиеАдреса[12]);
	КонецЕсли;	
	
	Если СокрЛП(СоставляющиеАдреса[1]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[1]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если АнализироватьРегион Тогда
			Если УправлениеКонтактнойИнформацией.ТолькоЦифрыВСтроке(Регион) Тогда
				Регион = ПолучитьНазваниеРегионаПоКоду(Регион);
			КонецЕсли;
		КонецЕсли;

		ТекПредставление = ТекПредставление + ", " + Регион;
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[3]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[3]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[4]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[4]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[5]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[5]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[6]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[6]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[7]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипДома + " № " + СокрЛП(СоставляющиеАдреса[7]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[8]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипКорпуса + " " + СокрЛП(СоставляющиеАдреса[8]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[9]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипКвартиры + " " + СокрЛП(СоставляющиеАдреса[9]);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

// Проверяет указанный Реквизит на пустое значение.
// Значение Реквизита сравнивается с пустым значением соответствующего Реквизиту типа.
// Реквизит типа Строка считается пустым, если в нем не содержится значащих символов.
Функция ПустоеЗначение(Реквизит) Экспорт

	Если Реквизит = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПустаяСтрока(Реквизит);
	ИначеЕсли ТипЗнч(Реквизит) = Тип("Число") Тогда
		Если Реквизит = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Реквизит) = Тип("Дата") Тогда
		Если Реквизит = Дата('00010101') Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Возвращает код региона из адрессного классификатора по его Названию
Функция КодРегионаПоНазванию(Название) Экспорт
	
	Если ПустаяСтрока(Название) Тогда
		Возврат "";
	КонецЕсли;
	
	Назв = СокрЛ(Название);
	ПервыЙПробел = Найти(Назв, " ");
	Если ПервыйПробел <> 0 Тогда
		Назв = Лев(Назв, ПервыйПробел - 1);
	КонецЕсли;
	
	// сначала пробуем найти в адресном классификаторе
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.КодРегионаВКоде,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Наименование
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.Наименование = &Наименование И
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
	
	Запрос.УстановитьПараметр("Наименование", Назв);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		//Возврат СокрЛП(Выборка.КодРегионаВКоде);
		Возврат Формат(Выборка.КодРегионаВКоде, "ЧЦ=2; ЧВН=")
	КонецЕсли;
	
	// затем пробуем найти в таблице регионов
	//МакетРегионы = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет("Регионы");    //!!!
	//нрегАдресРегион = нрег(Название);
	//Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
	//	ТекРегион = СокрЛП(МакетРегионы.Область(Инд, 1, Инд, 1).Текст);
	//	Если Лев(нрегАдресРегион, СтрДлина(ТекРегион)) = нрег(ТекРегион) Тогда
	//		Возврат СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат "";
	
КонецФункции	

// Процедура возвращает название региона по его коду.
Функция ПолучитьНазваниеРегионаПоКоду(КодРег) Экспорт

	Если ПустоеЗначение(КодРег) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		КодРегЧисло = Число(КодРег);
	Исключение
		Возврат "";
	КонецПопытки;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АдресныйКлассификатор.КодРегионаВКоде,
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Код
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |
	               |ГДЕ
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	               |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";

	Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		Возврат УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(Выборка.Код);
		
	Иначе

		Возврат "";

	КонецЕсли;

КонецФункции

// Процедура инициализирует параметры обработки тайпинга
Процедура ИнициализироватьПараметрыОбработкиТайпинга(ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга) Экспорт
	
	ОбработкаТайпинга                 = Ложь;
	ТекстТайпинга                     = "";
	ПоследнееЗначениеЭлементаТайпинга = Неопределено;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Получить виды контактной информации такого же типа
Функция ПолучитьПрочиеВидыТакогоЖеТипа(Настройки, Тип, Вид)

	масВидов = Новый Массив;
	
	Для Каждого Стр Из Настройки Цикл
		Если (Стр.Тип = Тип) И (Стр.Вид <> Вид) Тогда
			масВидов.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат масВидов;

КонецФункции // ПолучитьПрочиеВидыТакогоЖеТипа()

// Получить картинку для отображения типа
Функция ПолучитьКартинкуПоТипу(Тип, НомерКартинки = 0) Экспорт

	Если НомерКартинки = 1 Тогда                  
		Возврат БиблиотекаКартинок.КИФакс;
		
	ИначеЕсли НомерКартинки = 2 Тогда
		Возврат БиблиотекаКартинок.КИАдресИМНС;
	
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат БиблиотекаКартинок.КИАдрес;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат БиблиотекаКартинок.КИEmail;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат БиблиотекаКартинок.КИWWW;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат БиблиотекаКартинок.КИТелефон;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат БиблиотекаКартинок.КИПрочая;
		
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;

КонецФункции // ПолучитьКартинкуПоТипу()

// функция ищет элемент в массиве. Если находит - возвращает его индекс, иначе -1
Функция ВернутьИндексВМассиве(МассивДанные, Элемент) Экспорт 
	
	Если МассивДанные = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Для ИндексЭлемента = 0 По МассивДанные.ВГраница() Цикл
		
		Если  (МассивДанные[ИндексЭлемента] = Элемент) Тогда
			Возврат ИндексЭлемента;
		КонецЕсли;	
		
	КонецЦикла;
	
	// не нашли элемент
	Возврат -1;
	
КонецФункции

// Функция формирует список элементов перечисления
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция ПолучитьСписокЭлементовПеречисления(ИмяПеречисления) Экспорт

	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Перечисления[ИмяПеречисления];
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		СписокЭлементовПеречисления.Добавить(ЭлементПеречисления, Строка(ЭлементПеречисления));
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;

КонецФункции // ПолучитьСписокЭлементовПеречисления()

// функция из исходной строки формирует строку для поиска данных в запросе
Функция СформироватьСтрокуДляПоискаВЗапросе(Знач СтрокаПоиска) Экспорт
	
	ИтоговаяСтрокаДляПоиска = СтрокаПоиска;
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "~", "~~");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "%", "~%");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "_", "~_");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "[", "~[");
	ИтоговаяСтрокаДляПоиска = СтрЗаменить(ИтоговаяСтрокаДляПоиска, "-", "~-");

	Возврат ИтоговаяСтрокаДляПоиска;
	
КонецФункции

// Функция проверяет наличие в строке только цифр
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки) Экспорт

	СписокКодовЧисел = Новый СписокЗначений;
	Для а = 48 По 57 Цикл
		СписокКодовЧисел.Добавить(а);
	КонецЦикла; 
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			Если СписокКодовЧисел.НайтиПоЗначению(КодСимвола(Сред(СтрокаПроверки, а, 1))) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 

	Возврат Ложь;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",строка 1,,,строка 2", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" строка1   строка 2", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
