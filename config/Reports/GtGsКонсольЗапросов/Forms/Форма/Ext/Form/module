
Перем БекапПрограммногоТекста;


Функция ДБФФайлВТипизированнуюТЗ(ИмяДБФФайла)
	
	// Типы ДБФа Строка, дата, Число.
	// Возвращает Типизированную ТЗ со всеми потрохами ДБФки или Неопределено, ежели там пусто.
	
	ДБФ=Новый XBase;
	
	ДБФ.ОткрытьФайл(ИмяДБФФайла);
	
	// Определяем типы колонок ДБФ для Типизации ТЗ
	Если ДБФ.КоличествоЗаписей()=0 Тогда
		Сообщить("Файл "+ИмяДБФФайла+" ПУСТОЙ!");
		Возврат Неопределено;
	КонецЕсли;	
	
	ТЗ=Новый ТаблицаЗначений;
	
	Для Каждого Поле Из ДБФ.поля Цикл
		Если  Поле.Тип="S" Тогда
			КваСтр=Новый КвалификаторыСтроки(ПОле.Длина,ДопустимаяДлина.Фиксированная);
			ТипКолонки=Новый ОписаниеТипов("Строка",,КваСтр,);
		ИначеЕсли  Поле.Тип="N" ИЛИ Поле.Тип="F" Тогда
			КваЧ=Новый КвалификаторыЧисла(Поле.Длина,Поле.Точность,ДопустимыйЗнак.Любой);
			ТипКолонки=Новый ОписаниеТипов("Число",КваЧ,,);
		ИначеЕсли  Поле.Тип="D" Тогда
			Квад=Новый КвалификаторыДаты(ЧастиДаты.Дата);
			ТипКолонки=Новый ОписаниеТипов("Дата",,,КваД);
		КонецЕсли;				
		
		
		Если ТЗ.Колонки.Найти(Поле.Имя)<>Неопределено Тогда
			Сообщить("В Файле есть колонки с одинаковыми именами !  "+Поле.Имя); 
			Продолжить;
		КонецЕсли;	
		
		ТЗ.Колонки.Добавить(Поле.Имя,ТипКолонки,Поле.Имя,Поле.Длина);
	КонецЦикла;
	
	Для Ы=1 По ДБФ.КоличествоЗаписей() Цикл
		ДБФ.Перейти(Ы);
		
		Стр=ТЗ.Добавить();
		
		Для Каждого Поле Из ДБФ.поля Цикл
			Стр[Поле.Имя]=ДБФ.ПолучитьЗначениеПоля(Поле.Имя);
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ТЗ;
КонецФункции


Процедура ВывестиПакетныйРезультат(Рез)
	
	   //Рез - Массив результатов запроса, получился при выполнении пакета
	   
	   Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		   Если ЭлемФормы.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		   
		   Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 Тогда
			  ЭлементыФормы.Удалить(ЭлемФормы);
		   КонецЕсли;
	   КонецЦикла;
	   
	   
	   Для Каждого СтрП1 Из ЭлементыФормы.Панель1.Страницы Цикл
		   Если СтрП1.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		   
	   	   ЭлементыФормы.Панель1.Страницы.Удалить(СтрП1);
	   КонецЦикла;
	   
	   
	   
		   
		   
		   
	   
	   
	   
	   
	   
	   х=0;
	   ИндексВМассивеРезультатов=0;
	   Для Каждого ЭлемРез Из Рез Цикл
		   
		   // Выводим результаты на закладку результатзапроса и попутно генерим новые странички и тзшки
		   Если Рез=Неопределено Тогда 
			   ИндексВМассивеРезультатов=ИндексВМассивеРезультатов+1;
			   Продолжить; // не интересно , ибо Результатом выполнения запроса на уничтожение временной таблицы является значение Неопределено, которое также помещается в массив результатов.
     	   КонецЕсли;
		   Х=Х+1;
		   Если  Х=1 Тогда
			   ЭлементыФормы.РезЗапроса.Значение=ЭлемРез.Выгрузить();
			   ЭлементыФормы.РезЗапроса.СоздатьКолонки();
		   Иначе
			   
			НоваяСтр=ЭлементыФормы.Панель1.Страницы.Найти("РезЗапроса"+Х);
			
			Если НоваяСтр<>Неопределено Тогда
				ЭлементыФормы.Панель1.Страницы.Удалить(НоваяСтр);
			КонецЕсли;	
			   
			   
		    НоваяСтр=ЭлементыФормы.Панель1.Страницы.Добавить("РезЗапроса"+Х,"Результат запроса "+Х+"("+ИндексВМассивеРезультатов+")");
			ЭлементыФормы.Панель1.ТекущаяСтраница=НоваяСтр;
			ТекРезЗапроса=ЭлементыФормы.Добавить(Тип("ТабличноеПоле"),"РезЗапроса"+Х,Истина,ЭлементыФормы.Панель1);
			ТекРезЗапроса.Высота=ЭлементыФормы.РезЗапроса.Высота;
			ТекРезЗапроса.Ширина=ЭлементыФормы.РезЗапроса.Ширина; 
			ТекРезЗапроса.Подсказка="ЭлементыФормы.РезЗапроса"+Х+".Значение";
			
			
			
			//Граница ="";
			//ПервыйЭлемент="";
			//ГраницаПервогоЭлемента="";
			//ВторойЭлемент="";
			//ГраницаВторогоЭлемента ="";
			////ЭлементыФормы.РезЗапроса.ПолучитьПривязку(Граница, ПервыйЭлемент, ГраницаПервогоЭлемента,ВторойЭлемент,ГраницаВторогоЭлемента);
			
			//ТекРезЗапроса.УстановитьПривязку(Граница, ПервыйЭлемент, ГраницаПервогоЭлемента,ВторойЭлемент,ГраницаВторогоЭлемента);
			
			ТекРезЗапроса.Видимость=истина;
			
			
			Если ЭлемРез<>Неопределено Тогда 
			ЭлементыФормы["РезЗапроса"+Х].Значение=ЭлемРез.Выгрузить();
			ЭлементыФормы["РезЗапроса"+Х].СоздатьКолонки();
			КонецЕсли;

			   
			   
		  Конецесли;	   
			   
		   
	      ИндексВМассивеРезультатов=ИндексВМассивеРезультатов+1;
	   
	  КонецЦикла; 
	
	
	
	
	
	
Конецпроцедуры

Процедура СформироватьЗапрос(Запросом=Ложь,Пакетом=Ложь)
	 
		
	НачальноеВремя=ТекущаяДата();
	
	
	Построитель.ВыводитьОбщиеИтоги=ВыводитьОбщиеИтоги;
	Построитель.ТекстЗаголовка=ЗаголовокОтчета;
	
	Построитель.Параметры.Очистить();
	
	Для каждого  Стр Из ТППараметров Цикл
		Если Найти(Стр.Значение,"ДБФФайлВТипизированнуюТЗ")<>0 Тогда
			Запросом=Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Если Пакетом=Истина Тогда
		Запросом=Истина;
	КонецЕсли;	
	
	Если Запросом=Истина Тогда  // запросом
		МВТ=Новый МенеджерВременныхТаблиц;
		Запрос=Новый Запрос();
		Запрос.МенеджерВременныхТаблиц=МВТ;
		
		Запрос.Текст=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Запрос.Параметры.Очистить();
		Для каждого  Стр Из ТППараметров Цикл
			Если Найти(Стр.Значение,"ДБФФайлВТипизированнуюТЗ")<>0 Тогда
				Значение=Вычислить(Стр.Значение);
			Иначе
				Значение=Стр.Значение;
			КонецЕсли;
			Запрос.Параметры.Вставить(Стр.Имя,Значение);
		КонецЦикла;
		
		Если Пакетом=Ложь Тогда
			Рез=Запрос.Выполнить().Выгрузить();
			ЭлементыФормы.РезЗапроса.Значение=Рез;
		ЭлементыФормы.РезЗапроса.СоздатьКолонки();

			
		Иначе
			Рез=Запрос.ВыполнитьПакет();
			
			ВывестиПакетныйРезультат(Рез);
			
		КонецЕсли;
		
				
		ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы["РезультатЗапроса"];
		
		
	Иначе	// построителем
		
		
		Для каждого  Стр Из ТППараметров Цикл
			Значение=Стр.Значение;
			Построитель.Параметры.Вставить(Стр.Имя,Значение);
		КонецЦикла; 
		
		Если РасшифровкаЯчеек=Истина Тогда
			Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
		КонецЕсли;
		Построитель.Выполнить();
		Построитель.МакетОформления=ПолучитьМакетОформления(ЭлементыФормы.Оформление.Значение);//СтандартноеОформление.Асфальт);
		Построитель.ОформитьМакет();
		Построитель.Вывести();
		
	КонецЕсли;
	
	ЭлементыФормы.ТТЗ.УстановитьТекст(Построитель.Текст);
	
	КонечноеВремя=ТекущаяДата();
	
	ВремяВыполнения=КонечноеВремя-НачальноеВремя;
	
	ЭлементыФормы.НадписьВремяВыполнения.Заголовок="Время выполнения: "+Формат(ВремяВыполнения,"ДФ='ЧЧ:мм:сс ""сек.""'");
	

КонецПроцедуры	



Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	БэкапТекстаЗапроса=КаталогВременныхФайлов()+"\1SQuery_bkp_"+Формат(ТекущаяДата(),"ДФ=(yyyyMMdd.HHmmss); ДЛФ=")+".1S.SQL";
	ЭлементыФормы.ТекстЗапроса.Записать(БэкапТекстаЗапроса);
	ЭлементыФормы.НадписьВремяВыполнения.Заголовок="Резервная копия текста запроса "+БэкапТекстаЗапроса;
	СформироватьЗапрос(Ложь,Пакетом);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыТекстЗапросаВПостроитель(Кнопка)
	Построитель.Текст= ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если ПустаяСтрока(ТХТ)=Истина ТОгда
		КЗ= Новый КонструкторЗапроса();
	Иначе
		КЗ= Новый КонструкторЗапроса(ТХТ);
	КонецЕсли;	
	
	КЗ.АвтоДобавлениеПредставлений=АвтоДобавлениепредставлений;
	
	КЗ.ОткрытьМодально();
	
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КЗ.Текст);
	
КонецПроцедуры

Процедура КоманднаяПанель6Сохранить(Кнопка)
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Заголовок=("Сохранить запрос");
	ДВФ.Расширение="1S.SQL";
	ДВФ.Фильтр="Запросы 1С *.1S.SQL|*.1S.SQL";
	
	Если ДВФ.Выбрать()=Истина ТОгда
		Текст=Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
		
		
		Текст.ВставитьСтроку(1,"//---------------------------Текст запроса построителя ---------------------------//");
		
		Текст.ВставитьСтроку(1,"// Заголовок отчета // "+ЗаголовокОтчета);
		
		Текст.Записать(ДВФ.ПолноеИмяФайла,КодировкаТекста.ANSI);
		Предупреждение("Сохранено в 
					    |"+ДВФ.ПолноеИмяФайла,10);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель6Открыть_сохраненный_запрос(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Заголовок=("Открыть сохраненный запрос");
	ДВФ.Расширение="1S.SQL";
	ДВФ.Фильтр="Запросы 1С *.1S.SQL|*.1S.SQL";
	
	ПредполагаемаяКодировка=новый СписокЗначений;
	ПредполагаемаяКодировка.Добавить(КодировкаТекста.ANSI,"Win-1251");
	ПредполагаемаяКодировка.Добавить(КодировкаТекста.UTF8,"UNICODE UTF-8");
	ПредполагаемаяКодировка.Добавить(КодировкаТекста.ANSI,"DOS-866");
	
	
	КТ=ВыбратьИзСписка(ПредполагаемаяКодировка);
	КодирТекста=КТ.Значение;
	Если ДВФ.Выбрать()=Истина ТОгда
		Текст=Новый ТекстовыйДокумент;
		Текст.Прочитать(ДВФ.ПолноеИмяФайла,КодирТекста);
		
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст.ПолучитьТекст());
		
		ПерваяСтрока=Текст.ПолучитьСтроку(1);
		
		Если Найти(ПерваяСтрока,"// Заголовок отчета //")<>0 Тогда
			ЗаголовокОтчета=СтрЗаменить(ПерваяСтрока,"// Заголовок отчета //","");
		КонецЕсли;	
		
	КонецЕсли; 
КонецПроцедуры

Процедура ОбновитьНажатие(Элемент)
	ЭлементыФормы.ТТЗ.УстановитьТекст(Построитель.Текст);
КонецПроцедуры

Процедура ВСписокНажатие(Элемент)
	
	
	 Перем Значение;

	ВвестиЗначение(Значение,"Значение списка",ТипЗначенийСписка);
	
	СписокЗначений1.Добавить(Значение);

	
	
	
КонецПроцедуры

Процедура УстановитьЗначениеПараметраЗапросаНажатие(Элемент)
	
	    Стр=ЭлементыФормы.ТППараметров.ТекущаяСтрока;
		
		ЗначениеСписка=Новый СписокЗначений;
		ЗначениеСписка.ЗагрузитьЗначения(СписокЗначений1.ВыгрузитьЗначения());
		
		
		Стр.Значение=ЗначениеСписка;
	
КонецПроцедуры

Процедура КоманднаяПанель7УдалитьИзСписка(Кнопка)
	
	СписокЗначений1.Удалить(ЭлементыФормы.СписокЗначений.ТекущаяСтрока);
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель7ОчиститьСписок(Кнопка)
	СписокЗначений1.Очистить();
КонецПроцедуры

Процедура КоманднаяПанель6Действие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Вопрос("Закрыть консоль запросов?", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Нет Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;	
	
	
	Если Вопрос("Сохранить запрос перед закрытием консоли?", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Да Тогда
		КоманднаяПанель6Сохранить("");
	КонецЕсли;	
	
	//---------------<Убираем из таблицы Дочерних консолей>---------------------------// GtG // 16.11.2012 12:06:19
	
	Стр=ДочерниеКонсоли.Найти(ЭтаФорма.КлючУникальности,"КлючУникальностиОкнаКонсоли");
	ДочерниеКонсоли.Удалить(Стр);
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыИзТекстаЗапроса(Кнопка)
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ШняжныеСимволы=Новый Массив;
	ШняжныеСимволы.Добавить(")");
	ШняжныеСимволы.Добавить("(");
	ШняжныеСимволы.Добавить(" ");
	ШняжныеСимволы.Добавить(",");
	ШняжныеСимволы.Добавить("""");
	ШняжныеСимволы.Добавить("/");
	ШняжныеСимволы.Добавить(".");
	ШняжныеСимволы.Добавить(Символы.ПС);
	ШняжныеСимволы.Добавить(Символы.Таб);
	
	
	ВТППараметров=ТППараметров.Скопировать();   // временная тз параметров
	ВТППараметров.Очистить();
	
	
	
	Пока Найти(ТХТ,"&")<> 0 Цикл
		
		ПозПервойСобаки=Найти(ТХТ,"&");
		
		ОгрызокЗапроса=Сред(ТХТ,ПозПервойСобаки+1,СтрДлина(ТХТ));
		
		ПозШняги=10000000;
		
		Для Каждого Шняжника из ШняжныеСимволы Цикл
			
			ТекШняжка=Найти(ОгрызокЗапроса,Шняжника);
			
			Если ТекШняжка>0 и ТекШняжка<ПозШняги Тогда
				ПозШняги=ТекШняжка;
			КонецЕсли;	
		КонецЦикла;
		
		ВыделенныйПараметр=Лев(ОгрызокЗапроса,ПозШняги-1);
		
		ВТППараметров.Добавить().Имя=СокрЛП(ВыделенныйПараметр);
		
		
		ОгрызокЗапроса=СтрЗаменить(ОгрызокЗапроса,"ВыделенныйПараметр","---");
		
		ОгрызокЗапроса=СтрЗаменить(ОгрызокЗапроса,"&---","---");
		
		ТХТ=ОгрызокЗапроса;
	КонецЦикла;	
	
	ВТППараметров.Свернуть("Имя,Значение","");
	
	
	
	Для Каждого ВСтр Из ВТППараметров Цикл
		Если ТППараметров.Найти(ВСтр.Имя,"Имя")=Неопределено Тогда
			 ТППараметров.Добавить().Имя=ВСтр.Имя;
		КонецЕсли;	 
	Конеццикла;	
	
	
	
	
	
	
КонецПроцедуры

Процедура ДБФФайлКакПараметрНажатие(Элемент)
	
	Стр=ЭлементыФормы.ТППараметров.ТекущаяСтрока;
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="*.DBF";
	Если ДВФ.Выбрать()=Истина Тогда
		Стр.Значение="ДБФФайлВТипизированнуюТЗ("""+ДВФ.ПолноеИмяФайла+""")";
	КонецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыВФайл(Кнопка)
	
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Расширение="VAL";
	ДВФ.Фильтр="Файл значений параметров |*.VAL";
	ДВФ.ИндексФильтра=0;
	ДВФ.Выбрать();
	
	ЗначениеВФайл(ДВФ.ПолноеИмяФайла,ТППараметров);
	
КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыИзФайла(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Расширение="VAL";
	ДВФ.Фильтр="Файл значений параметров |*.VAL";
	ДВФ.ИндексФильтра=0;
	ДВФ.Выбрать();
	
	Параметры=ЗначениеИзФайла(ДВФ.ПолноеИмяФайла);
	
	ЭлементыФормы.ТППараметров.Значение=Параметры;
	ЭлементыФормы.ТППараметров.СоздатьКолонки();
	
	

КонецПроцедуры



Процедура АвтосохранениеЗапроса()
	
	ТекИмяФайлаАвтосохранения=ПапкаАвтосохранения+"\"+СокрЛП(БазаИмениФайлаАвтосохранения)+"("+Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd   HH-mm-ss'")+")";
	
	Если СохранятьПараметры=Истина Тогда
		ЗначениеВФайл(ТекИмяФайлаАвтосохранения+".VAL",ТППараметров);
	КонецЕсли;
	
	Текст=Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
	
	
	Текст.ВставитьСтроку(1,"//---------------------------Текст запроса построителя ---------------------------//");
	
	Текст.ВставитьСтроку(1,"// Заголовок отчета // "+ЗаголовокОтчета);
	
	Текст.Записать(ТекИмяФайлаАвтосохранения+".SQL",КодировкаТекста.ANSI);
	Состояние("Автоматически сохранено в "+ТекИмяФайлаАвтосохранения);	
	
Конецпроцедуры	


Процедура КоманднаяПанель1ПодключениеКБазе(Кнопка)
	
	
	
	ФПП=ЭтотОбъект.ПолучитьФорму("ПрямоеПодключение",ЭтаФорма,1);
	
	ФПП.сервер="";
	ФПП.база="";
	ФПП.Пользователь="";
	ФПП.Пароль="";
	
	ФПП.ОткрытьМодально();
	
	
	
	
	
КонецПроцедуры

	  
	  
Процедура ВключитьАвтосохранениеПриИзменении(Элемент)
	
	Если ВключитьАвтосохранение=Истина ТОгда
		Если ПустаяСтрока(БазаИмениФайлаАвтосохранения)=Истина ТОгда
			Предупреждение("Не указана база имени файла автосохранения!");
			ВключитьАвтосохранение=Ложь;
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(ПапкаАвтосохранения)=Истина ТОгда
			Предупреждение("Не папка автосохранения!");
			ВключитьАвтосохранение=Ложь;
			Возврат;
		КонецЕсли;
		
		
		ПодключитьОбработчикОжидания("АвтосохранениеЗапроса",60*Интервал,ЛОжь);
		
	Иначе
		ОТключитьОбработчикОжидания("АвтосохранениеЗапроса");
 	КонецЕсли;	
	
КонецПроцедуры

Процедура ПапкаАвтосохраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВФ.Выбрать();
	ПапкаАвтосохранения=ДВФ.Каталог;
КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнитьЗапросВДругойБазе(Кнопка)
	// Вставить содержимое обработчика.
	Если ПустаяСтрока(ИмяПодключенойБазы)=Истина ТОгда
		Предупреждение("Не подключена другая база!");
		Возврат;
	Конецесли;
	
	
	Попытка
		Запрос=Ком.NewObject("Запрос");
	Исключение
		Если Найти (ОписаниеОшибки(),"Значение не является значением объектного типа (NewObject)")<>0 Тогда
			Предупреждение("Не выполнено подключение к складской базе! Выполняем подключение...",10);
			Возврат;
			
		Иначе
			Предупреждение(ОписаниеОшибки());
			Возврат;
			
		КонецЕсли; 	
	КонецПопытки; 
	
	
	Запрос.текст=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос.Параметры.Очистить();
		Для каждого  Стр Из ТППараметров Цикл
			Если Найти(Стр.Значение,"ДБФФайлВТипизированнуюТЗ")<>0 Тогда
				Значение=Вычислить(Стр.Значение);
			Иначе
				Значение=Стр.Значение;
			КонецЕсли;
			Запрос.Параметры.Вставить(Стр.Имя,Значение);
		КонецЦикла;

	
	РезТЗ=Запрос.Выполнить().Выгрузить();
	
	Если РезТЗ.Количество()=0 Тогда
		Предупреждение("Результат запроса пустой!");
		Возврат;
	КонецЕсли; 	
	
	
	ТЗ= СконвертироватьКомТЗВНормальнуюТЗ(РезТЗ);
	
	ЭлементыФормы.РезЗапроса.Значение=ТЗ;
	ЭлементыФормы.РезЗапроса.СоздатьКолонки();
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы["РезультатЗапроса"];
	
	
	
	
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВыполнитьЗапросВДругойБазе.Текст="Выполнить в базе "+ИмяПодключенойБазы;
КонецПроцедуры

Процедура КоманднаяПанель5ПараметрыВТекстМодуля(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	Для Каждого Стр Из ТППараметров Цикл
		ТХТ.ДобавитьСтроку("Запрос.УстановитьПараметр("""+Стр.Имя+""","+Стр.Имя+");");
	КонецЦикла;
	
	ТХТ.Показать();
	
	
КонецПроцедуры

Процедура КоманднаяПанель6ОчиститьТекст(Кнопка)
	//---------------<Очищаем текст от вертикальных палочек и лишних кавычек>---------------------------// GtG //
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ТХТ=СтрЗаменить(ТХТ,"|"," ");
	ТХТ=СтрЗаменить(ТХТ,"""""","""");
	ТХТ=СтрЗаменить(ТХТ,""";"," ");
	ТХТ=СтрЗаменить(ТХТ,"""ВЫБРАТЬ","ВЫБРАТЬ");
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТХТ);
	
	
КонецПроцедуры


Функция ПреобразоватьТекстЗапросаВТекстМодуля()
	
	ТХТДок=Новый ТекстовыйДокумент;
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	ТХТДок.ДобавитьСтроку(" ""	"+СтрПолучитьСтроку(ТХТ,1));
	Для ы=2 по СтрЧислоСтрок(ТХТ) Цикл
		
		ТекСтрЗапроса=СтрПолучитьСтроку(ТХТ,Ы);
		ТекСтрЗапроса=СтрЗаменить(ТекСтрЗапроса,"""","""""");
		
		ТХТДок.ДобавитьСтроку("|	"+ТекСтрЗапроса);
	КонецЦикла;	
    ТХТДок.ДобавитьСтроку(" |""; // Сгенерировано в GtG's Консоль запросов. " +ТекущаяДата());

	Возврат ТХТДок; // тип ТекстовыйДокумент
	
КонецФункции	


Процедура КоманднаяПанель6ТЗТМ(Кнопка)
	ПреобразоватьТекстЗапросаВТекстМодуля().Показать();
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Найти("ТекстЗапроса");
	
	Если ПустаяСтрока(ЭтаФорма.КлючУникальности)=Истина ТОгда
		НГУИД=строка(Новый УникальныйИдентификатор);   // дает возможность открывать несколько консолей.
		ЭтаФорма.КлючУникальности=НГУИД;
	Иначе
		// открыто с назначением гуида
	КонецЕСли;

	НГУИД=ЭтаФорма.КлючУникальности;
	
	
	Если ДочерниеКонсоли.Найти(НГУИД,"КлючУникальностиОкнаКонсоли")=НЕопределено Тогда
		СДК=ДочерниеКонсоли.Добавить();
		СДК.Описание="Эта консоль";
		СДК.КлючУникальностиОкнаКонсоли=НГУИД;
	КонецЕсли;	
		
	
	
	
КонецПроцедуры

Процедура ПапкаССохраненнымиЗапросамиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ДВК=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДВК.Выбрать();
	
	ПапкаССохраненнымиЗапросами=ДВК.Каталог;
	
КонецПроцедуры

Процедура КоманднаяПанель9ЗагрузитьЗапросыИзПапки(Кнопка)
	// Вставить содержимое обработчика.
	
	МНФ=НайтиФайлы(ПапкаССохраненнымиЗапросами+"\","*.1S.SQL");
	
	Для Каждого Ф из МНФ Цикл
		
		ТХТ=Новый ТекстовыйДокумент;
		ТХТ.Прочитать(Ф.ПолноеИмя);
		Заг=ТХТ.ПолучитьСтроку(1);
		
		ТекЗапрос=Запросы.Добавить();
		ТекЗапрос.НомерСтроки=Запросы.Количество();
		
		Если Найти("// Заголовок отчета //",Заг)<>0 Тогда
			Заг=СтрЗаменить(Заг,"// Заголовок отчета //","");
			Если ПустаяСтрока(Заг)=Ложь Тогда
				ТекЗапрос.ЗаголовокОтчета=Заг;
			Иначе
				ТекЗапрос.ЗаголовокОтчета=Ф.ИмяБезРасширения;
			Конецесли;
		Иначе	
			ТекЗапрос.ЗаголовокОтчета=Ф.ИмяБезРасширения;
		КонецЕсли;	
		
		ТекЗапрос.ТекстЗапроса=ЗначениеВСтрокуВнутр(ТХТ.ПолучитьТекст());
	КонецЦикла;
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель9ВыбратьЗапрос(Кнопка)
	ТекЗапрос=ЭлементыФормы.Запросы.ТекущаяСтрока;
	
	ЭлементыФормы.ТекстЗапроса.Очистить();
	ЭлементыФормы.ТекстПрограммы.Очистить();
	
	ЗаголовокОтчета=ТекЗапрос.ЗаголовокОтчета;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ЗначениеИзСтрокиВнутр(ТекЗапрос.ТекстЗапроса));
	
	
	Попытка // для совместимости со старыми файлами
		Если ПустаяСтрока(ТекЗапрос.Параметры)=Ложь Тогда
			ТППараметров=ЗначениеИзСтрокиВнутр(ТекЗапрос.Параметры);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка // для совместимости со старыми файлами
		Если ПустаяСтрока(ТекЗапрос.ТекстПрограммы) =Ложь Тогда
			ЭлементыФормы.ТекстПрограммы.УстановитьТекст(ЗначениеИзСтрокиВнутр(ТекЗапрос.ТекстПрограммы));
		Конецесли;	
	Исключение
	КонецПопытки;
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Найти("ТекстЗапроса");
КонецПроцедуры

Процедура КоманднаяПанель6ОтложитьЗапрос(Кнопка)
	// Вставить содержимое обработчика.
	
	Если ПустаяСтрока(ЗаголовокОтчета)=Истина Тогда
		ВвестиСтроку(ЗаголовокОтчета,"Название запроса?",200,ЛОжь);
	КонецЕсли;
	
	
	
	ОтлЗапр=Запросы.Добавить();
	
	ОтлЗапр.НомерСтроки=Запросы.Количество();
	Если ПустаяСтрока(ЗаголовокОтчета)=Истина Тогда
		ОтлЗапр.ЗаголовокОтчета="Запрос, "+ТекущаяДата();
	Иначе	
		ОтлЗапр.ЗаголовокОтчета=ЗаголовокОтчета;
	КонецЕсли;
	
	ОтлЗапр.ТекстЗапроса=ЗначениеВСтрокуВнутр(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст());
	
	ОтлЗапр.Параметры=ЗначениеВСтрокуВнутр(ТППараметров);
	
	ОтлЗапр.ТекстПрограммы=ЗначениеВСтрокуВнутр(ЭлементыФормы.ТекстПрограммы.ПолучитьТекст());
	
	
	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель9СохранитьРабочийПакетЗапросов(Кнопка)
	
	Если ПустаяСтрока(ПапкаССохраненнымиЗапросами)=Истина тогда
		Предупреждение("Не выбрана папка с сохраненными запросами!");
		Возврат;
	Конецесли;	
	
	
 Пакет=ЗначениеВСтрокуВнутр(Запросы);
 
 ТХТ=Новый ТекстовыйДокумент();
 ТХТ.УстановитьТекст(Пакет);
 
 ИмяФайлаПакета="";
 ВвестиСтроку(ИмяФайлаПакета,"Имя пакета",250,Ложь);
 
 ИмяФайлаПакета=ПапкаССохраненнымиЗапросами+"\"+СокрЛП(ИмяФайлаПакета)+".1S.SQLPAK";
 ТХТ.Записать(ИмяФайлаПакета);
 Предупреждение("Сохранено в "+ИмяФайлаПакета);
 
	
КонецПроцедуры

Процедура КоманднаяПанель9ЗагрузитьПакетЗапросов(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="Файлы пакетов запросов *.1S.SQLPAK|*.1S.SQLPAK";
	ДВФ.ИндексФильтра=0;
	ДВФ.Расширение="1S.SQLPAK";
	
	ДВФ.Выбрать();
	
	ТХТ=Новый ТекстовыйДокумент;
	
	
	ТХТ.Прочитать(ДВФ.ПолноеИмяфайла);
	
	
	
	ЗапросыИзФайла=ЗначениеИзСтрокиВнутр(ТХТ.ПолучитьТекст());
	
	ЭлементыФормы.Запросы.Значение= ЗапросыИзФайла;	
КонецПроцедуры



Процедура ВыполнитьТекст(ТекстПрограммыИзФормы)

	Выполнить(ТекстПрограммыИзФормы);
	
КонецПроцедуры	


Процедура КоманднаяПанель11Выполнить(Кнопка)
	// Вставить содержимое обработчика.
	
	ТекстПрограммыИзФормы=ЭлементыФормы.ТекстПрограммы.ПолучитьТекст();
	БекапПрограммногоТекста=КаталогВременныхФайлов()+"AUTOSAVE_"+Формат(ТекущаяДата(),"ДФ=(yyyyMMdd.HHmmss); ДЛФ=")+".1S.PRG";
	//---------------<Автосэйв последнего запущеного куска программы>---------------------------// GtG // 07.12.2011 20:48:53 
	ЭлементыФормы.Надпись5.Заголовок="Сохранено в "+БекапПрограммногоТекста+"  "+Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy ""в"" HH:mm:ss'");
	ЭлементыФормы.ТекстПрограммы.Записать(БекапПрограммногоТекста,КодировкаТекста.ANSI);
	
	ВыполнитьТекст(ТекстПрограммыИзФормы);
 
КонецПроцедуры

Процедура ПанельПрограмматораРезультатЗапроса(Кнопка)
	
	Если ПроверкаИспользованияПостроителяВЗапросе()=Истина ТОгда
		Возврат;
	КонецЕсли;	
	
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)");
	
КонецПроцедуры

Процедура ПанельПрограмматораСохранитьТекстПрограммы(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Расширение="1S.PRG";
	ДВФ.Фильтр="Файл программы для консоли *.1S.PRG|*.1S.PRG";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать() Тогда
		ЭлементыФормы.ТекстПрограммы.Записать(ДВФ.ПолноеИмяФайла);
	КонецЕсли;	
КонецПроцедуры

Процедура ПанельПрограмматораОткрытьТекстПрограммы(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Расширение="1S.PRG";
	ДВФ.Фильтр="Файл программы для консоли *.1S.PRG|*.1S.PRG";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать() Тогда
		ЭлементыФормы.ТекстПрограммы.Прочитать(ДВФ.ПолноеИмяФайла);
	КонецЕсли;	
	
		
КонецПроцедуры

Процедура ПанельПрограмматораТекстПрограммывВерхнийРегистр(Кнопка)
	ТХТ=ЭЛЕМЕНТЫФОРМЫ.ТЕКСТПРОГРАММЫ.ПОЛУЧИТЬТЕКСТ();
	ТХТ=ВРЕГ(ТХТ);
	ЭЛЕМЕНТЫФОРМЫ.ТЕКСТПРОГРАММЫ.УСТАНОВИТЬТЕКСТ(ТХТ);
КонецПроцедуры

Процедура ПанельПрограмматораОткрытьАвтосэйв(Кнопка)
	
	ФОАС=ЭтотОбъект.ПолучитьФорму("ОткрытиеФайловАвтосейва",ЭтаФорма,1);
	ФОАС.РасширениеФайлов="1S.PRG";
	ФОАС.ОткрытьМодально();
	
	Если Вопрос("Открыть автоматически сохраненный программный текст?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да ТОгда
		ЭлементыФормы.ТекстПрограммы.УстановитьТекст(ФОАС.ЭлементыФормы.Просмотр.ПолучитьТекст());
	КонецЕсли;

	
КонецПроцедуры

Процедура ПанельПрограмматораКомПодключение(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("Ком  .... ;//<--- Это COM-объект, подключение к другой базе");
КонецПроцедуры

Процедура ПанельПрограмматораНовыйОбъектВДругойБазе(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("???? = Ком.NewObject(""?????""); // Объект в контексте  другой базы");
КонецПроцедуры

Процедура ПанельПрограмматораАктивизироватьОкноПрограмматора(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;");
КонецПроцедуры

Процедура ПанельПрограмматораРезультатЗапросаСИспПостроителя(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("Построитель.Выполнить();// если в запросе используется построитель");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("РезультатВыполнения=Построитель.Результат;//тип значения: РезультатЗапроса  ");
КонецПроцедуры

Процедура ПанельПрограмматораИндикатор(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ЭлементыФормы.Индикатор.Значение=0;");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ЭлементыФормы.Индикатор.МаксимальноеЗначение=???;");
КонецПроцедуры

Процедура КоманднаяПанель12ЗагрузитьИзФайла(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		ЭлементыФормы.ТабЗнач.Значение=ЗначениеИзФайла(ДВФ.ПолноеИмяФайла);
		ЭлементыФормы.ТабЗнач.СоздатьКолонки();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель13СохранитьВФайл(Кнопка)
	ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		ЗначениеВФайл(ДВФ.ПолноеИмяФайла,РезЗапроса);
		Предупреждение("Сохранено в файл:
		|"+ДВФ.ПолноеИмяФайла,15);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельПрограмматораТабЗнач(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ТабЗнач   //<--- Это таблица значений на закладке Таблица значений");
КонецПроцедуры

Процедура КоманднаяПанель12ДобавитьКолонку(Кнопка)
	ИмяКолонки="НоваяКолонка";
	ВвестиСтроку(ИмяКолонки,"Имя новой колонки",25);
	ИмяКолонки=СтрЗаменить(СокрЛП(ИмяКолонки)," ","_");
	Попытка
		ЭлементыФормы.ТабЗнач.Значение.Колонки.Добавить(ИмяКолонки);
		ЭлементыФормы.ТабЗнач.СоздатьКолонки();
		
	ИСключение
		Предупреждение("Не могу добавить колонку с таким именем !");
	КонецПопытки;
КонецПроцедуры

Функция ПроверкаИспользованияПостроителяВЗапросе()
	// Если в запросе используются фичи построителя, то в программаторе нужно
	// использовать работу через построителью. а не простой запрос.
	// В противном случае можно получить некорректные по смыслу данные , 
	// потому что условия из построителя не будут учтены.
	
	ТХТ=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Если Найти(ТХТ,"{")<>0 или Найти(ТХТ,"}")<>0 Тогда
		Предупреждение("ВНИМАНИЕ!!! В ЗАПРОСЕ ИСПОЛЬЗУЕТСЯ ПОСТРОИТЕЛЬ!!! 
		               |НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ОБЫЧНЫЙ ЗАПРОС!!!");
	    Возврат ИСтина;
	ИНаче
		Возврат ЛОЖЬ;
	КонецЕсли;	
КонецФункции	



Процедура ПанельПрограмматораРезЗапроСОбрабДок(Кнопка)
	
	Если ПроверкаИспользованияПостроителяВЗапросе()=Истина ТОгда
		Возврат;
	КонецЕсли;	
	
ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("
//---------------<ШАблон>---------------------------| GtG | 20.01.2012 17:19:22
|СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)
|ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;
|ЭлементыФормы.Индикатор.Значение=0;
|ЭлементыФормы.Индикатор.МаксимальноеЗначение=РезЗапроса.Количество();

|Для Каждого Стр Из РезЗапроса Цикл
|   ОбработкаПрерыванияПользователя();
|	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;
|	
|	ДокументОбъект=Стр.Ссылка.ПолучитьОбъект();
|	
|	<<< Далее выполняем некие действия над документом >>>
|	
|	
|	
|	
|КонецЦикла;");

//---------------<>---------------------------| GtG | 20.01.2012 17:19:26


КонецПроцедуры

Процедура ПанельПрограмматораОбрареззасиндик(Кнопка)
	Если ПроверкаИспользованияПостроителяВЗапросе()=Истина ТОгда
		Возврат;
	КонецЕсли;	
	
	
	
ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("
|СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)
|
|// Активируем эту страничку и инициализируем градусник -------------------//
|ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;    //
|ЭлементыФормы.Индикатор.Значение=0;                                       //
|ЭлементыФормы.Индикатор.МаксимальноеЗначение=РезЗапроса.Количество();     //
|//------------------------------------------------------------------------//
|
|// Обрабатываем в цикле результат запроса --------------------------------//
|Для Каждого Стр Из Реззапроса Цикл                                        //
|	ОбработкаПрерыванияПользователя();
|
|	//<<< Тут пишем код >>>//
|	// Объект=Стр.Ссылка.ПолучитьОбъект(); //.Удалить();//

|	//-------------- Градусник +1 ----------------------------------------//
|	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;  //
|	
|КонецЦикла;	                                                              //
|//------------------ конец обработки результата запроса ------------------//
|");




	
	
	
	
КонецПроцедуры

Процедура ПанельПрограмматораПерегнатьВоВремТабл(Кнопка)
ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("
|СформироватьЗапрос(Истина);// Запрос сформируется , и его результат будет выгружен в таблицу РезЗапроса (видна на закладке Результат запроса)
|
|// Активируем эту страничку и инициализируем градусник -------------------//
|ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.Программатор;    //
|ЭлементыФормы.Индикатор.Значение=0;                                       //
|ЭлементыФормы.Индикатор.МаксимальноеЗначение=РезЗапроса.Колонки.Количество();     //
|//------------------------------------------------------------------------//
|ОчиститьСообщения();
|Сообщить(""//	Текст запроса, для перегонки РезЗапроса во временную таблицу: "");
|Сообщить(""""""ВЫБРАТЬ"");
|// Обрабатываем в цикле результат запроса --------------------------------//
|Х=0;
|Для Каждого Кол Из Реззапроса.Колонки Цикл                                        //
|	Х=Х+1;
|	Сообщить(""|	 QRES.""+Кол.Имя+?(Х<Реззапроса.Колонки.Количество(),"","",""""));
|	
|	//-------------- Градусник +1 ----------------------------------------//
|	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;  //
|КонецЦикла;	
|Сообщить(""|    INTO ТМП"");
|Сообщить(""| FROM &QRES as QRES  """""");
|//------------------ конец обработки результата запроса ------------------//
|");

КонецПроцедуры

Процедура КоманднаяПанель6СгенеритьТекстОтчетаСПостроителем(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	
	ТХТ.ДобавитьСтроку(" Построитель = Новый ПостроительОтчета;
	|Построитель.ВыводитьОбщиеИтоги=Истина;
	|Построитель.ТекстЗаголовка="""+ЗаголовокОтчета+""""+";
	|Построитель.Параметры.Очистить();
	|");
	
	
	Для каждого  Стр Из ТППараметров Цикл
		Значение=Стр.Значение;
		ТХТ.ДобавитьСтроку("Построитель.Параметры.Вставить("""+Стр.Имя+""",   <<<"+Значение+">>>   );" );
	КонецЦикла; 
	
	Если РасшифровкаЯчеек=Истина Тогда
		ТХТ.ДобавитьСтроку("Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;");
	КонецЕсли;
	
	
	ТХТ.ДобавитьСтроку("//--------------------------------------- ЗАПРОС ------------------------------------------");
	
	тхз=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	тхз=СтрЗаменить(тхз,"""","""""");
	
	ТХТ.ДобавитьСтроку("Построитель.Текст="""+СтрПолучитьСтроку(тхз,1));
	Для ы=2 по СтрЧислоСтрок(тхз)-1 Цикл
		ТХТ.ДобавитьСтроку("|	"+СтрПолучитьСтроку(тхз,Ы));
	КонецЦикла;	
    ТХТ.ДобавитьСтроку("|"+СтрПолучитьСтроку(тхз,СтрЧислоСтрок(тхз))+""";");
	
	ТХТ.ДобавитьСтроку("//--------------------------------------- ------ ------------------------------------------");
	
    ТХТ.ДобавитьСтроку("Построитель.Выполнить();
	|Построитель.МакетОформления=ПолучитьМакетОформления(СтандартноеОформление.ТРАВА);
	|Построитель.ОформитьМакет();
	|Построитель.Вывести();");
	
	ТХТ.Показать();	
КонецПроцедуры

Процедура ИтогиПоКолонкамВТЗНаФорме(ЭлементФормы)
	
	ЭлементФормы.Подвал=Истина;
	Для Каждого Кол Из ЭлементФормы.Колонки Цикл
		
		Кол.ОтображатьВПодвале=Истина;
		Попытка
			Кол.ОтображатьИтогиВПодвале=Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;	
	
	
КонецПроцедуры	


Процедура КоманднаяПанель12ИтогиПоКолонкам(Кнопка)
	ИтогиПоКолонкамВТЗНаФорме(ЭлементыФормы.ТабЗнач);
КонецПроцедуры

Процедура КоманднаяПанель13ИтогиПоКолонкам(Кнопка)
	ИтогиПоКолонкамВТЗНаФорме(ЭлементыФормы.РезЗапроса);
КонецПроцедуры

Процедура ПанельПрограмматораПараметрыЗапросаДляПрограмматора(Кнопка)
	
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("//----------- Параметры запроса, с закладки ""Параметры запроса"" ---------------------");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("Запрос.Параметры.Очистить();");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("                              ");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("Для Каждого СтрПЗ Из ТППараметров Цикл");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("	Запрос.Параметры.Вставить(СтрПЗ.Имя,СтрПЗ.Значение);");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("КонецЦикла;");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("//------------------------------------------------------------------------------------------------");
	
	
	
	
КонецПроцедуры

Процедура ПанельПрограмматораСконвертироватьКОМтзВНормальнуюТЗССостТипом(Кнопка)
	
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку(" НормальнаяТЗ=СконвертироватьКомТЗВНормальнуюТЗ_ССостТипом(КомТЗ);// Колонки нормальной тз имеют составной тип");

	
КонецПроцедуры

Процедура ПанельПрограмматораСконвертироватьКОМтзВНормальнуюТЗ(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку(" НормальнаяТЗ=СконвертироватьКомТЗВНормальнуюТЗ(КомТЗ);// колонки нормальной тз имеют простой тип");
КонецПроцедуры

Функция ВыделитьИзТекстаПрограммыИменаЭлементовФормы()
	ТХТ=ЭлементыФормы.ТекстПрограммы.ПолучитьТекст();
	
	ТЗИменЭлементовФормы=Новый ТаблицаЗначений;
	ТЗИменЭлементовФормы.Колонки.Добавить("ИмяЭФ");
	
	
	Для Ы=1 По СтрЧислоСтрок(ТХТ) Цикл
		ТекСтр=СтрПолучитьСтроку(ТХТ,Ы);
		
		Поз=Найти(ВРЕГ(ТекСтр),"ЭЛЕМЕНТЫФОРМЫ.");
		
		Если Поз=0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//	ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1; 
		
		Огрызок=Сред(ТекСтр,Поз,СтрДлина(ТекСтр));
		//ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;  // примем что разные элементы формы в одной строке не упоминаются
		Обрубок=СтрЗаменить(Огрызок,"ЭлементыФормы.","");
		//Индикатор.Значение=Индикатор.Значение+1;
		// Ищем первую точку с конца - это имя элемента формы
		ПозТочки=Найти(Обрубок,".");
		
		ТЗИменЭлементовФормы.Добавить().ИмяЭФ=ВРЕГ("// "+Лев(Обрубок,ПозТочки-1));
	КонецЦикла;	
	
	ТЗИменЭлементовФормы.Свернуть("ИмяЭФ","");
	
	ТекстВозврата="";
	Для Каждого Стр Из ТЗИменЭлементовФормы Цикл
		ТекстВозврата=ТекстВозврата+Символы.ПС+Стр.ИмяЭФ;
	КонецЦикла;
	Возврат ТекстВозврата;
КонецФункции


Процедура ПанельПрограмматораГенераторТекстаМодуляОбработки(Кнопка)
	
	ТХТ=Новый ТекстовыйДокумент;
	
	ТХТ.ДобавитьСтроку("// Если Вы используете эту возможность консоли, это означает что Вы представляете что делать дальше.");
	ТХТ.ДобавитьСтроку("//-------------- Текст обработки сгенерирован в GtG's Консоли запросов "+ТекущаяДата()+"-------------------------------------");
	
	ТХТ.ДобавитьСтроку("//-------------- Переменные ----------------------");
	ТХТ.ДобавитьСтроку("Перем Построитель,РезЗапроса,ТППараметров;");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("//-------------- Требуются элементы на форме -----------------");
	ТХТ.ДобавитьСтроку(ВыделитьИзТекстаПрограммыИменаЭлементовФормы());
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
    ТХТ.ДобавитьСтроку("");

	
	//---------------<Функция , выдающая текст запроса>---------------------------// GtG // 22.03.2012 19:06:11
	ТХТ.ДобавитьСтроку("Функция ГЕН_ТекстЗапроса()  // Текст запроса для исполнения");
	ТХТ.ДобавитьСтроку("Возврат ");
	ТХТ.ДобавитьСтроку(ПреобразоватьТекстЗапросаВТекстМодуля().ПолучитьТекст());
	ТХТ.ДобавитьСтроку("КонецФункции //ГЕН_ТекстЗапроса //"+ТекущаяДата());
	//---------------<Процедура выполнения запроса>---------------------------// GtG // 22.03.2012 19:06:46
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	
	ТХТ.ДобавитьСтроку("Процедура СформироватьЗапрос(Запросом=Ложь) 
	|	 
	|		
	|	НачальноеВремя=ТекущаяДата();
	|	
	|	
	|	Построитель.ВыводитьОбщиеИтоги=ИСТИНА;
	|	Построитель.ТекстЗаголовка="""+ЗаголовокОтчета+""" ;
	|	
	|	Построитель.Параметры.Очистить();
	|	
	|	Для каждого  Стр Из ТППараметров Цикл
	|		Если Найти(Стр.Значение,""ДБФФайлВТипизированнуюТЗ"")<>0 Тогда
	|			Запросом=Истина;
	|		КонецЕсли;
	|	КонецЦикла;	
	|	
	|	
	|	Если Запросом=Истина Тогда  // запросом
	|		МВТ=Новый МенеджерВременныхТаблиц;
	|		Запрос=Новый Запрос();
	|		Запрос.МенеджерВременныхТаблиц=МВТ;
	|		
	|		Запрос.Текст=ГЕН_ТекстЗапроса();
	|		Запрос.Параметры.Очистить();
	|		Для каждого  Стр Из ТППараметров Цикл
	|			Если Найти(Стр.Значение,""ДБФФайлВТипизированнуюТЗ"")<>0 Тогда
	|				Значение=Вычислить(Стр.Значение);
	|			Иначе
	|				Значение=Стр.Значение;
	|			КонецЕсли;
	|			Запрос.Параметры.Вставить(Стр.Имя,Значение);
	|		КонецЦикла;
	|		
	|		РезЗапроса=Запрос.Выполнить().Выгрузить();
	|
	|	Иначе	// построителем
	|		 Построитель.Текст=ГЕН_ТекстЗапроса();
	|		
	|		Для каждого  Стр Из ТППараметров Цикл
	|			Значение=Стр.Значение;
	|			Построитель.Параметры.Вставить(Стр.Имя,Значение);
	|		КонецЦикла; 
	|
	|		РасшифровкаЯчеек=ИСТИНА;
	|
	|		Если РасшифровкаЯчеек=Истина Тогда
	|			Построитель.ЗаполнениеРасшифровки=ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	|		КонецЕсли;
	|		Построитель.Выполнить();
	|		Построитель.МакетОформления=ПолучитьМакетОформления(СтандартноеОформление.Трава);
	|		Построитель.ОформитьМакет();
	|		Построитель.Вывести();
	|		
	|	КонецЕсли;
	|КонецПроцедуры");	
	
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	
	
	
	//---------------<Процедура программной обработки результата запроса>---------------------------// GtG // 22.03.2012 19:07:03
	ТХТ.ДобавитьСтроку("Процедура  ГЕН_ПрограммнаяОбработкаРезультатаЗапроса() // Эту процедуру нужно вызвать каким-либо образом. ");
	
	ТХТ.ДобавитьСтроку("//-------------- Параметры запроса -----------------");
	ТХТ.ДобавитьСтроку("ТППараметров.Очистить();");
	ТХТ.ДобавитьСтроку("ТППараметров.Колонки.Добавить(""Имя"");");
	ТХТ.ДобавитьСтроку("ТППараметров.Колонки.Добавить(""Значение"");");
	
	Для Каждого Стр Из ТППараметров Цикл
		
		ТХТ.ДобавитьСтроку("СтрПарам=ТППараметров.Добавить();");
		ТХТ.ДобавитьСтроку("СтрПарам.Имя="+Стр.Имя+";");
		ТХТ.ДобавитьСтроку("СтрПарам.Значение= < "+Стр.Значение+" > ;   // Требуется художественная обработка по месту");
	КонецЦикла;	
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	ТХТ.ДобавитьСтроку(ЭлементыФормы.ТекстПрограммы.ПолучитьТекст());
	ТХТ.ДобавитьСтроку("КонецПроцедуры //ГЕН_ПрограммнаяОбработкаРезультатаЗапроса //"+ТекущаяДата());
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	ТХТ.ДобавитьСтроку("");
	
	
	ТХТ.ДобавитьСтроку("Построитель=Новый ПостроительОтчета;");
	ТХТ.ДобавитьСтроку("ТППараметров=Новый ТаблицаЗначений;");
	
	
	ТХТ.Показать("Черновик обработки "+ТекущаяДата());
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель5ПарамТМПостр(Кнопка)
	ТХТ=Новый ТекстовыйДокумент;
	ТХТ.ДобавитьСтроку("Построитель.Параметры.Очистить();");
	ТХТ.ДобавитьСтроку("//----------------------------- параметры построителя -------------------//");
	Для Каждого Стр Из ТППараметров Цикл
		ТХТ.ДобавитьСтроку("Построитель.Параметры.Вставить("""+Стр.Имя+""","+Стр.Имя+");");
	КонецЦикла;
	
	ТХТ.Показать();

КонецПроцедуры

Процедура КоманднаяПанель13ЗначениеИзФайла(Кнопка)
ДВФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.Фильтр="Файлы сохраненных таблиц значений *.1Stz|*.1Stz";
	ДВФ.ИндексФильтра=0;
	Если ДВФ.Выбрать()=Истина Тогда
		РезЗапроса=ЗначениеИзФайла(ДВФ.ПолноеИмяФайла);
		ЭлементыФормы.РезЗапроса.СоздатьКолонки();
		Предупреждение("Загружено из файла:
		|"+ДВФ.ПолноеИмяФайла,15);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель6УничтожениеВременныхТаблиц(Кнопка)
	
	ТЗВТ=Новый ТаблицаЗначений;
	ТЗВТ.Колонки.Добавить("ИмяВТ");
	ТЗВТ.Колонки.Добавить("ПризнакУдаления",новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Любой)));
	
	Т=ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Для Ы=1 по СтрЧислоСтрок(Т) цикл
		
		ТекСтр=СтрПолучитьСтроку(Т,Ы);
		Если Найти(ТекСтр,"ПОМЕСТИТЬ")<>0 ИЛИ  Найти(ТекСтр,"INTO")<>0 Тогда
			ИмяВТ=СтрЗаменить(ТекСтр,"ПОМЕСТИТЬ","");
			ИмяВТ=СтрЗаменить(ИмяВТ,"INTO","");
			ИмяВТ=СтрЗаменить(ИмяВТ,";","");
			Стр=ТЗВТ.Добавить();
			Стр.ИмяВТ=СокрЛП(ИмяВТ);
			Стр.ПризнакУдаления=1;
		ИначеЕсли Найти(ТекСтр,"УНИЧТОЖИТЬ")<>0 ИЛИ  Найти(ТекСтр,"DELETE")<>0 Тогда
			ИмяВТ=СтрЗаменить(ТекСтр,"УНИЧТОЖИТЬ","");
			ИмяВТ=СтрЗаменить(ИмяВТ,"DELETE","");
			ИмяВТ=СтрЗаменить(ИмяВТ,";","");
			Стр=ТЗВТ.Добавить();
			Стр.ИмяВТ=СокрЛП(ИмяВТ);
			Стр.ПризнакУдаления=-1;	
		КонецЕсли;	
	КонецЦикла;
	
	ТЗВТ.Свернуть( "ИмяВТ","ПризнакУдаления");
	
	ЭлементыФормы.РезЗапроса.Значение=ТЗВТ;
	ЭлементыФормы.РезЗапроса.СоздатьКолонки();
	
	ВТКУдалению=ТЗВТ.НайтиСтроки(Новый Структура("ПризнакУдаления",1));
	
	Если ВТКУдалению.Количество()<>0 Тогда
	    ЭлементыФормы.ТекстЗапроса.ДобавитьСтроку(";
		                                           |//---------- Удаление временных таблиц --------------//");
		Для Каждого Стр Из ВТКУдалению Цикл
			ЭлементыФормы.ТекстЗапроса.ДобавитьСтроку("УНИЧТОЖИТЬ  "+Стр.ИмяВТ+" ;");
		КонецЦикла;	
		
	иначе
		Предупреждение("Нет не удаленных временных таблиц ");
	КонецЕсли;
КонецПроцедуры

Процедура ПанельПрограмматораОчисткаРегистраСведений(Кнопка)
	
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("//--------- ОПАСНО!!!  ПОЛНАЯ ОЧИСТКА РЕГИСТРА СВЕДЕНИЙ!!! --------------------//");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("РС=РегистрыСведений.<<Имя Регистра сведений>>.СоздатьНаборЗаписей();");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("РС.Прочитать();");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("РС.Очистить();");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("РС.Записать();");
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("//--------- ОПАСНО!!! ОПАСНО!!! ОПАСНО!!! ОПАСНО!!! ОПАСНО!!! --------------------//");
	
	
КонецПроцедуры

Процедура ПанельПрограмматораТЗПакета(Кнопка)
	Перем Х;
	ВвестиЧисло(Х,"Номер таблицы результата",10,0);
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ТЗ_"+Х+"= ЭлементыФормы.РезЗапроса"+Х+".Значение;");
КонецПроцедуры

Процедура ПанельПрограмматораЗаполнитьЗначенияСвойств(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ЗаполнитьЗначенияСвойств(<<Приемник>> , <<Источник>>);//,СписокЗаполняемыхСвойств,СписокИсключемыхСвойств);");
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
		
КонецПроцедуры

Процедура КоманднаяПанель14ОткрытьДочернююКонсоль(Кнопка)
	
	ДочерняяКонсоль=ЭтотОбъект.ПолучитьФорму("Форма",,строка(Новый УникальныйИдентификатор));
	ЗДК=ДочерниеКонсоли.Добавить();
	ЗДК.Описание="Еще одна консоль";
	ЗДК.КлючУникальностиОкнаКонсоли=ДочерняяКонсоль.КлючУникальности;
	
	
	ДочерняяКонсоль.Открыть();
	
	
КонецПроцедуры

Процедура ДочерниеКонсолиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КлючУникальностиОкнаКонсоли=ЭтаФорма.КлючУникальности ТОгда
		ОформлениеСтроки.ЦветФона=Новый Цвет(200,200,255);
	КонецЕсли;	
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЭтаФорма.Обновить();
КонецПроцедуры

Процедура ПанельПрограмматораФорма_связаной_консоли_по_КУ(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("Ф1=ЭтотОбъект.ПолучитьФорму(""Форма"",,""<< Ключ уникальности консоли >>""); // далее к окну консоли и данным в нем можно обращаться через переменную Ф1, например Ф1.РезЗапроса");
КонецПроцедуры

Процедура КоманднаяПанель6Открыть_автосейв_Запроса(Кнопка)
	//БекапЗапроса=КаталогВременныхФайлов()+"\1SQuery_bkp.1S.SQL";
	//
	//ТХТ=Новый ТекстовыйДокумент;
	//ТХТ.Прочитать(БекапЗапроса,КодировкаТекста.UTF8,);
	//
	//ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТХТ.ПолучитьТекст());
	
	
	ФОАС=ЭтотОбъект.ПолучитьФорму("ОткрытиеФайловАвтосейва",ЭтаФорма,1);
	ФОАС.РасширениеФайлов="1S.SQL";
	ФОАС.ОткрытьМодально();
	
	Если Вопрос("Открыть автоматически сохраненный текст запроса?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да ТОгда
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ФОАС.ЭлементыФормы.Просмотр.ПолучитьТекст());
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПанельПрограмматораАктивизироватьСтрТЗ(Кнопка)
	ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.ТаблицаЗначений;");
КонецПроцедуры

Процедура ПанельПрограмматораСХБ(Кнопка)
	
ЭлементыФормы.ТекстПрограммы.ДобавитьСтроку("	
	|
	|ИменаБазыДанныхВТерминахСУБД=Истина; // Ложь - в терминах модели БД 1С
	|ОбъектыМетаданных="""";
	|// --------- Вариант по конкретному объекту/объектам ---------------------------------
	|//ОбъектыМетаданных=Новый Массив();
	|//ОбъектыМетаданных.Добавить(Метаданные.Справочники.RfrjqnjNfvCghfdjxybrYfghbvt);
	|//------------------------------------------------------------------------------------
	|
	|ЭлементыФормы.РезЗапроса.Значение=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД) ;
	|
	|//ЭлементыФормы.РезЗапроса.Значение=ПолучитьСтруктуруХраненияБазыДанных(ОбъектыМетаданных, ИменаБазыДанныхВТерминахСУБД).Получить(0).Поля ; // Для получения данных из вложенной таблички
	|
	|
	|ЭлементыФормы.РезЗапроса.СоздатьКолонки();
	|");
	
КонецПроцедуры

Процедура КоманднаяПанель13ПросмотрТаблицыЗначенийИзЯчейки(Кнопка)
	ЗначениеЯчейки=ЭлементыФормы.Реззапроса.ТекущаяСтрока[ЭлементыФормы.РезЗапроса.ТекущаяКолонка.имя];
	
КонецПроцедуры

Процедура Кнопка11Нажатие(Элемент)
	Сообщить(Построитель.ПолучитьЗапрос().Текст);
КонецПроцедуры

Процедура КоманднаяПанель13ОчиститьРезультаты(Кнопка)
	 Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		   Если ЭлемФормы.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		   
		   Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 Тогда
			  ЭлементыФормы.Удалить(ЭлемФормы);
		   КонецЕсли;
	   КонецЦикла;
	   
	   
	   Для Каждого СтрП1 Из ЭлементыФормы.Панель1.Страницы Цикл
		   Если СтрП1.Имя="РезЗапроса" Тогда
			   Продолжить;
		   КонецЕсли;
		   
	   	   ЭлементыФормы.Панель1.Страницы.Удалить(СтрП1);
	   КонецЦикла;
	   
	   Реззапроса.Очистить();
	   
КонецПроцедуры

Процедура КоманднаяПанель13СписокКолонокТекстом(Кнопка)
	// Вставить содержимое обработчика.
	
	Для Каждого ЭлемФормы Из ЭлементыФормы Цикл
		   
		   Если Найти(ЭлемФормы.Имя,"РезЗапроса")<>0 Тогда
			  
			  
			  Сообщить("// Таблица значений "+ЭлемФормы.Имя+"  Колонки:");
			  
			  Для Каждого Кол Из ЭлемФормы.Значение.КОлонки Цикл
				  
			      Сообщить("	"+Кол.Имя);
			  КонецЦикла;
			  
			  
			  
			  
		   КонецЕсли;
	   КонецЦикла;

	
КонецПроцедуры

Процедура КоманднаяПанель1СписокПолейОтбораВТекст(Кнопка)
	
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Измерение");
	ТЗ.Колонки.Добавить("Отбор");
	ТЗ.Колонки.Добавить("ТипЗначения");
	ТЗ.Колонки.Добавить("ПутьКДанным");
	ТЗ.Колонки.Добавить("Родитель");
	ТЗ.Колонки.Добавить("СписокЗначений");


	
	
	Для Каждого ДП из Построитель.ДоступныеПоля Цикл
		Стр=ТЗ.Добавить();		
		
		Стр.Имя=ДП.Имя;
		Стр.Измерение=ДП.Измерение;
		Стр.Отбор   = дп.Отбор;
		Стр.ТипЗначения= дп.ТипЗначения;
		Стр.ПутьКДанным=ДП.ПутьКДанным;
		Стр.Родитель=дп.Родитель;
		Стр.СписокЗначений=дп.СписокЗначений;
	КонецЦикла;
	
	
	ЭлементыФормы.ТабЗнач.Значение=ТЗ;
	ЭлементыФормы.ТабЗнач.СоздатьКолонки();
	
	ЭтаФорма.Панель.ТекущаяСтраница=ЭтаФорма.Панель.Страницы.ТаблицаЗначений;
КонецПроцедуры



ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Апельсин);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Асфальт);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.БезОформления);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Бирюза);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Бронза);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Весна);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Дерево);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Зима);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Интерфейс);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Камень);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Классика);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Классика2);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Классика3);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Лед);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Лето);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Медь);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Осень);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Песок);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Платина);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Серебро);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Текстиль);
ЭлементыФормы.Оформление.СписокВыбора.Добавить(СтандартноеОформление.Трава);

ЭлементыФормы.Оформление.Значение=СтандартноеОформление.Трава;


РасшифровкаЯчеек=Истина;

АвтоДобавлениепредставлений=Истина;



