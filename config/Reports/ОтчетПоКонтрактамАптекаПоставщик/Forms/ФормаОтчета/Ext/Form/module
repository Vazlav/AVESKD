
Перем ЗаголовокПоУмолчанию;


////////////////////////////////
// ВАРИАНТЫ

Процедура _СменаВариантаНастройки (Элемент)
	
	Для каждого Настройка Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		
		Если Элемент.Текст = Настройка.Представление Тогда
			
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройка.Настройки);
			УстановитьЗаголовок(Настройка.Представление);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПараметрыОтчета();
	УстановитьОтборыОтчета();
	УстановитьДанныеДляГруппировки();
	
КонецПроцедуры

Процедура УстановитьВариантыНастроек()
	
	КП = ЭлементыФормы.ДействияФормы; 
	//НоваяКнопка = КП.Кнопки.Вставить(1, "ВариантыОтчета", ТипКнопкиКоманднойПанели.Подменю, "Вариант", ); 
	
	Если СхемаКомпоновкиДанных.ВариантыНастроек.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;	
	
	НовоеДействие = Новый Действие("_СменаВариантаНастройки"); 
	ч = 1;
	
	Для каждого Настройка Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл 		
		
		Если ч = 1 Тогда
			УстановитьЗаголовок(Настройка.Представление);
		КонецЕсли;
		
		НоваяКнопка = КП.Кнопки.ВариантыОтчета.Кнопки.Добавить("Вариант"+Строка(ч), ТипКнопкиКоманднойПанели.Действие, Настройка.Представление, НовоеДействие); 
		
		ч = ч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗаголовок(ИмяВарианта)
	
	Заголовок = ЗаголовокПоУмолчанию + " [Вариант: " + ИмяВарианта + "]";
	
КонецПроцедуры
 

//////////////////////////////////
// РУЧНОЕ ФОРМИРОВАНИЕ

Процедура ДействияФормыСформировать(Кнопка)
	
	ВыполняемаяПроцедура = ОМ_ТСО.ИнициализироватьВыполняемуюПроцедуру(16, ПолучитьПараметрыОтчета());
	Если ВыполняемаяПроцедура = Неопределено Тогда
		Сообщить("Выполнение отчета запрещено!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Попытка
		СформироватьОтчет();
		КолвоСтрок = ЭлементыФормы.Результат.Высота;
		ОМ_ТСО.ЗаписьВЛог(ВыполняемаяПроцедура.Лог, "Отчет сформирован. Кол-во строк: " + КолвоСтрок, 1);
	Исключение
		ТекстОшибки = "Ошибка формирования отчета: " + ОписаниеОшибки();
		ОМ_ТСО.ЗаписьВЛог(ВыполняемаяПроцедура.Лог, ТекстОшибки, -1);
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьОтчет()

	//Если Не ПроверитьЗаполнение() Тогда
	//	Возврат;
	//КонецЕсли;

	//Подготавливаем внешний набор данных
	//ВнешниеДанные = ПолучитьТаблицуВнешнихДанных();
		
	//Получаем схему из макета
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Изменим текст запроса
	//Если ОтборПоОбъемнымСоглашениям Тогда
	//	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "111 = 222", "ИСТИНА");
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "111 = 111", "Товар В (ВЫБРАТЬ вт.Товар ИЗ втТоварыОбъемныхСоглашений КАК вт)");
	//	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
	//КонецЕсли;	
		
	//Из схемы возьмем настройки по умолчанию
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Получим пользовательские настройки
	Настройки = КомпоновщикНастроек.Настройки;
	
	//Определим, задан ли отбор по объемным соглашениям
	//ОтборПоОбъемнымСоглашениям = Ложь;
	//ИскомыйЭлементОтбора = Новый ПолеКомпоновкиДанных("ОбъемноеСоглашение");
	//
	//Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл			
	//	Если ЭлементОтбора.ЛевоеЗначение = ИскомыйЭлементОтбора Тогда
	//		ОтборПоОбъемнымСоглашениям = ЭлементОтбора.Использование;
	//		Прервать;
	//	КонецЕсли;		
	//КонецЦикла;
	
	//Заполним параметры отчета
	//ТекПараметр = Настройки.ПараметрыДанных.Элементы.Найти("Поставщик");
	//ТекПараметр.Использование = Истина;
	//ТекПараметр.Значение = Справочники.Поставщики.НайтиПоКоду(3055);
	
	//ДатаНачала = Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение.ДатаНачала;
	//ДатаОкончания = Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение.ДатаОкончания;

	//Если ДобавитьМесяц(НачалоМесяца(ДатаНачала), 12) <= НачалоМесяца(ДатаОкончания) Тогда 
	//	Сообщить("Период отчета не должен превышать 1 год");
	//	Возврат;
	//КонецЕсли;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Создадим структуру с внешним набором данных  
	ВнешниеНаборыДанных = Новый Структура;
	//ВнешниеНаборыДанных.Вставить("ВнешниеДанные", ВнешниеДанные);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = ЭлементыФормы.Результат;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//Объединяем ячейки в заголовках
	//Результат = ОбработатьЗаголовки(Результат);

КонецПроцедуры

Функция ПолучитьТаблицуВнешнихДанных()
	
КонецФункции


//////////////////////////////////
// ПРОЧЕЕ

Процедура ПриОткрытии()
	
	УстановитьВариантыНастроек();
	УстановитьПараметрыОтчета();
	УстановитьОтборыОтчета();
	УстановитьДанныеДляГруппировки();
	
	Если СформироватьПриОткрытии Тогда
		СформироватьОтчет();		
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ОтобразитьСкрытьНастройки(Кнопка)
	
	Если Кнопка.Пометка Тогда //Сворачиваем	
		
		Элементыформы.ПанельНастроек.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
        Элементыформы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Элементыформы.ПанельНастроек, ГраницаЭлементаУправления.Низ);
		
		ЭлементыФормы.ПанельНастроек.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	Иначе //Разворачиваем
		
		ЭлементыФормы.ПанельНастроек.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Элементыформы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Элементыформы.Разделитель, ГраницаЭлементаУправления.Низ);
        Элементыформы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элементыформы.Результат, ГраницаЭлементаУправления.Верх);
        
        Элементыформы.ПанельНастроек.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Элементыформы.ДействияФормы, ГраницаЭлементаУправления.Низ);
        Элементыформы.ПанельНастроек.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элементыформы.Разделитель, ГраницаЭлементаУправления.Верх);
		
	КонецЕсли;  
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	
КонецПроцедуры

Процедура УстановитьОтборыОтчета()

	//УстановитьЭлементОтбора("Склад.Бренд", Справочники.БрендыАптечныхСетей.НайтиПоКоду(1), ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

Процедура УстановитьЭлементОтбора(ИмяПоля, ЗначениеПоля, ВидСравнения)

	ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	   	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			ЭлементОтбораДанных = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораДанных = Неопределено Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
	КонецЕсли;
	
	ЭлементОтбораДанных.ВидСравнения = ВидСравнения;
	ЭлементОтбораДанных.ПравоеЗначение = ЗначениеПоля;
	ЭлементОтбораДанных.Использование = Истина;

КонецПроцедуры

Процедура УстановитьПараметрыОтчета()

КонецПроцедуры

Процедура УстановитьДанныеДляГруппировки()
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ЭлементыФормы.Структура.ТекущаяСтрока = Элемент;
			Возврат;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда 			
			Для Каждого СтрокаТаблицы Из Элемент.Строки Цикл
				Если ТипЗнч(СтрокаТаблицы) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
					ЭлементыФормы.Структура.ТекущаяСтрока = СтрокаТаблицы;
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьЧисло(ИсходноеЗначение)
	
	Попытка 
		Возврат Формат(Число(ИсходноеЗначение), "ЧГ=0");
	Исключение
		Возврат ИсходноеЗначение;
	КонецПопытки;	
	
КонецФункции

Функция ОбъединятьЯчейки(ТабДок, индСтр, индКол)
	
    Ячейка = ТабДок.Область(индСтр, индКол);
    ЯчейкаСлед = ТабДок.Область(индСтр, индКол+1);
    Если ПустаяСтрока(Ячейка.Текст) Тогда
        Возврат ложь
    ИначеЕсли
        Ячейка.Текст = ЯчейкаСлед.Текст
            И Ячейка.Верх = Ячейка.Низ И ЯчейкаСлед.Верх = ЯчейкаСлед.Низ Тогда
        Возврат Истина;
    Иначе
        Возврат ложь
	КонецЕсли;
	
КонецФункции

Функция ОбработатьЗаголовки(ТабДок)
	
    ВысотаФ = ТабДок.ФиксацияСверху;
    ШиринаФ = ТабДок.ФиксацияСлева;
    ОбъединяемаяОбласть = Неопределено;
    Для индСтр = -ВысотаФ По -1 Цикл
        Если ТабДок.Область(-индСтр,1).Текст = "" Тогда
            Возврат ТабДок;
        КонецЕсли; 
        НачальнаяКолонка = 0;
        Для индКол=ШиринаФ+1 По ТабДок.ШиринаТаблицы Цикл
            Если ОбъединятьЯчейки(ТабДок, -индСтр, индКол) Тогда
                Если не НачальнаяКолонка Тогда
                    НачальнаяКолонка = индКол;
                КонецЕсли;
            ИначеЕсли НачальнаяКолонка Тогда
                ТекстЗаголовка = ТабДок.Область(-индСтр, индКол).Текст;
                ОбъединяемаяОбласть = ТабДок.Область(-индСтр, НачальнаяКолонка, -индСтр, индКол);
                ОбъединяемаяОбласть.Объединить();
                ОбъединяемаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
                ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
                НачальнаяКолонка = 0;
            Иначе
                НачальнаяКолонка = 0;
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
	
    Возврат ТабДок;
	
КонецФункции

Функция ПолучитьПараметрыОтчета()

	СтрокаПараметров = 
	"Пользователь: " + ПараметрыСеанса.ТекущийСотр + ";" + Символы.ПС; 
		
	Для Каждого ТекПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если ТекПараметр.Использование Тогда
			СтрокаПараметров = СтрокаПараметров + "Параметр " + ТекПараметр.Параметр + " = " + ТекПараметр.Значение + ";" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Если Строка(КомпоновщикНастроек.Настройки.Отбор) = "" Тогда
		СтрокаПараметров = Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров)-1);
	Иначе
		СтрокаПараметров = СтрокаПараметров + "Отбор: " + КомпоновщикНастроек.Настройки.Отбор;		
	КонецЕсли;
	
	Возврат СтрокаПараметров;

КонецФункции


ЗаголовокПоУмолчанию = ЭтаФорма.Заголовок;
