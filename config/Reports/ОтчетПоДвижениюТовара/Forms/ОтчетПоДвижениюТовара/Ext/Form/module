

Процедура РасчетШириныКолонок(ТабличныйДокумент) Экспорт
	
	Перем МаксимальнаяШиринаКолонки;
	Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
	Перем ОбластьШапки, ОбластьПодвала;
	Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
	Перем КоличествоУровнейГруппировокСтрок, Отступ;
	Перем ШириныКолонок;
	
	
	Состояние(НСтр("ru='Выполняется расчет ширины колонок...'"));
	
	// Ограничение максимальной ширины колонки
	МаксимальнаяШиринаКолонки = 60;
	
	// Массив, в который будут помещаться ширины колонок
	ШириныКолонок = Новый Массив;
	
	// Получим количество уровней группировок в отчете для учета автоматического отступа
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	// Инициализируем начальные строки
	НачальнаяСтрока = 0;
	НачалоДанных = 0;
	
	// Найдем в результирующем документе область шапки таблицы
	ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
	
	Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
		НачальнаяСтрока = ОбластьШапки.Верх;
		НачалоДанных = ОбластьШапки.Низ + 1;
		
	Иначе
		
		// Если область шапки таблицы не найдена, найдем область шапки строк
		ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
		
		Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
			НачальнаяСтрока = ОбластьШапки.Верх;
			НачалоДанных = ОбластьШапки.Низ + 1;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Получим область подвала отчета и вычислим конечную строку расчета
	ОбластьПодвала = ТабличныйДокумент.Области.Найти("Подвал");
	
	Если ТипЗнч(ОбластьПодвала) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		// Область подвала найдена
		КонечнаяСтрока = ОбластьПодвала.Верх - 1;
		
	Иначе 
		
		// Область подвала не найдена
		КонечнаяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		
	КонецЕсли;
	
	// Переберем все колонки отчета
	Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		АвтоОтступ = 0;
		
		// Переберем строки, которые будут использованы для расчета ширин колонок
		Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
			
			ШиринаКолонки = 0;

			// Получим область текущей ячейки
			ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
			
			Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
				
				// Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой
				Продолжить;
				
			КонецЕсли;
			
			Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
				
				// Для первой строки с данными получим значение автоотступа
				АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
				
			КонецЕсли;
			
			// Получим текст ячейки
			ТекстЯчейки = ОбластьЯчейки.Текст;
			
			// Для каждой строки из текста ячейки рассчитаем количество символов в строке
			Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
				
				ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста));
				
				//Если НЕ мРассчитыватьШиринуКолонкиПоНазванию И ТекущаяСтрока < НачалоДанных И ШиринаТекстаЯчейки > 0 Тогда
				//	
				//	ШиринаТекстаЯчейки = мМинимальнаяШиринаКолонкиПоказатель;
				//	
				//КонецЕсли;
				
				// Если используется автоотступ, то прибавим к ширине ячейки его величину
				Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
					
					ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
					
				КонецЕсли;
				
				ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);

			КонецЦикла;

			Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
				
				// Ограничим ширину колонки
				ШиринаКолонки = МаксимальнаяШиринаКолонки;
				
			КонецЕсли;
			
			Если ШиринаКолонки <> 0 Тогда
			// Ширина колонки рассчитана
				
				// Определим, сколько ячеек по ширине используется в области для текущей ячейки
				КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
				
				// Переберем все ячейки, расположенные в области
				Для НомерКолонки = 0 По КоличествоКолонок Цикл
					
					Если ШириныКолонок.ВГраница() >= ТекущаяКолонка - 1 + НомерКолонки Тогда
						
						// В массиве ширин колонок уже был элемент для текущей колонки
						Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
							
							// Значение ширины колонки еще не было установлено
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
							
						Иначе
							
							// Значение ширины колонки уже было установлено
							// Вычислим максимум ширины колонки
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
							
						КонецЕсли;
						
					Иначе
						
						// В массиве ширин колонок еще не было элемента для данной колонки
						// Добавим элемент в массив ширин колонок
						ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;	// Конец цикла перебора строк
		
	КонецЦикла;	// Конец цикла перебора колонок
	
	// Переберем все элементы в массиве вычисленных ширин колонок
	Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
		
		Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
			
			// Ширина колонок установлена
			// Установим ширину области ячеек
			Если ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки < ШириныКолонок[ТекущаяКолонка] + 1 Тогда
				
				ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // РасчетШириныКолонок()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетПоДвижениюТовараИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОбработкиОтчетПоДвижениюТовараОтчетПоДвижениюТовара_61ac250c-8784-4b90-8771-613f86cfaf9e", ПостроительОтчетаОтчетПоДвижениюТовара.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетПоДвижениюТовараНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(ОтчетПоДвижениюТовара)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешняяОбработкаОбъект.ПолучитьФорму("ОтчетПоДвижениюТовараНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчетПоДвижениюТовара;
	Настройка = ПостроительОтчетаОтчетПоДвижениюТовара.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетПоДвижениюТовараВывести();
	Иначе
		ПостроительОтчетаОтчетПоДвижениюТовара.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетПоДвижениюТовараСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(ОтчетПоДвижениюТовара)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетПоДвижениюТовараВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОформитьЗаголовок(ТабличныйДокумент)
	
	ОбластьЗаголовок = ТабличныйДокумент.Области.Найти("Заголовок");
	
	Если ТипЗнч(ОбластьЗаголовок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьНазваниеОтчета = ТабличныйДокумент.Область(ОбластьЗаголовок.Верх, 2, ОбластьЗаголовок.Верх, 2);
		ОбластьНазваниеОтчета.Шрифт = Новый Шрифт(ОбластьНазваниеОтчета.Шрифт,, 12, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОформитьЗаголовок()


Процедура ОтчетПоДвижениюТовараВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(ОтчетПоДвижениюТовара)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//ПарамОтбора = "";
	//Для каждого стр из ПостроительОтчетаОтчетПоДвижениюТовара.Отбор Цикл
	//		ПарамОтбора = ПарамОтбора  + стр.ПутьКДанным + ": " + стр.Значение+ Символы.ПС;
	//КонецЦикла;
	
    ПостроительОтчетаОтчетПоДвижениюТовара.Параметры.Вставить("НачПериода",НачПериода);
	ПостроительОтчетаОтчетПоДвижениюТовара.Параметры.Вставить("КонПериода",КонПериода);
	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	ПостроительОтчетаОтчетПоДвижениюТовара.ОформитьМакет();
	ПостроительОтчетаОтчетПоДвижениюТовара.Выполнить();
	ПостроительОтчетаОтчетПоДвижениюТовара.ТекстЗаголовка = "Отчет по движению товара с "+ Формат(НачПериода,"ДФ=dd.MM.yyyy") + " по " + Формат(КонПериода,"ДФ=dd.MM.yyyy");// + "" + Символы.ПС + ПарамОтбора;
	ПостроительОтчетаОтчетПоДвижениюТовара.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчетПоДвижениюТовара.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчетПоДвижениюТовара.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	
	ПостроительОтчетаОтчетПоДвижениюТовара.Макет = Неопределено;
	ПостроительОтчетаОтчетПоДвижениюТовара.МакетОформления = Неопределено;
	ПостроительОтчетаОтчетПоДвижениюТовара.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);	
	
	Макет = ПостроительОтчетаОтчетПоДвижениюТовара.Макет;
	// Отборы
	НомерСтрокиМакета = 3;//Макет.ВысотаТаблицы + 1;
	ВысотаЗаголовка = 0;
	ПредставлениеОтборы = "";
	//Сообщить(Макет.ВысотаТаблицы);
	Для каждого Отбор из ПостроительОтчетаОтчетПоДвижениюТовара.Отбор Цикл
		
		Если Отбор.Использование И Отбор.Имя <> "Периодичность" Тогда
			
			ПредставлениеОтборы = ПредставлениеОтборы + "
			|" + Отбор.Представление + " ";
			
			Если Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' > '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И < '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' >= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И <= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' >= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И < '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' > '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И <= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке ИЛИ Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ Отбор.ВидСравнения = ВидСравнения.НеВСписке ИЛИ Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ВидСравнения + " (" + Отбор.Значение + ")";
				
			Иначе
				
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ВидСравнения + " " + Отбор.Значение;
				
			КонецЕсли;
			
			ПредставлениеОтборы = ПредставлениеОтборы + ";";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеОтборы) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Отборы:'") + ПредставлениеОтборы;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	//Сообщить(ПредставлениеОтборы);
    ПостроительОтчетаОтчетПоДвижениюТовара.Макет = Макет;
	ПостроительОтчетаОтчетПоДвижениюТовара.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
	ОформитьЗаголовок(ЭлементыФормы.ПолеТабличногоДокумента);
	РасчетШириныКолонок(ЭлементыФормы.ПолеТабличногоДокумента);

	
	

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетПоДвижениюТовараИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(ОтчетПоДвижениюТовара)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	//ПостроительОтчетаОтчетПоДвижениюТовара.Текст =
	//"ВЫБРАТЬ
	//|	ПартииЖНВЛСОбороты.Период КАК Период,
	//|	ПартииЖНВЛСОбороты.Склад КАК Склад,
	//|	ПартииЖНВЛСОбороты.Склад.Представление,
	//|	ПартииЖНВЛСОбороты.Товар КАК Товар,
	//|	ПартииЖНВЛСОбороты.Товар.Представление,
	//|	ПартииЖНВЛСОбороты.Партия КАК Партия,
	//|	СУММА(ПартииЖНВЛСОбороты.КолвоПриход) КАК КолвоПриход,
	//|	СУММА(ПартииЖНВЛСОбороты.СуммаЗакупСНДСПриход) КАК СуммаЗакупСНДСПриход,
	//|	СУММА(ПартииЖНВЛСОбороты.СуммаРознСНДСПриход) КАК СуммаРознСНДСПриход,
	//|	СУММА(ПартииЖНВЛСОбороты.КолвоРасход) КАК КолвоРасход,
	//|	СУММА(ПартииЖНВЛСОбороты.СуммаЗакупСНДСРасход) КАК СуммаЗакупСНДСРасход,
	//|	СУММА(ПартииЖНВЛСОбороты.СуммаРознСНДСРасход) КАК СуммаРознСНДСРасход
	//|{ВЫБРАТЬ
	//|	Период,
	//|	Склад.*,
	//|	Товар.*,
	//|	Партия.*,
	//|	КолвоПриход,
	//|	СуммаЗакупСНДСПриход,
	//|	СуммаРознСНДСПриход,
	//|	КолвоРасход,
	//|	СуммаЗакупСНДСРасход,
	//|	СуммаРознСНДСРасход}
	//|ИЗ
	//|	РегистрНакопления.ПартииЖНВЛС.Обороты(&НачПериода, &КонПериода, Месяц, {(Товар).*, (Склад)}) КАК ПартииЖНВЛСОбороты
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПартииЖНВЛСОбороты.Период,
	//|	ПартииЖНВЛСОбороты.Склад,
	//|	ПартииЖНВЛСОбороты.Склад.Представление,
	//|	ПартииЖНВЛСОбороты.Товар,
	//|	ПартииЖНВЛСОбороты.Товар.Представление,
	//|	ПартииЖНВЛСОбороты.Партия
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Период,
	//|	Товар
	//|ИТОГИ
	//|	СУММА(КолвоПриход),
	//|	СУММА(СуммаЗакупСНДСПриход),
	//|	СУММА(СуммаРознСНДСПриход),
	//|	СУММА(КолвоРасход),
	//|	СУММА(СуммаЗакупСНДСРасход),
	//|	СУММА(СуммаРознСНДСРасход)
	//|ПО
	//|	ОБЩИЕ,
	//|	Период,
	//|	Склад
	//|{ИТОГИ ПО
	//|	Период,
	//|	Склад.*,
	//|	Товар.*,
	//|	Партия.*,
	//|	КолвоПриход,
	//|	СуммаЗакупСНДСПриход,
	//|	СуммаРознСНДСПриход,
	//|	КолвоРасход,
	//|	СуммаЗакупСНДСРасход,
	//|	СуммаРознСНДСРасход}";
	
	НачПериода = НачалоМесяца(ТекущаяДата());
	КонПериода = КонецМесяца(ТекущаяДата());
	ПостроительОтчетаОтчетПоДвижениюТовара.Текст =
	"ВЫБРАТЬ
	|	ПартииЖНВЛСОбороты.Период КАК Период,
	|	ПартииЖНВЛСОбороты.Склад КАК Склад,
	|	ПартииЖНВЛСОбороты.Склад.Представление,
	|	ПартииЖНВЛСОбороты.Товар КАК Товар,
	|	ПартииЖНВЛСОбороты.Товар.Представление,
	|	ПартииЖНВЛСОбороты.Партия КАК Партия,
	|	ПартииЖНВЛСОбороты.КолвоПриход КАК КолвоПриход,
	|	ПартииЖНВЛСОбороты.СуммаЗакупСНДСПриход КАК СуммаЗакупПриход,
	|	ПартииЖНВЛСОбороты.СуммаРознСНДСПриход КАК СуммаРознПриход,
	|	ПартииЖНВЛСОбороты.КолвоРасход КАК КолвоРасход,
	|	ПартииЖНВЛСОбороты.СуммаЗакупСНДСРасход КАК СуммаЗакупРасход,
	|	ПартииЖНВЛСОбороты.СуммаРознСНДСРасход КАК СуммаРознРасход,
	|	ПартииЖНВЛСОбороты.КолвоКонечныйОстаток КАК Остаток,
	|	ПартииЖНВЛСОбороты.СуммаЗакупСНДСКонечныйОстаток КАК СуммаЗакупОстаток,
	|	ПартииЖНВЛСОбороты.СуммаРознСНДСКонечныйОстаток КАК СуммаРознОстаток
	|{ВЫБРАТЬ
	|	Период,
	|	Склад.*,
	|	Товар.*,
	|	Партия.*,
	|	КолвоПриход,
	|	СуммаЗакупПриход КАК СуммаЗакупПриход,
	|	СуммаРознПриход КАК СуммаРознПриход,
	|	КолвоРасход,
	|	СуммаЗакупРасход КАК СуммаЗакупРасход,
	|	СуммаРознРасход КАК СуммаРознРасход,
	|	Остаток,
	|	СуммаЗакупОстаток,
	|	СуммаРознОстаток}
	|ИЗ
	|	РегистрНакопления.ПартииЖНВЛС.ОстаткиИОбороты(&НачПериода, &КонПериода, Месяц, , {(Товар).*, (Склад)}) КАК ПартииЖНВЛСОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Товар
	|ИТОГИ
	|	СУММА(КолвоПриход),
	|	СУММА(СуммаЗакупПриход),
	|	СУММА(СуммаРознПриход),
	|	СУММА(КолвоРасход),
	|	СУММА(СуммаЗакупРасход),
	|	СУММА(СуммаРознРасход),
	|	СУММА(Остаток),
	|	СУММА(СуммаЗакупОстаток),
	|	СУММА(СуммаРознОстаток)
	|ПО
	|	ОБЩИЕ,
	|	Период,
	|	Склад
	|{ИТОГИ ПО
	|	Период,
	|	Склад.*,
	|	Товар.*,
	|	Партия.*,
	|	КолвоПриход,
	|	СуммаЗакупПриход КАК СуммаЗакупПриход,
	|	СуммаРознПриход КАК СуммаРознПриход,
	|	КолвоРасход,
	|	СуммаЗакупРасход КАК СуммаЗакупРасход,
	|	СуммаРознРасход КАК СуммаРознРасход
	|	}";
	
	ПостроительОтчетаОтчетПоДвижениюТовара.ЗаполнитьНастройки();
	ПостроительОтчетаОтчетПоДвижениюТовара.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчетПоДвижениюТовара.ТекстЗаголовка = "Отчет по движению товара";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОбработкиОтчетПоДвижениюТовараОтчетПоДвижениюТовара_61ac250c-8784-4b90-8771-613f86cfaf9e");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчетПоДвижениюТовара.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройки(Кнопка)
	
	ИмяФайла = "";
	ИмяПути = "";
	ЗапрашиватьИмяФайла = Истина;
	
	Если ПустаяСтрока(ИмяФайла) или ЗапрашиватьИмяФайла Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.ПолноеИмяФайла = ИмяФайла;
		Диалог.Каталог = ИмяПути;
		Диалог.Заголовок = "Укажите файл для сохранения настроек";
		Диалог.Фильтр = "Файлы настроек (*.opt)|*.opt|Все файлы (*.*)|*.*";
		Диалог.Расширение = "opt";
		Если Диалог.Выбрать() Тогда
			ИмяФайла = Диалог.ПолноеИмяФайла;
			ИмяПути = Диалог.Каталог;
		КонецЕсли;
	КонецЕсли;
	
	Настройки = ПостроительОтчетаОтчетПоДвижениюТовара.ПолучитьНастройки();

	ЗначениеВФайл(ИмяФайла, Настройки);
КонецПроцедуры

Процедура ДействияФормыВосстановитьНастройки(Кнопка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл настроек";
	Диалог.Фильтр = "Файлы запросов (*.opt)|*.opt|Все файлы (*.*)|*.*";
	Диалог.Расширение = "opt";
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		ИмяПути = Диалог.Каталог;
	Иначе
		//Сообщить("отказались");
		Возврат;
	КонецЕсли;
	
	
	Попытка
		ПолученноеЗначение = ЗначениеИзФайла(ИмяФайла);
		ПостроительОтчетаОтчетПоДвижениюТовара.УстановитьНастройки(ПолученноеЗначение,истина);	
	Исключение
		Предупреждение("Невозможно загрузить настройки из указанного файла!
		|Выберите другой файл.");
	КонецПопытки;
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры
























